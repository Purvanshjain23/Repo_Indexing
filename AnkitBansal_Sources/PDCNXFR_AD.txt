// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCNXFR
// ?Date: 14.08.2025 Time: 03:34:06
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?FP1309 Age routines with From and To Date and number of Days
DO;

//?Add new program ...find new fields changes  to the parm list
ENDDO;

//?parms on the new fields were also changed
//?E3014  RMC 3/11/14  Get the Sold 100% Frozen Sts
//?Age Limit - Production (PAR Context) (Age Code) removed fp1309
CASE;

// IF PAR.Warehouse Std Chill Time is yes
IF PAR.Warehouse_Std_Chill_Time = 'Y';

//?par.age code=adjusted age code
// LCL.Chilling Time USR = PAR.Warehouse Chill Time
LCL.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

//?Age Limit - Production (PAR Context) (Age Code) removed fp1309
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Chilling Time USR = PAR.Fresh Chilling Time
LCL.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

ENDIF;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_Age_Days);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);

CASE;

// IF PAR.Production Date USR is Entered
IF PAR.Production_Date_USR <> *ZERO;

// PAR.Production Date = PAR.Production Date USR
PAR.Production_Date = PAR.Production_Date_USR;

// PAR.Production Date RGF = PAR.Production Date USR
PAR.Production_Date_RGF = PAR.Production_Date_USR;

// PAR.Production Date RGT = PAR.Production Date USR
PAR.Production_Date_RGT = PAR.Production_Date_USR;

ENDIF;

//?Retrieve Week End date for *JOB DATE
EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(WRK.Julian_Date);
PARAMETER(PAR.Accounting_Year_Code);
PARAMETER(PAR.Accounting_Period_Code);
PARAMETER(PAR.OM_Week);
PARAMETER(WRK.Day_of_Week);
PARAMETER(PAR.Week_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Week_End_Date_USR);
PARAMETER(PAR.Accounting_Year_Code);
PARAMETER(PAR.Accounting_Period_Code);
PARAMETER(7);
PARAMETER(PAR.Week_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FP1054 - new
EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Ship Off Cut Orders -- adjust TO date to job date FP1054 04/02/09
CASE;

// IF PAR.ATS Adj Type USR 2 is Ship Off Cut
IF PAR.ATS_Adj_Type_USR_2 = 'SC';

// AND PAR.Production Date RGT LT JOB.*Job date
AND PAR.Production_Date_RGT < JOB.*Job_date;

//?RMC 6/24/19 CHG TO LOOK AT par.ATS adj type usr2 --> it has shipoffcut!
// PAR.Production Date RGT = JOB.*Job date
PAR.Production_Date_RGT = JOB.*Job_date;

// PAR.Production Date = PAR.Production Date RGT
PAR.Production_Date = PAR.Production_Date_RGT;

// PAR.Production Date RGF = PAR.Production Date RGT
PAR.Production_Date_RGF = PAR.Production_Date_RGT;

ENDIF;

//?R11918 DN 10/19/17-Get Allocation Method here instead.
EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Allocation_Method);
PARAMETER(PAR.Order_Number);
{
 //?USER: Initialize routine

 //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
 //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Scheduled_Ship_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Allocation Method is Standard or Blank
 IF DB1.Allocation_Method = *BLANK/'S';

 EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(3);
 PARAMETER(LCL.Date_USR);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*DATE = DB1.Post to G/L Date
  PAR.*DATE = DB1.Post_to_G_L_Date;

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

 }

 CASE;

 // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
 IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

 // PAR.Allocation Method = CND.Forward - ASAP
 PAR.Allocation_Method = 'F';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = CND.Backwards - JIT
 PAR.Allocation_Method = 'B';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Allocation Method = DB1.Allocation Method
 PAR.Allocation_Method = DB1.Allocation_Method;

 ENDIF;

}


//?R13899 RMC 10/11/18-If OD is price type= DST/TNK force to suspended sts
EXECUTE FUNCTION(Rtv Price Type        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1890565;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.OD_Price_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?dst/tnk  - force allocation method to I
CASE;

// IF LCL.OD Price Type is Distressed
IF LCL.OD_Price_Type = 'DST';

// OR LCL.OD Price Type is Tanked
OR LCL.OD_Price_Type = 'TNK';

// LCL.Allocation Method = CND.Suspended-Inventory Only
LCL.Allocation_Method = 'I';

ENDIF;

//?R13899 RMC 10/11/18-If OH Is a BLOCK order,then do not alloc any inventory
// LCL.Block Order Flag = CND.*Blank
LCL.Block_Order_Flag = *BLANK;

EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Block_Order_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Allocate Inventory, Production, and/or Standard Mix
CASE;

// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

//?par.usr age code is the order's age code
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Prod_Ovr_AgeDte_Fr_Usr);
PARAMETER(PAR.Prod_Ovr_AgeDte_To_Usr);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

//?FP1054 added for ww order sched when selecting the prod dates.  5/06/09
CASE;

// IF PAR.Production Date USR is Entered
IF PAR.Production_Date_USR <> *ZERO;

// LCL.Production Date RGF = PAR.Production Date USR
LCL.Production_Date_RGF = PAR.Production_Date_USR;

// LCL.Production Date RGT = PAR.Production Date USR
LCL.Production_Date_RGT = PAR.Production_Date_USR;

ENDIF;

//?FP1054 - FREEZER - Allow production JIT going backwards, then inventory
//? as long as the RGT is GE curr date-- changed to GE on 2/12/09.
//? We want to allocate std or prd for current date
CASE;

// IF LCL.Block Order Flag is Firm Order
IF LCL.Block_Order_Flag = 'F';

//?Freezer -- Alloc inventory First       5/26/09
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate-Inv Last
IF PAR.ATS_Adj_Type_USR = 'OL';

//?Freezer -- Alloc inventory First       5/26/09
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.WHS Inventory Chill Time is greater than zero
IF PAR.WHS_Inventory_Chill_Time > *ZERO;

//?E2073 9/18/12
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.WHS_Inventory_Chill_Time);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

ENDIF;

//?FP1054 4/14/09 pass in lcl.prod date rgt+1 day for TO date OR job date
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate-ovrde FZ
IF PAR.ATS_Adj_Type_USR = 'OF';

// LCL.To Date               USR = JOB.*Job date
LCL.To_Date_USR = JOB.*Job_date;

//?FP1054 4/14/09 pass in lcl.prod date rgt+1 day for TO date OR job date
// IF PAR.ATS Adj Type USR is Order Allocate-ovrde FO
IF PAR.ATS_Adj_Type_USR = 'FO';

// LCL.Production Date RGF = LCL.Production Date RGF + CON.-730 *DAYS
LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF '-730' 'DY' 1111111 'NONE'              +
'N' 1);

//?E2073 8/01/12
// LCL.Days in Freezer       USR = PAR.WHS Inventory Chill Time * CON.-1 *
LCL.Days_in_Freezer_USR = PAR.WHS_Inventory_Chill_Time * -1;

// LCL.To Date               USR = PAR.Ship Date USR + LCL.Days in Freezer       USR *DAYS
LCL.To_Date_USR = DATEINCR(PAR.Ship_Date_USR LCL.Days_in_Freezer_USR 'DY' 1111111 'NONE'           +
'N' 1);

//?E14823 JJH 04/19/19 - Added 2009 and commented out now per Avi Dias.
//?FP1054 4/14/09 pass in lcl.prod date rgt+1 day for TO date OR job date
// IF *OTHERWISE
IF *OTHERWISE;

//?E2073 8/01/12
// LCL.Days in Freezer       USR = PAR.WHS Inventory Chill Time * CON.-1 *
LCL.Days_in_Freezer_USR = PAR.WHS_Inventory_Chill_Time * -1;

// LCL.To Date               USR = PAR.Ship Date USR + LCL.Days in Freezer       USR *DAYS
LCL.To_Date_USR = DATEINCR(PAR.Ship_Date_USR LCL.Days_in_Freezer_USR 'DY' 1111111 'NONE'           +
'N' 1);

//?E14823 JJH 04/19/19 - Added 2009 and commented out now per Avi Dias.
ENDIF;

EXECUTE FUNCTION(UPD Allocate Inv      IF) TYPE(EXCINTFUN)                      AC1477228;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Order_From_Warehouse);
PARAMETER(LCL.To_Date_USR);
{
 //?Execute internal function

 //?FP1054 4/14/09 Changed to pass par.to date usr to RTV
 //?Allocate Inventory
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(UPD Allocate Inv      RT) TYPE(RTVOBJ) FILE(POCWCPP)           AC1664875;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date_RGF);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.To_Date_USR);
 {
  //?USER: Initialize routine

  // PAR.Quantity Allocated USR = CON.*ZERO
  PAR.Quantity_Allocated_USR = *ZERO;

  // PAR.Weight Allocated USR = CON.*ZERO
  PAR.Weight_Allocated_USR = *ZERO;

  //?USER: Process Data record

  //?FP1054 this used to quit when the job date was reached.
  //?  now it quits when par.to date is reached. for the freezer it will
  //?  be the freeze time number of days before the sched ship.
  //?  For Fresh, it will be the job date
  //?RMC 10.2.19 change GE to GT
  CASE;

  // IF DB1.Production Date GT PAR.To Date               USR
  IF DB1.Production_Date > PAR.To_Date_USR;

  // OR PAR.ATS Quantity Need USR is Less than or equal zero
  OR PAR.ATS_Quantity_Need_USR <= *ZERO;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Rtv Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647033;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.OD_Quantity_Inv_Sched);
  PARAMETER(LCL.OD_Weight_Inv_Sched);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
   PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

   // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.OD Weight Inv Sched
   PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.OD_Weight_Inv_Sched;

  }

  // PAR.ATS Quantity Avail USR = DB1.Quantity on Hand - U/M1 - LCL.OD Quantity Inv Sched
  PAR.ATS_Quantity_Avail_USR = DB1.Quantity_on_Hand_UOM1 - LCL.OD_Quantity_Inv_Sched;

  // PAR.ATS Weight Available USR = DB1.Quantity on Hand - Weight - LCL.OD Weight Inv Sched
  PAR.ATS_Weight_Available_USR = DB1.Quantity_on_Hand_Weight - LCL.OD_Weight_Inv_Sched;

  //?Allocate Available Inventory
  CASE;

  // IF PAR.ATS Quantity Avail USR is GT Zero
  IF PAR.ATS_Quantity_Avail_USR > *ZERO;

  //?Allocate
  CASE;

  // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

  // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
  PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

  // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
  PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

  //?Allocate
  // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
  PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

  //?Allocate
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647004;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Ord Dtl Sch-Inv   CR) TYPE(CRTOBJ) FILE(POB5CPP)           AC1647001;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.OD Quantity Inv Sched
   LCL.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.OD_Quantity_Inv_Sched;

   // LCL.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.OD Weight Inv Sched
   LCL.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.OD_Weight_Inv_Sched;

   CASE;

   // IF LCL.OD Quantity Inv Sched is LE Zero
   IF LCL.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Quantity_Inv_Sched);
   PARAMETER(LCL.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.Quantity_Allocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 }

 ENDIF;

}


ENDIF;

ENDIF;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Prod_Ovr_AgeDte_Fr_Usr);
PARAMETER(PAR.Prod_Ovr_AgeDte_To_Usr);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

//?FP1054 added for ww order sched when selecting the prod dates.  5/06/09
CASE;

// IF PAR.Production Date USR is Entered
IF PAR.Production_Date_USR <> *ZERO;

// LCL.Production Date RGF = PAR.Production Date USR
LCL.Production_Date_RGF = PAR.Production_Date_USR;

// LCL.Production Date RGT = PAR.Production Date USR
LCL.Production_Date_RGT = PAR.Production_Date_USR;

ENDIF;

//?R11918 DN 10/19/17-Commented out routine & moved below.
//?R11918 DN 10/19/17-Do Not Process Allocation if 'I=Suspended Inventory'.
CASE;

// IF NOT LCL.Allocation Method is Suspended-Inventory Only
IF ! LCL.Allocation_Method = 'I';

//?Do this for FZ only if 2=sched (ie. prod date usr > 0)
CASE;

// IF PAR.Production Date USR is Entered
IF PAR.Production_Date_USR <> *ZERO;

CASE;

// IF LCL.Production Date RGT GE JOB.*Job date
IF LCL.Production_Date_RGT >= JOB.*Job_date;

//?Allocate Production or Standard
CASE;

// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

//?IF ord's whse <> prodctn whse, 1st move prod from prod whse to order's whs
CASE;

// IF PAR.Warehouse Code NE PAR.Production Warehouse Code
IF PAR.Warehouse_Code <> PAR.Production_Warehouse_Code;

// LCL.ATS Quantity Need USR = PAR.ATS Quantity Need USR
LCL.ATS_Quantity_Need_USR = PAR.ATS_Quantity_Need_USR;

// LCL.ATS Weight Need USR = PAR.ATS Weight Need USR
LCL.ATS_Weight_Need_USR = PAR.ATS_Weight_Need_USR;

// LCL.Quantity Scheduled = PAR.Quantity Scheduled
LCL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// LCL.Weight Scheduled = PAR.Weight Scheduled
LCL.Weight_Scheduled = PAR.Weight_Scheduled;

EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(LCL.Accounting_Company);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('N');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


// PAR.ATS Quantity Need USR = LCL.ATS Quantity Need USR
PAR.ATS_Quantity_Need_USR = LCL.ATS_Quantity_Need_USR;

// PAR.ATS Weight Need USR = LCL.ATS Weight Need USR
PAR.ATS_Weight_Need_USR = LCL.ATS_Weight_Need_USR;

// PAR.Quantity Scheduled = LCL.Quantity Scheduled
PAR.Quantity_Scheduled = LCL.Quantity_Scheduled;

// PAR.Weight Scheduled = LCL.Weight Scheduled
PAR.Weight_Scheduled = LCL.Weight_Scheduled;

ENDIF;

//?Now allocate production normally
EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('Y');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


//?Allocate Production or Standard
// IF PAR.Base/Conv/Loss Item is Converted/Fabricated
IF PAR.Base_Conv_Loss_Item = 'C'/'F';

//?7/14/09 added whse comp
//?IF ord's whse <> prodctn whse, 1st move prod from prod whse to order's whs
CASE;

// IF PAR.Warehouse Code NE PAR.Production Warehouse Code
IF PAR.Warehouse_Code <> PAR.Production_Warehouse_Code;

// LCL.ATS Quantity Need USR = PAR.ATS Quantity Need USR
LCL.ATS_Quantity_Need_USR = PAR.ATS_Quantity_Need_USR;

// LCL.ATS Weight Need USR = PAR.ATS Weight Need USR
LCL.ATS_Weight_Need_USR = PAR.ATS_Weight_Need_USR;

// LCL.Quantity Scheduled = PAR.Quantity Scheduled
LCL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// LCL.Weight Scheduled = PAR.Weight Scheduled
LCL.Weight_Scheduled = PAR.Weight_Scheduled;

EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(LCL.Accounting_Company);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('N');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


// PAR.ATS Quantity Need USR = LCL.ATS Quantity Need USR
PAR.ATS_Quantity_Need_USR = LCL.ATS_Quantity_Need_USR;

// PAR.ATS Weight Need USR = LCL.ATS Weight Need USR
PAR.ATS_Weight_Need_USR = LCL.ATS_Weight_Need_USR;

// PAR.Quantity Scheduled = LCL.Quantity Scheduled
PAR.Quantity_Scheduled = LCL.Quantity_Scheduled;

// PAR.Weight Scheduled = LCL.Weight Scheduled
PAR.Weight_Scheduled = LCL.Weight_Scheduled;

ENDIF;

//?Alloc prod or std
CASE;

// IF LCL.Production Date RGT GE JOB.*Job date
IF LCL.Production_Date_RGT >= JOB.*Job_date;

//?E2073 RMC allow FZ converted items to be sched for current day or >
//?4/10/09  Call UPD Allocate Prd      IF
EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('Y');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


// Call program UPD Allocate Std      XF.
CALL PROGRAM(UPD Allocate Std      XF) ('PDHMXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Order_From_Warehouse);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF LCL.Block Order Flag is Firm Order
IF LCL.Block_Order_Flag = 'F';

//?Alloc Inv --- if not Allocating Inv first      5/26/09
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate-Inv Last
IF PAR.ATS_Adj_Type_USR = 'OL';

CASE;

// IF PAR.Weight Ordered NE PAR.Weight Scheduled
IF PAR.Weight_Ordered <> PAR.Weight_Scheduled;

CASE;

// IF PAR.WHS Inventory Chill Time is greater than zero
IF PAR.WHS_Inventory_Chill_Time > *ZERO;

//?E2073 9/18/12
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.WHS_Inventory_Chill_Time);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

ENDIF;

//?FP1054 4/14/09 pass in lcl.prod date rgt+1 day for TO date OR job date
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate-ovrde FZ
IF PAR.ATS_Adj_Type_USR = 'OF';

// LCL.To Date               USR = JOB.*Job date
LCL.To_Date_USR = JOB.*Job_date;

//?FP1054 4/14/09 pass in lcl.prod date rgt+1 day for TO date OR job date
// IF PAR.ATS Adj Type USR is Order Allocate-ovrde FO
IF PAR.ATS_Adj_Type_USR = 'FO';

// LCL.Production Date RGF = LCL.Production Date RGF + CON.-730 *DAYS
LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF '-730' 'DY' 1111111 'NONE'              +
'N' 1);

//?E2073 8/01/12
// LCL.Days in Freezer       USR = PAR.WHS Inventory Chill Time * CON.-1 *
LCL.Days_in_Freezer_USR = PAR.WHS_Inventory_Chill_Time * -1;

// LCL.To Date               USR = PAR.Ship Date USR + LCL.Days in Freezer       USR *DAYS
LCL.To_Date_USR = DATEINCR(PAR.Ship_Date_USR LCL.Days_in_Freezer_USR 'DY' 1111111 'NONE'           +
'N' 1);

//?E14823 JJH 04/19/19 - Added 2009 and commented out now per Avi Dias.
//?FP1054 4/14/09 pass in lcl.prod date rgt+1 day for TO date OR job date
// IF *OTHERWISE
IF *OTHERWISE;

//?E2073 8/01/12
// LCL.Days in Freezer       USR = PAR.WHS Inventory Chill Time * CON.-1 *
LCL.Days_in_Freezer_USR = PAR.WHS_Inventory_Chill_Time * -1;

// LCL.To Date               USR = PAR.Ship Date USR + LCL.Days in Freezer       USR *DAYS
LCL.To_Date_USR = DATEINCR(PAR.Ship_Date_USR LCL.Days_in_Freezer_USR 'DY' 1111111 'NONE'           +
'N' 1);

//?E14823 JJH 04/19/19 - Added 2009 and commented out now per Avi Dias.
ENDIF;

EXECUTE FUNCTION(UPD Allocate Inv      IF) TYPE(EXCINTFUN)                      AC1477228;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Order_From_Warehouse);
PARAMETER(LCL.To_Date_USR);
{
 //?Execute internal function

 //?FP1054 4/14/09 Changed to pass par.to date usr to RTV
 //?Allocate Inventory
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(UPD Allocate Inv      RT) TYPE(RTVOBJ) FILE(POCWCPP)           AC1664875;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date_RGF);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.To_Date_USR);
 {
  //?USER: Initialize routine

  // PAR.Quantity Allocated USR = CON.*ZERO
  PAR.Quantity_Allocated_USR = *ZERO;

  // PAR.Weight Allocated USR = CON.*ZERO
  PAR.Weight_Allocated_USR = *ZERO;

  //?USER: Process Data record

  //?FP1054 this used to quit when the job date was reached.
  //?  now it quits when par.to date is reached. for the freezer it will
  //?  be the freeze time number of days before the sched ship.
  //?  For Fresh, it will be the job date
  //?RMC 10.2.19 change GE to GT
  CASE;

  // IF DB1.Production Date GT PAR.To Date               USR
  IF DB1.Production_Date > PAR.To_Date_USR;

  // OR PAR.ATS Quantity Need USR is Less than or equal zero
  OR PAR.ATS_Quantity_Need_USR <= *ZERO;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Rtv Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647033;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.OD_Quantity_Inv_Sched);
  PARAMETER(LCL.OD_Weight_Inv_Sched);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
   PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

   // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.OD Weight Inv Sched
   PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.OD_Weight_Inv_Sched;

  }

  // PAR.ATS Quantity Avail USR = DB1.Quantity on Hand - U/M1 - LCL.OD Quantity Inv Sched
  PAR.ATS_Quantity_Avail_USR = DB1.Quantity_on_Hand_UOM1 - LCL.OD_Quantity_Inv_Sched;

  // PAR.ATS Weight Available USR = DB1.Quantity on Hand - Weight - LCL.OD Weight Inv Sched
  PAR.ATS_Weight_Available_USR = DB1.Quantity_on_Hand_Weight - LCL.OD_Weight_Inv_Sched;

  //?Allocate Available Inventory
  CASE;

  // IF PAR.ATS Quantity Avail USR is GT Zero
  IF PAR.ATS_Quantity_Avail_USR > *ZERO;

  //?Allocate
  CASE;

  // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

  // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
  PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

  // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
  PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

  //?Allocate
  // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
  PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

  //?Allocate
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647004;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Ord Dtl Sch-Inv   CR) TYPE(CRTOBJ) FILE(POB5CPP)           AC1647001;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.OD Quantity Inv Sched
   LCL.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.OD_Quantity_Inv_Sched;

   // LCL.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.OD Weight Inv Sched
   LCL.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.OD_Weight_Inv_Sched;

   CASE;

   // IF LCL.OD Quantity Inv Sched is LE Zero
   IF LCL.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Quantity_Inv_Sched);
   PARAMETER(LCL.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.Quantity_Allocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 }

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

//?Allocate Inventory, Production, and/or Standard Mix
// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

//?Schedule As Order or Order Allocate
CASE;

// IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
IF PAR.ATS_Adj_Type_USR_2 = 'AO';

//?SCHEDULE AS ORDERED - WHICH DOES STILL HAPPEN
DO;

//?FP1054 remove above rule -- alloc inv for any order, not just curr week
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_Age_Days);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

EXECUTE FUNCTION(UPD Allocate Inv      IF) TYPE(EXCINTFUN)                      AC1477228;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Order_From_Warehouse);
PARAMETER(JOB.*Job_date);
{
 //?Execute internal function

 //?FP1054 4/14/09 Changed to pass par.to date usr to RTV
 //?Allocate Inventory
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(UPD Allocate Inv      RT) TYPE(RTVOBJ) FILE(POCWCPP)           AC1664875;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date_RGF);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.To_Date_USR);
 {
  //?USER: Initialize routine

  // PAR.Quantity Allocated USR = CON.*ZERO
  PAR.Quantity_Allocated_USR = *ZERO;

  // PAR.Weight Allocated USR = CON.*ZERO
  PAR.Weight_Allocated_USR = *ZERO;

  //?USER: Process Data record

  //?FP1054 this used to quit when the job date was reached.
  //?  now it quits when par.to date is reached. for the freezer it will
  //?  be the freeze time number of days before the sched ship.
  //?  For Fresh, it will be the job date
  //?RMC 10.2.19 change GE to GT
  CASE;

  // IF DB1.Production Date GT PAR.To Date               USR
  IF DB1.Production_Date > PAR.To_Date_USR;

  // OR PAR.ATS Quantity Need USR is Less than or equal zero
  OR PAR.ATS_Quantity_Need_USR <= *ZERO;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Rtv Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647033;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.OD_Quantity_Inv_Sched);
  PARAMETER(LCL.OD_Weight_Inv_Sched);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
   PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

   // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.OD Weight Inv Sched
   PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.OD_Weight_Inv_Sched;

  }

  // PAR.ATS Quantity Avail USR = DB1.Quantity on Hand - U/M1 - LCL.OD Quantity Inv Sched
  PAR.ATS_Quantity_Avail_USR = DB1.Quantity_on_Hand_UOM1 - LCL.OD_Quantity_Inv_Sched;

  // PAR.ATS Weight Available USR = DB1.Quantity on Hand - Weight - LCL.OD Weight Inv Sched
  PAR.ATS_Weight_Available_USR = DB1.Quantity_on_Hand_Weight - LCL.OD_Weight_Inv_Sched;

  //?Allocate Available Inventory
  CASE;

  // IF PAR.ATS Quantity Avail USR is GT Zero
  IF PAR.ATS_Quantity_Avail_USR > *ZERO;

  //?Allocate
  CASE;

  // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

  // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
  PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

  // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
  PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

  //?Allocate
  // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
  PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

  //?Allocate
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647004;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Ord Dtl Sch-Inv   CR) TYPE(CRTOBJ) FILE(POB5CPP)           AC1647001;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.OD Quantity Inv Sched
   LCL.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.OD_Quantity_Inv_Sched;

   // LCL.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.OD Weight Inv Sched
   LCL.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.OD_Weight_Inv_Sched;

   CASE;

   // IF LCL.OD Quantity Inv Sched is LE Zero
   IF LCL.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Quantity_Inv_Sched);
   PARAMETER(LCL.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.Quantity_Allocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 }

 ENDIF;

}


//?R11918 DN 10/19/17-Commented out 'Rtv CIE Alloc Method  RT' & move outside
//?07/13/09 RMC allow backwards-JIT and forward-ASAP
CASE;

// IF LCL.Allocation Method is Forward - ASAP
IF LCL.Allocation_Method = 'F';

//?Early as Possible: Schedule as Ordered Adjust From & To Date
CASE;

// IF PAR.Production Date RGF LT JOB.*Job date
IF PAR.Production_Date_RGF < JOB.*Job_date;

// PAR.Production Date RGF = JOB.*Job date
PAR.Production_Date_RGF = JOB.*Job_date;

// PAR.Production Date = PAR.Production Date RGF
PAR.Production_Date = PAR.Production_Date_RGF;

// PAR.Production Date RGT = PAR.Production Date RGF
PAR.Production_Date_RGT = PAR.Production_Date_RGF;

//?Early as Possible: Schedule as Ordered Adjust From & To Date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve Next Production Date
CASE;

// IF LCL.Production Day Status is no
IF LCL.Production_Day_Status = 'N';

EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGF);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF PAR.Production Date RGF GT PAR.Production Date RGT
IF PAR.Production_Date_RGF > PAR.Production_Date_RGT;

// PAR.Production Date RGF = PAR.Production Date RGT
PAR.Production_Date_RGF = PAR.Production_Date_RGT;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Production Date RGT = PAR.Production Date RGF
PAR.Production_Date_RGT = PAR.Production_Date_RGF;

ENDIF;

ENDIF;

//?Allocate Production or Standard
CASE;

// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

//?IF ord's whse <> prodctn whse, 1st move prod from prod whse to order's whs
CASE;

// IF PAR.Warehouse Code NE PAR.Production Warehouse Code
IF PAR.Warehouse_Code <> PAR.Production_Warehouse_Code;

// LCL.ATS Quantity Need USR = PAR.ATS Quantity Need USR
LCL.ATS_Quantity_Need_USR = PAR.ATS_Quantity_Need_USR;

// LCL.ATS Weight Need USR = PAR.ATS Weight Need USR
LCL.ATS_Weight_Need_USR = PAR.ATS_Weight_Need_USR;

// LCL.Quantity Scheduled = PAR.Quantity Scheduled
LCL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// LCL.Weight Scheduled = PAR.Weight Scheduled
LCL.Weight_Scheduled = PAR.Weight_Scheduled;

EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(LCL.Accounting_Company);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('N');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


// PAR.ATS Quantity Need USR = LCL.ATS Quantity Need USR
PAR.ATS_Quantity_Need_USR = LCL.ATS_Quantity_Need_USR;

// PAR.ATS Weight Need USR = LCL.ATS Weight Need USR
PAR.ATS_Weight_Need_USR = LCL.ATS_Weight_Need_USR;

// PAR.Quantity Scheduled = LCL.Quantity Scheduled
PAR.Quantity_Scheduled = LCL.Quantity_Scheduled;

// PAR.Weight Scheduled = LCL.Weight Scheduled
PAR.Weight_Scheduled = LCL.Weight_Scheduled;

ENDIF;

//?Now allocate production normally
EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('Y');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


//?Allocate Production or Standard
// IF PAR.Base/Conv/Loss Item is Converted/Fabricated
IF PAR.Base_Conv_Loss_Item = 'C'/'F';

// Call program UPD Allocate Std      XF.
CALL PROGRAM(UPD Allocate Std      XF) ('PDHMXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Order_From_Warehouse);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//? 7/13/09   Default is Backward-JIT
//?R11918 DN 10/19/17-Commented out case stmt & moved below.
//?R11918 DN 10/19/17-Do Not Process Allocation if 'I=Suspended Inventory'.
CASE;

// IF NOT LCL.Allocation Method is Suspended-Inventory Only
IF ! LCL.Allocation_Method = 'I';

//?Just In Time: Schedule as Ordered
CASE;

// IF PAR.Production Date RGT GE PAR.Production Date RGF
IF PAR.Production_Date_RGT >= PAR.Production_Date_RGF;

// PAR.Production Date RGF = PAR.Production Date RGT
PAR.Production_Date_RGF = PAR.Production_Date_RGT;

//?Allocate Production or Standard
CASE;

// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

//?IF ord's whse <> prodctn whse, 1st move prod from prod whse to order's whs
CASE;

// IF PAR.Warehouse Code NE PAR.Production Warehouse Code
IF PAR.Warehouse_Code <> PAR.Production_Warehouse_Code;

// LCL.ATS Quantity Need USR = PAR.ATS Quantity Need USR
LCL.ATS_Quantity_Need_USR = PAR.ATS_Quantity_Need_USR;

// LCL.ATS Weight Need USR = PAR.ATS Weight Need USR
LCL.ATS_Weight_Need_USR = PAR.ATS_Weight_Need_USR;

// LCL.Quantity Scheduled = PAR.Quantity Scheduled
LCL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// LCL.Weight Scheduled = PAR.Weight Scheduled
LCL.Weight_Scheduled = PAR.Weight_Scheduled;

EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(LCL.Accounting_Company);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Production_Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('N');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


// PAR.ATS Quantity Need USR = LCL.ATS Quantity Need USR
PAR.ATS_Quantity_Need_USR = LCL.ATS_Quantity_Need_USR;

// PAR.ATS Weight Need USR = LCL.ATS Weight Need USR
PAR.ATS_Weight_Need_USR = LCL.ATS_Weight_Need_USR;

// PAR.Quantity Scheduled = LCL.Quantity Scheduled
PAR.Quantity_Scheduled = LCL.Quantity_Scheduled;

// PAR.Weight Scheduled = LCL.Weight Scheduled
PAR.Weight_Scheduled = LCL.Weight_Scheduled;

ENDIF;

//?Now allocate production normally
EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('Y');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


//?Allocate Production or Standard
// IF PAR.Base/Conv/Loss Item is Converted/Fabricated
IF PAR.Base_Conv_Loss_Item = 'C'/'F';

// Call program UPD Allocate Std      XF.
CALL PROGRAM(UPD Allocate Std      XF) ('PDHMXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Order_From_Warehouse);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Schedule As Order or Order Allocate
// IF *OTHERWISE
IF *OTHERWISE;

//?FP1054 Alloc INV for any order, not just those in the curr week.
//?FP1054 added for ww order sched when selecting the prod dates.  8/10/09
CASE;

// IF PAR.Production Date USR is Entered
IF PAR.Production_Date_USR <> *ZERO;

// LCL.Production Date RGF = PAR.Production Date USR
LCL.Production_Date_RGF = PAR.Production_Date_USR;

// LCL.Production Date RGT = PAR.Production Date USR
LCL.Production_Date_RGT = PAR.Production_Date_USR;

//?FP1054 added for ww order sched when selecting the prod dates.  8/10/09
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Date RGF = PAR.Production Date RGF
LCL.Production_Date_RGF = PAR.Production_Date_RGF;

// LCL.Production Date RGT = PAR.Production Date RGT
LCL.Production_Date_RGT = PAR.Production_Date_RGT;

ENDIF;

CASE;

// IF LCL.Block Order Flag is Firm Order
IF LCL.Block_Order_Flag = 'F';

//?Alloc inventory if not allocating Inventory LAST     5/26/09
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate-Inv Last
IF PAR.ATS_Adj_Type_USR = 'OL';

// OR PAR.Production Date USR is Entered
OR PAR.Production_Date_USR <> *ZERO;

//?Alloc inventory if not allocating Inventory LAST     5/26/09
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.WHS Inventory Chill Time is greater than zero
IF PAR.WHS_Inventory_Chill_Time > *ZERO;

//?E2073 8/01/12
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.WHS_Inventory_Chill_Time);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
PARAMETER(PAR.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

ENDIF;

//? FP1054 4/14/09 pass in job.*job date for TO date
EXECUTE FUNCTION(UPD Allocate Inv      IF) TYPE(EXCINTFUN)                      AC1477228;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Order_From_Warehouse);
PARAMETER(JOB.*Job_date);
{
 //?Execute internal function

 //?FP1054 4/14/09 Changed to pass par.to date usr to RTV
 //?Allocate Inventory
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(UPD Allocate Inv      RT) TYPE(RTVOBJ) FILE(POCWCPP)           AC1664875;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date_RGF);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.To_Date_USR);
 {
  //?USER: Initialize routine

  // PAR.Quantity Allocated USR = CON.*ZERO
  PAR.Quantity_Allocated_USR = *ZERO;

  // PAR.Weight Allocated USR = CON.*ZERO
  PAR.Weight_Allocated_USR = *ZERO;

  //?USER: Process Data record

  //?FP1054 this used to quit when the job date was reached.
  //?  now it quits when par.to date is reached. for the freezer it will
  //?  be the freeze time number of days before the sched ship.
  //?  For Fresh, it will be the job date
  //?RMC 10.2.19 change GE to GT
  CASE;

  // IF DB1.Production Date GT PAR.To Date               USR
  IF DB1.Production_Date > PAR.To_Date_USR;

  // OR PAR.ATS Quantity Need USR is Less than or equal zero
  OR PAR.ATS_Quantity_Need_USR <= *ZERO;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Rtv Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647033;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.OD_Quantity_Inv_Sched);
  PARAMETER(LCL.OD_Weight_Inv_Sched);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
   PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

   // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.OD Weight Inv Sched
   PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.OD_Weight_Inv_Sched;

  }

  // PAR.ATS Quantity Avail USR = DB1.Quantity on Hand - U/M1 - LCL.OD Quantity Inv Sched
  PAR.ATS_Quantity_Avail_USR = DB1.Quantity_on_Hand_UOM1 - LCL.OD_Quantity_Inv_Sched;

  // PAR.ATS Weight Available USR = DB1.Quantity on Hand - Weight - LCL.OD Weight Inv Sched
  PAR.ATS_Weight_Available_USR = DB1.Quantity_on_Hand_Weight - LCL.OD_Weight_Inv_Sched;

  //?Allocate Available Inventory
  CASE;

  // IF PAR.ATS Quantity Avail USR is GT Zero
  IF PAR.ATS_Quantity_Avail_USR > *ZERO;

  //?Allocate
  CASE;

  // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

  // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
  PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

  // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
  PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

  //?Allocate
  // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
  PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

  //?Allocate
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647004;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Ord Dtl Sch-Inv   CR) TYPE(CRTOBJ) FILE(POB5CPP)           AC1647001;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.OD Quantity Inv Sched
   LCL.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.OD_Quantity_Inv_Sched;

   // LCL.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.OD Weight Inv Sched
   LCL.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.OD_Weight_Inv_Sched;

   CASE;

   // IF LCL.OD Quantity Inv Sched is LE Zero
   IF LCL.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Quantity_Inv_Sched);
   PARAMETER(LCL.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.Quantity_Allocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 }

 ENDIF;

}


ENDIF;

ENDIF;

//?R11918 DN 10/20/17-Commented out case stmt & moved below.
//?R11918 DN 10/20/17-Do Not Process Allocation if 'I=Suspended Inventory'.
CASE;

// IF NOT LCL.Allocation Method is Suspended-Inventory Only
IF ! LCL.Allocation_Method = 'I';

//?Allocate Production or Standard
CASE;

// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

//?5/07/12 E2073 send in par.production dates RGf, -RGT instead of lcl
//?    lcl has the inventory date range which is different.
//?7/14 dont need whse comp because fresh base items are made at
//?both plants
EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('Y');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


//?Allocate Production or Standard
// IF PAR.Base/Conv/Loss Item is Converted/Fabricated
IF PAR.Base_Conv_Loss_Item = 'C'/'F';

//?7/14 dont need whse comp because fresh converted will already have the
//?  weight std from the std mix
EXECUTE FUNCTION(UPD Allocate Prd      IF) TYPE(EXCINTFUN)                      AC1477229;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Company_Number);
PARAMETER('Y');
{
 //?Execute internal function

 //?documentation
 DO;

 //?FP1054 Added CASE stmts for Fresh and Frozen- frozen is alloc backwards
 //?      Fresh can be backwards or forwards per company item ext sts
 //? 1st call: IF par.warehouse code <> par.warehouse code pass usr,then
 //? We're moving fresh production to a diff warehouse for an order
 //?  1st move std prod from the Fresh warehouse to the order's warehouse,
 //?  Dont update the order detail schedule yet.
 //? 2nd call: IF par.warehouse code = par.warehouse code pass usr,then
 //?  alloc the input warehouse's production to the order
 //?  And update the order detail schedule.
 //?C01643 RMC 8/05/11  move piece count item wt calc above upd to order dtl
 //? sched so its upd with the same weight as pdi8cpp
 //?R13899 RMC 10/11/18-If OH Is a BLOCK order, then add 1 day to jobdate
 //? - dont allocate current day prod to a block order UNLESS SCHED OVERRIDE!
 ENDDO;

 CASE;

 // IF PAR.PSAA Program Name is Sched as ordered-Override
 IF PAR.PSAA_Program_Name = 'SCHASORD';

 //?IF called from sched override routine, dont get block order flag
 // LCL.Block Order Flag = CND.*Blank
 LCL.Block_Order_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Block Order Flag  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1873478;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FRESH - Alloc Forward / Backward per Item Allocation Method
 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(Rtv CIE Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1946929;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Allocation_Method);
 PARAMETER(PAR.Order_Number);
 {
  //?USER: Initialize routine

  //?E2885 RMC 12/4/13 new alloc method="S"tandard -- if shipping within
  //?  3 days, force Alloc Method to F-ASAP, else use B-JIT
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv SchShpDte         RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2079195;
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Allocation Method is Standard or Blank
  IF DB1.Allocation_Method = *BLANK/'S';

  EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(3);
  PARAMETER(LCL.Date_USR);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*DATE = DB1.Post to G/L Date
   PAR.*DATE = DB1.Post_to_G_L_Date;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Scheduled Ship Date LE LCL.Date                  USR
  IF LCL.Scheduled_Ship_Date <= LCL.Date_USR;

  // PAR.Allocation Method = CND.Forward - ASAP
  PAR.Allocation_Method = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = CND.Backwards - JIT
  PAR.Allocation_Method = 'B';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Allocation Method = DB1.Allocation Method
  PAR.Allocation_Method = DB1.Allocation_Method;

  ENDIF;

 }

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 //?CASE: Allocation Method is Forward - ASAP
 CASE;

 // IF LCL.Allocation Method is Forward - ASAP
 IF LCL.Allocation_Method = 'F';

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // PAR.Production Date = JOB.*Job date
 PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGF
 PAR.Production_Date = PAR.Production_Date_RGF;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date LE LCL.Production Date To
 DOW PAR.Production_Date <= LCL.Production_Date_To;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Upd production by input Warehouse, Co AND order dtl sched-cnsmd
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(1);
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 //?CASE: Allocation Method is Backwards - JIT
 CASE;

 // IF LCL.Allocation Method is Backwards - JIT
 IF LCL.Allocation_Method = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // PAR.Production Date = PAR.Production Date + CON.1 *DAYS
 PAR.Production_Date = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 ENDIF;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11  RMC  MOVED UP HERE FROM BELOW ORDER DTL SCHED UPDATE
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit 'H';

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 //?FOR BASE ONLY  6/02/09 maybe
 CASE;

 // IF PAR.Base/Conv/Loss Item is Base
 IF PAR.Base_Conv_Loss_Item = 'B';

 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

 //?FROZEN - allocate backwards - new for FP1054
 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // LCL.Allocation Method USR = CND.Backward
 LCL.Allocation_Method_USR = 'B';

 //?Chilling Time
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = PAR.Warehouse Chill Time
 PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = PAR.Fresh Chilling Time
 PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

 ENDIF;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 //?DOC:  Allocation
 DO;

 //?Backward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 //?Forward Allocation
 //?c1 & c2 & c3
 //?c1: PAR.Production Date GE PAR.Production Date RGF
 //?c2: PAR.Production Date GE JOB.*Job date
 //?c3: PAR.ATS Quantity Need USR is Greater than zero
 ENDDO;

 CASE;

 // IF LCL.Allocation Method USR is Backward
 IF LCL.Allocation_Method_USR = 'B';

 //?For backwards start with the TO date, then -1 day until FROM date reached
 // LCL.Production Date RGF = PAR.Production Date RGF
 LCL.Production_Date_RGF = PAR.Production_Date_RGF;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 //?Starting Production Date
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // LCL.Production Date RGF = JOB.*Job date
 LCL.Production_Date_RGF = JOB.*Job_date;

 CASE;

 // IF PAR.Production Date RGT LT JOB.*Job date
 IF PAR.Production_Date_RGT < JOB.*Job_date;

 // LCL.Production Date To = PAR.Production Date RGT
 LCL.Production_Date_To = PAR.Production_Date_RGT;

 ENDIF;

 CASE;

 // IF LCL.Block Order Flag is Block Order
 IF LCL.Block_Order_Flag = 'B';

 // LCL.Production Date RGF = LCL.Production Date RGF + CON.1 *DAYS
 LCL.Production_Date_RGF = DATEINCR(LCL.Production_Date_RGF 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?Starting Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = PAR.Production Date RGT
 PAR.Production_Date = PAR.Production_Date_RGT;

 ENDIF;

 //?ITR:  Allocate Availability based on AGE CODE.
 // DOW PAR.Production Date GE LCL.Production Date RGF
 DOW PAR.Production_Date >= LCL.Production_Date_RGF;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?FP1054 Check day for a production day per company item ext file
 EXECUTE FUNCTION(Rtv CIE Prod Day Sts  RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926207;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.Production_Day_Status_USR);
 {
  //?USER: Processing if Data record not found

  //?default to "Y"es if rcd not found. user isnt overriding it to No
  // PAR.Production Day Status USR = CND.blank
  PAR.Production_Day_Status_USR = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(NLL.Accounting_Period_Code);
  PARAMETER(LCL.Day_of_Week);
  PARAMETER(NLL.Week_Number);
  {
   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Day of Week is Sunday
  IF LCL.Day_of_Week = '1';

  // PAR.Production Day Status USR = DB1.Produce on Sunday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Sunday_Sts;

  // IF LCL.Day of Week is Monday
  IF LCL.Day_of_Week = '2';

  // PAR.Production Day Status USR = DB1.Produce on Monday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Monday_Sts;

  // IF LCL.Day of Week is Tuesday
  IF LCL.Day_of_Week = '3';

  // PAR.Production Day Status USR = DB1.Produce on Tuesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Tuesday_Sts;

  // IF LCL.Day of Week is Wednesday
  IF LCL.Day_of_Week = '4';

  // PAR.Production Day Status USR = DB1.Produce on Wednesday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Wednesday_Sts;

  // IF LCL.Day of Week is Thursday
  IF LCL.Day_of_Week = '5';

  // PAR.Production Day Status USR = DB1.Produce on Thursday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Thursday_Sts;

  // IF LCL.Day of Week is Friday
  IF LCL.Day_of_Week = '6';

  // PAR.Production Day Status USR = DB1.Produce on Friday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Friday_Sts;

  // IF LCL.Day of Week is Saturday
  IF LCL.Day_of_Week = '7';

  // PAR.Production Day Status USR = DB1.Produce on Saturday Sts
  PAR.Production_Day_Status_USR = DB1.Produce_on_Saturday_Sts;

  ENDIF;

 }

 //?Allocate Production
 CASE;

 // IF LCL.Production Day Status is yes
 IF LCL.Production_Day_Status = 'Y';

 // AND LCL.Production Day Status USR is not no
 AND LCL.Production_Day_Status_USR = *BLANK/'Y';

 //?Determine Production Type
 CASE;

 // IF PAR.Production Date EQ JOB.*Job date
 IF PAR.Production_Date = JOB.*Job_date;

 // PAR.Production Type = CND.Schedule
 PAR.Production_Type = 'S';

 EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Set to Plan if record not found
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?Determine Production Type
 // IF PAR.Production Date GT JOB.*Job date
 IF PAR.Production_Date > JOB.*Job_date;

 // PAR.Production Type = CND.Plan
 PAR.Production_Type = 'P';

 ENDIF;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.ATS_Weight_Available_USR);
 PARAMETER(PAR.ATS_Pieces_Available_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 //?Quantity Available
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // AND PAR.Pieces Per Bag is GT Zero
 AND PAR.Pieces_Per_Bag > *ZERO;

 // AND PAR.Bags Per Unit is GT Zero
 AND PAR.Bags_Per_Unit > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Pieces_Available_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit );

 //?Quantity Available
 // IF PAR.Piece Count Item is Not Yes
 IF PAR.Piece_Count_Item = *BLANK/'N';

 // AND PAR.Unit Weight is Greater than zero
 AND PAR.Unit_Weight > *ZERO;

 // ATS Quantity Avail USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Weight_Available_USR / PAR.Unit_Weight;

 //?Quantity Available
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ATS Quantity Avail USR = CON.*ZERO
 PAR.ATS_Quantity_Avail_USR = *ZERO;

 ENDIF;

 //?Schedule As Ordered
 CASE;

 // IF PAR.ATS Adj Type USR 2 is Sched/Alloc As Ordered
 IF PAR.ATS_Adj_Type_USR_2 = 'AO';

 CASE;

 // IF PAR.ATS Quantity Avail USR LT PAR.ATS Quantity Need USR
 IF PAR.ATS_Quantity_Avail_USR < PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Quantity Avail USR = PAR.ATS Quantity Need USR
 PAR.ATS_Quantity_Avail_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 ENDIF;

 //?If production avail allocate
 CASE;

 // IF PAR.ATS Quantity Avail USR is GT Zero
 IF PAR.ATS_Quantity_Avail_USR > *ZERO;

 //?Allocate Available Quantity
 CASE;

 // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

 // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
 PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

 //?Allocate Available Quantity
 // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
 IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

 // PAR.ATS Weight Need USR = PAR.ATS Quantity Need USR * PAR.Unit Weight *
 PAR.ATS_Weight_Need_USR = PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

 // PAR.Weight Allocated USR = PAR.ATS Weight Need USR
 PAR.Weight_Allocated_USR = PAR.ATS_Weight_Need_USR;

 // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
 PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

 ENDIF;

 //?If quantity allocated is GT zero
 CASE;

 // IF PAR.Quantity Allocated USR is GT Zero
 IF PAR.Quantity_Allocated_USR > *ZERO;

 //?8/05/11 RMC MOVE UP HERE FROM BELOW ORDER DTL SCHED UPD
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Pieces Allocated
 PAR.Pieces_Allocated_USR = ( PAR.Quantity_Allocated_USR * PAR.Pieces_Per_Bag )
 * PAR.Bags_Per_Unit;

 // Weight Allocated
 PAR.Weight_Allocated_USR = PAR.Pieces_Allocated_USR * PAR.PS_Avg_Piece_Wgt;

 ENDIF;

 CASE;

 // IF PAR.Warehouse Code EQ PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

 EXECUTE FUNCTION(Upd Ord Detail Sched  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1386019;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Ship_Date_USR);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Quantity_Allocated_USR);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.OD_Production_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Order_From_Warehouse);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.OD_Quantity_Inv_Sched);
  PARAMETER(PAR.OD_Weight_Inv_Sched);
  PARAMETER(PAR.OD_Quantity_Unused_1);
  PARAMETER(PAR.OD_Unused_weight_1);
  PARAMETER(PAR.OD_Added_to_Sched_Today);
  PARAMETER(PAR.OD_Reallocate_Sts);
  PARAMETER(PAR.OD_Status_Unused_3);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.OD Quantity Scheduled = DB1.OD Quantity Scheduled + PAR.Quantity Allocated U
  PAR.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
  + PAR.Quantity_Allocated_USR;

  // PAR.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.Weight Allocated USR
  PAR.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.Weight_Allocated_USR;

  // LCL.OD Added to Sched Today = DB1.OD Added to Sched Today
  LCL.OD_Added_to_Sched_Today = DB1.OD_Added_to_Sched_Today;

  CASE;

  // IF PAR.Base/Conv/Loss Item is Converted/Fabricated
  IF PAR.Base_Conv_Loss_Item = 'C'/'F';

  CASE;

  // IF PAR.OD Production Date EQ JOB.*Job date
  IF PAR.OD_Production_Date = JOB.*Job_date;

  // LCL.OD Added to Sched Today = CND.Yes
  LCL.OD_Added_to_Sched_Today = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.OD Quantity Scheduled is Greater than zero
  IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

  EXECUTE FUNCTION(CHG Qty/Wgt Scheduled  CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1386035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
  PARAMETER(PAR.OD_Weight_Scheduled);
  PARAMETER(DB1.OD_Quantity_Inv_Sched);
  PARAMETER(DB1.OD_Weight_Inv_Sched);
  PARAMETER(LCL.OD_Added_to_Sched_Today);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.OD_Production_Date);
  ENDIF;

 }

 ENDIF;

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 CASE;

 // IF PAR.Warehouse Code NE PAR.Warehouse Code PASS   USR
 IF PAR.Warehouse_Code <> PAR.Warehouse_Code_PASS_USR;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Whse Txfr    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1933130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Whse Tfr Adj = PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Whse Tfr Adj is GT Zero
  IF PAR.PS_Pieces_Whs_Tfr_Adj > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Whs_Tfr_Adj / PAR.PS_Pieces_Whs_Tfr_Adj;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //? not necessary here ...
  //?USER: Process Data record

  // PAR.PS Weight Whse Tfr Adj = DB1.PS Weight Whse Tfr Adj + PAR.Weight Allocated USR
  PAR.PS_Weight_Whs_Tfr_Adj = DB1.PS_Weight_Whs_Tfr_Adj + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Whse Tfr Adj = DB1.PS Pieces Whse Tfr Adj + PAR.Pieces Allocated USR
  PAR.PS_Pieces_Whs_Tfr_Adj = DB1.PS_Pieces_Whs_Tfr_Adj + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Whse Txfr    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1933131;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //? not necessary here ...
  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
 }

 //?use order's warehouse and company
 EXECUTE FUNCTION(BPS Upd Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1476187;
 PARAMETER(PAR.Company_Number_Select);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Weight_Allocated_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Standard = PAR.Weight Scheduled
  PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.PS Weight Standard is NE Zero
  IF PAR.PS_Weight_Standard <> *ZERO;

  // OR PAR.PS Pieces Standard is NE Zeros
  OR PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Standard = DB1.PS Weight Standard + PAR.Weight Scheduled
  PAR.PS_Weight_Standard = DB1.PS_Weight_Standard + PAR.Weight_Scheduled;

  // PAR.PS Pieces Standard = DB1.PS Pieces Standard + PAR.Pieces Scheduled
  PAR.PS_Pieces_Standard = DB1.PS_Pieces_Standard + PAR.Pieces_Scheduled;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Standard is NE Zeros
  IF PAR.PS_Pieces_Standard <> *ZERO;

  //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
  // Avg Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

  //?FP1054 RMC 5/14/09 make positive if negative
  CASE;

  // IF PAR.PS Avg Piece Wgt is LT Zero
  IF PAR.PS_Avg_Piece_Wgt < *ZERO;

  // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

  ENDIF;

  ENDIF;

  //?FP1054 RMC 5/14/09 dont do below case - they may be negative now
  EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
 }

 //?FP1054  ADD sched  TO PAR.WAREHOUSE CODE PASS USR's standard prod
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FP1054 Use input Warehouse and co
 EXECUTE FUNCTION(Upd Prod Allocated    RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1478090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Allocated_USR);
 PARAMETER(PAR.Pieces_Allocated_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 {
  //?USER: Processing if Data record not found

  // PAR.PS Weight Prod Allocated = PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = PAR.Pieces Allocated USR
  PAR.PS_Pieces_Prod_Allocated = PAR.Pieces_Allocated_USR;

  CASE;

  // IF PAR.PS Pieces Prod Allocated is GT Zero
  IF PAR.PS_Pieces_Prod_Allocated > *ZERO;

  // Average Piece Weight
  PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Prod_Allocated / PAR.PS_Pieces_Prod_Allocated;

  ENDIF;

  EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.PS_Weight_Planned_Prod);
  PARAMETER(PAR.PS_Pieces_Planned_Prod);
  PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
  PARAMETER(PAR.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Inv_On_Hand);
  PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
  PARAMETER(PAR.PS_Weight_Standard);
  PARAMETER(PAR.PS_Pieces_Standard);
  PARAMETER(PAR.PS_Weight_Converted);
  PARAMETER(PAR.PS_Pieces_Converted);
  PARAMETER(PAR.PS_Weight_Shipping_Adj);
  PARAMETER(PAR.PS_Pieces_Shipping_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Adj);
  PARAMETER(PAR.PS_Pieces_Prod_Adj);
  PARAMETER(PAR.PS_Weight_Inv_Adj);
  PARAMETER(PAR.PS_Pieces_Inv_Adj);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  PARAMETER(PAR.PS_Weight_Inv_Allocated);
  PARAMETER(PAR.PS_Pieces_Inv_Allocated);
  PARAMETER(PAR.PS_Unit_Weight);
  PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
  PARAMETER(PAR.PS_Pieces_Unused_2);
  PARAMETER(PAR.PS_Weight_Unused_3);
  PARAMETER(PAR.PS_Pieces_Unused_3);
  PARAMETER(PAR.PS_Weight_Unused_4);
  PARAMETER(PAR.PS_Pieces_Unused_4);
  PARAMETER(PAR.PS_Weight_Unused_5);
  PARAMETER(PAR.PS_Pieces_Unused_5);
  PARAMETER(PAR.PS_Weight_Unused_6);
  PARAMETER(PAR.PS_Pieces_Unused_6);
  PARAMETER(PAR.PS_Item_Id);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.PS_Lock_Status);
  PARAMETER(PAR.PS_Export_Domestic);
  PARAMETER(PAR.PS_Print_On_Schedule);
  PARAMETER(PAR.PS_Piece_Count_Item);
  PARAMETER(PAR.PS_Unused_Sts_1);
  PARAMETER(PAR.PS_Unused_Sts_2);
  PARAMETER(PAR.PS_Unused_Sts_3);
  PARAMETER(PAR.PS_Unused_Sts_4);
  PARAMETER(PAR.PS_Item_Sched_Need_Sts);
  PARAMETER(PAR.PS_Production_Warehouse);
  PARAMETER(PAR.PS_Weight_Ordered);
  PARAMETER(PAR.PS_Pieces_Ordered);
  PARAMETER(PAR.PS_Weight_FC_Adjusted);
  PARAMETER(PAR.PS_Pieces_FC_Adjusted);
  PARAMETER(PAR.PS_Weight_FX_Adjusted);
  PARAMETER(PAR.PS_Pieces_FX_Adjusted);
  PARAMETER(PAR.PS_Weight_Sched_Shipment);
  PARAMETER(PAR.PS_Pieces_Sched_Shipment);
  PARAMETER(PAR.PS_Weight_Available_Prod);
  PARAMETER(PAR.PS_Pieces_Available_Prod);
  PARAMETER(PAR.PS_Weight_Production_Need);
  PARAMETER(PAR.PS_Pieces_Production_Need);
  PARAMETER(PAR.PS_Weight_Fab_Needs);
  PARAMETER(PAR.PS_Pieces_Fab_Needs);
  PARAMETER(PAR.PS_Weight_Sched_Prod);
  PARAMETER(PAR.PS_Pieces_Sched_Prod);
  PARAMETER(PAR.PS_Weight_Sched_Need);
  PARAMETER(PAR.PS_Pieces_Sched_Need);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Description_Line_One);
   PARAMETER(WRK.UOM_Primary);
   PARAMETER(WRK.Unit_Weight);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(WRK.Item_Type_Code);
   PARAMETER(WRK.Default_Warehouse);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(WRK.Base_Conv_Loss_Item);
   PARAMETER(WRK.Variety_Rendered_Cut);
   PARAMETER(WRK.Credit_Item_Status);
   PARAMETER(WRK.Std_Weight_Head_Var_Ren);
   PARAMETER(WRK.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(WRK.Group_for_Packaging);
   PARAMETER(WRK.Seconds_Item);
   PARAMETER(DB1.PS_Piece_Count_Item);
   PARAMETER(WRK.Pieces_Per_Bag);
   PARAMETER(WRK.Bags_Per_Unit);
   PARAMETER(DB1.PS_Export_Domestic);
   PARAMETER(DB1.PS_Print_On_Schedule);
   PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
   PARAMETER(WRK.Fresh_Sched_As_Ordered);
   PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Warehouse_Type);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   PARAMETER(WRK.Warehouse_Location);
   PARAMETER(WRK.Warehouse_Std_Chill_Time);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Item_Id);
   {
    //?Execute internal function

    EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?Execute internal function

     EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.PS_Item_Id);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Item Type Code is Raw Materials
     IF PAR.Item_Type_Code = 'RM';

     // PAR.PS Item Identification = CND.RM Base
     PAR.PS_Item_Id = 'RMB';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Seconds Item is Yes
     IF PAR.Seconds_Item = 'Y';

     // PAR.PS Item Identification = CND.FG Seconds
     PAR.PS_Item_Id = 'FSC';

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF PAR.Variety/Rendered/Cut is Variety
     IF PAR.Variety_Rendered_Cut = 'V';

     // PAR.PS Item Identification = CND.FG Variety
     PAR.PS_Item_Id = 'FVR';

     // IF PAR.Variety/Rendered/Cut is Rendered
     IF PAR.Variety_Rendered_Cut = 'R';

     // PAR.PS Item Identification = CND.FG Rendered
     PAR.PS_Item_Id = 'FRD';

     // IF PAR.Variety/Rendered/Cut is Cut
     IF PAR.Variety_Rendered_Cut = 'C';

     //?Base/Converted/Fabricated
     CASE;

     // IF PAR.Credit Item Status is yes
     IF PAR.Credit_Item_Status = 'Y';

     //?Setup Base/Converted/Fabricated Credit
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base Credit
     PAR.PS_Item_Id = 'FBC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted Credit
     PAR.PS_Item_Id = 'FCC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated Credit
     PAR.PS_Item_Id = 'FFC';

     //?Setup Base/Converted/Fabricated Credit
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss Credit
     PAR.PS_Item_Id = 'FLC';

     ENDIF;

     //?Base/Converted/Fabricated
     // IF *OTHERWISE
     IF *OTHERWISE;

     //?Setup Base/Converted/Fabricated
     CASE;

     // IF PAR.Converted/Base Item is Base
     IF PAR.Base_Conv_Loss_Item = 'B';

     // PAR.PS Item Identification = CND.FG Base
     PAR.PS_Item_Id = 'FGB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Converted
     IF PAR.Base_Conv_Loss_Item = 'C';

     // PAR.PS Item Identification = CND.FG Converted
     PAR.PS_Item_Id = 'FCV';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Fabricated
     IF PAR.Base_Conv_Loss_Item = 'F';

     // PAR.PS Item Identification = CND.FG Fabricated
     PAR.PS_Item_Id = 'FFB';

     //?Setup Base/Converted/Fabricated
     // IF PAR.Converted/Base Item is Loss
     IF PAR.Base_Conv_Loss_Item = 'L';

     // PAR.PS Item Identification = CND.FG Loss
     PAR.PS_Item_Id = 'FLS';

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

     ENDIF;

    }

   }

   //?FP1054 Output PS Prod Warehouse
   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Production_Warehouse);
   PARAMETER(LCL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Available Ship Date
   CASE;

   // IF WRK.Warehouse Std Chill Time is yes
   IF WRK.Warehouse_Std_Chill_Time = 'Y';

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Warehouse_Chill_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   //?Available Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Date);
   PARAMETER(WRK.Fresh_Chilling_Time);
   PARAMETER(DB1.PS_Available_Ship_Date);
   {
    //?USER: Initialize routine

    // WRK.Count USR = CON.*ZERO
    WRK.Count_USR = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF WRK.Count USR EQ PAR.Chilling Time
    IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

    // PAR.PS Available Ship Date = DB1.Post to G/L Date
    PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    //?Skip Saturday
    CASE;

    // IF DB1.Day of Week is Saturday
    IF DB1.Day_of_Week = '7';

    //?Skip Saturday
    // IF *OTHERWISE
    IF *OTHERWISE;

    // WRK.Count USR = WRK.Count USR + CON.1
    WRK.Count_USR = WRK.Count_USR + 1;

    ENDIF;

   }

   ENDIF;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Planned Prod is GT Zero
   IF PAR.PS_Pieces_Planned_Prod > *ZERO;

   // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
   DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

   ENDIF;

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.PS Lock Status = CND.NOT LOCKED
   DB1.PS_Lock_Status = 'N';

  }

  //?FP1054 create consumed records
  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05 20 use ord co instead of par.company which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  //?USER: Process Data record

  // PAR.PS Weight Prod Allocated = DB1.PS Weight Prod Allocated + PAR.Weight Allocated USR
  PAR.PS_Weight_Prod_Allocated = DB1.PS_Weight_Prod_Allocated + PAR.Weight_Allocated_USR;

  // PAR.PS Pieces Prod Allocated = DB1.PS Pieces Prod Allocated + PAR.Pieces Allocat
  PAR.PS_Pieces_Prod_Allocated = DB1.PS_Pieces_Prod_Allocated + PAR.Pieces_Allocated_USR;

  EXECUTE FUNCTION(Chg Prod Allocated    CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1478091;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Type);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Avg_Piece_Wgt);
  PARAMETER(PAR.PS_Weight_Prod_Allocated);
  PARAMETER(PAR.PS_Pieces_Prod_Allocated);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?FP1054 create/delete consumed records - if called from PRD routines
  //? and STD was allocated
  CASE;

  // IF PAR.Status Flag 19 Y/N is Yes
  IF PAR.Status_Flag_19_Y_N = 'Y';

  //?Create/update/delete Order Detail Sched-Consmd (POB6CPP)
  CASE;

  // IF PAR.Order Number is Greater then zero
  IF PAR.Order_Number > *ZERO;

  //?RMC 10-05-2020 was par.company number which is acctng
  EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Seq for Ord/ItRT) TYPE(RTVOBJ) FILE(POB6CPP)          AC1924798;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = 0;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

  }

  CASE;

  // IF LCL.ODS Sequence Number is zero
  IF LCL.ODS_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Next Seq for Key  RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1924781;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.ODS Sequence Number = CON.*ZERO
   PAR.ODS_Sequence_Number = *ZERO;

   //?USER: Process Data record

   // PAR.ODS Sequence Number = DB1.ODS Sequence Number
   PAR.ODS_Sequence_Number = DB1.ODS_Sequence_Number;

   //?USER: Exit processing

   // PAR.ODS Sequence Number = PAR.ODS Sequence Number + CON.1
   PAR.ODS_Sequence_Number = PAR.ODS_Sequence_Number + 1;

  }

  ENDIF;

  EXECUTE FUNCTION(Upd OrdDtl Sch-Consmd RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1648049;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.ODS_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pieces_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   CASE;

   // IF PAR.OD Pieces Scheduled is Greater than zero
   IF PAR.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // OR PAR.OD Weight Scheduled is Greater than zero
   OR PAR.OD_Weight_Scheduled > *ZERO;

   EXECUTE FUNCTION(Crt OrdDtl Sch-Consmd CR) TYPE(CRTOBJ) FILE(POB6CPP)           AC1647983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.ODS_Quantity_Short);
   PARAMETER(PAR.ODS_Weight_Short);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?USER: Process Data record

   // LCL.OD Weight Scheduled = DB1.OD Weight Scheduled + PAR.OD Weight Scheduled
   LCL.OD_Weight_Scheduled = DB1.OD_Weight_Scheduled + PAR.OD_Weight_Scheduled;

   // LCL.OD Pieces Scheduled = DB1.OD Pieces Scheduled + PAR.OD Pieces Scheduled
   LCL.OD_Qty_Cnsmd_Pieces_Sched = DB1.OD_Qty_Cnsmd_Pieces_Sched
   + PAR.OD_Qty_Cnsmd_Pieces_Sched;

   CASE;

   // IF LCL.OD Pieces Scheduled is Less than or equal zero
   IF LCL.OD_Qty_Cnsmd_Pieces_Sched <= *ZERO;

   // AND LCL.OD Weight Scheduled is Less than or equal zero
   AND LCL.OD_Weight_Scheduled <= *ZERO;

   EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.ODS_Sequence_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Consumed_Item_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.OD_Weight_Scheduled);
   PARAMETER(DB1.ODS_Quantity_Short);
   PARAMETER(DB1.ODS_Weight_Short);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?If quantity allocated is GT zero
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Allocated USR = CON.*ZERO
 PAR.Quantity_Allocated_USR = *ZERO;

 // PAR.Weight Allocated USR = CON.*ZERO
 PAR.Weight_Allocated_USR = *ZERO;

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?If production avail allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
 PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

 ENDIF;

 ENDIF;

 //?FP1054 -  subtract 1 day to go backwards
 EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER('-1');
 {
  //?Execute internal function

  CASE;

  // IF PAR.*Duration (factor) is LT Zero
  IF PAR.*Duration_factor < *ZERO;

  // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
  WRK.*Duration_factor = PAR.*Duration_factor * -1;

  EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(WRK.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is GT Zero
  IF PAR.*Duration_factor > *ZERO;

  EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Date1_ending);
  PARAMETER(PAR.*Date2_beginning);
  PARAMETER(PAR.*Duration_factor);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
   IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

   CASE;

   // IF WRK.Count USR EQ PAR.*Duration (factor)
   IF WRK.Count_USR = PAR.*Duration_factor;

   // PAR.*Date1 (ending) = DB1.Post to G/L Date
   PAR.*Date1_ending = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

  }

  // IF PAR.*Duration (factor) is EQ Zero
  IF PAR.*Duration_factor = *ZERO;

  // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
  PAR.*Date1_ending = PAR.*Date2_beginning;

  ENDIF;

 }

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDDO;

 ENDIF;

 // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
 PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

 // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
 PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 ENDIF;

}


// Call program UPD Allocate Std      XF.
CALL PROGRAM(UPD Allocate Std      XF) ('PDHMXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Order_From_Warehouse);

ENDIF;

ENDIF;

CASE;

// IF LCL.Block Order Flag is Firm Order
IF LCL.Block_Order_Flag = 'F';

//?Alloc inventory now if allocating Inventory LAST     5/26/09
CASE;

// IF PAR.ATS Adj Type USR is Order Allocate-Inv Last
IF PAR.ATS_Adj_Type_USR = 'OL';

CASE;

// IF PAR.WHS Inventory Chill Time is greater than zero
IF PAR.WHS_Inventory_Chill_Time > *ZERO;

//?E2073 8/01/12
// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.WHS_Inventory_Chill_Time);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Chilling_Time_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(PAR.Item_age_days_usr);
PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
PARAMETER(LCL.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

ENDIF;

//? FP1054 4/14/09 pass in job.*job date for TO date
EXECUTE FUNCTION(UPD Allocate Inv      IF) TYPE(EXCINTFUN)                      AC1477228;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.ATS_Quantity_Need_USR);
PARAMETER(PAR.ATS_Weight_Need_USR);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.ATS_Adj_Type_USR_2);
PARAMETER(PAR.PSAA_Program_Name);
PARAMETER(PAR.Ship_Date_USR);
PARAMETER(PAR.Order_From_Warehouse);
PARAMETER(JOB.*Job_date);
{
 //?Execute internal function

 //?FP1054 4/14/09 Changed to pass par.to date usr to RTV
 //?Allocate Inventory
 CASE;

 // IF PAR.Production Date RGF LT JOB.*Job date
 IF PAR.Production_Date_RGF < JOB.*Job_date;

 // AND PAR.ATS Quantity Need USR is Greater than zero
 AND PAR.ATS_Quantity_Need_USR > *ZERO;

 EXECUTE FUNCTION(UPD Allocate Inv      RT) TYPE(RTVOBJ) FILE(POCWCPP)           AC1664875;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date_RGF);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.ATS_Quantity_Need_USR);
 PARAMETER(PAR.ATS_Weight_Need_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.To_Date_USR);
 {
  //?USER: Initialize routine

  // PAR.Quantity Allocated USR = CON.*ZERO
  PAR.Quantity_Allocated_USR = *ZERO;

  // PAR.Weight Allocated USR = CON.*ZERO
  PAR.Weight_Allocated_USR = *ZERO;

  //?USER: Process Data record

  //?FP1054 this used to quit when the job date was reached.
  //?  now it quits when par.to date is reached. for the freezer it will
  //?  be the freeze time number of days before the sched ship.
  //?  For Fresh, it will be the job date
  //?RMC 10.2.19 change GE to GT
  CASE;

  // IF DB1.Production Date GT PAR.To Date               USR
  IF DB1.Production_Date > PAR.To_Date_USR;

  // OR PAR.ATS Quantity Need USR is Less than or equal zero
  OR PAR.ATS_Quantity_Need_USR <= *ZERO;

  QUIT;

  ENDIF;

  EXECUTE FUNCTION(Rtv Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647033;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.OD_Quantity_Inv_Sched);
  PARAMETER(LCL.OD_Weight_Inv_Sched);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
   PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

   // PAR.OD Weight Inv Sched = PAR.OD Weight Inv Sched + DB1.OD Weight Inv Sched
   PAR.OD_Weight_Inv_Sched = PAR.OD_Weight_Inv_Sched + DB1.OD_Weight_Inv_Sched;

  }

  // PAR.ATS Quantity Avail USR = DB1.Quantity on Hand - U/M1 - LCL.OD Quantity Inv Sched
  PAR.ATS_Quantity_Avail_USR = DB1.Quantity_on_Hand_UOM1 - LCL.OD_Quantity_Inv_Sched;

  // PAR.ATS Weight Available USR = DB1.Quantity on Hand - Weight - LCL.OD Weight Inv Sched
  PAR.ATS_Weight_Available_USR = DB1.Quantity_on_Hand_Weight - LCL.OD_Weight_Inv_Sched;

  //?Allocate Available Inventory
  CASE;

  // IF PAR.ATS Quantity Avail USR is GT Zero
  IF PAR.ATS_Quantity_Avail_USR > *ZERO;

  //?Allocate
  CASE;

  // IF PAR.ATS Quantity Need USR GT PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR > PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Avail USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Avail_USR;

  // PAR.ATS Weight Available USR = PAR.ATS Quantity Avail USR * PAR.Unit Weight *
  PAR.ATS_Weight_Available_USR = PAR.ATS_Quantity_Avail_USR * PAR.Unit_Weight;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Available USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Available_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Avail USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Avail_USR;

  // PAR.Weight Allocated USR = PAR.ATS Weight Available USR
  PAR.Weight_Allocated_USR = PAR.ATS_Weight_Available_USR;

  //?Allocate
  // IF PAR.ATS Quantity Need USR LE PAR.ATS Quantity Avail USR
  IF PAR.ATS_Quantity_Need_USR <= PAR.ATS_Quantity_Avail_USR;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + PAR.ATS Quantity Need USR
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + PAR.ATS Weight Need USR
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + PAR.ATS_Weight_Need_USR;

  // PAR.Quantity Allocated USR = PAR.ATS Quantity Need USR
  PAR.Quantity_Allocated_USR = PAR.ATS_Quantity_Need_USR;

  // PAR.Weight Allocated USR = PAR.Quantity Allocated USR * PAR.Unit Weight *
  PAR.Weight_Allocated_USR = PAR.Quantity_Allocated_USR * PAR.Unit_Weight;

  //?Allocate
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Scheduled = PAR.Quantity Scheduled + CON.*ZERO
  PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + *ZERO;

  // PAR.Weight Scheduled = PAR.Weight Scheduled + CON.*ZERO
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Ord Dtl Sch-Inv   RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1647004;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Ord Dtl Sch-Inv   CR) TYPE(CRTOBJ) FILE(POB5CPP)           AC1647001;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.OD Quantity Inv Sched
   LCL.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.OD_Quantity_Inv_Sched;

   // LCL.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.OD Weight Inv Sched
   LCL.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.OD_Weight_Inv_Sched;

   CASE;

   // IF LCL.OD Quantity Inv Sched is LE Zero
   IF LCL.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(Del Ord Dtl Sch-Inv   DL) TYPE(DLTOBJ) FILE(POB5CPP)           AC1647003;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Ord Dtl Sch-Inv   CH) TYPE(CHGOBJ) FILE(POB5CPP)           AC1647005;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.OD_Quantity_Inv_Sched);
   PARAMETER(LCL.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Qty/Wgt Inv Alc   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1453897;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Ship_Date_USR);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Quantity_Allocated_USR);
  PARAMETER(PAR.Weight_Allocated_USR);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Ord Detail Sched   CR) TYPE(CRTOBJ) FILE(PDKNCPP)          AC1385629;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(PAR.OD_Weight_Scheduled);
   PARAMETER(PAR.Quantity_Allocated_USR);
   PARAMETER(PAR.Weight_Allocated_USR);
   PARAMETER(PAR.OD_Quantity_Unused_1);
   PARAMETER(PAR.OD_Unused_weight_1);
   PARAMETER(PAR.OD_Added_to_Sched_Today);
   PARAMETER(PAR.OD_Reallocate_Sts);
   PARAMETER(PAR.OD_Status_Unused_3);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.OD Quantity Inv Sched = DB1.OD Quantity Inv Sched + PAR.Quantity Allocated U
   PAR.OD_Quantity_Inv_Sched = DB1.OD_Quantity_Inv_Sched + PAR.Quantity_Allocated_USR;

   // PAR.OD Weight Inv Sched = DB1.OD Weight Inv Sched + PAR.Weight Allocated USR
   PAR.OD_Weight_Inv_Sched = DB1.OD_Weight_Inv_Sched + PAR.Weight_Allocated_USR;

   CASE;

   // IF PAR.OD Quantity Inv Sched is LE Zero
   IF PAR.OD_Quantity_Inv_Sched <= *ZERO;

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Qty/Wgt Inv Alc) TYPE(CHGOBJ) FILE(PDKNCPP)                AC1453898;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.OD_Production_Date);
   PARAMETER(PAR.OD_Quantity_Inv_Sched);
   PARAMETER(PAR.OD_Weight_Inv_Sched);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(Upd Inv Allocated     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1407229;
  PARAMETER(PAR.Company_Number);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Weight_Allocated_USR);
  PARAMETER(PAR.Quantity_Allocated_USR);
  {
   //?USER: Process Data record

   // PAR.PS Weight Inv Allocated = DB1.PS Weight Inv Allocated + PAR.Weight Allocated
   PAR.PS_Weight_Inv_Allocated = DB1.PS_Weight_Inv_Allocated + PAR.Weight_Allocated_USR;

   //?PS Pieces Inv Allocated
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   // Pieces Inv Allocated
   PAR.PS_Pieces_Inv_Allocated = DB1.PS_Pieces_Inv_Allocated + ( PAR.Quantity_Allocated_USR *
   ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit 'H' ) 'H' );

   //?PS Pieces Inv Allocated
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.PS Pieces Inv Allocated = CON.*ZERO
   PAR.PS_Pieces_Inv_Allocated = *ZERO;

   ENDIF;

   EXECUTE FUNCTION(Chg Inv Allocated     CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1407230;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  // PAR.ATS Quantity Need USR = PAR.Quantity Ordered - PAR.Quantity Scheduled
  PAR.ATS_Quantity_Need_USR = PAR.Quantity_Ordered - PAR.Quantity_Scheduled;

  // PAR.ATS Weight Need USR = PAR.Weight Ordered - PAR.Weight Scheduled
  PAR.ATS_Weight_Need_USR = PAR.Weight_Ordered - PAR.Weight_Scheduled;

 }

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

