// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICP8EFR
// ?Date: 14.08.2025 Time: 03:26:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(CTL.Item_Description);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(CTL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR U/M 1 = PAR.U/M - Primary
CTL.USR_U_M_1 = PAR.UOM_Primary;

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(CTL.USR_U_M_1);
PARAMETER(CTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate subfile record fields

//?Calculate weight, if catchweight is yes and weight eq 0
CASE;

// IF PAR.Catch Weight Status is no
IF PAR.Catch_Weight_Status = 'N';

// AND RCD.Transaction Weight is Equal to zero
AND RCD.Transaction_Weight = *ZERO;

// RCD.Transaction Weight = RCD.Transaction Quantity * PAR.Unit Weight *Rounded
RCD.Transaction_Weight = RCD.Transaction_Quantity * PAR.Unit_Weight 'H';

ENDIF;

EXECUTE FUNCTION(Val Quantity/Weight    IF) TYPE(EXCINTFUN)                     AC1152212;
PARAMETER('B');
PARAMETER(RCD.Transaction_Quantity);
PARAMETER(RCD.Transaction_Weight);
{
 //?Execute internal function

 DO;

 //?Edit for field values
 CASE;

 // IF PAR.Field Value Edit is Positive
 IF PAR.USR_Field_Value_Edit = 'P';

 //?Edit quantity
 CASE;

 // IF PAR.Transaction Quantity is Less than zero
 IF PAR.Transaction_Quantity < *ZERO;

 // Send error message - 'Quantity cannot be negative.'
 ERROR(USR0416);
 MSGPARM(PAR.Transaction_Quantity);

 ENDIF;

 //?Edit weight
 CASE;

 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // Send error message - 'Weight of transaction must be postive'
 ERROR(USR0539);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 //?Edit for field values
 // IF PAR.Field Value Edit is Negative
 IF PAR.USR_Field_Value_Edit = 'N';

 //?Edit quantity
 CASE;

 // IF PAR.Transaction Quantity is Greater than zero
 IF PAR.Transaction_Quantity > *ZERO;

 // Send error message - 'Quantity cannot be positive'
 ERROR(USR0911);
 MSGPARM(PAR.Transaction_Quantity);

 ENDIF;

 //?Edit weight
 CASE;

 // IF PAR.Transaction Weight is Greater than zero
 IF PAR.Transaction_Weight > *ZERO;

 // Send error message - 'Transaction weight must be negative'
 ERROR(USR0912);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 ENDIF;

 //?Edit value mismatch
 CASE;

 // IF PAR.Transaction Quantity is Greater than zero
 IF PAR.Transaction_Quantity > *ZERO;

 CASE;

 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // Send error message - 'Quantity and weight signs must match for this transaction'
 ERROR(USR0383);
 MSGPARM(PAR.Transaction_Quantity);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 //?Edit value mismatch
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Transaction Quantity is Less than zero
 IF PAR.Transaction_Quantity < *ZERO;

 CASE;

 // IF PAR.Transaction Weight is Greater than zero
 IF PAR.Transaction_Weight > *ZERO;

 // Send error message - 'Quantity and weight signs must match for this transaction'
 ERROR(USR0383);
 MSGPARM(PAR.Transaction_Quantity);
 MSGPARM(PAR.Transaction_Weight);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

}


//?If qty/wgt is negative, validate net physical isn't negative
CASE;

// IF RCD.Transaction Quantity is Less than zero
IF RCD.Transaction_Quantity < *ZERO;

EXECUTE FUNCTION(Val Phys. Count Net    RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1164681;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Transaction_Quantity);
PARAMETER(RCD.Transaction_Weight);
PARAMETER(RCD.UOM_Transaction);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.UOM_Third);
{
 //?USER: Processing if Data record not found

 //?If no balance detail yet, transaction qty/wgt. can't be negative
 CASE;

 // IF PAR.Transaction Quantity is Less than zero
 IF PAR.Transaction_Quantity < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 //?If no balance detail yet, transaction qty/wgt. can't be negative
 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 ENDIF;

 //?USER: Process Data record

 //?Validate net weight if transaction wgt. is negative
 CASE;

 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // PAR.Transaction Wgt. Total = PAR.Transaction Weight + DB1.Physical Count Weight
 PAR.Transaction_Wgt_Total = PAR.Transaction_Weight + DB1.Physical_Count_Weight;

 CASE;

 // IF PAR.Transaction Wgt. Total is Less than zero
 IF PAR.Transaction_Wgt_Total < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 ENDIF;

 ENDIF;

 //?Validate qty u/m1 net physical
 CASE;

 // IF PAR.U/M - Transaction EQ PAR.U/M - Primary
 IF PAR.UOM_Transaction = PAR.UOM_Primary;

 // PAR.Transaction Qty. Total = PAR.Transaction Quantity + DB1.Physical Count Qty -
 PAR.Transaction_Qty_Total = PAR.Transaction_Quantity + DB1.Physical_Count_Qty_UOM1;

 CASE;

 // IF PAR.Transaction Qty. Total is Less than zero
 IF PAR.Transaction_Qty_Total < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Return code is Physical Count negative
IF PGM.*Return_code = 'USR1028';

// Send error message - 'The net physical count cannot be negative, re-enter quantity/weight'
ERROR(USR1028);
MSGPARM(RCD.Transaction_Quantity);
MSGPARM(WRK.Transaction_Weight);

ENDIF;

//?If qty/wgt is negative, validate net physical isn't negative
// IF RCD.Transaction Weight is Less than zero
IF RCD.Transaction_Weight < *ZERO;

EXECUTE FUNCTION(Val Phys. Count Net    RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1164681;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Transaction_Quantity);
PARAMETER(RCD.Transaction_Weight);
PARAMETER(RCD.UOM_Transaction);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.UOM_Third);
{
 //?USER: Processing if Data record not found

 //?If no balance detail yet, transaction qty/wgt. can't be negative
 CASE;

 // IF PAR.Transaction Quantity is Less than zero
 IF PAR.Transaction_Quantity < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 //?If no balance detail yet, transaction qty/wgt. can't be negative
 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 ENDIF;

 //?USER: Process Data record

 //?Validate net weight if transaction wgt. is negative
 CASE;

 // IF PAR.Transaction Weight is Less than zero
 IF PAR.Transaction_Weight < *ZERO;

 // PAR.Transaction Wgt. Total = PAR.Transaction Weight + DB1.Physical Count Weight
 PAR.Transaction_Wgt_Total = PAR.Transaction_Weight + DB1.Physical_Count_Weight;

 CASE;

 // IF PAR.Transaction Wgt. Total is Less than zero
 IF PAR.Transaction_Wgt_Total < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 ENDIF;

 ENDIF;

 //?Validate qty u/m1 net physical
 CASE;

 // IF PAR.U/M - Transaction EQ PAR.U/M - Primary
 IF PAR.UOM_Transaction = PAR.UOM_Primary;

 // PAR.Transaction Qty. Total = PAR.Transaction Quantity + DB1.Physical Count Qty -
 PAR.Transaction_Qty_Total = PAR.Transaction_Quantity + DB1.Physical_Count_Qty_UOM1;

 CASE;

 // IF PAR.Transaction Qty. Total is Less than zero
 IF PAR.Transaction_Qty_Total < *ZERO;

 // PGM.*Return code = CND.Physical Count negative
 PGM.*Return_code = 'USR1028';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Return code is Physical Count negative
IF PGM.*Return_code = 'USR1028';

// Send error message - 'The net physical count cannot be negative, re-enter quantity/weight'
ERROR(USR1028);
MSGPARM(RCD.Transaction_Quantity);
MSGPARM(RCD.Transaction_Weight);

ENDIF;

ENDIF;

CASE;

// IF PAR.Production Date Control is yes
IF PAR.Production_Date_Control = 'Y';

//?Production Date not entered
CASE;

// IF RCD.Production Date is not entered
IF RCD.Production_Date = *ZERO;

// Send error message - 'Production date must be entered for a production date controlled item.'
ERROR(USR1916);
MSGPARM(RCD.Production_Date);

ENDIF;

EXECUTE FUNCTION(RTV Label Date         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1479448;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(PAR.Label_Date_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fill in Label Date with Label Date from record
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF RCD.Label Date NE PAR.Label Date  USR
IF RCD.Label_Date <> PAR.Label_Date_USR;

// AND RCD.Label Date NE WRK.ZERO
AND RCD.Label_Date <> WRK.ZERO;

// Send information message - 'Label Date has been corrected for Date &1'
MESSAGE(USR2536 *INFO);
MSGPARM(RCD.Production_Date);

ENDIF;

// RCD.Label Date = PAR.Label Date  USR
RCD.Label_Date = PAR.Label_Date_USR;

ENDIF;

//?Label Date edits
CASE;

// IF RCD.Label Date is not entered
IF RCD.Label_Date = *ZERO;

// Send error message - 'Label date must be entered for a production date controlled item.'
ERROR(USR2534);
MSGPARM(RCD.Production_Date);

//?Label Date edits
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Label Date LT RCD.Production Date
IF RCD.Label_Date < RCD.Production_Date;

// Send error message - 'Label Date cannot be less than Production Date.'
ERROR(USR2537);
MSGPARM(RCD.Label_Date);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Phys. Count Trans  IF) TYPE(EXCINTFUN) FILE(CAB7CPP)       AC1347512;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('A');
PARAMETER('P');
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(CTL.USR_U_M_1);
PARAMETER('IC');
PARAMETER('Physical Count Entry');
PARAMETER(RCD.Transaction_Quantity);
PARAMETER(RCD.Transaction_Weight);
PARAMETER(PAR.Shift_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.ITD_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.ITD Sequence Number = CON.1
  PAR.ITD_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
  PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.ITD_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.UOM_Transaction);
 PARAMETER(PAR.Item_Transaction_Source);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  // Call program Crt Export Rate Dtl   XF.
  CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Inventory_Trans_ID);
  PARAMETER(DB1.Inventory_Trans_Type);
  PARAMETER(DB1.Transaction_Date_Code);
  PARAMETER(DB1.Sequence_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.UOM_Transaction);
  PARAMETER(DB1.Item_Transaction_Source);
  PARAMETER(DB1.Description);
  PARAMETER(DB1.Transaction_Quantity);
  PARAMETER(DB1.Transaction_Weight);
  PARAMETER(DB1.USR_Transaction_Unit_Cost);
  PARAMETER(DB1.UOM_Cost);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(DB1.Ticket_Number);
  PARAMETER(DB1.GL_Document_Number);
  PARAMETER(DB1.GL_Update_Status);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Reference_Number_Code);
  PARAMETER(DB1.Lot_ID);
  PARAMETER(DB1.Transfer_Batch_Number);
  PARAMETER(DB1.Transfer_Batch_Sequence);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Employee_Badge_Number);
  PARAMETER(DB1.Production_Time);
  PARAMETER(DB1.Shift_Number);
  PARAMETER(DB1.Label_Date);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.Job_Date);

 }

}


//?USER: Extra processing after DBF update

// PAR.USR Item Processed = CND.yes
PAR.USR_Item_Processed = 'Y';

EXECUTE FUNCTION(Rtv Phys. Start Date   RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1164616;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Physical_Start_Date);
{
 //?USER: Initialize routine

 // PAR.Physical Start Date = CON.*ZERO
 PAR.Physical_Start_Date = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Physical Start Date is entered
 IF DB1.Physical_Start_Date <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Chg AS Physical Count  CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1122682;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Label_Date);
PARAMETER(RCD.Transaction_Quantity);
PARAMETER(RCD.Transaction_Weight);
PARAMETER(PAR.Physical_Start_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt AS Physical Count  CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1122687;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Start_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Processing before Data update

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 CASE;

 // IF DB1.Physical Start Date is not entered
 IF DB1.Physical_Start_Date = *ZERO;

 // DB1.Physical Start Date = PAR.USR Start Date
 DB1.Physical_Start_Date = PAR.USR_Start_Date;

 ENDIF;

 // DB1.Physical Count Weight = DB1.Physical Count Weight + PAR.Transaction Weight
 DB1.Physical_Count_Weight = DB1.Physical_Count_Weight + PAR.Transaction_Weight;

 // DB1.Physical Count Qty - U/M1 = DB1.Physical Count Qty - U/M1 + PAR.Transaction
 DB1.Physical_Count_Qty_UOM1 = DB1.Physical_Count_Qty_UOM1 + PAR.Transaction_Quantity;

 // DB1.Physical Count Status = CND.Physical in progress
 DB1.Physical_Count_Status = 'P';

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.USR Item Processed = CND.no
PAR.USR_Item_Processed = 'N';

ENDIF;

RETURN;

