// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POAADFR
// ?Date: 14.08.2025 Time: 03:36:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// LCL.Application Code = CND.Order Management System
LCL.Application_Code = 'OMS';

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// PAR.Availability Group Code = CON.ALL
PAR.Availability_Group_Code = 'ALL';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// CTL.Warehouse Code = LCL.Warehouse Code
CTL.Warehouse_Code = LCL.Warehouse_Code;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

// CTL.Warehouse Type = CND.Fresh
CTL.Warehouse_Type = 'FR';

// CTL.Item Code = PAR.Item Code
CTL.Item_Code = PAR.Item_Code;

// CTL.Item Type Code = CND.Finished Goods
CTL.Item_Type_Code = 'FG';

// LCL.Ageing Days Usr = CON.-1
LCL.Ageing_Days_Usr = -1;

ENDIF;

CASE;

// IF LCL.First Time Flag is NO
IF LCL.First_Time_Flag = 'N';

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

//?INIT:  Availability Group
CASE;

// IF CTL.Availability Group Code is Blank
IF CTL.Availability_Group_Code = *BLANK;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

//?INIT:  Availability Group
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Warehouse Description   and type
// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse Description   and type
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

ENDIF;

// CTL.Warehouse Type Desc = Condition name of CTL.Warehouse Type
CTL.Warehouse_Type_Desc = RTVCND(CTL.Warehouse_Type);

// WRK.Warehouse Type USR = CTL.Warehouse Type
WRK.Warehouse_Type_USR = CTL.Warehouse_Type;

//?***************   PK0119 starts here   ******************
// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// LCL.USR Day 1 = JOB.*Job date
LCL.USR_Day_1 = JOB.*Job_date;

// LCL.USR Day 2 = LCL.USR Day 1 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_2 = DATEINCR(LCL.USR_Day_1 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// LCL.USR Day 3 = LCL.USR Day 2 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_3 = DATEINCR(LCL.USR_Day_2 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// LCL.USR Day 4 = LCL.USR Day 3 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_4 = DATEINCR(LCL.USR_Day_3 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// LCL.USR Day 5 = LCL.USR Day 4 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_5 = DATEINCR(LCL.USR_Day_4 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// LCL.USR Day 6 = LCL.USR Day 5 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_6 = DATEINCR(LCL.USR_Day_5 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// LCL.USR Day 7 = LCL.USR Day 6 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_7 = DATEINCR(LCL.USR_Day_6 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// LCL.USR Day 8 = LCL.USR Day 7 + LCL.Ageing Days Usr *DAYS
LCL.USR_Day_8 = DATEINCR(LCL.USR_Day_7 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// CTL.Avail Ship Date 1 USR = JOB.*Job date + CON.1 *DAYS
CTL.Avail_Ship_Date_1_USR = DATEINCR(JOB.*Job_date 1 'DY' 1111111 'NONE' 'N' 1);

// CTL.Avail Ship Date 2 USR = CTL.Avail Ship Date 1 USR + CON.1 *DAYS
CTL.Avail_Ship_Date_2_USR = DATEINCR(CTL.Avail_Ship_Date_1_USR 1 'DY' 1111111 'NONE' 'N'           +
1);

// CTL.Avail Ship Date 3 USR = CTL.Avail Ship Date 2 USR + CON.1 *DAYS
CTL.Avail_Ship_Date_3_USR = DATEINCR(CTL.Avail_Ship_Date_2_USR 1 'DY' 1111111 'NONE' 'N'           +
1);

// CTL.Avail Ship Date 4 USR = CTL.Avail Ship Date 3 USR + CON.1 *DAYS
CTL.Avail_Ship_Date_4_USR = DATEINCR(CTL.Avail_Ship_Date_3_USR 1 'DY' 1111111 'NONE' 'N'           +
1);

// CTL.Avail Ship Date 5 USR = CTL.Avail Ship Date 4 USR + CON.1 *DAYS
CTL.Avail_Ship_Date_5_USR = DATEINCR(CTL.Avail_Ship_Date_4_USR 1 'DY' 1111111 'NONE' 'N'           +
1);

// CTL.Avail Ship Date 6 USR = CTL.Avail Ship Date 5 USR + CON.1 *DAYS
CTL.Avail_Ship_Date_6_USR = DATEINCR(CTL.Avail_Ship_Date_5_USR 1 'DY' 1111111 'NONE' 'N'           +
1);

//?USER: Initialize subfile record from DBF record

//?RST:  Company Number
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Warehouse code if entered
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


ENDIF;

EXECUTE FUNCTION(Rtv Item Type Code     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1299967;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?RST:  Item type code  PK0318
CASE;

// IF CTL.Item Type Code is Entered
IF CTL.Item_Type_Code <> *BLANK;

// AND CTL.Item Type Code NE RCD.Item Type Code
AND CTL.Item_Type_Code <> RCD.Item_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?***************   PK0119 starts here   ******************
EXECUTE FUNCTION(Rtv Age Quantities     RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1341605;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.USR_Day_1);
PARAMETER(LCL.USR_Day_2);
PARAMETER(LCL.USR_Day_3);
PARAMETER(LCL.USR_Day_4);
PARAMETER(LCL.USR_Day_5);
PARAMETER(LCL.USR_Day_6);
PARAMETER(LCL.USR_Day_7);
PARAMETER(LCL.USR_Day_8);
PARAMETER(LCL.Quantity_Age_Day_1_USR);
PARAMETER(LCL.Quantity_Age_Day_2_USR);
PARAMETER(LCL.Quantity_Age_Day_3_USR);
PARAMETER(LCL.Quantity_Age_Day_4_USR);
PARAMETER(LCL.Quantity_Age_Day_5_USR);
PARAMETER(LCL.Quantity_Age_Day_6_USR);
PARAMETER(LCL.Quantity_Age_Day_7_USR);
PARAMETER(LCL.Quantity_Age_Day_8_USR);
PARAMETER(LCL.Quantity_On_Hand_USR);
PARAMETER('P');
PARAMETER(LCL.Quantity_on_Hold_USR);
PARAMETER(LCL.Quantity_on_Hand_UOM1);
PARAMETER('Y');
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(LCL.Avail_Ship_Date_2_USR);
PARAMETER(LCL.Avail_Ship_Date_3_USR);
PARAMETER(LCL.Avail_Ship_Date_4_USR);
PARAMETER(LCL.Avail_Ship_Date_5_USR);
PARAMETER(LCL.Avail_Ship_Date_6_USR);
PARAMETER(LCL.Avail_Ship_Date_7_USR);
PARAMETER(LCL.Avail_Ship_Date_8_USR);
PARAMETER(LCL.Avail_Ship_Date_9_USR);
PARAMETER(LCL.Avail_Ship_Date_10_USR);
PARAMETER(LCL.Avail_Ship_Date_11_USR);
PARAMETER(LCL.Avail_Ship_Date_12_USR);
PARAMETER(LCL.Avail_Ship_Date_13_USR);
PARAMETER(LCL.Avail_Ship_Date_14_USR);
PARAMETER(LCL.Day_2_Inventory_USR);
PARAMETER(LCL.Day_3_Inventory_USR);
PARAMETER(LCL.Day_4_Inventory_USR);
PARAMETER(LCL.Day_5_Inventory_USR);
PARAMETER(LCL.Day_6_Inventory_USR);
PARAMETER(LCL.Day_7_Inventory_USR);
PARAMETER(LCL.Day_8_Inventory_USR);
PARAMETER(LCL.Day_9_Inventory_USR);
PARAMETER(LCL.Day_10_Inventory_USR);
PARAMETER(LCL.Day_11_Inventory_USR);
PARAMETER(LCL.Day_12_Inventory_USR);
PARAMETER(LCL.Day_13_Inventory_USR);
PARAMETER(LCL.Day_14_Inventory_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?Retrieve inventory for Aged Inventory Rpt else for PA Screens
 CASE;

 // IF PAR.PA or Aged Inv Usage USR is Aged Inventory
 IF PAR.PA_or_Aged_Inv_Usage_USR = 'A';

 EXECUTE FUNCTION(Rtv Age Quantities    RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1534490;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(PAR.Quantity_Age_Day_1_USR);
 PARAMETER(PAR.Quantity_Age_Day_2_USR);
 PARAMETER(PAR.Quantity_Age_Day_3_USR);
 PARAMETER(PAR.Quantity_Age_Day_4_USR);
 PARAMETER(PAR.Quantity_Age_Day_5_USR);
 PARAMETER(PAR.Quantity_Age_Day_6_USR);
 PARAMETER(PAR.Quantity_Age_Day_7_USR);
 PARAMETER(PAR.Quantity_Age_Day_8_USR);
 PARAMETER(PAR.Quantity_On_Hand_USR);
 PARAMETER(PAR.Quantity_on_Hold_USR);
 PARAMETER(PAR.Quantity_on_Hand_UOM1);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.ILL Status is Available
  IF DB1.ILL_Status = 'A';

  //?Put Qtys in correct bucket
  CASE;

  // IF DB1.ILL Avail Ship Date GT PAR.USR Day 1
  IF DB1.ILL_Avail_Ship_Date > PAR.USR_Day_1;

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.ILL Item Qty On-
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 1
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_1;

  // PAR.Quantity Age Day 1   USR = PAR.Quantity Age Day 1   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_1_USR = PAR.Quantity_Age_Day_1_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 2
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_2;

  // PAR.Quantity Age Day 2   USR = PAR.Quantity Age Day 2   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_2_USR = PAR.Quantity_Age_Day_2_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 3
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_3;

  // PAR.Quantity Age Day 3   USR = PAR.Quantity Age Day 3   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_3_USR = PAR.Quantity_Age_Day_3_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 4
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_4;

  // PAR.Quantity Age Day 4   USR = PAR.Quantity Age Day 4   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_4_USR = PAR.Quantity_Age_Day_4_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 5
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_5;

  // PAR.Quantity Age Day 5   USR = PAR.Quantity Age Day 5   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_5_USR = PAR.Quantity_Age_Day_5_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 6
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_6;

  // PAR.Quantity Age Day 6   USR = PAR.Quantity Age Day 6   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_6_USR = PAR.Quantity_Age_Day_6_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date EQ PAR.USR Day 7
  IF DB1.ILL_Avail_Ship_Date = PAR.USR_Day_7;

  // PAR.Quantity Age Day 7   USR = PAR.Quantity Age Day 7   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_7_USR = PAR.Quantity_Age_Day_7_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 8
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_8;

  // PAR.Quantity Age Day 8   USR = PAR.Quantity Age Day 8   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_8_USR = PAR.Quantity_Age_Day_8_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity on Hold     USR = PAR.Quantity on Hold     USR + DB1.ILL Item Qty O
  PAR.Quantity_on_Hold_USR = PAR.Quantity_on_Hold_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

 }

 //?Retrieve inventory for Aged Inventory Rpt else for PA Screens
 // IF PAR.PA or Aged Inv Usage USR is Aged Inventory-CoPack
 IF PAR.PA_or_Aged_Inv_Usage_USR = 'C';

 EXECUTE FUNCTION(Rtv Age Qtys - Lot    RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1702957;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(PAR.Quantity_Age_Day_1_USR);
 PARAMETER(PAR.Quantity_Age_Day_2_USR);
 PARAMETER(PAR.Quantity_Age_Day_3_USR);
 PARAMETER(PAR.Quantity_Age_Day_4_USR);
 PARAMETER(PAR.Quantity_Age_Day_5_USR);
 PARAMETER(PAR.Quantity_Age_Day_6_USR);
 PARAMETER(PAR.Quantity_Age_Day_7_USR);
 PARAMETER(PAR.Quantity_Age_Day_8_USR);
 PARAMETER(PAR.Quantity_On_Hand_USR);
 PARAMETER(PAR.Quantity_on_Hold_USR);
 PARAMETER(PAR.Quantity_on_Hand_UOM1);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.ILL Status is Available
  IF DB1.ILL_Status = 'A';

  //?Put Qtys in correct bucket
  CASE;

  // IF DB1.ILL Avail Ship Date GT JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date > JOB.*Job_date;

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.ILL Item Qty On-
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date <= JOB.*Job_date;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 1
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_1;

  // PAR.Quantity Age Day 1   USR = PAR.Quantity Age Day 1   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_1_USR = PAR.Quantity_Age_Day_1_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 1
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_1;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 2
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_2;

  // PAR.Quantity Age Day 2   USR = PAR.Quantity Age Day 2   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_2_USR = PAR.Quantity_Age_Day_2_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 2
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_2;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 3
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_3;

  // PAR.Quantity Age Day 3   USR = PAR.Quantity Age Day 3   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_3_USR = PAR.Quantity_Age_Day_3_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 3
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_3;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 4
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_4;

  // PAR.Quantity Age Day 4   USR = PAR.Quantity Age Day 4   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_4_USR = PAR.Quantity_Age_Day_4_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 4
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_4;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 5
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_5;

  // PAR.Quantity Age Day 5   USR = PAR.Quantity Age Day 5   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_5_USR = PAR.Quantity_Age_Day_5_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 5
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_5;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 6
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_6;

  // PAR.Quantity Age Day 6   USR = PAR.Quantity Age Day 6   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_6_USR = PAR.Quantity_Age_Day_6_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LT PAR.USR Day 6
  IF DB1.ILL_Avail_Ship_Date < PAR.USR_Day_6;

  // AND DB1.ILL Avail Ship Date GE PAR.USR Day 7
  AND DB1.ILL_Avail_Ship_Date >= PAR.USR_Day_7;

  // PAR.Quantity Age Day 7   USR = PAR.Quantity Age Day 7   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_7_USR = PAR.Quantity_Age_Day_7_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 8
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_8;

  // PAR.Quantity Age Day 8   USR = PAR.Quantity Age Day 8   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_8_USR = PAR.Quantity_Age_Day_8_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity on Hold     USR = PAR.Quantity on Hold     USR + DB1.ILL Item Qty O
  PAR.Quantity_on_Hold_USR = PAR.Quantity_on_Hold_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

 }

 //?Retrieve inventory for Aged Inventory Rpt else for PA Screens
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv PA Age Qty's      RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1543628;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Quantity_On_Hand_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.Day_9_Inventory_USR);
 PARAMETER(PAR.Day_10_Inventory_USR);
 PARAMETER(PAR.Day_11_Inventory_USR);
 PARAMETER(PAR.Day_12_Inventory_USR);
 PARAMETER(PAR.Day_13_Inventory_USR);
 PARAMETER(PAR.Day_14_Inventory_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.ILL_Avail_Ship_Date);
  PARAMETER(WRK.Julian_Date);
  PARAMETER(WRK.Accounting_Year_Code);
  PARAMETER(WRK.Accounting_Period_Code);
  PARAMETER(WRK.OM_Week);
  PARAMETER(PAR.Day_of_Week);
  PARAMETER(WRK.Week_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?If day is Sunday then move to monday
  CASE;

  // IF PAR.Day of Week is Sunday
  IF PAR.Day_of_Week = '1';

  // PAR.ILL Avail Ship Date = DB1.ILL Avail Ship Date + CON.1 *DAYS
  PAR.ILL_Avail_Ship_Date = DATEINCR(DB1.ILL_Avail_Ship_Date 1 'DY' 1111111 'NONE' 'N' 1);

  //?If day is Sunday then move to monday
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ILL Avail Ship Date = DB1.ILL Avail Ship Date
  PAR.ILL_Avail_Ship_Date = DB1.ILL_Avail_Ship_Date;

  ENDIF;

  //?Move Quantity to correct Day Bucket
  CASE;

  // IF DB1.ILL Avail Ship Date LE JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date <= JOB.*Job_date;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 2 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_2_USR;

  // PAR.Day 2 Inventory USR = PAR.Day 2 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_2_Inventory_USR = PAR.Day_2_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 3 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_3_USR;

  // PAR.Day 3 Inventory USR = PAR.Day 3 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_3_Inventory_USR = PAR.Day_3_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 4 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_4_USR;

  // PAR.Day 4 Inventory USR = PAR.Day 4 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_4_Inventory_USR = PAR.Day_4_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 5 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_5_USR;

  // PAR.Day 5 Inventory USR = PAR.Day 5 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_5_Inventory_USR = PAR.Day_5_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 6 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_6_USR;

  // PAR.Day 6 Inventory USR = PAR.Day 6 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_6_Inventory_USR = PAR.Day_6_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 7 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_7_USR;

  // PAR.Day 7 Inventory USR = PAR.Day 7 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_7_Inventory_USR = PAR.Day_7_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 8 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_8_USR;

  // PAR.Day 8 Inventory USR = PAR.Day 8 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_8_Inventory_USR = PAR.Day_8_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 9 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_9_USR;

  // PAR.Day 9 Inventory USR = PAR.Day 9 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_9_Inventory_USR = PAR.Day_9_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 10 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_10_USR;

  // PAR.Day 10 Inventory USR = PAR.Day 10 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_10_Inventory_USR = PAR.Day_10_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 11 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_11_USR;

  // PAR.Day 11 Inventory USR = PAR.Day 11 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_11_Inventory_USR = PAR.Day_11_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 12 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_12_USR;

  // PAR.Day 12 Inventory USR = PAR.Day 12 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_12_Inventory_USR = PAR.Day_12_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 13 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_13_USR;

  // PAR.Day 13 Inventory USR = PAR.Day 13 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_13_Inventory_USR = PAR.Day_13_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Move Quantity to correct Day Bucket
  // IF PAR.ILL Avail Ship Date EQ PAR.Avail Ship Date 14 USR
  IF PAR.ILL_Avail_Ship_Date = PAR.Avail_Ship_Date_14_USR;

  // PAR.Day 14 Inventory USR = PAR.Day 14 Inventory USR + DB1.ILL Item Qty On-Hand
  PAR.Day_14_Inventory_USR = PAR.Day_14_Inventory_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check record selection for include todays transactions
 CASE;

 // IF PAR.Include Todays Trans is no
 IF PAR.Include_Todays_Trans = 'N';

 // AND PAR.USR Day 1 EQ DB1.Production Date
 AND PAR.USR_Day_1 = DB1.Production_Date;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?Check record selection for include todays transactions
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 ENDIF;

 //?If record selected is yes then process
 CASE;

 // IF PAR.Record Selected       USR is yes
 IF PAR.Record_Selected_USR = 'Y';

 //?Put Qtys in correct bucket
 CASE;

 // IF DB1.Label Date GT PAR.USR Day 1
 IF DB1.Label_Date > PAR.USR_Day_1;

 // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
 PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 1
 IF DB1.Label_Date = PAR.USR_Day_1;

 // PAR.Quantity Age Day 1   USR = PAR.Quantity Age Day 1   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_1_USR = PAR.Quantity_Age_Day_1_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 2
 IF DB1.Label_Date = PAR.USR_Day_2;

 // PAR.Quantity Age Day 2   USR = PAR.Quantity Age Day 2   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_2_USR = PAR.Quantity_Age_Day_2_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 3
 IF DB1.Label_Date = PAR.USR_Day_3;

 // PAR.Quantity Age Day 3   USR = PAR.Quantity Age Day 3   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_3_USR = PAR.Quantity_Age_Day_3_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 4
 IF DB1.Label_Date = PAR.USR_Day_4;

 // PAR.Quantity Age Day 4   USR = PAR.Quantity Age Day 4   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_4_USR = PAR.Quantity_Age_Day_4_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 5
 IF DB1.Label_Date = PAR.USR_Day_5;

 // PAR.Quantity Age Day 5   USR = PAR.Quantity Age Day 5   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_5_USR = PAR.Quantity_Age_Day_5_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 6
 IF DB1.Label_Date = PAR.USR_Day_6;

 // PAR.Quantity Age Day 6   USR = PAR.Quantity Age Day 6   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_6_USR = PAR.Quantity_Age_Day_6_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date EQ PAR.USR Day 7
 IF DB1.Label_Date = PAR.USR_Day_7;

 // PAR.Quantity Age Day 7   USR = PAR.Quantity Age Day 7   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_7_USR = PAR.Quantity_Age_Day_7_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LT PAR.USR Day 8
 IF DB1.Label_Date < PAR.USR_Day_8;

 // PAR.Quantity Age Day 8   USR = PAR.Quantity Age Day 8   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_8_USR = PAR.Quantity_Age_Day_8_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 ENDIF;

 ENDIF;

 ENDIF;

}


// CALC:  Value A
RCD.Day_1_Available_Qty_USR = ( ( ( LCL.Quantity_Age_Day_4_USR                                     +
+ LCL.Quantity_Age_Day_5_USR ) + LCL.Quantity_Age_Day_6_USR )                                     +
+ LCL.Quantity_Age_Day_7_USR ) + LCL.Quantity_Age_Day_8_USR;

// RCD.Day 2 Available Qty   USR = LCL.Quantity Age Day 3   USR
RCD.Day_2_Available_Qty_USR = LCL.Quantity_Age_Day_3_USR;

// RCD.Day 3 Available Qty   USR = LCL.Quantity Age Day 2   USR
RCD.Day_3_Available_Qty_USR = LCL.Quantity_Age_Day_2_USR;

// RCD.Day 4 Available Qty   USR = LCL.Quantity Age Day 1   USR
RCD.Day_4_Available_Qty_USR = LCL.Quantity_Age_Day_1_USR;

// Calc:  Total Inventory
RCD.Inv_Total_USR = ( ( RCD.Day_1_Available_Qty_USR + RCD.Day_2_Available_Qty_USR )                +
+ RCD.Day_3_Available_Qty_USR ) + RCD.Day_4_Available_Qty_USR;

//?CALC:  Production Amount
DO;

// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

EXECUTE FUNCTION(Rtv Avail Prod wo/Ord RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543598;
PARAMETER(RCD.Company_Number);
PARAMETER('S');
PARAMETER(JOB.*Job_date);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(NLL.PS_Avg_Piece_Wgt);
PARAMETER(PAR.ATS_Weight_Available_USR);
PARAMETER(PAR.ATS_Pieces_Available_USR);
PARAMETER(LCL.Chilling_Time_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Production = Standard + Prod Adj - Converted
 CASE;

 // IF DB1.PS Lock Status is NOT LOCKED
 IF DB1.PS_Lock_Status = 'N';

 // Weight Available Prod
 PAR.ATS_Weight_Available_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Available Prod
 PAR.ATS_Pieces_Available_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 //?Weight Avail
 CASE;

 // IF PAR.ATS Weight Available USR is Less than zero
 IF PAR.ATS_Weight_Available_USR < *ZERO;

 // PAR.ATS Weight Available USR = CON.*ZERO
 PAR.ATS_Weight_Available_USR = *ZERO;

 // PAR.ATS Pieces Available USR = CON.*ZERO
 PAR.ATS_Pieces_Available_USR = *ZERO;

 ENDIF;

 // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
 PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third);
PARAMETER(NLL.UOM_Pricing);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Pieces Per Bag is EQ Zero
IF LCL.Pieces_Per_Bag = *ZERO;

// OR LCL.Bags Per Unit is EQ Zero
OR LCL.Bags_Per_Unit = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?CALC:  Production Amount
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

CASE;

// IF LCL.Pieces Per Bag is EQ Zero
IF LCL.Pieces_Per_Bag = *ZERO;

// AND LCL.Bags Per Unit is EQ Zero
AND LCL.Bags_Per_Unit = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Production Amount
RCD.Production_USR = PAR.ATS_Pieces_Available_USR / ( LCL.Pieces_Per_Bag                           +
* LCL.Bags_Per_Unit );

ENDIF;

//?CALC:  Production Amount
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Unit Weight is Equal to zero
IF RCD.Unit_Weight = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Production            USR = PAR.ATS Weight Available USR / RCD.Unit Weight *
RCD.Production_USR = PAR.ATS_Weight_Available_USR / RCD.Unit_Weight;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

// RCD.Chill Time USR = RCD.Fresh Chilling Time
RCD.Chill_Time_USR = RCD.Fresh_Chilling_Time;

CASE;

// IF RCD.Chill Time USR is equal to zero
IF RCD.Chill_Time_USR = *ZERO;

// AND RCD.Production            USR is *Not Zero
AND RCD.Production_USR <> *ZERO;

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

ENDIF;

//?If item is a base mark with a "*".
CASE;

// IF LCL.Base/Conv/Loss Item is Base
IF LCL.Base_Conv_Loss_Item = 'B';

// RCD.Item Code is Base '*' USR = CON.*
RCD.Item_Code_is_Base_USR = *;

//?If item is a base mark with a "*".
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Item Code is Base '*' USR = CON.*BLANK
RCD.Item_Code_is_Base_USR = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Schd Shipmnt<today RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1578685;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Current_Shipments_USR);
{
 //?USER: Initialize routine

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Scheduled Ship Date LE JOB.*Job date
 IF DB1.Scheduled_Ship_Date <= JOB.*Job_date;

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Header Status is Not Comp/Canc/Conf
 IF LCL.Header_Status = 'L'/'A'/'E'/'H';

 // AND LCL.Billing Activity Type is Invoice or Transfer
 AND LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 ENDIF;

 ENDIF;

}


//?LOAD:  Paging Array
DO;

// LCL.Calc 3 = CON.5
LCL.Calc_3 = 5;

CASE;

// IF LCL.USR Count GE LCL.Calc 3
IF LCL.USR_Count >= LCL.Calc_3;

// LCL.USR Count = CON.1
LCL.USR_Count = 1;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Count = LCL.USR Count + CON.1
LCL.USR_Count = LCL.USR_Count + 1;

ENDIF;

EXECUTE FUNCTION(VAL Item Storage       RT) TYPE(RTVOBJ) ARRAY(PAR_Item_Storage)AC1578822;
PARAMETER(LCL.USR_Count);
PARAMETER(RCD.Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT Item Storage       CR) TYPE(CRTOBJ) ARRAY(PAR_Item_Storage)AC1578820;
 PARAMETER(PAR.USR_Count);
 PARAMETER(PAR.Item_Code);
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Item Storage       CH) TYPE(CHGOBJ) ARRAY(PAR_Item_Storage)AC1578942;
 PARAMETER(DB1.USR_Count);
 PARAMETER(PAR.Item_Code);
}


ENDDO;

//?CALC:  Ending Inventory
DO;

//?CALC:  Ending Inventory
CASE;

// IF RCD.Chill Time USR is equal to zero
IF RCD.Chill_Time_USR = *ZERO;

// CALC:  Ending Inventory
RCD.Ending_Inventory_USR = ( RCD.Inv_Total_USR + RCD.Production_USR )                              +
- RCD.Current_Shipments_USR;

//?CALC:  Ending Inventory
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Ending Inventory      USR = RCD.Inv Total             USR - RCD.Current Shipments     USR
RCD.Ending_Inventory_USR = RCD.Inv_Total_USR - RCD.Current_Shipments_USR;

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Sched Shipments    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1522597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_1_USR);
PARAMETER(RCD.Quantity_Scheduled_1_USR);
{
 //?USER: Initialize routine

 // PAR.Day 7 Sched Shipm 5,0 USR = CON.*ZERO
 PAR.Day_7_Sched_Shipm_50_USR = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Day 7 Sched Shipm 5,0 USR = PAR.Day 7 Sched Shipm 5,0 USR + DB1.Quantity Sch
 PAR.Day_7_Sched_Shipm_50_USR = PAR.Day_7_Sched_Shipm_50_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(RTV Sched Shipments    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1522597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_2_USR);
PARAMETER(RCD.Quantity_Scheduled_2_USR);
{
 //?USER: Initialize routine

 // PAR.Day 7 Sched Shipm 5,0 USR = CON.*ZERO
 PAR.Day_7_Sched_Shipm_50_USR = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Day 7 Sched Shipm 5,0 USR = PAR.Day 7 Sched Shipm 5,0 USR + DB1.Quantity Sch
 PAR.Day_7_Sched_Shipm_50_USR = PAR.Day_7_Sched_Shipm_50_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(RTV Sched Shipments    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1522597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_3_USR);
PARAMETER(RCD.Quantity_Scheduled_3_USR);
{
 //?USER: Initialize routine

 // PAR.Day 7 Sched Shipm 5,0 USR = CON.*ZERO
 PAR.Day_7_Sched_Shipm_50_USR = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Day 7 Sched Shipm 5,0 USR = PAR.Day 7 Sched Shipm 5,0 USR + DB1.Quantity Sch
 PAR.Day_7_Sched_Shipm_50_USR = PAR.Day_7_Sched_Shipm_50_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(RTV Sched Shipments    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1522597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_4_USR);
PARAMETER(RCD.Quantity_Scheduled_4_USR);
{
 //?USER: Initialize routine

 // PAR.Day 7 Sched Shipm 5,0 USR = CON.*ZERO
 PAR.Day_7_Sched_Shipm_50_USR = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Day 7 Sched Shipm 5,0 USR = PAR.Day 7 Sched Shipm 5,0 USR + DB1.Quantity Sch
 PAR.Day_7_Sched_Shipm_50_USR = PAR.Day_7_Sched_Shipm_50_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(RTV Sched Shipments    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1522597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_5_USR);
PARAMETER(RCD.Quantity_Scheduled_5_USR);
{
 //?USER: Initialize routine

 // PAR.Day 7 Sched Shipm 5,0 USR = CON.*ZERO
 PAR.Day_7_Sched_Shipm_50_USR = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Day 7 Sched Shipm 5,0 USR = PAR.Day 7 Sched Shipm 5,0 USR + DB1.Quantity Sch
 PAR.Day_7_Sched_Shipm_50_USR = PAR.Day_7_Sched_Shipm_50_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(RTV Sched Shipments    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1522597;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Avail_Ship_Date_6_USR);
PARAMETER(RCD.Quantity_Scheduled_6_USR);
{
 //?USER: Initialize routine

 // PAR.Day 7 Sched Shipm 5,0 USR = CON.*ZERO
 PAR.Day_7_Sched_Shipm_50_USR = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Day 7 Sched Shipm 5,0 USR = PAR.Day 7 Sched Shipm 5,0 USR + DB1.Quantity Sch
 PAR.Day_7_Sched_Shipm_50_USR = PAR.Day_7_Sched_Shipm_50_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


//?CALC: Subfile control function fields

CASE;

// IF CTL.Availability Group Code NE PAR.Availability Group Code
IF CTL.Availability_Group_Code <> PAR.Availability_Group_Code;

// PAR.Availability Group Code = CTL.Availability Group Code
PAR.Availability_Group_Code = CTL.Availability_Group_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Warehouse Code NE PAR.Warehouse Code
IF CTL.Warehouse_Code <> PAR.Warehouse_Code;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt  (Company/Warehouse/PA Group)
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Availability Group Code
IF PGM.*Cursor_field = CTL.Availability_Group_Code;

// Call program SEL Avail Group        SR.
CALL PROGRAM(SEL Avail Group        SR) ('PDDVSRR');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

ENDIF;

//?Val:  Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Val:  Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

//?Val:  Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Val:  Warehouse type
CASE;

// IF CTL.Warehouse Type NE WRK.BLANK 1               USR
IF CTL.Warehouse_Type <> WRK.BLANK_1_USR;

// CTL.Warehouse Type Desc = Condition name of CTL.Warehouse Type
CTL.Warehouse_Type_Desc = RTVCND(CTL.Warehouse_Type);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Dsp:  Item Orders        opt 8
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Company_Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER(CTL.Warehouse_Type);

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Dsp:  Item Warehouse Inquiry Detail
CASE;

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

CASE;

// IF CTL.Lot Tracking Flag is yes
IF CTL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Item_Description);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Company_Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CMD Key = 11
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

EXECUTE FUNCTION(RTV Storage Item       RT) TYPE(RTVOBJ) ARRAY(PAR_Item_Storage)AC1578830;
PARAMETER(1);
PARAMETER(PAR.Item_Code);
{
 //?USER: Process Data record

 // PAR.Item Code = DB1.Item Code
 PAR.Item_Code = DB1.Item_Code;

 QUIT;

}


// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

// Call program ZzzScheduled Ordrs Inv DF.
CALL PROGRAM(ZzzScheduled Ordrs Inv DF) ('POABDFR');
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Warehouse_Code);

CASE;

// IF CTL.Warehouse Code EQ PAR.Warehouse Code
IF CTL.Warehouse_Code = PAR.Warehouse_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// LCL.USR Count = CON.6
LCL.USR_Count = 6;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

