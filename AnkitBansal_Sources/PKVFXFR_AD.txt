// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVFXFR
// ?Date: 14.08.2025 Time: 02:50:35
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification History
DO;

//?JBB 6/30/21 SDN619 - Tattoo Repayment by Business User
//?                     If a repayment is in process, call new program
//?                     to update the Tattoo Repayment files.
//?RMC 5/12/21 WHD 78701 Upd the TH with the movement from the DT if its
//?  there. on a transfer to a new BO the DT doesnt exist yet
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?E14234 JBB  1/30/19 - Enhance Repayments - Phase 2
//?                      Added file PKDOREP (Tattoo Header Job Sel) to
//?                      the list of files being deleted and created.
//?                      A new record is created only if a record
//?                      already exists in the PKDOREP file, meaning
//?                      no records are created for a regular transfer.
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?10/20/2008 slm Tattoo Header movement # being wiped out.
//?9/26/2008  -- Tattoo Header Ext was not being changed
//?When a producer was changed
//?Tattoo header was not being changed on State Code
//?Tattoo header Ext was not changing the Producer Code
//?which would cause the Producer Site to be wrong, and even
//?the user would need a different Site.
//?9/26/2008 slm
//?Add logic to include the Prod Subsidiary - Tattoo Hdr Ext
//?Add state code if on the transfer by tattoo change the state code
//?9/26/2008 slm
EXECUTE FUNCTION(Transfer - 01) TYPE(EXCINTFUN)                                 AB1196452;
{
 //?Execute internal function

 //?Purpose/Technical Information
 //?The Transfer will create new records and delete old records
 //?based on the keys that the user selects.
 //?Buy order, Buy Order Load, Tattoo number
 //?Files that will be transfered
 //?Carcass Detail, Crc Sum Tattoo Lean Dist, Crc Sum Tto Wgt Lot  WRK
 //?Eval Tran, Hog Voucher Detail. Loss Trans, Tattoo Ded/Add
 //?Tattoo Detail, Tattoo Get Weight DWL, Tattoo Header,
 //?Tattoo Header Comment, Tattoo Header Driver, Tattoo Scale Ticket
 //?Tattoo Scale Ticket Msg
 //?Buy Order Load Weight if 'Y' specified for Transfer Load Weight?
 //?Repopulate the source, src type, pay type, pay sts, prod, loc
 //?based on the new buy order, and producer.
 //?After the files are transfered, if the user selected print of
 //?scale ticket, then it will be processed.
 //?Recount the totals for head, and live weight from the tattoo
 //?to the buy order load
}


EXECUTE FUNCTION(C2140 Trn TTo Dbl Inv) TYPE(EXCINTFUN)                         AB1188593;
{
 //?Execute internal function

 //?12/23/96   SLM     Transfer of one tattoo to another the
 //?                   tattoo detail was doubling up
 //?                   Establish proceudre of how this will be done
 //?                   for the scale people.
 //?                   The orginal tattoo scale ticket must be printed
 //?                   before this transfer can be completed.
 //?                   Do not allow transfer to be selected if
 //?                   any weightments have not been printed.
 //?                   Give user message and not select the transfer
 //?                   Also on the create of the scale weight record
 //?                   create a record but the active status flag stays
 //?                   as was on the orginal record
}


//?4/11/2006 SLM This routine should also take care of the Tattoo
//?              Header Ext file.
//?              Since the Producer and site id was not be brought
//?              forward on the new buy order load for this tattoo
//?Send tattoo comment to old message and this transfer
//?  will move old message to new
ENDDO;

//?Check if this Transfer is for a Repayment
// Call program Chk Repay in Progress XF.
CALL PROGRAM(Chk Repay in Progress XF) ('PWNVXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRD_Repayment_Status);
PARAMETER(LCL.Repayment_in_Progress_Y_N);

// WRK.Tattoo Nbr Alpha Usr = CVTVAR(PAR.Tattoo Number New User)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(PAR.Tattoo_Number_New_User);

// Call program Crt Tattoo Act Trnfs   XF.
CALL PROGRAM(Crt Tattoo Act Trnfs   XF) ('PKI9XFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('TT');
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);

//?Transfer each file one by one (All FILES key to the Tattoo Header)
DO;

EXECUTE FUNCTION(Rtv/Crt/Dlt Crc Dtl   RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1156324;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Carcass Detail    DL) TYPE(DLTOBJ) FILE(PKB1CPP)           AB1104739;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.CD_Scale_Sequence_Number);
 PARAMETER(DB1.CD_Carcass_Number);
 PARAMETER(DB1.CD_Carcass_Number_Insert);
 EXECUTE FUNCTION(Crt Carcass Detail    CR) TYPE(CRTOBJ) FILE(PKB1CPP)           AB1104737;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.CD_Scale_Sequence_Number);
 PARAMETER(DB1.CD_Carcass_Number);
 PARAMETER(DB1.CD_Carcass_Number_Insert);
 PARAMETER(DB1.CD_Record_Add_Del_Sts);
 PARAMETER(DB1.CD_Sort_Loss);
 PARAMETER(DB1.CD_STD_Yield);
 PARAMETER(DB1.CD_Carcass_Hot_Weight);
 PARAMETER(DB1.CD_Base_Carcass_CWT);
 PARAMETER(DB1.CD_Crc_Value_Per_CWT);
 PARAMETER(DB1.CD_Base_Carc_Value);
 PARAMETER(DB1.CD_Crc_Value_$_Per_Hd);
 PARAMETER(DB1.CD_Lean_Percent);
 PARAMETER(DB1.CD_Lean_Premium_CWT);
 PARAMETER(DB1.CD_Lean_Premium_$_Per_Hd);
 PARAMETER(DB1.CD_Gross_Value_Per_CWT);
 PARAMETER(DB1.CD_Gross_Value_$_Per_HD);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.CD_Kill_Time);
 PARAMETER(DB1.CD_Shift);
 PARAMETER(DB1.CD_Carcass_Activity_Sts);
 PARAMETER(DB1.CD_Backfat_Thickness_Inch);
 PARAMETER(DB1.CD_Loin_Eye_Depth_Inch);
 PARAMETER(DB1.CD_Light_Reflectance);
 PARAMETER(DB1.CD_Trim_Area);
 PARAMETER(DB1.CD_Carcass_Sex);
 PARAMETER(DB1.CD_FFLI);
 PARAMETER(DB1.CD_Record_Created_W_Avg);
 PARAMETER(DB1.CD_Record_Created_Status);
 PARAMETER(DB1.CD_LOT);
 PARAMETER(DB1.CD_User_Error_Override);
 PARAMETER(DB1.CD_Backfat_Thickness_MM);
 PARAMETER(DB1.CD_Loin_Eye_Depth_MM);
 PARAMETER(DB1.CD_Light_Reflectance_MM);
 PARAMETER(DB1.CD_Lean_Percent_MM);
 PARAMETER(DB1.CD_Source_Type);
 PARAMETER(DB1.CD_Payment_Type);
 PARAMETER(DB1.CD_CA_Sort_Loss);
 PARAMETER(DB1.CD_CA_Std_Yield);
 PARAMETER(DB1.CD_CA_Base_Carcass_CWT);
 PARAMETER(DB1.CD_CA_Crc_Value_Per_CWT);
 PARAMETER(DB1.CD_CA_Base_Carc_Value);
 PARAMETER(DB1.CD_CA_Crc_Value_$_Per_Hd);
 PARAMETER(DB1.CD_CA_Lean_Premium_CWT);
 PARAMETER(DB1.CD_CA_Lean_Premium_$_P_Hd);
 PARAMETER(DB1.CD_CA_Gross_Value_Per_CWT);
 PARAMETER(DB1.CD_CA_Gross_Value_$_P_Hd);
 PARAMETER(DB1.CD_Adjust_Add_Type);
 PARAMETER(DB1.CD_Producer_Loc_Farm);
 PARAMETER(DB1.CD_Loin_Eye_Inch_2_dec);
 PARAMETER(DB1.CD_Backfat_Inch_2_dec);
 PARAMETER(DB1.CD_Meat_Value_Factor);
 PARAMETER(DB1.CD_Lean_Prem_Disc_Factor);
 PARAMETER(DB1.CD_Fixed_Cost_Factor);
 PARAMETER(DB1.CD_MPR_Sort_Loss);
 PARAMETER(DB1.CD_Meat_Value_Factor_Amt);
 PARAMETER(DB1.CD_Fixed_Cost_Factor_Amt);
 PARAMETER(DB1.CD_Gross_Before_Sort_CWT);
 PARAMETER(DB1.CD_Gross_Before_Sort_HD);
 PARAMETER(DB1.CD_Broken_Back_Sts);
 PARAMETER(DB1.CD_Adjust_Add_Source);
 PARAMETER(DB1.CD_Unused_Sts_3);
 PARAMETER(DB1.CD_Unused_Sts_4);
 PARAMETER(DB1.CD_Unused_Sts_5);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt CrcSum LD RT) TYPE(RTVOBJ) FILE(PKCYCPP)           AB1156327;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del CrcSum Tto Ln Dst DL) TYPE(DLTOBJ) FILE(PKCYCPP)           AB1146606;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.CTLD_Lean);
 EXECUTE FUNCTION(Crt CrcSum Tto Ln Dst CR) TYPE(CRTOBJ) FILE(PKCYCPP)           AB1146604;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.CTLD_Lean);
 PARAMETER(DB1.CTLD_Head_Killed);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt CrcSum W L RT) TYPE(RTVOBJ) FILE(PKC5CPP)          AB1156330;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Tto Wgt Lot WRK   DL) TYPE(DLTOBJ) FILE(PKC5CPP)           AB1147852;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.CWL_Min_Adj_Live_Wgt);
 PARAMETER(DB1.CWL_Max_Adj_Live_Wgt);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 EXECUTE FUNCTION(Crt Ttt Wgt Lot Wrk   CR) TYPE(CRTOBJ) FILE(PKC5CPP)           AB1156331;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.CWL_Min_Adj_Live_Wgt);
 PARAMETER(DB1.CWL_Max_Adj_Live_Wgt);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
}


EXECUTE FUNCTION(Rtv/Crt/Dlt Eval Trns RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1156334;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(WRK.ET_Scale_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.ET_Scale_Sequence_Number = 1;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.ET Scale Sequence Number is Entry Allowed
  IF DB1.ET_Scale_Sequence_Number >= 000001;
  AND DB1.ET_Scale_Sequence_Number <= 699999;

  // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
  PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Transfer Tattoo   CR) TYPE(CRTOBJ) FILE(PKBVCPP)           AB1230163;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(WRK.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.ET_Lot);
 PARAMETER(DB1.ET_Shift);
 PARAMETER(DB1.ET_Hot_Wgt);
 PARAMETER(DB1.ET_Backfat_Thickness_Inch);
 PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
 PARAMETER(DB1.ET_Lean_Percent_NPPC);
 PARAMETER(DB1.ET_Backfat_Thickness_MM);
 PARAMETER(DB1.ET_Loineye_Depth_MM);
 PARAMETER(DB1.ET_Light_Reflectance_MM);
 PARAMETER(DB1.ET_Lean_Percent_FOM);
 PARAMETER(DB1.ET_Light_Reflectance);
 PARAMETER(DB1.ET_Trim_Area);
 PARAMETER(DB1.ET_Carcass_Sex);
 PARAMETER(DB1.ET_Error_Sts);
 PARAMETER(DB1.ET_Record_Add_Del_Sts);
 PARAMETER(DB1.ET_Record_Created_W_Avg);
 PARAMETER(DB1.ET_Record_Created_Status);
 PARAMETER(DB1.ET_User_Error_Override);
 PARAMETER(DB1.ET_Adjust_Add_Type);
 PARAMETER(DB1.ET_Broken_Back_Sts);
 PARAMETER(DB1.ET_Unused_Sts_2);
 PARAMETER(DB1.ET_Adjust_Add_Source);
 PARAMETER(DB1.ET_Unused_Sts_4);
 PARAMETER(DB1.ET_Unused_Sts_5);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 {
  //?USER: Processing before Data update

  //?DO NOT REPLACE THE RECORD STAMP.  12/22/99  PURVA
  //?THE RS RECORD STATUS MUST BE RETAINED FROM THE ORIGINAL RECORD.
 }

}


EXECUTE FUNCTION(Rtv/Chg Vch Dtl       RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1156351;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Voucher Detail    CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1102232;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCD_Line);
 PARAMETER(DB1.VCD_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCD_Sort_Disc_Amt);
 PARAMETER(DB1.VCD_Yield_Gain_Loss);
 PARAMETER(DB1.VCD_Base_Carcass_Value);
 PARAMETER(DB1.VCD_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCD_Gross_Amt);
 PARAMETER(DB1.VCD_Deduction_Amt);
 PARAMETER(DB1.VCD_Less_Split_Amount);
 PARAMETER(DB1.VCD_Net_Amt);
 PARAMETER(DB1.VCD_Split_Percent);
 PARAMETER(DB1.VCD_Payment_Type);
 PARAMETER(DB1.VCD_Hog_Class_Type);
 PARAMETER(DB1.VCD_BO_Type);
 PARAMETER(DB1.VCD_Source_Contract_Type);
 PARAMETER(DB1.VCD_Source_Code);
 PARAMETER(DB1.VCD_Check_Description);
 PARAMETER(DB1.VCD_Received_Head);
 PARAMETER(DB1.VCD_Head_Killed);
 PARAMETER(DB1.VCD_Push_Payment_Status);
 PARAMETER(DB1.VCD_Repayment_Flag);
 PARAMETER(DB1.VCD_Unused_Status_3);
 PARAMETER(DB1.VCD_Unused_Status_4);
 PARAMETER(DB1.VCD_Unused_Head_1);
 PARAMETER(DB1.VCD_UnUsed_Head_2);
 PARAMETER(DB1.VCD_UnUsed_Head_3);
 PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
 PARAMETER(DB1.MGL_Voucher_Number);
 PARAMETER(DB1.MGL_Invoice_Batch_Number);
 PARAMETER(DB1.MGL_Process_to_ERP_Date);
 PARAMETER(DB1.MGL_Process_to_ERP_Time);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Loss Trans RT) TYPE(RTVOBJ) FILE(PKBSCPP)          AB1156354;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Loss Transaction  DO) TYPE(DLTOBJ) FILE(PKBSCPP)           AB1102907;
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(DB1.LTN_Kill_Date);
 PARAMETER(DB1.LTN_Record_Number);
 EXECUTE FUNCTION(Rtv Loss Trans Next   RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1135836;
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(WRK.LTN_Record_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.LTN Record Number = CON.1
  PAR.LTN_Record_Number = 1;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.LTN Record Number is Entry Allowed
  IF DB1.LTN_Record_Number >= 000001;
  AND DB1.LTN_Record_Number <= 699999;

  // PAR.LTN Record Number = DB1.LTN Record Number + CON.1
  PAR.LTN_Record_Number = DB1.LTN_Record_Number + 1;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Loss Transaction  CR) TYPE(CRTOBJ) FILE(PKBSCPP)           AB1102905;
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(WRK.LTN_Record_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.LTN_Shift);
 PARAMETER(DB1.LTN_Wgt);
 PARAMETER(DB1.LTN_Extent);
 PARAMETER(DB1.LTN_Trim_Location);
 PARAMETER(DB1.LTN_Error_Sts);
 PARAMETER(DB1.LTN_Record_Created_Status);
 PARAMETER(DB1.LTN_User_Error_Override);
 PARAMETER(*MISSING);
 PARAMETER(DB1.LT_Type_Code);
 PARAMETER(DB1.LR_Reason_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt D/A   RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1156358;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Deduction) TYPE(DLTOBJ) FILE(PKCDCPP)            AB1107819;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(DB1.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt Dtl   RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1156359;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Detail) TYPE(DLTOBJ) FILE(PKA2CPP)               AB1101752;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 EXECUTE FUNCTION(Create Tattoo Detail) TYPE(CRTOBJ) FILE(PKA2CPP)               AB1101750;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(DB1.TD_Live_Wgt);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER(DB1.TD_Held_Over_Status);
 PARAMETER(DB1.TD_Drive_Time);
 PARAMETER(DB1.TD_Drive_Hour);
 PARAMETER(DB1.TD_Drive_Card_Number);
 PARAMETER(DB1.TD_Avg_Live_Wgt);
 PARAMETER(DB1.TD_Gen_Bal_To_Kill);
 PARAMETER(DB1.TD_Recs_Created_for_HO);
 PARAMETER(DB1.TD_User_Status_2);
 PARAMETER(DB1.TD_User_Status_3);
 PARAMETER(DB1.TD_User_Date_1);
 PARAMETER(DB1.TD_User_Date_2);
 PARAMETER(DB1.TD_Drive_Date);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TDP_Process_Code);
 PARAMETER(DB1.Held_Over_Pen_Company_Num);
 PARAMETER(DB1.Held_Over_Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt Wgt   RT) TYPE(RTVOBJ) FILE(PKCNCPP)           AB1156360;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Weight) TYPE(DLTOBJ) FILE(PKCNCPP)               AB1127974;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TW_Sequence_number);
 EXECUTE FUNCTION(Crt Tattoo Weight     CR) TYPE(CRTOBJ) FILE(PKCNCPP)           AB1127972;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.TW_Sequence_number);
 PARAMETER(DB1.TW_Head_Count);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.DF_Defect_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?9/26/2008 slm
//?Add state code if on the transfer by tattoo change the state code
EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt Hdr   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1156361;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Scale_Ticket_Sts);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.Th_State_code_New);
PARAMETER(PAR.Transfer_State_User);
{
 //?USER: Processing if Data record not found

 // PAR.TH Scale Ticket Sts = CND.Not Printed
 PAR.TH_Scale_Ticket_Sts = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Scale Ticket Sts is Printed
 IF DB1.TH_Scale_Ticket_Sts = 'P';

 // WRK.TH Scale Ticket Sts = CND.Reprint
 WRK.TH_Scale_Ticket_Sts = 'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Scale Ticket Sts = DB1.TH Scale Ticket Sts
 WRK.TH_Scale_Ticket_Sts = DB1.TH_Scale_Ticket_Sts;

 ENDIF;

 // PAR.TH Scale Ticket Sts = WRK.TH Scale Ticket Sts
 PAR.TH_Scale_Ticket_Sts = WRK.TH_Scale_Ticket_Sts;

 EXECUTE FUNCTION(Delete Tattoo Header) TYPE(DLTOBJ) FILE(PKA1CPP)               AB1101745;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 //?*------------------------------------------------------------*
 //?* 03/18/02 PKD Heldovers cannot be moved to a different Kill Date.
 //?               So, the Purchase Date would not change.  If the
 //?               is moved to a different Kill Date then the Purchase
 //?               Date needs to change also to the new Kill Date.
 //?Update Purch Date if new kill date is NE the original kill date
 CASE;

 // IF PAR.Kill Date Usr NE DB1.TH Kill Date
 IF PAR.Kill_Date_Usr <> DB1.TH_Kill_Date;

 // WRK.TH Purchase Date = PAR.Kill Date Usr
 WRK.TH_Purchase_Date = PAR.Kill_Date_Usr;

 //?Update Purch Date if new kill date is NE the original kill date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Purchase Date = DB1.TH Purchase Date
 WRK.TH_Purchase_Date = DB1.TH_Purchase_Date;

 ENDIF;

 //?*------------------------------------------------------------*
 // LCL.TH State = DB1.TH State
 LCL.TH_State = DB1.TH_State;

 CASE;

 // IF PAR.Transfer State User is Yes
 IF PAR.Transfer_State_User = 'Y';

 // LCL.TH State = PAR.Th State code New
 LCL.TH_State = PAR.Th_State_code_New;

 ENDIF;

 EXECUTE FUNCTION(Create Tattoo Header) TYPE(CRTOBJ) FILE(PKA1CPP)               AB1101743;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(WRK.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(LCL.TH_State);
 PARAMETER(DB1.TH_Unused_Code);
 PARAMETER(DB1.TH_Unused_Sts_2_Pos);
 PARAMETER(DB1.TH_Commission_Status);
 PARAMETER(DB1.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(DB1.TH_Unused_Sts_1_Pos_3);
 PARAMETER(DB1.TH_DOA_Weight);
 PARAMETER(DB1.TH_Avg_Lean_EXC_ADD);
 PARAMETER(DB1.TH_HPS_Farm_Site);
 PARAMETER(DB1.TH_Shift_Held_Over_Head);
 PARAMETER(DB1.TH_Sorting_Amount);
 PARAMETER(DB1.TH_Head_Identified);
 PARAMETER(DB1.TH_Percent_Identified);
 PARAMETER(DB1.TH_Percent_Accepted);
 PARAMETER(DB1.TH_Head_Adjusted_LN);
 PARAMETER(DB1.TH_PHA_Head_Adds);
 PARAMETER(DB1.TH_PHA_Add_Type);
 PARAMETER(DB1.TH_PHA_Average_Type);
 PARAMETER(DB1.TH_PHA_Add_Reason);
 PARAMETER(DB1.TH_PHA_Yield_Percent);
 PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(DB1.TH_VC_Gross_Value_HD);
 PARAMETER(DB1.TH_Excluded_Gross_Value);
 PARAMETER(DB1.TH_Avg_Lean);
 PARAMETER(DB1.TH_Broken_Back_Hd_Count);
 PARAMETER(DB1.TH_Hot_Scl_Upload_Time);
 PARAMETER(DB1.TH_Unused_Nbr_4);
 PARAMETER(DB1.TH_Excluded_Carc_Val);
 PARAMETER(DB1.TH_Excluded_Premium);
 PARAMETER(DB1.TH_Unused_Nbr_7);
 PARAMETER(DB1.TH_Unused_Nbr_8);
 PARAMETER(DB1.TH_Unused_Nbr_9);
 PARAMETER(DB1.TH_Unused_Nbr_10);
 PARAMETER(DB1.TH_Break_Even_Price_CWT);
 PARAMETER(DB1.TH_Meat_Value_Factor_Amt);
 PARAMETER(DB1.TH_Yld_Parm_Adj_Yield);
 PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
 PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
 PARAMETER(DB1.TH_HITCH_Old_Pay_Net_Amt);
 PARAMETER(DB1.TH_MPR_Sort_Loss);
 PARAMETER(DB1.TH_Unused_Nbr_19);
 PARAMETER(DB1.TH_Unused_Nbr_20);
 PARAMETER(DB1.TH_Cold_Scl_Upload_Date);
 PARAMETER(DB1.TH_Cold_Scl_Upload_Time);
 PARAMETER(DB1.TH_Head_LFT);
 PARAMETER(DB1.TH_Head_EUT_KOA);
 PARAMETER(DB1.TH_Unused_Date_5);
 PARAMETER(DB1.TH_Unused_Sts_1);
 PARAMETER(DB1.TH_Unused_Sts_2);
 PARAMETER(DB1.TH_Unused_Sts_3);
 PARAMETER(DB1.TH_Unused_Sts_4);
 PARAMETER(DB1.TH_Unused_Sts_5);
 PARAMETER(DB1.TH_Unused_Sts_6);
 PARAMETER(DB1.TH_Unused_Sts_7);
 PARAMETER(DB1.TH_Unused_Sts_8);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  // DB1.TH User Error Override = CND.No
  DB1.TH_User_Error_Override = 'N';

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt TH Cmnt   RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1156362;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header Comm) TYPE(DLTOBJ) FILE(PKA4CPP)          AB1113203;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.THC_Comment_Line);
 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.THC_Comment_Line);
 PARAMETER(DB1.THC_Comment);
 PARAMETER(DB1.THC_Comment_Type);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt TH Driver RT) TYPE(RTVOBJ) FILE(PKC6CPP)           AB1156365;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header Driv) TYPE(DLTOBJ) FILE(PKC6CPP)          AB1148320;
 PARAMETER(DB1.Tattoo_Sequence_Number);
 EXECUTE FUNCTION(Create Tattoo Header Driv) TYPE(CRTOBJ) FILE(PKC6CPP)          AB1148318;
 PARAMETER(DB1.Tattoo_Sequence_Number);
 PARAMETER(DB1.Tattoo_Header_Action);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?4/11/06 slm Add the file tattoo header ext
EXECUTE FUNCTION(Rtv/Crt/Dlt TttHdr ExtRT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1271811;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Hdr Ext    DO) TYPE(DLTOBJ) FILE(PKDNCPP)           AB1271812;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 EXECUTE FUNCTION(Crt TatHdrExt WTPrdSitCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270572;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.TH_CA_Market_Price);
 PARAMETER(DB1.TH_CA_Base_Market_Price);
 PARAMETER(DB1.TH_CA_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CA_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CA_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CA_Base_Carcass_Value);
 PARAMETER(DB1.TH_CA_Lean_Premium_Amt);
 PARAMETER(DB1.TH_CA_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_CA_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CA_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CA_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CA_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CA_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CA_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CA_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CA_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CA_Lean_Prm_Live_CWT);
 PARAMETER(DB1.TH_CA_Lean_Prm_Carc_CWT);
 PARAMETER(DB1.TH_CA_Gross_Live_CWT);
 PARAMETER(DB1.TH_CA_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Min_LT_Backfat_Inch);
 PARAMETER(DB1.TH_Min_LT_LoinEye_Inch);
 PARAMETER(DB1.TH_Min_LT_Hot_Wt_lb);
 PARAMETER(DB1.TH_Min_LT_Lean_Pct);
 PARAMETER(DB1.TH_Max_GT_Backfat_Inch);
 PARAMETER(DB1.TH_Max_GT_LoinEye_Inch);
 PARAMETER(DB1.TH_Max_GT_Hot_Wt_lb);
 PARAMETER(DB1.TH_Max_GT_Lean_Pct);
 PARAMETER(DB1.TH_Head_LT_Backfat_In_Min);
 PARAMETER(DB1.TH_Head_LT_LoinEye_In_Min);
 PARAMETER(DB1.TH_Head_LT_Hot_Wt_lb_Min);
 PARAMETER(DB1.TH_Head_LT_Lean_Pct_Min);
 PARAMETER(DB1.TH_Head_GT_Backfat_In_Max);
 PARAMETER(DB1.TH_Head_GT_LoinEye_In_Max);
 PARAMETER(DB1.TH_Head_GT_Hot_Wt_lb_Max);
 PARAMETER(DB1.TH_Head_GT_Lean_Pct_Max);
 PARAMETER(DB1.TE_Unused_Number_1);
 PARAMETER(DB1.TE_UnUsed_Number_2);
 PARAMETER(DB1.TE_Unused_Number_3);
 PARAMETER(DB1.TE_Unused_Status_1);
 PARAMETER(DB1.TE_Unused_Status_2);
 PARAMETER(DB1.TE_Unused_Status_3);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PS_Site_ID);
 PARAMETER(DB1.Producer_Subsidiary_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  // DB1.RS User Changed = CON.*BLANK
  DB1.RS_User_Changed = *BLANK;

  // DB1.RS Date Changed = CON.*ZERO
  DB1.RS_Date_Changed = *ZERO;

  // DB1.RS Time Changed = CON.*ZERO
  DB1.RS_Time_Changed = *ZERO;

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt SclTkt RT) TYPE(RTVOBJ) FILE(PKB3CPP)          AB1156367;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(WRK.TH_Scale_Ticket_Sts);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Initialize routine

 //?Modification History
 //?Date        Person   Description
 EXECUTE FUNCTION(C2140 Trn TTo Dbl Inv) TYPE(EXCINTFUN)                         AB1188593;
 {
  //?Execute internal function

  //?12/23/96   SLM     Transfer of one tattoo to another the
  //?                   tattoo detail was doubling up
  //?                   Establish proceudre of how this will be done
  //?                   for the scale people.
  //?                   The orginal tattoo scale ticket must be printed
  //?                   before this transfer can be completed.
  //?                   Do not allow transfer to be selected if
  //?                   any weightments have not been printed.
  //?                   Give user message and not select the transfer
  //?                   Also on the create of the scale weight record
  //?                   create a record but the active status flag stays
  //?                   as was on the orginal record
 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Scale Ticke) TYPE(DLTOBJ) FILE(PKB3CPP)          AB1113771;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 EXECUTE FUNCTION(Crt Ttt SclTkt Sts AIS Cr) TYPE(CRTOBJ) FILE(PKB3CPP)          AB1188590;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(DB1.TST_Head);
 PARAMETER(DB1.TST_Wgt);
 PARAMETER(DB1.TST_Wgt_Date);
 PARAMETER(DB1.TST_Wgt_Time);
 PARAMETER(DB1.TST_Wgt_Hour);
 PARAMETER(DB1.TST_Last_Zero_Date);
 PARAMETER(DB1.TST_Last_Zero_Time);
 PARAMETER(DB1.TST_Record_Created_Status);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  // WRK.@Record Status = PAR.RS Record Status
  WRK.AARecord_Status = PAR.RS_Record_Status;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?Leave the status as is.  If A leave as A if delete leave as is
  // DB1.RS Record Status = WRK.@Record Status
  DB1.RS_Record_Status = WRK.AARecord_Status;

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt SclMsg RT) TYPE(RTVOBJ) FILE(PKDUCPP)          AB1195403;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Scl Tck Msg DO) TYPE(DLTOBJ) FILE(PKDUCPP)          AB1194812;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(DB1.TSTM_Message_Seq);
 EXECUTE FUNCTION(Crt Tattoo Scl Tck Msg CR) TYPE(CRTOBJ) FILE(PKDUCPP)          AB1194810;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(DB1.TSTM_Message_Seq);
 PARAMETER(DB1.TSTM_Message);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


EXECUTE FUNCTION(Rtv/Crt/Dlt Ttt Defs  RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1200267;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Defect     DO) TYPE(DLTOBJ) FILE(PKDZREP)           AB1197900;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DF_Defect_Code);
 EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.TDF_Head_Defect);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.TDF_Unused_Sts_1);
 PARAMETER(DB1.TDF_Unused_Sts_2);
 PARAMETER(DB1.TDF_Unused_Sts_3);
 PARAMETER(DB1.TDF_Unused_Nbr_1);
 PARAMETER(DB1.TDF_Unused_Nbr_2);
 PARAMETER(DB1.TDF_Unused_Nbr_3);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(DB1.TDF_Classification_Defs);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//? 1/30/2019 JBB E14234 - Add PKDOREP transfer record if the current
//?                        Tattoo Header Job Sel record exists.
EXECUTE FUNCTION(Rtv/Crt/Chg Ttt H Job Sel) TYPE(RTVOBJ) FILE(PKDOREP)          AB1349251;
PARAMETER('REPAY');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?Build notes text for TO Tattoo
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Buy Order Number Alpha = CVTVAR(PAR.Buy Order New Usr)
 LCL.Buy_Order_Number_Alpha = CVTVAR(PAR.Buy_Order_New_Usr);

 // LCL.Load Number Alpha = CVTVAR(PAR.Buy Order Load New Usr)
 LCL.Load_Number_Alpha = CVTVAR(PAR.Buy_Order_Load_New_Usr);

 // LCL.Tattoo Number Alpha = CVTVAR(PAR.Tattoo Number New User)
 LCL.Tattoo_Number_Alpha = CVTVAR(PAR.Tattoo_Number_New_User);

 // LCL.Text 25 #1 Usr = CONCAT(CON.BO=,LCL.Buy Order Number Alpha,CND.*None)
 LCL.Text_25_#1_Usr = 'BO=' + LCL.Buy_Order_Number_Alpha (*ZERO);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,CON.L=,CND.*One)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + 'L=' (1);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,LCL.Load Number Alpha,CND.*None)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + LCL.Load_Number_Alpha (*ZERO);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,CON.T=,CND.*One)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + 'T=' (1);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,LCL.Tattoo Number Alpha,CND.*None)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + LCL.Tattoo_Number_Alpha (*ZERO);

 ENDIF;

 EXECUTE FUNCTION(Chg Ttoo Hdr Job Inact CH) TYPE(CHGOBJ) FILE(PKDOREP)          AB1349252;
 PARAMETER(DB1.Tattoo_Job_Sel_Name);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.Text_25_#1_Usr);
 PARAMETER('T');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  // DB1.RS Record Status = CND.InActive
  DB1.RS_Record_Status = 'I';

 }

 //?Build notes text for FROM Tattoo
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Buy Order Number Alpha = CVTVAR(PAR.BOH Buy Order Number)
 LCL.Buy_Order_Number_Alpha = CVTVAR(PAR.BOH_Buy_Order_Number);

 // LCL.Load Number Alpha = CVTVAR(PAR.BOL Load Number)
 LCL.Load_Number_Alpha = CVTVAR(PAR.BOL_Load_Number);

 // LCL.Tattoo Number Alpha = CVTVAR(PAR.TH Tattoo Number)
 LCL.Tattoo_Number_Alpha = CVTVAR(PAR.TH_Tattoo_Number);

 // LCL.Text 25 #1 Usr = CONCAT(CON.BO=,LCL.Buy Order Number Alpha,CND.*None)
 LCL.Text_25_#1_Usr = 'BO=' + LCL.Buy_Order_Number_Alpha (*ZERO);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,CON.L=,CND.*One)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + 'L=' (1);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,LCL.Load Number Alpha,CND.*None)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + LCL.Load_Number_Alpha (*ZERO);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,CON.T=,CND.*One)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + 'T=' (1);

 // LCL.Text 25 #1 Usr = CONCAT(LCL.Text 25 #1 Usr,LCL.Tattoo Number Alpha,CND.*None)
 LCL.Text_25_#1_Usr = LCL.Text_25_#1_Usr + LCL.Tattoo_Number_Alpha (*ZERO);

 ENDIF;

 EXECUTE FUNCTION(Rtv Producer          RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1146757;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Tattoo Header Job CO) TYPE(CRTOBJ) FILE(PKDOREP)           AB1177567;
 PARAMETER(PAR.Tattoo_Job_Sel_Name);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(LCL.Text_25_#1_Usr);
 PARAMETER(DB1.Repayment_Status);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//? 6/30/2021 JBB SDN619 - Process new repayment files if in a
//?                        Repayment.
//?If a Repayment in Progress, update files
CASE;

// IF LCL.Repayment in Progress Y/N is Yes
IF LCL.Repayment_in_Progress_Y_N = 'Y';

// Call program Rtv/Crt/Chg TRD-Xref  XF.
CALL PROGRAM(Rtv/Crt/Chg TRD-Xref  XF) ('PWNWXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.Site_Id_New);
PARAMETER(PAR.Transfer_Site_Id_Usr);
PARAMETER(PAR.Prod_Subsidiary_New_Usr);
PARAMETER(PAR.Th_State_code_New);
PARAMETER(PAR.Transfer_State_User);

ENDIF;

ENDDO;

//?Change Buy Order Load Weight
CASE;

// IF PAR.Status 1 is Yes
IF PAR.Status_1 = 'Y';

EXECUTE FUNCTION(Chg Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1216877;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
{
 //?USER: Process Data record

 //?*---------------------------------------------------------------*
 //?* 09/26/00 PKD Added initialization of the Spread Status to Not
 //?*              Spread.
 EXECUTE FUNCTION(Chg Buy Order Load    CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1216878;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOLW_Movement_Number);
 PARAMETER(DB1.BOLW_Weight_Type);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Buy_Order_Load_USR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?*---------------------------------------------------------------*
//?* 09/26/00 PKD Added the following two updates for the
//?*              BOL Truck Scale Weigh Sts.
EXECUTE FUNCTION(Rtv/Upd BOL Sprd Sts  RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1235232;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 // PAR.BOL Truck Scale Weigh Sts = CND.None
 PAR.BOL_Truck_Scale_Weigh_Sts = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.BOLW Weight Type is In(En)
 IF DB1.BOLW_Weight_Type = 'I';

 // PAR.BOL Truck Scale Weigh Sts = CND.In
 PAR.BOL_Truck_Scale_Weigh_Sts = 'I';

 // IF DB1.BOLW Weight Type is Out(Fuera)
 IF DB1.BOLW_Weight_Type = 'O';

 // PAR.BOL Truck Scale Weigh Sts = CND.Out
 PAR.BOL_Truck_Scale_Weigh_Sts = 'O';

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

}


EXECUTE FUNCTION(Rtv/Upd BOL Sprd Sts  RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1235232;
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 // PAR.BOL Truck Scale Weigh Sts = CND.None
 PAR.BOL_Truck_Scale_Weigh_Sts = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.BOLW Weight Type is In(En)
 IF DB1.BOLW_Weight_Type = 'I';

 // PAR.BOL Truck Scale Weigh Sts = CND.In
 PAR.BOL_Truck_Scale_Weigh_Sts = 'I';

 // IF DB1.BOLW Weight Type is Out(Fuera)
 IF DB1.BOLW_Weight_Type = 'O';

 // PAR.BOL Truck Scale Weigh Sts = CND.Out
 PAR.BOL_Truck_Scale_Weigh_Sts = 'O';

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

}


ENDIF;

//?Count old buy order load - from the Tattoo header up
// Call program Chg BOL/THDR Rec/WgtTrnXF.
CALL PROGRAM(Chg BOL/THDR Rec/WgtTrnXF) ('PKJCXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);

//?Count new buy order load - from the tattoo header and up
// Call program Chg BOL/THDR Rec/WgtTrnXF.
CALL PROGRAM(Chg BOL/THDR Rec/WgtTrnXF) ('PKJCXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);

//?If the Buy Order changes then repop because producer could chg
CASE;

// IF PAR.BOH Buy Order Number NE PAR.Buy Order New Usr
IF PAR.BOH_Buy_Order_Number <> PAR.Buy_Order_New_Usr;

// OR PAR.Buy Order Load New Usr NE PAR.BOL Load Number
OR PAR.Buy_Order_Load_New_Usr <> PAR.BOL_Load_Number;

//?RMC 3/30/04 do if BOL changes too, so movement will get changed.
//?If buy order is different then make changes to tattoo
//?   and the carcass detail buy order info/producer could be diff
//?slm 9/26/08 do if BOL changes too, so site id and subsidiary may change
//?slm 10/20/2008 change inside on movement number being blanked out
EXECUTE FUNCTION(Rtv/Chg Tto/Chg UpInv RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1196323;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.Site_Id_New);
PARAMETER(PAR.Transfer_Site_Id_Usr);
PARAMETER(PAR.Prod_Subsidiary_New_Usr);
PARAMETER(PAR.Transfer_Subsidiary_Usr);
PARAMETER(PAR.Th_State_code_New);
PARAMETER(PAR.Transfer_State_User);
PARAMETER(PAR.Process_EditTattooHdr_USR);
{
 //?USER: Process Data record

 DO;

 // PAR.Process EditTattooHdr USR = CND.No
 PAR.Process_EditTattooHdr_USR = 'N';

 EXECUTE FUNCTION(Rtv BO Info/Tattoo    RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1196230;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(WRK.BOH_Payment_Type);
 PARAMETER(WRK.BOH_Buy_Order_Type);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(WRK.HB_Buyer_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?10/20/2008 SLM Issue report from TF Movement is getting
 //?blank out.
 //?CAN not allow chg to movement number to be other then  blank
 //?due to other tattoo number could already exists for this buy
 //?order. and the other tattoo's could have a different movement
 //?let the NF on the delivery tracking go ahead and
 //?blank out the movement in the tattoo number but send back
 //?parm
 //?RMC 5/12/21 only upd the TH with the movement if its entered on the DT
 //?  on a transfer to a new bo the DT doesnt exist yet
 EXECUTE FUNCTION(Rtv Movement NumberNF RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1292759;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.TH_HPS_Movement_Ref_#);
 PARAMETER(PGM.*Return_code);
 {
  //?USER: Initialize routine

  // PAR.*Return code = CND.*Normal
  PAR.*Return_code = *BLANK;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.*Return code = CND.*Record does not exist
  PAR.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.TH HPS Movement Ref # is Entered
 IF LCL.TH_HPS_Movement_Ref_# <> *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TH HPS Movement Ref # = DB1.TH HPS Movement Ref #
 LCL.TH_HPS_Movement_Ref_# = DB1.TH_HPS_Movement_Ref_#;

 ENDIF;

 EXECUTE FUNCTION(Rtv Prdcr Vendor#,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1143363;
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PD_VND_Address_Number);
 PARAMETER(WRK.TH_Source_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  CASE;

  // IF DB1.PD VND Address Number is Zero
  IF DB1.PD_VND_Address_Number = *ZERO;

  EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(WRK.M3_Supplier_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
  LCL.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

  // LCL.Amount USR = CVTVAR(LCL.Text 7 USR)
  LCL.Amount_USR = CVTVAR(LCL.Text_7_USR);

  // PAR.PD VND Address Number = LCL.Amount USR
  PAR.PD_VND_Address_Number = LCL.Amount_USR;

  ENDIF;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
 PARAMETER(WRK.TH_Source_Code);
 PARAMETER(WRK.TH_Source_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?9/26/2008 slm Issue
 //?this should not be executed if Tattoo is paid
 //?the following routine was taking care of non payed tattoo
 //?numbers in reference to the payment status
 //?due to the fact the change on the tattoo header is being
 //?paid or not paid the db1 of the existing payment status
 //?should be populated in the WORK field
 //?This routine was not moving the db1 to wrk Payment Sts
 //?but still perform the CHG on the Tattoo header
 //?for a non-paid tattoo or a paid tattoo header
 // WRK.TH Payment Sts = DB1.TH Payment Sts
 WRK.TH_Payment_Sts = DB1.TH_Payment_Sts;

 //?If Tattoo not already paid, set up payment sts
 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 //?If Tattoo not already paid, set up payment sts
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 //?MARKET
 CASE;

 // IF DB1.TH Live Purchase UOM is Live Payment
 IF DB1.TH_Live_Purchase_UOM = 'FL'/'LW'/'NH'/'NL'/'SW'/'LX'/'SX';

 CASE;

 // IF WRK.BOH Payment Type is Carcass Merit
 IF WRK.BOH_Payment_Type = 'C';

 //?Carcass Merit - Internal or External
 CASE;

 // IF WRK.BOH Buy Order Type is Internal
 IF WRK.BOH_Buy_Order_Type = 'I';

 // WRK.TH Payment Sts = CND.Sl Int Live
 WRK.TH_Payment_Sts = 'IL';

 //?Carcass Merit - Internal or External
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Payment Sts = CND.Select Live
 WRK.TH_Payment_Sts = 'SL';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Live - Internal or External
 CASE;

 // IF WRK.BOH Buy Order Type is Internal
 IF WRK.BOH_Buy_Order_Type = 'I';

 // WRK.TH Payment Sts = CND.Sl Int Live
 WRK.TH_Payment_Sts = 'IL';

 //?Live - Internal or External
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Payment Sts = CND.Select Live
 WRK.TH_Payment_Sts = 'SL';

 ENDIF;

 ENDIF;

 //?MARKET
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF WRK.BOH Payment Type is Carcass Merit
 IF WRK.BOH_Payment_Type = 'C';

 //?Carcass Merit - Internal or External
 CASE;

 // IF WRK.BOH Buy Order Type is Internal
 IF WRK.BOH_Buy_Order_Type = 'I';

 // WRK.TH Payment Sts = CND.Sl Int Carc
 WRK.TH_Payment_Sts = 'IC';

 //?Carcass Merit - Internal or External
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Payment Sts = CND.Sl Carcass Merit
 WRK.TH_Payment_Sts = 'SC';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Live - Internal or External
 CASE;

 // IF WRK.BOH Buy Order Type is Internal
 IF WRK.BOH_Buy_Order_Type = 'I';

 // WRK.TH Payment Sts = CND.Sl Int Live
 WRK.TH_Payment_Sts = 'IL';

 //?Live - Internal or External
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Payment Sts = CND.Select Live
 WRK.TH_Payment_Sts = 'SL';

 ENDIF;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*-----------------------------------------------------------*
 //?* 09/20/00 PKD The Payment Status should be set based on
 //?*              the Source Type of the Producer.
 //?Live - Internal or External
 CASE;

 // IF WRK.BOH Buy Order Type is Internal
 IF WRK.BOH_Buy_Order_Type = 'I';

 // WRK.TH Payment Sts = CND.Sl Int Live
 WRK.TH_Payment_Sts = 'IL';

 //?Live - Internal or External
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Payment Sts = CND.Select Live
 WRK.TH_Payment_Sts = 'SL';

 ENDIF;

 //?*-----------------------------------------------------------*
 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Tattoo Hdr        CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190872;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(WRK.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(WRK.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(WRK.TH_Payment_Type);
 PARAMETER(LCL.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.TH_Shift_Held_Over_Head);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(WRK.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

 //?9/26/2008 slm Issue
 //?Producer was not being update, add this logic
 //?Insert new routine on tattoo header ext with Producer
 //?If on the transfer the site was changed or the subs was changed
 //?then this will be test in the RTV
 CASE;

 // IF DB1.TH Hog Class Type is Not Resale
 IF DB1.TH_Hog_Class_Type = 'M'/'S';

 EXECUTE FUNCTION(Rtv/Chg TttHdr MstUpd RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1292380;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(PAR.Site_Id_New);
 PARAMETER(PAR.Transfer_Site_Id_Usr);
 PARAMETER(PAR.Prod_Subsidiary_New_Usr);
 PARAMETER(PAR.Transfer_Subsidiary_Usr);
 PARAMETER(PAR.Th_State_code_New);
 PARAMETER(PAR.Transfer_State_User);
 {
  //?USER: Process Data record

  // WRK.PS Site ID = DB1.PS Site ID
  WRK.PS_Site_ID = DB1.PS_Site_ID;

  // WRK.Producer Subsidiary Code = DB1.Producer Subsidiary Code
  WRK.Producer_Subsidiary_Code = DB1.Producer_Subsidiary_Code;

  //?If site transfer then move site from parm
  CASE;

  // IF PAR.Transfer Site Id Usr is Yes
  IF PAR.Transfer_Site_Id_Usr = 'Y';

  // WRK.PS Site ID = PAR.Site Id New
  WRK.PS_Site_ID = PAR.Site_Id_New;

  ENDIF;

  //?If subsidiary transfer then move the subsidiary
  CASE;

  // IF PAR.Transfer Subsidiary Usr is Yes
  IF PAR.Transfer_Subsidiary_Usr = 'Y';

  // WRK.Producer Subsidiary Code = PAR.Prod Subsidiary New Usr
  WRK.Producer_Subsidiary_Code = PAR.Prod_Subsidiary_New_Usr;

  ENDIF;

  //?If the producer was changed this will be update from the PARM
  EXECUTE FUNCTION(Chg TatHdrExt PrdSitTRCH) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1292379;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(WRK.PS_Site_ID);
  PARAMETER(WRK.Producer_Subsidiary_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv/Chg Cd Up Fls Info RT) TYPE(RTVOBJ) FILE(PKB1CPP)          AB1196324;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Source_Type);
 PARAMETER(WRK.TH_Payment_Type);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.TH_Source_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Carcass Detail    CH) TYPE(CHGOBJ) FILE(PKB1CPP)           AB1116845;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(DB1.CD_Scale_Sequence_Number);
  PARAMETER(DB1.CD_Carcass_Number);
  PARAMETER(DB1.CD_Carcass_Number_Insert);
  PARAMETER(DB1.CD_Record_Add_Del_Sts);
  PARAMETER(DB1.CD_Sort_Loss);
  PARAMETER(DB1.CD_STD_Yield);
  PARAMETER(DB1.CD_Base_Carcass_CWT);
  PARAMETER(DB1.CD_Crc_Value_Per_CWT);
  PARAMETER(DB1.CD_Base_Carc_Value);
  PARAMETER(DB1.CD_Crc_Value_$_Per_Hd);
  PARAMETER(DB1.CD_Lean_Premium_CWT);
  PARAMETER(DB1.CD_Lean_Premium_$_Per_Hd);
  PARAMETER(DB1.CD_Gross_Value_Per_CWT);
  PARAMETER(DB1.CD_Gross_Value_$_Per_HD);
  PARAMETER(DB1.CD_Kill_Date);
  PARAMETER(DB1.CD_Shift);
  PARAMETER(DB1.CD_FFLI);
  PARAMETER(DB1.CD_Record_Created_W_Avg);
  PARAMETER(DB1.CD_Record_Created_Status);
  PARAMETER(DB1.CD_LOT);
  PARAMETER(DB1.CD_User_Error_Override);
  PARAMETER(PAR.CD_Source_Type);
  PARAMETER(PAR.CD_Payment_Type);
  PARAMETER(DB1.CD_CA_Sort_Loss);
  PARAMETER(DB1.CD_CA_Std_Yield);
  PARAMETER(DB1.CD_CA_Base_Carcass_CWT);
  PARAMETER(DB1.CD_CA_Crc_Value_Per_CWT);
  PARAMETER(DB1.CD_CA_Base_Carc_Value);
  PARAMETER(DB1.CD_CA_Crc_Value_$_Per_Hd);
  PARAMETER(DB1.CD_CA_Lean_Premium_CWT);
  PARAMETER(DB1.CD_CA_Lean_Premium_$_P_Hd);
  PARAMETER(DB1.CD_CA_Gross_Value_Per_CWT);
  PARAMETER(DB1.CD_CA_Gross_Value_$_P_Hd);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.SR_Source_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDDO;

}


ENDIF;

//?If print of scale ticket was selected then process print
CASE;

// IF PAR.Print Scale Tkt       USR is Yes
IF PAR.Print_Scale_Tkt_USR = 'Y';

EXECUTE FUNCTION(Rtv Scl Tkt Val Edt   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1157790;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(WRK.@Record_Found);
PARAMETER(WRK.Found_Act_Scl_Rec_Sts_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.@Record Found = CND.Record Not Found
 PAR.@Record_Found = 'N';

 //?USER: Process Data record

 // PAR.@Record Found = CND.Record Found
 PAR.@Record_Found = 'Y';

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Found Act Scl Rec Sts Usr = CND.Yes
 PAR.Found_Act_Scl_Rec_Sts_Usr = 'Y';

 ENDIF;

}


CASE;

// IF WRK.@Record Found is Record Not Found
IF WRK.@Record_Found = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Prt Scale Tkt - All   UP.
CALL PROGRAM(Prt Scale Tkt - All   UP) ('PKBYXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);

ENDIF;

ENDIF;

