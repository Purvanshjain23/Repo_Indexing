// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTYXFR
// ?Date: 14.08.2025 Time: 02:52:50
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(PAR.Carcass_Dbw_Min);
PARAMETER(PAR.Carcass_Dbw_Max);
PARAMETER(PAR.Carcass_Lgt_Min);
PARAMETER(PAR.Carcass_Lgt_Max);
PARAMETER(PAR.Lean_High_Min);
PARAMETER(PAR.Lean_High_Max);
PARAMETER(PAR.Lean_Low_Min);
PARAMETER(PAR.Lean_Low_Max);
PARAMETER(PAR.High_Yield_Min);
PARAMETER(PAR.High_Yield_Max);
PARAMETER(PAR.Low_Yield_Min);
PARAMETER(PAR.Low_Yield_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.BackFat_High_Min);
PARAMETER(PAR.BackFat_High_Max);
PARAMETER(PAR.BackFat_Low_Min);
PARAMETER(PAR.Backfat_Low_Max);
PARAMETER(PAR.LoinEye_High_Min);
PARAMETER(PAR.LoinEye_High_Max);
PARAMETER(PAR.LoinEye_Low_Min);
PARAMETER(PAR.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Val Kill Trans    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1228960;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(PAR.TH_Group_Reference);
PARAMETER(PAR.TH_Live_Purchase_UOM);
PARAMETER(PAR.TH_Live_Purchase_Price);
PARAMETER(PAR.TH_Live_Gross_Amt);
PARAMETER(PAR.TH_LIve_Net_Amt);
PARAMETER(PAR.TH_Resale_UOM);
PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
PARAMETER(PAR.TH_Pricing_Date);
PARAMETER(PAR.TH_Resale_Spread_Sts);
PARAMETER(PAR.TH_Dead_On_Arrival);
PARAMETER(PAR.TH_Head_Received);
PARAMETER(PAR.TH_Yard_Deads);
PARAMETER(PAR.TH_Held_Over);
PARAMETER(PAR.TH_Head_Condemned);
PARAMETER(PAR.TH_Head_Killed);
PARAMETER(PAR.TH_Head_Adds);
PARAMETER(PAR.TH_Head_Accepted);
PARAMETER(PAR.TH_Live_Wgt);
PARAMETER(PAR.TH_Adj_Live_Wgt);
PARAMETER(PAR.TH_Hot_Wgt);
PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
PARAMETER(PAR.TH_Tot_Backfat_Inches);
PARAMETER(PAR.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(PAR.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Avg_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Lean_Percent);
PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
PARAMETER(PAR.TH_Avg_Backfat);
PARAMETER(PAR.TH_Std_Yield_Percent);
PARAMETER(PAR.TH_Actual_Yield);
PARAMETER(PAR.TH_Adj_Actual_Yield);
PARAMETER(PAR.TH_Yield_Difference);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(PAR.TH_CM_Market_Price);
PARAMETER(PAR.TH_CM_Base_Mkt_Price);
PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(PAR.TH_CM_Base_Carcass_Value);
PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
PARAMETER(PAR.TH_Deduction_Amt);
PARAMETER(PAR.TH_Total_Net_WO_Adds);
PARAMETER(PAR.TH_Carcass_Net_Amt);
PARAMETER(PAR.TH_Additions_Amt);
PARAMETER(PAR.TH_Payment_Gross);
PARAMETER(PAR.Th_Payment_Net_Amt);
PARAMETER(PAR.TH_AP_Voucher_Document#);
PARAMETER(PAR.TH_Freight_Amount);
PARAMETER(PAR.TH_Accrual_Amount);
PARAMETER(PAR.TH_Fixed_Cost_Amount);
PARAMETER(PAR.TH_Calc_Net_Sts);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(PAR.TH_Bal_to_Kill_Gen);
PARAMETER(PAR.TH_Commission_A_P_Voucher);
PARAMETER(PAR.TH_Voucher_Payment_Date);
PARAMETER(PAR.TH_User_Error_Override);
PARAMETER(PAR.TH_Held_Over_Record);
PARAMETER(PAR.TH_Sex);
PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
PARAMETER(PAR.TH_Commission_Paid_Date);
PARAMETER(PAR.TH_Actual_Check_Date);
PARAMETER(PAR.TH_Shipped_Weight);
PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(PAR.TH_FFLI);
PARAMETER(PAR.TH_Kill_Product_Value);
PARAMETER(PAR.TH_Cut_Product_Value);
PARAMETER(PAR.TH_Render_Product_Value);
PARAMETER(PAR.TH_Head_Excluded);
PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(PAR.TH_CM_Gross_Live_CWT);
PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Scale_Ticket_Sts);
PARAMETER(PAR.TH_Payment_Type);
PARAMETER(PAR.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.TH_Source_Code);
PARAMETER(PAR.TH_Hog_Class_Type);
PARAMETER(PAR.TH_Posted_to_HPS_Flag);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(PAR.TH_Shift_Held_Over);
PARAMETER(PAR.DF_Defect_Code);
PARAMETER(PAR.THP_Process_Code);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.HB_Buyer_Code);
PARAMETER(PAR.GN_Genetic_Code);
PARAMETER(PAR.HC_Class_Code);
PARAMETER(PAR.RS_User_Changed);
PARAMETER(PAR.RS_Date_Changed);
PARAMETER(PAR.RS_Time_Changed);
PARAMETER(PAR.RS_Record_Status);
PARAMETER(PAR.RS_Job);
PARAMETER(PAR.RS_Program);
PARAMETER(PAR.RS_User_Added);
PARAMETER(PAR.RS_Date_Added);
PARAMETER(PAR.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.TH PHA Average Type is Available History
IF PAR.TH_PHA_Average_Type = 'HST';

// LCL.Bal w/History = CND.Available History
LCL.Bal_w_History = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Bal w/History = CND.Prior Week History
LCL.Bal_w_History = 'P';

ENDIF;

// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(PAR.TH_Group_Reference);
PARAMETER(PAR.TH_Live_Purchase_UOM);
PARAMETER(PAR.TH_Live_Purchase_Price);
PARAMETER(PAR.TH_Live_Gross_Amt);
PARAMETER(PAR.TH_LIve_Net_Amt);
PARAMETER(PAR.TH_Resale_UOM);
PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
PARAMETER(PAR.TH_Pricing_Date);
PARAMETER(PAR.TH_Resale_Spread_Sts);
PARAMETER(PAR.TH_Dead_On_Arrival);
PARAMETER(PAR.TH_Head_Received);
PARAMETER(PAR.TH_Yard_Deads);
PARAMETER(PAR.TH_Held_Over);
PARAMETER(PAR.TH_Head_Condemned);
PARAMETER(PAR.TH_Head_Killed);
PARAMETER(PAR.TH_Head_Adds);
PARAMETER(PAR.TH_Head_Accepted);
PARAMETER(PAR.TH_Live_Wgt);
PARAMETER(PAR.TH_Adj_Live_Wgt);
PARAMETER(PAR.TH_Hot_Wgt);
PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
PARAMETER(PAR.TH_Tot_Backfat_Inches);
PARAMETER(PAR.TH_Tot_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(PAR.TH_Avg_Hot_Wgt);
PARAMETER(PAR.TH_Avg_Light_Reflectance);
PARAMETER(PAR.TH_Avg_Lean_Percent);
PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
PARAMETER(PAR.TH_Avg_Backfat);
PARAMETER(PAR.TH_Std_Yield_Percent);
PARAMETER(PAR.TH_Actual_Yield);
PARAMETER(PAR.TH_Adj_Actual_Yield);
PARAMETER(PAR.TH_Yield_Difference);
PARAMETER(PAR.TH_Recalc_Live_Wgt);
PARAMETER(PAR.TH_CM_Market_Price);
PARAMETER(PAR.TH_CM_Base_Mkt_Price);
PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(PAR.TH_CM_Base_Carcass_Value);
PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
PARAMETER(PAR.TH_Deduction_Amt);
PARAMETER(PAR.TH_Total_Net_WO_Adds);
PARAMETER(PAR.TH_Carcass_Net_Amt);
PARAMETER(PAR.TH_Additions_Amt);
PARAMETER(PAR.TH_Payment_Gross);
PARAMETER(PAR.Th_Payment_Net_Amt);
PARAMETER(PAR.TH_AP_Voucher_Document#);
PARAMETER(PAR.TH_Freight_Amount);
PARAMETER(PAR.TH_Accrual_Amount);
PARAMETER(PAR.TH_Fixed_Cost_Amount);
PARAMETER(PAR.TH_Calc_Net_Sts);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(PAR.TH_Bal_to_Kill_Gen);
PARAMETER(PAR.TH_Commission_A_P_Voucher);
PARAMETER(PAR.TH_Voucher_Payment_Date);
PARAMETER(PAR.TH_User_Error_Override);
PARAMETER(PAR.TH_Held_Over_Record);
PARAMETER(PAR.TH_Sex);
PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
PARAMETER(PAR.TH_Commission_Paid_Date);
PARAMETER(PAR.TH_Actual_Check_Date);
PARAMETER(PAR.TH_Shipped_Weight);
PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(PAR.TH_FFLI);
PARAMETER(PAR.TH_Kill_Product_Value);
PARAMETER(PAR.TH_Cut_Product_Value);
PARAMETER(PAR.TH_Render_Product_Value);
PARAMETER(PAR.TH_Head_Excluded);
PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(PAR.TH_CM_Gross_Live_CWT);
PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Scale_Ticket_Sts);
PARAMETER(PAR.TH_Payment_Type);
PARAMETER(PAR.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.TH_Source_Code);
PARAMETER(PAR.TH_Hog_Class_Type);
PARAMETER(PAR.TH_Posted_to_HPS_Flag);
PARAMETER(PAR.TH_Schedule_Kill_Shift);
PARAMETER(PAR.TH_Shift_Held_Over);
PARAMETER(PAR.DF_Defect_Code);
PARAMETER(PAR.THP_Process_Code);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.HB_Buyer_Code);
PARAMETER(PAR.GN_Genetic_Code);
PARAMETER(PAR.HC_Class_Code);
PARAMETER(PAR.RS_User_Changed);
PARAMETER(PAR.RS_Date_Changed);
PARAMETER(PAR.RS_Time_Changed);
PARAMETER(PAR.RS_Record_Status);
PARAMETER(PAR.RS_Job);
PARAMETER(PAR.RS_Program);
PARAMETER(PAR.RS_User_Added);
PARAMETER(PAR.RS_Date_Added);
PARAMETER(PAR.RS_Time_Added);
PARAMETER(PAR.Carcass_Dbw_Min);
PARAMETER(PAR.Carcass_Dbw_Max);
PARAMETER(PAR.Carcass_Lgt_Min);
PARAMETER(PAR.Carcass_Lgt_Max);
PARAMETER(PAR.Lean_High_Min);
PARAMETER(PAR.Lean_High_Max);
PARAMETER(PAR.Lean_Low_Min);
PARAMETER(PAR.Lean_Low_Max);
PARAMETER(PAR.High_Yield_Min);
PARAMETER(PAR.High_Yield_Max);
PARAMETER(PAR.Low_Yield_Min);
PARAMETER(PAR.Low_Yield_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.BackFat_High_Min);
PARAMETER(PAR.BackFat_High_Max);
PARAMETER(PAR.BackFat_Low_Min);
PARAMETER(PAR.Backfat_Low_Max);
PARAMETER(PAR.LoinEye_High_Min);
PARAMETER(PAR.LoinEye_High_Max);
PARAMETER(PAR.LoinEye_Low_Min);
PARAMETER(PAR.LoinEye_Low_Max);
PARAMETER('Y');
PARAMETER(LCL.Bal_w_History);
PARAMETER(PAR.TH_PHA_Add_Type);
PARAMETER(PAR.TH_PHA_Average_Type);
PARAMETER(PAR.TH_PHA_Add_Reason);
PARAMETER(*ZERO);
PARAMETER(PAR.PH_GA_Adjusted_Yield);
PARAMETER(PAR.PH_GA_Avg_Lean);
PARAMETER(PAR.PH_GA_Avg_Backfat);
PARAMETER(PAR.PH_GA_Avg_Loin_Eye);
PARAMETER(PAR.PH_GA_Avg_Light_Ref);
PARAMETER(PAR.PH_GA_Lean_Prm_Carc_CWT);
PARAMETER(PAR.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

