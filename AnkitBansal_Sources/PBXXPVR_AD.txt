// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBXXPVR
// ?Date: 14.08.2025 Time: 03:49:43
// ?------------------------------------------------------------------------------------------------

//?USER: User defined action

EXECUTE FUNCTION(Rtv/Crt 855 SAC Tot   RT) TYPE(RTVOBJ) FILE(PBCZCPP)           AC2124033;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Initialize routine

 //?Maintenance:
 //?6/30/15 New install
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?Break on the Accrual Code
 CASE;

 // IF LCL.Accrual Code NE DB1.Accrual Code
 IF LCL.Accrual_Code <> DB1.Accrual_Code;

 //?S2/G1 All/Chg Code for example D240
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(LCL.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(LCL.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method  02=off inv, 06=charge to be paid by Cust
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(LCL.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Add-on/Allowance code
 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // LCL.S1 Allow/Chg Indicator = CND.Charge(Add)
 LCL.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // LCL.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 LCL.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.ENT01-SEQUENCE # = LCL.ENT01-SEQUENCE #
 PAR.ENT01_SEQUENCE_# = LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(Crt EDI PO Ack SAC AL/ CR) TYPE(CRTOBJ) FILE(ECP032D)          AC2121875;
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ENT01_SEQUENCE_#);
 PARAMETER(LCL.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.S12_G2_All_Chg_Method);
 PARAMETER(LCL.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 // LCL.Extended Amount = CON.*ZERO
 LCL.Extended_Amount = 0;

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 ENDIF;

 // LCL.Extended Amount = LCL.Extended Amount + DB1.Extended Amount
 LCL.Extended_Amount = LCL.Extended_Amount + DB1.Extended_Amount;

 //?USER: Exit processing

 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(LCL.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(LCL.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(LCL.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Add-on/Allowance code
 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // LCL.S1 Allow/Chg Indicator = CND.Charge(Add)
 LCL.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // LCL.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 LCL.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 // PAR.ENT01-SEQUENCE # = LCL.ENT01-SEQUENCE #
 PAR.ENT01_SEQUENCE_# = LCL.ENT01_SEQUENCE_#;

 EXECUTE FUNCTION(Crt EDI PO Ack SAC AL/ CR) TYPE(CRTOBJ) FILE(ECP032D)          AC2121875;
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ENT01_SEQUENCE_#);
 PARAMETER(LCL.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.S12_G2_All_Chg_Method);
 PARAMETER(LCL.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 ENDIF;

}


