// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPPGE1R
// ?Date: 14.08.2025 Time: 03:41:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(DTL.Item_Description_DRV);
PARAMETER(DTL.IVF_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.IVF Inventory Value Mthd
DTL.Condition_Desc_1_USR = RTVCND(DTL.IVF_Inventory_Value_Mthd);

// DTL.Condition Desc. 2  USR = Condition name of DTL.IVF Production Value Mthd
DTL.Condition_Desc_2_USR = RTVCND(DTL.IVF_Production_Value_Mthd);

// DTL.ISC Ending Inventory Lbs = PAR.ISC Ending Inventory Lbs
DTL.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inventory_Lbs;

//?USER: Validate detail screen fields

CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

//?R9083 02/16/17 DN-Added Inv Valuation Grouping & Grouping Desc to Parm.
// Call program Dsp Warehouse Prices  DF.
CALL PROGRAM(Dsp Warehouse Prices  DF) ('PPPSDFR');
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
PARAMETER(DTL.IVF_Item_Code);
PARAMETER(DTL.Inv_Valuation_Group_Desc);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.IVF Inventory Value Mthd
DTL.Condition_Desc_1_USR = RTVCND(DTL.IVF_Inventory_Value_Mthd);

// DTL.Condition Desc. 2  USR = Condition name of DTL.IVF Production Value Mthd
DTL.Condition_Desc_2_USR = RTVCND(DTL.IVF_Production_Value_Mthd);

//?Comment req for Inv Val Override
CASE;

// IF DTL.IVF Ovrrde Inv Val Prc/CW is Entered
IF DTL.IVF_Ovrrde_Inv_Val_Prc_CW <> *ZERO;

// AND DTL.IVF Ovrrde Inv Val Commnt is Not Entered
AND DTL.IVF_Ovrrde_Inv_Val_Commnt = *BLANK;

// Send error message - 'Comment is required when entering an adjustment/override.'
ERROR(USR3533);
MSGPARM(DTL.IVF_Ovrrde_Inv_Val_Commnt);

ENDIF;

//?Comment req for Prod Override
CASE;

// IF DTL.IVF Ovrrde Prod Price/CWT is Entered
IF DTL.IVF_Ovrrde_Prod_Price_CWT <> *ZERO;

// AND DTL.IVF Ovrrde Prod Comment is Not Entered
AND DTL.IVF_Ovrrde_Prod_Comment = *BLANK;

// Send error message - 'Comment is required when entering an adjustment/override.'
ERROR(USR3533);
MSGPARM(DTL.IVF_Ovrrde_Prod_Comment);

ENDIF;

//?UPDATE CUR INV WITH OVERRIDE  RMC 6/27/06
CASE;

// IF DTL.IVF Ovrrde Inv Val Prc/CW is Entered
IF DTL.IVF_Ovrrde_Inv_Val_Prc_CW <> *ZERO;

// DTL.IVF Cur Wk Inv Val Prc/CW = DTL.IVF Ovrrde Inv Val Prc/CW
DTL.IVF_Cur_Wk_Inv_Val_Prc_CW = DTL.IVF_Ovrrde_Inv_Val_Prc_CW;

ENDIF;

//?UPDATE CUR PROD WITH OVERRIDE RMC 6/27/06
CASE;

// IF DTL.IVF Ovrrde Prod Price/CWT is Entered
IF DTL.IVF_Ovrrde_Prod_Price_CWT <> *ZERO;

// DTL.IVF Curr Wk Prod Price/CW = DTL.IVF Ovrrde Prod Price/CWT
DTL.IVF_Curr_Wk_Prod_Price_CW = DTL.IVF_Ovrrde_Prod_Price_CWT;

ENDIF;

//?Cant approve if End Inv exists and inv prices are both -0-       2/7/2006
CASE;

// IF DTL.ISC Ending Inventory Lbs is Not equal zero
IF DTL.ISC_Ending_Inventory_Lbs <> *ZERO;

// AND DTL.IVF Cur Wk Inv Val Prc/CW is Equal to Zero
AND DTL.IVF_Cur_Wk_Inv_Val_Prc_CW = *ZERO;

// AND DTL.IVF Ovrrde Inv Val Prc/CW is Equal to Zero
AND DTL.IVF_Ovrrde_Inv_Val_Prc_CW = *ZERO;

//?R9083 02/16/17 DN-Modified to Also RST by Inv Valuation Grouping.
EXECUTE FUNCTION(Rtv Whse Price       RT) TYPE(RTVOBJ) FILE(PPBSCPP)            AC1772762;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
PARAMETER(DTL.IVF_Item_Code);
PARAMETER(WRK.Price_Status);
{
 //?USER: Initialize routine

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 //?USER: Process Data record

 CASE;

 // IF DB1.ISC Warehouse Price /UOM is Entered
 IF DB1.ISC_Warehouse_Price_UOM <> *ZERO;

 // PAR.Price Status = CND.Priced
 PAR.Price_Status = 'P';

 ENDIF;

}


CASE;

// IF WRK.Price Status is Unpriced
IF WRK.Price_Status = 'U';

CASE;

// IF DTL.IVF Cur Wk Inv Val Status is Approved
IF DTL.IVF_Cur_Wk_Inv_Val_Status = 'A';

// Send error message - 'Curr Inventory Price/CWT required. Inventory exists.'
ERROR(USR3618);
MSGPARM(DTL.IVF_Ovrrde_Inv_Val_Prc_CW);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(DTL.Item_Description_DRV);
PARAMETER(DTL.IVF_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Inventory Value   CH) TYPE(CHGOBJ) FILE(PPBTCPP)           AC1738125;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
PARAMETER(DTL.IVF_Item_Code);
PARAMETER(DTL.IVF_WIP_FG_Item_Code);
PARAMETER(DTL.IVF_Item_Type);
PARAMETER(DTL.IVF_Unused_Sts_2);
PARAMETER(DTL.IVF_Item_Cmdty_Price_Grp);
PARAMETER(DTL.IVF_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(DTL.IVF_Item_Structure_Type);
PARAMETER(DTL.IVF_Item_Structure_Group);
PARAMETER(DTL.IVF_Item_Structure_Class);
PARAMETER(DTL.IVF_Item_Market_Overage);
PARAMETER(DTL.IVF_Item_GL_Sub_Code);
PARAMETER(DTL.IVF_Item_UOM_Pricing);
PARAMETER(DTL.IVF_Inventory_Value_Mthd);
PARAMETER(DTL.IVF_Production_Value_Mthd);
PARAMETER(DTL.IVF_Beg_Inv_Price_Per_CWT);
PARAMETER(DTL.IVF_Sales_Price_Per_CWT);
PARAMETER(DTL.IVF_Sales_Price_Per_LB_Dt);
PARAMETER(DTL.IVF_Market_Price_Per_CWT);
PARAMETER(DTL.IVF_Warehouse_Pounds);
PARAMETER(DTL.IVF_Whs_Price_Per_CWT);
PARAMETER(DTL.IVF_Ovrrde_Prod_Price_CWT);
PARAMETER(DTL.IVF_Ovrrde_Prod_Comment);
PARAMETER(DTL.IVF_Curr_Wk_Prod_Price_CW);
PARAMETER(DTL.IVF_Curr_Wk_Prod_Status);
PARAMETER(DTL.IVF_Ovrrde_Inv_Val_Prc_CW);
PARAMETER(DTL.IVF_Ovrrde_Inv_Val_Commnt);
PARAMETER(DTL.IVF_Cur_Wk_Inv_Val_Prc_CW);
PARAMETER(DTL.IVF_Cur_Wk_Inv_Val_Status);
PARAMETER(DTL.IVF_Unused_Weight);
PARAMETER(DTL.IVF_Post_Inventory_Sts);
PARAMETER(DTL.IVF_Unused_Date);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


