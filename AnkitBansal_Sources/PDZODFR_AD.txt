// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDZODFR
// ?Date: 14.08.2025 Time: 03:27:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
PARAMETER(RCD.Application_Code);
PARAMETER(RCD.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Accounting Company Number = PAR.Accounting Company Number
RCD.Company_Number = PAR.Company_Number;

// RCD.Warehouse Code = PAR.Warehouse Code
RCD.Warehouse_Code = PAR.Warehouse_Code;

//?USER: Process subfile control (Pre-confirm)

//?Add Application Profiles
CASE;

// IF CTL.*CMD key is *Add Details
IF CTL.*CMD_key = '06';

CASE;

// IF PAR.User Code Model is equal to blank
IF PAR.User_Code_Model = *BLANK;

// Call program ADD Application Prof.  EF.
CALL PROGRAM(ADD Application Prof.  EF) ('PDZCEFR');
PARAMETER(CTL.User_Profile_Name);
PARAMETER(CTL.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Can not Add Application to non-Model'
ERROR(USR1698);
MSGPARM(CTL.User_Profile_Name);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Delete (4) is selected
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

CASE;

// IF PAR.User Code Model is equal to blank
IF PAR.User_Code_Model = *BLANK;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The Model Application Profile is not eligible for delete.'
ERROR(USR1697);
MSGPARM(RCD.User_Profile_Name);
MSGPARM(RCD.Application_Code);

ENDIF;

ENDIF;

//?Change (2) is selected
CASE;

// IF RCD.*SFLSEL is *Change Status
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF CTL.User Code Model is equal to blank
IF CTL.User_Code_Model = *BLANK;

// Call program EDT Application Prof.  E1.
CALL PROGRAM(EDT Application Prof.  E1) ('PDARE1R');
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Application_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Description);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Not a Model.  Application Profiles can not be changed except if a model.'
ERROR(USR1714);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Delete (4) is selected
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

CASE;

// IF PAR.User Code Model is equal to blank
IF PAR.User_Code_Model = *BLANK;

EXECUTE FUNCTION(DLT Apllication Prof.  DL) TYPE(DLTOBJ) FILE(CADTREP)          AC1249130;
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Application_Code);
{
 //?USER: Processing before Data update

 // Send information message - 'Changes to Application Profile Model will change the Authority for a
 MESSAGE(USR1696 *INFO);
 MSGPARM(PAR.User_Profile_Name);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process command keys

//?Exit Program
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

QUIT;

ENDIF;

//?Help Key
CASE;

// IF CTL.*CMD key is *Help
IF CTL.*CMD_key = '25';

ENDIF;

