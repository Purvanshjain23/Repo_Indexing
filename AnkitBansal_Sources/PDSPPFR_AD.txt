// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSPPFR
// ?Date: 14.08.2025 Time: 12:04:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?** Display 1pg column headings                       02/08/06 LJB
// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?***** Change Log
//?** 07/15/2009 RMC   S00869 Get accrual from History Dtl Accruals with
//?**  Print On Invoice set to "Y", add to extended amt before printing
//?** 02/08/2006 LJB
//?** Changed the logical file to put company number as the third
//?**  key. Add company number to the line item. Remove company
//?**  number totals. If company number is passed in as zeros
//?**  then print "*ALL" in the company name field in 1pg heading.
//?*****
//?USER: Record selection processing

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

//?Memo Processing Selection.
CASE;

// IF PAR.USR Memo Processing is Credit Memos
IF PAR.USR_Memo_Processing = 'C';

CASE;

// IF WRK.Billing Activity Type is Credit Memo
IF WRK.Billing_Activity_Type = '2';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Memo Processing Selection.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Memo Processing is Debit Memos
IF PAR.USR_Memo_Processing = 'D';

CASE;

// IF WRK.Billing Activity Type is Debit Memo
IF WRK.Billing_Activity_Type = '3';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

//?Load First Page Selector Descriptions.
// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.Item Code = PAR.Shipped Item Code
X1PG_Item_Code = PAR.Shipped_Item_Code;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.A/R Customer Number = PAR.A/R Customer Number
X1PG_AR_Customer_Number = PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_AR_Customer_Number);
PARAMETER(X1PG_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Order Header Reason = PAR.Order Header Reason
X1PG_Order_Header_Reason = PAR.Order_Header_Reason;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(X1PG_Order_Header_Reason);
PARAMETER(X1PG_Reason_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Sales Route Code = PAR.Sales Route Code
X1PG_Sales_Route_Code = PAR.Sales_Route_Code;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(X1PG_Sales_Route_Code);
PARAMETER(X1PG_Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Memo Processing = PAR.USR Memo Processing
X1PG_USR_Memo_Processing = PAR.USR_Memo_Processing;

// 1PG.USR Description 20 = Condition name of PAR.USR Memo Processing
X1PG_USR_Description_20 = RTVCND(PAR.USR_Memo_Processing);

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// 1PG.USR Company Name = CON.*ALL
X1PG_USR_Company_Name = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Extended Amount header format

// SUPPRESSED PRINT A/R Customer Name header format

// SUPPRESSED PRINT Order Detail Reason header format

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Attach to Order Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Attach_to_Order_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Status_USR);
PARAMETER(CUR.Date_of_First_Shipment);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Special Comments   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1465129;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.Special_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.USR Description - 15 = WRK.Special Comment 1
CUR.USR_Description_15 = WRK.Special_Comment_1;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Display TOP column headings                       02/08/06 LJB
// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?** S00869 RMC 7/15/09 Get History dtl accrual totals f/Print on Invoice=Y
EXECUTE FUNCTION(Rtv Prnt on Inv Amts  RT) TYPE(RTVOBJ) FILE(PDICCPP)           AC1947117;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(LCL.Total_Amount);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.HDA Print on Invoice is Yes
 IF DB1.HDA_Print_on_Invoice = 'Y';

 // PAR.Total Amount = PAR.Total Amount + DB1.Extended Amount
 PAR.Total_Amount = PAR.Total_Amount + DB1.Extended_Amount;

 ENDIF;

}


// CUR.Extended Amount = CUR.Extended Amount + LCL.Total Amount
CUR.Extended_Amount = CUR.Extended_Amount + LCL.Total_Amount;

//?USER: Process after print of detail format

// WRK.USR Extended Amount S = CUR.Extended Amount + WRK.USR Extended Amount S
WRK.USR_Extended_Amount_S = CUR.Extended_Amount + WRK.USR_Extended_Amount_S;

//?USER: Print required level totals

// SUPPRESSED PRINT Attach to Order Number totals format

// SUPPRESSED PRINT Company Number totals format

// SUPPRESSED PRINT Order Detail Reason totals format

// SUPPRESSED PRINT A/R Customer Name totals format

// NXT.USR Extended Amount S = WRK.USR Extended Amount S
NXT.USR_Extended_Amount_S = WRK.USR_Extended_Amount_S;

// SUPPRESSED PRINT Extended Amount totals format

