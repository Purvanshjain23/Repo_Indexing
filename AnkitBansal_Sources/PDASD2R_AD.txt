// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDASD2R
// ?Date: 14.08.2025 Time: 03:30:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change log and comments
DO;

//?*****
//?ARS038 - 11/21/96 - S. Schertz
//?Include *HOLD* next to the Customer number on PDASD2R page 2 of 2
//?for those customers who have a 'Y' in the Order Entry Hold Flag field
//?in their customer record, as is already reflected on PDASD2R page 1 of 2
//?*****
//?** 05/19/2006 LJB - T00009
//?** Length of all Days to Pay n USR fields changed
//?** 3.0 to 5.0 to prevent truncating when more than 999 days.
//?*****
ENDDO;

//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.A/R Customer Number = PAR.A/R Customer Number
KEY.AR_Customer_Number = PAR.AR_Customer_Number;

//?USER: Load detail screen from DBF record

//?   If A/R Number is different than Parent Number a chain is made to the
//?  Parent Number record to get the parents credit limit,
//?*******
//?Customer Master Information
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Company Name = DTL.Company Name
2ND.Company_Name = DTL.Company_Name;

EXECUTE FUNCTION(RTV Cust Aged Inv Info RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1392617;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Customer Name = DTL.Customer Name
2ND.Customer_Name = DTL.Customer_Name;

// DTL.Hold Description Field = CND.Blank
DTL.Hold_Description_Field = *BLANK;

//?Put on hold description on the screen
CASE;

// IF PAR.Order Entry Hold is New Order Hold
IF PAR.Order_Entry_Hold = 'Y';

// DTL.Hold Description Field = CND.*Hold*
DTL.Hold_Description_Field = '*Hold*';

// 2ND.Hold Description Field = CND.*Hold*
2ND.Hold_Description_Field = '*Hold*';

//?Put on hold description on the screen
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Hold Description Field = CND.Blank
DTL.Hold_Description_Field = *BLANK;

// 2ND.Hold Description Field = CND.Blank
2ND.Hold_Description_Field = *BLANK;

ENDIF;

//?Parent Credit Limit if A/R Customer has a parent
CASE;

// IF DB1.A/R Customer Number NE PAR.Parent Customer
IF DB1.AR_Customer_Number <> PAR.Parent_Customer;

// DTL.Parent Credit Limit = CND.equal to zero
DTL.Parent_Credit_Limit = *ZERO;

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(PAR.Parent_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Build Aging Header Information
EXECUTE FUNCTION(RTV A/R Aging info     RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1110493;
PARAMETER(DB1.Company_Number);
PARAMETER(PAR.A_R_Aging_Days_1);
PARAMETER(PAR.A_R_Aging_Days_2);
PARAMETER(PAR.A_R_Aging_Days_3);
PARAMETER(PAR.A_R_Aging_Days_4);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.USR Aging Days 1 = PAR.A/R Aging Days - 1
2ND.USR_Aging_Days_1 = PAR.A_R_Aging_Days_1;

// 2ND.USR Aging Days 2 = PAR.A/R Aging Days - 2
2ND.USR_Aging_Days_2 = PAR.A_R_Aging_Days_2;

// 2ND.USR aging days 3 = PAR.A/R Aging Days - 3
2ND.USR_aging_days_3 = PAR.A_R_Aging_Days_3;

// 2ND.USR aging days 4 = PAR.A/R Aging Days - 4
2ND.USR_aging_days_4 = PAR.A_R_Aging_Days_4;

// 2ND.A/R Aging Days - 1 = PAR.A/R Aging Days - 1
2ND.A_R_Aging_Days_1 = PAR.A_R_Aging_Days_1;

// 2ND.A/R Aging Days - 2 = PAR.A/R Aging Days - 2
2ND.A_R_Aging_Days_2 = PAR.A_R_Aging_Days_2;

// 2ND.A/R Aging Days - 3 = PAR.A/R Aging Days - 3
2ND.A_R_Aging_Days_3 = PAR.A_R_Aging_Days_3;

// 2ND.A/R Aging Days - 4 = PAR.A/R Aging Days - 4
2ND.A_R_Aging_Days_4 = PAR.A_R_Aging_Days_4;

// 2ND.USR Age Heading A = PAR.A/R Aging Days - 1 + CON.1
2ND.USR_Age_Heading_A = PAR.A_R_Aging_Days_1 + 1;

// 2ND.USR Age Heading B = PAR.A/R Aging Days - 2 + CON.1
2ND.USR_Age_Heading_B = PAR.A_R_Aging_Days_2 + 1;

// 2ND.USR Age Heading C = PAR.A/R Aging Days - 3 + CON.1
2ND.USR_Age_Heading_C = PAR.A_R_Aging_Days_3 + 1;

// 2ND.USR Age Heading D = PAR.A/R Aging Days - 4
2ND.USR_Age_Heading_D = PAR.A_R_Aging_Days_4;

// 2ND.USR Age Heading E = 2ND.USR Age Heading A
2ND.USR_Age_Heading_E = 2ND.USR_Age_Heading_A;

// 2ND.USR Age Heading F = 2ND.USR Age Heading B
2ND.USR_Age_Heading_F = 2ND.USR_Age_Heading_B;

// 2ND.USR Age Heading G = 2ND.USR Age Heading C
2ND.USR_Age_Heading_G = 2ND.USR_Age_Heading_C;

// 2ND.USR Age Heading H = 2ND.USR Age Heading D
2ND.USR_Age_Heading_H = 2ND.USR_Age_Heading_D;

//?Total Past Due for CB
// 2ND.USR Tot Past Due CB = DB1.Age $ Due - Aging 1 - CB + DB1.Age $ Due - Aging 2
2ND.USR_Tot_Past_Due_CB = DB1.Age_Due_Aging_1_CB + DB1.Age_Due_Aging_2_CB;

// 2ND.USR Tot Past Due CB = 2ND.USR Tot Past Due CB + DB1.Age $ Due - Aging 3 - CB
2ND.USR_Tot_Past_Due_CB = 2ND.USR_Tot_Past_Due_CB + DB1.Age_Due_Aging_3_CB;

// 2ND.USR Tot Past Due CB = 2ND.USR Tot Past Due CB + DB1.Age $ Due - Aging 4 - CB
2ND.USR_Tot_Past_Due_CB = 2ND.USR_Tot_Past_Due_CB + DB1.Age_Due_Aging_4_CB;

// 2ND.USR Tot Past Due CB = 2ND.USR Tot Past Due CB + DB1.Age $ Due - Aging 5 - CB
2ND.USR_Tot_Past_Due_CB = 2ND.USR_Tot_Past_Due_CB + DB1.Age_Due_Aging_5_CB;

//?Total Due for CB
// 2ND.USR Tot. Due with CB = DB1.Age $ Due - Current - CB + 2ND.USR Tot Past Due C
2ND.USR_Tot_Due_with_CB = DB1.Age_Due_Current_CB + 2ND.USR_Tot_Past_Due_CB;

//?Total Past Due w/o CB
// 2ND.USR tot past due W/CB = DB1.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Aging 2
2ND.USR_tot_past_due_W_CB = DB1.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

// 2ND.USR tot past due W/CB = 2ND.USR tot past due W/CB + DB1.Age $ Due-Aging 3-W/
2ND.USR_tot_past_due_W_CB = 2ND.USR_tot_past_due_W_CB + DB1.Age_Due_Aging_3_W_O_CB;

// 2ND.USR tot past due W/CB = 2ND.USR tot past due W/CB + DB1.Age $ Due-Aging 4-W/
2ND.USR_tot_past_due_W_CB = 2ND.USR_tot_past_due_W_CB + DB1.Age_Due_Aging_4_W_O_CB;

// 2ND.USR tot past due W/CB = 2ND.USR tot past due W/CB + DB1.Age $ Due-Aging 5-W/
2ND.USR_tot_past_due_W_CB = 2ND.USR_tot_past_due_W_CB + DB1.Age_Due_Aging_5_W_O_CB;

//?Total due w/o CB
// 2ND.USR Tot. Due W/O CB = 2ND.USR tot past due W/CB + DB1.Age $ Due-Current-W/O
2ND.USR_Tot_Due_W_O_CB = 2ND.USR_tot_past_due_W_CB + DB1.Age_Due_Current_W_O_CB;

//?Calculating Avg Days to Pay
//?Calculating MTD Avg Days to Pay
CASE;

// IF DB1.MTD Invoices Paid is Not zero
IF DB1.MTD_Invoices_Paid <> *ZERO;

// PAR.MTD Avg Days to Pay Calc = DB1.MTD Days Paid / DB1.MTD Invoices Paid *Rounde
PAR.MTD_Avg_Days_to_Pay_Calc = DB1.MTD_Days_Paid / DB1.MTD_Invoices_Paid 'H';

// DTL.MTD Avg Days to Pay = PAR.MTD Avg Days to Pay Calc * CON.1 *Rounded
DTL.MTD_Avg_Days_to_Pay = PAR.MTD_Avg_Days_to_Pay_Calc * 1 'H';

ENDIF;

//?Calculating YTD Avg Days to Pay
CASE;

// IF DB1.YTD Invoices Paid is Not Equal to Zero
IF DB1.YTD_Invoices_Paid <> *ZERO;

// PAR.YTD Avg Days to Pay Calc = DB1.YTD Days Paid / DB1.YTD Invoices Paid *Rounde
PAR.YTD_Avg_Days_to_Pay_Calc = DB1.YTD_Days_Paid / DB1.YTD_Invoices_Paid 'H';

// DTL.YTD Avg Days to Pay = PAR.YTD Avg Days to Pay Calc * CON.1 *Rounded
DTL.YTD_Avg_Days_to_Pay = PAR.YTD_Avg_Days_to_Pay_Calc * 1 'H';

ENDIF;

//?Get Avg Days to Pay for previous 6 months    11/21/02 PK0477
// LCL.Year Code = JOB.*Job date *YEAR
LCL.Year_Code = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

// LCL.Year Code = LCL.Year Code + CON.2000
LCL.Year_Code = LCL.Year_Code + 2000;

//?** Length of Days to Pay n USR changed from 3.0 to 5.0   5/19/06 LJB
EXECUTE FUNCTION(Rtv Past 6 Avg Dys Pay RT) TYPE(RTVOBJ) FILE(PDLDCPP)          AC1698413;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Year_Code);
PARAMETER(DB1.Current_Month);
PARAMETER(DTL.Month_1_USR);
PARAMETER(DTL.Days_to_Pay_1_USR);
PARAMETER(DTL.Month_2_USR);
PARAMETER(DTL.Days_to_Pay_2_USR);
PARAMETER(DTL.Month_3_USR);
PARAMETER(DTL.Days_to_Pay_3_USR);
PARAMETER(DTL.Month_4_USR);
PARAMETER(DTL.Days_to_Pay_4_USR);
PARAMETER(DTL.Month_5_USR);
PARAMETER(DTL.Days_to_Pay_5_USR);
PARAMETER(DTL.Month_6_USR);
PARAMETER(DTL.Days_to_Pay_6_USR);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?***** 05/19/2006 LJB T00009
 //?** Size of the Days to Pay Usr fields was changed from
 //?** 3.0 to 5.0 to prevent truncation when accumulating for
 //?** large volume customers.
 //?*****
 ENDDO;

 //?USER: Process Data record

 //?original 1/27/05
 CASE;

 // IF DB1.A/R Balance Month EQ PAR.A/R Balance Month
 IF DB1.A_R_Balance_Month = PAR.A_R_Balance_Month;

 //?original 1/27/05
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Month 1 USR is Zero
 IF PAR.Month_1_USR = *ZERO;

 // PAR.Month 1 USR = DB1.A/R Balance Month
 PAR.Month_1_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 1 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_1_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 2 USR is Zero
 IF PAR.Month_2_USR = *ZERO;

 // PAR.Month 2 USR = DB1.A/R Balance Month
 PAR.Month_2_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 2 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_2_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 3 USR is Zero
 IF PAR.Month_3_USR = *ZERO;

 // PAR.Month 3 USR = DB1.A/R Balance Month
 PAR.Month_3_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 3 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_3_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 4 USR is Zero
 IF PAR.Month_4_USR = *ZERO;

 // PAR.Month 4 USR = DB1.A/R Balance Month
 PAR.Month_4_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 4 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_4_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 5 USR is Zero
 IF PAR.Month_5_USR = *ZERO;

 // PAR.Month 5 USR = DB1.A/R Balance Month
 PAR.Month_5_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 5 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_5_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 6 USR is Zero
 IF PAR.Month_6_USR = *ZERO;

 // PAR.Month 6 USR = DB1.A/R Balance Month
 PAR.Month_6_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 6 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_6_USR = DB1.Bal_Avg_Days_to_Pay;

 ENDIF;

 ENDIF;

}


//?USER: Validate detail screen

//?*******
//?Parent Summary Screen
CASE;

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

// Call program DSP Parent Summary     DF.
CALL PROGRAM(DSP Parent Summary     DF) ('PDLUDFR');
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Company_Number);

ENDIF;

//?F7= ww a/r header notes      PK0357 1/10/2002
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// Call program WW Customer/Invoices   DF.
CALL PROGRAM(WW Customer/Invoices   DF) ('POONDFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.AR_Customer_Number);

ENDIF;

//?Customer Master Information
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Company Name = DTL.Company Name
2ND.Company_Name = DTL.Company_Name;

EXECUTE FUNCTION(RTV Cust Aged Inv Info RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1392617;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Customer Name = DTL.Customer Name
2ND.Customer_Name = DTL.Customer_Name;

//?Parent Credit Limit if A/R Customer has a parent
CASE;

// IF PAR.A/R Customer Number NE PAR.Parent Customer
IF PAR.AR_Customer_Number <> PAR.Parent_Customer;

// DTL.Parent Credit Limit = CND.equal to zero
DTL.Parent_Credit_Limit = *ZERO;

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(PAR.Parent_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

