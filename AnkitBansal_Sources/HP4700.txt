      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP4700
      * TITLE:       Work With Budget Templates
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     01/30/04
      *
      * NOTE: This program does not contain security logic.
      *       Therefore, it must be secured to the relevant users through the menu system.
      *       There are no security checks on any programs called from this function.
      *
      * FUNCTION: This Work With displays the records in the Budget Template Header file.
      *
      *           Positioners:
      *                Budget template code
      *
      *           Selectors:
      *                Budget template description
      *                Budget availability code
      *                Creation schedule code
      *                Weeks
      *                Production phase
      *                Type of farm
      *                Cell
      *                Size
      *                Active/inactive status
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 01/27/05  LeAnne Fedor
      *           Per AMB, default Active into the Status field so that only the
      *           'Active' stuff shows up when you first go into the screen.
      *
      * 02/15/05  LeAnne Fedor
      *           Added a parm ('Version') on the call to HP4702-W/W Farm Budgets.
      *           We will call the program with a parm value of blank.
      *
      * 09/08/05  LeAnne Fedor
      *           We added "Confirm Delete" screens for 2 options:
      *             7=Delete Items w/zero Quantity
      *            13=Remove Links to Farms with No Budgets
      *
      * 10/03/05  LeAnne Fedor
      *           Removed option edit that a Template had to have non-zero items for:
      *            12=Copy Items
      *            24=Print Template/Farm Budget Variance
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4700   cf   e             workstn
     F                                     sfile(hp4700s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp185    if   e           k disk
      *    Budget template header
      *
      *
     Fhsp186    if   e           k disk
      *    Budget template detail
      *
      *
     Fhsl186c   if   e           k disk    rename(tdrec:tdrecc)
      *    Budget template detail
      *
      *
     Fhsp187    if   e           k disk
      *    Budget template/farm links
      *
      *
     Fhsl188a   if   e           k disk
      *    Farm budget header
      *
      *
     Fhsl188b   if   e           k disk    rename(jhrec:jhrecb)
      *    Farm budget header
      *
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
     D upper           c                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     D lower           c                   'abcdefghijklmnopqrstuvwxyz'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D procfl          s              1
     D nobudfl         s              1
      *
      *
      * Save fields for positioners and selectors
      *
     D svbtcd          s                   like(c1btcd)
     D svbtds          s                   like(c1btds)
     D svbacd          s                   like(c1bacd)
     D svcscd          s                   like(c1cscd)
     D svbtwk          s                   like(c1btwk)
     D svppcd          s                   like(c1ppcd)
     D svtfcd          s                   like(c1tfcd)
     D svcell          s                   like(c1cell)
     D svsize          s                   like(c1size)
     D svaist          s                   like(c1aist)
      *
      *
      * Workfields
      *
     D wkdesc          s                   like(c1btds)
     D wkbtds          s                   like(c1btds)
     D nbrchar         s              2  0
      *
     D wkbtqt          s                   like(tdbtqt)
      *
      *
      * Parm fields
      *
     D xxversion       s              1
      *
     D xxaist          s                   like(thaist)
     D xxonly0         s              1
     D xxynfl          s              1
      *
     D xxbtcd          s                   like(thbtcd)
     D xxbtds          s                   like(thbtds)
      *
     D xxtfcd          s                   like(thtfcd)
     D xxtfds          s             25
      *
     D xxbacd          s                   like(thbacd)
     D xxbads          s             20
      *
     D xxcscd          s                   like(thcscd)
     D xxcsds          s             20
      *
     D xxppcd          s                   like(thppcd)
     D xxppds          s             30
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldreport               1      1
     D  ldbtcd                 2      7
     D  ldbacd                 8      8
     D  ldcscd                 9      9
     D  ldbtwk                10     14  0
     D  ldcell                15     16  0
     D  ldppcd                17     21
     D  ldtfcd                22     26
     D  ldsize                27     32
     D  ldaist                33     33
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp4700k1
     C                   write     hp4700ec
     C                   exfmt     hp4700c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   exsr      $chksv
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   exsr      $list
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in09 = *on                                  F8-list unlinked
     C                   exsr      $list
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in10 = *on                                  F10-view items
     C                   call      'HP7701'
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in14 = *on                                  F14-W/W Items
     C                   call      'HP4701'
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in15 = *on                                  F15-view farms
     C                   call      'HP7700'
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in16 = *on                                  F16-W/W Farm
     C                   call      'HP4702'
     C                   parm      *blank        xxversion
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C     ldoutu        parm      ldoutu        ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                     API
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
      *
     C                   when      *in24 = *on                                  F24-view unlinked
     C                   call      'HP7706'
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
      *
      * Reposition the subfile if the user has changed any of the
      * positioners or selectors in the control record.
      *
     C                   when      c1btcd <> svbtcd or                          Positioners
     C                             c1btds <> svbtds or
     C                             c1bacd <> svbacd or
     C                             c1cscd <> svcscd or
     C                             c1btwk <> svbtwk or
     C                             c1ppcd <> svppcd or
     C                             c1tfcd <> svtfcd or
     C                             c1cell <> svcell or
     C                             c1size <> svsize or
     C                             c1aist <> svaist
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   eval      reset = no
     C                   eval      routne = set1
      *
      * Prepare to scan on Budget Template Description
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1btds = %trim(c1btds)
     C     ' '           checkr    c1btds        nbrchar
     C                   movel     c1btds        svbtds
      *
      * Trim leading blanks
      *
     C                   eval      c1btcd = %triml(c1btcd)
     C                   move      c1btcd        svbtcd
      *
     C                   move      c1bacd        svbacd
     C                   move      c1cscd        svcscd
     C                   z-add     c1btwk        svbtwk
     C                   move      c1ppcd        svppcd
     C                   move      c1tfcd        svtfcd
     C                   z-add     c1cell        svcell
     C                   move      c1size        svsize
     C                   move      c1aist        svaist
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Budget availability
      *
     C                   select
     C                   when      fld = 'C1BACD'
     C                   call      'HP5035'
     C                   parm      *blank        xxbacd
     C                   parm      *blank        xxbads
     C                   seton                                        51
     C                   if        xxbacd <> *blank
     C                   movel     xxbacd        c1bacd
     C                   endif
      *
      * Creation schedule
     C                   when      fld = 'C1CSCD'
     C                   call      'HP5034'
     C                   parm      *blank        xxcscd
     C                   parm      *blank        xxcsds
     C                   seton                                        52
     C                   if        xxcscd <> *blank
     C                   movel     xxcscd        c1cscd
     C                   endif
      *
      * Production phase
     C                   when      fld = 'C1PPCD'
     C                   call      'HP507'
     C                   parm      *blank        xxppcd
     C                   parm      *blank        xxppds
     C                   seton                                        53
     C                   if        xxppcd <> *blank
     C                   movel     xxppcd        c1ppcd
     C                   endif
      *
      * Type of farm
     C                   when      fld = 'C1TFCD'
     C                   call      'HP5018'
     C                   parm      *blank        xxtfcd
     C                   parm      *blank        xxtfds
     C                   seton                                        54
     C                   if        xxtfcd <> *blank
     C                   movel     xxtfcd        c1tfcd
     C                   endif
      *
      * Active/inactive status
      *
     C                   when      fld = 'C1AIST'
     C                   call      'HP512'
     C                   parm      *blank        xxaist
     C                   seton                                        55
     C                   if        xxaist <> *blank
     C                   movel     xxaist        c1aist
     C                   endif
     C                   other
      *
      * F4 not valid for this field so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   eval      svrrn1 = 0
      *
     C                   clear                   hp4700s1
     C                   seton                                        83        sflclr
     C                   write     hp4700c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1btcd        setll     hsp185
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   eval      hdrrn1 = svrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
      *
     C                   read      hsp185                                 82
     C                   if        *in82 = *off                                 If read
      *
     C                   move      yes           procfl
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1btds <> *blank
     C     lower:upper   xlate     c1btds        wkdesc
     C     lower:upper   xlate     thbtds        wkbtds
     C     wkdesc:nbrcharscan      wkbtds                                 92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
     C                   if        c1bacd <> *blank and
     C                             c1bacd <> thbacd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1cscd <> *blank and
     C                             c1cscd <> thcscd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1btwk <> 0 and
     C                             c1btwk <> thbtwk
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1ppcd <> *blank and
     C                             c1ppcd <> thppcd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1tfcd <> *blank and
     C                             c1tfcd <> thtfcd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1cell <> 0 and
     C                             c1cell <> thcell
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1size <> *blank and
     C                             c1size <> thsize
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1aist <> *blank and
     C                             c1aist <> thaist
     C                   move      no            procfl
     C                   endif
      *
      *
     C                   if        procfl = yes                                 If process
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   eval      d1opt = *blank
     C                   move      thbtcd        d1btcd
     C                   move      thbtds        d1btds
     C                   move      thbacd        d1bacd
     C                   move      thcscd        d1cscd
     C                   z-add     thbtwk        d1btwk
     C                   move      thppcd        d1ppcd
     C                   move      thtfcd        d1tfcd
     C                   z-add     thcell        d1cell
     C                   move      thsize        d1size
     C                   move      thaist        d1aist
     C                   write     hp4700s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   eval      norecs = yes
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   eval      norecs = no
     C                   endif                                                  If no recs
      *
     C                   eval      svrrn1 = hdrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the maintenance program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'HP1700'
     C                   parm      create        mode
     C                   parm      *blank        d1btcd
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Read/edit changed subfile records for valid subfile options on Screen 1
      *-------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     hp4700s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 6' and
     C                             d1opt <> ' 7' and
     C                             d1opt <> ' 8' and
     C                             d1opt <> ' 9' and
     C                             d1opt <> '10' and
     C                             d1opt <> '12' and
     C                             d1opt <> '13' and
     C                             d1opt <> '14' and
     C                             d1opt <> '15' and
     C                             d1opt <> '16' and
     C                             d1opt <> '17' and
     C                             d1opt <> '24' and
     C                             d1opt <> '  '
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      *
      * Budget Template must be 'Active' for these functions:
      *
     C                   if        d1opt = '13' or                              If must be active
     C                             d1opt = '14' or
     C                             d1opt = '15' or
     C                             d1opt = '17'
      *
     C                   if        d1aist = 'I'                                 If not active
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04709'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not active
     C                   endif                                                  If must be active
      *
      *
      * Budget Template header must have 'Items' for these functions:
      *
     C                   if        d1opt = ' 7' or                              If item opt
     C                             d1opt = ' 8' or
     C                             d1opt = '10' or
     C                             d1opt = '12'
      *
     C     d1btcd        chain     hsp186                             92
     C                   if        *in92 = *on                                  If no detail
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04703'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If no detail
     C                   endif                                                  If item opt
      *
      *
      * Budget Template header must have 'Items' for these functions.
      *
     C                   if        d1opt = ' 7'                                 If zero qty
      *
     C     key01         chain     hsl186c                            92
     C                   if        *in92 = *on                                  If no detail
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04735'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If no detail
     C                   endif                                                  If zero qty
      *
      * Budget Template must have 'Linked Farms' for these functions:
      *
     C                   if        d1opt = '13' or                              If farm opt
     C                             d1opt = '14' or
     C                             d1opt = '16' or
     C                             d1opt = '17' or
     C                             d1opt = '24'
      *
     C     d1btcd        chain     hsp187                             92
     C                   if        *in92 = *on                                  If no links
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04716'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If no links
     C                   endif                                                  If farm opt
      *
      *
      * Budget Template must have 'Linked Farms' with NO budgets for
      * these functions:
      *
     C                   if        d1opt = '13'                                 If no farm buds
      *
     C                   move      no            nobudfl
     C     d1btcd        setll     hsp187
      *
     C                   dou       *in91 = *on or nobudfl = yes                 Do detail
     C     d1btcd        reade     hsp187                                 91
     C                   if        *in91 = *off                                 If not EOF
      *
     C     key02         chain     hsl188b                            92
     C                   if        *in92 = *on                                  If no budgets
     C                   move      yes           nobudfl
     C                   endif                                                  If no budgets
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do detail
      *
     C                   if        nobudfl = no
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04736'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endif                                                  If no farm buds
      *
      * For the following functions:
      *   Template must have some Active/Inactive Farm Budgets
      *
     C                   if        d1opt = '24'                                 If budget
      *
     C     d1btcd        chain     hsl188a                            92
     C                   if        *in92 = *on                                  If no go
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04732'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If no go
     C                   endif                                                  If budget
      *
      * Delete template header
      *
     C                   select
     C                   when      d1opt = ' 4'
     C                   exsr      $opt4
      *
      * Delete all items
     C                   when      d1opt = ' 8'
     C                   exsr      $opt8
     C                   endsl
      *
      * Checks completed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    hp4700s1
     C                   setoff                                       8530
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Option 4
      *---------------------------------------------------------------------------------------
      *
      * You cannot delete a Budget Template Header record if it:
      *  1) Has already been used on the Farm Budget Header record
      *  2) Has farms assigned/linked to it
      *  3) Has budget template detail records
      *
     C     $opt4         begsr
      *
      * Check if the Budget Template Code has already been used on a
      * Farm Budget Header record.
      *
     C     d1btcd        chain     hsl188b                            92
     C                   if        *in92 = *off                                 If budgets
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
      *
     C                   select
     C                   when      d1aist = 'A'
     C                   eval      mgid(e) = 'HS04701'
     C                   when      d1aist = 'I'
     C                   eval      mgid(e) = 'HS04739'
     C                   endsl
      *
     C                   exsr      $err1
     C                   endif
      *
     C                   endif                                                  If budgets
      *
      * Check if the Budget Template Code already has any linked farms.
      *
     C     d1btcd        chain     hsp187                             92
     C                   if        *in92 = *off                                 If farm links
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04702'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If farm links
      *
      *
      * Check if there are Budget Template Detail records for this code.
      *
     C     d1btcd        chain     hsp186                             92
     C                   if        *in92 = *off                                 If detail recs
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04715'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If detail recs
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Edits for Option 8-Delete all Items
      *---------------------------------------------------------------------------------------
      *
     C     $opt8         begsr
      *
      * Check if the Budget Template Code already has any linked farms.
      *
     C     d1btcd        chain     hsp187                             92
     C                   if        *in92 = *off                                 If farm links
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04702'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If farm links
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Read subfile records and process user selections for Screen 1
      *---------------------------------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   eval      error = 0
     C                   eval      rtncd = '00'
      *
      * Read all the changed subfile records processing the subfile selection
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp4700s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
      * Option 2=revise
      *
     C                   select
     C                   when      d1opt = ' 2'
     C                   eval      reset = yes
     C                   call      'HP1700'
     C                   parm      revise        mode
     C                   parm                    d1btcd
     C                   parm                    rtncd
      *
      *
      * Option 4=delete
      *
     C                   when      d1opt = ' 4'
     C                   eval      reset = yes
     C                   call      'HP1700'
     C                   parm      delete        mode
     C                   parm                    d1btcd
     C                   parm                    rtncd
      *
      * Option 6=Print
     C                   when      d1opt = ' 6'
     C                   eval      reset = yes
     C                   exsr      $list
      *
      * Option 7=Delete Items with Zero Quantities
      *
     C                   when      d1opt = ' 7'
     C                   eval      reset = yes
     C                   call      'HP7711'
     C                   parm      d1btcd        xxbtcd
     C                   parm      d1btds        xxbtds
     C                   parm      *blank        xxynfl
      *
     C                   if        xxynfl = yes
     C                   call      'HP3700'
     C                   parm                    d1btcd
     C                   parm      'Y'           xxonly0
     C                   parm                    rtncd
     C                   endif
      *
      *
      * Option 8=Delete All Items
      *
     C                   when      d1opt = ' 8'
     C                   eval      reset = yes
     C                   call      'HP1709'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
      *
      * Option 9=Maintain Items
      *
     C                   when      d1opt = ' 9'
     C                   eval      reset = yes
     C     d1btcd        chain     hsp186                             92
     C                   if        *in92 = *off                                 If items
     C                   call      'HP1701'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
     C                   else
      *
     C                   call      'HP1702CL'
     C                   parm                    d1btcd
      *
     C                   call      'HP1701'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
     C                   endif                                                  If items
      *
      * Option 10=View Items
      *
     C                   when      d1opt = '10'
     C                   eval      reset = yes
     C                   call      'HP7702'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
      *
      * Option 12=Copy Items
      *
     C                   when      d1opt = '12'
     C                   eval      reset = yes
     C                   call      'HP1704'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
      *
      *
      * Option 13=Remove Links to Farms with No Budgets
      *
     C                   when      d1opt = '13'
     C                   eval      reset = yes
     C                   call      'HP7712'
     C                   parm      d1btcd        xxbtcd
     C                   parm      d1btds        xxbtds
     C                   parm      *blank        xxynfl
      *
     C                   if        xxynfl = yes
     C                   call      'HP3703'
     C                   parm                    d1btcd
     C                   parm      'Y'           xxonly0
     C                   parm                    rtncd
     C                   endif
      *
      *
      * Option 14=Remove Links to All Farms
      *
     C                   when      d1opt = '14'
     C                   eval      reset = yes
     C                   call      'HP1710'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
      *
      * Option 15=Maintain Farm Links
      *
     C                   when      d1opt = '15'
     C                   eval      reset = yes
     C                   call      'HP1706'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    d1cscd
     C                   parm                    rtncd
      *
      * Option 16=View Farm Links
      *
     C                   when      d1opt = '16'
     C                   eval      reset = yes
     C                   call      'HP7703'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
      *
      * Option 17=Copy Farm Links
      *
     C                   when      d1opt = '17'
     C                   eval      reset = yes
     C                   call      'HP1705'
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    rtncd
      *
      * Option 24-Print Template/Farm Budget Variance
      *
     C                   when      d1opt = '24'
     C                   eval      reset = yes
     C                   exsr      $list
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   eval      d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    hp4700s1
     C                   endif                                                  If rec read
      *
     C                   enddo                                                  Do process
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Print various listings
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
      * Move submission values into LDA
      *
     C                   select
     C                   when      d1opt = ' 6'
     C                   move      'T'           ldreport
     C                   move      d1btcd        ldbtcd
      *
     C                   when      d1opt = '24'
     C                   move      'F'           ldreport
     C                   move      d1btcd        ldbtcd
      *
     C                   when      *in07 = *on
     C                   move      'L'           ldreport
     C                   move      c1btcd        ldbtcd
     C                   move      c1bacd        ldbacd
     C                   move      c1cscd        ldcscd
     C                   z-add     c1btwk        ldbtwk
     C                   z-add     c1cell        ldcell
     C                   move      c1ppcd        ldppcd
     C                   move      c1tfcd        ldtfcd
     C                   move      c1size        ldsize
     C                   move      c1aist        ldaist
      *
     C                   when      *in09 = *on
     C                   move      'U'           ldreport
     C                   endsl
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(52)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on Screen 1
      *----------------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *-----------------------------------------------------------------
      * Seton last record and end job
      *-----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1btcd
     C                   kfld                    wkbtqt
      *
     C     key02         klist
     C                   kfld                    d1btcd
     C                   kfld                    tlfscd
      *
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldbtcd
     C                   move      *blank        ldbacd
     C                   move      *blank        ldcscd
     C                   move      *blank        ldppcd
     C                   move      *blank        ldtfcd
     C                   move      *blank        ldsize
     C                   move      *blank        ldaist
     C                   z-add     0             ldbtwk
     C                   z-add     0             ldcell
      *
     C                   move      no            ldhold
     C                   z-add     1             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      *
      * Default so that the screen intially displays only ACTIVE records.
      *
     C                   move      'A'           c1aist
     C                   move      'A'           svaist
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   eval      wkplin = 5
     C                   eval      wkrlin = wkplin - 1
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(HP4700CL)) JOB(LISTINGS ) JOBQ(__________)
