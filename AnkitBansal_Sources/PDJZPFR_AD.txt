// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJZPFR
// ?Date: 14.08.2025 Time: 12:03:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


MOVE *ALL (To: PAR From: CON);

// WRK.Carcass Count 9.0 USR = CON.*ZERO
WRK.Carcass_Count_9_0_USR = *ZERO;

EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Cooler_Shrink_Percent);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Matrix Type       RT) TYPE(RTVOBJ) FILE(PDI0REP)           AC1353391;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Cutout_Matrix_Code);
PARAMETER(PAR.Effective_Month_Day);
PARAMETER(LCL.Cutout_Matrix_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process before print of first page format

// 1PG.Hog Volume = PAR.Hog Volume
X1PG_Hog_Volume = PAR.Hog_Volume;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// CUR.Production Date = PAR.Production Date
CUR.Production_Date = PAR.Production_Date;

// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

CASE;

IF NEW Cutout_Matrix_Code;
// CUR.Condition Desc. 1  USR = Condition name of LCL.Cutout Matrix Type
CUR.Condition_Desc_1_USR = RTVCND(LCL.Cutout_Matrix_Type);

// Print Cutout Matrix Code header format
PRINT Cutout Matrix Code header format;

ENDIF;

CASE;

IF NEW Effective_Month_Day;
// Print Effective Month/Day header format
PRINT Effective Month/Day header format;

ENDIF;

// SUPPRESSED PRINT Min Carcass Weight header format

// SUPPRESSED PRINT Max Carcass Weight header format

CASE;

IF NEW Lean_Percent;
EXECUTE FUNCTION(Rtv Dist Info         RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1283304;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Cutout_Matrix_Code);
PARAMETER(PAR.Effective_Month_Day);
PARAMETER(CUR.Min_Carcass_Weight);
PARAMETER(CUR.Max_Carcass_Weight);
PARAMETER(CUR.Lean_Percent);
PARAMETER(PAR.Average_Cold_Wgt);
PARAMETER(PAR.Population_Percent);
PARAMETER(PAR.Average_Lean_Percent);
PARAMETER(PAR.Average_Backfat_Inches);
PARAMETER(PAR.Average_Loin_Eye_Depth);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CLC: Number of Carcasses
PAR.Number_of_Carcasses = PAR.Hog_Volume * ( PAR.Population_Percent / 100 'H' ) 'H';

// PAR.Carcasses Allocated USR = PAR.Carcasses Allocated USR + PAR.Number of Carcasses
PAR.Carcasses_Allocated_USR = PAR.Carcasses_Allocated_USR + PAR.Number_of_Carcasses;

// PAR.Average Hot Weight USR = CUR.Max Carcass Weight
PAR.Average_Hot_Weight_USR = CUR.Max_Carcass_Weight;

// Average Cold Weight
PAR.Average_Cold_Wgt = PAR.Average_Hot_Weight_USR * ( 1 - ( PAR.Cooler_Shrink_Percent              +
/ 100 'H' ) ) 'H';

// PAR.Population Cold Wgt USR = PAR.Number of Carcasses * PAR.Average Cold Wgt *Rounded
PAR.Population_Cold_Wgt_USR = PAR.Number_of_Carcasses * PAR.Average_Cold_Wgt 'H';

// PAR.Population Hot Wgt USR = PAR.Number of Carcasses * PAR.Average Hot Weight USR *Rounded
PAR.Population_Hot_Wgt_USR = PAR.Number_of_Carcasses * PAR.Average_Hot_Weight_USR 'H';

// PAR.Weight Allocated USR = PAR.Population Cold Wgt USR
PAR.Weight_Allocated_USR = PAR.Population_Cold_Wgt_USR;

MOVE *ALL (To: CUR From: PAR);

//?SEQ: Accumulations
// PAR.Average Backfat * Wgt USR = CUR.Population Hot Wgt USR * CUR.Average Backfat
PAR.Average_Backfat_Wgt_USR = CUR.Population_Hot_Wgt_USR * CUR.Average_Backfat_Inches              +
'H';

// PAR.Average BackFt WR Tot USR = PAR.Average BackFt WR Tot USR + PAR.Average Back
PAR.Average_BackFt_WR_Tot_USR = PAR.Average_BackFt_WR_Tot_USR                                      +
+ PAR.Average_Backfat_Wgt_USR;

// PAR.Average Loin-I * Wgt USR = CUR.Population Hot Wgt USR * CUR.Average Loin-Eye
PAR.Average_Loin_I_Wgt_USR = CUR.Population_Hot_Wgt_USR * CUR.Average_Loin_Eye_Depth 'H';

// PAR.Average Loin-I WR Tot USR = PAR.Average Loin-I WR Tot USR + PAR.Average Loin
PAR.Average_Loin_I_WR_Tot_USR = PAR.Average_Loin_I_WR_Tot_USR                                      +
+ PAR.Average_Loin_I_Wgt_USR;

// CLC: Hot Weight * Lean %
PAR.Average_Lean_Total_USR = CUR.Population_Hot_Wgt_USR * ( CUR.Average_Lean_Percent               +
/ 100 'H' ) 'H';

// PAR.Average Lean% WR Tot USR = PAR.Average Lean% WR Tot USR + PAR.Average Lean %
PAR.Average_Lean_WR_Tot_USR = PAR.Average_Lean_WR_Tot_USR + PAR.Average_Lean_Total_USR;

// PAR.Hot Weight Tot USR = PAR.Hot Weight Tot USR + CUR.Population Hot Wgt USR
PAR.Hot_Weight_Tot_USR = PAR.Hot_Weight_Tot_USR + CUR.Population_Hot_Wgt_USR;

// PAR.Live Weight Tot USR = PAR.Live Weight Tot USR + CUR.Population Live Wgt USR
PAR.Live_Weight_Tot_USR = PAR.Live_Weight_Tot_USR + CUR.Population_Live_Wgt_USR;

CASE;

// IF PAR.Population Cold Wgt USR is LE Zero
IF PAR.Population_Cold_Wgt_USR <= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Lean Percent header format
PRINT Lean Percent header format;

ENDIF;

//?USER: Process before print of detail format

CASE;

// IF PAR.Population Cold Wgt USR is GT Zero
IF PAR.Population_Cold_Wgt_USR > *ZERO;

EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Variety_Rendered_Cut);
PARAMETER(PAR.Credit_Item_Status);
PARAMETER(PAR.Std_Weight_Head_Var_Ren);
PARAMETER(PAR.Pieces_Per_Head);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Group_for_Packaging);
PARAMETER(PAR.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
PARAMETER(PAR.Fresh_Sched_As_Ordered);
PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(PAR.Default_Warehouse);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Warehouse_Location);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
PARAMETER(PAR.PS_Item_Id);
{
 //?Execute internal function

 EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.PS_Item_Id);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Item Type Code is Raw Materials
  IF PAR.Item_Type_Code = 'RM';

  // PAR.PS Item Identification = CND.RM Base
  PAR.PS_Item_Id = 'RMB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Seconds Item is Yes
  IF PAR.Seconds_Item = 'Y';

  // PAR.PS Item Identification = CND.FG Seconds
  PAR.PS_Item_Id = 'FSC';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Variety/Rendered/Cut is Variety
  IF PAR.Variety_Rendered_Cut = 'V';

  // PAR.PS Item Identification = CND.FG Variety
  PAR.PS_Item_Id = 'FVR';

  // IF PAR.Variety/Rendered/Cut is Rendered
  IF PAR.Variety_Rendered_Cut = 'R';

  // PAR.PS Item Identification = CND.FG Rendered
  PAR.PS_Item_Id = 'FRD';

  // IF PAR.Variety/Rendered/Cut is Cut
  IF PAR.Variety_Rendered_Cut = 'C';

  //?Base/Converted/Fabricated
  CASE;

  // IF PAR.Credit Item Status is yes
  IF PAR.Credit_Item_Status = 'Y';

  //?Setup Base/Converted/Fabricated Credit
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base Credit
  PAR.PS_Item_Id = 'FBC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted Credit
  PAR.PS_Item_Id = 'FCC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated Credit
  PAR.PS_Item_Id = 'FFC';

  //?Setup Base/Converted/Fabricated Credit
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss Credit
  PAR.PS_Item_Id = 'FLC';

  ENDIF;

  //?Base/Converted/Fabricated
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Setup Base/Converted/Fabricated
  CASE;

  // IF PAR.Converted/Base Item is Base
  IF PAR.Base_Conv_Loss_Item = 'B';

  // PAR.PS Item Identification = CND.FG Base
  PAR.PS_Item_Id = 'FGB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Converted
  IF PAR.Base_Conv_Loss_Item = 'C';

  // PAR.PS Item Identification = CND.FG Converted
  PAR.PS_Item_Id = 'FCV';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Fabricated
  IF PAR.Base_Conv_Loss_Item = 'F';

  // PAR.PS Item Identification = CND.FG Fabricated
  PAR.PS_Item_Id = 'FFB';

  //?Setup Base/Converted/Fabricated
  // IF PAR.Converted/Base Item is Loss
  IF PAR.Base_Conv_Loss_Item = 'L';

  // PAR.PS Item Identification = CND.FG Loss
  PAR.PS_Item_Id = 'FLS';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


// WRK.Percent 7.4 USR = DB1.Percent of Carcass / CON.100 *Rounded
WRK.Percent_7_4_USR = DB1.Percent_of_Carcass / 100 'H';

// CUR.PS Weight Sched Prod = PAR.Population Cold Wgt USR * WRK.Percent 7.4 USR *Rounded
CUR.PS_Weight_Sched_Prod = PAR.Population_Cold_Wgt_USR * WRK.Percent_7_4_USR 'H';

//?Allocate Population Cold Weight
CASE;

// IF CUR.PS Weight Sched Prod GT PAR.Weight Allocated USR
IF CUR.PS_Weight_Sched_Prod > PAR.Weight_Allocated_USR;

// CUR.PS Weight Sched Prod = PAR.Weight Allocated USR
CUR.PS_Weight_Sched_Prod = PAR.Weight_Allocated_USR;

// PAR.Weight Allocated USR = CON.*ZERO
PAR.Weight_Allocated_USR = *ZERO;

//?Allocate Population Cold Weight
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Weight Allocated USR = PAR.Weight Allocated USR - CUR.PS Weight Sched Prod
PAR.Weight_Allocated_USR = PAR.Weight_Allocated_USR - CUR.PS_Weight_Sched_Prod;

ENDIF;

// CUR.Pieces Sched Production = PAR.Number of Carcasses * PAR.Pieces Per Head *Rou
CUR.Pieces_Sched_Production = PAR.Number_of_Carcasses * PAR.Pieces_Per_Head 'H';

MOVE *ALL (To: CUR From: PAR);

ENDIF;

//?USER: On print of detail format

CASE;

// IF PAR.Population Cold Wgt USR is LE Zero
IF PAR.Population_Cold_Wgt_USR <= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

NXT.Percent_of_Carcass_SUM = SUM(CUR.Percent_of_Carcass);

NXT.Weight_Sched_Prod_SUM = SUM(CUR.PS_Weight_Sched_Prod);

NXT.Pieces_Sched_Prod_SUM = SUM(CUR.Pieces_Sched_Production);

CASE;

// IF CUR.PS Weight Sched Prod is Not Entered
IF CUR.PS_Weight_Sched_Prod = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(U1LP Upd Prd Plan Dtl RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1302981;
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Default_Warehouse);
PARAMETER(CUR.PS_Weight_Sched_Prod);
PARAMETER(CUR.Pieces_Sched_Production);
PARAMETER(PAR.PS_Item_Id);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(PAR.Credit_Item_Status);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Variety_Rendered_Cut);
PARAMETER(PAR.Seconds_Item);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
{
 //?USER: Initialize routine

 // WRK.Pieces Planned Production = CON.*ZERO
 WRK.PS_Pieces_Planned_Prod = *ZERO;

 // WRK.Weight Planned Production = CON.*ZERO
 WRK.PS_Weight_Planned_Prod = *ZERO;

 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(RTV CtchWgt & Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1233451;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(WRK.Catch_Weight_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Available Ship Date
 CASE;

 // IF PAR.Warehouse Std Chill Time is yes
 IF PAR.Warehouse_Std_Chill_Time = 'Y';

 EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Warehouse_Chill_Time);
 PARAMETER(PAR.PS_Available_Ship_Date);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF WRK.Count USR EQ PAR.Chilling Time
  IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

  // PAR.PS Available Ship Date = DB1.Post to G/L Date
  PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  //?Skip Saturday
  CASE;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  //?Skip Saturday
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

 }

 //?Available Ship Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.PS_Available_Ship_Date);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF WRK.Count USR EQ PAR.Chilling Time
  IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

  // PAR.PS Available Ship Date = DB1.Post to G/L Date
  PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  //?Skip Saturday
  CASE;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  //?Skip Saturday
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

 }

 ENDIF;

 CASE;

 // IF PAR.PS Pieces Planned Prod is GT Zero
 IF PAR.PS_Pieces_Planned_Prod > *ZERO;

 // Average Piece Weight
 PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PS Avg Piece Wgt = CON.*ZERO
 PAR.PS_Avg_Piece_Wgt = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(U1LP Crt Prd Plan Dtl CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1294980;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 //?USER: Process Data record

 // WRK.PS Pieces Planned Prod = DB1.PS Pieces Planned Prod + PAR.PS Pieces Planned
 WRK.PS_Pieces_Planned_Prod = DB1.PS_Pieces_Planned_Prod + PAR.PS_Pieces_Planned_Prod;

 // WRK.PS Weight Planned Prod = DB1.PS Weight Planned Prod + PAR.PS Weight Planned
 WRK.PS_Weight_Planned_Prod = DB1.PS_Weight_Planned_Prod + PAR.PS_Weight_Planned_Prod;

 CASE;

 // IF WRK.PS Pieces Planned Prod is GT Zero
 IF WRK.PS_Pieces_Planned_Prod > *ZERO;

 // Average Piece Weight
 WRK.PS_Avg_Piece_Wgt = WRK.PS_Weight_Planned_Prod / WRK.PS_Pieces_Planned_Prod 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PS Avg Piece Wgt = CON.*ZERO
 WRK.PS_Avg_Piece_Wgt = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(U1LP Chg Prd Plan Dtl CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1294979;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.PS_Weight_Planned_Prod);
 PARAMETER(WRK.PS_Pieces_Planned_Prod);
 PARAMETER(WRK.PS_Avg_Piece_Wgt);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

}


ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Lean_Percent;
CASE;

// IF PAR.Population Cold Wgt USR is LE Zero
IF PAR.Population_Cold_Wgt_USR <= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Lean Percent totals format
PRINT Lean Percent totals format;

ENDIF;

// SUPPRESSED PRINT Max Carcass Weight totals format

// SUPPRESSED PRINT Min Carcass Weight totals format

// SUPPRESSED PRINT Effective Month/Day totals format

// SUPPRESSED PRINT Cutout Matrix Code totals format

CASE;

IF NEW Company_Number;
// CUR.Carcasses Allocated USR = PAR.Carcasses Allocated USR
CUR.Carcasses_Allocated_USR = PAR.Carcasses_Allocated_USR;

//?Calculate Averages based on Carcasses Allocated
CASE;

// IF PAR.Carcasses Allocated USR GT WRK.ZERO
IF PAR.Carcasses_Allocated_USR > WRK.ZERO;

// CUR.Average Hot Weight = PAR.Hot Weight Tot USR / CUR.Carcasses Allocated USR *Rounded
CUR.Average_Hot_Weight = PAR.Hot_Weight_Tot_USR / CUR.Carcasses_Allocated_USR 'H';

ENDIF;

CASE;

// IF PAR.Carcasses Allocated USR LT PAR.Hog Volume
IF PAR.Carcasses_Allocated_USR < PAR.Hog_Volume;

// WRK.Carcass Count 9.0 USR = PAR.Hog Volume - PAR.Carcasses Allocated USR
WRK.Carcass_Count_9_0_USR = PAR.Hog_Volume - PAR.Carcasses_Allocated_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Carcass Count 9.0 USR = CON.*ZERO
WRK.Carcass_Count_9_0_USR = *ZERO;

ENDIF;

// Print Accounting Company Number totals format
PRINT Accounting Company Number totals format;

//?Embedded PRTOBJ : U1LP Alc Carc by Pop% PO
CASE;

// IF WRK.Carcass Count 9.0 USR is eq zero
IF WRK.Carcass_Count_9_0_USR = *ZERO;

QUIT;

ENDIF;

EXECUTE FUNCTION(U1LP Alc Carc by Pop% PO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Cutout_Matrix_Code);
PARAMETER(PAR.Effective_Month_Day);
PARAMETER(CUR.Average_Hot_Weight);
PARAMETER(CUR.Average_Hot_Weight);
PARAMETER(WRK.Carcass_Count_9_0_USR);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Average_BackFt_WR_Tot_USR);
PARAMETER(PAR.Average_Loin_I_WR_Tot_USR);
PARAMETER(PAR.Average_Lean_WR_Tot_USR);
PARAMETER(PAR.Hot_Weight_Tot_USR);
PARAMETER(PAR.Live_Weight_Tot_USR);
PARAMETER(PAR.Production_Type);
{
 //?Execute internal function

 // PAR.Job Time = JOB.*Job time
 PAR.Job_Time = JOB.*Job_time;

 // PAR.User Id = JOB.*USER
 PAR.User_Id = JOB.*USER;

 // PAR.Job Name = JOB.*PROGRAM
 PAR.Job_Name = JOB.*PROGRAM;

 // PAR.Job Date = JOB.*Job date
 PAR.Job_Date = JOB.*Job_date;

}


EXECUTE FUNCTION(U1LP Crt Prd Plan Hdr CR) TYPE(CRTOBJ) FILE(PDJCCPP)           AC1294988;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Hog_Volume);
PARAMETER(CUR.Average_Live_Weight);
PARAMETER(CUR.Average_Hot_Weight);
PARAMETER(PAR.Cooler_Shrink_Percent);
PARAMETER(*ZERO);
PARAMETER(CUR.Average_Lean_Percent);
PARAMETER(CUR.Average_Backfat_Inches);
PARAMETER(CUR.Average_Loin_Eye_Depth);
PARAMETER(PAR.Hot_Weight_Tot_USR);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cooler_Shrink_Percent);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Cold Weight
 DB1.Average_Cold_Weight = DB1.Average_Hot_Weight - ( DB1.Average_Hot_Weight * (
 DB1.Cooler_Shrink_Percent / 100 'H' ) 'H' );

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?USER: On print of end of report format

CASE;

// IF PAR.Hot Weight Tot USR is GT Zero
IF PAR.Hot_Weight_Tot_USR > *ZERO;

EXECUTE FUNCTION(U1LP Upd Carc Yield   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1301970;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Hot_Weight_Tot_USR);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Hot Weight Total is Greater than zero
 IF PAR.Hot_Weight_Total > *ZERO;

 // Percent of Carcass Yield
 PAR.PS_Pct_of_Carcass_Yield = ( DB1.PS_Weight_Planned_Prod / PAR.Hot_Weight_Total 'H' )
 * 100;

 EXECUTE FUNCTION(U1LP Chg Carc Yield   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1301983;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(DB1.PS_Weight_Inv_Adj);
 PARAMETER(DB1.PS_Weight_Ship_Cut_Adj);
 PARAMETER(DB1.PS_Lock_Status);
 PARAMETER(DB1.PS_Item_Sched_Need_Sts);
 PARAMETER(DB1.PS_Production_Warehouse);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

 ENDIF;

}


ENDIF;

