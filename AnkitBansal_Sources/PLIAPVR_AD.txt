// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLIAPVR
// ?Date: 14.08.2025 Time: 02:54:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: User defined action

// Call program PMT Payment Process   PV.
CALL PROGRAM(PMT Payment Process   PV) ('PKXAPVR');

//?Post if No errors were found during the Payment Edit
CASE;

// IF DTL.Pmt Payment Error is No Errors
IF DTL.Pmt_Payment_Error = 'N';

// AND DTL.PP Commission Paym Error is No Errors
AND DTL.PP_Commission_Paym_Error = 'N';

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Post: Crc Sum/Crc Dtl');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Payment Producer Posting'
EXECUTE COMMAND(PRK0457);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_System_Value_Alpha);

// WRK.Date Alpha USR = CVTVAR(DTL.Pmt Current Payment Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.Pmt_Current_Payment_Date);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER('HPECMPRPT');
PARAMETER(PAR.System_Value_Alpha_USR);

// PAR.PRT Printer Device = PAR.System Value Alpha    USR
PAR.PRT_Printer_Device = PAR.System_Value_Alpha_USR;

// Execute command - 'SBM Payment Competitor Processing'
EXECUTE COMMAND(PRK0732);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('GUYNIGHTQ');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(DTL.Oms_System_Value_Alpha);

// Call program Bld Exp Rate HPE Sum  XF.
SBMJOB;
CALL PROGRAM(Bld Exp Rate HPE Sum  XF) ('PKX5XFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(*BLANK);
SBMJOBOVR JOB(EXPRTHPESM);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

// Call program Bld Head Kill/Cut Wk  XF.
SBMJOB;
CALL PROGRAM(Bld Head Kill/Cut Wk  XF) ('PLAIXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
SBMJOBOVR JOB(HEADKILLSM);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

RETURN;

ENDIF;

//?Post if No errors were found during the Payment Edit
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Must run Payment Edit First'
ERROR(PRK0465);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

