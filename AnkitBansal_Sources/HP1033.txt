      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP1033
      * TITLE:       Change Status of HPS-to-JDE Upload Control Record
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     11/11/08
      *
      *
      ****************************************************************
      * MODIFICATIONS
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/27/09  LeAnne Ramsey
      *           Added Period Begin/End Dates on call to HP8001.
      * 09/19/18  Danny Nguyen - S13682
      *           Added Company Code to entry parm list.
      *           Added Company Code when calling HP8001.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1033   cf   e             workstn infds(iofeed)
      *
      *
     Fhsp087    if   e           k disk
      *    Control file: HPS upload to JDE
      *
      *
     Fhsp115    if   e           k disk
      *    Upload status codes (HPS to JDE)
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     d edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     d update          c                   'UPDATE'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D rtncd           s              2
      *
      *
      * Parm fields
      *
13682D xxcocd          s                   like(hscocd)
     D xxacyr          s                   like(hsacyr)
     D xxacpe          s                   like(hsacpe)
     D xxbpdt          s                   like(hsbpdt)
     D xxepdt          s                   like(hsepdt)
     D xxpgm           s                   like(sdpgm)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     c     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp1033k1
     C                   write     hp1033ec
     C                   exfmt     hp1033r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     c                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in09 = *on                                  F9-Accept
     C                   exsr      $upd1
     C                   eval      routne = exit
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     c                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process the user's request
      *---------------------------------------------------------------
      *
     C     $upd1         begsr
      *
     C                   call      'HP8001'
13682C                   parm                    xxcocd
     C                   parm                    d1touplscd
     C                   parm                    d1hucd
     C                   parm                    xxacyr
     C                   parm                    xxacpe
     C                   parm                    xxbpdt
     C                   parm                    xxepdt
     C                   parm      sdpgm         xxpgm
      *
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
13682C                   parm                    xxcocd
     C                   parm                    xxacyr
     C                   parm                    xxacpe
     C                   parm                    xxbpdt
     C                   parm                    xxepdt
     C                   parm                    d1hucd
     C                   parm                    d1huds
     C                   parm                    d1fruplscd
     C                   parm                    d1touplscd
     C                   parm                    rtncd
      *
      * Key lists
      *  None
      *
      *
      * Retrieve Description for From/To Status.
      *
     C     d1fruplscd    chain     hsp115                             92
     C                   if        *in92 = *off
     C                   eval      d1fruplsds = upuplsds
     C                   endif
      *
     C     d1touplscd    chain     hsp115                             92
     C                   if        *in92 = *off
     C                   eval      d1touplsds = upuplsds
     C                   endif
      *
      * Set indicators to control the text displayed on screen.
      *
     C                   select
     C                   when      d1touplscd = 'R'
     C                   seton                                        87
      *
     C                   when      d1touplscd = 'U'
     C                   seton                                        88
     C                   endsl
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
