// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBJPPFR
// ?Date: 14.08.2025 Time: 12:03:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?08/22/19 DN S15343-Get BOXLOAD Minimum Quantity.
EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
PARAMETER(PAR.Company_Number);
PARAMETER('BOXLOAD');
PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Record selection processing

//?08/22/19 DN S15343-Select Matching U/M if Entered.
CASE;

// IF NOT PAR.U/M - Load Scheduling USR is Blank
IF ! PAR.U_M_Load_Scheduling_USR = *BLANK;

// LCL.Boxes Total Quantity = CON.*ZERO
LCL.Boxes_Total_Quantity = *ZERO;

// LCL.USR Unit of Measure = CND.*Blank
LCL.USR_Unit_of_Measure = *BLANK;

EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(1);
PARAMETER(LCL.USR_Unit_of_Measure);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration  6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Mixed
 PAR.USR_Unit_of_Measure = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

}


// LCL.U/M - Load Scheduling USR = LCL.USR Unit of Measure
LCL.U_M_Load_Scheduling_USR = LCL.USR_Unit_of_Measure;

//?Chg MX to BX or CB
CASE;

// IF LCL.U/M - Load Scheduling USR is Mixed
IF LCL.U_M_Load_Scheduling_USR = 'MX';

CASE;

// IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

// LCL.U/M - Load Scheduling USR = CND.Combo
LCL.U_M_Load_Scheduling_USR = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.U/M - Load Scheduling USR = CND.Box
LCL.U_M_Load_Scheduling_USR = 'BX';

ENDIF;

ENDIF;

//?If User Selects 'Box' Then Allow to Match by 'Cases' (CS) Also.
CASE;

// IF PAR.U/M - Load Scheduling USR is Box
IF PAR.U_M_Load_Scheduling_USR = 'BX';

CASE;

// IF LCL.USR Unit of Measure is Cases
IF LCL.USR_Unit_of_Measure = 'CS';

// OR LCL.USR Unit of Measure is Boxed
OR LCL.USR_Unit_of_Measure = 'BX';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If User Selects 'Box' Then Allow to Match by 'Cases' (CS) Also.
// IF *OTHERWISE
IF *OTHERWISE;

//?Must Match By User U/M Selection.
CASE;

// IF PAR.U/M - Load Scheduling USR NE LCL.U/M - Load Scheduling USR
IF PAR.U_M_Load_Scheduling_USR <> LCL.U_M_Load_Scheduling_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(TOP_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF TOP.USR Select/Omit Flag is *Entered
IF TOP_USR_Select_Omit_Flag = 'O'/'S';

// TOP.Condition Desc. 1  USR = Condition name of TOP.TPM Freight Order Sts
TOP_Condition_Desc_1_USR = RTVCND(TOP_OH_Load_Plan_Ready);

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.All
TOP_Condition_Desc_1_USR = 'All';

ENDIF;

//?08/23/19 DN S15343-Set U/M Desc.
CASE;

// IF PAR.U/M - Load Scheduling USR is Blank
IF PAR.U_M_Load_Scheduling_USR = *BLANK;

// TOP.U/M - Load Scheduling Dsc = CON.ALL
TOP_U_M_Load_Scheduling_Dsc = 'ALL';

//?08/23/19 DN S15343-Set U/M Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.U/M - Load Scheduling Dsc = Condition name of PAR.U/M - Load Scheduling USR
TOP_U_M_Load_Scheduling_Dsc = RTVCND(PAR.U_M_Load_Scheduling_USR);

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number header format

ENDIF;

CASE;

IF NEW Deadline_Depart_Date_LH;
// SUPPRESSED PRINT Deadline Depart Date LH header format

ENDIF;

CASE;

IF NEW Deadline_Depart_Time_LH;
// SUPPRESSED PRINT Deadline Depart Time LH header format

ENDIF;

CASE;

IF NEW Scheduled_Ship_Date;
// SUPPRESSED PRINT Scheduled Ship Date header format

ENDIF;

CASE;

IF NEW Order_Number;
// SUPPRESSED PRINT Order Number header format

ENDIF;

CASE;

IF NEW Order_Sequence_Number;
// SUPPRESSED PRINT Order Sequence Number header format

ENDIF;

CASE;

IF NEW Order_Secondary_Line_Seq;
// SUPPRESSED PRINT Order Secondary Line Seq header format

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Order_Secondary_Line_Seq;
// SUPPRESSED PRINT Order Secondary Line Seq totals format

ENDIF;

CASE;

IF NEW Order_Sequence_Number;
// SUPPRESSED PRINT Order Sequence Number totals format

ENDIF;

CASE;

IF NEW Order_Number;
EXECUTE FUNCTION(RTV Ship Cst,Addr,Tpm RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074723;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(CUR.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(CUR.Weight_Sales_usr);
PARAMETER(CUR.Export_Status);
PARAMETER(CUR.OH_Load_Plan_Ready);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Boxes Total Quantity = CON.*ZERO
LCL.Boxes_Total_Quantity = *ZERO;

EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(1);
PARAMETER(CUR.U_M_Load_Scheduling_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration  6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Mixed
 PAR.USR_Unit_of_Measure = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Chg MX to BX or CB
CASE;

// IF CUR.U/M - Load Scheduling USR is Mixed
IF CUR.U_M_Load_Scheduling_USR = 'MX';

CASE;

// IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

// CUR.U/M - Load Scheduling USR = CND.Combo
CUR.U_M_Load_Scheduling_USR = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.U/M - Load Scheduling USR = CND.Box
CUR.U_M_Load_Scheduling_USR = 'BX';

ENDIF;

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

NXT.Weight_Sales_SUM = SUM(CUR.Weight_Sales_usr);

ENDIF;

// SUPPRESSED PRINT Scheduled Ship Date totals format

// SUPPRESSED PRINT Deadline Depart Time LH totals format

// SUPPRESSED PRINT Deadline Depart Date LH totals format

// SUPPRESSED PRINT Company Number totals format

//?USER: On print of final totals format

// CUR.Count USR = CUR.Weight Sales SUM / CON.42000 *
CUR.Count_USR = CUR.Weight_Sales_SUM / 42000;

