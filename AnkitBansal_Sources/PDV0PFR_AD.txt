// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDV0PFR
// ?Date: 14.08.2025 Time: 12:04:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E01135 RMC 11.11.2010 Print customer po
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.Display Dash Line USR = CND.Yes
PAR.Display_Dash_Line_USR = 'Y';

// PAR.Previous Ham Group #  USR = CON.*ZERO
PAR.Previous_Ham_Group_#_USR = *ZERO;

// PAR.Previous Company Nbr  USR = CON.*ZERO
PAR.Previous_Company_Nbr_USR = *ZERO;

// PAR.Previous Order Number USR = CON.*ZERO
PAR.Previous_Order_Number_USR = *ZERO;

// WRK.HGR Report Id = JOB.*PROGRAM
WRK.HGR_Report_Id = JOB.*PROGRAM;

// WRK.HGR Report Date = JOB.*Job date
WRK.HGR_Report_Date = JOB.*Job_date;

// WRK.HGR Report Time = JOB.*Job time
WRK.HGR_Report_Time = JOB.*Job_time;

// WRK.HGR Sequence = CON.*ZERO
WRK.HGR_Sequence = *ZERO;

//?USER: Record selection processing

//?RMC 1/5/6 ADDED PER STEVE BURKE  - COMPANY NUMBER SELECTION
CASE;

// IF DB1.Company Number NE PAR.Company Number
IF DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Cust #/DDD&T       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1568530;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(PAR.Customer_Name);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DB1.Ham_Group_Number);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(PAR.Cancelled_Flag_USR);
{
 //?USER: Initialize routine

 //?05/23/16 RMC E4119 remove live with tpm check
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?Get Deadline Departure Date/Time.
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 // PAR.Deadline Departure Date = CON.*ZERO
 PAR.Deadline_Departure_Date = *ZERO;

 // PAR.Deadline Departure Time = CON.*ZERO
 PAR.Deadline_Departure_Time = *ZERO;

 //?Get Deadline Departure Date/Time.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?05/23/16 RMC E4119 remove live with tpm check
 EXECUTE FUNCTION(RTV Ddln DprtDT/TM/Seq RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1540628;
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Unused_Parm_Value_USR);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Set Cancelled Flag.
 CASE;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 // PAR.Cancelled Flag USR = CND.Yes
 PAR.Cancelled_Flag_USR = 'Y';

 //?Set Cancelled Flag.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Order Details for Cancelled Ham Group.
 DO;

 EXECUTE FUNCTION(CLC Ham Group Dtl Sts  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1571778;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ham_Group_Number);
 PARAMETER(PAR.Cancelled_Flag_USR);
 {
  //?USER: Initialize routine

  // PAR.Cancelled Flag USR = CND.Yes
  PAR.Cancelled_Flag_USR = 'Y';

  //?USER: Process Data record

  CASE;

  // IF DB1.Ham Group Number EQ PAR.Ham Group Number
  IF DB1.Ham_Group_Number = PAR.Ham_Group_Number;

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Cancelled Flag USR = CND.No
  PAR.Cancelled_Flag_USR = 'N';

  ENDIF;

  ENDIF;

 }

 ENDDO;

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Select only order that are not cancelled.
CASE;

// IF PAR.Cancelled Flag USR is Yes
IF PAR.Cancelled_Flag_USR = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Display dashed line (yes/no).
CASE;

// IF DB1.Order Number NE PAR.Previous Order Number USR
IF DB1.Order_Number <> PAR.Previous_Order_Number_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Dash Line USR = CND.No
PAR.Display_Dash_Line_USR = 'N';

ENDIF;

//?Check size of next ham group for page overflow.
CASE;

// IF PAR.Display Dash Line USR is Yes
IF PAR.Display_Dash_Line_USR = 'Y';

// Call program PRT cnt next HG/O rcds XT.
CALL PROGRAM(PRT cnt next HG/O rcds XT) ('PDXLXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Ham_Group_Production_Date);
PARAMETER(DB1.Ham_Group_Processing_Seq);
PARAMETER(DB1.Deadline_Departure_Date);
PARAMETER(DB1.Deadline_Departure_Time);
PARAMETER(PAR.Count_Ahead_USR);

// PAR.Count Ahead USR = PAR.Count Ahead USR + PAR.Count USR
PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + PAR.Count_USR;

CASE;

// IF PAR.Count Ahead USR is GT 80
IF PAR.Count_Ahead_USR > 80;

// PAR.Skip to New Page USR = CND.Yes
PAR.Skip_to_New_Page_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Skip to New Page USR = CND.No
PAR.Skip_to_New_Page_USR = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Skip to New Page USR = CND.No
PAR.Skip_to_New_Page_USR = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Ham Group Production Date = PAR.Ham Group Production Date
TOP_Ham_Group_Production_Date = PAR.Ham_Group_Production_Date;

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

// PAR.Count USR = CON.4
PAR.Count_USR = 4;

//?USER: Print required level headings

// SUPPRESSED PRINT Ham Group Production Date header format

// SUPPRESSED PRINT Ham Group Processing Seq header format

// SUPPRESSED PRINT Deadline Departure Date header format

// SUPPRESSED PRINT Deadline Departure Time header format

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Order Number header format

//?PRTOBJ calls before print of detail format

//?Embedded PRTOBJ : PRT Ham Prod Sch FooterPO
//?******************************************************************
//?*** Print FOOTER for previous detail line.                     ***
//?*** - This code was put here, so we could know if the next     ***
//?***   order number was the same as the previous one.           ***
//?******************************************************************
EXECUTE FUNCTION(PRT Ham Prod Sch FooterPO) TYPE(PRTOBJ);
PARAMETER(PAR.Previous_Ham_Group_#_USR);
PARAMETER(PAR.Previous_Company_Nbr_USR);
PARAMETER(PAR.Previous_Order_Number_USR);
PARAMETER(PAR.Display_Dash_Line_USR);
PARAMETER(PAR.Count_USR);
{
 //?USER: Initialize routine

 // PAR.Cancelled Flag USR = CND.Yes
 PAR.Cancelled_Flag_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.Ham Group Number EQ PAR.Ham Group Number
 IF DB1.Ham_Group_Number = PAR.Ham_Group_Number;

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Cancelled Flag USR = CND.No
 PAR.Cancelled_Flag_USR = 'N';

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.Skip to New Page USR is Yes
IF PAR.Skip_to_New_Page_USR = 'Y';

// PGM.*new page flag = CND.*Yes
PGM.*new_page_flag = 'Y';

ENDIF;

//?USER: On print of detail format

// CUR.Customer Purchase Order # = LCL.Customer Purchase Order #
CUR.Customer_Purchase_Order_# = LCL.Customer_Purchase_Order_#;

// CUR.Customer Name = PAR.Customer Name
CUR.Customer_Name = PAR.Customer_Name;

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Display Scheduling Comment (yes/no).
CASE;

// IF CUR.Ham Group Sched Comment is Eq Blank
IF CUR.Ham_Group_Sched_Comment = *BLANK;

// PAR.Display Sch Comment USR = CND.No
PAR.Display_Sch_Comment_USR = 'N';

// CUR.Sch Comment with *'s USR = CON.*BLANK
CUR.Sch_Comment_with_s_USR = *BLANK;

//?Display Scheduling Comment (yes/no).
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Sch Comment USR = CND.Yes
PAR.Display_Sch_Comment_USR = 'Y';

// CUR.Sch Comment with *'s USR = CON.***
CUR.Sch_Comment_with_s_USR = '***';

// CUR.Sch Comment with *'s USR = CONCAT(CUR.Sch Comment with *'s USR,CUR.Ham Group
CUR.Sch_Comment_with_s_USR = CUR.Sch_Comment_with_s_USR + CUR.Ham_Group_Sched_Comment (1);

// CUR.Sch Comment with *'s USR = CONCAT(CUR.Sch Comment with *'s USR,CON.***,CON.1
CUR.Sch_Comment_with_s_USR = CUR.Sch_Comment_with_s_USR + '***' (1);

// PAR.Count USR = PAR.Count USR + CON.2
PAR.Count_USR = PAR.Count_USR + 2;

ENDIF;

// PAR.Count USR = PAR.Count USR + CON.3
PAR.Count_USR = PAR.Count_USR + 3;

//?Save Current Keys.
// PAR.Previous Company Nbr  USR = CUR.Company Number
PAR.Previous_Company_Nbr_USR = CUR.Company_Number;

// PAR.Previous Order Number USR = CUR.Order Number
PAR.Previous_Order_Number_USR = CUR.Order_Number;

// PAR.Previous Ham Group #  USR = CUR.Ham Group Number
PAR.Previous_Ham_Group_#_USR = CUR.Ham_Group_Number;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Ham Group ItemsBDWKPO
EXECUTE FUNCTION(PRT Ham Group ItemsBDWKPO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Ham_Group_Number);
PARAMETER(PAR.Count_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Company Number totals format

// SUPPRESSED PRINT Deadline Departure Time totals format

// SUPPRESSED PRINT Deadline Departure Date totals format

// SUPPRESSED PRINT Ham Group Processing Seq totals format

// SUPPRESSED PRINT Ham Group Production Date totals format

//?PRTOBJ calls before print of final totals format

//?Embedded PRTOBJ : PRT Ham Prod Sch FooterPO
//?******************************************************************
//?*** Print FOOTER for last detail line.                         ***
//?******************************************************************
EXECUTE FUNCTION(PRT Ham Prod Sch FooterPO) TYPE(PRTOBJ);
PARAMETER(PAR.Previous_Ham_Group_#_USR);
PARAMETER(PAR.Previous_Company_Nbr_USR);
PARAMETER(PAR.Previous_Order_Number_USR);
PARAMETER(PAR.Display_Dash_Line_USR);
PARAMETER(PAR.Count_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


