// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPIQEFR
// ?Date: 14.08.2025 Time: 03:40:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?R9064 RMC 6/08/17 allow recd sts input so they can pick what comps
//?   can sell/ship to what customer
//?E6965 RMC 9/15/16 add copy function for new companies
//?FP1322 01/25/2010 RMC For HPB, validate whse against shipping co too.
//?           ie. 848nnn custs ship from HP1,HP2
// PAR.USR First New Subfile Rcd = CND.blank
PAR.USR_First_New_Subfile_Rcd = *BLANK;

//?If called from menu option, check user's access
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If called from menu option, check user's access
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(WRK.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.Company Number Pass   USR = CND.Equal to zero
PAR.Company_Number_Pass_USR = *ZERO;

//?USER: Initialize subfile header

//?First time, through, load ctl. positioners
CASE;

// IF PAR.USR First New Subfile Rcd is blank
IF PAR.USR_First_New_Subfile_Rcd = *BLANK;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

//?If called from menu, use user's default company
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

// CTL.Company Number = PAR.USR Company Number
CTL.Company_Number = PAR.USR_Company_Number;

//?If called from menu, use user's default company
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

// PAR.USR First New Subfile Rcd = CND.no
PAR.USR_First_New_Subfile_Rcd = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (existing record)

// RCD.Prior Default Ship Co = DB1.Default Shipping Co Sts
RCD.Prior_Default_Ship_Co = DB1.Default_Shipping_Co_Sts;

//?Display only if matches company selected
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

CASE;

// IF RCD.Company Number NE CTL.Company Number
IF RCD.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse validation
CASE;

// IF DB1.Warehouse Code is Warehouse Code Blank
IF DB1.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(RCD.Company_Number);

//?Warehouse validation
// IF DB1.Warehouse Code is Warehouse Code not Blank
IF DB1.Warehouse_Code <> *BLANK;

//?12/04/06 PKD PK0040 The Warehouse needs to be for the Accounting Co.
//?Not hpb
CASE;

// IF LCL.Company Organization is Not HPB
IF LCL.Company_Organization = 'D'/'S';

CASE;

// IF DB1.Outside Warehouse Flag is no
IF DB1.Outside_Warehouse_Flag = 'N';

EXECUTE FUNCTION(Val Acct Company WHS  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801797;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Warehouse not found
IF PGM.*Return_code = 'USR0007';

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(RCD.Company_Number);

ENDIF;

ENDIF;

ENDIF;

//?HPB Only
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

//?whse can be valid for acctng  or shipping  company
CASE;

// IF DB1.Outside Warehouse Flag is no
IF DB1.Outside_Warehouse_Flag = 'N';

EXECUTE FUNCTION(Val Acct Company WHS  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801797;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Warehouse not found
IF PGM.*Return_code = 'USR0007';

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Warehouse not found
IF PGM.*Return_code = 'USR0007';

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(RCD.Company_Number);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?HPB Only  - ship to whse
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(Rtv HPB Cust s/to whs RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1973213;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Default Shipping co flag
CASE;

// IF RCD.Default Shipping Co Sts is Blank
IF RCD.Default_Shipping_Co_Sts = *BLANK;

// Send error message - 'Default Shipping Co Req'
ERROR(USR3409);
MSGPARM(RCD.Default_Shipping_Co_Sts);

ENDIF;

//?Outside warehouse flag
CASE;

// IF DB1.Outside Warehouse Flag is blank
IF DB1.Outside_Warehouse_Flag = *BLANK;

// Send error message - 'Outside WRH Flag is Req'
ERROR(USR3408);
MSGPARM(RCD.Outside_Warehouse_Flag);

ENDIF;

//?If outside warehouse flag is yes, then warehouse must be entered
CASE;

// IF DB1.Outside Warehouse Flag is yes
IF DB1.Outside_Warehouse_Flag = 'Y';

CASE;

// IF DB1.Warehouse Code is Warehouse Code Blank
IF DB1.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse must be entered if outside warehouse flag is yes.'
ERROR(USR1908);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

ENDIF;

//?Check the amount of Y on Default Shp Co > 1 Error
//?Check the amount of N on Default Shp Co > 1 Error
// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('Y');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_Sts);

//?Dft Ship Company only allowed for 1 Company.
// IF LCL.Count Records        USR is Zero
IF LCL.Count_Records_USR = *ZERO;

// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('N');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_Sts);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Comment Exists    RT) TYPE(RTVOBJ) FILE(PMA4REP)           AC1831279;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Comment_Sts_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Comment Sts USR = CND.Exists
 PAR.Comment_Sts_USR = 'E';

 QUIT;

}


// RCD.Freight Cost Work = RCD.Freight Overage Rate CWT
RCD.Freight_Cost_Work = RCD.Co_Cust_Overage_Rate_CWT;

//?USER: Validate subfile control

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Validate subfile record fields

//?SEL: Remit To
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Alt Remittance Flag
AND PGM.*Cursor_field = RCD.Alt_Remittance_Flag;

// Call program Sel A/R Remittance Ad SR.
CALL PROGRAM(Sel A/R Remittance Ad SR) ('POJ5SRR');
PARAMETER(RCD.Alt_Remittance_Flag);

ENDIF;

//?Opt 3 copy to new company
CASE;

// IF RCD.*SFLSEL is Option 3
IF RCD.*SFLSEL = '3'/'3';

// Call program SEL Plant Company      SR.
CALL PROGRAM(SEL Plant Company      SR) ('PPFZSRR');
PARAMETER(LCL.Company_Number_041405);
PARAMETER(LCL.Name);

CASE;

// IF LCL.Company Number     041405 is Equal to zero
IF LCL.Company_Number_041405 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Co/Customer Exists RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1443443;
PARAMETER(LCL.Company_Number_041405);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Company Customer already exists.'
ERROR(USR1008);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Exc Copy to New Comp  XF.
CALL PROGRAM(Exc Copy to New Comp  XF) ('PBYNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Company_Number_041405);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?Opt 8 edit comments
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Edt Co Cust Comment   EF.
CALL PROGRAM(Edt Co Cust Comment   EF) ('PMH3EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);

EXECUTE FUNCTION(Val Comment Exists    RT) TYPE(RTVOBJ) FILE(PMA4REP)           AC1831279;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Comment_Sts_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Comment Sts USR = CND.Exists
 PAR.Comment_Sts_USR = 'E';

 QUIT;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

CASE;

// IF RCD.Record Status is Active/Inactive
IF RCD.Record_Status = 'A'/'I';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Record Status cannot be blanks'
ERROR(USR3777);
MSGPARM(RCD.Record_Status);

ENDIF;

CASE;

// IF RCD.Alt Remittance Flag NE WRK.Blank for 4           USR
IF RCD.Alt_Remittance_Flag <> WRK.Blank_for_4_USR;

EXECUTE FUNCTION(Val A/R Remittance    RT) TYPE(RTVOBJ) FILE(POA7REP)           AC1621733;
PARAMETER(RCD.Alt_Remittance_Flag);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Remittance Address not found.'
ERROR(USR3043);
MSGPARM(RCD.Alt_Remittance_Flag);

ENDIF;

ENDIF;

//?HPB only
CASE;

// IF RCD.Ship To Warehouse is Not Blanks
IF RCD.Ship_To_Warehouse <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse Location RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1564246;
PARAMETER(RCD.Ship_To_Warehouse);
PARAMETER(LCL.Warehouse_Location);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Warehouse Location is External
IF LCL.Warehouse_Location = 'E';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse must be an external warehouse.'
ERROR(USR4207);
MSGPARM(RCD.Ship_To_Warehouse);

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

//?Select warehouse
CASE;

// IF PGM.*Cursor field <IS> RCD.Warehouse Code
IF PGM.*Cursor_field = RCD.Warehouse_Code;

// AND CTL.*CMD key is CF04
AND CTL.*CMD_key = '04';

//?Pk0040 - val per Acctng Co in Warehouse      12/13/06
// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Company_Number);

ENDIF;

//?12/04/06 PKD PK0040 The Warehouse needs to be for the Accounting Co.
//?Not HPB
CASE;

// IF LCL.Company Organization is Not HPB
IF LCL.Company_Organization = 'D'/'S';

CASE;

// IF RCD.Outside Warehouse Flag is no
IF RCD.Outside_Warehouse_Flag = 'N';

EXECUTE FUNCTION(Val Acct Company WHS  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801797;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Warehouse not found
IF PGM.*Return_code = 'USR0007';

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(RCD.Company_Number);

ENDIF;

ENDIF;

ENDIF;

//?HPB Only
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

CASE;

// IF RCD.Outside Warehouse Flag is no
IF RCD.Outside_Warehouse_Flag = 'N';

EXECUTE FUNCTION(Val Acct Company WHS  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801797;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Warehouse not found
IF PGM.*Return_code = 'USR0007';

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Warehouse not found
IF PGM.*Return_code = 'USR0007';

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(RCD.Company_Number);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If outside warehouse flag is yes, then warehouse must be entered
CASE;

// IF RCD.Outside Warehouse Flag is yes
IF RCD.Outside_Warehouse_Flag = 'Y';

CASE;

// IF RCD.Warehouse Code is Warehouse Code Blank
IF RCD.Warehouse_Code = *BLANK;

// Send error message - 'Warehouse must be entered if outside warehouse flag is yes.'
ERROR(USR1908);
MSGPARM(RCD.Warehouse_Code);

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Co/Cust WW Co/Cust CO) TYPE(CHGOBJ) FILE(CAEOREP)          AC1716578;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Alt_Remittance_Flag);
PARAMETER(RCD.Absorbed_Freight_Rate_CWT);
PARAMETER(RCD.Freight_Cost_Work);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Default_Shipping_Co_Sts);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Ship_To_Warehouse);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Company Organization is High Plains Biodiesel
 IF PAR.Company_Organization = 'H';

 EXECUTE FUNCTION(Rtv/Upd ship to whse  RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1973176;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Warehouse);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust Ext hpb s/to CR) TYPE(CRTOBJ) FILE(PDNIREP)           AC1973190;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Warehouse);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg HPB ship to whse  CH) TYPE(CHGOBJ) FILE(PDNIREP)           AC1973183;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Warehouse);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

}


//?USER: Extra processing after DBF update

//?Check the amount of Y on Default Shp Co > 1 Error
//?Check the amount of N on Default Shp Co > 1 Error
// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('Y');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_Sts);

//?Dft Ship Company only allowed for 1 Company.
// IF LCL.Count Records        USR is Zero
IF LCL.Count_Records_USR = *ZERO;

// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('N');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// Send error message - 'Dflt Ship Co can only be sel/non selected for 1 company'
ERROR(USR3617);
MSGPARM(RCD.Default_Shipping_Co_Sts);

ENDIF;

ENDIF;

//?USER: Exit program processing

//?Check the amount of Y on Default Shp Co > 1 Error
//?Check the amount of N on Default Shp Co > 1 Error
// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('Y');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

//?Dft Ship Company only allowed for 1 Company.
// IF LCL.Count Records        USR is Zero
IF LCL.Count_Records_USR = *ZERO;

// Call program Vry Dft ShpCo for 1 Co XF.
CALL PROGRAM(Vry Dft ShpCo for 1 Co XF) ('PPWRXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Count_Records_USR);
PARAMETER('N');

//?Dft Ship Company only allowed for 1 Company.
CASE;

// IF LCL.Count Records        USR is GT 1
IF LCL.Count_Records_USR > 1;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

ENDIF;

