// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POLSEFR
// ?Date: 14.08.2025 Time: 03:37:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?12/20/16 RMC R7535
//?** Don't upd FC fields if change mode..dont want to change them
//?03/20/08 LJB FP1271
//?** Don't Display or Edit References if reference is not required
//?** Don't display air freight pop-up window to confirm air
//?** freight order, new air freight codes will handle this
//?** Don't validate air freight customer in EXT file -
//?** new air freight codes will handle this
//?*****
//?03/03/08 PKD FP1271
//?Added Edit & Display Load Freight Charge Reference selection
//?Added control by either company or customer constraint for select codes
//?Added Held Over reason and On Time reason to the screen
//?Added AIRFRT - customer constraint message to the screen
//?Added DETENT - customer constraint message to the screen
//?*****
//?05/18/04 RMC PKTR01 - remove Co from screen
//?*****
//?** 08/02/2006 LJB A5T015
//?** A Sequence number has been added to the Load Freight Charge file.
//?** Each freight charge code will be added with seq# 1. When a
//?** duplicate freight charge is added, this number will be
//?** automatically incremented.
//?**
//?** If Air Freight charge code is added, a popup window will display
//?** with a list of orders with the Air Freight Order flag
//?** for this load allowing it to be maintained if needed.
//?**
//?** Add option 5 to display the Air Freight Order flag popup
//?** from the *Change screen.
//?*****
ENDDO;

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?USER: Initialize subfile header

// CTL.LH Held Over Reason = PAR.LH Held Over Reason
CTL.LH_Held_Over_Reason = PAR.LH_Held_Over_Reason;

// CTL.LH On-Time Reason Code = PAR.LH On-Time Reason Code
CTL.LH_On_Time_Reason_Code = PAR.LH_On_Time_Reason_Code;

// CTL.Rated Freight = PAR.Rated Freight
CTL.Rated_Freight = PAR.Rated_Freight;

// CTL.Condition Desc. 1  USR = Condition name of PAR.LH Carrier Payment Sts
CTL.Condition_Desc_1_USR = RTVCND(PAR.LH_Carrier_Payment_Sts);

EXECUTE FUNCTION(Held Over Reason Dsc DRV) TYPE(DRVFLD)                         AC1869640;
PARAMETER(CTL.Held_Over_Reason_Dsc_DRV);
PARAMETER(CTL.LH_Held_Over_Reason);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV OT Resaon Descript RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783760;
 PARAMETER(PAR.LH_Held_Over_Reason);
 PARAMETER(PAR.Held_Over_Reason_Dsc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(On-Time Reason Desc DRV) TYPE(DRVFLD)                          AC1869641;
PARAMETER(CTL.On_Time_Reason_Desc_DRV);
PARAMETER(CTL.LH_On_Time_Reason_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV OT Resaon Descript RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783760;
 PARAMETER(PAR.LH_On_Time_Reason_Code);
 PARAMETER(PAR.On_Time_Reason_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Description);
PARAMETER(WRK.FC_Rate_Amount);
PARAMETER(WRK.FC_Unit_of_Measure);
PARAMETER(WRK.LFC_Act_Frt_Include_Sts);
PARAMETER(LCL.FC_Frt_Add_Deduct);
PARAMETER(WRK.FC_Load_Type_Select);
PARAMETER(WRK.FC_State_Select);
PARAMETER(WRK.FC_Export_Select);
PARAMETER(WRK.FC_Shag_Wash_Select);
PARAMETER(WRK.FC_Auto_Calc_Sts);
PARAMETER(WRK.LFC_Charge_Category);
PARAMETER(WRK.FC_Shag_Wash_Comp);
PARAMETER(PAR.FC_Edit_Sequence);
PARAMETER(WRK.LFC_Tot_Freight_Inc_Sts);
PARAMETER(RCD.LFC_Special_Type);
PARAMETER(WRK.FC_ExpInt_FR_FZ_Select);
PARAMETER(WRK.FC_Reference_Required);
PARAMETER(WRK.FC_Trans_Mode_Select);
PARAMETER(WRK.FC_Freight_Rate_Type_Sel);
PARAMETER(WRK.FC_Company_Select);
PARAMETER(WRK.FC_Company_Carrier_Select);
PARAMETER(WRK.FC_Shared_Responsibility);
PARAMETER(WRK.FC_Unused_Sts_10);
PARAMETER(WRK.FC_Auto_Calc_Effective);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

// RCD.Access Denied (Y/N) = CND.blank
RCD.Access_Denied_Y_N = *BLANK;

//?Program Mode = Add
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// RCD.Display Flag 1 USR = CND.yes
RCD.Display_Flag_1_USR = 'Y';

ENDIF;

//?Create Status = Auto
CASE;

// IF DB1.LFC Create Status is Auto
IF DB1.LFC_Create_Status = 'A';

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

//?03/25/09 PKD Do not allow change to a charge already TFS Processed
//?Carrier Payment Status = Paid or TFS Processed
CASE;

// IF PAR.LH Carrier Payment Sts is Paid
IF PAR.LH_Carrier_Payment_Sts = 'P';

// OR DB1.LFC TFP Processed is Processed
OR DB1.LFC_TFP_Processed = 'P';

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

// RCD.Access Denied (Y/N) = CND.yes
RCD.Access_Denied_Y_N = 'Y';

ENDIF;

//?Reference Required = Y
CASE;

// IF RCD.LFC Reference Required is Yes
IF RCD.LFC_Reference_Required = 'Y';

EXECUTE FUNCTION(Rtv Company Resp Co   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1909639;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.CR_Reference_Code);
PARAMETER(RCD.LFCR_Numeric_Value);
PARAMETER(RCD.LFCR_Alpha_Value);
PARAMETER(RCD.USR_Asterisk);
PARAMETER(RCD.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.CR Reference Code is Company
 IF DB1.CR_Reference_Code = 'COMPNY';

 // PAR.Company Number     041405 = DB1.LFCR Numeric Value
 PAR.Company_Number_041405 = DB1.LFCR_Numeric_Value;

 // PAR.USR Asterisk = CON.*
 PAR.USR_Asterisk = *;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.CR Reference Code = DB1.CR Reference Code
 PAR.CR_Reference_Code = DB1.CR_Reference_Code;

 // PAR.LFCR Numeric Value = DB1.LFCR Numeric Value
 PAR.LFCR_Numeric_Value = DB1.LFCR_Numeric_Value;

 // PAR.LFCR Alpha Value = DB1.LFCR Alpha Value
 PAR.LFCR_Alpha_Value = DB1.LFCR_Alpha_Value;

 ENDIF;

}


EXECUTE FUNCTION(Val LdChrg Ref Val Ex RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869650;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.LFCR Reference Type is Charge Allocation
 IF DB1.LFCR_Reference_Type = 'A';

 CASE;

 // IF DB1.LFCR Numeric Value is Equal to zero
 IF DB1.LFCR_Numeric_Value = *ZERO;

 // AND DB1.LFCR Alpha Value is Equal to Blank
 AND DB1.LFCR_Alpha_Value = *BLANK;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


//?** Hilite if no reference yet, else, turn off hilite
CASE;

// IF RCD.Record Found USR is Record Found
IF RCD.Record_Found_USR = 'Y';

// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

//?** Hilite if no reference yet, else, turn off hilite
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Comment Exists    RT) TYPE(RTVOBJ) FILE(PMEYCPP)           AC1909215;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(LCL.Comment_Sts_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Comment Sts USR = CND.Does Not Exist
 PAR.Comment_Sts_USR = 'D';

 //?USER: Process Data record

 // PAR.Comment Sts USR = CND.Exists
 PAR.Comment_Sts_USR = 'E';

 QUIT;

}


//?Comment Exist
CASE;

// IF LCL.Comment Sts USR is Exists
IF LCL.Comment_Sts_USR = 'E';

// RCD.Text 1 Length USR = CON.*
RCD.Text_1_Length_USR = *;

//?Comment Exist
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text 1 Length USR = CON.*BLANK
RCD.Text_1_Length_USR = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Company_Number_041405);
PARAMETER(CTL.Multi_Company_Load);
{
 //?USER: Initialize routine

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 // PAR.Company Number = CON.*ZERO
 PAR.Company_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number is Equal to zero
 IF PAR.Company_Number = *ZERO;

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 ENDIF;

 CASE;

 // IF PAR.Company Number NE DB1.Company Number
 IF PAR.Company_Number <> DB1.Company_Number;

 // PAR.Multi Company Load = CND.yes
 PAR.Multi_Company_Load = 'Y';

 QUIT;

 ENDIF;

}


//?USER: Initialize subfile record (new record)

// RCD.LFC Create Status = CND.Manual
RCD.LFC_Create_Status = 'M';

// RCD.Display Flag 1 USR = CND.yes
RCD.Display_Flag_1_USR = 'Y';

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?USER: Validate subfile control

EXECUTE FUNCTION(Held Over Reason Dsc DRV) TYPE(DRVFLD)                         AC1869640;
PARAMETER(CTL.Held_Over_Reason_Dsc_DRV);
PARAMETER(CTL.LH_Held_Over_Reason);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV OT Resaon Descript RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783760;
 PARAMETER(PAR.LH_Held_Over_Reason);
 PARAMETER(PAR.Held_Over_Reason_Dsc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(On-Time Reason Desc DRV) TYPE(DRVFLD)                          AC1869641;
PARAMETER(CTL.On_Time_Reason_Desc_DRV);
PARAMETER(CTL.LH_On_Time_Reason_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV OT Resaon Descript RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783760;
 PARAMETER(PAR.LH_On_Time_Reason_Code);
 PARAMETER(PAR.On_Time_Reason_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?F7 = Display orders on a load
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.USR_Weight_Accumulated);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F9 to add is not allowed if carrier has already paid
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// AND PAR.LH Carrier Payment Sts is Paid
AND PAR.LH_Carrier_Payment_Sts = 'P';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?F11 = Display Traffic Comments
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program DSP PD Traffic Comment DF.
CALL PROGRAM(DSP PD Traffic Comment DF) ('PDSKDFR');
PARAMETER(CTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F08=Display Reference
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program Dsp LD Frt Chrg Ref   DF.
CALL PROGRAM(Dsp LD Frt Chrg Ref   DF) ('PMSNDFR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?F10=Display Air Freight Order flag maintenance screen
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program DSP Ld/Ord AirFrt Ordr DF.
CALL PROGRAM(DSP Ld/Ord AirFrt Ordr DF) ('PLAHDFR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?F15=Display Dispatch/Tracer
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?USER: Validate subfile record fields

//?** F4=SEL:  Charge Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.FC Code
AND PGM.*Cursor_field = RCD.FC_Code;

//?** If override miles exist use instead of total miles  E00207
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// WRK.Total Load Miles = PAR.Override Total Load Miles
WRK.Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** If override miles exist use instead of total miles  E00207
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Total Load Miles = PAR.Total Load Miles
WRK.Total_Load_Miles = PAR.Total_Load_Miles;

ENDIF;

// Call program Sel Manual Charge     SL.
CALL PROGRAM(Sel Manual Charge     SL) ('POLNSRR');
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Description);
PARAMETER(PAR.FC_Rate_Amount);
PARAMETER(PAR.FC_Unit_of_Measure);
PARAMETER(RCD.LFC_Act_Frt_Include_Sts);
PARAMETER(PAR.FC_Frt_Add_Deduct);
PARAMETER(PAR.FC_Load_Type_Select);
PARAMETER(PAR.FC_State_Select);
PARAMETER(PAR.FC_Export_Select);
PARAMETER(PAR.FC_Shag_Wash_Select);
PARAMETER(PAR.FC_Auto_Calc_Sts);
PARAMETER(PAR.LFC_Charge_Category);
PARAMETER(PAR.LFC_Shag_Wash_Comp);
PARAMETER(PAR.FC_Edit_Sequence);
PARAMETER(RCD.LFC_Tot_Freight_Inc_Sts);
PARAMETER(RCD.LFC_Special_Type);
PARAMETER(PAR.FC_ExpInt_FR_FZ_Select);
PARAMETER(RCD.LFC_Reference_Required);
PARAMETER(PAR.FC_Trans_Mode_Select);
PARAMETER(PAR.FC_Freight_Rate_Type_Sel);
PARAMETER(PAR.FC_Company_Select);
PARAMETER(PAR.FC_Company_Carrier_Select);
PARAMETER(PAR.FC_Shared_Responsibility);
PARAMETER(PAR.FC_Unused_Sts_10);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.LFC_Amount);
PARAMETER(PAR.Total_Stops);
PARAMETER(PAR.Carrier_Code);

//?** F4=SEL:  Charge Code
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Description);
PARAMETER(LCL.FC_Rate_Amount);
PARAMETER(LCL.FC_Unit_of_Measure);
PARAMETER(RCD.LFC_Act_Frt_Include_Sts);
PARAMETER(LCL.FC_Frt_Add_Deduct);
PARAMETER(WRK.FC_Load_Type_Select);
PARAMETER(WRK.FC_State_Select);
PARAMETER(WRK.FC_Export_Select);
PARAMETER(WRK.FC_Shag_Wash_Select);
PARAMETER(WRK.FC_Auto_Calc_Sts);
PARAMETER(RCD.LFC_Charge_Category);
PARAMETER(RCD.LFC_Shag_Wash_Comp);
PARAMETER(PAR.FC_Edit_Sequence);
PARAMETER(RCD.LFC_Tot_Freight_Inc_Sts);
PARAMETER(RCD.LFC_Special_Type);
PARAMETER(WRK.FC_ExpInt_FR_FZ_Select);
PARAMETER(RCD.LFC_Reference_Required);
PARAMETER(WRK.FC_Trans_Mode_Select);
PARAMETER(WRK.FC_Freight_Rate_Type_Sel);
PARAMETER(WRK.FC_Company_Select);
PARAMETER(WRK.FC_Company_Carrier_Select);
PARAMETER(WRK.FC_Shared_Responsibility);
PARAMETER(WRK.FC_Unused_Sts_10);
PARAMETER(WRK.FC_Auto_Calc_Effective);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.FC_Description);
PARAMETER(LCL.FC_Rate_Amount);
PARAMETER(LCL.FC_Unit_of_Measure);
PARAMETER(WRK.LFC_Act_Frt_Include_Sts);
PARAMETER(LCL.FC_Frt_Add_Deduct);
PARAMETER(WRK.FC_Load_Type_Select);
PARAMETER(WRK.FC_State_Select);
PARAMETER(WRK.FC_Export_Select);
PARAMETER(WRK.FC_Shag_Wash_Select);
PARAMETER(WRK.FC_Auto_Calc_Sts);
PARAMETER(WRK.LFC_Charge_Category);
PARAMETER(WRK.LFC_Shag_Wash_Comp);
PARAMETER(PAR.FC_Edit_Sequence);
PARAMETER(WRK.LFC_Tot_Freight_Inc_Sts);
PARAMETER(WRK.LFC_Special_Type);
PARAMETER(WRK.FC_ExpInt_FR_FZ_Select);
PARAMETER(WRK.LFC_Reference_Required);
PARAMETER(WRK.FC_Trans_Mode_Select);
PARAMETER(WRK.FC_Freight_Rate_Type_Sel);
PARAMETER(WRK.FC_Company_Select);
PARAMETER(WRK.FC_Company_Carrier_Select);
PARAMETER(WRK.FC_Shared_Responsibility);
PARAMETER(WRK.FC_Unused_Sts_10);
PARAMETER(WRK.FC_Auto_Calc_Effective);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF LCL.Record Status is Not Active
IF LCL.Record_Status = *BLANK/'D'/'I';

// Send error message - 'Freight Charge Code Invalid.'
ERROR(USR3984);
MSGPARM(RCD.FC_Code);

ENDIF;

ENDIF;

//?** Freight Amount entered
CASE;

// IF RCD.LFC Amount is Entered
IF RCD.LFC_Amount <> *ZERO;

//?** Don't display air frt pop up-New freight codes handle this FP1271
// PAR.LFC Amount = RCD.LFC Amount
PAR.LFC_Amount = RCD.LFC_Amount;

//?** Freight Amount entered
// IF *OTHERWISE
IF *OTHERWISE;

//?** If override miles exist use instead of total miles  E00207
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// WRK.Total Load Miles = PAR.Override Total Load Miles
WRK.Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** If override miles exist use instead of total miles  E00207
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Total Load Miles = PAR.Total Load Miles
WRK.Total_Load_Miles = PAR.Total_Load_Miles;

ENDIF;

EXECUTE FUNCTION(Clc Frt Charge UOM    IF) TYPE(EXCINTFUN)                      AC1627439;
PARAMETER(LCL.FC_Rate_Amount);
PARAMETER(LCL.FC_Unit_of_Measure);
PARAMETER(LCL.FC_Frt_Add_Deduct);
PARAMETER(LCL.LFC_Special_Type);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(PAR.Total_Stops);
PARAMETER(RCD.LFC_Amount);
PARAMETER(LCL.FC_Rate_Amount);
PARAMETER(PAR.Carrier_Code);
{
 //?Execute internal function

 //?** Pass either Override Total Load Miles or Total Load Miles
 //?** in the PAR.Total Load Miles field              E00207
 CASE;

 // IF PAR.FC Unit of Measure is Flat
 IF PAR.FC_Unit_of_Measure = 'FL';

 // Flat Amount
 PAR.LFC_Amount = PAR.Freight_Rate_USR * 1 'H';

 // IF PAR.FC Unit of Measure is Mile
 IF PAR.FC_Unit_of_Measure = 'ML';

 // PAR.LFC Amount = PAR.Freight Rate USR * PAR.Total Load Miles *Rounded
 PAR.LFC_Amount = PAR.Freight_Rate_USR * PAR.Total_Load_Miles 'H';

 // IF PAR.FC Unit of Measure is Stop
 IF PAR.FC_Unit_of_Measure = 'ST';

 EXECUTE FUNCTION(Rtv Stop Charge Amt   RT) TYPE(RTVOBJ) FILE(PMABREP)           AC1799298;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER('STOP');
 PARAMETER(JOB.*Job_date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.LFC_Amount);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?First time - save effective date to only read those records
  CASE;

  // IF LCL.CFC Effective Date is not entered
  IF LCL.CFC_Effective_Date = *ZERO;

  // LCL.CFC Effective Date = DB1.CFC Effective Date
  LCL.CFC_Effective_Date = DB1.CFC_Effective_Date;

  ENDIF;

  //?Calc if ...
  CASE;

  // IF DB1.CFC Effective Date NE LCL.CFC Effective Date
  IF DB1.CFC_Effective_Date <> LCL.CFC_Effective_Date;

  // OR PAR.Total Stops is One Stop
  OR PAR.Total_Stops = 1;

  //?Calc if ...
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.CFC Line/Stop Number = DB1.CFC Line/Stop Number + CON.1
  LCL.CFC_Line_Stop_Number = DB1.CFC_Line_Stop_Number + 1;

  CASE;

  // IF LCL.CFC Line/Stop Number LE PAR.Total Stops
  IF LCL.CFC_Line_Stop_Number <= PAR.Total_Stops;

  // PAR.Stop Charge USR = PAR.Stop Charge USR + DB1.CFC Charge Amount
  PAR.Stop_Charge_USR = PAR.Stop_Charge_USR + DB1.CFC_Charge_Amount;

  // LCL.CFC Charge Amount = DB1.CFC Charge Amount
  LCL.CFC_Charge_Amount = DB1.CFC_Charge_Amount;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?If total stops exceeds Tiered stop charges, use the last charge for
  //? the remaining stops
  CASE;

  // IF PAR.Total Stops GT LCL.CFC Line/Stop Number
  IF PAR.Total_Stops > LCL.CFC_Line_Stop_Number;

  // LCL.Total Stops = PAR.Total Stops - LCL.CFC Line/Stop Number
  LCL.Total_Stops = PAR.Total_Stops - LCL.CFC_Line_Stop_Number;

  // WRK.Stop Charge USR = LCL.Total Stops * LCL.CFC Charge Amount *
  WRK.Stop_Charge_USR = LCL.Total_Stops * LCL.CFC_Charge_Amount;

  // PAR.Stop Charge USR = PAR.Stop Charge USR + WRK.Stop Charge USR
  PAR.Stop_Charge_USR = PAR.Stop_Charge_USR + WRK.Stop_Charge_USR;

  ENDIF;

 }

 //?If Tiered stop charges not found
 CASE;

 // IF PAR.LFC Amount is Not Entered
 IF PAR.LFC_Amount = *ZERO;

 // Amount by Stop
 PAR.LFC_Amount = PAR.Freight_Rate_USR * ( PAR.Total_Stops - 1 ) 'H';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.FC Frt Add/Deduct is Deduct
 IF PAR.FC_Frt_Add_Deduct = 'D';

 // PAR.LFC Amount = PAR.LFC Amount * CON.-1 *Rounded
 PAR.LFC_Amount = PAR.LFC_Amount * -1 'H';

 ENDIF;

}


ENDIF;

//?** Save Carrier Code to parm list
CASE;

// IF RCD.LFC Carrier Code EQ LCL.BLANK
IF RCD.LFC_Carrier_Code = LCL.BLANK;

// RCD.LFC Carrier Code = PAR.Carrier Code
RCD.LFC_Carrier_Code = PAR.Carrier_Code;

// PAR.LFC Carrier Code = PAR.Carrier Code
PAR.LFC_Carrier_Code = PAR.Carrier_Code;

//?** Save Carrier Code to parm list
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.LFC Carrier Code = RCD.LFC Carrier Code
PAR.LFC_Carrier_Code = RCD.LFC_Carrier_Code;

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.Access Denied (Y/N) is yes
IF RCD.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

//?7=Edit Reference
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.Access Denied (Y/N) is yes
IF RCD.Access_Denied_Y_N = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.LFC Reference Required is Yes
IF RCD.LFC_Reference_Required = 'Y';

EXECUTE FUNCTION(Val LdChrg Ref Exist  RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1879175;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC1869955;
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.LFC_Sequence_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Rtv Charge Info       RT) TYPE(RTVOBJ) FILE(PMDIREP)           AC1866916;
 PARAMETER(DB1.CR_Reference_Code);
 PARAMETER(NLL.CR_Reference_Desc);
 PARAMETER(LCL.CR_Value_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.LFCR Numeric Value = CON.*ZERO
 LCL.LFCR_Numeric_Value = *ZERO;

 CASE;

 // IF DB1.CR Reference Code is Company
 IF DB1.CR_Reference_Code = 'COMPNY';

 EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
 PARAMETER(DB1.FC_Code);
 PARAMETER(NLL.FC_Description);
 PARAMETER(NLL.FC_Rate_Amount);
 PARAMETER(NLL.FC_Unit_of_Measure);
 PARAMETER(NLL.FC_Act_Frt_Include_Sts);
 PARAMETER(NLL.FC_Frt_Add_Deduct);
 PARAMETER(NLL.FC_Load_Type_Select);
 PARAMETER(NLL.FC_State_Select);
 PARAMETER(NLL.FC_Export_Select);
 PARAMETER(NLL.FC_Shag_Wash_Select);
 PARAMETER(NLL.FC_Auto_Calc_Sts);
 PARAMETER(NLL.FC_Charge_Category);
 PARAMETER(NLL.FC_Shag_Wash_Comp);
 PARAMETER(NLL.FC_Edit_Sequence);
 PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(NLL.FC_Special_Type);
 PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
 PARAMETER(NLL.FC_Reference_Required);
 PARAMETER(NLL.FC_Trans_Mode_Select);
 PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
 PARAMETER(NLL.FC_Company_Select);
 PARAMETER(NLL.FC_Company_Carrier_Select);
 PARAMETER(LCL.FC_Shared_Responsibility);
 PARAMETER(NLL.FC_Unused_Sts_10);
 PARAMETER(NLL.FC_Auto_Calc_Effective);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.FC Unused Sts 9 is Shared
 IF LCL.FC_Shared_Responsibility = 'S';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Multi_Company_Load);
 {
  //?USER: Initialize routine

  // PAR.Multi Company Load = CND.no
  PAR.Multi_Company_Load = 'N';

  // PAR.Company Number = CON.*ZERO
  PAR.Company_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Company Number is Equal to zero
  IF PAR.Company_Number = *ZERO;

  // PAR.Company Number = DB1.Company Number
  PAR.Company_Number = DB1.Company_Number;

  ENDIF;

  CASE;

  // IF PAR.Company Number NE DB1.Company Number
  IF PAR.Company_Number <> DB1.Company_Number;

  // PAR.Multi Company Load = CND.yes
  PAR.Multi_Company_Load = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Multi Company Load is no
 IF LCL.Multi_Company_Load = 'N';

 // LCL.LFCR Numeric Value = LCL.Company Number
 LCL.LFCR_Numeric_Value = LCL.Company_Number;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869956;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
 PARAMETER(DB1.CR_Reference_Code);
 PARAMETER(LCL.CR_Value_Type);
 PARAMETER(LCL.LFCR_Numeric_Value);
 PARAMETER(DB1.Charge_Reference_Type);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.CR_Reference_Code);
  PARAMETER(PAR.LFCR_Value_Type);
  PARAMETER(PAR.LFCR_Numeric_Value);
  PARAMETER(PAR.LFCR_Alpha_Value);
  PARAMETER(PAR.LFCR_Reference_Type);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 ENDIF;

}


ENDIF;

// Call program Edt LD Frt Chrg Ref   EF.
CALL PROGRAM(Edt LD Frt Chrg Ref   EF) ('PMSMEFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option invalid-Reference is not required'
ERROR(USR3912);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?8=Edit Comment
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Edt LdFrtChrg Comment EF.
CALL PROGRAM(Edt LdFrtChrg Comment EF) ('PMBOEFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record relations

//?Reference Required = Y
CASE;

// IF RCD.LFC Reference Required is Yes
IF RCD.LFC_Reference_Required = 'Y';

EXECUTE FUNCTION(Val LdChrg Ref Val Ex RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869650;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.LFCR Reference Type is Charge Allocation
 IF DB1.LFCR_Reference_Type = 'A';

 CASE;

 // IF DB1.LFCR Numeric Value is Equal to zero
 IF DB1.LFCR_Numeric_Value = *ZERO;

 // AND DB1.LFCR Alpha Value is Equal to Blank
 AND DB1.LFCR_Alpha_Value = *BLANK;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


//?** Hilite if no reference yet, else, turn off hilite
CASE;

// IF RCD.Record Found USR is Record Found
IF RCD.Record_Found_USR = 'Y';

// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

//?** Hilite if no reference yet, else, turn off hilite
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Load Freight Chrg IF) TYPE(EXCINTFUN) FILE(POBCCPP)        AC1869581;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.LFC_Amount);
PARAMETER(RCD.LFC_Act_Frt_Include_Sts);
PARAMETER(RCD.LFC_Carrier_Code);
PARAMETER(RCD.LFC_Create_Status);
PARAMETER(RCD.LFC_Unused_Sts);
PARAMETER(RCD.LFC_Charge_Category);
PARAMETER(RCD.LFC_Shag_Wash_Comp);
PARAMETER(RCD.LFC_Tot_Freight_Inc_Sts);
PARAMETER(RCD.LFC_Special_Type);
PARAMETER(RCD.LFC_TFP_Processed);
PARAMETER(RCD.LFC_Reference_Required);
PARAMETER(RCD.LFC_Unused_Sts_5);
PARAMETER(RCD.LFC_TFP_Carrier_Paid_Date);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Seq          RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1869586;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.LFC Sequence Number = CON.1
  PAR.LFC_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.LFC Sequence Number = DB1.LFC Sequence Number + CON.1
  PAR.LFC_Sequence_Number = DB1.LFC_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Load Freight Chrg CR) TYPE(CRTOBJ) FILE(POBCCPP)           AC1626760;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(PAR.LFC_Act_Frt_Include_Sts);
 PARAMETER(PAR.LFC_Carrier_Code);
 PARAMETER(PAR.LFC_Create_Status);
 PARAMETER(PAR.LFC_Unused_Sts);
 PARAMETER(PAR.LFC_Charge_Category);
 PARAMETER(PAR.LFC_Shag_Wash_Comp);
 PARAMETER(PAR.LFC_Tot_Freight_Inc_Sts);
 PARAMETER(PAR.LFC_Special_Type);
 PARAMETER(PAR.LFC_TFP_Processed);
 PARAMETER(PAR.LFC_Reference_Required);
 PARAMETER(PAR.LFC_Unused_Sts_5);
 PARAMETER(PAR.LFC_TFP_Carrier_Paid_Date);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

  //?USER: Processing after Data update

  CASE;

  // IF PAR.LFC Reference Required is Yes
  IF PAR.LFC_Reference_Required = 'Y';

  EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC1869955;
  PARAMETER(DB1.FC_Code);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.LFC_Sequence_Number);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   EXECUTE FUNCTION(Rtv Charge Info       RT) TYPE(RTVOBJ) FILE(PMDIREP)           AC1866916;
   PARAMETER(DB1.CR_Reference_Code);
   PARAMETER(NLL.CR_Reference_Desc);
   PARAMETER(LCL.CR_Value_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // LCL.LFCR Numeric Value = CON.*ZERO
   LCL.LFCR_Numeric_Value = *ZERO;

   CASE;

   // IF DB1.CR Reference Code is Company
   IF DB1.CR_Reference_Code = 'COMPNY';

   EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
   PARAMETER(DB1.FC_Code);
   PARAMETER(NLL.FC_Description);
   PARAMETER(NLL.FC_Rate_Amount);
   PARAMETER(NLL.FC_Unit_of_Measure);
   PARAMETER(NLL.FC_Act_Frt_Include_Sts);
   PARAMETER(NLL.FC_Frt_Add_Deduct);
   PARAMETER(NLL.FC_Load_Type_Select);
   PARAMETER(NLL.FC_State_Select);
   PARAMETER(NLL.FC_Export_Select);
   PARAMETER(NLL.FC_Shag_Wash_Select);
   PARAMETER(NLL.FC_Auto_Calc_Sts);
   PARAMETER(NLL.FC_Charge_Category);
   PARAMETER(NLL.FC_Shag_Wash_Comp);
   PARAMETER(NLL.FC_Edit_Sequence);
   PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
   PARAMETER(NLL.FC_Special_Type);
   PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
   PARAMETER(NLL.FC_Reference_Required);
   PARAMETER(NLL.FC_Trans_Mode_Select);
   PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
   PARAMETER(NLL.FC_Company_Select);
   PARAMETER(NLL.FC_Company_Carrier_Select);
   PARAMETER(LCL.FC_Shared_Responsibility);
   PARAMETER(NLL.FC_Unused_Sts_10);
   PARAMETER(NLL.FC_Auto_Calc_Effective);
   PARAMETER(NLL.Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.FC Unused Sts 9 is Shared
   IF LCL.FC_Shared_Responsibility = 'S';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Company_Number);
   PARAMETER(LCL.Multi_Company_Load);
   {
    //?USER: Initialize routine

    // PAR.Multi Company Load = CND.no
    PAR.Multi_Company_Load = 'N';

    // PAR.Company Number = CON.*ZERO
    PAR.Company_Number = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF PAR.Company Number is Equal to zero
    IF PAR.Company_Number = *ZERO;

    // PAR.Company Number = DB1.Company Number
    PAR.Company_Number = DB1.Company_Number;

    ENDIF;

    CASE;

    // IF PAR.Company Number NE DB1.Company Number
    IF PAR.Company_Number <> DB1.Company_Number;

    // PAR.Multi Company Load = CND.yes
    PAR.Multi_Company_Load = 'Y';

    QUIT;

    ENDIF;

   }

   CASE;

   // IF LCL.Multi Company Load is no
   IF LCL.Multi_Company_Load = 'N';

   // LCL.LFCR Numeric Value = LCL.Company Number
   LCL.LFCR_Numeric_Value = LCL.Company_Number;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869956;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.FC_Code);
   PARAMETER(PAR.LFC_Sequence_Number);
   PARAMETER(DB1.CR_Reference_Code);
   PARAMETER(LCL.CR_Value_Type);
   PARAMETER(LCL.LFCR_Numeric_Value);
   PARAMETER(DB1.Charge_Reference_Type);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
    PARAMETER(PAR.Load_ID);
    PARAMETER(PAR.FC_Code);
    PARAMETER(PAR.LFC_Sequence_Number);
    PARAMETER(PAR.CR_Reference_Code);
    PARAMETER(PAR.LFCR_Value_Type);
    PARAMETER(PAR.LFCR_Numeric_Value);
    PARAMETER(PAR.LFCR_Alpha_Value);
    PARAMETER(PAR.LFCR_Reference_Type);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Create_Date);
    PARAMETER(PAR.Create_Time);
    PARAMETER(PAR.Create_User);
    PARAMETER(PAR.Create_Program);
    PARAMETER(PAR.Change_Date);
    PARAMETER(PAR.Change_Time);
    PARAMETER(PAR.Change_User);
    PARAMETER(PAR.Change_Program);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Create_Date);
     PARAMETER(DB1.Create_Time);
     PARAMETER(DB1.Create_User);
     PARAMETER(DB1.Create_Program);
     PARAMETER(DB1.Change_Date);
     PARAMETER(DB1.Change_Time);
     PARAMETER(DB1.Change_User);
     PARAMETER(DB1.Change_Program);
     {
      //?Execute internal function

      //?*** Set RECORD STATUS field. ***
      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      //?*** Set CREATE fields. ***
      // PAR.Create Date = JOB.*Job date
      PAR.Create_Date = JOB.*Job_date;

      // PAR.Create Time = JOB.*Job time
      PAR.Create_Time = JOB.*Job_time;

      // PAR.Create User = JOB.*USER
      PAR.Create_User = JOB.*USER;

      // PAR.Create Program = JOB.*PROGRAM
      PAR.Create_Program = JOB.*PROGRAM;

      //?*** Set CHANGE fields. ***
      // PAR.Change Date = CON.*ZERO
      PAR.Change_Date = *ZERO;

      // PAR.Change Time = CON.*ZERO
      PAR.Change_Time = *ZERO;

      // PAR.Change User = CON.*BLANK
      PAR.Change_User = *BLANK;

      // PAR.Change Program = CON.*BLANK
      PAR.Change_Program = *BLANK;

     }

    }

   }

   ENDIF;

  }

  ENDIF;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del/Prg Charge        IF) TYPE(EXCINTFUN) FILE(POBCCPP)        AC1879147;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.LFC_TFP_Processed);
PARAMETER(RCD.LFC_Reference_Required);
PARAMETER(RCD.*SFLSEL);
PARAMETER(PAR.LH_Carrier_Payment_Sts);
{
 //?Execute internal function

 CASE;

 // IF PAR.LFC TFP Processed is Processed
 IF PAR.LFC_TFP_Processed = 'P';

 // OR PAR.LH Carrier Payment Sts is Paid
 OR PAR.LH_Carrier_Payment_Sts = 'P';

 // Send error message - 'Option is not allowed.'
 ERROR(USR2262);
 MSGPARM(PAR.*SFLSEL);

 QUIT;

 ENDIF;

 CASE;

 // IF PAR.LFC Reference Required is Yes
 IF PAR.LFC_Reference_Required = 'Y';

 EXECUTE FUNCTION(Del LD Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1889042;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del LD Frt Chrg Ref   DL) TYPE(DLTOBJ) FILE(PMDKCPP)           AC1869266;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.FC_Code);
  PARAMETER(DB1.LFC_Sequence_Number);
  PARAMETER(DB1.CR_Reference_Code);
 }

 ENDIF;

 EXECUTE FUNCTION(Del LdFrtChrt Comment RT) TYPE(RTVOBJ) FILE(PMEYCPP)           AC1909298;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del LdFrtChrg Comment DL) TYPE(DLTOBJ) FILE(PMEYCPP)           AC1909061;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.FC_Code);
  PARAMETER(DB1.LFC_Sequence_Number);
  PARAMETER(DB1.LFCC_Sequence_Number);
 }

 EXECUTE FUNCTION(Del Load Freight Chrg DL) TYPE(DLTOBJ) FILE(POBCCPP)           AC1626762;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Load Frt Charge   CH) TYPE(CHGOBJ) FILE(POBCCPP)           AC1627826;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.LFC_Amount);
PARAMETER(RCD.LFC_Act_Frt_Include_Sts);
PARAMETER(RCD.LFC_Carrier_Code);
PARAMETER(RCD.LFC_Create_Status);
PARAMETER(RCD.LFC_Unused_Sts);
PARAMETER(RCD.LFC_Charge_Category);
PARAMETER(RCD.LFC_Shag_Wash_Comp);
PARAMETER(RCD.LFC_Tot_Freight_Inc_Sts);
PARAMETER(RCD.LFC_Special_Type);
PARAMETER(RCD.LFC_TFP_Processed);
PARAMETER(RCD.LFC_Reference_Required);
PARAMETER(RCD.LFC_Unused_Sts_5);
PARAMETER(RCD.LFC_TFP_Carrier_Paid_Date);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


//?USER: Extra processing after DBF update

//?Enter Reference
CASE;

// IF RCD.LFC Reference Required is Yes
IF RCD.LFC_Reference_Required = 'Y';

EXECUTE FUNCTION(Val LdChrg Ref Exist  RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1879175;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC1869955;
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.LFC_Sequence_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Rtv Charge Info       RT) TYPE(RTVOBJ) FILE(PMDIREP)           AC1866916;
 PARAMETER(DB1.CR_Reference_Code);
 PARAMETER(NLL.CR_Reference_Desc);
 PARAMETER(LCL.CR_Value_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.LFCR Numeric Value = CON.*ZERO
 LCL.LFCR_Numeric_Value = *ZERO;

 CASE;

 // IF DB1.CR Reference Code is Company
 IF DB1.CR_Reference_Code = 'COMPNY';

 EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
 PARAMETER(DB1.FC_Code);
 PARAMETER(NLL.FC_Description);
 PARAMETER(NLL.FC_Rate_Amount);
 PARAMETER(NLL.FC_Unit_of_Measure);
 PARAMETER(NLL.FC_Act_Frt_Include_Sts);
 PARAMETER(NLL.FC_Frt_Add_Deduct);
 PARAMETER(NLL.FC_Load_Type_Select);
 PARAMETER(NLL.FC_State_Select);
 PARAMETER(NLL.FC_Export_Select);
 PARAMETER(NLL.FC_Shag_Wash_Select);
 PARAMETER(NLL.FC_Auto_Calc_Sts);
 PARAMETER(NLL.FC_Charge_Category);
 PARAMETER(NLL.FC_Shag_Wash_Comp);
 PARAMETER(NLL.FC_Edit_Sequence);
 PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(NLL.FC_Special_Type);
 PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
 PARAMETER(NLL.FC_Reference_Required);
 PARAMETER(NLL.FC_Trans_Mode_Select);
 PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
 PARAMETER(NLL.FC_Company_Select);
 PARAMETER(NLL.FC_Company_Carrier_Select);
 PARAMETER(LCL.FC_Shared_Responsibility);
 PARAMETER(NLL.FC_Unused_Sts_10);
 PARAMETER(NLL.FC_Auto_Calc_Effective);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.FC Unused Sts 9 is Shared
 IF LCL.FC_Shared_Responsibility = 'S';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Multi_Company_Load);
 {
  //?USER: Initialize routine

  // PAR.Multi Company Load = CND.no
  PAR.Multi_Company_Load = 'N';

  // PAR.Company Number = CON.*ZERO
  PAR.Company_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Company Number is Equal to zero
  IF PAR.Company_Number = *ZERO;

  // PAR.Company Number = DB1.Company Number
  PAR.Company_Number = DB1.Company_Number;

  ENDIF;

  CASE;

  // IF PAR.Company Number NE DB1.Company Number
  IF PAR.Company_Number <> DB1.Company_Number;

  // PAR.Multi Company Load = CND.yes
  PAR.Multi_Company_Load = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Multi Company Load is no
 IF LCL.Multi_Company_Load = 'N';

 // LCL.LFCR Numeric Value = LCL.Company Number
 LCL.LFCR_Numeric_Value = LCL.Company_Number;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869956;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.LFC_Sequence_Number);
 PARAMETER(DB1.CR_Reference_Code);
 PARAMETER(LCL.CR_Value_Type);
 PARAMETER(LCL.LFCR_Numeric_Value);
 PARAMETER(DB1.Charge_Reference_Type);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.CR_Reference_Code);
  PARAMETER(PAR.LFCR_Value_Type);
  PARAMETER(PAR.LFCR_Numeric_Value);
  PARAMETER(PAR.LFCR_Alpha_Value);
  PARAMETER(PAR.LFCR_Reference_Type);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 ENDIF;

}


// Call program Edt LD Frt Chrg Ref   EF.
CALL PROGRAM(Edt LD Frt Chrg Ref   EF) ('PMSMEFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val LdChrg Ref Val Ex RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869650;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.LFCR Reference Type is Charge Allocation
 IF DB1.LFCR_Reference_Type = 'A';

 CASE;

 // IF DB1.LFCR Numeric Value is Equal to zero
 IF DB1.LFCR_Numeric_Value = *ZERO;

 // AND DB1.LFCR Alpha Value is Equal to Blank
 AND DB1.LFCR_Alpha_Value = *BLANK;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


//?** Enter Reference
CASE;

// IF RCD.Record Found USR is Record Found
IF RCD.Record_Found_USR = 'Y';

//?** Enter Reference
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt LD Frt Chrg Ref   EF.
CALL PROGRAM(Edt LD Frt Chrg Ref   EF) ('PMSMEFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);

ENDIF;

ENDIF;

ENDIF;

//?Reference Required = Y
CASE;

// IF RCD.LFC Reference Required is Yes
IF RCD.LFC_Reference_Required = 'Y';

EXECUTE FUNCTION(Val LdChrg Ref Val Ex RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869650;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.LFCR Reference Type is Charge Allocation
 IF DB1.LFCR_Reference_Type = 'A';

 CASE;

 // IF DB1.LFCR Numeric Value is Equal to zero
 IF DB1.LFCR_Numeric_Value = *ZERO;

 // AND DB1.LFCR Alpha Value is Equal to Blank
 AND DB1.LFCR_Alpha_Value = *BLANK;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 QUIT;

 ENDIF;

 ENDIF;

}


//?** Hilite if no reference yet, else, turn off hilite
CASE;

// IF RCD.Record Found USR is Record Found
IF RCD.Record_Found_USR = 'Y';

// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

//?** Hilite if no reference yet, else, turn off hilite
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Comment Exists    RT) TYPE(RTVOBJ) FILE(PMEYCPP)           AC1909215;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(LCL.Comment_Sts_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Comment Sts USR = CND.Does Not Exist
 PAR.Comment_Sts_USR = 'D';

 //?USER: Process Data record

 // PAR.Comment Sts USR = CND.Exists
 PAR.Comment_Sts_USR = 'E';

 QUIT;

}


//?Comment Exist
CASE;

// IF LCL.Comment Sts USR is Exists
IF LCL.Comment_Sts_USR = 'E';

// RCD.Text 1 Length USR = CON.*
RCD.Text_1_Length_USR = *;

//?Comment Exist
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text 1 Length USR = CON.*BLANK
RCD.Text_1_Length_USR = *BLANK;

ENDIF;

//?USER: Exit program processing

EXECUTE FUNCTION(Val Ld Chrg Ref Entrd RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1888744;
PARAMETER(PAR.Load_ID);
PARAMETER('Y');
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 //?USER: Process Data record

 EXECUTE FUNCTION(Val LdChrg Ref Val Ex RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869650;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.LFC_Sequence_Number);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  //?USER: Process Data record

  CASE;

  // IF DB1.LFCR Reference Type is Charge Allocation
  IF DB1.LFCR_Reference_Type = 'A';

  CASE;

  // IF DB1.LFCR Numeric Value is Equal to zero
  IF DB1.LFCR_Numeric_Value = *ZERO;

  // AND DB1.LFCR Alpha Value is Equal to Blank
  AND DB1.LFCR_Alpha_Value = *BLANK;

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  QUIT;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Charge Reference required'
ERROR(USR3910);
MSGPARM(*BLANK);

QUIT;

ENDIF;

