// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKR7PVR
// ?Date: 14.08.2025 Time: 02:52:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 - ISE - 02/03/21 - Increased Buy Order length from 5 to 7.
//?                          Recompilation only.
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = WRK.CC Company Number
DTL.CC_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// DTL.USR Report Sequence = CND.2
DTL.Performance_Report_Seq = 2;

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Condition Name 1 USR = Condition name of DTL.Print Level USR
DTL.Condition_Name_1_USR = RTVCND(DTL.Print_Level_USR);

// DTL.Condition Name USR = Condition name of DTL.Performance Report Seq
DTL.Condition_Name_USR = RTVCND(DTL.Performance_Report_Seq);

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// DTL.Name USR = PAR.Oms Name
DTL.Name_USR = PAR.Oms_Name;

//?USER: Process command keys

//?F4 = Buyer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.HB Buyer Code
AND PGM.*Cursor_field = DTL.HB_Buyer_Code;

// Call program Sel Hog Buyer         SR.
CALL PROGRAM(Sel Hog Buyer         SR) ('PKD3SRR');
PARAMETER(DTL.HB_Buyer_Code);

ENDIF;

//?F4 = Source Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code
AND PGM.*Cursor_field = DTL.TH_Source_Code;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code);

ENDIF;

//?F4 = Producer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PD Producer Code
AND PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

//?F4 = Market group
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Market Code Usr
AND PGM.*Cursor_field = DTL.Market_Code_Usr;

// Call program Sel Commodity Market  XF.
CALL PROGRAM(Sel Commodity Market  XF) ('PDEDSRR');
PARAMETER(DTL.Market_Code_Usr);

ENDIF;

//?F4 = Price group
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Price Group Usr
AND PGM.*Cursor_field = DTL.Price_Group_Usr;

// Call program Sel Commodity Group   XF.
CALL PROGRAM(Sel Commodity Group   XF) ('PDECSRR');
PARAMETER(DTL.Price_Group_Usr);

ENDIF;

//?USER: Validate fields

// DTL.Name USR = CON.*BLANK
DTL.Name_USR = *BLANK;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Company not found.'
ERROR(PRK0162);

ENDIF;

// DTL.HB Name = CON.*BLANK
DTL.HB_Name = *BLANK;

CASE;

// IF DTL.HB Buyer Code is Blank
IF DTL.HB_Buyer_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Hog Buyer Name    RT) TYPE(RTVOBJ) FILE(PKADREP)           AB1124643;
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.HB_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.HB Name EQ WRK.Blank USR
IF DTL.HB_Name = WRK.Blank_USR;

// Send error message - 'Hog Buyer not found.'
ERROR(PRK0011);

ENDIF;

ENDIF;

// DTL.SR Description = CON.*BLANK
DTL.SR_Description = *BLANK;

CASE;

// IF DTL.TH Source Code EQ WRK.Blank USR
IF DTL.TH_Source_Code = WRK.Blank_USR;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.SR Description EQ WRK.Blank USR
IF DTL.SR_Description = WRK.Blank_USR;

// Send error message - 'Source not found.'
ERROR(PRK0005);

ENDIF;

ENDIF;

// DTL.Name Producer DRV = CON.*BLANK
DTL.Name_Producer_DRV = *BLANK;

CASE;

// IF DTL.PD Producer Code is Blank
IF DTL.PD_Producer_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(DTL.Name_Producer_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.Name Producer DRV EQ WRK.Blank USR
IF DTL.Name_Producer_DRV = WRK.Blank_USR;

// Send error message - 'Producer not found.'
ERROR(PRK0009);

ENDIF;

ENDIF;

CASE;

// IF DTL.Date From USR GT DTL.Date To   USR
IF DTL.Date_From_USR > DTL.Date_To_USR;

// Send error message - 'From date must be less than or equal to the to date.'
ERROR(PRK0472);

ENDIF;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.Market_Code_Usr);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market &1 is invalid.'
ERROR(PRK0482);
MSGPARM(DTL.Market_Code_Usr);

ENDIF;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.Price_Group_Usr);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Group &1 is invalid.'
ERROR(PRK0483);
MSGPARM(DTL.Price_Group_Usr);

ENDIF;

CASE;

// IF DTL.TH Source Type NE WRK.Blank USR
IF DTL.TH_Source_Type <> WRK.Blank_USR;

// AND DTL.PD Producer Code NE WRK.Blank USR
AND DTL.PD_Producer_Code <> WRK.Blank_USR;

// Send error message - 'Please enter a source type or a producer.'
ERROR(PRK0555);

ENDIF;

//?**************************************************************************
//?**  PK0050
//?**************************************************************************
CASE;

// IF DTL.USR Report Sequence is 2
IF DTL.Performance_Report_Seq = '2';

CASE;

// IF DTL.HB Buyer Code is Blank
IF DTL.HB_Buyer_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Buyer must be blank if 'Producer' report is chosen.'
ERROR(PRK0876);
MSGPARM(DTL.HB_Buyer_Code);

ENDIF;

ENDIF;

//?Validate Document/Folder
CASE;

// IF DTL.Document Name USR EQ WRK.Blank USR
IF DTL.Document_Name_USR = WRK.Blank_USR;

CASE;

// IF DTL.Folder Name USR NE WRK.Blank USR
IF DTL.Folder_Name_USR <> WRK.Blank_USR;

// Send error message - 'Both Document and Folder Required.'
ERROR(PRK0894);
MSGPARM(DTL.Document_Name_USR);
MSGPARM(DTL.Folder_Name_USR);

ENDIF;

//?Validate Document/Folder
// IF DTL.Folder Name USR EQ WRK.Blank USR
IF DTL.Folder_Name_USR = WRK.Blank_USR;

CASE;

// IF DTL.Document Name USR NE WRK.Blank USR
IF DTL.Document_Name_USR <> WRK.Blank_USR;

// Send error message - 'Both Document and Folder Required.'
ERROR(PRK0894);
MSGPARM(DTL.Document_Name_USR);
MSGPARM(DTL.Folder_Name_USR);

ENDIF;

ENDIF;

//?Val Report Type/Report Sequence
CASE;

// IF DTL.Document Name USR NE WRK.Blank USR
IF DTL.Document_Name_USR <> WRK.Blank_USR;

// OR DTL.Folder Name USR NE WRK.Blank USR
OR DTL.Folder_Name_USR <> WRK.Blank_USR;

CASE;

// IF DTL.@Status Detail/Summary is Both
IF DTL.@Status_Detail_Summary = 'B';

// Send error message - 'Report type invalid for creating PCFILE.'
ERROR(PRK0892);
MSGPARM(DTL.@Status_Detail_Summary);

ENDIF;

CASE;

// IF DTL.Performance Report Seq is 1 and 2
IF DTL.Performance_Report_Seq = '1'/'2';

// Send error message - 'Report Sequence Invalid for PCFILE.'
ERROR(PRK0893);
MSGPARM(DTL.Performance_Report_Seq);

ENDIF;

ENDIF;

//?CALC: Screen function fields

// DTL.Int/External Desc Usr = Condition name of DTL.TH Source Type
DTL.Int_External_Desc_Usr = RTVCND(DTL.TH_Source_Type);

// DTL.Condition Name 1 USR = Condition name of DTL.Print Level USR
DTL.Condition_Name_1_USR = RTVCND(DTL.Print_Level_USR);

// DTL.Condition Name USR = Condition name of DTL.Performance Report Seq
DTL.Condition_Name_USR = RTVCND(DTL.Performance_Report_Seq);

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Procurement Performance');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(2);

//?Submit Report/Create Outfile
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.CC Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.CC_Company_Number);

CASE;

// IF DTL.Print Level USR is None
IF DTL.Print_Level_USR = *BLANK;

// OR DTL.File Member USR NE WRK.Blank USR
OR DTL.Document_Name_USR <> WRK.Blank_USR;

// WRK.Date Alpha USR = CVTVAR(DTL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Date_To_USR);

// Execute command - 'SBM Prt Procurement Performance Report'
EXECUTE COMMAND(PRK0903);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Market_Code_Usr);
PARAMETER(DTL.Price_Group_Usr);
PARAMETER(DTL.@Status_Detail_Summary);
PARAMETER(DTL.Sorting_Amount_Type_USR);
PARAMETER(DTL.Document_Name_USR);
PARAMETER(DTL.Folder_Name_USR);

// IF DTL.Print Level USR is Weekly
IF DTL.Print_Level_USR = 'W';

// LCL.Date From USR = DTL.Date From USR
LCL.Date_From_USR = DTL.Date_From_USR;

// LCL.Day of Week USR = LCL.Date From USR *DAY OF WEEK
LCL.Day_of_Week_USR = DATEDTLS(LCL.Date_From_USR 'DW' 1111111 'NONE' 'N' 1);

// LCL.Count USR = CON.7 - LCL.Day of Week USR
LCL.Count_USR = 7 - LCL.Day_of_Week_USR;

//?Date From/To
CASE;

// IF LCL.Count USR is GT Zero
IF LCL.Count_USR > *ZERO;

// LCL.Date To   USR = LCL.Date From USR + LCL.Count USR *DAYS
LCL.Date_To_USR = DATEINCR(LCL.Date_From_USR LCL.Count_USR 'DY' 1111111 'NONE' 'N' 1);

//?Date From/To
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date From USR = LCL.Date From USR + CON.1 *DAYS
LCL.Date_From_USR = DATEINCR(LCL.Date_From_USR 1 'DY' 1111111 'NONE' 'N' 1);

// LCL.Date To   USR = LCL.Date From USR + CON.6 *DAYS
LCL.Date_To_USR = DATEINCR(LCL.Date_From_USR 6 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

//?Date To
CASE;

// IF DTL.Date To   USR LT LCL.Date To   USR
IF DTL.Date_To_USR < LCL.Date_To_USR;

// LCL.Date To   USR = DTL.Date To   USR
LCL.Date_To_USR = DTL.Date_To_USR;

ENDIF;

// DOW LCL.Date From USR LE DTL.Date To   USR
DOW LCL.Date_From_USR <= DTL.Date_To_USR;

// WRK.Date Alpha USR = CVTVAR(LCL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(LCL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(LCL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(LCL.Date_To_USR);

// Execute command - 'SBM Prt Procurement Performance Report'
EXECUTE COMMAND(PRK0903);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Market_Code_Usr);
PARAMETER(DTL.Price_Group_Usr);
PARAMETER(DTL.@Status_Detail_Summary);
PARAMETER(DTL.Sorting_Amount_Type_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

// LCL.Date From USR = LCL.Date To   USR + CON.1 *DAYS
LCL.Date_From_USR = DATEINCR(LCL.Date_To_USR 1 'DY' 1111111 'NONE' 'N' 1);

// LCL.Date To   USR = LCL.Date From USR + CON.6 *DAYS
LCL.Date_To_USR = DATEINCR(LCL.Date_From_USR 6 'DY' 1111111 'NONE' 'N' 1);

CASE;

// IF DTL.Date To   USR LT LCL.Date To   USR
IF DTL.Date_To_USR < LCL.Date_To_USR;

// LCL.Date To   USR = DTL.Date To   USR
LCL.Date_To_USR = DTL.Date_To_USR;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

