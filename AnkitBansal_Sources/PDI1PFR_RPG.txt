     H/TITLE PRT A/R Lockbox Proof  PF Print file
     H            Y
     Z* CRTRPGPGM
     Z* CVTOPT(*DATETIME)
      *
     H* SYNOPSIS :
     H* - Print report of file contents
      *
     H* Generated by CA 2E release 8.6 (1547)
     H* Function type : Print file
      *
     H* Company       : OMS Development Model
     H* System        : OMS Development Model
     H* User name     : ISJBADE
     H* Date          : 09/16/16  Time  : 09:32:13
     H* Copyright     : OMS Development Model
      *
      *================================================================
     M* Maintenance   :
      *================================================================
     FCADNREL2IF  E           K        DISK
      * RSQ : Application               RSQ Application Code
      *
     FPDMCCPL1IF  E           K        DISK
      * RTV : A/R Lockbox Check         Retrieval index
      *
     FPDMACPL1IF  E           K        DISK
      * RTV : A/R Lockbox Deposit       Retrieval index
      *
     FPDMDCPL2IF  E           K        DISK
      * RSQ : A/R Lockbox Invoice       bx/ddte/bch/itm/inv
      *
     FARBDCPLGIF  E           K        DISK
      * RSQ : A/R Header                RSQ Inv/Sfx (Open)  N
      *
     FCABBREL1IF  E           K        DISK
      * RTV : Customer                  Retrieval index       NV
      *
     FPDI1PFR$O   E             97     PRINTER
     F                                              KINFDS INFDS$
      * PRT: PRT A/R Lockbox Proof  PF Print file
      *
     E                    UCT        40  1               CENTER TABLE
     E                    #L7         7  1
     E                    #L3         3  1
      * Long constants
     E                    @CN#    1  19  6   @CN    25
      /EJECT
      * Data structures:
     IPGMDS     ESDSY2PGDSP
      * Modified Program data structure
     IJBDTTM      DS
      * Job date/time
     I                                        1   70##JDT
     I                                        1   10##JCC
     I                                        2   30##JYY
     I                                        4   50##JMM
     I                                        6   70##JDD
     I                                        8  130##JTM
     I                                        8   90##JHH
     I                                       10  110##JNN
     I                                       12  130##JSS
     IINFDS$    E DSY2I$DSP
      * Printer file information data structure
      *
      /EJECT
     IXDINT       DS
      * Internal date
     I                                        1   70XDINDT
     I                                        1   30XDINYY
     I                                        4   50XDINMM
     I                                        6   70XDINDD
      /EJECT
     IXDEX        DS
      * External date
     I                                        1   80XDEXDT
     I                                        1   40XDEY01
     I                                        1   20XDEX01
     I                                        3   40XDEX02
     I                                        5   80XDEY02
     I                                        5   60XDEX03
     I                                        7   80XDEX04
      * Outward parameters
     IPARC        DS                             23
      * KEY : A/R Lockbox Invoice       bx/ddte/bch/itm/inv
      * I :  LckBx Number
     I                                    P   1   40PABEC3
      * I :  LckBx Deposit Date
     I                                    P   5   80PALWDT
      * I :  LckBx Deposit Time
     I                                    P   9  110PAYWNX
      * I :  LckBx Batch Number
     I                                    P  12  130PABFC3
      * I :  LckBx Item Number
     I                                    P  14  150PABGC3
      * I :  LckBx Invoice Number
     I                                    P  16  200PANMC3
      *
      /EJECT
      * Parameter declarations
     IP1PARM      DS
      * FLD: A/R Lockbox Check
      * I : RST LckBx Number
     I                                    P   1   40P1BEC3
      * I : RST LckBx Deposit Date
     I                                    P   5   80P1LWDT
      * I : RST LckBx Deposit Time
     I                                    P   9  110P1YWNX
     IP2PARM      DS
      * FLD: A/R Lockbox Deposit
      * N :  LckBx Deposit Amount
     I                                    P   1   62P2ZXVA
     IP3PARM      DS
      * FLD: *Arrays
      * N :  Application Code
     I                                        1   6 P3DNCD
     I            DS
     I                                        1 132 ZAMSDA
      /EJECT
      *****************************************************************
      * Entry parameters
     C           *ENTRY    PLIST
     C                     PARM           P0RTN   7
     C           P1BEC3    PARM           WP0001  70       LckBx Number
     C           P1LWDT    PARM           WP0002  70       LckBx Deposit D
     C           P1YWNX    PARM           WP0003  40       LckBx Deposit T
      *****************************************************************
      * Initialize
     C                     EXSR ZZINIT
      *
      * PRT A/R Lockbox Proof  PF: Mainline
     C                     EXSR A0MAIN
      * Print headers then End of report format
     C                     EXSR Q0PRNT
     C                     WRITE$LENDRPT
      * Exit program
     C                     EXSR ZXEXPG
      * ------------------------------------------------------
      /EJECT
     CSR         A0MAIN    BEGSR
      *================================================================
      * PRT A/R Lockbox Proof  PF: Mainline
      *================================================================
      * Declare restrictor key work fields
     C           *LIKE     DEFN MCBEC3    WQKA01           LckBx Number
     C           *LIKE     DEFN MCLWDT    WQKA02           LckBx Deposit D
     C           *LIKE     DEFN MCYWNX    WQKA03           LckBx Deposit T
      * Define keylist
     C           KRSA      KLIST
     C                     KFLD           WQKA01           LckBx Number
     C                     KFLD           WQKA02           LckBx Deposit D
     C                     KFLD           WQKA03           LckBx Deposit T
      * Setup key
     C                     Z-ADDP1BEC3    WQKA01           LckBx Number
     C                     Z-ADDP1LWDT    WQKA02           LckBx Deposit D
     C                     Z-ADDP1YWNX    WQKA03           LckBx Deposit T
      * Establish starting position
     C           KRSA      SETLL@MCCPTY                    *
      * Read first record with user selection
     C                     EXSR A3READ
     C           W0EOFA    IFNE '0'                        IF
     C                     ELSE
      * Request all headings
     C                     MOVEL'Y'       W0AL1P  1        First page
     C                     MOVEL'Y'       W0AL00  1        LckBx Number
     C                     MOVEL'Y'       W0AL01  1        LckBx Deposit D
     C                     MOVEL'Y'       W0AL02  1        LckBx Deposit T
     C                     MOVEL'Y'       W0AL03  1        LckBx Batch Num
      * Set column headings flag
     C                     MOVE 'Y'       W0ACDT
      * Print report body
     C           W0EOFA    DOWEQ'0'                        DOW
      * Prepare heading formats for printing
     C                     EXSR A1PHDR
      * Print report detail line
     C                     EXSR A2PDTL
      * Read next record with user selection
     C                     EXSR A3READ
      * Print totals
     C                     EXSR A4PTOT
     C                     END                             WOD
     C                     END                             FI
      *================================================================
     CSR         A0EXIT    ENDSR
      /EJECT
     CSR         A1PHDR    BEGSR
      *================================================================
      * Prepare heading formats for printing
      *================================================================
     C           W0AL1P    IFEQ 'Y'
      * Load related totals format
     C                     Z-ADD*ZERO     $KALVL           LckBx Held Paym
     C                     Z-ADD*ZERO     $KAQVL           LckBx Held WO A
     C                     Z-ADD*ZERO     $KARVL           LckBx Held CB A
     C                     Z-ADD*ZERO     $KAIVL           LckBx Held Diff
     C                     Z-ADD*ZERO     $KAFVL           LckBx Held Doll
     C                     Z-ADD*ZERO     $KAMVL           LckBx Rlsd Paym
     C                     Z-ADD*ZERO     $KAOVL           LckBx Rlsd WO A
     C                     Z-ADD*ZERO     $KAPVL           LckBx Rlsd CB A
     C                     Z-ADD*ZERO     $KAJVL           LckBx Rlsd Diff
     C                     Z-ADD*ZERO     $KAKVL           LckBx Rlsd Doll
     C                     Z-ADD*ZERO     $KZ1VA           LckBx Invoice A
     C                     Z-ADD*ZERO     $KZ3VA           LckBx Invoice A
     C                     Z-ADD*ZERO     $KZ4VA           LckBx Invoice A
     C                     Z-ADD*ZERO     $KANVL           LckBx Differenc
     C                     Z-ADD*ZERO     $KAEVL           LckBx Check Tot
     C                     MOVEL*BLANK    $KO3TX           Explaination 50
     C                     Z-ADD*ZERO     $KAHVL           LckBx Cnt Mnl T
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0AP1P  1
     C                     END
      *
     C           W0AL00    IFEQ 'Y'
      * Load key header format
     C                     Z-ADDMCBEC3    $DBEC3           LckBx Number
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0AP00  1
     C                     END
      *
     C           W0AL01    IFEQ 'Y'
      * Load key header format
     C                     Z-ADDMCBEC3    $EBEC3           LckBx Number
     C                     Z-ADDMCLWDT    $ELWDT           LckBx Deposit D
     C                     Z-ADDMCYWNX    $EYWNX           LckBx Deposit T
     C                     Z-ADD*ZERO     $EZXVA           LckBx Deposit A
     C                     MOVEL*BLANK    $EIUTX           Text USR
     C                     MOVEL*BLANK    $EAWSX           LckBx Deposit S
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0AP01  1
     C                     END
      *
     C           W0AL02    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0AP02  1
     C                     END
      *
     C           W0AL03    IFEQ 'Y'
      * Load key header format
     C                     Z-ADDMCBEC3    $FBEC3           LckBx Number
     C                     Z-ADDMCLWDT    $FLWDT           LckBx Deposit D
     C                     Z-ADDMCYWNX    $FYWNX           LckBx Deposit T
     C                     Z-ADDMCBFC3    $FBFC3           LckBx Batch Num
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0AP03  1
     C                     END
      *
      *================================================================
     CSR         A1EXIT    ENDSR
      /EJECT
     CSR         A2PDTL    BEGSR
      *================================================================
      * Process detail record
      *================================================================
      * Load details format
     C                     Z-ADDMCBEC3    $GBEC3           LckBx Number
     C                     Z-ADDMCLWDT    $GLWDT           LckBx Deposit D
     C                     Z-ADDMCYWNX    $GYWNX           LckBx Deposit T
     C                     Z-ADDMCBFC3    $GBFC3           LckBx Batch Num
     C                     Z-ADDMCBGC3    $GBGC3           LckBx Item Numb
     C                     MOVELMCO1TX    $GO1TX           LckBx Check Num
     C                     Z-ADDMCZZVA    $GZZVA           LckBx Check Amo
     C                     Z-ADDMCLXDT    $GLXDT           LckBx Check Dat
     C                     MOVELMCADSX    $GADSX           LckBx Hold Flag
     C                     Z-ADDMCCWC7    $GCWC7           LckBx Customer
     C                     MOVELMCO2TX    $GO2TX           LckBx Customer
     C                     MOVEL*BLANK    $GO3TX           Explaination 50
     C                     MOVELMCABSX    $GABSX           LckBx Invoice F
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0APDT  1
      * Call print routine
     C                     EXSR Q0PRNT
      * PRTOBJ calls after print of detail format
      * Embedded PRTOBJ : PRT Print Inv for Chks PO
     C                     EXSR UASUBR                     Embedded PRTOBJ
      * USER: Process after print of detail format
      * CASE: CUR.LckBx Hold Flag is Yes
     C           $GADSX    IFEQ 'Y'                        *IF
      * Calculate Held Amounts.
     C                     EXSR URSUBR                     Calculate Held
     C                     ELSE
      * CASE: *OTHERWISE
      * Calculate Released Amounts.
     C                     EXSR USSUBR                     Calculate Relea
     C                     END                             *FI
      * Calculate Total Amounts.
     C                     EXSR UTSUBR                     Calculate Total
     C                     ADD  WUAHVL    $KAHVL           LckBx Cnt Mnl T
      *
      *================================================================
     CSR         A2EXIT    ENDSR
      /EJECT
     CSR         A3READ    BEGSR
      *================================================================
      * Read next record
      *================================================================
      * Hold current values
     C           *LIKE     DEFN MCBEC3    WZA001           LckBx Number
     C                     Z-ADDMCBEC3    WZA001
     C           *LIKE     DEFN MCLWDT    WZA002           LckBx Deposit D
     C                     Z-ADDMCLWDT    WZA002
     C           *LIKE     DEFN MCYWNX    WZA003           LckBx Deposit T
     C                     Z-ADDMCYWNX    WZA003
     C           *LIKE     DEFN MCBFC3    WZA004           LckBx Batch Num
     C                     Z-ADDMCBFC3    WZA004
      * Read next record
     C           W0RSL     DOUEQ'Y'                        DOU
     C           W0EOFA    OREQ '1'
     C           KRSA      READE@MCCPTY                  90*
      * Transfer error indicator to EOF flag
     C                     MOVEL*IN90     W0EOFA  1
      * Quit if no record read
     C           W0EOFA    IFNE '1'                        IF
      * Select record unless user action states otherwise
     C                     MOVEL'Y'       W0RSL   1
     C                     END                             FI
     C                     END                             UOD
      *
      * Reset key level breaks
     C                     MOVEL*BLANK    W0AL00  1        LckBx Number
     C                     MOVEL*BLANK    W0AL01  1        LckBx Deposit D
     C                     MOVEL*BLANK    W0AL02  1        LckBx Deposit T
     C                     MOVEL*BLANK    W0AL03  1        LckBx Batch Num
     C           W0EOFA    IFEQ '1'
      * End of file - Signal all level breaks
     C                     MOVEL'Y'       W0AL00  1        LckBx Number
     C                     MOVEL'Y'       W0AL01  1        LckBx Deposit D
     C                     MOVEL'Y'       W0AL02  1        LckBx Deposit T
     C                     MOVEL'Y'       W0AL03  1        LckBx Batch Num
     C                     ELSE
      * Next record - Detect level breaks
     C           MCBEC3    IFNE WZA001                     LckBx Number
      * Set on level break indicator
     C                     MOVEL'Y'       W0AL00
     C                     END
     C           MCLWDT    IFNE WZA002                     LckBx Deposit D
     C           W0AL00    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0AL01
     C                     END
     C           MCYWNX    IFNE WZA003                     LckBx Deposit T
     C           W0AL01    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0AL02
     C                     END
     C           MCBFC3    IFNE WZA004                     LckBx Batch Num
     C           W0AL02    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0AL03
     C                     END
     C                     END
      *================================================================
     CSR         A3EXIT    ENDSR
      /EJECT
     CSR         A4PTOT    BEGSR
      *================================================================
      * Print report Totals
      *================================================================
      * Print level break totals as required
     C           W0AL03    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0AP03
     C                     END
      *
     C           W0AL02    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0AP02
     C                     END
      *
     C           W0AL01    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0AP01
     C                     END
      *
     C           W0AL00    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0AP00
     C                     END
      *
     C           W0EOFA    IFEQ '1'
     C                     MOVEL'Y'       W0PFM
      * USER: On print of final totals format
      * Calculate Difference Amounts.
     C                     EXSR UUSUBR                     Calculate Diffe
      * Load Explanation.
      * CASE: CUR.LckBx Check Total     SUM NE PAR.LckBx Deposit Amount
     C           $KAEVL    IFNE P2ZXVA                     *IF
     C                     MOVEL*BLANK    $KO3TX           Explaination 50
     C                     MOVEL@CN,018   $KO3TX           Explaination 50
     C                     Z-ADD1         ZQ      50
     C           $KO3TX    CAT  @CN,019:ZQ$KO3TX    P      Explaination 50
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    $KO3TX           Explaination 50
     C                     END                             *FI
     C           W0PFM     IFEQ 'Y'
      * This format always starts a new page
      * Signal new page required
     C                     MOVE 'Y'       W0NEWP
      * Start new page
     C                     EXSR Q0PRNT
      * Print format
     C                     WRITE$KFINTTL
     C                     END
     C                     END
      *
      *================================================================
     CSR         A4EXIT    ENDSR
      /EJECT
     CSR         B0MAIN    BEGSR
      *================================================================
      * PRT Print Inv for Chks PO: Mainline
      *================================================================
      * PRT Print Inv for Chks PO: Initialise
     C                     EXSR ZBINIT
      * Declare restrictor key work fields
     C           *LIKE     DEFN MDBEC3    WQKB02           LckBx Number
     C           *LIKE     DEFN MDLWDT    WQKB03           LckBx Deposit D
     C           *LIKE     DEFN MDYWNX    WQKB04           LckBx Deposit T
     C           *LIKE     DEFN MDBFC3    WQKB05           LckBx Batch Num
     C           *LIKE     DEFN MDBGC3    WQKB06           LckBx Item Numb
      * Define keylist
     C           KRSB      KLIST
     C                     KFLD           WQKB02           LckBx Number
     C                     KFLD           WQKB03           LckBx Deposit D
     C                     KFLD           WQKB04           LckBx Deposit T
     C                     KFLD           WQKB05           LckBx Batch Num
     C                     KFLD           WQKB06           LckBx Item Numb
      * Setup key
     C                     Z-ADD$GBEC3    WQKB02           LckBx Number
     C                     Z-ADD$GLWDT    WQKB03           LckBx Deposit D
     C                     Z-ADD$GYWNX    WQKB04           LckBx Deposit T
     C                     Z-ADD$GBFC3    WQKB05           LckBx Batch Num
     C                     Z-ADD$GBGC3    WQKB06           LckBx Item Numb
      * Establish starting position
     C           KRSB      SETLL@MDCPT7                    *
      * Read first record with user selection
     C                     EXSR B3READ
     C           W0EOFB    IFNE '0'                        IF
     C                     ELSE
      * Request all headings
     C                     MOVEL'Y'       W0BL1P  1        First page
     C                     MOVEL'Y'       W0BL00  1        LckBx Number
     C                     MOVEL'Y'       W0BL01  1        LckBx Deposit D
     C                     MOVEL'Y'       W0BL02  1        LckBx Deposit T
     C                     MOVEL'Y'       W0BL03  1        LckBx Batch Num
     C                     MOVEL'Y'       W0BL04  1        LckBx Item Numb
     C                     MOVEL'Y'       W0BL05  1        LckBx Invoice N
     C                     MOVEL'Y'       W0BL06  1        Adjustment Type
      * Set column headings flag
     C                     MOVE 'Y'       W0BCDT
      * Print report body
     C           W0EOFB    DOWEQ'0'                        DOW
      * Prepare heading formats for printing
     C                     EXSR B1PHDR
      * Print report detail line
     C                     EXSR B2PDTL
      * Read next record with user selection
     C                     EXSR B3READ
      * Print totals
     C                     EXSR B4PTOT
     C                     END                             WOD
     C                     END                             FI
      *================================================================
     CSR         B0EXIT    ENDSR
      /EJECT
     CSR         B1PHDR    BEGSR
      *================================================================
      * Prepare heading formats for printing
      *================================================================
     C           W0BL1P    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP1P  1
     C                     END
      *
     C           W0BL00    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP00  1
     C                     END
      *
     C           W0BL01    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP01  1
     C                     END
      *
     C           W0BL02    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP02  1
     C                     END
      *
     C           W0BL03    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP03  1
     C                     END
      *
     C           W0BL04    IFEQ 'Y'
      * Load key header format
     C                     Z-ADDMDBEC3    $HBEC3           LckBx Number
     C                     Z-ADDMDLWDT    $HLWDT           LckBx Deposit D
     C                     Z-ADDMDYWNX    $HYWNX           LckBx Deposit T
     C                     Z-ADDMDBFC3    $HBFC3           LckBx Batch Num
     C                     Z-ADDMDBGC3    $HBGC3           LckBx Item Numb
      * Load related totals format
     C                     Z-ADD*ZERO     $JZ1VA           LckBx Invoice A
     C                     Z-ADD*ZERO     $JZ8VA           LckBx Inv/Chk D
     C                     MOVEL*BLANK    $JO3TX           Explaination 50
     C                     Z-ADD*ZERO     $JZ3VA           LckBx Invoice A
     C                     Z-ADD*ZERO     $JZ4VA           LckBx Invoice A
     C                     Z-ADD*ZERO     $JACVL           LckBx Count Man
     C                     Z-ADDMDBEC3    $JBEC3           LckBx Number
     C                     Z-ADDMDLWDT    $JLWDT           LckBx Deposit D
     C                     Z-ADDMDYWNX    $JYWNX           LckBx Deposit T
     C                     Z-ADDMDBFC3    $JBFC3           LckBx Batch Num
     C                     Z-ADDMDBGC3    $JBGC3           LckBx Item Numb
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP04  1
     C                     END
      *
     C           W0BL05    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP05  1
     C                     END
      *
     C           W0BL06    IFEQ 'Y'
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BP06  1
     C                     END
      *
      *================================================================
     CSR         B1EXIT    ENDSR
      /EJECT
     CSR         B2PDTL    BEGSR
      *================================================================
      * Process detail record
      *================================================================
      * Load details format
     C                     Z-ADDMDBEC3    $IBEC3           LckBx Number
     C                     Z-ADDMDLWDT    $ILWDT           LckBx Deposit D
     C                     Z-ADDMDYWNX    $IYWNX           LckBx Deposit T
     C                     Z-ADDMDBFC3    $IBFC3           LckBx Batch Num
     C                     Z-ADDMDBGC3    $IBGC3           LckBx Item Numb
     C                     Z-ADDMDNMC5    $INMC5           LckBx Seq Numbe
     C                     Z-ADDMDNMC4    $INMC4           LckBx Seq Count
     C                     Z-ADDMDNMC3    $INMC3           LckBx Invoice N
     C                     Z-ADDMDZ0VA    $IZ0VA           LckBx Invoice A
     C                     MOVELMDUHCD    $IUHCD           Adjustment Type
     C                     MOVELMDAFSX    $IAFSX           LckBx Trans Sou
     C                     MOVELMDNGNA    $INGNA           Explanation
     C                     MOVEL*BLANK    $IE2TX           USR Work Field
     C                     Z-ADDMDAIC3    $IAIC3           Company Number
     C                     Z-ADD*ZERO     $ICONB           Invoice Number
     C                     MOVEL*BLANK    $ICEST           Invoice Suffix
     C                     Z-ADD*ZERO     $IBGVA           Remaining Balan
     C                     Z-ADD*ZERO     $IANC7           A/R Customer Nu
     C                     MOVEL*BLANK    $IAYTX           Customer Name
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
      * Signal that format is now ready to print
     C                     MOVE 'Y'       W0BPDT  1
      * Call print routine
     C                     EXSR Q0PRNT
      * USER: Process after print of detail format
      * CASE: CUR.Adjustment Type Code is Regular Pay
     C           $IUHCD    IFEQ 'PAY'                      *IF
     C                     ADD  $IZ0VA    $JZ1VA           LckBx Invoice A
     C                     ELSE
      * CASE: CUR.Adjustment Type Code is Write Off Under $50
     C           $IUHCD    IFEQ ' WO'                      *IF
     C                     ADD  $IZ0VA    $JZ3VA           LckBx Invoice A
     C                     ELSE
      * CASE:
      *  - c1 OR c2
      *   |- c1    : CUR.Adjustment Type Code is Chargeback
      *   |- c2    : CUR.Adjustment Type Code is Accrual Chargeback
      *   '-
     C           $IUHCD    IFEQ 'CB'                       *IF
     C           $IUHCD    OREQ 'ACB'                      *OR
      * *** PK0333 ***
     C                     ADD  $IZ0VA    $JZ4VA           LckBx Invoice A
     C                     END                             *FI
     C                     END                             *FI
     C                     END                             *FI
      * CASE: CUR.LckBx Trans Source is Manual
     C           $IAFSX    IFEQ 'M'                        *IF
     C                     ADD  1         $JACVL           LckBx Count Man
     C                     END                             *FI
      *
      *================================================================
     CSR         B2EXIT    ENDSR
      /EJECT
     CSR         B3READ    BEGSR
      *================================================================
      * Read next record
      *================================================================
      * Hold current values
     C           *LIKE     DEFN MDBEC3    WZB001           LckBx Number
     C                     Z-ADDMDBEC3    WZB001
     C           *LIKE     DEFN MDLWDT    WZB002           LckBx Deposit D
     C                     Z-ADDMDLWDT    WZB002
     C           *LIKE     DEFN MDYWNX    WZB003           LckBx Deposit T
     C                     Z-ADDMDYWNX    WZB003
     C           *LIKE     DEFN MDBFC3    WZB004           LckBx Batch Num
     C                     Z-ADDMDBFC3    WZB004
     C           *LIKE     DEFN MDBGC3    WZB005           LckBx Item Numb
     C                     Z-ADDMDBGC3    WZB005
     C           *LIKE     DEFN MDNMC3    WZB006           LckBx Invoice N
     C                     Z-ADDMDNMC3    WZB006
     C           *LIKE     DEFN MDUHCD    WZB007           Adjustment Type
     C                     MOVELMDUHCD    WZB007
      * Read next record
     C           W0RSL     DOUEQ'Y'                        DOU
     C           W0EOFB    OREQ '1'
     C           KRSB      READE@MDCPT7                  90*
      * Transfer error indicator to EOF flag
     C                     MOVEL*IN90     W0EOFB  1
      * Quit if no record read
     C           W0EOFB    IFNE '1'                        IF
      * Select record unless user action states otherwise
     C                     MOVEL'Y'       W0RSL   1
     C                     END                             FI
     C                     END                             UOD
      *
      * Reset key level breaks
     C                     MOVEL*BLANK    W0BL00  1        LckBx Number
     C                     MOVEL*BLANK    W0BL01  1        LckBx Deposit D
     C                     MOVEL*BLANK    W0BL02  1        LckBx Deposit T
     C                     MOVEL*BLANK    W0BL03  1        LckBx Batch Num
     C                     MOVEL*BLANK    W0BL04  1        LckBx Item Numb
     C                     MOVEL*BLANK    W0BL05  1        LckBx Invoice N
     C                     MOVEL*BLANK    W0BL06  1        Adjustment Type
     C           W0EOFB    IFEQ '1'
      * End of file - Signal all level breaks
     C                     MOVEL'Y'       W0BL00  1        LckBx Number
     C                     MOVEL'Y'       W0BL01  1        LckBx Deposit D
     C                     MOVEL'Y'       W0BL02  1        LckBx Deposit T
     C                     MOVEL'Y'       W0BL03  1        LckBx Batch Num
     C                     MOVEL'Y'       W0BL04  1        LckBx Item Numb
     C                     MOVEL'Y'       W0BL05  1        LckBx Invoice N
     C                     MOVEL'Y'       W0BL06  1        Adjustment Type
     C                     ELSE
      * Next record - Detect level breaks
     C           MDBEC3    IFNE WZB001                     LckBx Number
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL00
     C                     END
     C           MDLWDT    IFNE WZB002                     LckBx Deposit D
     C           W0BL00    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL01
     C                     END
     C           MDYWNX    IFNE WZB003                     LckBx Deposit T
     C           W0BL01    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL02
     C                     END
     C           MDBFC3    IFNE WZB004                     LckBx Batch Num
     C           W0BL02    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL03
     C                     END
     C           MDBGC3    IFNE WZB005                     LckBx Item Numb
     C           W0BL03    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL04
     C                     END
     C           MDNMC3    IFNE WZB006                     LckBx Invoice N
     C           W0BL04    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL05
     C                     END
     C           MDUHCD    IFNE WZB007                     Adjustment Type
     C           W0BL05    OREQ 'Y'
      * Set on level break indicator
     C                     MOVEL'Y'       W0BL06
     C                     END
     C                     END
      *================================================================
     CSR         B3EXIT    ENDSR
      /EJECT
     CSR         B4PTOT    BEGSR
      *================================================================
      * Print report Totals
      *================================================================
      * Print level break totals as required
     C           W0BL06    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP06
     C                     END
      *
     C           W0BL05    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP05
     C                     END
      *
     C           W0BL04    IFEQ 'Y'
     C                     MOVEL'Y'       W0PFM
      * USER: On print of LckBx Item Number format
      * Load Explaination.
     C                     EXSR UMSUBR                     Load Explainati
      * Flag CB,WO totals for Display.
     C                     EXSR UPSUBR                     Flag CB,WO tota
      * Load Output Parameters.
     C                     EXSR UQSUBR                     Load Output Par
     C           W0PFM     IFEQ 'Y'
      * If there is not enough space on the
      * physical page for this format:
     C           @$PGL     SUB  @$CLN     @$WRK
     C           @$WRK     IFLE 6
      * Signal new page required
     C                     MOVE 'Y'       W0NEWP
      * Start new page
     C                     EXSR Q0PRNT
     C                     END
     C                     MOVEL'0'       *IN79
     C           WN0003    IFEQ 'N'                        *IF
     C                     MOVEL'1'       *IN79
     C                     END                             *FI
     C                     MOVEL'0'       *IN78
     C           WN0001    IFEQ 'N'                        *IF
     C                     MOVEL'1'       *IN78
     C                     END                             *FI
     C                     MOVEL'0'       *IN77
     C           WN0002    IFEQ 'N'                        *IF
     C                     MOVEL'1'       *IN77
     C                     END                             *FI
      * Print format
     C                     WRITE$JKEYTTL
     C                     END
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP04
     C                     END
      *
     C           W0BL03    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP03
     C                     END
      *
     C           W0BL02    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP02
     C                     END
      *
     C           W0BL01    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP01
     C                     END
      *
     C           W0BL00    IFEQ 'Y'
      * Signal header format is no longer ready
     C                     MOVEL*BLANK    W0BP00
     C                     END
      *
     C           W0EOFB    IFEQ '1'
     C                     END
      *
      *================================================================
     CSR         B4EXIT    ENDSR
      /EJECT
     CSR         Q0PRNT    BEGSR
      *================================================================
      * Print report formats
      *================================================================
      * Select formats to print
     C                     EXSR Q1FSEL
      * Calculate length of formats selected for printing
     C                     EXSR Q2PLEN
      * Add column heading length to print length
     C                     ADD  W0COLN    W0FSUM
     C           W0NEWP    IFNE 'Y'
      * Signal overflow if requested headings would cause
      * detail format to start past the overflow line
     C           W0FSUM    IFGT W0OFL
     C                     MOVE 'Y'       W0NEWP
     C                     ELSE
      * Signal overflow if requested headings would cause
      * Detail format to be printed past end of page
     C                     ADD  W0DTLN    W0FSUM
     C           W0FSUM    IFGT W0PGL
     C                     MOVE 'Y'       W0NEWP
     C                     END
     C                     END
     C                     END
      * Print Standard report header of PRT A/R Lockbox Proof  PF
      * If it is ready to print, then do so,
     C           W0NEWP    IFEQ 'Y'                        IF
     C                     EXSR Q3PTNP
     C                     END                             FI
      *
      * Print First Page Format of PRT A/R Lockbox Proof  PF
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0AP1P    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0AP1P    ANDEQ'P'
      * Mention hidden format
     C   99N99             WRITE$C1STPAG
      * Reset format print flag
     C                     MOVE *BLANK    W0AP1P
      * Clear first page flag.
     C                     MOVE *BLANK    W0AL1P
     C                     END                             FI
      * Print LckBx Number of PRT A/R Lockbox Proof  PF
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0AP00    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0AP00    ANDEQ'P'
      * Mention hidden format
     C   99N99             WRITE$DKEYHDR
      * Reset format print flag
     C                     MOVE *BLANK    W0AP00
     C                     END                             FI
      * Print LckBx Deposit Date of PRT A/R Lockbox Proof  PF
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0AP01    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0AP01    ANDEQ'P'
     C                     MOVEL'Y'       W0PFM
      * USER: On print of LckBx Deposit Date format
      * RTV Lockbox Deposit AmtRT - A/R Lockbox Deposit  * 
     C                     EXSR SCRVGN
      * CUR.Text USR = Condition name of CUR.LckBx Deposit Status
     C                     CALL 'CARVC2R'              90  *
     C                     PARM           W0RTN   7
     C                     PARM 1509761   Y2LSNO  70       List number
     C                     PARM $EAWSX    W0INVL 25        LckBx Deposit S
     C                     PARM ' '       W0VLMP  1        Value mapped
     C           $EIUTX    PARM           W0CNNM 25        Text USR
      *
     C                     Z-ADD$EZXVA    P2ZXVA           LckBx Deposit A
     C           W0PFM     IFEQ 'Y'
      * Convert fields to external form
      * Convert LckBx Number to external.
      * CD7 Int/Ext
      * CASE: PAR.CD7 Int Numeric Key is not equal zero
     C           $EBEC3    IFNE 0                          *IF
     C                     MOVEL*BLANK    WUEOCD           CD7 Ext Numeric
     C                     MOVEL$EBEC3    WUEOCD           CD7 Ext Numeric
      * CD7 Int/Ext EXCUSRSRC - *Field attribute types  * 
     C                     MOVEAWUEOCD    #L7              EDIT ARRAY
     C                     Z-ADD1         #E      30
     C                     MOVE *IN61     UUIN61  1
     C                     SETOF                     61
     C                     DO   7
     C           #L7,#E    IFEQ '0'                        ZERO VALUE
     C           *IN61     IFEQ '0'
     C                     MOVE ' '       #L7,#E
     C                     ADD  1         #E
     C                     END
     C                     ELSE
     C                     SETON                     61
     C                     END
     C                     END
     C                     MOVEA#L7       WUEOCD
     C                     MOVE UUIN61    *IN61
     C                     MOVELWUEOCD    VEBEC3           CD7 Ext Numeric
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    VEBEC3           CD7 Ext Numeric
     C                     END                             *FI
      * Convert LckBx Deposit Date to display format
      * Convert date
     C           1000000   ADD  $ELWDT    XDINDT
     C                     EXSR XDVC2T
     C                     Z-ADDXDEXDT    VELWDT
      * Print format
     C                     WRITE$EKEYHDR
      * Set column headings flag
     C                     MOVE 'Y'       W0ACDT
     C                     END                             FI
      *
      * Reset format print flag
     C                     MOVE 'P'       W0AP01
     C                     END                             FI
      * Print LckBx Deposit Time of PRT A/R Lockbox Proof  PF
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0AP02    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0AP02    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0AP02
     C                     END                             FI
      * Print LckBx Batch Number of PRT A/R Lockbox Proof  PF
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0AP03    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0AP03    ANDEQ'P'
      * Convert fields to external form
      * Convert LckBx Batch Number to external.
      * CD3 Int/Ext
      * CASE: PAR.CD3 Int Numeric Key is not equal zero
     C           $FBFC3    IFNE 0                          *IF
     C                     MOVEL*BLANK    WUDMCD           CD3 Ext Numeric
     C                     MOVEL$FBFC3    WUDMCD           CD3 Ext Numeric
      * CD3 Int/Ext EXCUSRSRC - *Field attribute types  * 
     C                     MOVEAWUDMCD    #L3              EDIT ARRAY
     C                     Z-ADD1         #E      30
     C                     MOVE *IN61     UUIN61  1
     C                     SETOF                     61
     C                     DO   3
     C           #L3,#E    IFEQ '0'                        ZERO VALUE
     C           *IN61     IFEQ '0'
     C                     MOVE ' '       #L3,#E
     C                     ADD  1         #E
     C                     END
     C                     ELSE
     C                     SETON                     61
     C                     END
     C                     END
     C                     MOVEA#L3       WUDMCD
     C                     MOVE UUIN61    *IN61
     C                     MOVELWUDMCD    VFBFC3           CD3 Ext Numeric
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    VFBFC3           CD3 Ext Numeric
     C                     END                             *FI
      * Print format
     C                     WRITE$FKEYHDR
      * Set column headings flag
     C                     MOVE 'Y'       W0ACDT
      *
      * Reset format print flag
     C                     MOVE 'P'       W0AP03
     C                     END                             FI
      * Print Detail line. of PRT A/R Lockbox Proof  PF
      * If new page then set column headings active
     C           W0NEWP    IFEQ 'Y'
     C                     MOVE 'Y'       W0ACDT  1
     C                     END
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0APDT    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0APDT    ANDEQ'P'
     C                     MOVEL'Y'       W0PFM
      * USER: On print of detail format
      * Load Explanation.
      * CASE: CUR.LckBx Invoice Flag is No
     C           $GABSX    IFEQ 'N'                        *IF
     C                     MOVEL*BLANK    $GO3TX           Explaination 50
     C                     MOVEL@CN,001   $GO3TX           Explaination 50
     C                     Z-ADD1         ZQ      50
     C           $GO3TX    CAT  @CN,002:ZQ$GO3TX    P      Explaination 50
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    $GO3TX           Explaination 50
     C                     END                             *FI
     C           W0PFM     IFEQ 'Y'
      * Convert fields to external form
      * Convert LckBx Item Number to external.
      * CD3 Int/Ext
      * CASE: PAR.CD3 Int Numeric Key is not equal zero
     C           $GBGC3    IFNE 0                          *IF
     C                     MOVEL*BLANK    WUDMCD           CD3 Ext Numeric
     C                     MOVEL$GBGC3    WUDMCD           CD3 Ext Numeric
      * CD3 Int/Ext EXCUSRSRC - *Field attribute types  * 
     C                     MOVEAWUDMCD    #L3              EDIT ARRAY
     C                     Z-ADD1         #E      30
     C                     MOVE *IN61     UUIN61  1
     C                     SETOF                     61
     C                     DO   3
     C           #L3,#E    IFEQ '0'                        ZERO VALUE
     C           *IN61     IFEQ '0'
     C                     MOVE ' '       #L3,#E
     C                     ADD  1         #E
     C                     END
     C                     ELSE
     C                     SETON                     61
     C                     END
     C                     END
     C                     MOVEA#L3       WUDMCD
     C                     MOVE UUIN61    *IN61
     C                     MOVELWUDMCD    VGBGC3           CD3 Ext Numeric
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    VGBGC3           CD3 Ext Numeric
     C                     END                             *FI
      * Convert LckBx Check Date to display format
      * Convert date
     C           1000000   ADD  $GLXDT    XDINDT
     C                     EXSR XDVC2T
     C                     Z-ADDXDEXDT    VGLXDT
      * Convert LckBx Customer Number to external.
      * CD7 Int/Ext
      * CASE: PAR.CD7 Int Numeric Key is not equal zero
     C           $GCWC7    IFNE 0                          *IF
     C                     MOVEL*BLANK    WUEOCD           CD7 Ext Numeric
     C                     MOVEL$GCWC7    WUEOCD           CD7 Ext Numeric
      * CD7 Int/Ext EXCUSRSRC - *Field attribute types  * 
     C                     MOVEAWUEOCD    #L7              EDIT ARRAY
     C                     Z-ADD1         #E      30
     C                     MOVE *IN61     UUIN61  1
     C                     SETOF                     61
     C                     DO   7
     C           #L7,#E    IFEQ '0'                        ZERO VALUE
     C           *IN61     IFEQ '0'
     C                     MOVE ' '       #L7,#E
     C                     ADD  1         #E
     C                     END
     C                     ELSE
     C                     SETON                     61
     C                     END
     C                     END
     C                     MOVEA#L7       WUEOCD
     C                     MOVE UUIN61    *IN61
     C                     MOVELWUEOCD    VGCWC7           CD7 Ext Numeric
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    VGCWC7           CD7 Ext Numeric
     C                     END                             *FI
      * Print column headings if required
     C           W0ACDT    IFEQ 'Y'
     C                     WRITE$GCOLHDG
      * Clear column headings control flag
     C                     MOVE *BLANK    W0ACDT
     C                     END                             FI
      * Print format
     C                     WRITE$GDTLRCD
     C                     END                             FI
      *
      * Reset format print flag
     C                     MOVE *BLANK    W0APDT
     C                     END                             FI
      * Print First Page Format of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP1P    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP1P    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP1P
      * Clear first page flag.
     C                     MOVE *BLANK    W0BL1P
     C                     END                             FI
      * Print LckBx Number of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP00    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP00    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP00
     C                     END                             FI
      * Print LckBx Deposit Date of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP01    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP01    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP01
     C                     END                             FI
      * Print LckBx Deposit Time of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP02    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP02    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP02
     C                     END                             FI
      * Print LckBx Batch Number of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP03    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP03    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP03
     C                     END                             FI
      * Print LckBx Item Number of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP04    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP04    ANDEQ'P'
      * Print format
     C                     WRITE$HKEYHDR
      * Set column headings flag
     C                     MOVE 'Y'       W0BCDT
      *
      * Reset format print flag
     C                     MOVE 'P'       W0BP04
     C                     END                             FI
      * Print LckBx Invoice Number of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP05    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP05    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP05
     C                     END                             FI
      * Print Adjustment Type Code of PRT Print Inv for Chks PO
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BP06    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BP06    ANDEQ'P'
      * Reset format print flag
     C                     MOVE *BLANK    W0BP06
     C                     END                             FI
      * Print Detail line. of PRT Print Inv for Chks PO
      * If new page then set column headings active
     C           W0NEWP    IFEQ 'Y'
     C                     MOVE 'Y'       W0BCDT  1
     C                     END
      * If it is ready to print, then do so,
      * or if new page & print on new page selected &
      * active then set print format flag
     C           W0BPDT    IFEQ 'Y'                        IF
     C           W0NEWP    OREQ 'Y'
     C           W0BPDT    ANDEQ'P'
     C                     MOVEL'Y'       W0PFM
      * USER: On print of detail format
      * Load Source Text
     C                     EXSR UBSUBR                     Load Source Tex
      * Get Invoice Info
     C                     EXSR UCSUBR                     Get Invoice Inf
     C           W0PFM     IFEQ 'Y'
      * Convert fields to external form
      * Convert Company Number to external.
      * CD3 Int/Ext
      * CASE: PAR.CD3 Int Numeric Key is not equal zero
     C           $IAIC3    IFNE 0                          *IF
     C                     MOVEL*BLANK    WUDMCD           CD3 Ext Numeric
     C                     MOVEL$IAIC3    WUDMCD           CD3 Ext Numeric
      * CD3 Int/Ext EXCUSRSRC - *Field attribute types  * 
     C                     MOVEAWUDMCD    #L3              EDIT ARRAY
     C                     Z-ADD1         #E      30
     C                     MOVE *IN61     UUIN61  1
     C                     SETOF                     61
     C                     DO   3
     C           #L3,#E    IFEQ '0'                        ZERO VALUE
     C           *IN61     IFEQ '0'
     C                     MOVE ' '       #L3,#E
     C                     ADD  1         #E
     C                     END
     C                     ELSE
     C                     SETON                     61
     C                     END
     C                     END
     C                     MOVEA#L3       WUDMCD
     C                     MOVE UUIN61    *IN61
     C                     MOVELWUDMCD    VIAIC3           CD3 Ext Numeric
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    VIAIC3           CD3 Ext Numeric
     C                     END                             *FI
      * Convert A/R Customer Number to external.
      * CD7 Int/Ext
      * CASE: PAR.CD7 Int Numeric Key is not equal zero
     C           $IANC7    IFNE 0                          *IF
     C                     MOVEL*BLANK    WUEOCD           CD7 Ext Numeric
     C                     MOVEL$IANC7    WUEOCD           CD7 Ext Numeric
      * CD7 Int/Ext EXCUSRSRC - *Field attribute types  * 
     C                     MOVEAWUEOCD    #L7              EDIT ARRAY
     C                     Z-ADD1         #E      30
     C                     MOVE *IN61     UUIN61  1
     C                     SETOF                     61
     C                     DO   7
     C           #L7,#E    IFEQ '0'                        ZERO VALUE
     C           *IN61     IFEQ '0'
     C                     MOVE ' '       #L7,#E
     C                     ADD  1         #E
     C                     END
     C                     ELSE
     C                     SETON                     61
     C                     END
     C                     END
     C                     MOVEA#L7       WUEOCD
     C                     MOVE UUIN61    *IN61
     C                     MOVELWUEOCD    VIANC7           CD7 Ext Numeric
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    VIANC7           CD7 Ext Numeric
     C                     END                             *FI
     C                     MOVEL'0'       *IN79
     C           $ICONB    IFEQ *ZERO                      *IF
     C                     MOVEL'1'       *IN79
     C                     END                             *FI
      * Print column headings if required
     C           W0BCDT    IFEQ 'Y'
     C                     WRITE$ICOLHDG
      * Clear column headings control flag
     C                     MOVE *BLANK    W0BCDT
     C                     END                             FI
      * Print format
     C                     WRITE$IDTLRCD
     C                     END                             FI
      *
      * Reset format print flag
     C                     MOVE *BLANK    W0BPDT
     C                     END                             FI
      * Clear new page flag
     C                     MOVE *BLANK    W0NEWP
      *================================================================
     CSR         Q0EXIT    ENDSR
      /EJECT
     CSR         Q1FSEL    BEGSR
      *================================================================
      * Format select
      *================================================================
     C                     MOVEL*BLANK    W0SKP   1
      * Cascade skip to new page requests upwards
     C           W0AP03    IFEQ 'Y'
     C                     MOVEL'Y'       W0SKP
     C                     END
      * Request all headings higher than this one
     C           W0SKP     IFEQ 'Y'
     C           W0AP01    ANDEQ*BLANK
     C                     MOVEL'P'       W0AP01
     C                     END
      * Request new page if required
     C           W0SKP     IFEQ 'Y'                        IF
     C                     MOVE 'Y'       W0NEWP
     C                     END                             FI
      *================================================================
     CSR         Q1EXIT    ENDSR
      /EJECT
     CSR         Q2PLEN    BEGSR
      *================================================================
      * Evaluate print length
      *================================================================
     C           *LIKE     DEFN @$CLN     W0FSUM
     C           *LIKE     DEFN @$CLN     W0DTLN
     C           *LIKE     DEFN @$CLN     W0COLN
     C                     Z-ADD@$CLN     W0FSUM
     C                     Z-ADD*ZERO     W0DTLN
     C                     Z-ADD*ZERO     W0COLN
      * * First Page Format of PRT A/R Lockbox Proof  PF
     C           W0AP1P    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Number of PRT A/R Lockbox Proof  PF
     C           W0AP00    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Deposit Date of PRT A/R Lockbox Proof  PF
     C           W0AP01    IFEQ 'Y'
     C                     ADD  4         W0FSUM
     C                     END                             FI
      *
      * * LckBx Deposit Time of PRT A/R Lockbox Proof  PF
     C           W0AP02    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Batch Number of PRT A/R Lockbox Proof  PF
     C           W0AP03    IFEQ 'Y'
     C                     ADD  4         W0FSUM
     C                     END                             FI
      *
      * * Detail line. of PRT A/R Lockbox Proof  PF
     C           W0APDT    IFEQ 'Y'
     C                     Z-ADD2         W0DTLN
     C           W0ACDT    IFEQ 'Y'
     C                     Z-ADD0         W0COLN
     C                     END                             FI
     C                     END                             FI
      *
      * * First Page Format of PRT Print Inv for Chks PO
     C           W0BP1P    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Number of PRT Print Inv for Chks PO
     C           W0BP00    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Deposit Date of PRT Print Inv for Chks PO
     C           W0BP01    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Deposit Time of PRT Print Inv for Chks PO
     C           W0BP02    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Batch Number of PRT Print Inv for Chks PO
     C           W0BP03    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * LckBx Item Number of PRT Print Inv for Chks PO
     C           W0BP04    IFEQ 'Y'
     C                     ADD  3         W0FSUM
     C                     END                             FI
      *
      * * LckBx Invoice Number of PRT Print Inv for Chks PO
     C           W0BP05    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * Adjustment Type Code of PRT Print Inv for Chks PO
     C           W0BP06    IFEQ 'Y'
     C                     ADD  0         W0FSUM
     C                     END                             FI
      *
      * * Detail line. of PRT Print Inv for Chks PO
     C           W0BPDT    IFEQ 'Y'
     C                     Z-ADD1         W0DTLN
     C           W0BCDT    IFEQ 'Y'
     C                     Z-ADD0         W0COLN
     C                     END                             FI
     C                     END                             FI
      *
      *================================================================
     CSR         Q2EXIT    ENDSR
      /EJECT
     CSR         Q3PTNP    BEGSR
      *================================================================
      * Format select
      *================================================================
     C                     WRITE$APAGHDR
      * Clear page overflow indicator
     C                     SETOF                     97    *
      *================================================================
     CSR         Q3EXIT    ENDSR
      /EJECT
     CSR         SARVGN    BEGSR
      *================================================================
      * RTV Applic. Group Desc RT - Application  * 
      *================================================================
     C                     MOVEL*BLANK    W0RTN   7
      * Declare restrictor key work fields
     C           *LIKE     DEFN DNDNCD    WQSA01           Application Cod
      * Define keylist
     C           KRSSA     KLIST
     C                     KFLD           WQSA01           Application Cod
      * Setup key
     C                     MOVELP3DNCD    WQSA01           Application Cod
      * Establish starting position
     C           KRSSA     SETLL@DNRESF                    *
     C           KRSSA     READE@DNRESF                  90*
      * Data record not found
     C   90                MOVEL'USR0755' W0RTN   7
     C           *IN90     DOWEQ'0'
      * USER: Process Data record
      * CASE: DB1.Application Group is Blank
     C           DNRSCD    IFEQ *BLANK                     *IF
      * PAR = DB1 By name
     C                     MOVELDNAUNA    WUAUNA           Description
     C                     ELSE
      * CASE: *OTHERWISE
      * RTV Application Desc   RT - Application  * 
     C                     EXSR SBRVGN
     C                     END                             *FI
     C           KRSSA     READE@DNRESF                  90*
     C                     ENDDO
      *================================================================
     CSR         SAEXIT    ENDSR
      /EJECT
     CSR         SBRVGN    BEGSR
      *================================================================
      * RTV Application Desc   RT - Application  * 
      *================================================================
     C                     MOVEL*BLANK    W0RTN   7
      * Declare restrictor key work fields
     C           *LIKE     DEFN DNDNCD    WQSB01           Application Cod
      * Define keylist
     C           KRSSB     KLIST
     C                     KFLD           WQSB01           Application Cod
      * Setup key
     C                     MOVELDNRSCD    WQSB01           Application Cod
      * Establish starting position
     C           KRSSB     SETLL@DNRESF                    *
     C           KRSSB     READE@DNRESF                  90*
     C           *IN90     IFEQ '1'
      * Data record not found
     C                     MOVEL'USR0755' W0RTN   7
      * USER: Processing if Data record not found
      * PAR = CON By name
     C                     MOVEL*BLANK    WUAUNA           Description
     C                     MOVEL'Y2U0005' W0RTN            *Return code
     C                     GOTO SBEXIT
     C                     ENDIF
      *
     C           *IN90     DOWEQ'0'
      * USER: Process Data record
      * PAR = DB1 By name
     C                     MOVELDNAUNA    WUAUNA           Description
     C           KRSSB     READE@DNRESF                  90*
     C                     ENDDO
      *================================================================
     CSR         SBEXIT    ENDSR
      /EJECT
     CSR         SCRVGN    BEGSR
      *================================================================
      * RTV Lockbox Deposit AmtRT - A/R Lockbox Deposit  * 
      *================================================================
     C                     MOVEL*BLANK    W0RTN   7
      * Define keylist
     C           KRSSC     KLIST
     C                     KFLD           MABEC3           LckBx Number
     C                     KFLD           MALWDT           LckBx Deposit D
     C                     KFLD           MAYWNX           LckBx Deposit T
      * Setup key
     C                     Z-ADD$EBEC3    MABEC3           LckBx Number
     C                     Z-ADD$ELWDT    MALWDT           LckBx Deposit D
     C                     Z-ADD$EYWNX    MAYWNX           LckBx Deposit T
      * Establish starting position
     C           KRSSC     CHAIN@MACPTS              90    *
     C           *IN90     IFEQ '1'
      * Data record not found
     C                     MOVEL'USR2646' W0RTN   7
      * USER: Processing if Data record not found
      * PAR = CON By name
     C                     Z-ADD*ZERO     $EZXVA           LckBx Deposit A
     C                     MOVEL*BLANK    $EAWSX           LckBx Deposit S
     C                     GOTO SCEXIT
     C                     ENDIF
      *
     C           *IN90     IFEQ '0'
      * USER: Process Data record
      * PAR = DB1 By name
     C                     Z-ADDMAZXVA    $EZXVA           LckBx Deposit A
     C                     MOVELMAAWSX    $EAWSX           LckBx Deposit S
     C                     ENDIF
      *================================================================
     CSR         SCEXIT    ENDSR
      /EJECT
     CSR         SDRVGN    BEGSR
      *================================================================
      * RTV Remaining/Open Inv RT - A/R Header  * 
      *================================================================
     C                     MOVEL*BLANK    W0RTN   7
      * Declare restrictor key work fields
     C           *LIKE     DEFN BDCONB    WQSD02           Invoice Number
      * Define keylist
     C           KRSSD     KLIST
     C                     KFLD           WQSD02           Invoice Number
      * Setup key
     C                     Z-ADD$ICONB    WQSD02           Invoice Number
      * Establish starting position
     C           KRSSD     SETLL@BDCPU3                    *
     C           KRSSD     READE@BDCPU3                  90*
     C           *IN90     IFEQ '1'
      * Data record not found
     C                     MOVEL'USR0174' W0RTN   7
      * USER: Processing if Data record not found
      * PAR = CON By name
     C                     Z-ADD*ZERO     $IAIC3           Company Number
     C                     MOVEL*BLANK    $ICEST           Invoice Suffix
     C                     Z-ADD*ZERO     $IBGVA           Remaining Balan
     C                     Z-ADD*ZERO     $IANC7           A/R Customer Nu
     C                     GOTO SDEXIT
     C                     ENDIF
      *
     C           *IN90     DOWEQ'0'
      * USER: Process Data record
      * PAR = DB1 By name
     C                     Z-ADDBDAIC3    $IAIC3           Company Number
     C                     MOVELBDCEST    $ICEST           Invoice Suffix
     C                     Z-ADDBDBGVA    $IBGVA           Remaining Balan
     C                     Z-ADDBDANC7    $IANC7           A/R Customer Nu
     C                     GOTO SDEXIT                     *QUIT
     C           KRSSD     READE@BDCPU3                  90*
     C                     ENDDO
      *================================================================
     CSR         SDEXIT    ENDSR
      /EJECT
     CSR         SERVGN    BEGSR
      *================================================================
      * RTV Customer Name      RT - Customer  * 
      *================================================================
     C                     MOVEL*BLANK    W0RTN   7
      * Define keylist
     C           KRSSE     KLIST
     C                     KFLD           BBBKC7           Ship To Custome
      * Setup key
     C                     Z-ADD$IANC7    BBBKC7           Ship To Custome
      * Establish starting position
     C           KRSSE     CHAIN@BBREE9              90    *
     C           *IN90     IFEQ '1'
      * Data record not found
     C                     MOVEL'USR0170' W0RTN   7
      * USER: Processing if Data record not found
      * PAR = CON By name
     C                     MOVEL*BLANK    $IAYTX           Customer Name
     C                     MOVEL'Y2U0005' W0RTN            *Return code
     C                     GOTO SEEXIT
     C                     ENDIF
      *
     C           *IN90     IFEQ '0'
      * USER: Process Data record
      * PAR = DB1 By name
     C                     MOVELBBAYTX    $IAYTX           Customer Name
     C                     ENDIF
      *================================================================
     CSR         SEEXIT    ENDSR
      /EJECT
     CSR         UASUBR    BEGSR
      *================================================================
      * Embedded PRTOBJ : PRT Print Inv for Chks PO
      *================================================================
      *
     C                     MOVEL*BLANK    WN0001  1        Dsp Write Off
     C                     MOVEL*BLANK    WN0002  1        Dsp Charge Back
     C                     MOVEL*BLANK    WN0003  1        Dsp Difference
     C                     Z-ADD*ZERO     WN0004 112       LckBx Total Inv
     C                     Z-ADD*ZERO     WN0005  90       Save Invoice Nu
     C                     MOVEL*BLANK    WN0006  3        Save Adjustment
      *
      * PRT Print Inv for Chks PO: Mainline
     C                     EXSR B0MAIN
      *================================================================
     CSR         UAEXIT    ENDSR
      /EJECT
     CSR         UBSUBR    BEGSR
      *================================================================
      * Load Source Text
      *================================================================
      * CUR.USR Work Field 7A = Condition name of CUR.LckBx Trans Source
     C                     CALL 'CARVC2R'              90  *
     C                     PARM           W0RTN   7
     C                     PARM 1508219   Y2LSNO  70       List number
     C                     PARM $IAFSX    W0INVL 25        LckBx Trans Sou
     C                     PARM ' '       W0VLMP  1        Value mapped
     C           $IE2TX    PARM           W0CNNM 25        USR Work Field
      *
      *================================================================
     CSR         UBEXIT    ENDSR
      /EJECT
     CSR         UCSUBR    BEGSR
      *================================================================
      * Get Invoice Info
      *================================================================
      * CASE: CUR.LckBx Invoice Number is eq zero
     C           $INMC3    IFEQ *ZERO                      *IF
      * Blank Invoice Number.
     C                     EXSR UDSUBR                     Blank Invoice N
     C                     ELSE
      * CASE: *OTHERWISE
      * CASE: CUR.LckBx Invoice Number EQ PAR.Save Invoice Number   USR
     C           $INMC3    IFEQ WN0005                     *IF
     C                     Z-ADD*ZERO     $ICONB           Invoice Number
      * Skip Duplicate Invoice Payment Records.
     C                     EXSR UESUBR                     Skip Duplicate
     C                     ELSE
      * CASE: *OTHERWISE
      * Process Invoice
     C                     EXSR UFSUBR                     Process Invoice
     C                     END                             *FI
     C                     END                             *FI
     C                     Z-ADD$INMC3    WN0005           Save Invoice Nu
      *================================================================
     CSR         UCEXIT    ENDSR
      /EJECT
     CSR         UDSUBR    BEGSR
      *================================================================
      * Blank Invoice Number.
      *================================================================
     C                     Z-ADD*ZERO     $ICONB           Invoice Number
     C                     MOVEL*BLANK    $ICEST           Invoice Suffix
     C                     Z-ADD*ZERO     $IBGVA           Remaining Balan
     C                     Z-ADD*ZERO     $IANC7           A/R Customer Nu
     C                     MOVEL*BLANK    $IAYTX           Customer Name
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     MOVEL@CN,003   $IO3TX           Explaination 50
     C                     Z-ADD*ZEROS    ZQ      50
     C           $IO3TX    CAT  @CN,004:ZQ$IO3TX    P      Explaination 50
      *================================================================
     CSR         UDEXIT    ENDSR
      /EJECT
     CSR         UESUBR    BEGSR
      *================================================================
      * Skip Duplicate Invoice Payment Records.
      *================================================================
     C                     Z-ADD*ZERO     $ICONB           Invoice Number
     C                     Z-ADD*ZERO     $IAIC3           Company Number
     C                     MOVEL*BLANK    $ICEST           Invoice Suffix
     C                     Z-ADD*ZERO     $IBGVA           Remaining Balan
     C                     Z-ADD*ZERO     $IANC7           A/R Customer Nu
     C                     MOVEL*BLANK    $IAYTX           Customer Name
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
      *================================================================
     CSR         UEEXIT    ENDSR
      /EJECT
     CSR         UFSUBR    BEGSR
      *================================================================
      * Process Invoice
      *================================================================
      * *** Calculate the Total Invoice Payment Amount ***
     C                     Z-ADD*ZERO     WN0004           LckBx Total Inv
      * RTV Total Invoice Amt  XF - A/R Lockbox Invoice  * 
     C                     CLEARPARC
     C                     Z-ADD$IBEC3    PABEC3           LckBx Number
     C                     Z-ADD$ILWDT    PALWDT           LckBx Deposit D
     C                     Z-ADD$IYWNX    PAYWNX           LckBx Deposit T
     C                     Z-ADD$IBFC3    PABFC3           LckBx Batch Num
     C                     Z-ADD$IBGC3    PABGC3           LckBx Item Numb
     C                     Z-ADD$INMC3    PANMC3           LckBx Invoice N
      *
     C                     CALL 'PDJAXFR'              90  RTV Total Invoi
     C                     PARM *BLANK    W0RTN   7
     C                     PARM           PARC             KEY: A/R Lockbo
     C           WN0004    PARM WN0004    WQ0001 112       LckBx Total Inv
      *
     C           *IN90     IFEQ '1'
      * Call to program ended in error
     C                     MOVEL'Y2U0032' W0RTN
     C                     MOVEL*BLANKS   W0CLPG 10
     C                     MOVEL'PDJAXFR' W0CLPG
      * Send message '*Error occured on CALL...'
     C                     MOVEL'Y2U0032' ZAMSID
     C                     MOVEL'Y2USRMSG'ZAMSGF
     C                     MOVELW0CLPG    ZAMSDA           Message data
     C                     EXSR ZASNMS
     C                     END
      * Error detected?
     C           W0RTN     IFNE *BLANK
     C                     SETON                     99    *
     C                     END
      * *** Get A/R Remaining Balance ***
     C                     Z-ADD$INMC3    $ICONB           Invoice Number
      * RTV Remaining/Open Inv RT - A/R Header  * 
     C                     EXSR SDRVGN
      * If resulting from Chargeback, multiply Invoice nbr x 10
      * CASE: CUR.Adjustment Type Code is Chargeback
     C           $IUHCD    IFEQ 'CB'                       *IF
     C           $INMC3    MULT 10        $ICONB           Invoice Number
     C                     END                             *FI
      * CASE: PGM.*Return code is *Normal
     C           W0RTN     IFEQ *BLANK                     *IF
      * A/R found.
     C                     EXSR UGSUBR                     A/R found.
     C                     ELSE
      * CASE: *OTHERWISE
      * A/R not found.                  - check on hold message
     C                     EXSR ULSUBR                     A/R not found.
     C                     END                             *FI
      *================================================================
     CSR         UFEXIT    ENDSR
      /EJECT
     CSR         UGSUBR    BEGSR
      *================================================================
      * A/R found.
      *================================================================
      * RTV Customer Name      RT - Customer  * 
     C                     EXSR SERVGN
      * CASE: PAR.Lckbx Total Inv Amt   USR is less or equal to zero
     C           WN0004    IFLE *ZERO                      *IF
      * Net Payment <= 0            - check on hold message
     C                     EXSR UHSUBR                     Net Payment <=
     C                     ELSE
      * CASE: CUR.Remaining Balance Due is less or equal to zero
     C           $IBGVA    IFLE *ZERO                      *IF
      * Remaining Balance <= 0      - check on hold message
     C                     EXSR UISUBR                     Remaining Balan
     C                     ELSE
      * CASE: PAR.Lckbx Total Inv Amt   USR GT CUR.Remaining Balance Due
     C           WN0004    IFGT $IBGVA                     *IF
      * Payment > Remaining Balance - check on hold message
     C                     EXSR UJSUBR                     Payment > Remai
     C                     ELSE
      * CASE: Check held for CB Tranaction.
      *  - c1 AND (c2 OR c3)
      *   |- c1    : PAR.LckBx Hold Flag is Yes
      *   |- c2    : CUR.Adjustment Type Code is Chargeback
      *   |- c3    : CUR.Adjustment Type Code is Accrual Chargeback
      *   '-
     C                     MOVEL'0'       Y0CX01  1
     C           $GADSX    IFEQ 'Y'                        *IF
     C                     MOVEL'0'       Y0CX02  1
     C           $IUHCD    IFEQ 'CB'                       *IF
     C           $IUHCD    OREQ 'ACB'                      *OR
     C                     MOVEL'1'       Y0CX02
     C                     END                             *FI
     C           Y0CX02    IFEQ '1'                        *IF
     C                     MOVEL'1'       Y0CX01
     C                     END                             *FI
     C                     END                             *FI
     C           Y0CX01    IFEQ '1'                        *IF
      * *** PK0333 ***
      * Charge Back held for verification.
     C                     EXSR UKSUBR                     Charge Back hel
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     END                             *FI
     C                     END                             *FI
     C                     END                             *FI
     C                     END                             *FI
      *================================================================
     CSR         UGEXIT    ENDSR
      /EJECT
     CSR         UHSUBR    BEGSR
      *================================================================
      * Net Payment <= 0            - check on hold message
      *================================================================
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     MOVEL@CN,005   $IO3TX           Explaination 50
     C                     Z-ADD*ZEROS    ZQ      50
     C           $IO3TX    CAT  @CN,006:ZQ$IO3TX    P      Explaination 50
      *================================================================
     CSR         UHEXIT    ENDSR
      /EJECT
     CSR         UISUBR    BEGSR
      *================================================================
      * Remaining Balance <= 0      - check on hold message
      *================================================================
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     MOVEL@CN,007   $IO3TX           Explaination 50
     C                     Z-ADD1         ZQ      50
     C           $IO3TX    CAT  @CN,008:ZQ$IO3TX    P      Explaination 50
      *================================================================
     CSR         UIEXIT    ENDSR
      /EJECT
     CSR         UJSUBR    BEGSR
      *================================================================
      * Payment > Remaining Balance - check on hold message
      *================================================================
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     MOVEL@CN,009   $IO3TX           Explaination 50
     C                     Z-ADD*ZEROS    ZQ      50
     C           $IO3TX    CAT  @CN,010:ZQ$IO3TX    P      Explaination 50
      *================================================================
     CSR         UJEXIT    ENDSR
      /EJECT
     CSR         UKSUBR    BEGSR
      *================================================================
      * Charge Back held for verification.
      *================================================================
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     MOVEL@CN,011   $IO3TX           Explaination 50
     C                     Z-ADD*ZEROS    ZQ      50
     C           $IO3TX    CAT  @CN,012:ZQ$IO3TX    P      Explaination 50
      *================================================================
     CSR         UKEXIT    ENDSR
      /EJECT
     CSR         ULSUBR    BEGSR
      *================================================================
      * A/R not found.                  - check on hold message
      *================================================================
     C                     Z-ADD*ZERO     $ICONB           Invoice Number
     C                     MOVEL*BLANK    $IO3TX           Explaination 50
     C                     MOVEL@CN,013   $IO3TX           Explaination 50
     C                     Z-ADD1         ZQ      50
     C           $IO3TX    CAT  @CN,002:ZQ$IO3TX    P      Explaination 50
      *================================================================
     CSR         ULEXIT    ENDSR
      /EJECT
     CSR         UMSUBR    BEGSR
      *================================================================
      * Load Explaination.
      *================================================================
      * CASE: CUR.Lckbx Invoice Amount  SUM GT PAR.LckBx Check Amount
     C           $JZ1VA    IFGT $GZZVA                     *IF
      * Lockbox Invoice Amounts > Check Amount.
     C                     EXSR UNSUBR                     Lockbox Invoice
     C                     ELSE
      * CASE: CUR.Lckbx Invoice Amount  SUM NE PAR.LckBx Check Amount
     C           $JZ1VA    IFNE $GZZVA                     *IF
      * Warning Invoice Amounts not equal to Check Amount.
     C                     EXSR UOSUBR                     Warning Invoice
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL*BLANK    $JO3TX           Explaination 50
     C                     Z-ADD*ZERO     $JZ8VA           LckBx Inv/Chk D
     C                     MOVEL'N'       WN0003           Dsp Difference
     C                     END                             *FI
     C                     END                             *FI
      *================================================================
     CSR         UMEXIT    ENDSR
      /EJECT
     CSR         UNSUBR    BEGSR
      *================================================================
      * Lockbox Invoice Amounts > Check Amount.
      *================================================================
     C                     MOVEL*BLANK    $JO3TX           Explaination 50
     C                     MOVEL@CN,014   $JO3TX           Explaination 50
     C                     Z-ADD*ZEROS    ZQ      50
     C           $JO3TX    CAT  @CN,015:ZQ$JO3TX    P      Explaination 50
     C           $GZZVA    SUB  $JZ1VA    $JZ8VA           LckBx Inv/Chk D
     C                     MOVEL'Y'       WN0003           Dsp Difference
      *================================================================
     CSR         UNEXIT    ENDSR
      /EJECT
     CSR         UOSUBR    BEGSR
      *================================================================
      * Warning Invoice Amounts not equal to Check Amount.
      *================================================================
     C                     MOVEL*BLANK    $JO3TX           Explaination 50
     C                     MOVEL@CN,016   $JO3TX           Explaination 50
     C                     Z-ADD*ZEROS    ZQ      50
     C           $JO3TX    CAT  @CN,017:ZQ$JO3TX    P      Explaination 50
     C           $GZZVA    SUB  $JZ1VA    $JZ8VA           LckBx Inv/Chk D
     C                     MOVEL'Y'       WN0003           Dsp Difference
      *================================================================
     CSR         UOEXIT    ENDSR
      /EJECT
     CSR         UPSUBR    BEGSR
      *================================================================
      * Flag CB,WO totals for Display.
      *================================================================
      * Write Off
      * CASE: CUR.Lckbx Invoice Amt WO  SUM is equal to zero
     C           $JZ3VA    IFEQ *ZERO                      *IF
     C                     MOVEL'N'       WN0001           Dsp Write Off
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL'Y'       WN0001           Dsp Write Off
     C                     END                             *FI
      * Charge Back
      * CASE: CUR.Lckbx Invoice Amt CB  SUM is equal to zero
     C           $JZ4VA    IFEQ *ZERO                      *IF
     C                     MOVEL'N'       WN0002           Dsp Charge Back
     C                     ELSE
      * CASE: *OTHERWISE
     C                     MOVEL'Y'       WN0002           Dsp Charge Back
     C                     END                             *FI
      *================================================================
     CSR         UPEXIT    ENDSR
      /EJECT
     CSR         UQSUBR    BEGSR
      *================================================================
      * Load Output Parameters.
      *================================================================
     C                     Z-ADD$JZ1VA    WUZ1VA           LckBx Invoice A
     C                     Z-ADD$JZ3VA    WUZ3VA           LckBx Invoice A
     C                     Z-ADD$JZ4VA    WUZ4VA           LckBx Invoice A
     C                     Z-ADD$JACVL    WUAHVL           LckBx Cnt Mnl T
      *================================================================
     CSR         UQEXIT    ENDSR
      /EJECT
     CSR         URSUBR    BEGSR
      *================================================================
      * Calculate Held Amounts.
      *================================================================
     C                     ADD  WUZ1VA    $KALVL           LckBx Held Paym
     C                     ADD  WUZ3VA    $KAQVL           LckBx Held WO A
     C                     ADD  WUZ4VA    $KARVL           LckBx Held CB A
     C                     ADD  $GZZVA    $KAFVL           LckBx Held Doll
      *================================================================
     CSR         UREXIT    ENDSR
      /EJECT
     CSR         USSUBR    BEGSR
      *================================================================
      * Calculate Released Amounts.
      *================================================================
     C                     ADD  WUZ1VA    $KAMVL           LckBx Rlsd Paym
     C                     ADD  WUZ3VA    $KAOVL           LckBx Rlsd WO A
     C                     ADD  WUZ4VA    $KAPVL           LckBx Rlsd CB A
     C                     ADD  $GZZVA    $KAKVL           LckBx Rlsd Doll
      *================================================================
     CSR         USEXIT    ENDSR
      /EJECT
     CSR         UTSUBR    BEGSR
      *================================================================
      * Calculate Total Amounts.
      *================================================================
     C                     ADD  WUZ1VA    $KZ1VA           LckBx Invoice A
     C                     ADD  WUZ3VA    $KZ3VA           LckBx Invoice A
     C                     ADD  WUZ4VA    $KZ4VA           LckBx Invoice A
     C                     ADD  $GZZVA    $KAEVL           LckBx Check Tot
      *================================================================
     CSR         UTEXIT    ENDSR
      /EJECT
     CSR         UUSUBR    BEGSR
      *================================================================
      * Calculate Difference Amounts.
      *================================================================
      * Calculate Held Difference
      * CUR.LckBx Held Difference USR =
      *    *COMPUTE (x1 - (x2 + x3 + x4))
      * x1    : CUR.LckBx Held Dollars    SUM
      * -     : PGM.*Synon (17,7) work field
      * x2    : CUR.LckBx Held Payments   SUM
      * +     : PGM.*Synon (17,7) work field
      * x3    : CUR.LckBx Held WO Amounts SUM
      * +     : PGM.*Synon (17,7) work field
      * x4    : CUR.LckBx Held CB Amounts SUM
     C           $KALVL    ADD  $KAQVL    W0WD02           *Synon (17,7) w
     C           W0WD02    ADD  $KARVL    W0WD01           *Synon (17,7) w
     C           $KAFVL    SUB  W0WD01    W0WD00           *Synon (17,7) w
     C                     Z-ADDW0WD00    $KAIVL           LckBx Held Diff
      * Calculate Rlsd Difference
      * CUR.LckBx Rlsd Difference USR =
      *    *COMPUTE (x1 - (x2 + x3 + x4))
      * x1    : CUR.LckBx Rlsd Dollars    SUM
      * -     : PGM.*Synon (17,7) work field
      * x2    : CUR.LckBx Rlsd Payments   SUM
      * +     : PGM.*Synon (17,7) work field
      * x3    : CUR.LckBx Rlsd WO Amounts SUM
      * +     : PGM.*Synon (17,7) work field
      * x4    : CUR.LckBx Rlsd CB Amounts SUM
     C           $KAMVL    ADD  $KAOVL    W0WD02           *Synon (17,7) w
     C           W0WD02    ADD  $KAPVL    W0WD01           *Synon (17,7) w
     C           $KAKVL    SUB  W0WD01    W0WD00           *Synon (17,7) w
     C                     Z-ADDW0WD00    $KAJVL           LckBx Rlsd Diff
      * Calculate Tot Difference
      * CUR.LckBx Difference      USR =
      *    *COMPUTE (x1 - (x2 + x3 + x4))
      * x1    : CUR.LckBx Check Total     SUM
      * -     : PGM.*Synon (17,7) work field
      * x2    : CUR.LckBx Invoice Amount  SUM
      * +     : PGM.*Synon (17,7) work field
      * x3    : CUR.LckBx Invoice Amt WO  SUM
      * +     : PGM.*Synon (17,7) work field
      * x4    : CUR.LckBx Invoice Amt CB  SUM
     C           $KZ1VA    ADD  $KZ3VA    W0WD02           *Synon (17,7) w
     C           W0WD02    ADD  $KZ4VA    W0WD01           *Synon (17,7) w
     C           $KAEVL    SUB  W0WD01    W0WD00           *Synon (17,7) w
     C                     Z-ADDW0WD00    $KANVL           LckBx Differenc
      *================================================================
     CSR         UUEXIT    ENDSR
      /EJECT
     CSR         XDVC2T    BEGSR
      *================================================================
      * Convert internal to external date format
      *================================================================
      * Map according to date format
     C                     Z-ADD0         XDEX01           CC
     C           XDDTFM    IFEQ 'DMY'
     C                     Z-ADDXDINDD    XDEX02           DD
     C                     Z-ADDXDINMM    XDEX03           MM
     C                     Z-ADDXDINYY    XDEX04           YY
     C                     ELSE
     C           XDDTFM    IFEQ 'MDY'
     C                     Z-ADDXDINMM    XDEX02           MM
     C                     Z-ADDXDINDD    XDEX03           DD
     C                     Z-ADDXDINYY    XDEX04           YY
     C                     ELSE
      * YMD format
     C                     Z-ADDXDINYY    XDEX02           YY
     C                     Z-ADDXDINMM    XDEX03           MM
     C                     Z-ADDXDINDD    XDEX04           DD
     C                     END
     C                     END
      *================================================================
     CSR         XDVC2E    ENDSR
      /EJECT
     CSR         ZASNMS    BEGSR
      *================================================================
      * Send message to program's message queue
      *================================================================
     C           ZAPGMQ    IFEQ *BLANK
     C                     MOVEL##PGM     ZAPGMQ
     C                     END
     C                     CALL 'Y2SNMGC'
     C                     PARM           ZAPGMQ 10        Program queue
     C                     PARM           ZAPGRL  5        Rel queue
     C                     PARM           ZAMSID  7        Message ID
     C                     PARM           ZAMSGF 10        Message file
     C                     PARM           ZAMSDA           Message data
     C                     PARM           ZAMSTP  7        Message type
      * Clear all fields for default mechanism next time
     C                     MOVEL*BLANK    ZAPGMQ
     C                     MOVEL*BLANK    ZAPGRL
     C                     MOVEL*BLANK    ZAMSID
     C                     MOVEL*BLANK    ZAMSGF
     C                     MOVEL*BLANK    ZAMSDA
     C                     MOVEL*BLANK    ZAMSTP
      *================================================================
     CSR         ZAEXIT    ENDSR
      /EJECT
     CSR         ZBINIT    BEGSR
      *================================================================
      * PRT Print Inv for Chks PO: Initialise
      *================================================================
      * USER: Initialize program
     C                     Z-ADD*ZERO     WN0005           Save Invoice Nu
     C                     Z-ADD*ZERO     WUZ1VA           LckBx Invoice A
     C                     Z-ADD*ZERO     WUZ3VA           LckBx Invoice A
     C                     Z-ADD*ZERO     WUZ4VA           LckBx Invoice A
     C                     Z-ADD*ZERO     WUAHVL           LckBx Cnt Mnl T
      *================================================================
     CSR         ZBEXIT    ENDSR
      /EJECT
     CSR         ZXEXPG    BEGSR
      *================================================================
      * Exit program
      *================================================================
     C                     MOVEL*BLANK    P0RTN
     C                     EXSR ZYEXPG
      *================================================================
     CSR         ZXEXIT    ENDSR
      /EJECT
     CSR         ZYEXPG    BEGSR
      *================================================================
      * Exit program: Direct
      *================================================================
      * Terminate program
     C                     SETON                     LR
      *
      * Exit program
     C                     RETRN
      *
      *================================================================
     CSR         ZYEXIT    ENDSR
      /EJECT
     CSR         ZZINIT    BEGSR
      *================================================================
      * Initialisation
      *================================================================
     C           W0ICL     IFEQ *BLANK
     C                     MOVEL'Y'       W0ICL   1        *Initial call
     C                     ELSE
     C                     MOVEL'N'       W0ICL
     C                     END
     C                     MOVE *BLANK    P0RTN
     C                     MOVE *BLANK    W0RTN   7
     C                     MOVEL*BLANK    W0RSL   1
     C                     MOVEL*BLANK    W0RSF   1
     C                     MOVEL*ZEROS    W0RTW   90
     C                     MOVEL'400'     W0ENV   3
      * Clear all neither parameters
     C                     Z-ADD*ZERO     P2ZXVA           LckBx Deposit A
     C                     MOVEL*BLANK    P3DNCD           Application Cod
      *
      * Retrieve job attributes
     C                     CALL 'Y2RTJCR'
     C                     PARM           PGMDS
      * Setup job date/time
     C                     Z-ADD##SD7     ##JDT
     C                     TIME           ##JTM
      * Update screen time
     C                     TIME           ##TME   60
      * Define work field Description
     C                     MOVEL*BLANK    WUAUNA 30
      * Define work field USR Description 40
     C                     MOVEL*BLANK    WUDSC4 40
      * Define work field USR Description 40   2
     C                     MOVEL*BLANK    WUDE40 40
      * Initialize KEY fields.
     C                     MOVEL*LOVAL    MCBEC3           LckBx Number
     C                     MOVEL*LOVAL    MCLWDT           LckBx Deposit D
     C                     MOVEL*LOVAL    MCYWNX           LckBx Deposit T
     C                     MOVEL*LOVAL    MCBFC3           LckBx Batch Num
     C                     MOVEL*LOVAL    MCBGC3           LckBx Item Numb
      * Define work field CD7 Ext Numeric Key
     C                     MOVEL*BLANK    WUEOCD  7
      * Define work field CD3 Ext Numeric Key
     C                     MOVEL*BLANK    WUDMCD  3
      * Define work field LckBx Invoice Amount  SUM
     C                     Z-ADD*ZERO     WUZ1VA 112
      * Define work field LckBx Invoice Amt WO  SUM
     C                     Z-ADD*ZERO     WUZ3VA 112
      * Define work field LckBx Invoice Amt CB  SUM
     C                     Z-ADD*ZERO     WUZ4VA 112
      * Define work field LckBx Cnt Mnl Trans   SUM
     C                     Z-ADD*ZERO     WUAHVL 110
      * Initialize KEY fields.
     C                     MOVEL*LOVAL    MDBEC3           LckBx Number
     C                     MOVEL*LOVAL    MDLWDT           LckBx Deposit D
     C                     MOVEL*LOVAL    MDYWNX           LckBx Deposit T
     C                     MOVEL*LOVAL    MDBFC3           LckBx Batch Num
     C                     MOVEL*LOVAL    MDBGC3           LckBx Item Numb
     C                     MOVEL*LOVAL    MDNMC3           LckBx Invoice N
     C                     MOVEL*LOVAL    MDUHCD           Adjustment Type
      * Define *Synon program work fields
     C                     Z-ADD*ZEROS    W0WD02 177       *Synon (17,7) w
     C                     Z-ADD*ZEROS    W0WD01 177       *Synon (17,7) w
     C                     Z-ADD*ZEROS    W0WD00 177       *Synon (17,7) w
      * Move main file information to JOB context
     C                     MOVE @1FFL     ZZFFL  10        Main file name
     C                     MOVE @1FLB     ZZFLB  10        Main file lib
     C                     MOVE @1FMB     ZZFMB  10        Main file mbr
     C                     MOVE ZZFFL     @1FFL  10
     C                     MOVE ZZFLB     @1FLB  10
     C                     MOVE ZZFMB     @1FMB  10
     C                     CALL 'Y2QLVNR'
     C                     PARM           ZZFFL  10
     C                     PARM           ZZFLB  10
     C                     PARM           ZZFQL  21        LIBRARY/FILE
      * Dummy move for compiler
     C                     MOVE '0'       @CN#,1
     C                     MOVEL'N'       W0PMT   1
      * Declare initial value data areas
      * *DTAARA = *COMPANY N
     C           *NAMVAR   DEFN YYCOTXA   $ACMP
     C                     IN   *NAMVAR
      *................................................................
     C                     MOVEL##PGM     $APGM
     C                     MOVEL##USR     $AUSR
     C                     MOVEL*BLANK    W0PFM   1
     C                     Z-ADD*ZERO     @$WRK   40
     C                     Z-ADD*ZERO     @$HDL   40
     C                     Z-ADD*ZERO     @$CLN
     C                     Z-ADD*ZERO     @$PGN
      * Adjust page length and overflow as necessary
     C           @$PGL     SUB  2         W0PGL   40
     C           @$OFL     IFGE W0PGL
     C           W0PGL     SUB  2         W0OFL   40
     C                     ELSE
     C                     Z-ADD@$OFL     W0OFL
     C                     END
      * Clear overflow indicator
     C                     SETOF                     97
      * Request new page
     C                     MOVEL'Y'       W0NEWP  1
      * USER: Initialize program
      * OMS036 RMC 4/6/05 Changes for multiple lockbox per day: remove
      *            company and added deposit time to key
     C                     MOVEL*BLANK    P3DNCD           Application Cod
     C                     MOVEL'A/R'     P3DNCD           Application Cod
      * VAL Rtv & Ctr Prt Hdg  IF
      * SET Setup Prt Headings IF
      * RTV Applic. Group Desc RT - Application  * 
     C                     EXSR SARVGN
     C                     MOVEL*BLANK    WUDSC4           USR Description
     C                     MOVELWUAUNA    WUDSC4           USR Description
      * Center Txt String 40 - /UT User Source  * 
     C                     MOVEAWUDSC4    UCT              LOAD ARRAY
     C                     Z-ADD40        UX      20       SET COUNTER
     C           UX        DOWGT0
     C           UCT,UX    IFEQ ' '
     C                     SUB  1         UX
     C                     ELSE
     C                     Z-ADDUX        UXH     20
     C                     Z-ADD0         UX
     C                     END
     C                     END
     C           40        SUB  UXH       UX
     C           UX        DIV  2         UX
     C           UX        IFGT 0
     C                     MOVE *BLANKS   UCT
     C                     MOVEAWUDSC4    UCT,UX
     C                     END
     C                     MOVEAUCT       WUDE40           LOAD OUTPUT
      * MOV Appl Desc to PrtCo US - /UT User Source  * 
     C                     MOVE WUDE40    $ACMP
      * Obtain system date format
     C           *NAMVAR   DEFN Y2DTFMA   XDDTFM  3
     C                     IN   XDDTFM
      *================================================================
     CSR         ZZEXIT    ENDSR
** @CN
00001 *** No invoice detail,
00002 check put on hold.
00003 *** Lockbox Invoice is bl
00004 ank, check put on hold.
00005 *** Total payment <= zero
00006 , check put on hold.
00007 *** Remaining balance <=
00008 zero, check put on hold.
00009 *** Total payment > A/R i
00010 nvoice,check put on hold.
00011 *** Charge back verificat
00012 ion, check put on hold.
00013 *** Invoice not found,
00014 *** Check < invoice amoun
00015 ts, check put on hold.
00016 *** Check not = to invoic
00017 es, check put on hold.
00018 *** Warning: check total
00019 not equal to deposit amt
