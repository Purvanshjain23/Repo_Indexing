// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKYSPVR
// ?Date: 14.08.2025 Time: 02:51:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

//?USER: Load screen

// DTL.Confirm               USR = CND.Yes
DTL.Confirm_USR = 'Y';

//?USER: User defined action

CASE;

// IF DTL.Confirm               USR is Yes
IF DTL.Confirm_USR = 'Y';

EXECUTE FUNCTION(Rtv/Dlt TH            RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1171190;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header) TYPE(DLTOBJ) FILE(PKA1CPP)               AB1101745;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
}


EXECUTE FUNCTION(Rtv/Dlt f/yrly purge  RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1164076;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header Comm) TYPE(DLTOBJ) FILE(PKA4CPP)          AB1113203;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.THC_Comment_Line);
}


EXECUTE FUNCTION(Rtv/Dlt f/yrly purge  RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1164084;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Scale Ticke) TYPE(DLTOBJ) FILE(PKB3CPP)          AB1113771;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
}


EXECUTE FUNCTION(Rtv/DLT Ttt SclMsg     RT) TYPE(RTVOBJ) FILE(PKDUCPP)          AB1195501;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Scl Tck Msg DO) TYPE(DLTOBJ) FILE(PKDUCPP)          AB1194812;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(DB1.TSTM_Message_Seq);
}


//?Update Pen if TDs have not been Sent to kill
EXECUTE FUNCTION(Rtv TD to ChgPen file RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1171127;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 //?Reverse head from Pen if not Sent to Kill
 CASE;

 // IF DB1.TDP Process Code is Driven to Kill/Resold
 IF DB1.TDP_Process_Code = 'K';

 //?Reverse head from Pen if not Sent to Kill
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TD Pen Head = DB1.TD Pen Head * CON.-1 *
 WRK.TD_Pen_Head = DB1.TD_Pen_Head * -1;

 // WRK.TD Yard Dead = DB1.TD Yard Dead * CON.-1 *
 WRK.TD_Yard_Dead = DB1.TD_Yard_Dead * -1;

 EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(WRK.TD_Pen_Head);
 PARAMETER(WRK.TD_Yard_Dead);
 {
  //?USER: Process Data record

  // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
  WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

  // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
  WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.Pen_Current_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Dlt f/yrly purge  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1164071;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Detail) TYPE(DLTOBJ) FILE(PKA2CPP)               AB1101752;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
}


//?4/12/2006  slm Add the Tattoo header ext
EXECUTE FUNCTION(Rtv/Dlt f/yrly purge  RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1271976;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Hdr Ext    DO) TYPE(DLTOBJ) FILE(PKDNCPP)           AB1271812;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
}


//?Update the BOL and BOH if head had been received.
CASE;

// IF PAR.TH Head Received is Not Zero
IF PAR.TH_Head_Received <> *ZERO;

//?Update the Buy Order Load: Reverse the Head Received and Live Wgt
// WRK.TH Head Received = PAR.TH Head Received * CON.-1 *
WRK.TH_Head_Received = PAR.TH_Head_Received * -1;

// WRK.TH Live Wgt = PAR.TH Live Wgt * CON.-1 *
WRK.TH_Live_Wgt = PAR.TH_Live_Wgt * -1;

EXECUTE FUNCTION(Rtv/Chg Bol Hd rcvd   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1184135;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Live_Wgt);
{
 //?USER: Process Data record

 // WRK.BOL Head Received = DB1.BOL Head Received + PAR.BOL Head Received
 WRK.BOL_Head_Received = DB1.BOL_Head_Received + PAR.BOL_Head_Received;

 // WRK.BOL Live Wgt Received = DB1.BOL Live Wgt Received + PAR.BOL Live Wgt Receive
 WRK.BOL_Live_Wgt_Received = DB1.BOL_Live_Wgt_Received + PAR.BOL_Live_Wgt_Received;

 //?Calculate freight based on the unit of measure
 // WRK.BOL Freight Amt = DB1.BOL Freight Amt
 WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

 EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.Tattoo_is_paid_Usr);
 PARAMETER(WRK.Held_Over_Records_Y_N);
 PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
 {
  //?USER: Initialize routine

  // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
  PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

  // PAR.Held Over Records Y/N = CND.No
  PAR.Held_Over_Records_Y_N = 'N';

  // PAR.Tattoo is paid Usr = CND.No
  PAR.Tattoo_is_paid_Usr = 'N';

  //?USER: Process Data record

  //?If one tattoo is paid but freight was spread then accumulate
  //?what is paid, for held over respread problem
  //?when this probelm goes away, then just flag that there is one paid
  CASE;

  // IF DB1.TH Payment Sts is Paid Anything
  IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

  //?CHECK IF FREIGHT AMOUNT IS IN RECORD
  CASE;

  // IF DB1.TH Freight Amount is Not Zeros
  IF DB1.TH_Freight_Amount <> *ZERO;

  // PAR.Tattoo is paid Usr = CND.Yes
  PAR.Tattoo_is_paid_Usr = 'Y';

  ENDIF;

  // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
  PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?CHECK FOR HELD OVER RECORD
  CASE;

  // IF DB1.TH Held Over Record is Yes
  IF DB1.TH_Held_Over_Record = 'Y';

  // OR DB1.TH Held Over is greater than 0
  OR DB1.TH_Held_Over > *ZERO;

  // PAR.Held Over Records Y/N = CND.Yes
  PAR.Held_Over_Records_Y_N = 'Y';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF DB1.BOL Freight Allocation is Freight is Allocated
 IF DB1.BOL_Freight_Allocation = 'Y';

 // AND WRK.Tattoo is paid Usr is Yes
 AND WRK.Tattoo_is_paid_Usr = 'Y';

 // IF DB1.BOL Trucker Payment Sts is Paid Trucker
 IF DB1.BOL_Trucker_Payment_Sts = 'PT';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc Freight Amt       XF.
 CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);

 ENDIF;

 CASE;

 // IF WRK.BOL Freight Amt is Not Zeros
 IF WRK.BOL_Freight_Amt <> *ZERO;

 // AND WRK.BOL Head Received is Greater then Zero
 AND WRK.BOL_Head_Received > *ZERO;

 // AND DB1.BOL Trucker Payment Sts is Blank
 AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

 // WRK.BOL Trucker Payment Sts = CND.Select Trucker
 WRK.BOL_Trucker_Payment_Sts = 'ST';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
 WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

 ENDIF;

 EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
 PARAMETER(DB1.BOL_Pln_Delv_End_Time);
 PARAMETER(DB1.BOL_Pln_Head_Delv);
 PARAMETER(DB1.BOL_Shipped_Wgt);
 PARAMETER(DB1.BOL_Pln_Delv_Date);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Trucker_Payment_Sts);
 PARAMETER(DB1.BOL_Trucker_Check_Number);
 PARAMETER(DB1.BOL_Trucker_Check_Date);
 PARAMETER(DB1.BOL_AP_Voucher);
 PARAMETER(DB1.BOL_Trailer);
 PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
 PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
 PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Open the Buy Order Header Status if the Head Received goes to 0
EXECUTE FUNCTION(Rtv BOL Head Totals   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1136322;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.BOL_Pln_Head_Delv);
PARAMETER(WRK.BOL_Head_Received);
{
 //?USER: Process Data record

 // PAR.BOL Pln Head Delv = PAR.BOL Pln Head Delv + DB1.BOL Pln Head Delv
 PAR.BOL_Pln_Head_Delv = PAR.BOL_Pln_Head_Delv + DB1.BOL_Pln_Head_Delv;

 // PAR.BOL Head Received = PAR.BOL Head Received + DB1.BOL Head Received
 PAR.BOL_Head_Received = PAR.BOL_Head_Received + DB1.BOL_Head_Received;

}


CASE;

// IF WRK.BOL Head Received is Equals 0
IF WRK.BOL_Head_Received = *ZERO;

EXECUTE FUNCTION(Rtv/Chg BOH Status     RT) TYPE(RTVOBJ) FILE(PKAWCPP)          AB1145779;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER('O');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg BOH Status        CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1145821;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOH_Buy_Order_Date);
 PARAMETER(DB1.BOH_Kill_Date);
 PARAMETER(DB1.BOH_Payment_Type);
 PARAMETER(DB1.BOH_Buy_Order_Type);
 PARAMETER(DB1.BOH_Market_Add_Deduct);
 PARAMETER(PAR.BOH_Status);
 PARAMETER(DB1.BOH_Delv_Plan_Printed);
 PARAMETER(DB1.BOH_Quote_Price_Type);
 PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.PPWS_Company_Number);
 PARAMETER(DB1.CW_Year);
 PARAMETER(DB1.CW_Week_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.PO_Option_Code);
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Del Tattoo Def    RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1199889;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Defect     DO) TYPE(DLTOBJ) FILE(PKDZREP)           AB1197900;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DF_Defect_Code);
}


// IF *OTHERWISE
IF *OTHERWISE;

//?History was created in calling excext; Delete it here if confirm 'N'
EXECUTE FUNCTION(Rtv/Dlt TH History    RT) TYPE(RTVOBJ) FILE(PKDHREP)           AB1171213;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header Hist) TYPE(DLTOBJ) FILE(PKDHREP)          AB1171108;
 PARAMETER(DB1.THH_company_number);
 PARAMETER(DB1.THH_Buy_Order_Number);
 PARAMETER(DB1.THH_Load_Number);
 PARAMETER(DB1.THH_Tattoo_Number);
 PARAMETER(DB1.THH_Kill_Date);
}


EXECUTE FUNCTION(RTV/DLT THH Comments  RT) TYPE(RTVOBJ) FILE(PKDIREP)           AB1171235;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Header Hist) TYPE(DLTOBJ) FILE(PKDIREP)          AB1171091;
 PARAMETER(DB1.THH_company_number);
 PARAMETER(DB1.THH_Buy_Order_Number);
 PARAMETER(DB1.THH_Load_Number);
 PARAMETER(DB1.THH_Tattoo_Number);
 PARAMETER(DB1.THH_Kill_Date);
 PARAMETER(DB1.THHC_Comment_Line);
}


ENDIF;

