// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POI1PFR
// ?Date: 14.08.2025 Time: 12:06:11
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?***** Change Log and Comments
//?*****
//?** 06/18/2007 LJB DLY029
//?** Prompt criteria changed. Accrual Type was added as a required
//?** field and Accrual Code is now optional. Ledger Accrual Y/N
//?** was added to the prompt as a required field. This field
//?** must match the same field in the History Detail Accrual file
//?** in order for it to be included in the report.
//?** Skip additional selects if record selected = No
//?*****
//?3/07/05 RMC - accum extended amt by order/order seq -- not by sec seq
//?*****
//?101204 slm Add verification of equal to company to select
//?*****
//?...include CM DB as of 3/31/04
//?*****
//?7/30/02  Get Accrual Extended Amt by Accr code from History Dtl Accrl
//?  instead of using the Automatic Accrual Amt from Sales Hist
//?  because there will be a new automatic accrual possible for Brokerage
//?USER: Record selection processing

//?101204 slm Add verification of equal to company to select
//?** Select by Company Number
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND DB1.Company Number NE PAR.Company Number
AND DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Skip additional selects if record selected = No
//?** If Record Selected, test by Actual Shipped Date
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Select by Actual Shipped Date
CASE;

// IF DB1.Actual Shipped Date GT PAR.USR To Date
IF DB1.Actual_Shipped_Date > PAR.USR_To_Date;

// OR DB1.Actual Shipped Date LT PAR.USR From Date
OR DB1.Actual_Shipped_Date < PAR.USR_From_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** If Record Selected, test Customer Number
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Select Customer Number if requested
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

// AND PAR.Ship To Customer NE DB1.Ship To Customer
AND PAR.Ship_To_Customer <> DB1.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** If Record Selected, test Accrual Type
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** par.quality level = Accrual Type
//?** par.item type code = Accrual code
//?** par.status - y/n  = Ledger Accrual Y/N
//?** Retrieve Accrual Rate by Accrual Type
CASE;

// IF PAR.Quality Level is Entered
IF PAR.Quality_Level <> *BLANK;

//?7/30/02
//?3/07/05 RMC - accum extended amt by order/order seq -- not by sec seq
//?** Retrieve by Accrual Type
EXECUTE FUNCTION(Rtv Accrual by Type   RT) TYPE(RTVOBJ) FILE(PDICCPP)           AC1829268;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(LCL.Extended_Amount);
PARAMETER(PAR.Quality_Level);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 // PAR.Extended Amount = CON.*ZERO
 PAR.Extended_Amount = *ZERO;

 // PAR.Accrual Rate = CND.equal to zero
 PAR.Accrual_Rate = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?SEL: Ledgered Accrual
 CASE;

 // IF PAR.Ledger Accrual (Y/N) NE DB1.HDA Ledger Accrual Y/N
 IF PAR.Post_to_G_L_Y_N <> DB1.HDA_Post_to_G_L_Y_N;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL: Accrual Code
 CASE;

 // IF PAR.Accrual Code is Entered
 IF PAR.Accrual_Code <> *BLANK;

 // AND PAR.Accrual Code NE DB1.Accrual Code
 AND PAR.Accrual_Code <> DB1.Accrual_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Extended Amount = PAR.Extended Amount + DB1.Extended Amount
 PAR.Extended_Amount = PAR.Extended_Amount + DB1.Extended_Amount;

 // PAR.Accrual Rate = DB1.Accrual Rate
 PAR.Accrual_Rate = DB1.Accrual_Rate;

 ENDIF;

 //?11/25/11 PKD Below code was not working.
}


CASE;

// IF LCL.Accrual Rate is equal to zero
IF LCL.Accrual_Rate = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.USR From Date = PAR.USR From Date
TOP_USR_From_Date = PAR.USR_From_Date;

// TOP.USR To Date = PAR.USR To Date
TOP_USR_To_Date = PAR.USR_To_Date;

// TOP.Accrual Code = PAR.Item Type Code
TOP_Accrual_Code = PAR.Item_Type_Code;

// TOP.Accrual Type = PAR.Quality Level
TOP_Accrual_Type = PAR.Quality_Level;

// TOP.Report Type = PAR.Report Type USR
TOP_Report_Type = PAR.Report_Type_USR;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Report Type
TOP_Condition_Desc_1_USR = RTVCND(TOP_Report_Type);

// TOP.Ship To Customer = PAR.Ship To Customer
TOP_Ship_To_Customer = PAR.Ship_To_Customer;

// TOP.Ledger Accrual (Y/N) = PAR.Status - Y or N
TOP_Post_to_G_L_Y_N = PAR.Status_Y_or_N;

//?** Default Company Name to *ALL if co# is zero
CASE;

// IF TOP.Company Number is Equal to zero
IF TOP_Company_Number = *ZERO;

// TOP.Company Name = CON.*All
TOP_Company_Name = *All;

//?** Default Company Name to *ALL if co# is zero
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Default Ship To Name to *ALL if Ship To Cust# is zero
CASE;

// IF TOP.Ship To Customer is not equal to zero
IF TOP_Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Ship_To_Customer);
PARAMETER(TOP_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Default Ship To Name to *ALL if Ship To Cust# is zero
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Ship To Name = CON.*ALL
TOP_Ship_To_Name = *ALL;

ENDIF;

//?** Move blanks to accrual code descript if no accrual code
CASE;

// IF TOP.Accrual Code is Entered
IF TOP_Accrual_Code <> *BLANK;

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(TOP_Accrual_Description_DRV);
PARAMETER(TOP_Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Move blanks to accrual code descript if no accrual code
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Accrual Description DRV = CON.*ALL
TOP_Accrual_Description_DRV = *ALL;

ENDIF;

//?** Move *ALL to Accr Type descript if no accr type entered
CASE;

// IF TOP.Accrual Type is *ALL values
IF TOP_Accrual_Type = 'TF'/'CM'/'DA'/'CR'/'TX'/'BG'/'PR'/'IF'/'PF'/'PC'/'FA'/'SA'/'CC'             +
/'SF'/'WF'/'CF'/'LF'/'PD';

// TOP.Accrual Description = Condition name of TOP.Accrual Type
TOP_Accrual_Description = RTVCND(TOP_Accrual_Type);

//?** Move *ALL to Accr Type descript if no accr type entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Accrual Description = CON.*ALL
TOP_Accrual_Description = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Ship To Name header format

CASE;

IF NEW Ship_To_Customer;
// SUPPRESSED PRINT Ship To Customer header format

ENDIF;

// SUPPRESSED PRINT Actual Shipped Date header format

// SUPPRESSED PRINT Load ID header format

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

// CUR.Accrual Rate = LCL.Accrual Rate
CUR.Accrual_Rate = LCL.Accrual_Rate;

// CUR.Realized Ledger Amount = LCL.Extended Amount
CUR.Ledgrd_Trd_Fund_Accrl_Amt = LCL.Extended_Amount;

//?reverse sign if credit memo and positive   3/29/05 RMC
CASE;

// IF CUR.Realized Ledger Amount is Less than zero
IF CUR.Ledgrd_Trd_Fund_Accrl_Amt < *ZERO;

// AND CUR.Weight Billed is Greater than zero
AND CUR.Weight_Billed > *ZERO;

// CUR.Weight Billed = CON.*ZERO - CUR.Weight Billed
CUR.Weight_Billed = *ZERO - CUR.Weight_Billed;

ENDIF;

CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?** The following determination is now made in the History Detail
//?** Accrual routine in the Record Selected section   06/19/2007
//?USER: Process after print of detail format

NXT.Weight_1_1_SUM = SUM(CUR.Weight_Billed);

NXT.Accrual_Amount_SUM = SUM(LCL.Extended_Amount);

//?USER: Print required level totals

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Accounting Company Number totals format

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

ENDIF;

CASE;

IF NEW Order_Number;
CASE;

// IF PAR.Report Type USR is Detail
IF PAR.Report_Type_USR = 'D';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

ENDIF;

CASE;

IF NEW Load_ID;
// SUPPRESSED PRINT Load ID totals format

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

ENDIF;

CASE;

IF NEW Actual_Shipped_Date;
// SUPPRESSED PRINT Actual Shipped Date totals format

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

ENDIF;

CASE;

IF NEW Ship_To_Customer;
// SUPPRESSED PRINT Ship To Customer totals format

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

ENDIF;

CASE;

IF NEW Ship_To_Name;
// Print Ship To Name totals format
PRINT Ship To Name totals format;

NXT.Weight_1_1_SUM = SUM(CUR.Weight_1_1_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

ENDIF;

