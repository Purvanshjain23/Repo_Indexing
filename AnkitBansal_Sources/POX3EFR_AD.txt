// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POX3EFR
// ?Date: 14.08.2025 Time: 03:39:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
PARAMETER(CTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(JOB.*USER);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


// WRK.Label Date = JOB.*Job date + CON.-3 *DAYS
WRK.Label_Date = DATEINCR(JOB.*Job_date '-3' 'DY' 1111111 'NONE' 'N' 1);

// WRK.Year Code = WRK.Label Date *YEAR
WRK.Year_Code = DATEDTLS(WRK.Label_Date 'YR' 1111111 'NONE' 'N' 1);

// LCL.Year Alpha (YYYY) USR = WRK.Year Code
LCL.Year_Alpha_YYYY_USR = WRK.Year_Code;

// LCL.Month/Year NBR        USR = WRK.Label Date
LCL.Month_Year_NBR_USR = WRK.Label_Date;

// LCL.Text USR 4 = LCL.Month/Year NBR        USR
LCL.Text_USR_4 = LCL.Month_Year_NBR_USR;

// LCL.AS Label Date YYYYMMDD = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Text USR 4,CON.*ZERO)
LCL.AS_Label_Date_YYYYMMDD = LCL.Year_Alpha_YYYY_USR + LCL.Text_USR_4 (*ZERO);

// LCL.PT Prod Date YYYYMMDD = CVTVAR(LCL.AS Label Date YYYYMMDD)
LCL.PT_Prod_Date_YYYYMMDD = CVTVAR(LCL.AS_Label_Date_YYYYMMDD);

//?* Options *
//?USER: Initialize subfile header

CASE;

// IF CTL.PT WIP Used/Not Used Sts EQ WRK.Blank for 4           USR
IF CTL.PT_WIP_Used_Not_Used_Sts = WRK.Blank_for_4_USR;

// CTL.PT WIP Used/Not Used Sts = CND.Not Used
CTL.PT_WIP_Used_Not_Used_Sts = 'N';

// LCL.PT WIP Used/Not Used Sts = CND.Not Used
LCL.PT_WIP_Used_Not_Used_Sts = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Sel Rej or Not Used
CASE;

// IF CTL.PT WIP Used/Not Used Sts is Rejected
IF CTL.PT_WIP_Used_Not_Used_Sts = 'R';

CASE;

// IF DB1.PT WIP Used/Not Used Sts is Not Rejected
IF DB1.PT_WIP_Used_Not_Used_Sts = 'N'/'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Rej or Not Used
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.PT WIP Used/Not Used Sts is Not Used
IF DB1.PT_WIP_Used_Not_Used_Sts = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Product Code
CASE;

// IF CTL.PT Product Code is Entered
IF CTL.PT_Product_Code <> *ZERO;

CASE;

// IF DB1.PT Product Code NE CTL.PT Product Code
IF DB1.PT_Product_Code <> CTL.PT_Product_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Prod date
CASE;

// IF CTL.PT Prod Date YYYYMMDD is Entered
IF CTL.PT_Prod_Date_YYYYMMDD > *ZERO;

CASE;

// IF DB1.PT Prod Date YYYYMMDD NE CTL.PT Prod Date YYYYMMDD
IF DB1.PT_Prod_Date_YYYYMMDD <> CTL.PT_Prod_Date_YYYYMMDD;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Prod time
CASE;

// IF CTL.PT Production Time is Entered
IF CTL.PT_Production_Time > *ZERO;

CASE;

// IF DB1.PT Production Time LT CTL.PT Production Time
IF DB1.PT_Production_Time < CTL.PT_Production_Time;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Serial Number
CASE;

// IF CTL.PT Serial Number is Entered
IF CTL.PT_Serial_Number > *ZERO;

CASE;

// IF DB1.PT Serial Number NE CTL.PT Serial Number
IF DB1.PT_Serial_Number <> CTL.PT_Serial_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Shift Number
CASE;

// IF CTL.PT Shift Number is *ALL values
IF CTL.PT_Shift_Number = '1'/'2'/*BLANK;

CASE;

// IF DB1.PT Shift Number NE CTL.PT Shift Number
IF DB1.PT_Shift_Number <> CTL.PT_Shift_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Weight
CASE;

// IF CTL.PT Gross Weight is Entered
IF CTL.PT_Gross_Weight > *ZERO;

CASE;

// IF DB1.PT Gross Weight NE CTL.PT Gross Weight
IF DB1.PT_Gross_Weight <> CTL.PT_Gross_Weight;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// RCD.WIP Dump/Production Dt US = RCD.PT WIP Dump/Production Dt
RCD.WIP_Dump_Production_Dt_US = RCD.PT_WIP_Dump_Production_Dt;

// RCD.WIP Dump/Production Tm US = RCD.PT WIP Dump/Production Tm
RCD.WIP_Dump_Production_Tm_US = RCD.PT_WIP_Dump_Production_Tm;

// RCD.USR Time 4.0 = DB1.PT WIP Dump/Production Tm / CON.100 *
RCD.USR_Time_4_0 = DB1.PT_WIP_Dump_Production_Tm / 100;

// RCD.WIP Dump/Production Sh US = RCD.PT WIP Dump/Production Sh
RCD.WIP_Dump_Production_Sh_US = RCD.PT_WIP_Dump_Production_Sh;

// RCD.WIP Used/Not Used Sts USR = RCD.PT WIP Used/Not Used Sts
RCD.WIP_Used_Not_Used_Sts_USR = RCD.PT_WIP_Used_Not_Used_Sts;

// RCD.From FG Serial Nbr USR = RCD.PT From FG Serial Nbr
RCD.From_FG_Serial_Nbr_USR = RCD.PT_From_FG_Serial_Nbr;

// RCD.To FG Serial Nbr USR = RCD.PT To FG Serial Nbr
RCD.To_FG_Serial_Nbr_USR = RCD.PT_To_FG_Serial_Nbr;

//?(RI) prod date if over 3 days old and no dumped data and not used
CASE;

// IF RCD.PT Prod Date YYYYMMDD LT LCL.PT Prod Date YYYYMMDD
IF RCD.PT_Prod_Date_YYYYMMDD < LCL.PT_Prod_Date_YYYYMMDD;

// AND RCD.PT WIP Dump/Production Dt is Not Entered
AND RCD.PT_WIP_Dump_Production_Dt = *ZERO;

// AND RCD.PT WIP Used/Not Used Sts is Not Used
AND RCD.PT_WIP_Used_Not_Used_Sts = 'N';

// RCD.Status - Y or N = CND.yes
RCD.Status_Y_or_N = 'Y';

//?(RI) prod date if over 3 days old and no dumped data and not used
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Status - Y or N = CND.no
RCD.Status_Y_or_N = 'N';

ENDIF;

//?USER: Validate subfile control

// CTL.PT WIP Dump/Production Tm = CTL.USR From Time 4.0 * CON.100 *
CTL.PT_WIP_Dump_Production_Tm = CTL.USR_From_Time_4_0 * 100;

//?CTL product changed
CASE;

// IF CTL.PT Product Code NE LCL.PT Product Code
IF CTL.PT_Product_Code <> LCL.PT_Product_Code;

// LCL.PT Product Code = CTL.PT Product Code
LCL.PT_Product_Code = CTL.PT_Product_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CTL Serial changed
CASE;

// IF CTL.PT Serial Number NE LCL.PT Serial Number
IF CTL.PT_Serial_Number <> LCL.PT_Serial_Number;

// LCL.PT Serial Number = CTL.PT Serial Number
LCL.PT_Serial_Number = CTL.PT_Serial_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CTL Weight changed
CASE;

// IF CTL.PT Gross Weight NE LCL.PT Gross Weight
IF CTL.PT_Gross_Weight <> LCL.PT_Gross_Weight;

// LCL.PT Gross Weight = CTL.PT Gross Weight
LCL.PT_Gross_Weight = CTL.PT_Gross_Weight;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CTL Wip Sts changed
CASE;

// IF CTL.PT WIP Used/Not Used Sts NE LCL.PT WIP Used/Not Used Sts
IF CTL.PT_WIP_Used_Not_Used_Sts <> LCL.PT_WIP_Used_Not_Used_Sts;

// LCL.PT WIP Used/Not Used Sts = CTL.PT WIP Used/Not Used Sts
LCL.PT_WIP_Used_Not_Used_Sts = CTL.PT_WIP_Used_Not_Used_Sts;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?VAL: Serial Nbr range
CASE;

// IF CTL.PT From FG Serial Nbr GT CTL.PT To FG Serial Nbr
IF CTL.PT_From_FG_Serial_Nbr > CTL.PT_To_FG_Serial_Nbr;

// Send error message - 'Invalid Serial Nbr Range.'
ERROR(USR3281);
MSGPARM(CTL.PT_From_FG_Serial_Nbr);
MSGPARM(CTL.PT_To_FG_Serial_Nbr);

ENDIF;

//?CTL: Enter all fields or none
CASE;

// IF CTL.PT From FG Serial Nbr is Not Entered
IF ( CTL.PT_From_FG_Serial_Nbr = *ZERO;

// OR CTL.PT To FG Serial Nbr is Not Entered
OR CTL.PT_To_FG_Serial_Nbr = *ZERO;

// OR CTL.PT WIP Dump/Production Dt is Not Entered
OR CTL.PT_WIP_Dump_Production_Dt = *ZERO;

// OR CTL.PT WIP Dump/Production Tm is Not Entered
OR CTL.PT_WIP_Dump_Production_Tm = *ZERO;

// OR CTL.PT WIP Dump/Production Sh EQ WRK.Blank for 4           USR
OR CTL.PT_WIP_Dump_Production_Sh = WRK.Blank_for_4_USR );

// AND CTL.PT From FG Serial Nbr is Entered
AND ( CTL.PT_From_FG_Serial_Nbr > *ZERO;

// OR CTL.PT To FG Serial Nbr is Entered
OR CTL.PT_To_FG_Serial_Nbr > *ZERO;

// OR CTL.PT WIP Dump/Production Dt is Entered
OR CTL.PT_WIP_Dump_Production_Dt > *ZERO;

// OR CTL.PT WIP Dump/Production Tm is Entered
OR CTL.PT_WIP_Dump_Production_Tm > *ZERO;

// OR CTL.PT WIP Dump/Production Sh is *ALL values
OR CTL.PT_WIP_Dump_Production_Sh = '1'/'2'/*BLANK );

// Send error message - 'Please enter all fields for the update.'
ERROR(USR3282);
MSGPARM(CTL.PT_From_FG_Serial_Nbr);
MSGPARM(CTL.PT_To_FG_Serial_Nbr);
MSGPARM(CTL.PT_WIP_Dump_Production_Dt);
MSGPARM(CTL.PT_WIP_Dump_Production_Sh);
MSGPARM(CTL.PT_WIP_Dump_Production_Tm);

ENDIF;

//?VAL: From serial
CASE;

// IF CTL.PT From FG Serial Nbr is Entered
IF CTL.PT_From_FG_Serial_Nbr > *ZERO;

EXECUTE FUNCTION(Val Product Trc f/FG  RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1673474;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.PT_From_FG_Serial_Nbr);
PARAMETER(LCL.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.*Normal
 PAR.*Return_code = *BLANK;

}


CASE;

// IF LCL.*Return code is *Normal
IF LCL.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Serial Nbr &1 not found.'
ERROR(USR3283);
MSGPARM(CTL.PT_From_FG_Serial_Nbr);

ENDIF;

ENDIF;

//?VAL: to serial
CASE;

// IF CTL.PT To FG Serial Nbr is Entered
IF CTL.PT_To_FG_Serial_Nbr > *ZERO;

EXECUTE FUNCTION(Val Product Trc f/FG  RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1673474;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.PT_To_FG_Serial_Nbr);
PARAMETER(LCL.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.*Normal
 PAR.*Return_code = *BLANK;

}


CASE;

// IF LCL.*Return code is *Normal
IF LCL.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Serial Nbr &1 not found.'
ERROR(USR3283);
MSGPARM(CTL.PT_To_FG_Serial_Nbr);

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// CTL.PT WIP Used/Not Used Sts = CND.Not Used
CTL.PT_WIP_Used_Not_Used_Sts = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Display Rejects
CASE;

// IF CTL.PT WIP Used/Not Used Sts is Rejected
IF CTL.PT_WIP_Used_Not_Used_Sts = 'R';

CASE;

// IF CTL.PT Prod Date YYYYMMDD is Not Entered
IF CTL.PT_Prod_Date_YYYYMMDD = *ZERO;

// Send error message - 'Enter Production Date from which to display rejects.'
ERROR(USR3284);
MSGPARM(CTL.PT_Prod_Date_YYYYMMDD);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F8=Submit (to update FG Serials with dump data)
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program Zzz WIP-FG Serial Upd XF.
CALL PROGRAM(Zzz WIP-FG Serial Upd XF) ('POYMXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.PT_WIP_Dump_Production_Tm);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print exceptions (wips over 3 days old and not dumped)
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  WEB PV.
CALL PROGRAM(PMT Print Option  WEB PV) ('POT2PVR');
PARAMETER('WIP Exceptions Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('I/C');

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?Submit job for Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Pass for WIP ExcptUP.
SBMJOB;
CALL PROGRAM(Zzz Pass for WIP ExcptUP) ('POYPUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.Company_Number);
SBMJOBOVR JOB(PRTWIPEXC);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.USR Time 4.0 is Entered
IF RCD.USR_Time_4_0 <> 0;

// RCD.PT WIP Dump/Production Dt = CTL.PT WIP Dump/Production Dt
RCD.PT_WIP_Dump_Production_Dt = CTL.PT_WIP_Dump_Production_Dt;

// RCD.PT WIP Dump/Production Tm = RCD.USR Time 4.0 * CON.100 *
RCD.PT_WIP_Dump_Production_Tm = RCD.USR_Time_4_0 * 100;

// RCD.PT WIP Dump/Production Sh = CTL.PT WIP Dump/Production Sh
RCD.PT_WIP_Dump_Production_Sh = CTL.PT_WIP_Dump_Production_Sh;

// RCD.PT From FG Serial Nbr = CTL.PT From FG Serial Nbr
RCD.PT_From_FG_Serial_Nbr = CTL.PT_From_FG_Serial_Nbr;

// RCD.PT To FG Serial Nbr = CTL.PT To FG Serial Nbr
RCD.PT_To_FG_Serial_Nbr = CTL.PT_To_FG_Serial_Nbr;

// IF *OTHERWISE
IF *OTHERWISE;

//?Unselect = blank out dumped fields
CASE;

// IF RCD.PT WIP Dump/Production Tm is Entered
IF RCD.PT_WIP_Dump_Production_Tm > *ZERO;

// RCD.PT WIP Dump/Production Dt = CON.*ZERO
RCD.PT_WIP_Dump_Production_Dt = *ZERO;

// RCD.PT WIP Dump/Production Tm = CON.*ZERO
RCD.PT_WIP_Dump_Production_Tm = *ZERO;

// RCD.PT WIP Dump/Production Sh = WRK.Blank for 4           USR
RCD.PT_WIP_Dump_Production_Sh = WRK.Blank_for_4_USR;

// RCD.PT From FG Serial Nbr = CON.*ZERO
RCD.PT_From_FG_Serial_Nbr = *ZERO;

// RCD.PT To FG Serial Nbr = CON.*ZERO
RCD.PT_To_FG_Serial_Nbr = *ZERO;

ENDIF;

ENDIF;

// RCD.PT WIP Used/Not Used Sts = RCD.WIP Used/Not Used Sts USR
RCD.PT_WIP_Used_Not_Used_Sts = RCD.WIP_Used_Not_Used_Sts_USR;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Product Trace All CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1646315;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.PT_Serial_Number);
PARAMETER(RCD.PT_Prod_Date_YYYYMMDD);
PARAMETER(RCD.PT_Production_Time);
PARAMETER(RCD.PT_Label_Date_YYYYMMDD);
PARAMETER(RCD.PT_Offset_Prod_Date);
PARAMETER(RCD.PT_Offset_Prod_Time);
PARAMETER(RCD.PT_Inventory_Status);
PARAMETER(RCD.PT_Net_Weight);
PARAMETER(RCD.PT_Gross_Weight);
PARAMETER(RCD.PT_Shift_Number);
PARAMETER(RCD.PT_Warehouse_ID_Code);
PARAMETER(RCD.PT_Order_Number);
PARAMETER(RCD.PT_Pallet_Number);
PARAMETER(RCD.PT_Product_Code);
PARAMETER(RCD.PT_Item_Label_Line_1);
PARAMETER(RCD.PT_Item_Label_Line_2);
PARAMETER(RCD.PT_Fresh_Frozen_Code);
PARAMETER(RCD.PT_Item_Picture_Key);
PARAMETER(RCD.PT_Tattoo_Number);
PARAMETER(RCD.PT_Source_Type);
PARAMETER(RCD.PT_Source_Code);
PARAMETER(RCD.PT_Source_Code_Desc);
PARAMETER(RCD.PT_Producer_Cell_Mgr_Code);
PARAMETER(RCD.PT_Producer_Cell_Mgr_Name);
PARAMETER(RCD.PT_Producer_Farm_Code);
PARAMETER(RCD.PT_Producer_Location_Code);
PARAMETER(RCD.PT_Producer_Farm_Name);
PARAMETER(RCD.PT_Producer_Farm_City);
PARAMETER(RCD.PT_Producer_Farm_State);
PARAMETER(RCD.PT_Producer_Farm_State_Nm);
PARAMETER(RCD.PT_Genetic_Code);
PARAMETER(RCD.PT_Genetic_Description);
PARAMETER(RCD.PT_Gender_Code);
PARAMETER(RCD.PT_Producer_Farm_Code_1);
PARAMETER(RCD.PT_Producer_Farm_Code_2);
PARAMETER(RCD.PT_Producer_Farm_Code_3);
PARAMETER(RCD.PT_Producer_Farm_Code_4);
PARAMETER(RCD.PT_Item_Type_Code);
PARAMETER(RCD.PT_Item_Str_Class_Code);
PARAMETER(RCD.PT_Item_Str_Group_Code);
PARAMETER(RCD.PT_Item_Str_Type_Code);
PARAMETER(RCD.PT_WIP_Dump_Production_Dt);
PARAMETER(RCD.PT_WIP_Dump_Production_Tm);
PARAMETER(RCD.PT_WIP_Dump_Production_Sh);
PARAMETER(RCD.PT_WIP_Used_Not_Used_Sts);
PARAMETER(RCD.PT_From_FG_Serial_Nbr);
PARAMETER(RCD.PT_To_FG_Serial_Nbr);
PARAMETER(RCD.PT_Unused_Nbr_3);
PARAMETER(RCD.PT_Unused_Nbr_4);
PARAMETER(RCD.PT_Incl_in_Prod_Trc_Match);
PARAMETER(RCD.PT_Unused_Sts_4);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

