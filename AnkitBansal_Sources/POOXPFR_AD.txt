// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POOXPFR
// ?Date: 14.08.2025 Time: 12:06:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.Count USR = CON.*ZERO
PAR.Count_USR = *ZERO;

//?USER: Record selection processing

//?SEL: Ship To Customer
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

CASE;

// IF PAR.Company Number NE DB1.Company Number
IF PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Additional Selects
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Scheduled Ship Date
CASE;

// IF DB1.Scheduled Ship Date LT PAR.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date < PAR.Scheduled_Ship_Date;

// OR DB1.Scheduled Ship Date GT PAR.Date To               USR
OR DB1.Scheduled_Ship_Date > PAR.Date_To_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Shipped Orders Only
CASE;

// IF PAR.Shipped/Unshpd Sts USR is Shipped
IF PAR.Shipped_Unshpd_Sts_USR = 'S';

CASE;

// IF DB1.Actual Shipped Date is not entered
IF DB1.Actual_Shipped_Date = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?UnShipped Orders Only
CASE;

// IF PAR.Shipped/Unshpd Sts USR is Unshipped
IF PAR.Shipped_Unshpd_Sts_USR = 'U';

CASE;

// IF DB1.Actual Shipped Date is entered
IF DB1.Actual_Shipped_Date <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Sales Route
CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

CASE;

// IF PAR.Sales Route Code NE DB1.Sales Route Code
IF PAR.Sales_Route_Code <> DB1.Sales_Route_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Ship To Customer
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

CASE;

// IF PAR.Ship To Customer NE DB1.Ship To Customer
IF PAR.Ship_To_Customer <> DB1.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Carrier Code
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

CASE;

// IF PAR.Carrier Code NE DB1.Carrier Code
IF PAR.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Shipping Method
CASE;

// IF PAR.Shipping Method is *ALL values
IF PAR.Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

CASE;

// IF PAR.Shipping Method NE DB1.Shipping Method
IF PAR.Shipping_Method <> DB1.Shipping_Method;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: LTL Flag
CASE;

// IF PAR.LTL Flag is Valid
IF PAR.LTL_Flag = 'N'/'Y';

CASE;

// IF PAR.LTL Flag NE DB1.LTL Flag
IF PAR.LTL_Flag <> DB1.LTL_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Load type
CASE;

// IF PAR.Load Type is Bulk or Regular
IF PAR.Load_Type = 'B'/'R';

CASE;

// IF PAR.Load Type NE DB1.Load Type
IF PAR.Load_Type <> DB1.Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Slot type
CASE;

// IF PAR.Slot Type f/load USR NE WRK.Blank for 4           USR
IF PAR.Slot_Type_f_load_USR <> WRK.Blank_for_4_USR;

CASE;

// IF PAR.Slot Type f/load USR is Export
IF PAR.Slot_Type_f_load_USR = 'EX';

CASE;

// IF DB1.Export Status is Not Yes
IF DB1.Export_Status = *BLANK/'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?05/11/04 SLM PKTR01 Multi-Company - Function was changed
//?                                    to remove Company RST or Pos
EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1541555;
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.USR_Unit_of_Measure);
{
 //?USER: Initialize routine

 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?If doing for one Order, because it isnt tied to a load yet
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

 QUIT;

 ENDIF;

 //?orig code
 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.Slot Type f/load USR NE LCL.USR Unit of Measure
IF PAR.Slot_Type_f_load_USR <> LCL.USR_Unit_of_Measure;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Shipped/Unshipped Condition Name
CASE;

// IF 1PG.Shipped/Unshpd Sts USR is *ALL values
IF X1PG_Shipped_Unshpd_Sts_USR = 'S'/'U';

// 1PG.Condition Name USR = Condition name of 1PG.Shipped/Unshpd Sts USR
X1PG_Condition_Name_USR = RTVCND(X1PG_Shipped_Unshpd_Sts_USR);

//?Shipped/Unshipped Condition Name
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Name USR = CON.*All
X1PG_Condition_Name_USR = *All;

ENDIF;

//?Shipping Method
CASE;

// IF 1PG.Shipping Method is *ALL values
IF X1PG_Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Shipping Method
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Shipping_Method);

//?Shipping Method
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.*All
X1PG_Condition_Desc_1_USR = *All;

ENDIF;

//?Sales Route Desc
CASE;

// IF 1PG.Sales Route Code is entered
IF X1PG_Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(Sales Route Desc      DRV) TYPE(DRVFLD)                        AC1575490;
PARAMETER(X1PG_Sales_Route_Desc_DRV);
PARAMETER(X1PG_Sales_Route_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Sales Route Desc
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Sales Route Desc      DRV = CON.*All
X1PG_Sales_Route_Desc_DRV = *All;

ENDIF;

//?Ship To Name
CASE;

// IF 1PG.Ship To Customer is not equal to zero
IF X1PG_Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(X1PG_Ship_To_Name_DRV);
PARAMETER(X1PG_Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Ship To Name
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Ship To Name          DRV = CON.*All
X1PG_Ship_To_Name_DRV = *All;

ENDIF;

//?Carrier
CASE;

// IF 1PG.Carrier Code is entered
IF X1PG_Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(X1PG_Carrier_Name_DRV);
PARAMETER(X1PG_Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


//?Carrier
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Carrier Name DRV = CON.*All
X1PG_Carrier_Name_DRV = *All;

ENDIF;

//?Shipped < Ordered
CASE;

// IF 1PG.Status Flag 1  Y/N is *ALL values
IF X1PG_Status_Flag_1_Y_N = 'Y'/'N'/*BLANK/'F'/'B';

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Status Flag 1  Y/N
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Status_Flag_1_Y_N);

//?Shipped < Ordered
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 2  USR = CON.*All
X1PG_Condition_Desc_2_USR = *All;

ENDIF;

//?LTL Flag
CASE;

// IF 1PG.LTL Flag is Valid
IF X1PG_LTL_Flag = 'N'/'Y';

// 1PG.Condition Desc. 4  USR = Condition name of 1PG.LTL Flag
X1PG_Condition_Desc_4_USR = RTVCND(X1PG_LTL_Flag);

//?LTL Flag
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 4  USR = CON.*All
X1PG_Condition_Desc_4_USR = *All;

ENDIF;

//?Load Type
CASE;

// IF 1PG.Load Type is Bulk or Regular
IF X1PG_Load_Type = 'B'/'R';

// 1PG.Condition Desc. 5  USR = Condition name of 1PG.Load Type
X1PG_Condition_Desc_5_USR = RTVCND(X1PG_Load_Type);

//?Load Type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 5  USR = CON.*All
X1PG_Condition_Desc_5_USR = *All;

ENDIF;

//?Slot Type
CASE;

// IF 1PG.Slot Type f/load USR NE WRK.Blank for 4           USR
IF X1PG_Slot_Type_f_load_USR <> WRK.Blank_for_4_USR;

// 1PG.Condition Desc. 10 USR = Condition name of 1PG.Slot Type f/load USR
X1PG_Condition_Desc_10_USR = RTVCND(X1PG_Slot_Type_f_load_USR);

//?Slot Type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 10 USR = CON.*All
X1PG_Condition_Desc_10_USR = *All;

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Sales_Route_Code;
EXECUTE FUNCTION(Sales Route Desc      DRV) TYPE(DRVFLD)                        AC1575490;
PARAMETER(CUR.Sales_Route_Desc_DRV);
PARAMETER(CUR.Sales_Route_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PAR.Count USR = CON.*ZERO
PAR.Count_USR = 0;

// Print Sales Route Code header format
PRINT Sales Route Code header format;

ENDIF;

// SUPPRESSED PRINT Ship To Customer header format

// SUPPRESSED PRINT Load ID header format

// SUPPRESSED PRINT Order Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Wgt Sched/Shpd    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1632549;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Weight_Scheduled);
PARAMETER(CUR.Weight_Shipped_Total);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
 PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

}


//?USER: Process after print of detail format

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Scheduled);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Shipped_Total);

//?USER: Print required level totals

CASE;

IF NEW Order_Number;
//?** Added 10/26/2006 LJB V61020A     per Gary Martin
//?** SEL: Shipped < Ordered
CASE;

// IF PAR.Status Flag 1  Y/N is Yes
IF PAR.Status_Flag_1_Y_N = 'Y';

CASE;

// IF CUR.Weight Billed SUM GE CUR.Weight Scheduled SUM
IF CUR.Weight_Billed_SUM >= CUR.Weight_Scheduled_SUM;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?** SEL: Weight Scheduled < PAR.Weight Ordered
CASE;

// IF PAR.Weight Ordered is Greater than zero
IF PAR.Weight_Ordered > *ZERO;

CASE;

// IF CUR.Weight Scheduled SUM GE PAR.Weight Ordered
IF CUR.Weight_Scheduled_SUM >= PAR.Weight_Ordered;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

//?** Print weight sums from Order Detail record
CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Scheduled_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

ENDIF;

ENDIF;

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

//?** All load calcs and summaries have been dropped since the
//?** logical was changed - Ideal Net Weight and Load count is
//?** now irrelevant
// SUPPRESSED PRINT Load ID totals format

//?** Load ID format dropped       10/26/2006 LJB V61020A
//?** Format dropped   10/26/2006 LJB V61020A
//?** Skip printing the record if the total weight scheduled
//?** for the customer is *GE to the weight limit requested
//?**                                 10/20/2006 LJB V61020A
// SUPPRESSED PRINT Ship To Customer totals format

//?** Format dropped   10/26/2006 LJB V61020A

CASE;

IF NEW Sales_Route_Code;
//?** Counts are no longer relevant - sort order was changed
// Print Sales Route Code totals format
PRINT Sales Route Code totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

