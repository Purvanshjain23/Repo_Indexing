// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKQ9XFR
// ?Date: 14.08.2025 Time: 02:51:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?SDN440 RMC 10-07/21 format mgl supplier invoice in hog voucher detail
//?T8163 RMC 1/10/17 new erp
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('M3HPEVCH');
PARAMETER(LCL.Live_with_M3_USR);

EXECUTE FUNCTION(Rtv TH to Alloc Frt   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1183761;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
{
 //?USER: Initialize routine

 // WRK.Last BOH BuyOrder Nbr USR = CON.*ZERO
 WRK.Last_BOH_BuyOrder_Nbr_USR = *ZERO;

 // WRK.Last BOL Load number  USR = CON.*ZERO
 WRK.Last_BOL_Load_number_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Break in BOL, delete unpaid Tattoo D/A's for the load
 CASE;

 // IF DB1.BOH Buy Order Number NE WRK.Last BOH BuyOrder Nbr USR
 IF DB1.BOH_Buy_Order_Number <> WRK.Last_BOH_BuyOrder_Nbr_USR;

 // OR DB1.BOL Load Number NE WRK.Last BOL Load number  USR
 OR DB1.BOL_Load_Number <> WRK.Last_BOL_Load_number_USR;

 // Call program Zzz Tattoo D/A 1 TTT  XF.
 CALL PROGRAM(Zzz Tattoo D/A 1 TTT  XF) ('PKFZXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);

 // WRK.Last BOH BuyOrder Nbr USR = DB1.BOH Buy Order Number
 WRK.Last_BOH_BuyOrder_Nbr_USR = DB1.BOH_Buy_Order_Number;

 // WRK.Last BOL Load number  USR = DB1.BOL Load Number
 WRK.Last_BOL_Load_number_USR = DB1.BOL_Load_Number;

 ENDIF;

 ENDIF;

 //?Freight
 DO;

 //?Get bol frt fields, and find out if any tattoo for this
 //?load has been paid.
 //?bring back in a tattoo is paid, and fix held over frt pgms
 // Call program Rtv Frt All f/BOL/TTO  XF.
 CALL PROGRAM(Rtv Frt All f/BOL/TTO  XF) ('PKEHXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_UOM);
 PARAMETER(WRK.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(WRK.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Head_Received_Market);
 PARAMETER(WRK.Tattoo_is_paid_Usr);
 PARAMETER(WRK.Held_Over_Records_Y_N);
 PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
 PARAMETER(WRK.Frt_Amt_spread_Usr);

 //?If allocated but no paid then allow to re spread of frt
 //?If not allocated allow spread of frt
 CASE;

 // IF WRK.Tattoo is paid Usr is No
 IF WRK.Tattoo_is_paid_Usr = 'N';

 // AND WRK.BOL Freight Allocation is Freight is Allocated
 AND WRK.BOL_Freight_Allocation = 'Y';

 // WRK.Freight Allociation Apply = CND.Yes
 WRK.Freight_Allociation_Apply = 'Y';

 // Call program Clc Frght Allctn/UnAl  XF.
 CALL PROGRAM(Clc Frght Allctn/UnAl  XF) ('PKQ6XFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_UOM);
 PARAMETER(WRK.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(WRK.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Head_Received_Market);
 PARAMETER(WRK.Freight_Allociation_Apply);

 // IF WRK.BOL Freight Allocation is Freight is not Allocated
 IF WRK.BOL_Freight_Allocation = *BLANK;

 // WRK.Freight Allociation Apply = CND.Yes
 WRK.Freight_Allociation_Apply = 'Y';

 // Call program Clc Frght Allctn/UnAl  XF.
 CALL PROGRAM(Clc Frght Allctn/UnAl  XF) ('PKQ6XFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_UOM);
 PARAMETER(WRK.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(WRK.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Head_Received_Market);
 PARAMETER(WRK.Freight_Allociation_Apply);

 ENDIF;

 ENDDO;

 // Call program Clc Ded/Add/Net Pay   XF.
 CALL PROGRAM(Clc Ded/Add/Net Pay   XF) ('PKREXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER('C');

}


EXECUTE FUNCTION(Rtv/Crt Pdcr LvVch     RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183956;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.VCH_Header_Number);
PARAMETER(PAR.VCH_Batch_Number);
PARAMETER(PAR.@Status_Yes_No);
PARAMETER(LCL.Live_with_M3_USR);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Crt Live Vchr Init    IF) TYPE(EXCINTFUN)                      AB1147435;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.VCH_Batch_Number);
 PARAMETER(WRK.Producer_Code_USR);
 {
  //?Execute internal function

  // PAR.Producer Code         USR = CON.*BLANK
  PAR.Producer_Code_USR = *BLANK;

  EXECUTE FUNCTION(Rtv Nxt Vch Batch #   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1143058;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.VCH Batch Number = CON.1
   PAR.VCH_Batch_Number = 1;

   //?USER: Process Data record

   // PAR.VCH Batch Number = DB1.VCH Batch Number + CON.1
   PAR.VCH_Batch_Number = DB1.VCH_Batch_Number + 1;

   QUIT;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Crt Live Vchr Detail  IF) TYPE(EXCINTFUN)                      AB1183957;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(PAR.VCH_Batch_Number);
 PARAMETER(PAR.VCH_Header_Number);
 PARAMETER(PAR.Live_with_M3_USR);
 {
  //?Execute internal function

  //?E004069 RMC 6/5/15 Recompile for new ERP Fields
  //?Accumulate gross, net, d/a amts and create voucher header, details.
  //?Break in producer  or kill date
  CASE;

  // IF PAR.PD Producer Code NE WRK.Producer Code         USR
  IF PAR.PD_Producer_Code <> WRK.Producer_Code_USR;

  // OR PAR.TH Kill Date NE WRK.TH Kill Date
  OR PAR.TH_Kill_Date <> WRK.TH_Kill_Date;

  // WRK.Producer Code         USR = PAR.PD Producer Code
  WRK.Producer_Code_USR = PAR.PD_Producer_Code;

  // WRK.TH Kill Date = PAR.TH Kill Date
  WRK.TH_Kill_Date = PAR.TH_Kill_Date;

  EXECUTE FUNCTION(Rtv Nxt Vch Header#   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1115269;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.VCH Header Number = CON.00001
   PAR.VCH_Header_Number = 00001;

   //?USER: Process Data record

   // PAR.CKH Header Number = DB1.CKH Header Number + CON.1
   PAR.VCH_Header_Number = DB1.VCH_Header_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Producer Split    RT) TYPE(RTVOBJ) FILE(PKBFREP)           AB1107922;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(WRK.VCH_Split);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.PSS_Split_Percent = 100;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?VCH AP Address Number
  DO;

  EXECUTE FUNCTION(Rtv PrdVendor#,Src,M3 RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1330020;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(WRK.VCH_AP_Address_Number);
  PARAMETER(WRK.SR_Source_Code);
  PARAMETER(WRK.M3_Supplier_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(PAR.M3_Supplier_ID);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  CASE;

  // IF PAR.Live with M3   USR is Yes
  IF PAR.Live_with_M3_USR = 'Y';

  // WRK.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
  WRK.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

  // WRK.VCH AP Address Number = CVTVAR(WRK.Text 7 USR)
  WRK.VCH_AP_Address_Number = CVTVAR(WRK.Text_7_USR);

  ENDIF;

  // Call program Rtv Alt Prd Py Nm&Vn# XF.
  CALL PROGRAM(Rtv Alt Prd Py Nm&Vn# XF) ('PLO7XFR');
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(LCL.Alt_Producer_Payee);
  PARAMETER(WRK.Alt_Prod_Payee_Vnd_AddUsr);
  PARAMETER(WRK.M3_Supplier_ID_Alt_Payee);

  CASE;

  // IF WRK.Alt Prod Payee Vnd AddUsr is Not zero
  IF WRK.Alt_Prod_Payee_Vnd_AddUsr <> *ZERO;

  CASE;

  // IF PAR.Live with M3   USR is Yes
  IF PAR.Live_with_M3_USR = 'Y';

  // WRK.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID  Alt Payee,CON.4,CON.7)
  WRK.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID_Alt_Payee:4:7);

  // WRK.Alt Prod Payee Vnd AddUsr = CVTVAR(WRK.Text 7 USR)
  WRK.Alt_Prod_Payee_Vnd_AddUsr = CVTVAR(WRK.Text_7_USR);

  // WRK.VCH AP Address Number = WRK.Alt Prod Payee Vnd AddUsr
  WRK.VCH_AP_Address_Number = WRK.Alt_Prod_Payee_Vnd_AddUsr;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.VCH AP Address Number = WRK.Alt Prod Payee Vnd AddUsr
  WRK.VCH_AP_Address_Number = WRK.Alt_Prod_Payee_Vnd_AddUsr;

  ENDIF;

  // Send completion message - 'Check for &1 will be sent to &2 for BO &3, &4, &5, &6 &7'
  MESSAGE(PRK1237 *COMPLETION);
  MSGPARM(PAR.PD_Producer_Code);
  MSGPARM(LCL.Alt_Producer_Payee);
  MSGPARM(PAR.BOH_Company_Number);
  MSGPARM(PAR.BOH_Buy_Order_Number);
  MSGPARM(PAR.BOL_Load_Number);
  MSGPARM(PAR.TH_Tattoo_Number);
  MSGPARM(PAR.TH_Kill_Date);

  ENDIF;

  ENDDO;

  //?Payee type values
  CASE;

  // IF PAR.TH Source Type is Internal
  IF PAR.TH_Source_Type = 'I';

  // WRK.VCH Payee Type = CND.Internal
  WRK.VCH_Payee_Type = 'I';

  //?Payee type values
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.VCH Payee Type = CND.External
  WRK.VCH_Payee_Type = 'E';

  ENDIF;

  //?Changed back to TH Kill date 12/22/99.  -Purva
  EXECUTE FUNCTION(Crt Voucher Header    CR) TYPE(CRTOBJ) FILE(PKBKCPP)           AB1102568;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(WRK.VCH_AP_Address_Number);
  PARAMETER(*ZERO);
  PARAMETER(WRK.VCH_Payee_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.VCH_Split);
  PARAMETER('N');
  PARAMETER('O');
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER('R');
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  // WRK.VCH Gross Amt = CON.*ZERO
  WRK.VCH_Gross_Amt = *ZERO;

  // WRK.VCH Net Amt = CON.*ZERO
  WRK.VCH_Net_Amt = *ZERO;

  // WRK.VCH Less Split Amount = CON.*ZERO
  WRK.VCH_Less_Split_Amount = *ZERO;

  // WRK.VCH Deduction Amt = CON.*ZERO
  WRK.VCH_Deduction_Amt = *ZERO;

  // WRK.VCH Base Mkt Price Amt = CON.*ZERO
  WRK.VCH_Base_Mkt_Price_Amt = *ZERO;

  // WRK.VCH Sort Disc Amt = CON.*ZERO
  WRK.VCH_Sort_Disc_Amt = *ZERO;

  // WRK.VCH Yield Gain/Loss Amt = CON.*ZERO
  WRK.VCH_Yield_Gain_Loss_Amt = *ZERO;

  // WRK.VCH Base Carcass Value = CON.*ZERO
  WRK.VCH_Base_Carcass_Value = *ZERO;

  // WRK.VCH LN Add on/Deduct Amt = CON.*ZERO
  WRK.VCH_LN_Add_on_Deduct_Amt = *ZERO;

  // WRK.VCD Line = CON.*ZERO
  WRK.VCD_Line = *ZERO;

  ENDIF;

  // WRK.VCD Line = WRK.VCD Line + CON.1
  WRK.VCD_Line = WRK.VCD_Line + 1;

  //?Detail totals
  //?Accum total Tattoo amounts into work fields for Voucher Header
  CASE;

  // IF PAR.TH Held Over is greater than 0
  IF PAR.TH_Held_Over > *ZERO;

  // OR PAR.TH Held/Ovr Completed Dte is Greater than 0
  OR PAR.TH_Held_Ovr_Completed_Dte > *ZERO;

  //?If Held over then head will be accumulated in the combined accum
  EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) IF) TYPE(EXCINTFUN)                      AB1147033;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(WRK.TH_Dead_On_Arrival);
  PARAMETER(WRK.TH_Head_Received);
  PARAMETER(WRK.TH_Yard_Deads);
  PARAMETER(WRK.TH_Head_Condemned);
  PARAMETER(WRK.TH_Head_Killed);
  PARAMETER(WRK.TH_Head_Adds);
  PARAMETER(WRK.TH_Live_Wgt);
  PARAMETER(WRK.TH_Adj_Live_Wgt);
  PARAMETER(WRK.TH_Hot_Wgt);
  PARAMETER(WRK.TH_Avg_Live_Wgt);
  PARAMETER(WRK.TH_Avg_Hot_Wgt);
  PARAMETER(WRK.TH_Avg_Lean_Percent);
  PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
  PARAMETER(WRK.TH_Avg_Backfat);
  PARAMETER(WRK.TH_Actual_Yield);
  PARAMETER(WRK.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
  PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(WRK.TH_CM_Base_Carcass_Value);
  PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Carcass_Net_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Payment_Gross);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  PARAMETER(WRK.TH_Fixed_Cost_Amount);
  PARAMETER(WRK.TH_Shipped_Weight);
  PARAMETER(WRK.TH_FFLI);
  PARAMETER(WRK.TH_Head_Excluded);
  PARAMETER(WRK.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(WRK.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(WRK.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(WRK.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(WRK.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(WRK.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(WRK.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(WRK.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(WRK.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(WRK.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(WRK.TH_CM_Gross_Live_CWT);
  PARAMETER(WRK.TH_CM_Gross_Carc_CWT);
  PARAMETER(WRK.TH_Head_Adjusted_LN);
  PARAMETER(WRK.TH_PHA_Head_Adds);
  PARAMETER(WRK.TH_Excluded_Gross_Value);
  PARAMETER(WRK.TH_Excluded_Carc_Val);
  PARAMETER(WRK.TH_Excluded_Premium);
  PARAMETER(WRK.TH_Meat_Value_Factor_Amt);
  PARAMETER(WRK.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(WRK.TH_Avg_Backfat_2_Dec);
  PARAMETER(WRK.TH_Head_LFT);
  PARAMETER(WRK.TH_Head_EUT_KOA);
  PARAMETER(WRK.Print_Carcass_Analysis_Us);
  PARAMETER('N');
  PARAMETER(WRK.CMP_Grading_Type);
  {
   //?Execute internal function

   //?Modification History Created Str slm 061208
   DO;

   //?9/24/02 RMC Calc 2 dec backfat and loin eye
   //?050108 slm e00216 need additional fields on ho for meat
   //?061208 SLM E00144 LFT Head and Uat/Koa Head
   ENDDO;

   MOVE *ALL (To: PAR From: CON);

   EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1147407;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.TH_Dead_On_Arrival);
   PARAMETER(PAR.TH_Head_Received);
   PARAMETER(PAR.TH_Yard_Deads);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Head_Adds);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Adj_Live_Wgt);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
   PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.TH_CM_Base_Carcass_Value);
   PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
   PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
   PARAMETER(PAR.TH_Deduction_Amt);
   PARAMETER(PAR.TH_Carcass_Net_Amt);
   PARAMETER(PAR.TH_Additions_Amt);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.Th_Payment_Net_Amt);
   PARAMETER(PAR.TH_Fixed_Cost_Amount);
   PARAMETER(PAR.TH_Head_Excluded);
   PARAMETER(PAR.TH_Head_Adjusted_LN);
   PARAMETER(PAR.TH_PHA_Head_Adds);
   PARAMETER(PAR.TH_Excluded_Gross_Value);
   PARAMETER(PAR.TH_Excluded_Carc_Val);
   PARAMETER(PAR.TH_Excluded_Premium);
   PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
   PARAMETER(PAR.TH_Head_LFT);
   PARAMETER(PAR.TH_Head_EUT_KOA);
   PARAMETER(PAR.Lean_Wgt_USR);
   PARAMETER(PAR.Backfat_Wgt_USR);
   PARAMETER(PAR.Loin_Eye_Wgt_USR);
   PARAMETER(PAR.Print_Carcass_Analysis_Us);
   PARAMETER(PAR.Backfat_Wgt_USR_2);
   PARAMETER(PAR.Loin_Eye_Wgt_USR_2);
   PARAMETER(PAR.Status_3);
   PARAMETER(PAR.CMP_Grading_Type);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag Usr = CND.Yes
    WRK.First_Time_Flag_Usr = 'Y';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?061208 slm E00144 LFT and eut/koa
    //?050108 slm get TH Fixed Cost Amount
    //?               TH Meat Value Factor Amt
    //?First Kill Date
    CASE;

    // IF WRK.First Time Flag Usr is Yes
    IF WRK.First_Time_Flag_Usr = 'Y';

    // WRK.First Time Flag Usr = CND.No
    WRK.First_Time_Flag_Usr = 'N';

    ENDIF;

    // PAR.TH Kill Date = DB1.TH Kill Date
    PAR.TH_Kill_Date = DB1.TH_Kill_Date;

    // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
    PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

    // PAR.TH Head LFT = PAR.TH Head LFT + DB1.TH Head LFT
    PAR.TH_Head_LFT = PAR.TH_Head_LFT + DB1.TH_Head_LFT;

    // PAR.TH Head EUT/KOA = PAR.TH Head EUT/KOA + DB1.TH Head EUT/KOA
    PAR.TH_Head_EUT_KOA = PAR.TH_Head_EUT_KOA + DB1.TH_Head_EUT_KOA;

    // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
    PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

    // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
    PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

    // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
    PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

    // PAR.TH Head Killed = PAR.TH Head Killed + DB1.TH Head Killed
    PAR.TH_Head_Killed = PAR.TH_Head_Killed + DB1.TH_Head_Killed;

    // PAR.TH Head Adds = PAR.TH Head Adds + DB1.TH Head Adds
    PAR.TH_Head_Adds = PAR.TH_Head_Adds + DB1.TH_Head_Adds;

    // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
    PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

    // PAR.TH Adj Live Wgt = PAR.TH Adj Live Wgt + DB1.TH Adj Live Wgt
    PAR.TH_Adj_Live_Wgt = PAR.TH_Adj_Live_Wgt + DB1.TH_Adj_Live_Wgt;

    // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.TH Hot Wgt
    PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.TH_Hot_Wgt;

    // PAR.TH CM Base Mkt Price Amt = PAR.TH CM Base Mkt Price Amt + DB1.TH CM Base Mkt
    PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price_Amt
    + DB1.TH_CM_Base_Mkt_Price_Amt;

    //?5/29/03 new for sort loss print
    CASE;

    // IF PAR.Status 3 is Yes
    IF PAR.Status_3 = 'Y';

    // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH MPR Sort Loss
    PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_MPR_Sort_Loss;

    //?5/29/03 new for sort loss print
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH CM Sort Discount Amt
    PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_CM_Sort_Discount_Amt;

    ENDIF;

    // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CM Yield Gain/Loss Amt + DB1.TH CM Yield
    PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CM_Yield_Gain_Loss_Amt
    + DB1.TH_CM_Yield_Gain_Loss_Amt;

    CASE;

    // IF PAR.CMP Grading Type is Meat Value
    IF PAR.CMP_Grading_Type = 'M';

    // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH Fixed Cost Amount
    PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value + DB1.TH_Fixed_Cost_Amount;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH CM Base Car
    PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value
    + DB1.TH_CM_Base_Carcass_Value;

    ENDIF;

    // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CM LN AddOn/Deduct Amt + DB1.TH CM LN Add
    PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CM_LN_AddOn_Deduct_Amt
    + DB1.TH_CM_LN_AddOn_Deduct_Amt;

    // PAR.TH CM Carcass Gross Amt = PAR.TH CM Carcass Gross Amt + DB1.TH CM Carcass Gross Amt
    PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CM_Carcass_Gross_Amt + DB1.TH_CM_Carcass_Gross_Amt;

    // PAR.TH Carcass Net Amt = PAR.TH Carcass Net Amt + DB1.TH Carcass Net Amt
    PAR.TH_Carcass_Net_Amt = PAR.TH_Carcass_Net_Amt + DB1.TH_Carcass_Net_Amt;

    // PAR.TH Payment Gross = PAR.TH Payment Gross + DB1.TH Payment Gross
    PAR.TH_Payment_Gross = PAR.TH_Payment_Gross + DB1.TH_Payment_Gross;

    // PAR.Th Payment Net Amt = PAR.Th Payment Net Amt + DB1.Th Payment Net Amt
    PAR.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt + DB1.Th_Payment_Net_Amt;

    // Wgt USR =       * Lean % * Wgt USR
    PAR.Lean_Wgt_USR = PAR.Lean_Wgt_USR + ( DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt 'H' );

    // Wgt USR =       * Backfat * Wgt USR
    PAR.Backfat_Wgt_USR = PAR.Backfat_Wgt_USR + ( DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt 'H' );

    // Wgt USR =       * Loin-Eye * Wgt USR
    PAR.Loin_Eye_Wgt_USR = PAR.Loin_Eye_Wgt_USR + ( DB1.TH_Avg_Loin_Eye_Depth
    * DB1.TH_Hot_Wgt 'H' );

    // Wgt USR 2 =       * Backfat2 * Wgt USR
    PAR.Backfat_Wgt_USR_2 = PAR.Backfat_Wgt_USR_2 + ( DB1.TH_Avg_Backfat_2_Dec
    * DB1.TH_Hot_Wgt 'H' );

    // Wgt USR 2 =       * Loin-Eye2 * Wgt USR
    PAR.Loin_Eye_Wgt_USR_2 = PAR.Loin_Eye_Wgt_USR_2 + ( DB1.TH_Avg_Loin_Eye_2_dec
    * DB1.TH_Hot_Wgt 'H' );

    // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.TH Deduction Amt
    PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.TH_Deduction_Amt;

    // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.TH Additions Amt
    PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.TH_Additions_Amt;

    //?Analysis to Payments
    CASE;

    // IF PAR.Print Carcass Analysis Us is Yes
    IF PAR.Print_Carcass_Analysis_Us = 'Y';

    EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1177503;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(WRK.TH_CA_Base_Mkt_Price_Amt);
    PARAMETER(WRK.TH_CA_Sort_Discount_Amt);
    PARAMETER(WRK.TH_CA_Yield_Gain_Loss_Amt);
    PARAMETER(WRK.TH_CA_Base_Carcass_Value);
    PARAMETER(WRK.TH_CA_Lean_Premium_Amt);
    PARAMETER(WRK.TH_CA_Carcass_Gross_Amt);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.TH CA Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt + WRK.TH CA Base Mkt
    PAR.TH_CA_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt
    + WRK.TH_CA_Base_Mkt_Price_Amt;

    // PAR.TH CA Sort Discount Amt = PAR.TH CA Sort Discount Amt + WRK.TH CA Sort Disco
    PAR.TH_CA_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt + WRK.TH_CA_Sort_Discount_Amt;

    // PAR.TH CA Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt + WRK.TH CA Yield
    PAR.TH_CA_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt
    + WRK.TH_CA_Yield_Gain_Loss_Amt;

    // PAR.TH CA Base Carcass Value = PAR.TH CA Base Carcass Value + WRK.TH CA Base Car
    PAR.TH_CA_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value
    + WRK.TH_CA_Base_Carcass_Value;

    // PAR.TH CA Lean Premium Amt = PAR.TH CA Lean Premium Amt + WRK.TH CA Lean Premium
    PAR.TH_CA_Lean_Premium_Amt = PAR.TH_CA_Lean_Premium_Amt + WRK.TH_CA_Lean_Premium_Amt;

    // PAR.TH CA Carcass Gross Amt = PAR.TH CA Carcass Gross Amt + WRK.TH CA Carcass Gr
    PAR.TH_CA_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt + WRK.TH_CA_Carcass_Gross_Amt;

    ENDIF;

    //?PK0166 - New fields
    // PAR.TH Head Excluded = PAR.TH Head Excluded + DB1.TH Head Excluded
    PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + DB1.TH_Head_Excluded;

    // PAR.TH Excluded Gross Value = PAR.TH Excluded Gross Value + DB1.TH Excluded Gross Value
    PAR.TH_Excluded_Gross_Value = PAR.TH_Excluded_Gross_Value + DB1.TH_Excluded_Gross_Value;

    // PAR.TH Excluded Carc Val = PAR.TH Excluded Carc Val + DB1.TH Excluded Carc Val
    PAR.TH_Excluded_Carc_Val = PAR.TH_Excluded_Carc_Val + DB1.TH_Excluded_Carc_Val;

    // PAR.TH Excluded Premium = PAR.TH Excluded Premium + DB1.TH Excluded Premium
    PAR.TH_Excluded_Premium = PAR.TH_Excluded_Premium + DB1.TH_Excluded_Premium;

    // PAR.TH Head Adjusted-LN% = PAR.TH Head Adjusted-LN% + DB1.TH Head Adjusted-LN%
    PAR.TH_Head_Adjusted_LN = PAR.TH_Head_Adjusted_LN + DB1.TH_Head_Adjusted_LN;

    // PAR.TH PHA Head Adds = PAR.TH PHA Head Adds + DB1.TH PHA Head Adds
    PAR.TH_PHA_Head_Adds = PAR.TH_PHA_Head_Adds + DB1.TH_PHA_Head_Adds;

    //?050108 slm get TH Fixed Cost Amount
    // PAR.TH Fixed Cost Amount = PAR.TH Fixed Cost Amount + DB1.TH Fixed Cost Amount
    PAR.TH_Fixed_Cost_Amount = PAR.TH_Fixed_Cost_Amount + DB1.TH_Fixed_Cost_Amount;

    // PAR.TH Meat Value Factor Amt = PAR.TH Meat Value Factor Amt + DB1.TH Meat Value Factor Amt
    PAR.TH_Meat_Value_Factor_Amt = PAR.TH_Meat_Value_Factor_Amt
    + DB1.TH_Meat_Value_Factor_Amt;

    //?USER: Exit processing

    //?Analysis to Payments
    CASE;

    // IF PAR.Print Carcass Analysis Us is Yes
    IF PAR.Print_Carcass_Analysis_Us = 'Y';

    // PAR.TH CM Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt
    PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt;

    // PAR.TH CM Sort Discount Amt = PAR.TH CA Sort Discount Amt
    PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt;

    // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt
    PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt;

    // PAR.TH CM Base Carcass Value = PAR.TH CA Base Carcass Value
    PAR.TH_CM_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value;

    // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CA Lean Premium Amt
    PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CA_Lean_Premium_Amt;

    // PAR.TH CM Carcass Gross Amt = PAR.TH CA Carcass Gross Amt
    PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt;

    ENDIF;

   }

   //?Calculate Live /CWT and Carc /CWT
   CASE;

   // IF WRK.#Sequence Block is NULL
   IF WRK.#Sequence_Block = *BLANK;

   //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
   CASE;

   // IF PAR.TH Hot Wgt NE WRK.Zero USR
   IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

   // TH CM Bse Mkt Carc /CWT
   PAR.TH_CM_Bse_Mkt_Carc_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
   'H';

   // TH CM Srt Dsc Carc /CWT
   PAR.TH_CM_Srt_Dsc_Carc_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
   'H';

   // TH CM Crc Val Carc /CWT
   WRK.TH_CM_Crc_Val_Carc_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Hot_Wgt / 100 'H' )
   'H';

   // PAR.TH CM Crc Val Carc /CWT = WRK.TH CM Crc Val Carc /CWT
   PAR.TH_CM_Crc_Val_Carc_CWT = WRK.TH_CM_Crc_Val_Carc_CWT;

   // TH CM Lean Prem Carc /CWT
   PAR.TH_CM_Lean_Prem_Carc_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Hot_Wgt / 100
   'H' ) 'H';

   // TH CM Gross Carc /CWT
   PAR.TH_CM_Gross_Carc_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
   'H';

   //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH CM Bse Mkt Carc /CWT = CON.*ZERO
   PAR.TH_CM_Bse_Mkt_Carc_CWT = *ZERO;

   // PAR.TH CM Srt Dsc Carc /CWT = CON.*ZERO
   PAR.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

   // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
   PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

   // PAR.TH CM Crc Val Carc /CWT = CON.*ZERO
   PAR.TH_CM_Crc_Val_Carc_CWT = *ZERO;

   // PAR.TH CM Lean Prem Carc /CWT = CON.*ZERO
   PAR.TH_CM_Lean_Prem_Carc_CWT = *ZERO;

   // PAR.TH CM Gross Carc /CWT = CON.*ZERO
   PAR.TH_CM_Gross_Carc_CWT = *ZERO;

   ENDIF;

   //?Calculate Live/CWT if Par.Th live wt is n= 0
   CASE;

   // IF PAR.TH Live Wgt NE WRK.Zero USR
   IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

   // TH CM Bse Mkt Live /CWT
   PAR.TH_CM_Bse_Mkt_Live_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
   'H';

   // TH CM Srt Dsc Live /CWT
   PAR.TH_CM_Srt_Dsc_Live_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
   'H';

   // TH CM Yld G/L live /CWT
   PAR.TH_CM_Yld_G_L_Live_CWT = PAR.TH_CM_Yield_Gain_Loss_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
   'H';

   // TH CM Crc Val Live /CWT
   PAR.TH_CM_Crc_Val_Live_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Live_Wgt / 100 'H' )
   'H';

   // TH CM Lean Prem Live /CWT
   PAR.TH_CM_Lean_Prem_Live_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Live_Wgt / 100
   'H' ) 'H';

   // TH CM Gross Live /CWT
   PAR.TH_CM_Gross_Live_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
   'H';

   //?Calculate Live/CWT if Par.Th live wt is n= 0
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH CM Bse Mkt Live /CWT = CON.*ZERO
   PAR.TH_CM_Bse_Mkt_Live_CWT = *ZERO;

   // PAR.TH CM Srt Dsc Live /CWT = CON.*ZERO
   PAR.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

   // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
   PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

   // PAR.TH CM Crc Val Live /CWT = CON.*ZERO
   PAR.TH_CM_Crc_Val_Live_CWT = *ZERO;

   // PAR.TH CM Lean Prem Live /CWT = CON.*ZERO
   PAR.TH_CM_Lean_Prem_Live_CWT = *ZERO;

   // PAR.TH CM Gross Live /CWT = CON.*ZERO
   PAR.TH_CM_Gross_Live_CWT = *ZERO;

   ENDIF;

   ENDIF;

   //?Calc Avg Live Wt
   CASE;

   // IF PAR.TH Head Received is *Zeros
   IF PAR.TH_Head_Received = *ZERO;

   // WRK.TH Avg Live Wgt = CON.*ZERO
   WRK.TH_Avg_Live_Wgt = *ZERO;

   //?Calc Avg Live Wt
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.TH Avg Live Wgt = PAR.TH Live Wgt / PAR.TH Head Received *
   WRK.TH_Avg_Live_Wgt = PAR.TH_Live_Wgt / PAR.TH_Head_Received;

   ENDIF;

   //?Calc Adj Live Weight
   CASE;

   // IF PAR.TH Head Received EQ PAR.TH Head Killed
   IF PAR.TH_Head_Received = PAR.TH_Head_Killed;

   // WRK.TH Adj Live Wgt = PAR.TH Live Wgt
   WRK.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt;

   //?Calc Adj Live Weight
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.TH Adj Live Wgt = PAR.TH Head Killed * WRK.TH Avg Live Wgt *
   WRK.TH_Adj_Live_Wgt = PAR.TH_Head_Killed * WRK.TH_Avg_Live_Wgt;

   ENDIF;

   // PAR.TH Avg Live Wgt = WRK.TH Avg Live Wgt
   PAR.TH_Avg_Live_Wgt = WRK.TH_Avg_Live_Wgt;

   // PAR.TH Adj Live Wgt = WRK.TH Adj Live Wgt
   PAR.TH_Adj_Live_Wgt = WRK.TH_Adj_Live_Wgt;

   //?Calc Actual Yield %
   CASE;

   // IF PAR.TH Live Wgt NE WRK.Zero USR
   IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

   // TH Actual Yield %
   PAR.TH_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

   //?Calc Actual Yield %
   // IF *OTHERWISE
   IF *OTHERWISE;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.TH_Actual_Yield = *ZERO;

   ENDIF;

   //?Calc Adj Actual Yield %
   CASE;

   // IF PAR.TH Adj Live Wgt NE WRK.Zero USR
   IF PAR.TH_Adj_Live_Wgt <> WRK.Zero_USR;

   // TH Adj Actual Yield %
   PAR.TH_Adj_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Adj_Live_Wgt 'H' ) * 100 'H';

   //?Calc Adj Actual Yield %
   // IF *OTHERWISE
   IF *OTHERWISE;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.TH_Adj_Actual_Yield = *ZERO;

   ENDIF;

   //?Calc Avg Hot Wt
   CASE;

   // IF PAR.TH Head Killed NE WRK.Zero USR
   IF PAR.TH_Head_Killed <> WRK.Zero_USR;

   // PAR.TH Avg Hot Wgt = PAR.TH Hot Wgt / PAR.TH Head Killed *Rounded
   PAR.TH_Avg_Hot_Wgt = PAR.TH_Hot_Wgt / PAR.TH_Head_Killed 'H';

   //?Calc Avg Hot Wt
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Avg Hot Wgt = CON.*ZERO
   PAR.TH_Avg_Hot_Wgt = *ZERO;

   ENDIF;

   //?Calc Avg Lean %, Loin eye, & Backfat
   CASE;

   // IF PAR.TH Hot Wgt NE WRK.Zero USR
   IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

   // PAR.TH Avg Lean Percent = PAR.Lean % * Wgt USR / PAR.TH Hot Wgt *Rounded
   PAR.TH_Avg_Lean_Percent = PAR.Lean_Wgt_USR / PAR.TH_Hot_Wgt 'H';

   // PAR.TH Avg Loin Eye Depth = PAR.Loin-Eye * Wgt USR / PAR.TH Hot Wgt *Rounded
   PAR.TH_Avg_Loin_Eye_Depth = PAR.Loin_Eye_Wgt_USR / PAR.TH_Hot_Wgt 'H';

   // PAR.TH Avg Backfat = PAR.Backfat * Wgt USR / PAR.TH Hot Wgt *Rounded
   PAR.TH_Avg_Backfat = PAR.Backfat_Wgt_USR / PAR.TH_Hot_Wgt 'H';

   // PAR.TH Avg Loin Eye - 2 dec = PAR.Loin-Eye * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
   PAR.TH_Avg_Loin_Eye_2_dec = PAR.Loin_Eye_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

   // PAR.TH Avg Backfat - 2 Dec = PAR.Backfat * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
   PAR.TH_Avg_Backfat_2_Dec = PAR.Backfat_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

   //?Calc Avg Lean %, Loin eye, & Backfat
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Avg Lean Percent = CON.*ZERO
   PAR.TH_Avg_Lean_Percent = *ZERO;

   // PAR.TH Avg Loin Eye Depth = CON.*ZERO
   PAR.TH_Avg_Loin_Eye_Depth = *ZERO;

   // PAR.TH Avg Backfat = CON.*ZERO
   PAR.TH_Avg_Backfat = *ZERO;

   // PAR.TH Avg Loin Eye - 2 dec = CON.*ZERO
   PAR.TH_Avg_Loin_Eye_2_dec = *ZERO;

   // PAR.TH Avg Backfat - 2 Dec = CON.*ZERO
   PAR.TH_Avg_Backfat_2_Dec = *ZERO;

   ENDIF;

   // TH FFLI
   PAR.TH_FFLI = ( 51.537 + ( .035 * PAR.TH_Hot_Wgt ) ) - ( 12.26 * PAR.TH_Avg_Backfat );

  }

  // WRK.Net Ded/Add amount    USR = WRK.TH Additions Amt - WRK.TH Deduction Amt
  WRK.Net_Ded_Add_amount_USR = WRK.TH_Additions_Amt - WRK.TH_Deduction_Amt;

  // WRK.VCD Net Amt = WRK.Th Payment Net Amt
  WRK.VCD_Net_Amt = WRK.Th_Payment_Net_Amt;

  //?Header Totals
  // WRK.VCH Gross Amt = WRK.VCH Gross Amt + WRK.TH Payment Gross
  WRK.VCH_Gross_Amt = WRK.VCH_Gross_Amt + WRK.TH_Payment_Gross;

  // WRK.VCH Net Amt = WRK.VCH Net Amt + WRK.Th Payment Net Amt
  WRK.VCH_Net_Amt = WRK.VCH_Net_Amt + WRK.Th_Payment_Net_Amt;

  // WRK.VCH Deduction Amt = WRK.VCH Deduction Amt + WRK.Net Ded/Add amount    USR
  WRK.VCH_Deduction_Amt = WRK.VCH_Deduction_Amt + WRK.Net_Ded_Add_amount_USR;

  //?If carcass payment, output carcass related fields; else zero them out
  CASE;

  // IF PAR.TH Payment Type is Carcass Merit
  IF PAR.TH_Payment_Type = 'C';

  // WRK.VCH Base Mkt Price Amt = WRK.VCH Base Mkt Price Amt + WRK.TH CM Base Mkt Pri
  WRK.VCH_Base_Mkt_Price_Amt = WRK.VCH_Base_Mkt_Price_Amt + WRK.TH_CM_Base_Mkt_Price_Amt;

  // WRK.VCH Sort Disc Amt = WRK.VCH Sort Disc Amt + WRK.TH CM Sort Discount Amt
  WRK.VCH_Sort_Disc_Amt = WRK.VCH_Sort_Disc_Amt + WRK.TH_CM_Sort_Discount_Amt;

  // WRK.VCH Yield Gain/Loss Amt = WRK.VCH Yield Gain/Loss Amt + WRK.TH CM Yield Gain
  WRK.VCH_Yield_Gain_Loss_Amt = WRK.VCH_Yield_Gain_Loss_Amt
  + WRK.TH_CM_Yield_Gain_Loss_Amt;

  // WRK.VCH Base Carcass Value = WRK.VCH Base Carcass Value + WRK.TH CM Base Carcass
  WRK.VCH_Base_Carcass_Value = WRK.VCH_Base_Carcass_Value + WRK.TH_CM_Base_Carcass_Value;

  // WRK.VCH LN Add on/Deduct Amt = WRK.VCH LN Add on/Deduct Amt + WRK.TH CM LN AddOn
  WRK.VCH_LN_Add_on_Deduct_Amt = WRK.VCH_LN_Add_on_Deduct_Amt
  + WRK.TH_CM_LN_AddOn_Deduct_Amt;

  //?If carcass payment, output carcass related fields; else zero them out
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH CM Base Mkt Price Amt = CON.*ZERO
  WRK.TH_CM_Base_Mkt_Price_Amt = *ZERO;

  // WRK.TH CM Sort Discount Amt = CON.*ZERO
  WRK.TH_CM_Sort_Discount_Amt = *ZERO;

  // WRK.TH CM Yield Gain/Loss Amt = CON.*ZERO
  WRK.TH_CM_Yield_Gain_Loss_Amt = *ZERO;

  // WRK.TH CM Base Carcass Value = CON.*ZERO
  WRK.TH_CM_Base_Carcass_Value = *ZERO;

  // WRK.TH CM LN AddOn/Deduct Amt = CON.*ZERO
  WRK.TH_CM_LN_AddOn_Deduct_Amt = *ZERO;

  ENDIF;

  //?Accum total Tattoo amounts into work fields for Voucher Header
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Net Ded/Add amount    USR = PAR.TH Additions Amt - PAR.TH Deduction Amt
  WRK.Net_Ded_Add_amount_USR = PAR.TH_Additions_Amt - PAR.TH_Deduction_Amt;

  // WRK.VCD Net Amt = PAR.Th Payment Net Amt
  WRK.VCD_Net_Amt = PAR.Th_Payment_Net_Amt;

  //?Header Totals
  // WRK.VCH Gross Amt = WRK.VCH Gross Amt + PAR.TH Payment Gross
  WRK.VCH_Gross_Amt = WRK.VCH_Gross_Amt + PAR.TH_Payment_Gross;

  // WRK.VCH Net Amt = WRK.VCH Net Amt + PAR.Th Payment Net Amt
  WRK.VCH_Net_Amt = WRK.VCH_Net_Amt + PAR.Th_Payment_Net_Amt;

  // WRK.VCH Deduction Amt = WRK.VCH Deduction Amt + WRK.Net Ded/Add amount    USR
  WRK.VCH_Deduction_Amt = WRK.VCH_Deduction_Amt + WRK.Net_Ded_Add_amount_USR;

  //?If Carcass payment, output carcass related fields; else zero them out
  CASE;

  // IF PAR.TH Payment Type is Carcass Merit
  IF PAR.TH_Payment_Type = 'C';

  // WRK.VCH Base Mkt Price Amt = WRK.VCH Base Mkt Price Amt + PAR.TH CM Base Mkt Pri
  WRK.VCH_Base_Mkt_Price_Amt = WRK.VCH_Base_Mkt_Price_Amt + PAR.TH_CM_Base_Mkt_Price_Amt;

  // WRK.VCH Sort Disc Amt = WRK.VCH Sort Disc Amt + PAR.TH CM Sort Discount Amt
  WRK.VCH_Sort_Disc_Amt = WRK.VCH_Sort_Disc_Amt + PAR.TH_CM_Sort_Discount_Amt;

  // WRK.VCH Yield Gain/Loss Amt = WRK.VCH Yield Gain/Loss Amt + PAR.TH CM Yield Gain
  WRK.VCH_Yield_Gain_Loss_Amt = WRK.VCH_Yield_Gain_Loss_Amt
  + PAR.TH_CM_Yield_Gain_Loss_Amt;

  // WRK.VCH Base Carcass Value = WRK.VCH Base Carcass Value + PAR.TH CM Base Carcass
  WRK.VCH_Base_Carcass_Value = WRK.VCH_Base_Carcass_Value + PAR.TH_CM_Base_Carcass_Value;

  // WRK.VCH LN Add on/Deduct Amt = WRK.VCH LN Add on/Deduct Amt + PAR.TH CM LN AddOn
  WRK.VCH_LN_Add_on_Deduct_Amt = WRK.VCH_LN_Add_on_Deduct_Amt
  + PAR.TH_CM_LN_AddOn_Deduct_Amt;

  // WRK.TH CM Base Mkt Price Amt = PAR.TH CM Base Mkt Price Amt
  WRK.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price_Amt;

  // WRK.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt
  WRK.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt;

  // WRK.TH CM Yield Gain/Loss Amt = PAR.TH CM Yield Gain/Loss Amt
  WRK.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CM_Yield_Gain_Loss_Amt;

  // WRK.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value
  WRK.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value;

  // WRK.TH CM LN AddOn/Deduct Amt = PAR.TH CM LN AddOn/Deduct Amt
  WRK.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CM_LN_AddOn_Deduct_Amt;

  //?If Carcass payment, output carcass related fields; else zero them out
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH CM Base Mkt Price Amt = CON.*ZERO
  WRK.TH_CM_Base_Mkt_Price_Amt = *ZERO;

  // WRK.TH CM Sort Discount Amt = CON.*ZERO
  WRK.TH_CM_Sort_Discount_Amt = *ZERO;

  // WRK.TH CM Yield Gain/Loss Amt = CON.*ZERO
  WRK.TH_CM_Yield_Gain_Loss_Amt = *ZERO;

  // WRK.TH CM Base Carcass Value = CON.*ZERO
  WRK.TH_CM_Base_Carcass_Value = *ZERO;

  // WRK.TH CM LN AddOn/Deduct Amt = CON.*ZERO
  WRK.TH_CM_LN_AddOn_Deduct_Amt = *ZERO;

  ENDIF;

  // WRK.Th Payment Net Amt = PAR.Th Payment Net Amt
  WRK.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt;

  // WRK.TH Payment Gross = PAR.TH Payment Gross
  WRK.TH_Payment_Gross = PAR.TH_Payment_Gross;

  //?IF NOT HELD OVER THEN USE HEAD COUNT FROM PAR
  // WRK.TH Head Received = PAR.TH Head Received
  WRK.TH_Head_Received = PAR.TH_Head_Received;

  // WRK.TH Head Killed = PAR.TH Head Killed
  WRK.TH_Head_Killed = PAR.TH_Head_Killed;

  ENDIF;

  //?If Split producer - calc split amt and new net amount
  CASE;

  // IF WRK.VCH Split % is Not 100 %
  IF WRK.VCH_Split <> 100;

  // WRK.Percent Decimal       USR = WRK.VCH Split % / CON.100 *
  WRK.Percent_Decimal_USR = WRK.VCH_Split / 100;

  // WRK.VCD Net Amt = WRK.Percent Decimal       USR * WRK.Th Payment Net Amt *Rounde
  WRK.VCD_Net_Amt = WRK.Percent_Decimal_USR * WRK.Th_Payment_Net_Amt 'H';

  // WRK.VCD Less Split Amount = WRK.VCD Net Amt - WRK.Th Payment Net Amt
  WRK.VCD_Less_Split_Amount = WRK.VCD_Net_Amt - WRK.Th_Payment_Net_Amt;

  // WRK.VCH Less Split Amount = WRK.VCH Less Split Amount + WRK.VCD Less Split Amoun
  WRK.VCH_Less_Split_Amount = WRK.VCH_Less_Split_Amount + WRK.VCD_Less_Split_Amount;

  // WRK.VCH Net Amt = WRK.VCH Net Amt + WRK.VCD Less Split Amount
  WRK.VCH_Net_Amt = WRK.VCH_Net_Amt + WRK.VCD_Less_Split_Amount;

  //?(Split amount is negative in voucher header,detail files.)
  ENDIF;

  EXECUTE FUNCTION(Rtv BOH Py Typ,BO Typ RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1145157;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(WRK.BOH_Payment_Type);
  PARAMETER(WRK.BOH_Buy_Order_Type);
  {
   //?USER: Processing if Data record not found

   // PAR.BOH Payment Type = CND.Live
   PAR.BOH_Payment_Type = 'L';

   // PAR.BOH Buy Order Type = CND.Open Market
   PAR.BOH_Buy_Order_Type = 'O';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.HC Description = Condition name of PAR.TH Hog Class Type
  WRK.HC_Description = RTVCND(PAR.TH_Hog_Class_Type);

  // WRK.Tattoo Nbr 4          USR = PAR.TH Tattoo Number
  WRK.Tattoo_Nbr_4_USR = PAR.TH_Tattoo_Number;

  // WRK.Tattoo Nbr Alpha 4    USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
  WRK.Tattoo_Nbr_Alpha_4_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

  // WRK.VCD Check Description = CONCAT(WRK.Tattoo Nbr Alpha 4    USR,WRK.HC Descript
  WRK.VCD_Check_Description = WRK.Tattoo_Nbr_Alpha_4_USR + WRK.HC_Description (2);

  // WRK.VCD Hog Class Type = PAR.TH Hog Class Type
  WRK.VCD_Hog_Class_Type = PAR.TH_Hog_Class_Type;

  //?TATTOO ACTION OF CARCASS TO LIVE, OR LIVE TO CARCASS
  CASE;

  // IF WRK.BOH Payment Type NE PAR.TH Payment Type
  IF WRK.BOH_Payment_Type <> PAR.TH_Payment_Type;

  CASE;

  // IF PAR.TH Hog Class Type is Not Subject
  IF PAR.TH_Hog_Class_Type = 'M'/'R';

  CASE;

  // IF PAR.TH Payment Type is Live
  IF PAR.TH_Payment_Type = 'L';

  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('CL');
  PARAMETER(*BLANK);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('LC');
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

  ENDIF;

  //?fp1284 get the Source Contract Type
  EXECUTE FUNCTION(Rtv Prdcr Vnd#,Src,CntRT) TYPE(RTVOBJ) FILE(PKACREP)           AB1289978;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(NLL.PD_VND_Address_Number);
  PARAMETER(NLL.SR_Source_Code);
  PARAMETER(WRK.SR_Source_Contract_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv Src Cntrt Type    RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1289967;
   PARAMETER(DB1.SR_Source_Code);
   PARAMETER(PAR.SR_Source_Contract_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  //?SDN440 10/07/21 Added this to format the supplier like we do for M3
  //?Format Supplier invoice number -  prints on check stub  SDN440 added
  CASE;

  // IF PAR.BOH Company Number is Greater Then *zero
  IF PAR.BOH_Company_Number > *ZERO;

  // LCL.Buy Order Number Alpha = PAR.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = PAR.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = PAR.BOL Load Number
  LCL.Buy_Order_Load_4_USR = PAR.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = PAR.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = PAR.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  ENDIF;

  EXECUTE FUNCTION(Crt Voucher Detail    CR) TYPE(CRTOBJ) FILE(PKBLCPP)           AB1102231;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(WRK.VCD_Line);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
  PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(WRK.TH_CM_Base_Carcass_Value);
  PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(WRK.TH_Payment_Gross);
  PARAMETER(WRK.Net_Ded_Add_amount_USR);
  PARAMETER(WRK.VCD_Less_Split_Amount);
  PARAMETER(WRK.VCD_Net_Amt);
  PARAMETER(WRK.VCH_Split);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(WRK.VCD_Hog_Class_Type);
  PARAMETER(WRK.BOH_Buy_Order_Type);
  PARAMETER(WRK.SR_Source_Contract_Type);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(WRK.VCD_Check_Description);
  PARAMETER(WRK.TH_Head_Received);
  PARAMETER(WRK.TH_Head_Killed);
  PARAMETER(WRK.VCD_Push_Payment_Status);
  PARAMETER(WRK.VCD_Repayment_Flag);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing after Data update

   CASE;

   // IF DB1.VCD Split Percent is 100 %
   IF DB1.VCD_Split_Percent = 100;

   // Call program Crt Tattoo Action Comm XF.
   CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER('CV');
   PARAMETER(*BLANK);

   ENDIF;

  }

 }

 //?USER: Exit processing

 EXECUTE FUNCTION(Crt Live Vchr Totals  IF) TYPE(EXCINTFUN)                      AB1147421;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.VCH_Batch_Number);
 PARAMETER(PAR.VCH_Header_Number);
 PARAMETER(WRK.VCH_Base_Mkt_Price_Amt);
 PARAMETER(WRK.VCH_Sort_Disc_Amt);
 PARAMETER(WRK.VCH_Yield_Gain_Loss_Amt);
 PARAMETER(WRK.VCH_Base_Carcass_Value);
 PARAMETER(WRK.VCH_LN_Add_on_Deduct_Amt);
 PARAMETER(WRK.VCH_Gross_Amt);
 PARAMETER(WRK.VCH_Deduction_Amt);
 PARAMETER(WRK.VCH_Less_Split_Amount);
 PARAMETER(WRK.VCH_Net_Amt);
 PARAMETER('O');
 PARAMETER(WRK.VCD_Base_Mkt_Price_Amt);
 PARAMETER(WRK.VCD_Sort_Disc_Amt);
 PARAMETER(WRK.VCD_Yield_Gain_Loss);
 PARAMETER(WRK.VCD_Base_Carcass_Value);
 PARAMETER(WRK.VCD_LN_Add_on_Deduct_Amt);
 PARAMETER(WRK.VCD_Gross_Amt);
 PARAMETER(WRK.VCD_Less_Split_Amount);
 PARAMETER(WRK.VCD_Net_Amt);
 PARAMETER(PAR.@Status_Yes_No);
 PARAMETER(WRK.Net_Ded_Add_amount_USR);
 {
  //?Execute internal function

  CASE;

  // IF WRK.Producer Code         USR NE WRK.Blank USR
  IF WRK.Producer_Code_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv/Chg Voucher Hdr   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1142817;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(PAR.VCH_Base_Mkt_Price_Amt);
  PARAMETER(PAR.VCH_Sort_Disc_Amt);
  PARAMETER(PAR.VCH_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.VCH_Base_Carcass_Value);
  PARAMETER(PAR.VCH_LN_Add_on_Deduct_Amt);
  PARAMETER(PAR.VCH_Gross_Amt);
  PARAMETER(PAR.VCH_Deduction_Amt);
  PARAMETER(PAR.VCH_Less_Split_Amount);
  PARAMETER(PAR.VCH_Net_Amt);
  PARAMETER(PAR.VCH_Process_Status);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Voucher Header    CH) TYPE(CHGOBJ) FILE(PKBKCPP)           AB1102569;
   PARAMETER(DB1.VCH_Company_number);
   PARAMETER(DB1.VCH_Batch_Number);
   PARAMETER(DB1.VCH_Header_Number);
   PARAMETER(DB1.VCH_AP_Address_Number);
   PARAMETER(DB1.VCH_AP_Voucher_Number);
   PARAMETER(DB1.VCH_Payee_Type);
   PARAMETER(DB1.VCH_Manual_Check_Number);
   PARAMETER(DB1.VCH_Manual_Check_Date);
   PARAMETER(PAR.VCH_Base_Mkt_Price_Amt);
   PARAMETER(PAR.VCH_Sort_Disc_Amt);
   PARAMETER(PAR.VCH_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.VCH_Base_Carcass_Value);
   PARAMETER(PAR.VCH_LN_Add_on_Deduct_Amt);
   PARAMETER(PAR.VCH_Gross_Amt);
   PARAMETER(PAR.VCH_Deduction_Amt);
   PARAMETER(PAR.VCH_Less_Split_Amount);
   PARAMETER(PAR.VCH_Net_Amt);
   PARAMETER(DB1.VCH_Split);
   PARAMETER(DB1.VCH_Split_Check_Sts);
   PARAMETER(PAR.VCH_Process_Status);
   PARAMETER(DB1.VCH_G_L_Date);
   PARAMETER(DB1.VCH_Check_Type);
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.TRK_Trucker_Code);
   PARAMETER(DB1.VR_Reason_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  // PAR.@Status (Yes/No) = CND.Yes
  PAR.@Status_Yes_No = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Status (Yes/No) = CND.No
  PAR.@Status_Yes_No = 'N';

  ENDIF;

  // PAR.VCD Gross Amt = CON.*ZERO
  PAR.VCD_Gross_Amt = *ZERO;

  // PAR.VCD Net Amt = CON.*ZERO
  PAR.VCD_Net_Amt = *ZERO;

  // PAR.VCD Less Split Amount = CON.*ZERO
  PAR.VCD_Less_Split_Amount = *ZERO;

  // PAR.VCD Base Mkt Price Amt = CON.*ZERO
  PAR.VCD_Base_Mkt_Price_Amt = *ZERO;

  // PAR.VCD Sort Disc Amt = CON.*ZERO
  PAR.VCD_Sort_Disc_Amt = *ZERO;

  // PAR.VCD Yield Gain/Loss = CON.*ZERO
  PAR.VCD_Yield_Gain_Loss = *ZERO;

  // PAR.VCD Base Carcass Value = CON.*ZERO
  PAR.VCD_Base_Carcass_Value = *ZERO;

  // PAR.VCD LN Add on/Deduct Amt = CON.*ZERO
  PAR.VCD_LN_Add_on_Deduct_Amt = *ZERO;

  // PAR.Net Ded/Add amount    USR = CON.*ZERO
  PAR.Net_Ded_Add_amount_USR = *ZERO;

  // PAR.VCH Gross Amt = CON.*ZERO
  PAR.VCH_Gross_Amt = *ZERO;

  // PAR.VCH Net Amt = CON.*ZERO
  PAR.VCH_Net_Amt = *ZERO;

  // PAR.VCH Deduction Amt = CON.*ZERO
  PAR.VCH_Deduction_Amt = *ZERO;

  // PAR.VCH Less Split Amount = CON.*ZERO
  PAR.VCH_Less_Split_Amount = *ZERO;

  // PAR.VCH Base Mkt Price Amt = CON.*ZERO
  PAR.VCH_Base_Mkt_Price_Amt = *ZERO;

  // PAR.VCH Sort Disc Amt = CON.*ZERO
  PAR.VCH_Sort_Disc_Amt = *ZERO;

  // PAR.VCH Yield Gain/Loss Amt = CON.*ZERO
  PAR.VCH_Yield_Gain_Loss_Amt = *ZERO;

  // PAR.VCH Base Carcass Value = CON.*ZERO
  PAR.VCH_Base_Carcass_Value = *ZERO;

  // PAR.VCH LN Add on/Deduct Amt = CON.*ZERO
  PAR.VCH_LN_Add_on_Deduct_Amt = *ZERO;

 }

}


