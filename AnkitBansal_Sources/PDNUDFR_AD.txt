// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDNUDFR
// ?Date: 14.08.2025 Time: 03:32:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?**************************************************************************
//?DDSDDL PJ 03/20/2024: File 'Load Header's logical OMFJCPLI is now renamed
//?To OMFJCPMS, that's why re-compiled this function to reference the new nam
//?**************************************************************************
ENDDO;

// PGM.*Scan limit = CND.50000
PGM.*Scan_limit = 50000;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.USR Print Detail = CND.no
PAR.USR_Print_Detail = 'N';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

// PAR.Job Name = SUBSTRING(JOB.*JOB,CON.1,CON.9)
PAR.Job_Name = SUBSTRING(JOB.*JOB:1:9);

// PAR.Job Name = CONCAT(PAR.Job Name,CON.P,CON.*ZERO)
PAR.Job_Name = PAR.Job_Name + 'P' (*ZERO);

// PAR.USR Quit = CND.no
PAR.USR_Quit = 'N';

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(8);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


// PAR.PRT Number of Copies = CON.1
PAR.PRT_Number_of_Copies = 1;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.Live_with_TPM);

//?***** Change log
DO;

//?***************************************************************
//?12/22/22 DN  DO4595 - WI 539 AES to AS400 Integrations
//?- Replaced call PMFXSRR with PUXRSRR to keep track of same Booking#
//?  for all Orders for Load. (Only for opt 13=Edt Ord Exp)
//?- Passed in parm 'Orders have Same Booking#' when calling program
//?  PNVZE2R.
//?***************************************************************
//?S13509 RMC 7/30/2018 chg ctl.company sel from EQ to ** so multi will work
//?***************************************************************
//?E4119 RMC 7/15/2016 For TMS checks, when Live with TMSLDP, check
//?  Load header fld MG Created Load=Y to disable options: 12/13/15
//?and dont send to SSI Download file for MG Created load  8/18
//?E4119 RMC 7/01/2016 check pfs interface "TMSLDP" to control opt 13,
//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?***************************************************************
//?** 10/13/2014 RMC E3329
//?** If record not selected, do a *QUIT to speed it up
//?***************************************************************
//?** 08/07/2013 RMC E2625
//?** TPM - restrict certain options if Live w/TPM
//?***************************************************************
//?** 10/03/2013 RMC P00196
//?** CAT2 - call reg pfs interface
//?***************************************************************
//?** 05/23/12 RMC E2117 PASS export parms to BOL PRint pmt
//?**
//?** 01/31/2012 LJB C001921
//?** Don't fax load confirmation if F3 is pressed to cancel
//?**
//?** 05/25/2011 RMC E01488 (RI) the req dlv date if sls appt confrm exists
//?**
EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?***************************************************************
//?** 04/27/2011 LJB P000737
//?** Change the load confirmation print and load confirmation fax
//?** process. No longer using Pmt Pass Co/Load/Sts UP, calls PDVVUPC
//?** instead and pass the correct parms - hardcoding has been removed
//?** Fax/Print using Work File has been removed
//?** See EXC Load Confirm Fax IF for explanation of new parameters
//?***************************************************************
//?** This is the job stream to get a fax sent out:
//?** Calls PODPUPR, calls PDVVUPC, calls PDVVPCLP which calls PDAMXFR
//?** 01/18/10 PKD E000261 SEND in PAR.Avg Pallet Tare to Gross Wt calcs
//?** If Combos and palletized, subtract Pallet Tare from tare total
//?** 11/05/2008 LJB FP1166
//?** If opt 18 to fax to carrier selected, see if SSI Carrier, if
//?** yes, see if SSI info already sent, if No-create a change record
//?** if Yes-create a change record, download to SSI PowerPro
//?** If opt 2 to Edit Load Header, If Fax=Y, if this is SSI Carrier
//?** send info to SSI PowerPro
//?** 09/05/2008 slm add this enhancement to E00169 email
//?from Rose - asking to include with current project
//?** Highlight the Load company if there are more then one
//?** company on the load
//?** review the multiple company and this field in the database
//?** is either blank or N or Y on current records so since
//?** this field can be blanks then read the load detail
//?** and if the co number from the Load header does not
//?** equal the co number on the load detail then
//?** there are multiple companies on a load-Rev Image co
//?** 08/29/2008 slm E00169
//?** Allow specific user to use the Edt Csr/Dspatch screen
//?** change this program to pass the value of *blanks on
//?** warehouse specific _*blanks = *none
//?** warehouse specific _= W - states this is warehouse specific
//?** 08/21/2008 LJB E00207
//?** Change company selector field to select *EQ if co# is entered.
//?** 08/18/2008 LJB E00207
//?** Add option 12 to calc miles, Add Override Total Load Miles to
//?** Load Header and associated functionality
//?** Highlight miles field if Override Miles is being displayed.
//?** FT683 LJB 12/14/2007
//?** Company # was removed from the Select Order for Export
//?** Instructions pgm. Recompile.
//?** 5/17/06 LJB T00008 - Recompile due to change in the length of the
//?** Fax Number field.
//?** FP1101 LJB 04/09/2007
//?** Use the edtfil from the Order Header Extension
//?3/01/06 RMC Dont dft ctl.Company
//?07/28/06 RMC TFS011 - add ctl sel on Last Stop city,
//?5/17/04 RMC PKTR01 - Co is Load Start Company
//?* 05/15/00 PKD OMS336 Replaced with routine that will include
//?*              the Pallet Tare Weight.
//?OMS169 -  8/26/96 - S. Schertz
//?          Change ' Total Weight' to read 'Net Weight'.
//?          Correct error when selecting by State of last stop
//?OMS184 -  9/09/96 - S. Schertz
//?          States displayed in subfile should relate to state entered in
//?          control record if field is not blank.
//?C3230  - 10/14/97 - P. Lyons
//?          Change so running fax, print interactively;
//?          Use QTEMP for work file
ENDDO;

//?USER: Initialize subfile control

//?FIRST TIME
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?** Re-instated loading the company number on the screen per
//?** request. This is protected if Allow Multi-Company is no
//?RMC  3/1/6 Dont default
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

// CTL.Salesperson Code = PAR.Salesperson Code
CTL.Salesperson_Code = PAR.Salesperson_Code;

ENDIF;

// PAR.Salesperson Code 1 = PAR.Salesperson Code
PAR.Salesperson_Code_1 = PAR.Salesperson_Code;

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// WRK.Numeric 4,0           USR = CON.*ZERO
WRK.Numeric_40_USR = *ZERO;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(CTL.USR_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If load id is entered retrieve delivery date
CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

EXECUTE FUNCTION(RTV Sched ShipDte,Seq  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1451989;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(CTL.Requested_Delivery_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Numeric 4,0           USR = CTL.Schedule Sequence Number
CTL.Numeric_40_USR = CTL.Schedule_Sequence_Number;

// WRK.Numeric 4,0           USR = CTL.Numeric 4,0           USR
WRK.Numeric_40_USR = CTL.Numeric_40_USR;

ENDIF;

// LCL.Ship Method Type USR = CTL.Ship Method Type USR
LCL.Ship_Method_Type_USR = CTL.Ship_Method_Type_USR;

// LCL.USR Warehouse Code = CTL.USR Warehouse Code
LCL.USR_Warehouse_Code = CTL.USR_Warehouse_Code;

SET CURSOR;

//?USER: Initialize subfile record from DBF record

//?If company selection is made, then select only that company
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND DB1.Company Number NE CTL.Company Number
AND DB1.Company_Number <> CTL.Company_Number;

CASE;

// IF DB1.Multi Company Load is no
IF DB1.Multi_Company_Load = 'N';

//?RMC 7/27/06 ADDED THIS CASE FOR MULTI-PICKUP LOADS TO BE SEEN BY BOTH PLTS
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select salesperson if entered.
CASE;

// IF CTL.Salesperson Code is entered
IF CTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Chk Slsprsn on Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1457946;
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_Code_1);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Salesperson Code EQ PAR.Salesperson Code 1
 IF PAR.Salesperson_Code = PAR.Salesperson_Code_1;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Process INC/EXC option
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Load Status EQ WRK.BLANK
IF CTL.Load_Status = WRK.BLANK;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

//?Select only records which match CTL load status
CASE;

// IF DB1.Load Status NE CTL.Load Status
IF DB1.Load_Status <> CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

//?Select only records which do NOT match CTL load status
CASE;

// IF DB1.Load Status EQ CTL.Load Status
IF DB1.Load_Status = CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Fill trailer ID on screen
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Trailer ID USR = DB1.Trailer Id
RCD.Trailer_ID_USR = DB1.Trailer_Id;

ENDIF;

//?Get Last Stop on Order   -- TRF011 scan for ctl.last stop city 7/28/06
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(RCD.USR_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


// RCD.Text USR 5 = WRK.Ship To City
RCD.Text_USR_5 = WRK.Ship_To_City;

CASE;

// IF CTL.Ship To State Code is State code not Blanks
IF CTL.Ship_To_State_Code <> *BLANK;

// AND RCD.USR State Code NE CTL.Ship To State Code
AND RCD.USR_State_Code <> CTL.Ship_To_State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Scan for Ctl.last stop city         TRF011 RMC 7/28/06
CASE;

// IF CTL.Text 5 all caps     USR is Entered
IF CTL.Text_5_all_caps_USR <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(WRK.Ship_To_City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.Text_5_all_caps_USR);
PARAMETER(5);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Restrict on Trailer Id  field
CASE;

// IF CTL.Trailer ID USR NE WRK.BLANK
IF CTL.Trailer_ID_USR <> WRK.BLANK;

CASE;

// IF RCD.Trailer ID USR NE CTL.Trailer ID USR
IF RCD.Trailer_ID_USR <> CTL.Trailer_ID_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Restrict on Delivery Checked field
CASE;

// IF CTL.Status - Y or N is Y/N Values
IF CTL.Status_Y_or_N = 'N'/'Y';

CASE;

// IF RCD.Status - Y or N NE CTL.Status - Y or N
IF RCD.Status_Y_or_N <> CTL.Status_Y_or_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?02/27/08 PKD Gary Martin wants the regular shipping method
//?             instead of the ship method type. Made the Ship Method
//?             Type field and description hidden. Leaving the code
//?             to populate it. Just incase they want it back.
// RCD.Ship Method Type USR = SUBSTRING(RCD.Shipping Method,CON.2,CON.1)
RCD.Ship_Method_Type_USR = SUBSTRING(RCD.Shipping_Method:2:1);

// RCD.Generic Heading 1 - 5 = Condition name of RCD.Ship Method Type USR
RCD.Generic_Heading_1_5 = RTVCND(RCD.Ship_Method_Type_USR);

//?SEL: Ship Method Type
CASE;

// IF CTL.Ship Method Type USR is *ALL values
IF CTL.Ship_Method_Type_USR = 'R'/'T';

CASE;

// IF RCD.Ship Method Type USR NE CTL.Ship Method Type USR
IF RCD.Ship_Method_Type_USR <> CTL.Ship_Method_Type_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(RCD.Load_ID);
PARAMETER(1);
PARAMETER(RCD.USR_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


//?SEL: CTL.USR Warehouse Code
CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

//?SEL: Warehouse Code
CASE;

// IF RCD.USR Warehouse Code NE CTL.USR Warehouse Code
IF RCD.USR_Warehouse_Code <> CTL.USR_Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: CTL.USR Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

//?SEL: Warehouse Code
CASE;

// IF CTL.USR Warehouse Code is Not Blanks
IF CTL.USR_Warehouse_Code <> *BLANK;

CASE;

// IF RCD.USR Warehouse Code NE CTL.USR Warehouse Code
IF RCD.USR_Warehouse_Code <> CTL.USR_Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Setup Delivery Checked field, according to On Time Y/N
CASE;

// IF DB1.On Time - (Y/N) is Y/N Values
IF DB1.On_Time_Y_N = 'N'/'Y';

// RCD.Status - Y or N = CND.yes
RCD.Status_Y_or_N = 'Y';

//?Setup Delivery Checked field, according to On Time Y/N
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Status - Y or N = CND.no
RCD.Status_Y_or_N = 'N';

ENDIF;

//?*-----------------------------------------------------------------*
//?* 05/15/00 PKD OMS336 Include the Pallet Tare Weight.
//?* 01/18/10 LJB E000261 If Combos and palletized, subtract Pallet Tare
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// RCD.Weight Adjust 6.0     USR = PAR.USR Weight Accumulated
RCD.Weight_Adjust_6_0_USR = PAR.USR_Weight_Accumulated;

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

//?Set quit flag when reach last load for rqs delivery date
CASE;

// IF CTL.Requested Delivery Date NE WRK.ZERO
IF CTL.Requested_Delivery_Date <> WRK.ZERO;

CASE;

// IF WRK.Load ID EQ DB1.Load ID
IF WRK.Load_ID = DB1.Load_ID;

// AND WRK.Scheduled Ship Date EQ DB1.Scheduled Ship Date
AND WRK.Scheduled_Ship_Date = DB1.Scheduled_Ship_Date;

// AND WRK.Schedule Sequence Number EQ DB1.Schedule Sequence Number
AND WRK.Schedule_Sequence_Number = DB1.Schedule_Sequence_Number;

// AND WRK.Company Number EQ DB1.Company Number
AND WRK.Company_Number = DB1.Company_Number;

// Execute function Set On Indicator 82    US.
EXECUTE FUNCTION(Set On Indicator 82    US) TYPE(EXCUSRSRC) ('PDEAUFR');
{
 C                     SETON                     82    SETON INDICATOR
}


ENDIF;

ENDIF;

//?Highlight load number if traffic comments exist
EXECUTE FUNCTION(RTV Verify Trffc Cmnts RT) TYPE(RTVOBJ) FILE(PDKECPP)          AC1424786;
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Set Highlight Flag
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// RCD.Include Todays Trans = CND.yes
RCD.Include_Todays_Trans = 'Y';

//?Set Highlight Flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Include Todays Trans = CND.no
RCD.Include_Todays_Trans = 'N';

ENDIF;

// LCL.USR Deadline Deprt Time = DB1.Deadline Departure Time / CON.100 *
LCL.USR_Deadline_Deprt_Time = DB1.Deadline_Departure_Time / 100;

// LCL.USR Truck Depart Time = DB1.Truck Departure Time / CON.100 *
LCL.USR_Truck_Depart_Time = DB1.Truck_Departure_Time / 100;

//?Set Highlight Flag - Sched Ship Date
CASE;

// IF DB1.Truck Departure Date GT DB1.Deadline Departure Date
IF DB1.Truck_Departure_Date > DB1.Deadline_Departure_Date;

// OR DB1.Truck Departure Date EQ DB1.Deadline Departure Date
OR ( DB1.Truck_Departure_Date = DB1.Deadline_Departure_Date;

// AND LCL.USR Truck Depart Time GT LCL.USR Deadline Deprt Time
AND LCL.USR_Truck_Depart_Time > LCL.USR_Deadline_Deprt_Time );

// RCD.USR Status (Y/N) = CND.yes
RCD.USR_Status_Y_N = 'Y';

//?Set Highlight Flag - Sched Ship Date
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Status (Y/N) = CND.no
RCD.USR_Status_Y_N = 'N';

ENDIF;

//?Set Highlight Flag - if Override miles is displayed
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = DB1.Override Total Load Miles
RCD.Total_Miles_40_USR = DB1.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?Set Highlight Flag - if Override miles is displayed
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = DB1.Total Load Miles
RCD.Total_Miles_40_USR = DB1.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

// RCD.Numeric 4,0           USR = RCD.Schedule Sequence Number
RCD.Numeric_40_USR = RCD.Schedule_Sequence_Number;

//?---------------------------------------------------------
//?01/22/08 PKD Added Selection for Ship Method Type
//?---------------------------------------------------------
// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?090508 slm Multiple companies on a load
EXECUTE FUNCTION(Val More Then 1 Co    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1898298;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multiple_Co_Per_Load_Usr);
PARAMETER(RCD.Company_Number);
{
 //?USER: Initialize routine

 // PAR.Multiple Co Per Load Usr = CND.No
 PAR.Multiple_Co_Per_Load_Usr = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Record Not Found
 PGM.*Return_code = 'USR1160';

 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number NE DB1.Company Number
 IF PAR.Company_Number <> DB1.Company_Number;

 // PAR.Multiple Co Per Load Usr = CND.Yes
 PAR.Multiple_Co_Per_Load_Usr = 'Y';

 QUIT;

 ENDIF;

}


//?E01488 RMC See if any stop has a confirmed appt
EXECUTE FUNCTION(Val Appt confirm     RT) TYPE(RTVOBJ) FILE(OMFLCPP)            AC2019548;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.LD_Unused_Date_2);
{
 //?USER: Initialize routine

 // PAR.LD Sls Appt Confirm Dt = CND.Zero
 PAR.LD_Unused_Date_2 = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.LD Sls Appt Confirm Dt is Entered
 IF DB1.LD_Unused_Date_2 > *ZERO;

 // PAR.LD Sls Appt Confirm Dt = DB1.LD Sls Appt Confirm Dt
 PAR.LD_Unused_Date_2 = DB1.LD_Unused_Date_2;

 QUIT;

 ENDIF;

}


ENDIF;

//?CALC: Subfile control function fields

//?SEL: CTL.USR Warehouse Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.USR Warehouse Code
IF PGM.*Cursor_field = CTL.USR_Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(CTL.USR_Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER('TRF');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Salesperson has changed
CASE;

// IF PAR.Salesperson Code 1 NE CTL.Salesperson Code
IF PAR.Salesperson_Code_1 <> CTL.Salesperson_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Salesperson Code 1 = CTL.Salesperson Code
PAR.Salesperson_Code_1 = CTL.Salesperson_Code;

ENDIF;

//?Scheduled Seq# change (F2 for second line)
CASE;

// IF CTL.Numeric 4,0           USR is *Zero
IF CTL.Numeric_40_USR = *ZERO;

CASE;

// IF CTL.Numeric 4,0           USR NE WRK.Numeric 4,0           USR
IF CTL.Numeric_40_USR <> WRK.Numeric_40_USR;

// CTL.Schedule Sequence Number = CON.*ZERO
CTL.Schedule_Sequence_Number = *ZERO;

// WRK.Numeric 4,0           USR = CON.*ZERO
WRK.Numeric_40_USR = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Scheduled Seq# change (F2 for second line)
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Numeric 4,0           USR NE WRK.Numeric 4,0           USR
IF CTL.Numeric_40_USR <> WRK.Numeric_40_USR;

// CTL.Schedule Sequence Number = CTL.Numeric 4,0           USR
CTL.Schedule_Sequence_Number = CTL.Numeric_40_USR;

// WRK.Numeric 4,0           USR = CTL.Numeric 4,0           USR
WRK.Numeric_40_USR = CTL.Numeric_40_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?***  E2625 TPM ***
//?E4119  LIVE WITH TMS RESTRICTED FUNCTION KEYS
CASE;

// IF LCL.Live with TPM is Yes
IF LCL.Live_with_TPM = 'Y';

CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Send error message - 'Live With TMS: Function &1 Invalid.'
ERROR(USR4602);
MSGPARM(11);

QUIT;

ENDIF;

ENDIF;

//?***  PK0114  ***
//?F11=Confirm Loads
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// OR CTL.Carrier Code is not entered
OR CTL.Carrier_Code = *BLANK;

// Send error message - 'Must enter Sched Ship Date and Carrier Code to 'Confirm Loads'.'
ERROR(USR2936);
MSGPARM(CTL.Scheduled_Ship_Date);
MSGPARM(CTL.Carrier_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Confirmed Loads    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1582196;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Scheduled_Ship_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Load Confirmed Sts is no
 IF DB1.Load_Confirmed_Sts = 'N';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'No Loads for Carrier &1 on &2 are unconfirmed.'
ERROR(USR2938);
MSGPARM(CTL.Carrier_Code);
MSGPARM(CTL.Scheduled_Ship_Date);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Load Confirm       DF.
CALL PROGRAM(DSP Load Confirm       DF) ('POBEDFR');
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.USR_Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// PAR.USR Print Detail = CND.no
PAR.USR_Print_Detail = 'N';

// PAR.USR Quit = CND.no
PAR.USR_Quit = 'N';

// CTL.Salesperson Name = CON.*BLANK
CTL.Salesperson_Name = *BLANK;

//?f4 company number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F4 Select salesperson
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Salesperson Code
IF PGM.*Cursor_field = CTL.Salesperson_Code;

// Call program SEL Salesperson All    SR.
CALL PROGRAM(SEL Salesperson All    SR) ('PDFASRR');
PARAMETER(CTL.Salesperson_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Validate company number if entered
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number &1 not found'
ERROR(USR2008);
MSGPARM(CTL.Company_Number);

ENDIF;

ENDIF;

//?Validate salesperson if entered
CASE;

// IF CTL.Salesperson Code is entered
IF CTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(CTL.Salesperson_Code);

ENDIF;

ENDIF;

//?F7=Display Unbooked Orders
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// Call program DSP Unbooked Orders    DF.
CALL PROGRAM(DSP Unbooked Orders    DF) ('PDCNDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.USR_Program_name);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=Toggle Include/Exclude
CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option = CND.Exclude
CTL.Include_Exclude_Option = 'EXC';

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?f10 edit trailer
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program EDT Trailer            PV.
CALL PROGRAM(EDT Trailer            PV) ('PDI0PVR');
PARAMETER(*BLANK);
PARAMETER(*BLANK);

ENDIF;

//?Reload subfile if trailer id field changes.
CASE;

// IF LCL.Trailer ID USR NE CTL.Trailer ID USR
IF LCL.Trailer_ID_USR <> CTL.Trailer_ID_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Trailer ID USR = CTL.Trailer ID USR
LCL.Trailer_ID_USR = CTL.Trailer_ID_USR;

ENDIF;

//?Reload subfile if DC control field changes.
CASE;

// IF PAR.Status - Y or N NE CTL.Status - Y or N
IF PAR.Status_Y_or_N <> CTL.Status_Y_or_N;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Status - Y or N = CTL.Status - Y or N
PAR.Status_Y_or_N = CTL.Status_Y_or_N;

ENDIF;

//?Reload subfile if last stop city changes.        TRF011 7/28/06
CASE;

// IF LCL.Text 5 all caps     USR NE CTL.Text 5 all caps     USR
IF LCL.Text_5_all_caps_USR <> CTL.Text_5_all_caps_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Text 5 all caps     USR = CTL.Text 5 all caps     USR
LCL.Text_5_all_caps_USR = CTL.Text_5_all_caps_USR;

ENDIF;

//?Reload Subfile if Ship Method Type has Changed.
CASE;

// IF CTL.Ship Method Type USR NE LCL.Ship Method Type USR
IF CTL.Ship_Method_Type_USR <> LCL.Ship_Method_Type_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload Subfile if Warehouse has Changed.
CASE;

// IF CTL.USR Warehouse Code NE LCL.USR Warehouse Code
IF CTL.USR_Warehouse_Code <> LCL.USR_Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Get last load for requested delivery date
CASE;

// IF CTL.Requested Delivery Date NE WRK.ZERO
IF CTL.Requested_Delivery_Date <> WRK.ZERO;

//?these WRK fields contain the last load which should show on the screen for
//?the selected requested delivery date
// WRK.Scheduled Ship Date = CON.*ZERO
WRK.Scheduled_Ship_Date = *ZERO;

// WRK.Schedule Sequence Number = CON.99999
WRK.Schedule_Sequence_Number = 99999;

// WRK.Load ID = CON.999999
WRK.Load_ID = 999999;

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

EXECUTE FUNCTION(RTV Last Ld for RqsDlv RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1484070;
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(WRK.Schedule_Sequence_Number);
PARAMETER(WRK.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Get last load for requested delivery date
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Scheduled Ship Date = CON.*ZERO
WRK.Scheduled_Ship_Date = *ZERO;

// WRK.Schedule Sequence Number = CON.*ZERO
WRK.Schedule_Sequence_Number = *ZERO;

// WRK.Load ID = CON.*ZERO
WRK.Load_ID = *ZERO;

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?* Ensure have current data
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.Total_Load_Miles);
PARAMETER(RCD.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if Load Header Not Found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if Load Header Not Found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load Header &1 not found.'
ERROR(USR2313);
MSGPARM(RCD.Load_ID);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?** Put Override miles on the screen, if entered       E00207
CASE;

// IF RCD.Override Total Load Miles is Entered
IF RCD.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = RCD.Override Total Load Miles
RCD.Total_Miles_40_USR = RCD.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?** Put Override miles on the screen, if entered       E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = RCD.Total Load Miles
RCD.Total_Miles_40_USR = RCD.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

//?E4119  MG Created Load  RESTRICTED OPTIONS
CASE;

// IF RCD.MG Created Load is Yes
IF RCD.MG_Created_Load = 'Y';

CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// Send error message - 'Live With TMS: Option &1 Invalid.'
ERROR(USR4601);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

//?5=WW Orders on load
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?used to call WW DSP ORDERS ON LOAD DF (Order Header) (PDJ6DFR)
// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.USR_Weight_Accumulated);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?6 = Print Load Confirmation
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.Carrier Code EQ WRK.BLANK
IF RCD.Carrier_Code = WRK.BLANK;

// Send error message - 'Carrier must be entered for load &2'
ERROR(USR1253);
MSGPARM(RCD.Carrier_Code);
MSGPARM(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Carrier Code = RCD.Carrier Code
PAR.Carrier_Code = RCD.Carrier_Code;

//?prompt for printer specs
CASE;

// IF PAR.USR Print Detail is Not Yes
IF PAR.USR_Print_Detail = *BLANK/'N';

// PAR.PRT Description = CON.PRTLDCNFRM
PAR.PRT_Description = 'PRTLDCNFRM';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Print Load. Confirm.');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('O/M');

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.USR Print Detail = CND.yes
PAR.USR_Print_Detail = 'Y';

ENDIF;

//?Print Load Confirmation
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Print Load Confirmation
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?** default # of copies to 1 if it is zeros   P000737
CASE;

// IF PAR.System Value Numeric is Equal to zero
IF PAR.System_Value_Numeric = *ZERO;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

ENDIF;

//?** Set Fax/Print flag to Print, Set fax carrier to No, set
//?** fax dispatcher to No
//?** set all other carrier print flags to NO            P000737
// WRK.USR Status (Y/N) = CND.Print
WRK.USR_Status_Y_N = 'P';

// WRK.Status Description 3  USR = CON.PNW2PFR$
WRK.Status_Description_3_USR = 'PNW2PFR$';

// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

EXECUTE FUNCTION(EXC Load Confirm Fax   IF) TYPE(EXCINTFUN)                     AC1595755;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(*BLANK);
PARAMETER(PAR.Carrier_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(WRK.Status_Description_3_USR);
PARAMETER(WRK.USR_Status_Y_N);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?** See comments for explanation of parms.
 // Call program PRC Submit Fax Load Cn UP.
 CALL PROGRAM(PRC Submit Fax Load Cn UP) ('PDVVUPC');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Status_Description_3_USR);
 PARAMETER(PAR.USR_Status_Y_N);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Email_Address);

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 04/24/2011 LJB P000737
 //?** Pgm PODPUPR replaced with PDVVUPC. Parms changed to either
 //?** Print Only or Fax/Email to all carriers that are passed in.
 //?** *** Parms are:
 //?** Status-Y or N = Fax Carrier, Status Flag 1 Y/N=Fax Dispatcher,
 //?** Status Flag 2 Y/N=Fax Transloader, Status Flag 3 Y/N=Fax Mexican,
 //?** Status Flag 4 Y/N=Fax Exp Coordn, Status Flag 5 Y/N=Fax Ocean Shpr,
 //?** Usr Status (Y/N)=Print Only/Fax, Status Description 3=Printer file
 //?*****
 ENDDO;

}


// Send information message - 'Selected Load(s) have been printed.'
MESSAGE(USR2574 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?11=Process Edit Traffic Comments
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?12=Recalculate Miles
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

// Call program EDT Stop Miles         EF.
CALL PROGRAM(EDT Stop Miles         EF) ('PDW7EFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?14=Process Edit Dispatch request
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

//?082906 slm E00169 Pass in blanks on the Warehouse Specific
//?this function will be used by specific user from a menu
//?when this executed other places then pass in blanks
// Call program EDT Cst Srv/Dispatcher XF.
CALL PROGRAM(EDT Cst Srv/Dispatcher XF) ('PDE4XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(*BLANK);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?16=Process Display Dispatch/Tracer request
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?15=Process Edit Tracer request
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

//?e4119 call disply in here if live with tms load planning & MG Crt Load
// Call program EDT Cst Srv/TraceClerk XF.
CALL PROGRAM(EDT Cst Srv/TraceClerk XF) ('POHXXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?17 = Process Display Export
CASE;

// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

//?** Select the order and pass to the dsprcd     FP1101 LJB 04/09/2007
// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

//?Repeat While
// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// Call program SEL Order/Load/Exp Sts SR.
CALL PROGRAM(SEL Order/Load/Exp Sts SR) ('PMFXSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);

//?** Dsp order until exit is requested
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

//?** Use the dsprcd from the Order Header Extension   FP1101 LJB 04/09/2007
// Call program DSP Cust Ord Export    D1.
CALL PROGRAM(DSP Cust Ord Export    D1) ('PMFWD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

ENDIF;

ENDIF;

ENDDO;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?13 = Process Edit Export
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

//?user cant chg stuff here when live with tms load planning E4119
CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

//?** Select the order and pass to the edtfil     FP1101 LJB 04/09/2007
//?Repeat while
// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// OR WRK.USR Exit Program is yes
OR WRK.USR_Exit_Program = 'Y';

//?12/12/22 DN DO4595-Replaced PMFXSRR with PUXRSRR.
// Call program SEL Order/Load/Exp Sts2SR.
CALL PROGRAM(SEL Order/Load/Exp Sts2SR) ('PUXRSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);
PARAMETER(LCL.Orders_have_Same_Booking#);

//?** Edit Order Header Instructions
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

CASE;

// IF RCD.MG Created Load is Yes
IF RCD.MG_Created_Load = 'Y';

// Call program DSP Cust Ord Export    D1.
CALL PROGRAM(DSP Cust Ord Export    D1) ('PMFWD1R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

//?12/12/22 DN DO4595-Passed in Parm 'Orders have Same Booking#'.
// Call program EDT Export Order Instr E2.
CALL PROGRAM(EDT Export Order Instr E2) ('PNVZE2R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Exit_Program);
PARAMETER(LCL.Orders_have_Same_Booking#);

ENDIF;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

ENDDO;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** Write the Carlisle record(s)
CASE;

// IF RCD.Load Status is Locked or Shipped
IF RCD.Load_Status = 'L'/'S';

//?RMC 7/15/16 remove live with tpm check
EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('LDORDD');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// Call program PFS Lock Load/Order   XF.
CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
PARAMETER(RCD.Load_ID);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?18 = Fax load confirmation
CASE;

// IF RCD.*SFLSEL is Option 18
IF RCD.*SFLSEL = '18';

CASE;

// IF RCD.Carrier Code is not entered
IF RCD.Carrier_Code = *BLANK;

// Send error message - 'Carrier must exist on load to fax Load Confirmation.'
ERROR(USR2444);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Carrier_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Load ID = RCD.Load ID
PAR.Load_ID = RCD.Load_ID;

// PAR.Carrier Code = RCD.Carrier Code
PAR.Carrier_Code = RCD.Carrier_Code;

// WRK.Load ID = RCD.Load ID
WRK.Load_ID = RCD.Load_ID;

//?** Check SSI download flag. If Yes, send info to PowerPro   FP1166
EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(RCD.Carrier_Code);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Fax_Sent_to_SSI_Carrier);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.MG Created Load is Not MG Created Load
IF RCD.MG_Created_Load = *BLANK;

//?** See if carrier has already received a fax, if yes, send Change FP1166
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

CASE;

// IF WRK.Fax Sent to SSI Carrier is Not Fax'd to Carrier
IF WRK.Fax_Sent_to_SSI_Carrier = *BLANK/'N';

// WRK.SSI Add, Chg, Delete flag = CND.Add
WRK.SSI_Add_Chg_Delete_flag = 00;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Send "Changed" record to SSI PowerPro
// WRK.SSI Add, Chg, Delete flag = CND.Change
WRK.SSI_Add_Chg_Delete_flag = 04;

ENDIF;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

EXECUTE FUNCTION(CHG Fax'd to SSI flag  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1906429;
PARAMETER(RCD.Load_ID);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?if user flag 1 is not yes                  changed per P000737
CASE;

// IF PAR.USR Flag 1 is Blank
IF PAR.USR_Flag_1 = *BLANK;

// OR PAR.USR Flag 1 is No
OR PAR.USR_Flag_1 = 'N';

//?** PDVVUPC which calls PDVVPCLP which calls
//?** PDAMXFR which calls PODYUPR to send any faxes and then calls
//?** PLAMUPC to send any emails
//?** Set Fax Carrier=Yes, Fax dispatch=No, Fax/Print=Fax
//?** Default reporting parms, so no popup window for print options
// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

// WRK.USR Status (Y/N) = CND.Fax
WRK.USR_Status_Y_N = 'F';

// WRK.Status Description 3  USR = CON.PNW2PFR$
WRK.Status_Description_3_USR = 'PNW2PFR$';

// PAR.PRT Description = CON.FAXLDCNFRM
PAR.PRT_Description = 'FAXLDCNFRM';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

ENDIF;

//?* Only fax if F3 to cancel has not been pressed   C001921
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// Send information message - 'Fax/Email Load Confirmation has been cancelled'
MESSAGE(USR4484 *INFO);

//?* Only fax if F3 to cancel has not been pressed   C001921
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(EXC Load Confirm Fax   IF) TYPE(EXCINTFUN)                     AC1595755;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(*BLANK);
PARAMETER(PAR.Carrier_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(WRK.Status_Description_3_USR);
PARAMETER(WRK.USR_Status_Y_N);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?** See comments for explanation of parms.
 // Call program PRC Submit Fax Load Cn UP.
 CALL PROGRAM(PRC Submit Fax Load Cn UP) ('PDVVUPC');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Status_Description_3_USR);
 PARAMETER(PAR.USR_Status_Y_N);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Email_Address);

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 04/24/2011 LJB P000737
 //?** Pgm PODPUPR replaced with PDVVUPC. Parms changed to either
 //?** Print Only or Fax/Email to all carriers that are passed in.
 //?** *** Parms are:
 //?** Status-Y or N = Fax Carrier, Status Flag 1 Y/N=Fax Dispatcher,
 //?** Status Flag 2 Y/N=Fax Transloader, Status Flag 3 Y/N=Fax Mexican,
 //?** Status Flag 4 Y/N=Fax Exp Coordn, Status Flag 5 Y/N=Fax Ocean Shpr,
 //?** Usr Status (Y/N)=Print Only/Fax, Status Description 3=Printer file
 //?*****
 ENDDO;

}


// Send information message - 'Selected Load(s) have been faxed/emailed to carrier.'
MESSAGE(USR2445 *INFO);

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

//?19=Display Load
CASE;

// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

// Call program DSP Load Plan          DF.
CALL PROGRAM(DSP Load Plan          DF) ('PDSLDFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?20 = Reprint BOL
CASE;

// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

CASE;

// IF RCD.Load Status is Invoiced
IF RCD.Load_Status = 'I';

// PAR.PRT Description = CON.Reprint Bill of Lading
PAR.PRT_Description = 'Reprint Bill of Lading';

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

//?** rcd.total load miles will have Override miles in it, if entered E00207
// Call program PMT B.O.L. Prompt      PV.
CALL PROGRAM(PMT B.O.L. Prompt      PV) ('PDCKPVR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Seal_1);
PARAMETER(RCD.Seal_2);
PARAMETER(RCD.Seal_3);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Trailer_ID_USR);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Number_Pallets_Received);
PARAMETER(RCD.Number_Pallets_Loaded);
PARAMETER(RCD.Product_Temperature);
PARAMETER(RCD.Number_Spacers_Loaded);
PARAMETER(RCD.Car_Veh_Initials);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Recorder_ID);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.BOL_Complete_Time);
PARAMETER(RCD.Scheduled_Delivery_Date);
PARAMETER(RCD.Scheduled_Delivery_Time);
PARAMETER(RCD.Avg_Pallet_Tare);
PARAMETER(RCD.Tot_Pallet_Tare);
PARAMETER(RCD.Export_Load_USDA_OK);
PARAMETER(RCD.Shipping_Temp_C_F_txt);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.USR_Flag_1);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'BOL RePrint Invalid.  The Load must be invoiced.'
ERROR(USR2997);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?screen displays state of last stop on load, so get that field again
//?do this @end of validate, so that processing will use REAL ship to state
EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(RCD.USR_Load_Stop_10_Alpha);
PARAMETER(RCD.USR_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


//?USER: Final processing (Pre-confirm)

// PAR.USR Print Detail = CND.no
PAR.USR_Print_Detail = 'N';

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

CASE;

// IF PAR.USR Update Flag is No
IF PAR.USR_Update_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

