// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPPKXFR
// ?Date: 14.08.2025 Time: 03:41:32
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?INV100
//?1. Create Inventory Value records from previous week with a
//?   new Curr Week price based on the overrides, whse price,or methods
//?A. Use the Price Overrides if > 0 for Prod and Inv Curr Wk prices
//?    If override is pulled forward, set the sts to Unapproved
//?B. Inv and Prod Value Methods are what they were the previous week
//?C. A Warehouse price for an item overrides the Inv Value method prc
//?D. The Market Price/LB is a weighted avg calculated by:
//?        SUM (End inv * avg market price for the week)
//?               / tot end inv all whses
//?E. Production Value Calcs to get Curr Wk Prod Value
//?F. Inventory Value Calcs to get Curr Wk Inv Value
//?R9083 02/14/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Crt Inv Valu Rcds RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1740762;
PARAMETER(PAR.IVF_Valuation_Grouping);
PARAMETER(PAR.IVF_Week_Ending_Date);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?Last week's week ending date
 // LCL.IVF Week Ending Date = PAR.ISC Week Ending Date + CON.-7 *DAYS
 LCL.IVF_Week_Ending_Date = DATEINCR(PAR.ISC_Week_Ending_Date '-7' 'DY' 1111111 'NONE'
 'N' 1);

 //?YYYYMMDD to CYYMMDD
 // PAR.Market Price Date = PAR.ISC Week Ending Date
 PAR.Market_Price_Date = PAR.ISC_Week_Ending_Date;

 //?R9083 02/15/17 DN-JRD Inv Price Master is Now Commented Out. Inz Field.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Aggregt Net Prod Rev Prc = CON.*ZERO
 WRK.Aggregt_Net_Prod_Rev_Prc = *ZERO;

 ENDIF;

 //?USER: Process Data record

 //?***************************************************
 //?Create Inventory Value Record on Item Code Break
 CASE;

 // IF DB1.ISC Item Code NE PAR.IVF Item Code
 IF DB1.ISC_Item_Code <> PAR.IVF_Item_Code;

 //?Create Record if not 1st time
 CASE;

 // IF WRK.First Time Flag is NO
 IF WRK.First_Time_Flag = 'N';

 //?If Warehouse Lbs > 0, then Calc Wghted Avg for Whse price/lb
 CASE;

 // IF PAR.IVF Warehouse Pounds is Not equal zero
 IF PAR.IVF_Warehouse_Pounds <> *ZERO;

 // Compute: Whse price/cwt
 PAR.IVF_Whs_Price_Per_CWT = ( PAR.Calc_Work_Field_156_USR / PAR.IVF_Warehouse_Pounds )
 * 100 'H';

 ENDIF;

 //?If End Inv Lbs > 0, then Calc Wghted Avg for Market Price
 CASE;

 // IF PAR.Pounds is Not Zeros
 IF PAR.Pounds <> *ZERO;

 // Compute:Ivg mkt price cwt
 PAR.IVF_Market_Price_Per_CWT = ( PAR.Price_Weight_USR / PAR.Pounds ) * 100 'H';

 ENDIF;

 //?**************************************************
 //?Sales Price:  Temp from Sales History  or  last week's price
 //?              After TF Installs, from TFP010 or last week's price
 //?Temp: until TF installed
 CASE;

 // IF PAR.ISC Shipment Final Lbs is Not equal zero
 IF PAR.ISC_Shipment_Final_Lbs <> *ZERO;

 CASE;

 // IF PAR.IVF Item U/M - Pricing is NE Each
 IF PAR.IVF_Item_UOM_Pricing <> 'EA';

 // AND PAR.IVF Item U/M - Pricing is NE Headset
 AND PAR.IVF_Item_UOM_Pricing <> 'HS';

 // Compute Aggr Net Prod rev
 WRK.Aggregt_Net_Prod_Rev_Prc = ( PAR.ISC_FOB_Gross_Amount / PAR.ISC_Shipment_Final_Lbs )
 * 100 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ISC Shipment Final Qty is not equal zero
 IF PAR.ISC_Shipment_Final_Qty <> *ZERO;

 // Compute Aggr Net Prod rev
 WRK.Aggregt_Net_Prod_Rev_Prc = ( PAR.ISC_FOB_Gross_Amount / PAR.ISC_Shipment_Final_Qty )
 * 100;

 ENDIF;

 ENDIF;

 //?Temp: until TF installed
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Aggregt Net Prod Rev Prc = CON.*ZERO
 WRK.Aggregt_Net_Prod_Rev_Prc = 0;

 ENDIF;

 //?For Dailys -- get cost from JRINPRI file, which will be empty in prkflib
 // WRK.ITEM NUMBER = PAR.IVF Item Code
 WRK.ITEM_NUMBER = PAR.IVF_Item_Code;

 //?R9083 02/15/17 DN-Commented out reference to JRD Inv Price Master.
 //?Temp:  If Sales Hist is zero,  use prev wk sales price,Dt
 CASE;

 // IF WRK.Aggregt Net Prod Rev Prc is eq 0
 IF WRK.Aggregt_Net_Prod_Rev_Prc = *ZERO;

 // PAR.IVF Sales Price/CWT = LCL.IVF Sales Price/CWT
 PAR.IVF_Sales_Price_Per_CWT = LCL.IVF_Sales_Price_Per_CWT;

 // PAR.IVF Sales Price/Pound Dt = LCL.IVF Sales Price/Pound Dt
 PAR.IVF_Sales_Price_Per_LB_Dt = LCL.IVF_Sales_Price_Per_LB_Dt;

 //?Temp:  If Sales Hist is zero,  use prev wk sales price,Dt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.IVF Sales Price/CWT = WRK.Aggregt Net Prod Rev Prc
 PAR.IVF_Sales_Price_Per_CWT = WRK.Aggregt_Net_Prod_Rev_Prc;

 // PAR.IVF Sales Price/Pound Dt = PAR.IVF Week Ending Date
 PAR.IVF_Sales_Price_Per_LB_Dt = PAR.IVF_Week_Ending_Date;

 ENDIF;

 //?**************************************************
 //?Production Value: Use Prod Override if >0 and Approved
 //?   else Use price assoc. with the Prod Value Method
 //?Curr Week Prod Value = override or price asso with prod value method
 CASE;

 // IF PAR.IVF Ovrrde Prod Price/CWT is Entered
 IF PAR.IVF_Ovrrde_Prod_Price_CWT <> *ZERO;

 // AND PAR.IVF Curr Wk Prod Status is Approved
 AND PAR.IVF_Curr_Wk_Prod_Status = 'A';

 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Ovrrde Prod Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Ovrrde_Prod_Price_CWT;

 // PAR.IVF Curr Wk Prod Status = CND.Unapproved
 PAR.IVF_Curr_Wk_Prod_Status = 'U';

 //?Curr Week Prod Value = override or price asso with prod value method
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.IVF Production Value Mthd is Sales
 IF PAR.IVF_Production_Value_Mthd = 'S';

 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Sales_Price_Per_CWT;

 //?If Sales Date older than 90 days, set sts to Unapproved
 // WRK.Day of the Week USR = CVTVAR(PAR.IVF Sales Price/Pound Dt)
 WRK.Day_of_the_Week_USR = CVTVAR(PAR.IVF_Sales_Price_Per_LB_Dt);

 // WRK.Date (Char-6) USR = SUBSTRING(WRK.Day of the Week USR,CON.4,CON.6)
 WRK.Date_Char_6_USR = SUBSTRING(WRK.Day_of_the_Week_USR:4:6);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CND.*None)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.Date                  USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Date_USR = CVTVAR(WRK.Date_Alpha_USR);

 // WRK.Days = JOB.*Job date - WRK.Date                  USR *DAYS
 WRK.Days = DURATION(JOB.*Job_date WRK.Date_USR 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF WRK.Days is GT 90
 IF WRK.Days > 90;

 // PAR.IVF Curr Wk Prod Status = CND.Unapproved
 PAR.IVF_Curr_Wk_Prod_Status = 'U';

 ENDIF;

 // IF PAR.IVF Production Value Mthd is Market
 IF PAR.IVF_Production_Value_Mthd = 'M';

 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Market Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Market_Price_Per_CWT;

 // IF PAR.IVF Production Value Mthd is Formula
 IF PAR.IVF_Production_Value_Mthd = 'F';

 //?E01452 RMC - added
 //?R9083 02/14/17 DN-Modified to add IVF Valuation Grouping as input parm.
 EXECUTE FUNCTION(Rtv to CLC TP Sale IVFRT) TYPE(RTVOBJ) FILE(PMDNREP)           AC2014685;
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 {
  //?USER: Initialize routine

  //?E01452  RMC 3/31/11 use when creating IVF rcds, with "F"ormula prod value
  //?  method and inv method
  // PAR.Weight Billed = CON.*ZERO
  PAR.Weight_Billed = *ZERO;

  // PAR.FOB Gross Amount = CON.*ZERO
  PAR.FOB_Gross_Amount = *ZERO;

  //?USER: Process Data record

  //?Accum Sales History records from all items grouped with the input item
  //?R9083 02/14/17 DN-Modified to also RST by Inv Valuation Grouping.
  EXECUTE FUNCTION(Rtv Sum FOB,shpm finl RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1744773;
  PARAMETER(PAR.IVF_Valuation_Grouping);
  PARAMETER(PAR.IVF_Week_Ending_Date);
  PARAMETER(DB1.Group_with_Item_Code);
  PARAMETER(PAR.Weight_Billed);
  PARAMETER(PAR.FOB_Gross_Amount);
  {
   //?USER: Process Data record

   // PAR.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
   PAR.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

   // PAR.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
   PAR.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

  }

 }

 //?Calc IVF Curr Wk Prod Price/CW
 CASE;

 // IF LCL.Weight Billed is Greater than zero
 IF LCL.Weight_Billed > *ZERO;

 // Compute:Curr Wk Prod Pric
 PAR.IVF_Curr_Wk_Prod_Price_CW = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) * 100;

 //?Calc IVF Curr Wk Prod Price/CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?use the sales price
 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Sales_Price_Per_CWT;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Set: Curr Wk Prod Status to Unapproved... If ...
 CASE;

 // IF PAR.IVF Warehouse Price/CWT is Entered
 IF PAR.IVF_Whs_Price_Per_CWT <> *ZERO;

 // AND PAR.Trans Contol AS400/Plant is Plant
 AND PAR.Trans_Contol_AS400_Plant = 'P';

 //?Warehouse price exists and plant controlled (affect prod is Yes)
 // PAR.IVF Curr Wk Prod Status = CND.Unapproved
 PAR.IVF_Curr_Wk_Prod_Status = 'U';

 ENDIF;

 //?**************************************************
 //?Inventory Value: Use Inv Override if >0 and Approved
 //?   else If Warehouse prices exist, calc the price per those lbs
 //?   and sub the Warehouse lbs from the Ending Inv lbs.(Can be mult whses.)
 //?   Then multiply the remaining Ending Inv Lbs by the Default value
 //?   method's price to get the $$ asso with the value method.
 //?   Add the (Whse price * warehouse lbs) to the above $$ Total
 //?   Divide the $$ Total by the End Inv lbs to get the value per lb.
 //?Curr Week Inv Value = override or price asso with inv value method + more
 CASE;

 // IF PAR.IVF Ovrrde Inv Val Prc/CW is Entered
 IF PAR.IVF_Ovrrde_Inv_Val_Prc_CW <> *ZERO;

 // AND PAR.IVF Cur Wk Inv Val Status is Approved
 AND PAR.IVF_Cur_Wk_Inv_Val_Status = 'A';

 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Ovrrde Inv Val Prc/CW
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Ovrrde_Inv_Val_Prc_CW;

 // PAR.IVF Cur Wk Inv Val Status = CND.Unapproved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'U';

 //?Curr Week Inv Value = override or price asso with inv value method + more
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calc: IVF Cur Wk Inv Val Prc/CW per Inv Value Method
 CASE;

 // IF PAR.IVF Inventory Value Mthd is Sales
 IF PAR.IVF_Inventory_Value_Mthd = 'S';

 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Sales_Price_Per_CWT;

 //?If Sales Date older than 90 days, set sts to Unapproved
 // WRK.Day of the Week USR = CVTVAR(PAR.IVF Sales Price/Pound Dt)
 WRK.Day_of_the_Week_USR = CVTVAR(PAR.IVF_Sales_Price_Per_LB_Dt);

 // WRK.Date (Char-6) USR = SUBSTRING(WRK.Day of the Week USR,CON.4,CON.6)
 WRK.Date_Char_6_USR = SUBSTRING(WRK.Day_of_the_Week_USR:4:6);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CND.*None)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.Date                  USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Date_USR = CVTVAR(WRK.Date_Alpha_USR);

 // WRK.Days = JOB.*Job date - WRK.Date                  USR *DAYS
 WRK.Days = DURATION(JOB.*Job_date WRK.Date_USR 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF WRK.Days is GT 90
 IF WRK.Days > 90;

 // PAR.IVF Cur Wk Inv Val Status = CND.Unapproved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'U';

 ENDIF;

 //?Calc: IVF Cur Wk Inv Val Prc/CW per Inv Value Method
 // IF PAR.IVF Inventory Value Mthd is Market
 IF PAR.IVF_Inventory_Value_Mthd = 'M';

 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Market Price/CWT
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Market_Price_Per_CWT;

 //?Calc: IVF Cur Wk Inv Val Prc/CW per Inv Value Method
 // IF PAR.IVF Inventory Value Mthd is Formula
 IF PAR.IVF_Inventory_Value_Mthd = 'F';

 //?E01452 RMC - added
 //?R9083 02/14/17 DN-Modified to add IVF Valuation Grouping as input parm.
 EXECUTE FUNCTION(Rtv to CLC TP Sale IVFRT) TYPE(RTVOBJ) FILE(PMDNREP)           AC2014685;
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 {
  //?USER: Initialize routine

  //?E01452  RMC 3/31/11 use when creating IVF rcds, with "F"ormula prod value
  //?  method and inv method
  // PAR.Weight Billed = CON.*ZERO
  PAR.Weight_Billed = *ZERO;

  // PAR.FOB Gross Amount = CON.*ZERO
  PAR.FOB_Gross_Amount = *ZERO;

  //?USER: Process Data record

  //?Accum Sales History records from all items grouped with the input item
  //?R9083 02/14/17 DN-Modified to also RST by Inv Valuation Grouping.
  EXECUTE FUNCTION(Rtv Sum FOB,shpm finl RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1744773;
  PARAMETER(PAR.IVF_Valuation_Grouping);
  PARAMETER(PAR.IVF_Week_Ending_Date);
  PARAMETER(DB1.Group_with_Item_Code);
  PARAMETER(PAR.Weight_Billed);
  PARAMETER(PAR.FOB_Gross_Amount);
  {
   //?USER: Process Data record

   // PAR.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
   PAR.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

   // PAR.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
   PAR.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

  }

 }

 //?Calc IVF Cur Wk Inv Val Prc/CW
 CASE;

 // IF LCL.Weight Billed is Greater than zero
 IF LCL.Weight_Billed > *ZERO;

 // Compute:Curr Wk Inv Pric
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) * 100;

 //?Calc IVF Cur Wk Inv Val Prc/CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?use the sales price
 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Sales_Price_Per_CWT;

 ENDIF;

 ENDIF;

 //?If Warehouse lbs > 0, calc those lbs at the whse prices, and accum
 CASE;

 // IF PAR.IVF Warehouse Pounds is Greater than zero
 IF PAR.IVF_Warehouse_Pounds > *ZERO;

 // WRK.ISC Ending Inventory Lbs = PAR.ISC End Inv Final Lbs
 WRK.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inv_Final_Lbs;

 //?R9083 02/15/17 DN-Modified to also RST by Inv Valuation Grouping.
 EXECUTE FUNCTION(Rtv Calc Whse Prc-IVF RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1741671;
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(WRK.Warehouse_Value);
 PARAMETER(WRK.ISC_Ending_Inventory_Lbs);
 {
  //?USER: Initialize routine

  // WRK.ISC Ending Inventory Lbs = PAR.ISC Ending Inventory Lbs
  WRK.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inventory_Lbs;

  // PAR.Warehouse Value = CON.*ZERO
  PAR.Warehouse_Value = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.ISC Ending Inventory Lbs is Greater than zero
  IF PAR.ISC_Ending_Inventory_Lbs > *ZERO;

  CASE;

  // IF PAR.ISC Ending Inventory Lbs GE DB1.ISC End Inv Final Lbs
  IF PAR.ISC_Ending_Inventory_Lbs >= DB1.ISC_Ending_Inv_Final_Lbs;

  // PAR.ISC Ending Inventory Lbs = PAR.ISC Ending Inventory Lbs - DB1.ISC End Inv Final Lbs
  PAR.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inventory_Lbs
  - DB1.ISC_Ending_Inv_Final_Lbs;

  // Compute: Warehouse Value
  PAR.Warehouse_Value = ( ( DB1.ISC_Warehouse_Price_UOM / 100 )
  * DB1.ISC_Ending_Inv_Final_Lbs ) + PAR.Warehouse_Value;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: Warehouse Value
  PAR.Warehouse_Value = ( ( DB1.ISC_Warehouse_Price_UOM / 100 )
  * PAR.ISC_Ending_Inventory_Lbs ) + PAR.Warehouse_Value;

  ENDIF;

  ENDIF;

 }

 //?If Warehouse lbs > 0, calc those lbs at the whse prices, and accum
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Warehouse Value = CON.*ZERO
 WRK.Warehouse_Value = *ZERO;

 // WRK.ISC Ending Inventory Lbs = PAR.ISC End Inv Final Lbs
 WRK.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inv_Final_Lbs;

 ENDIF;

 // Compute:Inv val mthd $$
 WRK.Inventory_Value_Method_$$ = WRK.ISC_Ending_Inventory_Lbs * (
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW / 100 );

 // WRK.Inventory Value Method $$ = WRK.Inventory Value Method $$ + WRK.Warehouse Value
 WRK.Inventory_Value_Method_$$ = WRK.Inventory_Value_Method_$$ + WRK.Warehouse_Value;

 //?New since 4/2/08  S00184
 CASE;

 // IF PAR.ISC End Inv Final Lbs is Not equal zero
 IF PAR.ISC_Ending_Inv_Final_Lbs <> *ZERO;

 // Compute: Cur Wk Inv Val P
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = ( WRK.Inventory_Value_Method_$$
 / PAR.ISC_Ending_Inv_Final_Lbs 'H' ) * 100;

 ENDIF;

 ENDIF;

 //?Set: Curr Wk Inv Valu Status to Unapproved.. if ...
 CASE;

 // IF PAR.IVF Warehouse Price/CWT is Entered
 IF PAR.IVF_Whs_Price_Per_CWT <> *ZERO;

 // PAR.IVF Cur Wk Inv Val Status = CND.Unapproved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'U';

 ENDIF;

 //?**************************************************
 //?**************************************************
 //?R9083 02/14/17 DN-Modified to Set IVF Valuation Grouping.
 EXECUTE FUNCTION(Crt Inventory Value   CR) TYPE(CRTOBJ) FILE(PPBTCPP)           AC1738124;
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_WIP_FG_Item_Code);
 PARAMETER(PAR.IVF_Item_Type);
 PARAMETER(PAR.IVF_Unused_Sts_2);
 PARAMETER(PAR.IVF_Item_Cmdty_Price_Grp);
 PARAMETER(PAR.IVF_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(PAR.IVF_Item_Structure_Type);
 PARAMETER(PAR.IVF_Item_Structure_Group);
 PARAMETER(PAR.IVF_Item_Structure_Class);
 PARAMETER(PAR.IVF_Item_Market_Overage);
 PARAMETER(PAR.IVF_Item_GL_Sub_Code);
 PARAMETER(PAR.IVF_Item_UOM_Pricing);
 PARAMETER(PAR.IVF_Inventory_Value_Mthd);
 PARAMETER(PAR.IVF_Production_Value_Mthd);
 PARAMETER(LCL.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Sales_Price_Per_CWT);
 PARAMETER(PAR.IVF_Sales_Price_Per_LB_Dt);
 PARAMETER(PAR.IVF_Market_Price_Per_CWT);
 PARAMETER(PAR.IVF_Warehouse_Pounds);
 PARAMETER(PAR.IVF_Whs_Price_Per_CWT);
 PARAMETER(PAR.IVF_Ovrrde_Prod_Price_CWT);
 PARAMETER(PAR.IVF_Ovrrde_Prod_Comment);
 PARAMETER(PAR.IVF_Curr_Wk_Prod_Price_CW);
 PARAMETER(PAR.IVF_Curr_Wk_Prod_Status);
 PARAMETER(PAR.IVF_Ovrrde_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Ovrrde_Inv_Val_Commnt);
 PARAMETER(PAR.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Cur_Wk_Inv_Val_Status);
 PARAMETER(*ZERO);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?**************************************************
 ENDIF;

 // WRK.First Time Flag = CND.NO
 WRK.First_Time_Flag = 'N';

 // PAR.IVF Week Ending Date = DB1.ISC Week Ending Date
 PAR.IVF_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 // PAR.IVF Item Code = DB1.ISC Item Code
 PAR.IVF_Item_Code = DB1.ISC_Item_Code;

 // PAR.IVF Warehouse Pounds = CON.*ZERO
 PAR.IVF_Warehouse_Pounds = *ZERO;

 // PAR.IVF Warehouse Price/CWT = CON.*ZERO
 PAR.IVF_Whs_Price_Per_CWT = *ZERO;

 // PAR.Calc Work Field 15,6 USR = CON.*ZERO
 PAR.Calc_Work_Field_156_USR = *ZERO;

 // PAR.Price * Weight USR = CON.*ZERO
 PAR.Price_Weight_USR = *ZERO;

 // PAR.Pounds = CON.*ZERO
 PAR.Pounds = *ZERO;

 // PAR.ISC End Inv Final Lbs = CON.*ZERO
 PAR.ISC_Ending_Inv_Final_Lbs = *ZERO;

 // PAR.IVF Market Price/CWT = CON.*ZERO
 PAR.IVF_Market_Price_Per_CWT = *ZERO;

 // PAR.Trans Contol AS400/Plant = CND.AS400
 PAR.Trans_Contol_AS400_Plant = 'A';

 // PAR.IVF Curr Wk Prod Status = CND.Approved
 PAR.IVF_Curr_Wk_Prod_Status = 'A';

 // PAR.IVF Cur Wk Inv Val Status = CND.Approved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'A';

 // PAR.IVF Curr Wk Prod Price/CW = CON.*ZERO
 PAR.IVF_Curr_Wk_Prod_Price_CW = *ZERO;

 // PAR.IVF Cur Wk Inv Val Prc/CW = CON.*ZERO
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = 0;

 // PAR.ISC Shipment Final Lbs = CON.*ZERO
 PAR.ISC_Shipment_Final_Lbs = *ZERO;

 // PAR.ISC Shipment Final Qty = CON.*ZERO
 PAR.ISC_Shipment_Final_Qty = *ZERO;

 // PAR.ISC FOB Gross Amount = CON.*ZERO
 PAR.ISC_FOB_Gross_Amount = *ZERO;

 //?*** Save fields from 1st record for an item ***
 // PAR.ISC Ending Inventory Lbs = DB1.ISC End Inv Final Lbs
 PAR.ISC_Ending_Inventory_Lbs = DB1.ISC_Ending_Inv_Final_Lbs;

 // PAR.IVF Item Cmdty Price Grp = DB1.ISC Item Cmdty Price Grp
 PAR.IVF_Item_Cmdty_Price_Grp = DB1.ISC_Item_Cmdty_Price_Grp;

 // PAR.IVF Item Type = DB1.ISC Item Type
 PAR.IVF_Item_Type = DB1.ISC_Item_Type;

 // PAR.IVF Item Dft Cmdty Mkt Bs = DB1.ISC Item Dft Cmdty Mkt Bs
 PAR.IVF_Item_Dft_Cmdty_Mkt_Bs = DB1.ISC_Item_Dft_Cmdty_Mkt_Bs;

 // PAR.IVF Item Structure Type = DB1.ISC Item Structure Type
 PAR.IVF_Item_Structure_Type = DB1.ISC_Item_Structure_Type;

 // PAR.IVF Item Structure Group = DB1.ISC Item Structure Group
 PAR.IVF_Item_Structure_Group = DB1.ISC_Item_Structure_Group;

 // PAR.IVF Item Structure Class = DB1.ISC Item Structure Class
 PAR.IVF_Item_Structure_Class = DB1.ISC_Item_Structure_Class;

 // PAR.IVF Item Market Overage = DB1.ISC Item Market Overage
 PAR.IVF_Item_Market_Overage = DB1.ISC_Item_Market_Overage;

 // PAR.IVF Item G/L Sub Code = DB1.ISC Item G/L Sub Code
 PAR.IVF_Item_GL_Sub_Code = DB1.ISC_Item_GL_Sub_Code;

 // PAR.IVF Item U/M - Pricing = DB1.ISC Item U/M - Pricing
 PAR.IVF_Item_UOM_Pricing = DB1.ISC_Item_UOM_Pricing;

 //?************
 //?(Note: LCL context has Last week's values that may be rolled forward)
 //?R9083 02/14/17 DN-Modified to Also RST by Inv Valuation Grouping.
 EXECUTE FUNCTION(Rtv Inv Value Last Wk RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740896;
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(LCL.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_WIP_FG_Item_Code);
 PARAMETER(LCL.IVF_Item_Type);
 PARAMETER(PAR.IVF_Unused_Sts_2);
 PARAMETER(PAR.IVF_Inventory_Value_Mthd);
 PARAMETER(PAR.IVF_Production_Value_Mthd);
 PARAMETER(LCL.IVF_Sales_Price_Per_CWT);
 PARAMETER(LCL.IVF_Sales_Price_Per_LB_Dt);
 PARAMETER(PAR.IVF_Ovrrde_Prod_Price_CWT);
 PARAMETER(PAR.IVF_Ovrrde_Prod_Comment);
 PARAMETER(PAR.IVF_Ovrrde_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Ovrrde_Inv_Val_Commnt);
 PARAMETER(LCL.IVF_Cur_Wk_Inv_Val_Prc_CW);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Default Inventory Value Method to Sales
 CASE;

 // IF PAR.IVF Inventory Value Mthd EQ WRK.Blank for 4           USR
 IF PAR.IVF_Inventory_Value_Mthd = WRK.Blank_for_4_USR;

 // PAR.IVF Inventory Value Mthd = CND.Sales
 PAR.IVF_Inventory_Value_Mthd = 'S';

 ENDIF;

 //?Default Production Value Method to Sales
 CASE;

 // IF PAR.IVF Production Value Mthd EQ WRK.Blank for 4           USR
 IF PAR.IVF_Production_Value_Mthd = WRK.Blank_for_4_USR;

 // PAR.IVF Production Value Mthd = CND.Sales
 PAR.IVF_Production_Value_Mthd = 'S';

 ENDIF;

 //?Get WIP FG Item if blank from previous week
 CASE;

 // IF PAR.IVF Item Type is Work in Process
 IF PAR.IVF_Item_Type = 'WP';

 // OR PAR.IVF WIP - FG Item Code is Not Entered
 OR PAR.IVF_WIP_FG_Item_Code = *ZERO;

 EXECUTE FUNCTION(Rtv WIP FG Item       RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1741112;
 PARAMETER(PAR.IVF_WIP_FG_Item_Code);
 PARAMETER(PAR.IVF_Item_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

 //?***************************************************
 //?If Whse price is entered, accum for Whse Lbs sum, and wgted avg calc
 CASE;

 // IF DB1.ISC Warehouse Price /UOM is Entered
 IF DB1.ISC_Warehouse_Price_UOM <> *ZERO;

 // PAR.IVF Warehouse Pounds = PAR.IVF Warehouse Pounds + DB1.ISC End Inv Final Lbs
 PAR.IVF_Warehouse_Pounds = PAR.IVF_Warehouse_Pounds + DB1.ISC_Ending_Inv_Final_Lbs;

 // Compute: sum for whs pric
 PAR.Calc_Work_Field_156_USR = ( DB1.ISC_Ending_Inv_Final_Lbs * (
 DB1.ISC_Warehouse_Price_UOM / 100 ) + ) + PAR.Calc_Work_Field_156_USR;

 EXECUTE FUNCTION(RTV Whse Type,Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1332644;
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(NLL.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If any whse with this item is plant controlled, change sts
 CASE;

 // IF WRK.Trans Contol AS400/Plant is Plant
 IF WRK.Trans_Contol_AS400_Plant = 'P';

 // PAR.Trans Contol AS400/Plant = CND.Plant
 PAR.Trans_Contol_AS400_Plant = 'P';

 ENDIF;

 ENDIF;

 //?Accum (End Inv * avg market price for the week)
 // Call program Exc Itm MktPr for IVF XF.
 CALL PROGRAM(Exc Itm MktPr for IVF XF) ('PPPRXFR');
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(PAR.Market_Price_Date);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(PAR.Price_Weight_USR);
 PARAMETER(PAR.Pounds);

 //?S00184 - new accum for div calc
 // PAR.ISC End Inv Final Lbs = PAR.ISC End Inv Final Lbs + DB1.ISC End Inv Final Lbs
 PAR.ISC_Ending_Inv_Final_Lbs = PAR.ISC_Ending_Inv_Final_Lbs
 + DB1.ISC_Ending_Inv_Final_Lbs;

 // PAR.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
 PAR.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

 // PAR.ISC Shipment Final Qty = PAR.ISC Shipment Final Qty + DB1.ISC Shipment Final Qty
 PAR.ISC_Shipment_Final_Qty = PAR.ISC_Shipment_Final_Qty + DB1.ISC_Shipment_Final_Qty;

 // PAR.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
 PAR.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

 //?USER: Exit processing

 //?Write last record
 //?If Warehouse Lbs > 0, then Calc Wghted Avg for Whse price/lb
 CASE;

 // IF PAR.IVF Warehouse Pounds is Not equal zero
 IF PAR.IVF_Warehouse_Pounds <> *ZERO;

 // Compute: Whse price/cwt
 PAR.IVF_Whs_Price_Per_CWT = ( PAR.Calc_Work_Field_156_USR / PAR.IVF_Warehouse_Pounds )
 * 100 'H';

 ENDIF;

 //?If End Inv Lbs > 0, then Calc Wghted Avg for Market Price
 CASE;

 // IF PAR.Pounds is Not Zeros
 IF PAR.Pounds <> *ZERO;

 // Compute:Ivg mkt price cwt
 PAR.IVF_Market_Price_Per_CWT = ( PAR.Price_Weight_USR / PAR.Pounds ) * 100 'H';

 ENDIF;

 //?**************************************************
 //?Sales Price:  Temp from Sales History  or  last week's price
 //?              After TF Installs, from TFP010 or last week's price
 // WRK.Aggregt Net Prod Rev Prc = CON.*ZERO
 WRK.Aggregt_Net_Prod_Rev_Prc = *ZERO;

 //?Temp: until TF installed
 CASE;

 // IF PAR.ISC Shipment Final Lbs is Not equal zero
 IF PAR.ISC_Shipment_Final_Lbs <> *ZERO;

 CASE;

 // IF PAR.IVF Item U/M - Pricing is NE Headset
 IF PAR.IVF_Item_UOM_Pricing <> 'HS';

 // AND PAR.IVF Item U/M - Pricing is NE Each
 AND PAR.IVF_Item_UOM_Pricing <> 'EA';

 //?this is backwards!  fix 12.13.17
 // WRK.Aggregt Net Prod Rev Prc = PAR.ISC FOB Gross Amount / PAR.ISC Shipment Final Lbs *
 WRK.Aggregt_Net_Prod_Rev_Prc = PAR.ISC_FOB_Gross_Amount / PAR.ISC_Shipment_Final_Lbs;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?this is backwards!  fix 12.13.17
 CASE;

 // IF PAR.ISC Shipment Final Qty is not equal zero
 IF PAR.ISC_Shipment_Final_Qty <> *ZERO;

 // WRK.Aggregt Net Prod Rev Prc = PAR.ISC FOB Gross Amount / PAR.ISC Shipment Final Qty *
 WRK.Aggregt_Net_Prod_Rev_Prc = PAR.ISC_FOB_Gross_Amount / PAR.ISC_Shipment_Final_Qty;

 ENDIF;

 ENDIF;

 ENDIF;

 //?For Dailys -- get cost from JRINPRI file, which will be empty in prkflib
 // WRK.ITEM NUMBER = PAR.IVF Item Code
 WRK.ITEM_NUMBER = PAR.IVF_Item_Code;

 //?R9083 02/15/17 DN-Commented out reference to JRD Inv Price Master.
 //?Temp:  If Sales Hist is zero,  use prev wk sales price,Dt
 CASE;

 // IF WRK.Aggregt Net Prod Rev Prc is eq 0
 IF WRK.Aggregt_Net_Prod_Rev_Prc = *ZERO;

 // PAR.IVF Sales Price/CWT = LCL.IVF Sales Price/CWT
 PAR.IVF_Sales_Price_Per_CWT = LCL.IVF_Sales_Price_Per_CWT;

 // PAR.IVF Sales Price/Pound Dt = LCL.IVF Sales Price/Pound Dt
 PAR.IVF_Sales_Price_Per_LB_Dt = LCL.IVF_Sales_Price_Per_LB_Dt;

 //?Temp:  If Sales Hist is zero,  use prev wk sales price,Dt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.IVF Sales Price/CWT = CON.100 * WRK.Aggregt Net Prod Rev Prc *
 PAR.IVF_Sales_Price_Per_CWT = 100 * WRK.Aggregt_Net_Prod_Rev_Prc;

 // PAR.IVF Sales Price/Pound Dt = PAR.IVF Week Ending Date
 PAR.IVF_Sales_Price_Per_LB_Dt = PAR.IVF_Week_Ending_Date;

 ENDIF;

 //?**************************************************
 //?Production Value: Use Prod Override if >0 and Approved
 //?   else Use price assoc. with the Prod Value Method
 //?Curr Week Prod Value = override or price asso with prod value method
 CASE;

 // IF PAR.IVF Ovrrde Prod Price/CWT is Entered
 IF PAR.IVF_Ovrrde_Prod_Price_CWT <> *ZERO;

 // AND PAR.IVF Curr Wk Prod Status is Approved
 AND PAR.IVF_Curr_Wk_Prod_Status = 'A';

 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Ovrrde Prod Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Ovrrde_Prod_Price_CWT;

 // PAR.IVF Curr Wk Prod Status = CND.Unapproved
 PAR.IVF_Curr_Wk_Prod_Status = 'U';

 //?Curr Week Prod Value = override or price asso with prod value method
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.IVF Production Value Mthd is Sales
 IF PAR.IVF_Production_Value_Mthd = 'S';

 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Sales_Price_Per_CWT;

 //?If Sales Date older than 90 days, set sts to Unapproved
 // WRK.Day of the Week USR = CVTVAR(PAR.IVF Sales Price/Pound Dt)
 WRK.Day_of_the_Week_USR = CVTVAR(PAR.IVF_Sales_Price_Per_LB_Dt);

 // WRK.Date (Char-6) USR = SUBSTRING(WRK.Day of the Week USR,CON.4,CON.6)
 WRK.Date_Char_6_USR = SUBSTRING(WRK.Day_of_the_Week_USR:4:6);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CND.*None)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.Date                  USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Date_USR = CVTVAR(WRK.Date_Alpha_USR);

 // WRK.Days = JOB.*Job date - WRK.Date                  USR *DAYS
 WRK.Days = DURATION(JOB.*Job_date WRK.Date_USR 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF WRK.Days is GT 90
 IF WRK.Days > 90;

 // PAR.IVF Curr Wk Prod Status = CND.Unapproved
 PAR.IVF_Curr_Wk_Prod_Status = 'U';

 ENDIF;

 // IF PAR.IVF Production Value Mthd is Market
 IF PAR.IVF_Production_Value_Mthd = 'M';

 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Market Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Market_Price_Per_CWT;

 // IF PAR.IVF Production Value Mthd is Formula
 IF PAR.IVF_Production_Value_Mthd = 'F';

 //?E01452 RMC added
 //?R9083 02/14/17 DN-Modified to add IVF Valuation Grouping as input parm.
 EXECUTE FUNCTION(Rtv to CLC TP Sale IVFRT) TYPE(RTVOBJ) FILE(PMDNREP)           AC2014685;
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 {
  //?USER: Initialize routine

  //?E01452  RMC 3/31/11 use when creating IVF rcds, with "F"ormula prod value
  //?  method and inv method
  // PAR.Weight Billed = CON.*ZERO
  PAR.Weight_Billed = *ZERO;

  // PAR.FOB Gross Amount = CON.*ZERO
  PAR.FOB_Gross_Amount = *ZERO;

  //?USER: Process Data record

  //?Accum Sales History records from all items grouped with the input item
  //?R9083 02/14/17 DN-Modified to also RST by Inv Valuation Grouping.
  EXECUTE FUNCTION(Rtv Sum FOB,shpm finl RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1744773;
  PARAMETER(PAR.IVF_Valuation_Grouping);
  PARAMETER(PAR.IVF_Week_Ending_Date);
  PARAMETER(DB1.Group_with_Item_Code);
  PARAMETER(PAR.Weight_Billed);
  PARAMETER(PAR.FOB_Gross_Amount);
  {
   //?USER: Process Data record

   // PAR.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
   PAR.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

   // PAR.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
   PAR.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

  }

 }

 //?Calc IVF Curr Wk Prod Price/CW
 CASE;

 // IF LCL.Weight Billed is Greater than zero
 IF LCL.Weight_Billed > *ZERO;

 // Compute:Curr Wk Prod Pric
 PAR.IVF_Curr_Wk_Prod_Price_CW = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) * 100;

 //?Calc IVF Curr Wk Prod Price/CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?use sales price
 // PAR.IVF Curr Wk Prod Price/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Curr_Wk_Prod_Price_CW = PAR.IVF_Sales_Price_Per_CWT;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Set: Curr Wk Prod Status to Unapproved... If ...
 CASE;

 // IF PAR.IVF Warehouse Price/CWT is Entered
 IF PAR.IVF_Whs_Price_Per_CWT <> *ZERO;

 // AND PAR.Trans Contol AS400/Plant is Plant
 AND PAR.Trans_Contol_AS400_Plant = 'P';

 //?Warehouse price exists and plant controlled (affect prod is Yes)
 // PAR.IVF Curr Wk Prod Status = CND.Unapproved
 PAR.IVF_Curr_Wk_Prod_Status = 'U';

 ENDIF;

 //?**************************************************
 //?Inventory Value: Use Inv Override if >0 and Approved
 //?   else If Warehouse prices exist, calc the price per those lbs
 //?   and sub the Warehouse lbs from the Ending Inv lbs.(Can be mult whses.)
 //?   Then multiply the remaining Ending Inv Lbs by the Default value
 //?   method's price to get the $$ asso with the value method.
 //?   Add the (Whse price * warehouse lbs) to the above $$ Total
 //?   Divide the $$ Total by the End Inv lbs to get the value per lb.
 //?Curr Week Inv Value = override or price asso with inv value method + more
 CASE;

 // IF PAR.IVF Ovrrde Inv Val Prc/CW is Entered
 IF PAR.IVF_Ovrrde_Inv_Val_Prc_CW <> *ZERO;

 // AND PAR.IVF Cur Wk Inv Val Status is Approved
 AND PAR.IVF_Cur_Wk_Inv_Val_Status = 'A';

 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Ovrrde Inv Val Prc/CW
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Ovrrde_Inv_Val_Prc_CW;

 // PAR.IVF Cur Wk Inv Val Status = CND.Unapproved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'U';

 //?Curr Week Inv Value = override or price asso with inv value method + more
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.IVF Inventory Value Mthd is Sales
 IF PAR.IVF_Inventory_Value_Mthd = 'S';

 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Sales_Price_Per_CWT;

 //?If Sales Date older than 90 days, set sts to Unapproved
 // WRK.Day of the Week USR = CVTVAR(PAR.IVF Sales Price/Pound Dt)
 WRK.Day_of_the_Week_USR = CVTVAR(PAR.IVF_Sales_Price_Per_LB_Dt);

 // WRK.Date (Char-6) USR = SUBSTRING(WRK.Day of the Week USR,CON.4,CON.6)
 WRK.Date_Char_6_USR = SUBSTRING(WRK.Day_of_the_Week_USR:4:6);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CND.*None)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.Date                  USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Date_USR = CVTVAR(WRK.Date_Alpha_USR);

 // WRK.Days = JOB.*Job date - WRK.Date                  USR *DAYS
 WRK.Days = DURATION(JOB.*Job_date WRK.Date_USR 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF WRK.Days is GT 90
 IF WRK.Days > 90;

 // PAR.IVF Cur Wk Inv Val Status = CND.Unapproved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'U';

 ENDIF;

 // IF PAR.IVF Inventory Value Mthd is Market
 IF PAR.IVF_Inventory_Value_Mthd = 'M';

 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Market Price/CWT
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Market_Price_Per_CWT;

 // IF PAR.IVF Inventory Value Mthd is Formula
 IF PAR.IVF_Inventory_Value_Mthd = 'F';

 //?E01452 RMC - added
 //?R9083 02/14/17 DN-Modified to add IVF Valuation Grouping as input parm.
 EXECUTE FUNCTION(Rtv to CLC TP Sale IVFRT) TYPE(RTVOBJ) FILE(PMDNREP)           AC2014685;
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 {
  //?USER: Initialize routine

  //?E01452  RMC 3/31/11 use when creating IVF rcds, with "F"ormula prod value
  //?  method and inv method
  // PAR.Weight Billed = CON.*ZERO
  PAR.Weight_Billed = *ZERO;

  // PAR.FOB Gross Amount = CON.*ZERO
  PAR.FOB_Gross_Amount = *ZERO;

  //?USER: Process Data record

  //?Accum Sales History records from all items grouped with the input item
  //?R9083 02/14/17 DN-Modified to also RST by Inv Valuation Grouping.
  EXECUTE FUNCTION(Rtv Sum FOB,shpm finl RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1744773;
  PARAMETER(PAR.IVF_Valuation_Grouping);
  PARAMETER(PAR.IVF_Week_Ending_Date);
  PARAMETER(DB1.Group_with_Item_Code);
  PARAMETER(PAR.Weight_Billed);
  PARAMETER(PAR.FOB_Gross_Amount);
  {
   //?USER: Process Data record

   // PAR.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
   PAR.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

   // PAR.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
   PAR.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

  }

 }

 //?Calc IVF Cur Wk Inv Val Prc/CW
 CASE;

 // IF LCL.Weight Billed is Greater than zero
 IF LCL.Weight_Billed > *ZERO;

 // Compute:Curr Wk Inv Pric
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) * 100;

 //?Calc IVF Cur Wk Inv Val Prc/CW
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?use the sales price
 // PAR.IVF Cur Wk Inv Val Prc/CW = PAR.IVF Sales Price/CWT
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = PAR.IVF_Sales_Price_Per_CWT;

 ENDIF;

 ENDIF;

 //?If Warehouse lbs > 0, calc those lbs at the whse prices, and accum
 CASE;

 // IF PAR.IVF Warehouse Pounds is Greater than zero
 IF PAR.IVF_Warehouse_Pounds > *ZERO;

 // WRK.ISC Ending Inventory Lbs = PAR.ISC End Inv Final Lbs
 WRK.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inv_Final_Lbs;

 //?R9083 02/15/17 DN-Modified to also RST by Inv Valuation Grouping.
 EXECUTE FUNCTION(Rtv Calc Whse Prc-IVF RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1741671;
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(WRK.Warehouse_Value);
 PARAMETER(WRK.ISC_Ending_Inventory_Lbs);
 {
  //?USER: Initialize routine

  // WRK.ISC Ending Inventory Lbs = PAR.ISC Ending Inventory Lbs
  WRK.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inventory_Lbs;

  // PAR.Warehouse Value = CON.*ZERO
  PAR.Warehouse_Value = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.ISC Ending Inventory Lbs is Greater than zero
  IF PAR.ISC_Ending_Inventory_Lbs > *ZERO;

  CASE;

  // IF PAR.ISC Ending Inventory Lbs GE DB1.ISC End Inv Final Lbs
  IF PAR.ISC_Ending_Inventory_Lbs >= DB1.ISC_Ending_Inv_Final_Lbs;

  // PAR.ISC Ending Inventory Lbs = PAR.ISC Ending Inventory Lbs - DB1.ISC End Inv Final Lbs
  PAR.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inventory_Lbs
  - DB1.ISC_Ending_Inv_Final_Lbs;

  // Compute: Warehouse Value
  PAR.Warehouse_Value = ( ( DB1.ISC_Warehouse_Price_UOM / 100 )
  * DB1.ISC_Ending_Inv_Final_Lbs ) + PAR.Warehouse_Value;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: Warehouse Value
  PAR.Warehouse_Value = ( ( DB1.ISC_Warehouse_Price_UOM / 100 )
  * PAR.ISC_Ending_Inventory_Lbs ) + PAR.Warehouse_Value;

  ENDIF;

  ENDIF;

 }

 //?If Warehouse lbs > 0, calc those lbs at the whse prices, and accum
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Warehouse Value = CON.*ZERO
 WRK.Warehouse_Value = *ZERO;

 // WRK.ISC Ending Inventory Lbs = PAR.ISC End Inv Final Lbs
 WRK.ISC_Ending_Inventory_Lbs = PAR.ISC_Ending_Inv_Final_Lbs;

 ENDIF;

 // WRK.Inventory Value Method $$ = WRK.ISC Ending Inventory Lbs * PAR.IVF Cur Wk Inv Val Prc/CW *
 WRK.Inventory_Value_Method_$$ = WRK.ISC_Ending_Inventory_Lbs
 * PAR.IVF_Cur_Wk_Inv_Val_Prc_CW;

 // WRK.Inventory Value Method $$ = WRK.Inventory Value Method $$ + WRK.Warehouse Value
 WRK.Inventory_Value_Method_$$ = WRK.Inventory_Value_Method_$$ + WRK.Warehouse_Value;

 //?New since 4/02/08 S00184
 CASE;

 // IF PAR.ISC End Inv Final Lbs is Not equal zero
 IF PAR.ISC_Ending_Inv_Final_Lbs <> *ZERO;

 // Compute: Cur Wk Inv Val P
 PAR.IVF_Cur_Wk_Inv_Val_Prc_CW = ( WRK.Inventory_Value_Method_$$
 / PAR.ISC_Ending_Inv_Final_Lbs 'H' ) * 100;

 ENDIF;

 ENDIF;

 //?Set: Curr Wk Inv Valu Status to Unapproved.. if ...
 CASE;

 // IF PAR.IVF Warehouse Price/CWT is Entered
 IF PAR.IVF_Whs_Price_Per_CWT <> *ZERO;

 // PAR.IVF Cur Wk Inv Val Status = CND.Unapproved
 PAR.IVF_Cur_Wk_Inv_Val_Status = 'U';

 ENDIF;

 //?**************************************************
 //?R9083 02/14/17 DN-Modified to Set IVF Valuation Grouping.
 EXECUTE FUNCTION(Crt Inventory Value   CR) TYPE(CRTOBJ) FILE(PPBTCPP)           AC1738124;
 PARAMETER(PAR.ISC_Valuation_Grouping);
 PARAMETER(PAR.IVF_Week_Ending_Date);
 PARAMETER(PAR.IVF_Item_Code);
 PARAMETER(PAR.IVF_WIP_FG_Item_Code);
 PARAMETER(PAR.IVF_Item_Type);
 PARAMETER(PAR.IVF_Unused_Sts_2);
 PARAMETER(PAR.IVF_Item_Cmdty_Price_Grp);
 PARAMETER(PAR.IVF_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(PAR.IVF_Item_Structure_Type);
 PARAMETER(PAR.IVF_Item_Structure_Group);
 PARAMETER(PAR.IVF_Item_Structure_Class);
 PARAMETER(PAR.IVF_Item_Market_Overage);
 PARAMETER(PAR.IVF_Item_GL_Sub_Code);
 PARAMETER(PAR.IVF_Item_UOM_Pricing);
 PARAMETER(PAR.IVF_Inventory_Value_Mthd);
 PARAMETER(PAR.IVF_Production_Value_Mthd);
 PARAMETER(LCL.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Sales_Price_Per_CWT);
 PARAMETER(PAR.IVF_Sales_Price_Per_LB_Dt);
 PARAMETER(PAR.IVF_Market_Price_Per_CWT);
 PARAMETER(PAR.IVF_Warehouse_Pounds);
 PARAMETER(PAR.IVF_Whs_Price_Per_CWT);
 PARAMETER(PAR.IVF_Ovrrde_Prod_Price_CWT);
 PARAMETER(PAR.IVF_Ovrrde_Prod_Comment);
 PARAMETER(PAR.IVF_Curr_Wk_Prod_Price_CW);
 PARAMETER(PAR.IVF_Curr_Wk_Prod_Status);
 PARAMETER(PAR.IVF_Ovrrde_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Ovrrde_Inv_Val_Commnt);
 PARAMETER(PAR.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Cur_Wk_Inv_Val_Status);
 PARAMETER(*ZERO);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


