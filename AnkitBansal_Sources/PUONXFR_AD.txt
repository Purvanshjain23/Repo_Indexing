// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUONXFR
// ?Date: 14.08.2025 Time: 03:50:59
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?S17064 DN 05/06/21-Added 'EDI Trading Partner No.' as Input Parm.
EXECUTE FUNCTION(Crt EDI 856 DTL & TARE RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2177315;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.Total_Quantity_Ship_USR);
PARAMETER(PAR.Total_Weight_Ship_USR);
PARAMETER(PAR.Total_Gross_Weight_USR);
PARAMETER(PAR.Total_Pallet_Count_Hdr_U);
PARAMETER(PAR.Total_Unit_Count_Hdr_U);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 // LCL.USR Update Flag = CND.No
 LCL.USR_Update_Flag = *BLANK;

 //?R17040 DN 05/14/21-Get EDI Tare Level f/856 Flag.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV EDI Tare Level 856RT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2197231;
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER('ADVSN');
 PARAMETER(LCL.EDI_Tare_Level_Req_f_856);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?USER: Process Data record

 //?INITIALIZATION:
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Create EDI ASN 856 V2 USR = CND.No
 PAR.Create_EDI_ASN_856_V2_USR = 'N';

 ENDIF;

 //?VALIDATIONS:
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Val Cust Setup 4/856 V2IF) TYPE(EXCINTFUN)                     AC2178250;
 PARAMETER(PAR.Create_EDI_ASN_856_V2_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(NLL.Country_Code);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(NLL.Warehouse_Location);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  //?VALIDATIONS: Is Bill To Customer Setup for EDI 856 ASN V2?
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Create EDI ASN 856 V2 USR = CND.No
  PAR.Create_EDI_ASN_856_V2_USR = 'N';

  EXECUTE FUNCTION(RTV EDI ASN 856 Info  RT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2177034;
  PARAMETER(PAR.Bill_to_Customer);
  PARAMETER('ADVSN');
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Detailed_ASN_856_Rqd);
  PARAMETER(LCL.Record_Status);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Do Not Check Customer & Warehouse if Coming From PDN2XFR Program.
  CASE;

  //?Do Not Check Customer & Warehouse if Coming From PDN2XFR Program.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Bill To Customer Must Be Active & Setup for EDI 856.
  CASE;

  // IF LCL.EDI Detailed ASN 856 Rqd is Yes
  IF LCL.EDI_Detailed_ASN_856_Rqd = 'Y';

  // AND LCL.Record Status is Active
  AND LCL.Record_Status = 'A';

  // PAR.Create EDI ASN 856 V2 USR = CND.Yes
  PAR.Create_EDI_ASN_856_V2_USR = 'Y';

  ENDIF;

  //?WI609_2 Check Internal or External Warehouse Qualifies for 856 ASN.
  CASE;

  // IF PAR.Create EDI ASN 856 V2 USR is Yes
  IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

  EXECUTE FUNCTION(RTV 1st Whse/Country   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426676;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(1);
  PARAMETER(1);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(PAR.Country_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(Rtv EDI 856 ASN Info RT) TYPE(RTVOBJ) FILE(CAADREP)            AC2234972;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.Warehouse_Location);
  PARAMETER(LCL.WHS_Live_with_Carlisle);
  PARAMETER(NLL.WHS_PFS_Interface);
  PARAMETER(LCL.Crt_856_ASN_for_3PL_Whse);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Warehouse Location = LCL.Warehouse Location
  PAR.Warehouse_Location = LCL.Warehouse_Location;

  CASE;

  // IF LCL.Warehouse Location is Internal (Plant)
  IF LCL.Warehouse_Location = 'I';

  // AND LCL.WHS Live w/Carlisle is Yes
  AND LCL.WHS_Live_with_Carlisle = 'Y';

  // PAR.Create EDI ASN 856 V2 USR = CND.Yes
  PAR.Create_EDI_ASN_856_V2_USR = 'Y';

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Create EDI ASN 856 V2 USR = CND.No
  PAR.Create_EDI_ASN_856_V2_USR = 'N';

  //?WI609_2 JM 10/08/24-Allow External 3PL Warehouses to Receive EDI 856 ASN.
  CASE;

  // IF LCL.Warehouse Location is External
  IF LCL.Warehouse_Location = 'E';

  CASE;

  // IF LCL.Crt 856 ASN for 3PL Whse is Yes
  IF LCL.Crt_856_ASN_for_3PL_Whse = 'Y';

  // PAR.Create EDI ASN 856 V2 USR = CND.Yes
  PAR.Create_EDI_ASN_856_V2_USR = 'Y';

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?WI609_2 JM 10/08/24-Check EDI Manual PO.
  CASE;

  // IF PAR.Create EDI ASN 856 V2 USR is Yes
  IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

  // Call program Rtv EDI Manual PO Sts XF.
  CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('ADVSN');
  PARAMETER(LCL.Send_EDI_Document_Y_N);

  //?If Send EDI Documents = N, set Create EDI ASN 856 V2 USR = N
  CASE;

  // IF LCL.Send EDI Document Y/N is No
  IF LCL.Send_EDI_Document_Y_N = 'N';

  // PAR.Create EDI ASN 856 V2 USR = CND.No
  PAR.Create_EDI_ASN_856_V2_USR = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?R17040 DN 03/05/21-Additional Validations.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Do Not Reprocess EDI 856 Transactions Already Been Sent.
 CASE;

 // IF PAR.Create EDI ASN 856 V2 USR is Yes
 IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 //?This scenario will handle Loads with different Bill To Customers
 //?that may have a Load(s) that may have already been 'Sent'.
 EXECUTE FUNCTION(RTV EDI 856/824 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2176913;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.OHE_EDI_Error_Reasons_2);
 PARAMETER(LCL.OHE_EDI_856_Action);
 PARAMETER(NLL.OHE_EDI_824_Action);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.OHE EDI 856 Action is Sent
 IF LCL.OHE_EDI_856_Action = 'S';

 // PAR.Create EDI ASN 856 V2 USR = CND.No
 PAR.Create_EDI_ASN_856_V2_USR = 'N';

 ENDIF;

 ENDIF;

 //?If Trade Partner Control is Setup, Check for Held EDI 856.
 CASE;

 // IF PAR.Create EDI ASN 856 V2 USR is Yes
 IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 EXECUTE FUNCTION(RTV EDI 856 Cntrl Flag RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2195453;
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Hold_856_f_Cust_Asgn_App#);
 PARAMETER(LCL.Hold_856_f_Carr_PRO);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Hold 856 f/Cust Asgn App# is Yes
 IF LCL.Hold_856_f_Cust_Asgn_App# = 'Y';

 // OR LCL.Hold 856 f/Carr PRO is Yes
 OR LCL.Hold_856_f_Carr_PRO = 'Y';

 // Call program Val Upd Held 856 f/TP XF.
 CALL PROGRAM(Val Upd Held 856 f/TP XF) ('PUSWXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(LCL.Hold_856_f_Cust_Asgn_App#);
 PARAMETER(LCL.Hold_856_f_Carr_PRO);
 PARAMETER(PAR.Create_EDI_ASN_856_V2_USR);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?PROCESS: Create 856 ORD (ECP142), DTL (ECP140) & TARE (ECP145) Data Sets.
 CASE;

 // IF PAR.Create EDI ASN 856 V2 USR is Yes
 IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 //?First Time Processing.
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 // LCL.USR Update Flag = CND.Yes
 LCL.USR_Update_Flag = 'Y';

 // LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
 LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 ENDIF;

 //?Break by PO# and Create EDI Adv Ship Ntc Order V2 (ECP142).
 CASE;

 // IF DB1.Customer Purchase Order # EQ LCL.Customer Purchase Order #
 IF DB1.Customer_Purchase_Order_# = LCL.Customer_Purchase_Order_#;

 //?Set Required Info.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Order Number Alpha = CVTVAR(DB1.Order Number)
 LCL.Order_Number_Alpha = CVTVAR(DB1.Order_Number);

 // PAR.Orders on PO - TXT = CONCAT(PAR.Orders on PO - TXT,LCL.Order Number Alpha,CON.*ZERO)
 PAR.Orders_on_PO_TXT = PAR.Orders_on_PO_TXT + LCL.Order_Number_Alpha (0);

 //?Set Packaging Code.
 CASE;

 // IF DB1.Palletize is yes
 IF DB1.Palletize = 'Y';

 // LCL.TD101-Packaging Code = CND.Pallet
 LCL.TD101_Packaging_Code = 'PLT';

 //?Set Packaging Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TD101-Packaging Code = CND.Case
 LCL.TD101_Packaging_Code = 'CAS';

 ENDIF;

 // LCL.Order Date USR = DB1.Order Date
 LCL.Order_Date_USR = DB1.Order_Date;

 // LCL.Requested Delivery DteUSR = DB1.Requested Delivery Date
 LCL.Requested_Delivery_DteUSR = DB1.Requested_Delivery_Date;

 //?R17040 DN 03/08/21-Get Customer Vendor f/PO & Save Invoice Number.
 EXECUTE FUNCTION(RTV Cust Vendor f/PO  RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2195475;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_Customer_Vendor_f_PO);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17064 DN 05/06/21-If Customer Vendor is Blank, Get From ECP004.
 CASE;

 // IF LCL.OHE Customer Vendor f/PO is *Blank
 IF LCL.OHE_Customer_Vendor_f_PO = *BLANK;

 EXECUTE FUNCTION(Rtv Vendor Number     RT) TYPE(RTVOBJ) FILE(ECP004)            AC2197132;
 PARAMETER(PAR.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.OHE_Customer_Vendor_f_PO);
 {
  //?USER: Initialize routine

  // PAR.Customer Ref ID = CON.*BLANK
  PAR.Customer_Ref_ID = *BLANK;

  //?USER: Process Data record

  //?Use Last Non-Blank Vendor Number.
  CASE;

  // IF DB1.Customer Ref ID is Entered
  IF DB1.Customer_Ref_ID <> *BLANK;

  // PAR.Customer Ref ID = DB1.Customer Ref ID
  PAR.Customer_Ref_ID = DB1.Customer_Ref_ID;

  ENDIF;

 }

 ENDIF;

 // LCL.Invoice Number = DB1.Invoice Number
 LCL.Invoice_Number = DB1.Invoice_Number;

 ENDIF;

 //?Accumulate SUM Qty/Wgt for All Orders.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?R17040 DN 03/08/21-Added Calculation for Total Unit Count.
 EXECUTE FUNCTION(Rtv Sum Qty/Wgt 4/856  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2177569;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Total_Quantity_Ship_USR);
 PARAMETER(LCL.Total_Weight_Ship_USR);
 PARAMETER(LCL.Total_Gross_Weight_USR);
 PARAMETER(LCL.Total_Unit_Count_Hdr_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Process Data record

  //?Total Quantity Shipped.
  // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + DB1.Quantity Shipped Total
  PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + DB1.Quantity_Shipped_Total;

  //?Total Net Weight.
  // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Shipped Total
  PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Shipped_Total;

  //?Total Gross Weight.
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // LCL.USR Weight Accumulated = CON.*ZERO
  LCL.USR_Weight_Accumulated = *ZERO;

  // LCL.Order Quantity = CON.*ZERO
  LCL.Order_Quantity = *ZERO;

  // Call program RTV Gross Wgt/Qty     XF.
  CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.USR_Weight_Accumulated);
  PARAMETER(LCL.Order_Quantity);
  PARAMETER(*ZERO);

  // PAR.Total Gross Weight USR = LCL.USR Weight Accumulated
  PAR.Total_Gross_Weight_USR = LCL.USR_Weight_Accumulated;

  ENDIF;

  //?R17040 DN 03/08/21-Get Item Dflt Info & Calc/Accum Total Unit Count Hdr.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate & Accumulate Total Unit Count Hdr.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Compute: Tot Unit Cnt Hdr
  PAR.Total_Unit_Count_Hdr_U = ( ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit )
  * DB1.Quantity_Shipped_Total ) + PAR.Total_Unit_Count_Hdr_U;

  //?Calculate & Accumulate Total Unit Count Hdr.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Unit Count Hdr U = PAR.Total Unit Count Hdr U + DB1.Quantity Shipped Total
  PAR.Total_Unit_Count_Hdr_U = PAR.Total_Unit_Count_Hdr_U + DB1.Quantity_Shipped_Total;

  ENDIF;

  ENDIF;

 }

 //?R17040 DN 03/09/21-Get Total Pallet Count.
 // Call program Exc Total Pallet Count XF.
 CALL PROGRAM(Exc Total Pallet Count XF) ('PUSXXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Total_Pallet_Count_Hdr_U);

 //?Accumulate Totals for All Orders by PO# to Create ECP142 ORD Record.
 // PAR.Total Qty Ship ORD USR = PAR.Total Qty Ship ORD USR + LCL.Total Quantity Ship  USR
 PAR.Total_Qty_Ship_ORD_USR = PAR.Total_Qty_Ship_ORD_USR + LCL.Total_Quantity_Ship_USR;

 // PAR.Total Wgt Ship ORD USR = PAR.Total Wgt Ship ORD USR + LCL.Total Weight Ship    USR
 PAR.Total_Wgt_Ship_ORD_USR = PAR.Total_Wgt_Ship_ORD_USR + LCL.Total_Weight_Ship_USR;

 // PAR.Total Gross Wgt ORD USR = PAR.Total Gross Wgt ORD USR + LCL.Total Gross Weight USR
 PAR.Total_Gross_Wgt_ORD_USR = PAR.Total_Gross_Wgt_ORD_USR + LCL.Total_Gross_Weight_USR;

 //?R17040 DN 03/09/21-ACCUM Total Unit Count ORD & Total Pallet Count ORD.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Total Unit Count ORD U = PAR.Total Unit Count ORD U + LCL.Total Unit Count Hdr U
 PAR.Total_Unit_Count_ORD_U = PAR.Total_Unit_Count_ORD_U + LCL.Total_Unit_Count_Hdr_U;

 // PAR.Total Pallet Count ORD U = PAR.Total Pallet Count ORD U + LCL.Total Pallet Count Hdr U
 PAR.Total_Pallet_Count_ORD_U = PAR.Total_Pallet_Count_ORD_U
 + LCL.Total_Pallet_Count_Hdr_U;

 ENDIF;

 //?Accumulate Totals for All Orders to Create ECP139 HDR Record.
 // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + LCL.Total Quantity Ship  USR
 PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + LCL.Total_Quantity_Ship_USR;

 // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + LCL.Total Weight Ship    USR
 PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + LCL.Total_Weight_Ship_USR;

 // PAR.Total Gross Weight USR = PAR.Total Gross Weight USR + LCL.Total Gross Weight USR
 PAR.Total_Gross_Weight_USR = PAR.Total_Gross_Weight_USR + LCL.Total_Gross_Weight_USR;

 //?R17040 DN 03/08/21-ACCUM Total Unit Count Hdr & Total Pallet Count Hdr.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Total Unit Count Hdr U = PAR.Total Unit Count Hdr U + LCL.Total Unit Count Hdr U
 PAR.Total_Unit_Count_Hdr_U = PAR.Total_Unit_Count_Hdr_U + LCL.Total_Unit_Count_Hdr_U;

 // PAR.Total Pallet Count Hdr U = PAR.Total Pallet Count Hdr U + LCL.Total Pallet Count Hdr U
 PAR.Total_Pallet_Count_Hdr_U = PAR.Total_Pallet_Count_Hdr_U
 + LCL.Total_Pallet_Count_Hdr_U;

 ENDIF;

 ENDIF;

 //?Break by PO# and Create EDI Adv Ship Ntc Order V2 (ECP142).
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Create ECP142 record for each PO# Break.
 //?R17040 DN 03/08/21-Populate New Fields: Pallet Count, Unit Count,
 //?       Slip Sheet Count, Vendor Nbr & Invoice Nbr.
 EXECUTE FUNCTION(Crt EDI ASN Order V2  CR) TYPE(CRTOBJ) FILE(ECP142)            AC2175834;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Order_Date_USR);
 PARAMETER('SO');
 PARAMETER(PAR.Orders_on_PO_TXT);
 PARAMETER(LCL.TD101_Packaging_Code);
 PARAMETER(PAR.Total_Qty_Ship_ORD_USR);
 PARAMETER(PAR.Total_Pallet_Count_ORD_U);
 PARAMETER(PAR.Total_Unit_Count_ORD_U);
 PARAMETER(1);
 PARAMETER(PAR.Total_Gross_Wgt_ORD_USR);
 PARAMETER(PAR.Total_Wgt_Ship_ORD_USR);
 PARAMETER(LCL.Requested_Delivery_DteUSR);
 PARAMETER(LCL.Requested_Delivery_DteUSR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Customer_Vendor_f_PO);
 PARAMETER(LCL.Invoice_Number);
 //?Reinitialize for Next Purchase Order #.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
 LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 // PAR.Orders on PO - TXT = CON.*BLANK
 PAR.Orders_on_PO_TXT = *BLANK;

 // LCL.Order Number Alpha = CVTVAR(DB1.Order Number)
 LCL.Order_Number_Alpha = CVTVAR(DB1.Order_Number);

 // PAR.Orders on PO - TXT = LCL.Order Number Alpha
 PAR.Orders_on_PO_TXT = LCL.Order_Number_Alpha;

 //?Set Packaging Code.
 CASE;

 // IF DB1.Palletize is yes
 IF DB1.Palletize = 'Y';

 // LCL.TD101-Packaging Code = CND.Pallet
 LCL.TD101_Packaging_Code = 'PLT';

 //?Set Packaging Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TD101-Packaging Code = CND.Case
 LCL.TD101_Packaging_Code = 'CAS';

 ENDIF;

 // LCL.Order Date USR = DB1.Order Date
 LCL.Order_Date_USR = DB1.Order_Date;

 // LCL.Requested Delivery DteUSR = DB1.Requested Delivery Date
 LCL.Requested_Delivery_DteUSR = DB1.Requested_Delivery_Date;

 //?R17040 DN 03/08/21-Get Customer Vendor f/PO & Save Invoice Number.
 EXECUTE FUNCTION(RTV Cust Vendor f/PO  RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2195475;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_Customer_Vendor_f_PO);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17064 DN 05/06/21-If Customer Vendor is Blank, Get From ECP004.
 CASE;

 // IF LCL.OHE Customer Vendor f/PO is *Blank
 IF LCL.OHE_Customer_Vendor_f_PO = *BLANK;

 EXECUTE FUNCTION(Rtv Vendor Number     RT) TYPE(RTVOBJ) FILE(ECP004)            AC2197132;
 PARAMETER(PAR.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.OHE_Customer_Vendor_f_PO);
 {
  //?USER: Initialize routine

  // PAR.Customer Ref ID = CON.*BLANK
  PAR.Customer_Ref_ID = *BLANK;

  //?USER: Process Data record

  //?Use Last Non-Blank Vendor Number.
  CASE;

  // IF DB1.Customer Ref ID is Entered
  IF DB1.Customer_Ref_ID <> *BLANK;

  // PAR.Customer Ref ID = DB1.Customer Ref ID
  PAR.Customer_Ref_ID = DB1.Customer_Ref_ID;

  ENDIF;

 }

 ENDIF;

 // LCL.Invoice Number = DB1.Invoice Number
 LCL.Invoice_Number = DB1.Invoice_Number;

 ENDIF;

 //?Accumulate SUM Qty/Wgt for All Orders.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?R17040 DN 03/08/21-Added Calculation for Total Unit Count.
 EXECUTE FUNCTION(Rtv Sum Qty/Wgt 4/856  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2177569;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Total_Quantity_Ship_USR);
 PARAMETER(LCL.Total_Weight_Ship_USR);
 PARAMETER(LCL.Total_Gross_Weight_USR);
 PARAMETER(LCL.Total_Unit_Count_Hdr_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Process Data record

  //?Total Quantity Shipped.
  // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + DB1.Quantity Shipped Total
  PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + DB1.Quantity_Shipped_Total;

  //?Total Net Weight.
  // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + DB1.Weight Shipped Total
  PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + DB1.Weight_Shipped_Total;

  //?Total Gross Weight.
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // LCL.USR Weight Accumulated = CON.*ZERO
  LCL.USR_Weight_Accumulated = *ZERO;

  // LCL.Order Quantity = CON.*ZERO
  LCL.Order_Quantity = *ZERO;

  // Call program RTV Gross Wgt/Qty     XF.
  CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.USR_Weight_Accumulated);
  PARAMETER(LCL.Order_Quantity);
  PARAMETER(*ZERO);

  // PAR.Total Gross Weight USR = LCL.USR Weight Accumulated
  PAR.Total_Gross_Weight_USR = LCL.USR_Weight_Accumulated;

  ENDIF;

  //?R17040 DN 03/08/21-Get Item Dflt Info & Calc/Accum Total Unit Count Hdr.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate & Accumulate Total Unit Count Hdr.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Compute: Tot Unit Cnt Hdr
  PAR.Total_Unit_Count_Hdr_U = ( ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit )
  * DB1.Quantity_Shipped_Total ) + PAR.Total_Unit_Count_Hdr_U;

  //?Calculate & Accumulate Total Unit Count Hdr.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Unit Count Hdr U = PAR.Total Unit Count Hdr U + DB1.Quantity Shipped Total
  PAR.Total_Unit_Count_Hdr_U = PAR.Total_Unit_Count_Hdr_U + DB1.Quantity_Shipped_Total;

  ENDIF;

  ENDIF;

 }

 //?R17040 DN 03/09/21-Get Total Pallet Count.
 // Call program Exc Total Pallet Count XF.
 CALL PROGRAM(Exc Total Pallet Count XF) ('PUSXXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Total_Pallet_Count_Hdr_U);

 //?PO Break, Reset Totals to Create ECP142 ORD Record.
 // PAR.Total Qty Ship ORD USR = LCL.Total Quantity Ship  USR
 PAR.Total_Qty_Ship_ORD_USR = LCL.Total_Quantity_Ship_USR;

 // PAR.Total Wgt Ship ORD USR = LCL.Total Weight Ship    USR
 PAR.Total_Wgt_Ship_ORD_USR = LCL.Total_Weight_Ship_USR;

 // PAR.Total Gross Wgt ORD USR = LCL.Total Gross Weight USR
 PAR.Total_Gross_Wgt_ORD_USR = LCL.Total_Gross_Weight_USR;

 //?R17040 DN 03/09/21-Reset Total Unit Count ORD & Total Pallet Count ORD.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Total Unit Count ORD U = LCL.Total Unit Count Hdr U
 PAR.Total_Unit_Count_ORD_U = LCL.Total_Unit_Count_Hdr_U;

 // PAR.Total Pallet Count ORD U = LCL.Total Pallet Count Hdr U
 PAR.Total_Pallet_Count_ORD_U = LCL.Total_Pallet_Count_Hdr_U;

 ENDIF;

 //?Accumulate Totals for All Orders to Create ECP139 HDR Record.
 // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + LCL.Total Quantity Ship  USR
 PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + LCL.Total_Quantity_Ship_USR;

 // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + LCL.Total Weight Ship    USR
 PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + LCL.Total_Weight_Ship_USR;

 // PAR.Total Gross Weight USR = PAR.Total Gross Weight USR + LCL.Total Gross Weight USR
 PAR.Total_Gross_Weight_USR = PAR.Total_Gross_Weight_USR + LCL.Total_Gross_Weight_USR;

 //?R17040 DN 03/08/21-ACCUM Total Unit Count Hdr & Total Pallet Count Hdr.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Total Unit Count Hdr U = PAR.Total Unit Count Hdr U + LCL.Total Unit Count Hdr U
 PAR.Total_Unit_Count_Hdr_U = PAR.Total_Unit_Count_Hdr_U + LCL.Total_Unit_Count_Hdr_U;

 // PAR.Total Pallet Count Hdr U = PAR.Total Pallet Count Hdr U + LCL.Total Pallet Count Hdr U
 PAR.Total_Pallet_Count_Hdr_U = PAR.Total_Pallet_Count_Hdr_U
 + LCL.Total_Pallet_Count_Hdr_U;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Create ECP140 DTL & ECP145 TARE for Each Order.
 //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
 EXECUTE FUNCTION(Crt EDI 856 DTL & TARE RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2177593;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(LCL.TD101_Packaging_Code);
 PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.EDI_Tare_Level_Req_f_856);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  // LCL.First Time Through USR = CND.Yes
  LCL.First_Time_Through_USR = 'Y';

  // LCL.Record Processed Usr = CND.No
  LCL.Record_Processed_Usr = 'N';

  // LCL.Pallet ID = 0 Exist USR = CND.No
  LCL.Pallet_ID_0_Exist_USR = 'N';

  //?R17040 DN 03/12/21-Initialize Single Item Pallet Flag.
  // LCL.Single Item Pallet Flag = CND.Yes
  LCL.Single_Item_Pallet_Flag = 'Y';

  //?USER: Process Data record

  //?First Time Processing.
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // AND DB1.Case Quantity is GT *ZERO
  AND DB1.Case_Quantity > *ZERO;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // LCL.Manifest Pallet Number = DB1.Manifest Pallet Number
  LCL.Manifest_Pallet_Number = DB1.Manifest_Pallet_Number;

  // LCL.Manifest Pallet Nbr 3PL = DB1.Manifest Pallet Nbr 3PL
  LCL.Manifest_Pallet_Nbr_3PL = DB1.Manifest_Pallet_Nbr_3PL;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  //?R17040 DN 03/12/21-Save 1st Item Code for Each Unique Pallet #.
  // LCL.1st Item Code f/Pallet U = DB1.Item Code
  LCL.X1st_Item_Code_f_Pallet_U = DB1.Item_Code;

  //?R17040 DN 03/15/21-Commented Out. No longer needed.
  ENDIF;

  //?Break & SUM Qty/Wgt by Pallet ID.
  CASE;

  // IF DB1.Case Quantity is GT *ZERO
  IF DB1.Case_Quantity > *ZERO;

  // LCL.Record Processed Usr = CND.Yes
  LCL.Record_Processed_Usr = 'Y';

  CASE;

  // IF DB1.Manifest Pallet Number EQ LCL.Manifest Pallet Number
  IF DB1.Manifest_Pallet_Number = LCL.Manifest_Pallet_Number;

  //?Pallet=0, Break on Item to Clear Accum Totals for Qty/Wgt.
  CASE;

  // IF LCL.Manifest Pallet Number is Not Entered
  IF LCL.Manifest_Pallet_Number = *ZERO;

  //?NOTE: This routine will handle all transactions w/ Pallet ID = 0.
  // LCL.Pallet ID = 0 Exist USR = CND.Yes
  LCL.Pallet_ID_0_Exist_USR = 'Y';

  //?Item Code Break Then Create DTL Record and Reset Accum Qty/Wgt Totals.
  CASE;

  // IF DB1.Item Code EQ LCL.Item Code
  IF DB1.Item_Code = LCL.Item_Code;

  //?Item Code Break Then Create DTL Record and Reset Accum Qty/Wgt Totals.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create EDI ASN DTL V2 (ECP140) for Item Break.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Manifest Pallet# Txt = CVTVAR(LCL.Manifest Pallet Number)
  LCL.Manifest_Pallet#_Txt = CVTVAR(LCL.Manifest_Pallet_Number);

  // LCL.Manifest Pallet Txt 3PL = CVTVAR(LCL.Manifest Pallet Nbr 3PL)
  LCL.Manifest_Pallet_Txt_3PL = CVTVAR(LCL.Manifest_Pallet_Nbr_3PL);

  //?R17040 DN 03/12/21-Set Single Item Pallet Flag to No.
  // LCL.Single Item Pallet Flag = CND.No
  LCL.Single_Item_Pallet_Flag = 'N';

  //?Get/Set Info for EDI Adv Ship Ntc Dtl V2 (ECP140).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Item Break, Set O.D. Qty Ordered with M.D. Shipped Qty.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?NOTE: We will handle the Total Qty Ordered vs Total Qty Shipped
  //?      differences, if any, in the Last Record processing.
  // LCL.SN105 Quantity Ordered = PAR.Total Qty Ship DTL USR
  LCL.SN105_Quantity_Ordered = PAR.Total_Qty_Ship_DTL_USR;

  ENDIF;

  // LCL.Product ID Manuf Item = CVTVAR(LCL.Item Code)
  LCL.Product_ID_Manuf_Item = CVTVAR(LCL.Item_Code);

  EXECUTE FUNCTION(Rtv for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2177736;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Unit_Price);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Conversion to Set Shipped & Ordered UOM.
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // OR LCL.U/M - Ordered is Cases
  OR LCL.U_M_Ordered = 'CS';

  // LCL.SN103 Shipped UOM = CND.Cases
  LCL.SN103_Shipped_UOM = 'CA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF LCL.U/M - Ordered is Each
  IF LCL.U_M_Ordered = 'EA';

  // OR LCL.U/M - Ordered is Combos
  OR LCL.U_M_Ordered = 'CB';

  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?All Others Convert to Each.
  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  ENDIF;

  EXECUTE FUNCTION(Rtv GTIN              RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2099107;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.IDE_GTIN);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set PO402-Pack Size.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // LCL.PO402-Pack Size = LCL.Pieces Per Bag * LCL.Bags Per Unit *
  LCL.PO402_Pack_Size = LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit;

  //?Set PO402-Pack Size.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PO402-Pack Size = CON.1
  LCL.PO402_Pack_Size = 1;

  ENDIF;

  //?Set Production Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Oldest Prod Date   RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2154017;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Case Quantity is GT *ZERO
   IF DB1.Case_Quantity > *ZERO;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  // LCL.Production Date USR D8# = LCL.Production Date
  LCL.Production_Date_USR_D8# = LCL.Production_Date;

  // LCL.SLN12 Prod ID LT = CVTVAR(LCL.Production Date USR D8#)
  LCL.SLN12_Prod_ID_LT = CVTVAR(LCL.Production_Date_USR_D8#);

  EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Date_Out_60_USR);
  {
   //?Execute internal function

   //?convert numeric date to character date.
   // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
   PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

   //?extract month, day, and year.
   // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
   PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

   // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
   PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

   // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
   PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

   //?reconstruct date in mmddyy format.
   // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
   PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
   PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

   //?convert character date to numeric date.
   // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
   PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

  }

  // LCL.REF02-Batch Lot = CVTVAR(LCL.Date Out (6,0) USR)
  LCL.REF02_Batch_Lot = CVTVAR(LCL.Date_Out_60_USR);

  ENDIF;

  //?Set Product ID UPC.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UK');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Record Exist?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Record Exist?
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UA');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Set Product ID - Purchs Item.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No & Type RT) TYPE(RTVOBJ) FILE(POBIREP)          AC2177756;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.CIR_Resource_No_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  CASE;

  // IF LCL.CIR Resource No Type is Purchaser Item Code
  IF LCL.CIR_Resource_No_Type = 'PI';

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Note: Trading Partner derived from BTC# & not STC#.
  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('PI');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Try with CB                                  W107438 DN 09/02/22
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('CB');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Set Shelf Life Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R17040 DN 03/09/21-Changed to Get Also Whse State Code.
  EXECUTE FUNCTION(RTV for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2195483;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.Warehouse_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Fresh or Frozen?
  CASE;

  // IF LCL.Warehouse Type is Fresh
  IF LCL.Warehouse_Type = 'FR';

  //?Hard coding 7 days here.
  // LCL.Shelf Life Date USR = LCL.Production Date + CON.7 *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date 7 'DY' 1111111 'NONE' 'N' 1);

  //?Fresh or Frozen?
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Must be Frozen.
  EXECUTE FUNCTION(Rtv First Notice Val   RT) TYPE(RTVOBJ) FILE(PUBRREP)          AC2178072;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.ISLU_First_Notice);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Item Found Else Use 120 Days.
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Item Found Else Use 120 Days.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Hard coding 120 days here.
  // LCL.ISLU First Notice = CON.120
  LCL.ISLU_First_Notice = 120;

  ENDIF;

  // LCL.Shelf Life Date USR = LCL.Production Date + LCL.ISLU First Notice *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date LCL.ISLU_First_Notice 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  // LCL.Shelf Life Date D8# USR = LCL.Shelf Life Date USR
  LCL.Shelf_Life_Date_D8#_USR = LCL.Shelf_Life_Date_USR;

  // LCL.DTM02-Shelf Life Date = LCL.Shelf Life Date D8# USR
  LCL.DTM02_Shelf_Life_Date = LCL.Shelf_Life_Date_D8#_USR;

  ENDIF;

  //?Set LIN/UP UPC Consumer Pckge & GTin 12 Lin02. R17040 DN 3/25/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UP');
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('EN');
  PARAMETER(LCL.GTin_12_Lin02);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Get/Set Info for EDI Adv Ship Ntc Tare V2 (ECP145). R17040 DN 03/16/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Update ECP145 TARE only at Pallet Number Break.
  //?Calc/Accum Total Unit Count TARE for Item Code Break.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate & Accumulate Total Unit Count TARE.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Compute: Tot Unt Cnt TARE
  PAR.Total_Unit_Count_TARE_U = ( ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit )
  * PAR.Total_Case_Qty_TARE_USR ) + PAR.Total_Unit_Count_TARE_U;

  //?Calculate & Accumulate Total Unit Count TARE.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Unit Count TARE U = PAR.Total Unit Count TARE U + PAR.Total Case Qty TARE USR
  PAR.Total_Unit_Count_TARE_U = PAR.Total_Unit_Count_TARE_U + PAR.Total_Case_Qty_TARE_USR;

  ENDIF;

  //?Clear Accum.
  // PAR.Total Case Qty TARE USR = CON.*ZERO
  PAR.Total_Case_Qty_TARE_USR = *ZERO;

  ENDIF;

  ENDIF;

  //?R17040 DN 03/09/21-Populate New Fields.
  //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
  CASE;

  // IF LCL.Manifest Pallet Nbr 3PL is Not Zero
  IF LCL.Manifest_Pallet_Nbr_3PL <> 0;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2 NoCDCR) TYPE(CRTOBJ) FILE(ECP140)           AC2237649;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet_Txt_3PL);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2    CR) TYPE(CRTOBJ) FILE(ECP140)            AC2175872;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet#_Txt);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
  PARAMETER(PAR.EDI_Tare_Level_Req_f_856);
  {
   //?USER: Processing before Data update

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   CASE;

   // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
   IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Manifest Pallet Number is Not Entered
   IF PAR.Manifest_Pallet_Number = *ZERO;

   //?R17040 DN 05/17/21-Commented Out & Moved Below.
   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   CASE;

   // IF PAR.EDI Tare Level Req f/856 is Yes
   IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
   DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Check Digit Logic to Set Pallet ID #.
   EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(LCL.W0407_Pallet_Number);
   {
    //?Execute internal function

    // PAR.W0407 Pallet Number = CON.*ZERO
    PAR.W0407_Pallet_Number = *ZERO;

    //?SUM Up Odd & Even # Positions for Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Federal_Tax_Id);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
    LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

    // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
    LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

    //?Position 1 will always be 1.
    // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

    // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
    + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
    + LCL.Federal_Tax_ID_Pos7_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
    + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
    + LCL.Federal_Tax_ID_Pos8_Nbr;

    ENDIF;

    //?SUM Up Odd & Even # Positions for Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
    LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

    // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

    // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
    LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

    // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
    LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
    + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
    + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
    + LCL.Manifest_Pallet#_Pos9_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
    + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
    + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

    ENDIF;

    //?Calculated Check Digit Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Calculated Value
    LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

    // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
    LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

    // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
    LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

    ENDIF;

    //?Format W0407 Pallet Number for Output.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
    LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

    // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
    LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO)

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Tx
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*

    // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
    PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

    ENDIF;

   }

   // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
   DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?Reinitialize for Next Pallet Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Manifest Pallet Number = DB1.Manifest Pallet Number
  LCL.Manifest_Pallet_Number = DB1.Manifest_Pallet_Number;

  // LCL.Manifest Pallet Nbr 3PL = DB1.Manifest Pallet Nbr 3PL
  LCL.Manifest_Pallet_Nbr_3PL = DB1.Manifest_Pallet_Nbr_3PL;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  //?Clear DTL Accum Totals.
  // PAR.Total Qty Ship DTL USR = CON.*ZERO
  PAR.Total_Qty_Ship_DTL_USR = *ZERO;

  // PAR.Total Wgt Ship DTL USR = CON.*ZERO
  PAR.Total_Wgt_Ship_DTL_USR = *ZERO;

  // PAR.Total Gross Wgt DTL USR = CON.*ZERO
  PAR.Total_Gross_Wgt_DTL_USR = *ZERO;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Pallet<>0 Break on Item to Clear Total Case Qty TARE - R17040 DN 3/16/21
  CASE;

  // IF LCL.Manifest Pallet Number is Entered
  IF LCL.Manifest_Pallet_Number <> *ZERO;

  //?NOTE: This routine will handle all transactions w/ Pallet ID <> 0.
  //?Item Code Break, Reset Accum Total Case Qty.
  CASE;

  // IF DB1.Item Code EQ LCL.Item Code
  IF DB1.Item_Code = LCL.Item_Code;

  //?Item Code Break, Reset Accum Total Case Qty.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create EDI ASN DTL V2 (ECP140) for Item Break. R17040 DN 5/7/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Manifest Pallet# Txt = CVTVAR(LCL.Manifest Pallet Number)
  LCL.Manifest_Pallet#_Txt = CVTVAR(LCL.Manifest_Pallet_Number);

  // LCL.Manifest Pallet Txt 3PL = CVTVAR(LCL.Manifest Pallet Nbr 3PL)
  LCL.Manifest_Pallet_Txt_3PL = CVTVAR(LCL.Manifest_Pallet_Nbr_3PL);

  // LCL.Single Item Pallet Flag = CND.No
  LCL.Single_Item_Pallet_Flag = 'N';

  //?Get/Set Info for EDI Adv Ship Ntc Dtl V2 (ECP140).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Item Break, Set O.D. Qty Ordered with M.D. Shipped Qty.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?NOTE: We will handle the Total Qty Ordered vs Total Qty Shipped
  //?      differences, if any, in the Last Record processing.
  // LCL.SN105 Quantity Ordered = PAR.Total Qty Ship DTL USR
  LCL.SN105_Quantity_Ordered = PAR.Total_Qty_Ship_DTL_USR;

  ENDIF;

  // LCL.Product ID Manuf Item = CVTVAR(LCL.Item Code)
  LCL.Product_ID_Manuf_Item = CVTVAR(LCL.Item_Code);

  EXECUTE FUNCTION(Rtv for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2177736;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Unit_Price);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Conversion to Set Shipped & Ordered UOM.
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // OR LCL.U/M - Ordered is Cases
  OR LCL.U_M_Ordered = 'CS';

  // LCL.SN103 Shipped UOM = CND.Cases
  LCL.SN103_Shipped_UOM = 'CA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF LCL.U/M - Ordered is Each
  IF LCL.U_M_Ordered = 'EA';

  // OR LCL.U/M - Ordered is Combos
  OR LCL.U_M_Ordered = 'CB';

  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?All Others Convert to Each.
  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  ENDIF;

  EXECUTE FUNCTION(Rtv GTIN              RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2099107;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.IDE_GTIN);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set PO402-Pack Size.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // LCL.PO402-Pack Size = LCL.Pieces Per Bag * LCL.Bags Per Unit *
  LCL.PO402_Pack_Size = LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit;

  //?Set PO402-Pack Size.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PO402-Pack Size = CON.1
  LCL.PO402_Pack_Size = 1;

  ENDIF;

  //?Set Production Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Oldest Prod Date   RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2154017;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Case Quantity is GT *ZERO
   IF DB1.Case_Quantity > *ZERO;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  // LCL.Production Date USR D8# = LCL.Production Date
  LCL.Production_Date_USR_D8# = LCL.Production_Date;

  // LCL.SLN12 Prod ID LT = CVTVAR(LCL.Production Date USR D8#)
  LCL.SLN12_Prod_ID_LT = CVTVAR(LCL.Production_Date_USR_D8#);

  EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Date_Out_60_USR);
  {
   //?Execute internal function

   //?convert numeric date to character date.
   // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
   PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

   //?extract month, day, and year.
   // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
   PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

   // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
   PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

   // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
   PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

   //?reconstruct date in mmddyy format.
   // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
   PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
   PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

   //?convert character date to numeric date.
   // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
   PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

  }

  // LCL.REF02-Batch Lot = CVTVAR(LCL.Date Out (6,0) USR)
  LCL.REF02_Batch_Lot = CVTVAR(LCL.Date_Out_60_USR);

  ENDIF;

  //?Set Product ID UPC.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UK');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Record Exist?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Record Exist?
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UA');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Set Product ID - Purchs Item.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No & Type RT) TYPE(RTVOBJ) FILE(POBIREP)          AC2177756;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.CIR_Resource_No_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  CASE;

  // IF LCL.CIR Resource No Type is Purchaser Item Code
  IF LCL.CIR_Resource_No_Type = 'PI';

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Note: Trading Partner derived from BTC# & not STC#.
  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('PI');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Try with CB                                  W107438 DN 09/02/22
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('CB');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Set Shelf Life Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R17040 DN 03/09/21-Changed to Get Also Whse State Code.
  EXECUTE FUNCTION(RTV for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2195483;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.Warehouse_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Fresh or Frozen?
  CASE;

  // IF LCL.Warehouse Type is Fresh
  IF LCL.Warehouse_Type = 'FR';

  //?Hard coding 7 days here.
  // LCL.Shelf Life Date USR = LCL.Production Date + CON.7 *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date 7 'DY' 1111111 'NONE' 'N' 1);

  //?Fresh or Frozen?
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Must be Frozen.
  EXECUTE FUNCTION(Rtv First Notice Val   RT) TYPE(RTVOBJ) FILE(PUBRREP)          AC2178072;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.ISLU_First_Notice);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Item Found Else Use 120 Days.
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Item Found Else Use 120 Days.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Hard coding 120 days here.
  // LCL.ISLU First Notice = CON.120
  LCL.ISLU_First_Notice = 120;

  ENDIF;

  // LCL.Shelf Life Date USR = LCL.Production Date + LCL.ISLU First Notice *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date LCL.ISLU_First_Notice 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  // LCL.Shelf Life Date D8# USR = LCL.Shelf Life Date USR
  LCL.Shelf_Life_Date_D8#_USR = LCL.Shelf_Life_Date_USR;

  // LCL.DTM02-Shelf Life Date = LCL.Shelf Life Date D8# USR
  LCL.DTM02_Shelf_Life_Date = LCL.Shelf_Life_Date_D8#_USR;

  ENDIF;

  //?Set LIN/UP UPC Consumer Pckge & GTin 12 Lin02. R17040 DN 3/25/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UP');
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('EN');
  PARAMETER(LCL.GTin_12_Lin02);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Get/Set Info for EDI Adv Ship Ntc Tare V2 (ECP145). R17040 DN 03/16/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Update ECP145 TARE only at Pallet Number Break.
  //?Calc/Accum Total Unit Count TARE for Item Code Break.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate & Accumulate Total Unit Count TARE.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Compute: Tot Unt Cnt TARE
  PAR.Total_Unit_Count_TARE_U = ( ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit )
  * PAR.Total_Case_Qty_TARE_USR ) + PAR.Total_Unit_Count_TARE_U;

  //?Calculate & Accumulate Total Unit Count TARE.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Unit Count TARE U = PAR.Total Unit Count TARE U + PAR.Total Case Qty TARE USR
  PAR.Total_Unit_Count_TARE_U = PAR.Total_Unit_Count_TARE_U + PAR.Total_Case_Qty_TARE_USR;

  ENDIF;

  //?Clear Accum.
  // PAR.Total Case Qty TARE USR = CON.*ZERO
  PAR.Total_Case_Qty_TARE_USR = *ZERO;

  ENDIF;

  ENDIF;

  //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
  CASE;

  // IF LCL.Manifest Pallet Nbr 3PL is Not Zero
  IF LCL.Manifest_Pallet_Nbr_3PL <> 0;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2 NoCDCR) TYPE(CRTOBJ) FILE(ECP140)           AC2237649;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet_Txt_3PL);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2    CR) TYPE(CRTOBJ) FILE(ECP140)            AC2175872;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet#_Txt);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
  PARAMETER(PAR.EDI_Tare_Level_Req_f_856);
  {
   //?USER: Processing before Data update

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   CASE;

   // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
   IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Manifest Pallet Number is Not Entered
   IF PAR.Manifest_Pallet_Number = *ZERO;

   //?R17040 DN 05/17/21-Commented Out & Moved Below.
   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   CASE;

   // IF PAR.EDI Tare Level Req f/856 is Yes
   IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
   DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Check Digit Logic to Set Pallet ID #.
   EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(LCL.W0407_Pallet_Number);
   {
    //?Execute internal function

    // PAR.W0407 Pallet Number = CON.*ZERO
    PAR.W0407_Pallet_Number = *ZERO;

    //?SUM Up Odd & Even # Positions for Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Federal_Tax_Id);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
    LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

    // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
    LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

    //?Position 1 will always be 1.
    // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

    // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
    + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
    + LCL.Federal_Tax_ID_Pos7_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
    + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
    + LCL.Federal_Tax_ID_Pos8_Nbr;

    ENDIF;

    //?SUM Up Odd & Even # Positions for Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
    LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

    // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

    // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
    LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

    // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
    LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
    + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
    + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
    + LCL.Manifest_Pallet#_Pos9_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
    + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
    + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

    ENDIF;

    //?Calculated Check Digit Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Calculated Value
    LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

    // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
    LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

    // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
    LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

    ENDIF;

    //?Format W0407 Pallet Number for Output.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
    LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

    // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
    LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO)

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Tx
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*

    // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
    PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

    ENDIF;

   }

   // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
   DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?Reinitialize for Next Item Code.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  //?Clear DTL Accum Totals.
  // PAR.Total Qty Ship DTL USR = CON.*ZERO
  PAR.Total_Qty_Ship_DTL_USR = *ZERO;

  // PAR.Total Wgt Ship DTL USR = CON.*ZERO
  PAR.Total_Wgt_Ship_DTL_USR = *ZERO;

  // PAR.Total Gross Wgt DTL USR = CON.*ZERO
  PAR.Total_Gross_Wgt_DTL_USR = *ZERO;

  ENDIF;

  ENDIF;

  ENDIF;

  //?SUM Quantity & Weights.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?For DTL Record.
  // PAR.Total Qty Ship DTL USR = PAR.Total Qty Ship DTL USR + DB1.Case Quantity
  PAR.Total_Qty_Ship_DTL_USR = PAR.Total_Qty_Ship_DTL_USR + DB1.Case_Quantity;

  // PAR.Total Wgt Ship DTL USR = PAR.Total Wgt Ship DTL USR + DB1.Case Weight
  PAR.Total_Wgt_Ship_DTL_USR = PAR.Total_Wgt_Ship_DTL_USR + DB1.Case_Weight;

  // PAR.Total Gross Wgt DTL USR = PAR.Total Gross Wgt DTL USR + DB1.Manifest Gross Weight
  PAR.Total_Gross_Wgt_DTL_USR = PAR.Total_Gross_Wgt_DTL_USR + DB1.Manifest_Gross_Weight;

  //?For TARE Record.
  // PAR.Total Qty Ship TARE USR = PAR.Total Qty Ship TARE USR + DB1.Case Quantity
  PAR.Total_Qty_Ship_TARE_USR = PAR.Total_Qty_Ship_TARE_USR + DB1.Case_Quantity;

  // PAR.Total Wgt Ship TARE USR = PAR.Total Wgt Ship TARE USR + DB1.Case Weight
  PAR.Total_Wgt_Ship_TARE_USR = PAR.Total_Wgt_Ship_TARE_USR + DB1.Case_Weight;

  // PAR.Total Gross Wgt TARE USR = PAR.Total Gross Wgt TARE USR + DB1.Manifest Gross Weight
  PAR.Total_Gross_Wgt_TARE_USR = PAR.Total_Gross_Wgt_TARE_USR + DB1.Manifest_Gross_Weight;

  //?Sum Total Case Quantity TARE per Item Seq. R17040 DN 03/15/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Case Qty TARE USR = PAR.Total Case Qty TARE USR + DB1.Case Quantity
  PAR.Total_Case_Qty_TARE_USR = PAR.Total_Case_Qty_TARE_USR + DB1.Case_Quantity;

  ENDIF;

  //?Calculate/Sum Unit Weight.
  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(LCL.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV Itm BxID & Tares  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1939974;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(NLL.Number_Cases_On_A_Pallet);
  PARAMETER(NLL.Pallet_Tare_Weight);
  PARAMETER(NLL.Box_iD);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   // PAR.Pallet Tare Weight = CON.*ZERO
   PAR.Pallet_Tare_Weight = *ZERO;

   // PAR.Number Cases On A Pallet = CON.*ZERO
   PAR.Number_Cases_On_A_Pallet = *ZERO;

   // PAR.Box iD = CON.*ZERO
   PAR.Box_iD = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Typ/Pk/UntWgt/Plt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1601775;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Number_Cases_On_A_Pallet);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   PARAMETER(PAR.Pallet_Tare_Weight);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   // PAR.Box iD = DB1.Component Item Code
   PAR.Box_iD = DB1.Component_Item_Code;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

  }

  // LCL.PAL05 Unit Weight = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.PAL05_Unit_Weight = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // PAR.Total Unit Wgt TARE USR = PAR.Total Unit Wgt TARE USR + LCL.PAL05 Unit Weight
  PAR.Total_Unit_Wgt_TARE_USR = PAR.Total_Unit_Wgt_TARE_USR + LCL.PAL05_Unit_Weight;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create EDI ASN DTL V2 (ECP140) & EDI ASN TARE V2 (ECP145).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?NOTE: Any changes in here, must change in 'Exit Processing' also.
  // LCL.Manifest Pallet# Txt = CVTVAR(LCL.Manifest Pallet Number)
  LCL.Manifest_Pallet#_Txt = CVTVAR(LCL.Manifest_Pallet_Number);

  // LCL.Manifest Pallet Txt 3PL = CVTVAR(LCL.Manifest Pallet Nbr 3PL)
  LCL.Manifest_Pallet_Txt_3PL = CVTVAR(LCL.Manifest_Pallet_Nbr_3PL);

  //?Get/Set Info for EDI Adv Ship Ntc Dtl V2 (ECP140).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Pallet Break, Set O.D. Qty Ordered with M.D. Shipped Qty.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?NOTE: We will handle the Total Qty Ordered vs Total Qty Shipped
  //?      differences, if any, in the Last Record processing.
  // LCL.SN105 Quantity Ordered = PAR.Total Qty Ship DTL USR
  LCL.SN105_Quantity_Ordered = PAR.Total_Qty_Ship_DTL_USR;

  ENDIF;

  // LCL.Product ID Manuf Item = CVTVAR(LCL.Item Code)
  LCL.Product_ID_Manuf_Item = CVTVAR(LCL.Item_Code);

  EXECUTE FUNCTION(Rtv for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2177736;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Unit_Price);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Conversion to Set Shipped & Ordered UOM.
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // OR LCL.U/M - Ordered is Cases
  OR LCL.U_M_Ordered = 'CS';

  // LCL.SN103 Shipped UOM = CND.Cases
  LCL.SN103_Shipped_UOM = 'CA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF LCL.U/M - Ordered is Each
  IF LCL.U_M_Ordered = 'EA';

  // OR LCL.U/M - Ordered is Combos
  OR LCL.U_M_Ordered = 'CB';

  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?All Others Convert to Each.
  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  ENDIF;

  EXECUTE FUNCTION(Rtv GTIN              RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2099107;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.IDE_GTIN);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set PO402-Pack Size.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // LCL.PO402-Pack Size = LCL.Pieces Per Bag * LCL.Bags Per Unit *
  LCL.PO402_Pack_Size = LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit;

  //?Set PO402-Pack Size.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PO402-Pack Size = CON.1
  LCL.PO402_Pack_Size = 1;

  ENDIF;

  //?Set Production Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Oldest Prod Date   RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2154017;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Case Quantity is GT *ZERO
   IF DB1.Case_Quantity > *ZERO;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  // LCL.Production Date USR D8# = LCL.Production Date
  LCL.Production_Date_USR_D8# = LCL.Production_Date;

  // LCL.SLN12 Prod ID LT = CVTVAR(LCL.Production Date USR D8#)
  LCL.SLN12_Prod_ID_LT = CVTVAR(LCL.Production_Date_USR_D8#);

  EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Date_Out_60_USR);
  {
   //?Execute internal function

   //?convert numeric date to character date.
   // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
   PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

   //?extract month, day, and year.
   // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
   PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

   // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
   PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

   // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
   PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

   //?reconstruct date in mmddyy format.
   // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
   PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
   PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

   //?convert character date to numeric date.
   // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
   PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

  }

  // LCL.REF02-Batch Lot = CVTVAR(LCL.Date Out (6,0) USR)
  LCL.REF02_Batch_Lot = CVTVAR(LCL.Date_Out_60_USR);

  ENDIF;

  //?Set Product ID UPC.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UK');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Record Exist?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Record Exist?
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UA');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Set Product ID - Purchs Item.  add SK to the mix
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No & Type RT) TYPE(RTVOBJ) FILE(POBIREP)          AC2177756;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.CIR_Resource_No_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  CASE;

  // IF LCL.CIR Resource No Type is Purchaser Item Code
  IF LCL.CIR_Resource_No_Type = 'PI';

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Note: Trading Partner derived from BTC# & not STC#.
  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('PI');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Try with SKU                   2/1/2021
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('SK');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Try with IN                    2/1/2021
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('IN');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Try with CB                                  W107438 DN 09/02/22
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('CB');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Set Shelf Life Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R17040 DN 03/09/21-Changed to Get Also Whse State Code.
  EXECUTE FUNCTION(RTV for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2195483;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.Warehouse_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Fresh or Frozen?
  CASE;

  // IF LCL.Warehouse Type is Fresh
  IF LCL.Warehouse_Type = 'FR';

  //?Hard coding 7 days here.
  // LCL.Shelf Life Date USR = LCL.Production Date + CON.7 *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date 7 'DY' 1111111 'NONE' 'N' 1);

  //?Fresh or Frozen?
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Must be Frozen.
  EXECUTE FUNCTION(Rtv First Notice Val   RT) TYPE(RTVOBJ) FILE(PUBRREP)          AC2178072;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.ISLU_First_Notice);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Item Found Else Use 120 Days.
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Item Found Else Use 120 Days.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Hard coding 120 days here.
  // LCL.ISLU First Notice = CON.120
  LCL.ISLU_First_Notice = 120;

  ENDIF;

  // LCL.Shelf Life Date USR = LCL.Production Date + LCL.ISLU First Notice *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date LCL.ISLU_First_Notice 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  // LCL.Shelf Life Date D8# USR = LCL.Shelf Life Date USR
  LCL.Shelf_Life_Date_D8#_USR = LCL.Shelf_Life_Date_USR;

  // LCL.DTM02-Shelf Life Date = LCL.Shelf Life Date D8# USR
  LCL.DTM02_Shelf_Life_Date = LCL.Shelf_Life_Date_D8#_USR;

  ENDIF;

  //?Set LIN/UP UPC Consumer Pckge & GTin 12 Lin02. R17040 DN 3/25/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UP');
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('EN');
  PARAMETER(LCL.GTin_12_Lin02);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Get/Set Info for EDI Adv Ship Ntc Tare V2 (ECP145). R17040 DN 03/12/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Get Pallet Tiers & Pallet Blocks if Single Pallet Flag=Y.
  CASE;

  // IF LCL.Single Item Pallet Flag is Yes
  IF LCL.Single_Item_Pallet_Flag = 'Y';

  //?Use 1st Save Item Code for Each Unique Pallet Number.
  EXECUTE FUNCTION(Rtv Component Item Cde RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC2196040;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.X1st_Item_Code_f_Pallet_U);
  PARAMETER(LCL.Component_Item_Code);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Pallet Tier/Block RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2196041;
  PARAMETER(LCL.Component_Item_Code);
  PARAMETER(LCL.IDE_Pallet_Tiers);
  PARAMETER(LCL.IDE_Pallet_Blocks);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Get Pallet Tiers & Pallet Blocks if Single Pallet Flag=Y.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.IDE Pallet Tiers = CND.Blank
  LCL.IDE_Pallet_Tiers = *BLANK;

  // LCL.IDE Pallet Blocks = CND.Blank
  LCL.IDE_Pallet_Blocks = *BLANK;

  ENDIF;

  //?Set Packaging Desc Code Based on 1st Item Code for Pallet Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Pallet Type 2     RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2196042;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.X1st_Item_Code_f_Pallet_U);
  PARAMETER(LCL.OD_Pallet_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF LCL.OD Pallet Type is CHEP Pallet
  IF LCL.OD_Pallet_Type = 'CH';

  //?As of 3/12/21, we don't have a Pallet Type of 'CH' but once we
  //?do we may have to revisit this logic, per Rose.
  // LCL.PKG04 Packaging Desc Code = CON.37
  LCL.PKG04_Packaging_Desc_Code = 37;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PKG04 Packaging Desc Code = CON.52
  LCL.PKG04_Packaging_Desc_Code = 52;

  ENDIF;

  ENDIF;

  //?Calc/Accum Total Unit Count TARE for Pallet Number Break.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate & Accumulate Total Unit Count TARE.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Compute: Tot Unt Cnt TARE
  PAR.Total_Unit_Count_TARE_U = ( ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit )
  * PAR.Total_Case_Qty_TARE_USR ) + PAR.Total_Unit_Count_TARE_U;

  //?Calculate & Accumulate Total Unit Count TARE.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Unit Count TARE U = PAR.Total Unit Count TARE U + PAR.Total Case Qty TARE USR
  PAR.Total_Unit_Count_TARE_U = PAR.Total_Unit_Count_TARE_U + PAR.Total_Case_Qty_TARE_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?R17040 DN 03/09/21-Populate New Fields.
  //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
  CASE;

  // IF LCL.Manifest Pallet Nbr 3PL is Not Zero
  IF LCL.Manifest_Pallet_Nbr_3PL <> 0;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2 NoCDCR) TYPE(CRTOBJ) FILE(ECP140)           AC2237649;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet_Txt_3PL);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2    CR) TYPE(CRTOBJ) FILE(ECP140)            AC2175872;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet#_Txt);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
  PARAMETER(PAR.EDI_Tare_Level_Req_f_856);
  {
   //?USER: Processing before Data update

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   CASE;

   // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
   IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Manifest Pallet Number is Not Entered
   IF PAR.Manifest_Pallet_Number = *ZERO;

   //?R17040 DN 05/17/21-Commented Out & Moved Below.
   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   CASE;

   // IF PAR.EDI Tare Level Req f/856 is Yes
   IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
   DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Check Digit Logic to Set Pallet ID #.
   EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(LCL.W0407_Pallet_Number);
   {
    //?Execute internal function

    // PAR.W0407 Pallet Number = CON.*ZERO
    PAR.W0407_Pallet_Number = *ZERO;

    //?SUM Up Odd & Even # Positions for Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Federal_Tax_Id);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
    LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

    // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
    LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

    //?Position 1 will always be 1.
    // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

    // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
    + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
    + LCL.Federal_Tax_ID_Pos7_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
    + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
    + LCL.Federal_Tax_ID_Pos8_Nbr;

    ENDIF;

    //?SUM Up Odd & Even # Positions for Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
    LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

    // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

    // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
    LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

    // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
    LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
    + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
    + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
    + LCL.Manifest_Pallet#_Pos9_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
    + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
    + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

    ENDIF;

    //?Calculated Check Digit Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Calculated Value
    LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

    // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
    LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

    // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
    LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

    ENDIF;

    //?Format W0407 Pallet Number for Output.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
    LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

    // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
    LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO)

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Tx
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*

    // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
    PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

    ENDIF;

   }

   // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
   DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?R17040 DN 03/15/21-Populate New Fields.
  //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
  CASE;

  // IF LCL.Manifest Pallet Nbr 3PL is Not Zero
  IF LCL.Manifest_Pallet_Nbr_3PL <> 0;

  EXECUTE FUNCTION(Crt EDI ASN Tare V2NoCDCR) TYPE(CRTOBJ) FILE(ECP145)           AC2237653;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet_Txt_3PL);
  PARAMETER('4');
  PARAMETER(PAR.TD101_Packaging_Code);
  PARAMETER(LCL.Single_Item_Pallet_Flag);
  PARAMETER(LCL.IDE_Pallet_Tiers);
  PARAMETER(LCL.IDE_Pallet_Blocks);
  PARAMETER(PAR.Total_Qty_Ship_TARE_USR);
  PARAMETER(PAR.Total_Unit_Wgt_TARE_USR);
  PARAMETER(PAR.Total_Wgt_Ship_TARE_USR);
  PARAMETER(PAR.Total_Gross_Wgt_TARE_USR);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Total_Unit_Count_TARE_U);
  PARAMETER(LCL.PKG04_Packaging_Desc_Code);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt EDI ASN Tare V2   CR) TYPE(CRTOBJ) FILE(ECP145)            AC2174518;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet#_Txt);
  PARAMETER('4');
  PARAMETER(PAR.TD101_Packaging_Code);
  PARAMETER(LCL.Single_Item_Pallet_Flag);
  PARAMETER(LCL.IDE_Pallet_Tiers);
  PARAMETER(LCL.IDE_Pallet_Blocks);
  PARAMETER(PAR.Total_Qty_Ship_TARE_USR);
  PARAMETER(PAR.Total_Unit_Wgt_TARE_USR);
  PARAMETER(PAR.Total_Wgt_Ship_TARE_USR);
  PARAMETER(PAR.Total_Gross_Wgt_TARE_USR);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Total_Unit_Count_TARE_U);
  PARAMETER(LCL.PKG04_Packaging_Desc_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
  PARAMETER(PAR.EDI_Tare_Level_Req_f_856);
  {
   //?USER: Processing before Data update

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   CASE;

   // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
   IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Manifest Pallet Number is Not Entered
   IF PAR.Manifest_Pallet_Number = *ZERO;

   //?R17040 DN 05/17/21-Commented Out & Moved Below.
   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   CASE;

   // IF PAR.EDI Tare Level Req f/856 is Yes
   IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
   DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Check Digit Logic to Set Pallet ID #.
   EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(LCL.W0407_Pallet_Number);
   {
    //?Execute internal function

    // PAR.W0407 Pallet Number = CON.*ZERO
    PAR.W0407_Pallet_Number = *ZERO;

    //?SUM Up Odd & Even # Positions for Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Federal_Tax_Id);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
    LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

    // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
    LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

    //?Position 1 will always be 1.
    // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

    // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
    + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
    + LCL.Federal_Tax_ID_Pos7_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
    + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
    + LCL.Federal_Tax_ID_Pos8_Nbr;

    ENDIF;

    //?SUM Up Odd & Even # Positions for Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
    LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

    // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

    // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
    LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

    // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
    LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
    + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
    + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
    + LCL.Manifest_Pallet#_Pos9_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
    + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
    + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

    ENDIF;

    //?Calculated Check Digit Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Calculated Value
    LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

    // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
    LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

    // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
    LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

    ENDIF;

    //?Format W0407 Pallet Number for Output.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
    LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

    // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
    LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO)

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Tx
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*

    // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
    PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

    ENDIF;

   }

   // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
   DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?Reinitialize for Next Pallet Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Manifest Pallet Number = DB1.Manifest Pallet Number
  LCL.Manifest_Pallet_Number = DB1.Manifest_Pallet_Number;

  // LCL.Manifest Pallet Nbr 3PL = DB1.Manifest Pallet Nbr 3PL
  LCL.Manifest_Pallet_Nbr_3PL = DB1.Manifest_Pallet_Nbr_3PL;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  //?R17040 DN 03/12/21-Save 1st Item Code for Each Unique Pallet #.
  // LCL.1st Item Code f/Pallet U = DB1.Item Code
  LCL.X1st_Item_Code_f_Pallet_U = DB1.Item_Code;

  //?R17040 DN 03/12/21-Reset Single Item Pallet Flag to Yes.
  // LCL.Single Item Pallet Flag = CND.Yes
  LCL.Single_Item_Pallet_Flag = 'Y';

  // PAR.Total Qty Ship DTL USR = CON.*ZERO
  PAR.Total_Qty_Ship_DTL_USR = *ZERO;

  // PAR.Total Wgt Ship DTL USR = CON.*ZERO
  PAR.Total_Wgt_Ship_DTL_USR = *ZERO;

  // PAR.Total Gross Wgt DTL USR = CON.*ZERO
  PAR.Total_Gross_Wgt_DTL_USR = *ZERO;

  // PAR.Total Qty Ship TARE USR = CON.*ZERO
  PAR.Total_Qty_Ship_TARE_USR = *ZERO;

  // PAR.Total Wgt Ship TARE USR = CON.*ZERO
  PAR.Total_Wgt_Ship_TARE_USR = *ZERO;

  // PAR.Total Gross Wgt TARE USR = CON.*ZERO
  PAR.Total_Gross_Wgt_TARE_USR = *ZERO;

  // PAR.Total Unit Wgt TARE USR = CON.*ZERO
  PAR.Total_Unit_Wgt_TARE_USR = *ZERO;

  //?R17040 DN 03/16/21-Reset Both Accum Total Case Qty TARE & Unit Count TARE.
  // PAR.Total Case Qty TARE USR = CON.*ZERO
  PAR.Total_Case_Qty_TARE_USR = *ZERO;

  // PAR.Total Unit Count TARE U = CON.*ZERO
  PAR.Total_Unit_Count_TARE_U = *ZERO;

  ENDIF;

  //?SUM Quantity & Weights.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Qty Ship DTL USR = PAR.Total Qty Ship DTL USR + DB1.Case Quantity
  PAR.Total_Qty_Ship_DTL_USR = PAR.Total_Qty_Ship_DTL_USR + DB1.Case_Quantity;

  // PAR.Total Wgt Ship DTL USR = PAR.Total Wgt Ship DTL USR + DB1.Case Weight
  PAR.Total_Wgt_Ship_DTL_USR = PAR.Total_Wgt_Ship_DTL_USR + DB1.Case_Weight;

  // PAR.Total Gross Wgt DTL USR = PAR.Total Gross Wgt DTL USR + DB1.Manifest Gross Weight
  PAR.Total_Gross_Wgt_DTL_USR = PAR.Total_Gross_Wgt_DTL_USR + DB1.Manifest_Gross_Weight;

  // PAR.Total Qty Ship TARE USR = PAR.Total Qty Ship TARE USR + DB1.Case Quantity
  PAR.Total_Qty_Ship_TARE_USR = PAR.Total_Qty_Ship_TARE_USR + DB1.Case_Quantity;

  // PAR.Total Wgt Ship TARE USR = PAR.Total Wgt Ship TARE USR + DB1.Case Weight
  PAR.Total_Wgt_Ship_TARE_USR = PAR.Total_Wgt_Ship_TARE_USR + DB1.Case_Weight;

  // PAR.Total Gross Wgt TARE USR = PAR.Total Gross Wgt TARE USR + DB1.Manifest Gross Weight
  PAR.Total_Gross_Wgt_TARE_USR = PAR.Total_Gross_Wgt_TARE_USR + DB1.Manifest_Gross_Weight;

  //?Sum Total Case Quantity TARE per Item Seq. R17040 DN 03/15/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Case Qty TARE USR = PAR.Total Case Qty TARE USR + DB1.Case Quantity
  PAR.Total_Case_Qty_TARE_USR = PAR.Total_Case_Qty_TARE_USR + DB1.Case_Quantity;

  ENDIF;

  //?Calculate/Sum Unit Weight.
  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(LCL.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV Itm BxID & Tares  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1939974;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(NLL.Number_Cases_On_A_Pallet);
  PARAMETER(NLL.Pallet_Tare_Weight);
  PARAMETER(NLL.Box_iD);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   // PAR.Pallet Tare Weight = CON.*ZERO
   PAR.Pallet_Tare_Weight = *ZERO;

   // PAR.Number Cases On A Pallet = CON.*ZERO
   PAR.Number_Cases_On_A_Pallet = *ZERO;

   // PAR.Box iD = CON.*ZERO
   PAR.Box_iD = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Typ/Pk/UntWgt/Plt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1601775;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Number_Cases_On_A_Pallet);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   PARAMETER(PAR.Pallet_Tare_Weight);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   // PAR.Box iD = DB1.Component Item Code
   PAR.Box_iD = DB1.Component_Item_Code;

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

  }

  // LCL.PAL05 Unit Weight = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.PAL05_Unit_Weight = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // PAR.Total Unit Wgt TARE USR = PAR.Total Unit Wgt TARE USR + LCL.PAL05 Unit Weight
  PAR.Total_Unit_Wgt_TARE_USR = PAR.Total_Unit_Wgt_TARE_USR + LCL.PAL05_Unit_Weight;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?Last Record Processing.
  CASE;

  // IF LCL.Record Processed Usr is Yes
  IF LCL.Record_Processed_Usr = 'Y';

  //?Create EDI ASN DTL V2 (ECP140) & EDI ASN TARE V2 (ECP145).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Manifest Pallet# Txt = CVTVAR(LCL.Manifest Pallet Number)
  LCL.Manifest_Pallet#_Txt = CVTVAR(LCL.Manifest_Pallet_Number);

  // LCL.Manifest Pallet Txt 3PL = CVTVAR(LCL.Manifest Pallet Nbr 3PL)
  LCL.Manifest_Pallet_Txt_3PL = CVTVAR(LCL.Manifest_Pallet_Nbr_3PL);

  //?Get/Set Info for EDI Adv Ship Ntc Dtl V2 (ECP140).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Pallet Break, Set O.D. Qty Ordered with M.D. Shipped Qty.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?NOTE: We will handle the Total Qty Ordered vs Total Qty Shipped
  //?      differences, if any, in the Last Record processing.
  // LCL.SN105 Quantity Ordered = PAR.Total Qty Ship DTL USR
  LCL.SN105_Quantity_Ordered = PAR.Total_Qty_Ship_DTL_USR;

  ENDIF;

  // LCL.Product ID Manuf Item = CVTVAR(LCL.Item Code)
  LCL.Product_ID_Manuf_Item = CVTVAR(LCL.Item_Code);

  EXECUTE FUNCTION(Rtv for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2177736;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.U_M_Ordered);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Unit_Price);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Conversion to Set Shipped & Ordered UOM.
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // OR LCL.U/M - Ordered is Cases
  OR LCL.U_M_Ordered = 'CS';

  // LCL.SN103 Shipped UOM = CND.Cases
  LCL.SN103_Shipped_UOM = 'CA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF LCL.U/M - Ordered is Each
  IF LCL.U_M_Ordered = 'EA';

  // OR LCL.U/M - Ordered is Combos
  OR LCL.U_M_Ordered = 'CB';

  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  //?Conversion to Set Shipped & Ordered UOM.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?All Others Convert to Each.
  // LCL.SN103 Shipped UOM = CND.Each
  LCL.SN103_Shipped_UOM = 'EA';

  ENDIF;

  EXECUTE FUNCTION(Rtv GTIN              RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2099107;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.IDE_GTIN);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set PO402-Pack Size.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // LCL.PO402-Pack Size = LCL.Pieces Per Bag * LCL.Bags Per Unit *
  LCL.PO402_Pack_Size = LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit;

  //?Set PO402-Pack Size.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PO402-Pack Size = CON.1
  LCL.PO402_Pack_Size = 1;

  ENDIF;

  //?Set Production Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Oldest Prod Date   RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2154017;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Case Quantity is GT *ZERO
   IF DB1.Case_Quantity > *ZERO;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  // LCL.Production Date USR D8# = LCL.Production Date
  LCL.Production_Date_USR_D8# = LCL.Production_Date;

  // LCL.SLN12 Prod ID LT = CVTVAR(LCL.Production Date USR D8#)
  LCL.SLN12_Prod_ID_LT = CVTVAR(LCL.Production_Date_USR_D8#);

  EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Date_Out_60_USR);
  {
   //?Execute internal function

   //?convert numeric date to character date.
   // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
   PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

   //?extract month, day, and year.
   // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
   PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

   // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
   PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

   // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
   PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

   //?reconstruct date in mmddyy format.
   // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
   PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
   PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

   //?convert character date to numeric date.
   // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
   PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

  }

  // LCL.REF02-Batch Lot = CVTVAR(LCL.Date Out (6,0) USR)
  LCL.REF02_Batch_Lot = CVTVAR(LCL.Date_Out_60_USR);

  ENDIF;

  //?Set Product ID UPC.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UK');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Record Exist?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Record Exist?
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UA');
  PARAMETER(LCL.Product_ID_UPC);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Set Product ID - Purchs Item.  add SK to the mix
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No & Type RT) TYPE(RTVOBJ) FILE(POBIREP)          AC2177756;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.CIR_Resource_No_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  CASE;

  // IF LCL.CIR Resource No Type is Purchaser Item Code
  IF LCL.CIR_Resource_No_Type = 'PI';

  //?If Purchaser Item 'PI' Not Found Try Customer Item Ref for EDI File.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Note: Trading Partner derived from BTC# & not STC#.
  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('PI');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Try with SKU                   2/1/2021
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('SK');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Try with IN                    2/1/2021
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('IN');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Try with CB                                  W107438 DN 09/02/22
  CASE;

  // IF LCL.CIR Resource No is Not Entered
  IF LCL.CIR_Resource_No = *BLANK;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('CB');
  PARAMETER(LCL.CIR_Resource_No);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Set Shelf Life Date.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R17040 DN 03/09/21-Changed to Get Also Whse State Code.
  EXECUTE FUNCTION(RTV for EDI 856 ASN   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2195483;
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.Warehouse_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Fresh or Frozen?
  CASE;

  // IF LCL.Warehouse Type is Fresh
  IF LCL.Warehouse_Type = 'FR';

  //?Hard coding 7 days here.
  // LCL.Shelf Life Date USR = LCL.Production Date + CON.7 *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date 7 'DY' 1111111 'NONE' 'N' 1);

  //?Fresh or Frozen?
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Must be Frozen.
  EXECUTE FUNCTION(Rtv First Notice Val   RT) TYPE(RTVOBJ) FILE(PUBRREP)          AC2178072;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.ISLU_First_Notice);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?Item Found Else Use 120 Days.
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Item Found Else Use 120 Days.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Hard coding 120 days here.
  // LCL.ISLU First Notice = CON.120
  LCL.ISLU_First_Notice = 120;

  ENDIF;

  // LCL.Shelf Life Date USR = LCL.Production Date + LCL.ISLU First Notice *DAYS
  LCL.Shelf_Life_Date_USR = DATEINCR(LCL.Production_Date LCL.ISLU_First_Notice 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  // LCL.Shelf Life Date D8# USR = LCL.Shelf Life Date USR
  LCL.Shelf_Life_Date_D8#_USR = LCL.Shelf_Life_Date_USR;

  // LCL.DTM02-Shelf Life Date = LCL.Shelf Life Date D8# USR
  LCL.DTM02_Shelf_Life_Date = LCL.Shelf_Life_Date_D8#_USR;

  ENDIF;

  //?Set LIN/UP UPC Consumer Pckge & GTin 12 Lin02. R17040 DN 3/25/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('UP');
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Resource No       RT) TYPE(RTVOBJ) FILE(PUBQREP)           AC2177740;
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(LCL.Item_Code);
  PARAMETER('EN');
  PARAMETER(LCL.GTin_12_Lin02);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Get/Set Info for EDI Adv Ship Ntc Tare V2 (ECP145). R17040 DN 03/12/21
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Get Pallet Tiers & Pallet Blocks if Single Pallet Flag=Y.
  CASE;

  // IF LCL.Single Item Pallet Flag is Yes
  IF LCL.Single_Item_Pallet_Flag = 'Y';

  //?Use 1st Save Item Code for Each Unique Pallet Number.
  EXECUTE FUNCTION(Rtv Component Item Cde RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC2196040;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.X1st_Item_Code_f_Pallet_U);
  PARAMETER(LCL.Component_Item_Code);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Pallet Tier/Block RT) TYPE(RTVOBJ) FILE(PBBTREP)           AC2196041;
  PARAMETER(LCL.Component_Item_Code);
  PARAMETER(LCL.IDE_Pallet_Tiers);
  PARAMETER(LCL.IDE_Pallet_Blocks);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Get Pallet Tiers & Pallet Blocks if Single Pallet Flag=Y.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.IDE Pallet Tiers = CND.Blank
  LCL.IDE_Pallet_Tiers = *BLANK;

  // LCL.IDE Pallet Blocks = CND.Blank
  LCL.IDE_Pallet_Blocks = *BLANK;

  ENDIF;

  //?Set Packaging Desc Code Based on 1st Item Code for Pallet Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Pallet Type 2     RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2196042;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.X1st_Item_Code_f_Pallet_U);
  PARAMETER(LCL.OD_Pallet_Type);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF LCL.OD Pallet Type is CHEP Pallet
  IF LCL.OD_Pallet_Type = 'CH';

  //?As of 3/12/21, we don't have a Pallet Type of 'CH' but once we
  //?do we may have to revisit this logic, per Rose.
  // LCL.PKG04 Packaging Desc Code = CON.37
  LCL.PKG04_Packaging_Desc_Code = 37;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PKG04 Packaging Desc Code = CON.52
  LCL.PKG04_Packaging_Desc_Code = 52;

  ENDIF;

  ENDIF;

  //?Calc Total Unit Count TARE for Pallet Number Break.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Piece Count Itm InfRT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2177737;
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate & Accumulate Total Unit Count TARE.
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Compute: Tot Unt Cnt TARE
  PAR.Total_Unit_Count_TARE_U = ( ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit )
  * PAR.Total_Case_Qty_TARE_USR ) + PAR.Total_Unit_Count_TARE_U;

  //?Calculate & Accumulate Total Unit Count TARE.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Total Unit Count TARE U = PAR.Total Unit Count TARE U + PAR.Total Case Qty TARE USR
  PAR.Total_Unit_Count_TARE_U = PAR.Total_Unit_Count_TARE_U + PAR.Total_Case_Qty_TARE_USR;

  ENDIF;

  ENDIF;

  ENDIF;

  //?R17040 DN 03/09/21-Populate New Fields.
  //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
  CASE;

  // IF LCL.Manifest Pallet Nbr 3PL is Not Zero
  IF LCL.Manifest_Pallet_Nbr_3PL <> 0;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2 NoCDCR) TYPE(CRTOBJ) FILE(ECP140)           AC2237649;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet_Txt_3PL);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt EDI ASN Dtl V2    CR) TYPE(CRTOBJ) FILE(ECP140)            AC2175872;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet#_Txt);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(PAR.Total_Qty_Ship_DTL_USR);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(PAR.Total_Wgt_Ship_DTL_USR);
  PARAMETER(PAR.Total_Gross_Wgt_DTL_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.IDE_GTIN);
  PARAMETER(LCL.Product_ID_Manuf_Item);
  PARAMETER(LCL.Product_ID_UPC);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CIR_Resource_No);
  PARAMETER(LCL.LIN_UP_UPC_Consumer_Pckge);
  PARAMETER(*BLANK);
  PARAMETER('US');
  PARAMETER(LCL.State_Code);
  PARAMETER(LCL.GTin_12_Lin02);
  PARAMETER(*BLANK);
  PARAMETER(LCL.SN105_Quantity_Ordered);
  PARAMETER(LCL.SN103_Shipped_UOM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(0736490);
  PARAMETER(LCL.SLN12_Prod_ID_LT);
  PARAMETER(*BLANK);
  PARAMETER(LCL.PO402_Pack_Size);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.REF02_Batch_Lot);
  PARAMETER(*ZERO);
  PARAMETER(LCL.DTM02_Shelf_Life_Date);
  PARAMETER(LCL.Production_Date_USR_D8#);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
  PARAMETER(PAR.EDI_Tare_Level_Req_f_856);
  {
   //?USER: Processing before Data update

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   CASE;

   // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
   IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Manifest Pallet Number is Not Entered
   IF PAR.Manifest_Pallet_Number = *ZERO;

   //?R17040 DN 05/17/21-Commented Out & Moved Below.
   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   CASE;

   // IF PAR.EDI Tare Level Req f/856 is Yes
   IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
   DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Check Digit Logic to Set Pallet ID #.
   EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(LCL.W0407_Pallet_Number);
   {
    //?Execute internal function

    // PAR.W0407 Pallet Number = CON.*ZERO
    PAR.W0407_Pallet_Number = *ZERO;

    //?SUM Up Odd & Even # Positions for Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Federal_Tax_Id);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
    LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

    // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
    LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

    //?Position 1 will always be 1.
    // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

    // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
    + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
    + LCL.Federal_Tax_ID_Pos7_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
    + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
    + LCL.Federal_Tax_ID_Pos8_Nbr;

    ENDIF;

    //?SUM Up Odd & Even # Positions for Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
    LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

    // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

    // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
    LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

    // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
    LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
    + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
    + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
    + LCL.Manifest_Pallet#_Pos9_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
    + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
    + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

    ENDIF;

    //?Calculated Check Digit Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Calculated Value
    LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

    // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
    LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

    // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
    LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

    ENDIF;

    //?Format W0407 Pallet Number for Output.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
    LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

    // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
    LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO)

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Tx
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*

    // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
    PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

    ENDIF;

   }

   // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
   DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?R17040 DN 03/15/21-Populate New Fields.
  //?R17040 DN 05/17/21-Passed in EDI Tare Level Req f/856.
  CASE;

  // IF LCL.Manifest Pallet Nbr 3PL is Not Zero
  IF LCL.Manifest_Pallet_Nbr_3PL <> 0;

  EXECUTE FUNCTION(Crt EDI ASN Tare V2NoCDCR) TYPE(CRTOBJ) FILE(ECP145)           AC2237653;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet_Txt_3PL);
  PARAMETER('4');
  PARAMETER(PAR.TD101_Packaging_Code);
  PARAMETER(LCL.Single_Item_Pallet_Flag);
  PARAMETER(LCL.IDE_Pallet_Tiers);
  PARAMETER(LCL.IDE_Pallet_Blocks);
  PARAMETER(PAR.Total_Qty_Ship_TARE_USR);
  PARAMETER(PAR.Total_Unit_Wgt_TARE_USR);
  PARAMETER(PAR.Total_Wgt_Ship_TARE_USR);
  PARAMETER(PAR.Total_Gross_Wgt_TARE_USR);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Total_Unit_Count_TARE_U);
  PARAMETER(LCL.PKG04_Packaging_Desc_Code);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt EDI ASN Tare V2   CR) TYPE(CRTOBJ) FILE(ECP145)            AC2174518;
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  PARAMETER(PAR.REF02_Ref_ID_Load_ID);
  PARAMETER(PAR.PRF01_Customer_PO);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Manifest_Pallet#_Txt);
  PARAMETER('4');
  PARAMETER(PAR.TD101_Packaging_Code);
  PARAMETER(LCL.Single_Item_Pallet_Flag);
  PARAMETER(LCL.IDE_Pallet_Tiers);
  PARAMETER(LCL.IDE_Pallet_Blocks);
  PARAMETER(PAR.Total_Qty_Ship_TARE_USR);
  PARAMETER(PAR.Total_Unit_Wgt_TARE_USR);
  PARAMETER(PAR.Total_Wgt_Ship_TARE_USR);
  PARAMETER(PAR.Total_Gross_Wgt_TARE_USR);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Total_Unit_Count_TARE_U);
  PARAMETER(LCL.PKG04_Packaging_Desc_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(PAR.Set_EDI_856_Pallet_ID1_U);
  PARAMETER(PAR.EDI_Tare_Level_Req_f_856);
  {
   //?USER: Processing before Data update

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   CASE;

   // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
   IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Manifest Pallet Number is Not Entered
   IF PAR.Manifest_Pallet_Number = *ZERO;

   //?R17040 DN 05/17/21-Commented Out & Moved Below.
   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   CASE;

   // IF PAR.EDI Tare Level Req f/856 is Yes
   IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

   // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
   DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

   //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // DB1.MAN02 Pallet Nb/Container = CON.1
   DB1.MAN02_Pallet_Nb_Container = 1;

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Calculate Check Digit Logic to Set Pallet ID #.
   EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(LCL.W0407_Pallet_Number);
   {
    //?Execute internal function

    // PAR.W0407 Pallet Number = CON.*ZERO
    PAR.W0407_Pallet_Number = *ZERO;

    //?SUM Up Odd & Even # Positions for Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Federal Tax ID.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Federal_Tax_Id);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
    LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

    // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
    LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

    //?Position 1 will always be 1.
    // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

    // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
    + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
    + LCL.Federal_Tax_ID_Pos7_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
    + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
    + LCL.Federal_Tax_ID_Pos8_Nbr;

    ENDIF;

    //?SUM Up Odd & Even # Positions for Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Substring Out Each Digit From Pallet Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
    LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

    // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
    LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

    // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
    LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

    // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
    LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

    // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
    LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

    // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
    LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

    // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
    LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

    // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
    LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

    // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
    LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

    // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
    LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

    // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
    LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

    // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
    LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

    // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
    LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

    // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
    LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

    // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
    LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

    // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
    LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

    // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
    LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

    // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
    LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

    // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
    LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

    ENDIF;

    // SUM Val for Odd # Pos
    PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
    + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
    + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
    + LCL.Manifest_Pallet#_Pos9_Nbr;

    // SUM Val for Even # Pos
    PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
    + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
    + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

    ENDIF;

    //?Calculated Check Digit Number.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Calculated Value
    LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

    // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
    LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

    // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
    LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

    ENDIF;

    //?Format W0407 Pallet Number for Output.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
    LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

    // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
    LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO)

    // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Tx
    LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*

    // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
    PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

    ENDIF;

   }

   // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
   DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?Adjust QTY Ordered If Needed.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process will ensure ECP140 Qty Ordered matches Order Detail
  //?Qty Ordered.
  EXECUTE FUNCTION(UPD EDI 856 ASN ECP140 RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2179206;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.EDI_SURROGATE_NUMBER);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Quantity Ordered NE DB1.Quantity Shipped Total
   IF DB1.Quantity_Ordered <> DB1.Quantity_Shipped_Total;

   // PAR.Qty Difference USR = DB1.Quantity Ordered - DB1.Quantity Shipped Total
   PAR.Qty_Difference_USR = DB1.Quantity_Ordered - DB1.Quantity_Shipped_Total;

   // LCL.Product ID Manuf Item = CVTVAR(DB1.Item Code)
   LCL.Product_ID_Manuf_Item = CVTVAR(DB1.Item_Code);

   EXECUTE FUNCTION(UPD EDI 856 ASN ECP140 RT) TYPE(RTVOBJ) FILE(ECP140)           AC2179211;
   PARAMETER(PAR.EDI_SURROGATE_NUMBER);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(LCL.Product_ID_Manuf_Item);
   PARAMETER(PAR.Qty_Difference_USR);
   {
    //?USER: Process Data record

    CASE;

    // IF PAR.Qty Difference USR is NE Zero
    IF PAR.Qty_Difference_USR <> *ZERO;

    CASE;

    // IF PAR.Qty Difference USR is GT Zero
    IF PAR.Qty_Difference_USR > *ZERO;

    // LCL.SN105 Quantity Ordered = DB1.SN105 Quantity Ordered + PAR.Qty Difference USR
    LCL.SN105_Quantity_Ordered = DB1.SN105_Quantity_Ordered + PAR.Qty_Difference_USR;

    // PAR.Qty Difference USR = CON.*ZERO
    PAR.Qty_Difference_USR = *ZERO;

    EXECUTE FUNCTION(Chg EDI ASN Dtl V2    CH) TYPE(CHGOBJ) FILE(ECP140)            AC2175873;
    PARAMETER(DB1.EDI_SURROGATE_NUMBER);
    PARAMETER(DB1.REF02_Ref_ID_Load_ID);
    PARAMETER(DB1.PRF01_Customer_PO);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.MAN02_Pallet_Nb_Container);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.SN102_Quantity_Shipped);
    PARAMETER(DB1.SN103_Shipped_UOM);
    PARAMETER(DB1.PO406_Net_WT_Per_Pack);
    PARAMETER(DB1.PO406_Gross_WT_Per_Pack);
    PARAMETER(DB1.PO401_Pack);
    PARAMETER(DB1.PID05_ITEM_DESCRIPTION);
    PARAMETER(DB1.Product_ID_GTIN);
    PARAMETER(DB1.Product_ID_Manuf_Item);
    PARAMETER(DB1.Product_ID_UPC);
    PARAMETER(DB1.Product_ID_UCC_12);
    PARAMETER(DB1.Product_ID_Purchs_Item);
    PARAMETER(DB1.LIN_UP_UPC_Consumer_Pckge);
    PARAMETER(DB1.W1904_UPC_CASE_CODE);
    PARAMETER(DB1.LIN13_Prod_ID_CountryOrig);
    PARAMETER(DB1.LIN_Sub_Country_of_Origin);
    PARAMETER(DB1.GTin_12_Lin02);
    PARAMETER(DB1.SN101_Assigned_ID);
    PARAMETER(LCL.SN105_Quantity_Ordered);
    PARAMETER(DB1.SN106_Ordered_UOM);
    PARAMETER(DB1.SLN06_Unit_Price);
    PARAMETER(DB1.SLN07_Unit_Price_UOM);
    PARAMETER(DB1.SLN06_Unit_Price_2);
    PARAMETER(DB1.SLN07_Unit_Price_UOM_2);
    PARAMETER(DB1.SLN10_Prod_ID_DV);
    PARAMETER(DB1.SLN12_Prod_ID_LT);
    PARAMETER(DB1.SLN14_Prod_ID_UR);
    PARAMETER(DB1.PO402_Pack_Size);
    PARAMETER(DB1.PO410_Length);
    PARAMETER(DB1.PO411_Width);
    PARAMETER(DB1.PO412_Heights);
    PARAMETER(DB1.REF02_Batch_Lot);
    PARAMETER(DB1.DTM02_Expiration_Date);
    PARAMETER(DB1.DTM02_Shelf_Life_Date);
    PARAMETER(DB1.DTM02_Manuf_Date);
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Convert to Absolute Value.
    // LCL.Qty Difference USR = PAR.Qty Difference USR * CON.-1 *
    LCL.Qty_Difference_USR = PAR.Qty_Difference_USR * -1;

    CASE;

    // IF DB1.SN105 Quantity Ordered GE LCL.Qty Difference USR
    IF DB1.SN105_Quantity_Ordered >= LCL.Qty_Difference_USR;

    // LCL.SN105 Quantity Ordered = DB1.SN105 Quantity Ordered + PAR.Qty Difference USR
    LCL.SN105_Quantity_Ordered = DB1.SN105_Quantity_Ordered + PAR.Qty_Difference_USR;

    // PAR.Qty Difference USR = CON.*ZERO
    PAR.Qty_Difference_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Qty Difference USR = PAR.Qty Difference USR + DB1.SN105 Quantity Ordered
    PAR.Qty_Difference_USR = PAR.Qty_Difference_USR + DB1.SN105_Quantity_Ordered;

    // LCL.SN105 Quantity Ordered = CON.*ZERO
    LCL.SN105_Quantity_Ordered = *ZERO;

    ENDIF;

    EXECUTE FUNCTION(Chg EDI ASN Dtl V2    CH) TYPE(CHGOBJ) FILE(ECP140)            AC2175873;
    PARAMETER(DB1.EDI_SURROGATE_NUMBER);
    PARAMETER(DB1.REF02_Ref_ID_Load_ID);
    PARAMETER(DB1.PRF01_Customer_PO);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.MAN02_Pallet_Nb_Container);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.SN102_Quantity_Shipped);
    PARAMETER(DB1.SN103_Shipped_UOM);
    PARAMETER(DB1.PO406_Net_WT_Per_Pack);
    PARAMETER(DB1.PO406_Gross_WT_Per_Pack);
    PARAMETER(DB1.PO401_Pack);
    PARAMETER(DB1.PID05_ITEM_DESCRIPTION);
    PARAMETER(DB1.Product_ID_GTIN);
    PARAMETER(DB1.Product_ID_Manuf_Item);
    PARAMETER(DB1.Product_ID_UPC);
    PARAMETER(DB1.Product_ID_UCC_12);
    PARAMETER(DB1.Product_ID_Purchs_Item);
    PARAMETER(DB1.LIN_UP_UPC_Consumer_Pckge);
    PARAMETER(DB1.W1904_UPC_CASE_CODE);
    PARAMETER(DB1.LIN13_Prod_ID_CountryOrig);
    PARAMETER(DB1.LIN_Sub_Country_of_Origin);
    PARAMETER(DB1.GTin_12_Lin02);
    PARAMETER(DB1.SN101_Assigned_ID);
    PARAMETER(LCL.SN105_Quantity_Ordered);
    PARAMETER(DB1.SN106_Ordered_UOM);
    PARAMETER(DB1.SLN06_Unit_Price);
    PARAMETER(DB1.SLN07_Unit_Price_UOM);
    PARAMETER(DB1.SLN06_Unit_Price_2);
    PARAMETER(DB1.SLN07_Unit_Price_UOM_2);
    PARAMETER(DB1.SLN10_Prod_ID_DV);
    PARAMETER(DB1.SLN12_Prod_ID_LT);
    PARAMETER(DB1.SLN14_Prod_ID_UR);
    PARAMETER(DB1.PO402_Pack_Size);
    PARAMETER(DB1.PO410_Length);
    PARAMETER(DB1.PO411_Width);
    PARAMETER(DB1.PO412_Heights);
    PARAMETER(DB1.REF02_Batch_Lot);
    PARAMETER(DB1.DTM02_Expiration_Date);
    PARAMETER(DB1.DTM02_Shelf_Life_Date);
    PARAMETER(DB1.DTM02_Manuf_Date);
    ENDIF;

    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?Update EDI 856 Info in OHE.
 EXECUTE FUNCTION(Upd OHE EDI 856 Error  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2177296;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*BLANK);
 PARAMETER('S');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG OHE EDI 856 Error  CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2177297;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
  PARAMETER(PAR.OHE_EDI_856_Action);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

 ENDIF;

 //?USER: Exit processing

 //?Last Record Processing.
 CASE;

 // IF LCL.USR Update Flag is Yes
 IF LCL.USR_Update_Flag = 'Y';

 //?R17040 DN 03/08/21-Populate New Fields: Pallet Count, Unit Count,
 //?       Slip Sheet Count, Vendor Nbr & Invoice Nbr.
 EXECUTE FUNCTION(Crt EDI ASN Order V2  CR) TYPE(CRTOBJ) FILE(ECP142)            AC2175834;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Order_Date_USR);
 PARAMETER('SO');
 PARAMETER(PAR.Orders_on_PO_TXT);
 PARAMETER(LCL.TD101_Packaging_Code);
 PARAMETER(PAR.Total_Qty_Ship_ORD_USR);
 PARAMETER(PAR.Total_Pallet_Count_ORD_U);
 PARAMETER(PAR.Total_Unit_Count_ORD_U);
 PARAMETER(1);
 PARAMETER(PAR.Total_Gross_Wgt_ORD_USR);
 PARAMETER(PAR.Total_Wgt_Ship_ORD_USR);
 PARAMETER(LCL.Requested_Delivery_DteUSR);
 PARAMETER(LCL.Requested_Delivery_DteUSR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_Customer_Vendor_f_PO);
 PARAMETER(LCL.Invoice_Number);
 ENDIF;

}


