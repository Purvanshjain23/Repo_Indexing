// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNJWPFR
// ?Date: 14.08.2025 Time: 12:05:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Blank for 3          USR = CND.Blanks
WRK.Blank_for_3_USR = *BLANK;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?***** Change log and comments
//?** 06/10/2012 JBB E5262
//?** Add new field: Include Rebills
//?** Add "RB" to Suffix values (not showing for *ALL values)
//?*****
//?** 10/21/2009 LJB E00462
//?** Print only Parent summary records
//?USER: Record selection processing

//?** If Select by company
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND DB1.Company Number NE PAR.Company Number
AND DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** If Select by Parent customer number
CASE;

// IF PAR.Parent Customer is not equal to zero
IF PAR.Parent_Customer <> *ZERO;

// AND DB1.Parent Customer NE PAR.Parent Customer
AND DB1.Parent_Customer <> PAR.Parent_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** If Select by customer watch flag
CASE;

// IF PAR.Customer Watch Flag NE WRK.Blank for 3          USR
IF PAR.Customer_Watch_Flag <> WRK.Blank_for_3_USR;

// AND DB1.Customer Watch Flag NE PAR.Customer Watch Flag
AND DB1.Customer_Watch_Flag <> PAR.Customer_Watch_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Parent or ALL
CASE;

// IF PAR.Parent Customer is equal to zero
IF PAR.Parent_Customer = *ZERO;

// 1PG.Parent Customer Name DRV = CON.ALL
X1PG_Parent_Customer_Name_DRV = 'ALL';

//?** Parent or ALL
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Parent Customer Name DRV) TYPE(DRVFLD)                         AC1883464;
PARAMETER(X1PG_Parent_Customer_Name_DRV);
PARAMETER(X1PG_Parent_Customer);

ENDIF;

//?** Watch flag = All
CASE;

// IF PAR.Customer Watch Flag is Blanks
IF PAR.Customer_Watch_Flag = *BLANK;

// 1PG.Condition Name USR = CON.ALL
X1PG_Condition_Name_USR = 'ALL';

//?** Watch flag = All
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Customer Watch Flag = PAR.Customer Watch Flag
X1PG_Customer_Watch_Flag = PAR.Customer_Watch_Flag;

// 1PG.Condition Name USR = Condition name of PAR.Customer Watch Flag
X1PG_Condition_Name_USR = RTVCND(PAR.Customer_Watch_Flag);

ENDIF;

//?** Company = All
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// 1PG.Company Name DRV = CON.*ALL
X1PG_Company_Name_DRV = *ALL;

ENDIF;

// 1PG.From Production Date = PAR.From Production Date
X1PG_From_Production_Date = PAR.From_Production_Date;

// 1PG.Age Code = PAR.Age Code
X1PG_Age_Code = PAR.Age_Code;

// 1PG.Include Charge Backs = PAR.Include Charge Backs
X1PG_Include_Charge_Backs = PAR.Include_Charge_Backs;

//?06/10/16 JBB Add Include Rebills flag to first page of the report
// 1PG.Include Rebills = PAR.Include Rebills
X1PG_Include_Rebills = PAR.Include_Rebills;

//?USER: Print required level headings

// SUPPRESSED PRINT Parent Customer Name header format

// SUPPRESSED PRINT A/R Customer Name header format

//?USER: On print of detail format

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

MOVE *ALL (To: CUR From: DB1);

EXECUTE FUNCTION(Rtv Cust Watch Flag   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1943888;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(CUR.Customer_Watch_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Populate the month and Avg Days to Pay fields
// CUR.Credit Limit 9,0 usr = DB1.Credit Limit
CUR.Credit_Limit_90_usr = DB1.Credit_Limit;

// CUR.Date of Highest A/R Bal. = CUR.Date of Highest A/R Bal.
CUR.Date_of_Highest_A_R_Bal = CUR.Date_of_Highest_A_R_Bal;

// LCL.A/R Balance Year = PAR.From Production Date *YEAR
LCL.A_R_Balance_Year = DATEDTLS(PAR.From_Production_Date 'YR' 1111111 'NONE' 'N' 1);

// LCL.A/R Balance Month = PAR.From Production Date *MONTH
LCL.A_R_Balance_Month = DATEDTLS(PAR.From_Production_Date 'MO' 1111111 'NONE' 'N' 1);

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

EXECUTE FUNCTION(Rtv Past 6 Avg Dys ALL RT) TYPE(RTVOBJ) FILE(PDLDCPP)          AC1717670;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.A_R_Balance_Year);
PARAMETER(LCL.A_R_Balance_Month);
PARAMETER(CUR.Month_1_USR);
PARAMETER(CUR.Days_to_Pay_1_USR);
PARAMETER(CUR.Month_2_USR);
PARAMETER(CUR.Days_to_Pay_2_USR);
PARAMETER(CUR.Month_3_USR);
PARAMETER(CUR.Days_to_Pay_3_USR);
PARAMETER(CUR.Month_4_USR);
PARAMETER(CUR.Days_to_Pay_4_USR);
PARAMETER(CUR.Month_5_USR);
PARAMETER(CUR.Days_to_Pay_5_USR);
PARAMETER(CUR.Month_6_USR);
PARAMETER(CUR.Days_to_Pay_6_USR);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?RMC 3/7/06 Div Days by 2 only if both company's had days
 //?*****
 //?** 05/19/2006 LJB T00009
 //?** Size of Days to Pay user fields changed from 3.0 to 5.0
 //?** to prevent truncating when accumulating for large
 //?** volume customers
 //?*****
 //?** 06/11/2006 LJB L60906C
 //?** Change calculations for Average Days to Pay to use new
 //?** "Days to Pay" field. Accum total invoices paid and accum
 //?** total days to pay for both companies.
 //?** Then divide total Days to Pay by total Nbr Invoices paid.
 //?*****
 ENDDO;

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 //?USER: Process Data record

 //?Do not process current month
 CASE;

 // IF DB1.A/R Balance Month EQ PAR.A/R Balance Month
 IF DB1.A_R_Balance_Month = PAR.A_R_Balance_Month;

 //?Do not process current month
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Count number of months read so far
 CASE;

 // IF DB1.A/R Balance Month NE LCL.A/R Balance Month
 IF DB1.A_R_Balance_Month <> LCL.A_R_Balance_Month;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 // LCL.A/R Balance Month = DB1.A/R Balance Month
 LCL.A_R_Balance_Month = DB1.A_R_Balance_Month;

 ENDIF;

 //?Read only 6 months worth of records
 CASE;

 // IF LCL.Count USR is LE 6
 IF LCL.Count_USR <= 6;

 //?** Change calcs to use new Days to Pay field  09/11/2006 LJB L60906C
 //?** Month 1 calculations for Both Companies
 CASE;

 // IF PAR.Month 1 USR is Zero
 IF PAR.Month_1_USR = *ZERO;

 // OR PAR.Month 1 USR EQ DB1.A/R Balance Month
 OR PAR.Month_1_USR = DB1.A_R_Balance_Month;

 // PAR.Month 1 USR = DB1.A/R Balance Month
 PAR.Month_1_USR = DB1.A_R_Balance_Month;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 CASE;

 // IF PAR.Days to Pay 1 USR is Not Equal to Zero
 IF PAR.Days_to_Pay_1_USR <> *ZERO;

 // PAR.Days to Pay 1 USR = PAR.Days to Pay 1 USR + DB1.Days to Pay
 PAR.Days_to_Pay_1_USR = PAR.Days_to_Pay_1_USR + DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 1 Usr = PAR.Nbr Invoices Paid 1 Usr + DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_1_Usr = PAR.Nbr_Invoices_Paid_1_Usr + DB1.Bal_Nbr_of_Invoices_Paid;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 1 USR = DB1.Days to Pay
 PAR.Days_to_Pay_1_USR = DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 1 Usr = DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_1_Usr = DB1.Bal_Nbr_of_Invoices_Paid;

 ENDIF;

 //?** Month 1 calculations for Both Companies
 // IF PAR.Month 2 USR is Zero
 IF PAR.Month_2_USR = *ZERO;

 // OR PAR.Month 2 USR EQ DB1.A/R Balance Month
 OR PAR.Month_2_USR = DB1.A_R_Balance_Month;

 // PAR.Month 2 USR = DB1.A/R Balance Month
 PAR.Month_2_USR = DB1.A_R_Balance_Month;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 CASE;

 // IF PAR.Days to Pay 2 USR is Not Equal to Zero
 IF PAR.Days_to_Pay_2_USR <> *ZERO;

 // PAR.Days to Pay 2 USR = PAR.Days to Pay 2 USR + DB1.Days to Pay
 PAR.Days_to_Pay_2_USR = PAR.Days_to_Pay_2_USR + DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 2 Usr = PAR.Nbr Invoices Paid 2 Usr + DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_2_Usr = PAR.Nbr_Invoices_Paid_2_Usr + DB1.Bal_Nbr_of_Invoices_Paid;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 2 USR = DB1.Days to Pay
 PAR.Days_to_Pay_2_USR = DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 2 Usr = DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_2_Usr = DB1.Bal_Nbr_of_Invoices_Paid;

 ENDIF;

 //?** Month 1 calculations for Both Companies
 // IF PAR.Month 3 USR is Zero
 IF PAR.Month_3_USR = *ZERO;

 // OR PAR.Month 3 USR EQ DB1.A/R Balance Month
 OR PAR.Month_3_USR = DB1.A_R_Balance_Month;

 // PAR.Month 3 USR = DB1.A/R Balance Month
 PAR.Month_3_USR = DB1.A_R_Balance_Month;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 CASE;

 // IF PAR.Days to Pay 3 USR is Not Equal to Zero
 IF PAR.Days_to_Pay_3_USR <> *ZERO;

 // PAR.Days to Pay 3 USR = PAR.Days to Pay 3 USR + DB1.Days to Pay
 PAR.Days_to_Pay_3_USR = PAR.Days_to_Pay_3_USR + DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 3 Usr = PAR.Nbr Invoices Paid 3 Usr + DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_3_Usr = PAR.Nbr_Invoices_Paid_3_Usr + DB1.Bal_Nbr_of_Invoices_Paid;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 3 USR = DB1.Days to Pay
 PAR.Days_to_Pay_3_USR = DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 3 Usr = DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_3_Usr = DB1.Bal_Nbr_of_Invoices_Paid;

 ENDIF;

 //?** Month 1 calculations for Both Companies
 // IF PAR.Month 4 USR is Zero
 IF PAR.Month_4_USR = *ZERO;

 // OR PAR.Month 4 USR EQ DB1.A/R Balance Month
 OR PAR.Month_4_USR = DB1.A_R_Balance_Month;

 // PAR.Month 4 USR = DB1.A/R Balance Month
 PAR.Month_4_USR = DB1.A_R_Balance_Month;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 CASE;

 // IF PAR.Days to Pay 4 USR is Not Equal to Zero
 IF PAR.Days_to_Pay_4_USR <> *ZERO;

 // PAR.Days to Pay 4 USR = PAR.Days to Pay 4 USR + DB1.Days to Pay
 PAR.Days_to_Pay_4_USR = PAR.Days_to_Pay_4_USR + DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 4 Usr = PAR.Nbr Invoices Paid 4 Usr + DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_4_Usr = PAR.Nbr_Invoices_Paid_4_Usr + DB1.Bal_Nbr_of_Invoices_Paid;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 4 USR = DB1.Days to Pay
 PAR.Days_to_Pay_4_USR = DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 4 Usr = DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_4_Usr = DB1.Bal_Nbr_of_Invoices_Paid;

 ENDIF;

 //?** Month 1 calculations for Both Companies
 // IF PAR.Month 5 USR is Zero
 IF PAR.Month_5_USR = *ZERO;

 // OR PAR.Month 5 USR EQ DB1.A/R Balance Month
 OR PAR.Month_5_USR = DB1.A_R_Balance_Month;

 // PAR.Month 5 USR = DB1.A/R Balance Month
 PAR.Month_5_USR = DB1.A_R_Balance_Month;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 CASE;

 // IF PAR.Days to Pay 5 USR is Not Equal to Zero
 IF PAR.Days_to_Pay_5_USR <> *ZERO;

 // PAR.Days to Pay 5 USR = PAR.Days to Pay 5 USR + DB1.Days to Pay
 PAR.Days_to_Pay_5_USR = PAR.Days_to_Pay_5_USR + DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 5 Usr = PAR.Nbr Invoices Paid 5 Usr + DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_5_Usr = PAR.Nbr_Invoices_Paid_5_Usr + DB1.Bal_Nbr_of_Invoices_Paid;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 5 USR = DB1.Days to Pay
 PAR.Days_to_Pay_5_USR = DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 5 Usr = DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_5_Usr = DB1.Bal_Nbr_of_Invoices_Paid;

 ENDIF;

 //?** Month 1 calculations for Both Companies
 // IF PAR.Month 6 USR is Zero
 IF PAR.Month_6_USR = *ZERO;

 // OR PAR.Month 6 USR EQ DB1.A/R Balance Month
 OR PAR.Month_6_USR = DB1.A_R_Balance_Month;

 // PAR.Month 6 USR = DB1.A/R Balance Month
 PAR.Month_6_USR = DB1.A_R_Balance_Month;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 CASE;

 // IF PAR.Days to Pay 6 USR is Not Equal to Zero
 IF PAR.Days_to_Pay_6_USR <> *ZERO;

 // PAR.Days to Pay 6 USR = PAR.Days to Pay 6 USR + DB1.Days to Pay
 PAR.Days_to_Pay_6_USR = PAR.Days_to_Pay_6_USR + DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 6 Usr = PAR.Nbr Invoices Paid 6 Usr + DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_6_Usr = PAR.Nbr_Invoices_Paid_6_Usr + DB1.Bal_Nbr_of_Invoices_Paid;

 //?** Add Company's "Days to Pay" and "Bal Nbr Invoices Paid" together
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 6 USR = DB1.Days to Pay
 PAR.Days_to_Pay_6_USR = DB1.Days_to_Pay;

 // PAR.Nbr Invoices Paid 6 Usr = DB1.Bal Nbr of Invoices Paid
 PAR.Nbr_Invoices_Paid_6_Usr = DB1.Bal_Nbr_of_Invoices_Paid;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Calculate average Days to Pay - Month 1
 CASE;

 // IF PAR.Nbr Invoices Paid 1 Usr is Not zero
 IF PAR.Nbr_Invoices_Paid_1_Usr <> *ZERO;

 // PAR.Days to Pay 1 USR = PAR.Days to Pay 1 USR / PAR.Nbr Invoices Paid 1 Usr *Rounded
 PAR.Days_to_Pay_1_USR = PAR.Days_to_Pay_1_USR / PAR.Nbr_Invoices_Paid_1_Usr 'H';

 //?Calculate average Days to Pay - Month 1
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 1 USR = CON.*ZERO
 PAR.Days_to_Pay_1_USR = *ZERO;

 ENDIF;

 //?Calculate average Days to Pay - Month 2
 CASE;

 // IF PAR.Nbr Invoices Paid 2 Usr is Not zero
 IF PAR.Nbr_Invoices_Paid_2_Usr <> *ZERO;

 // PAR.Days to Pay 2 USR = PAR.Days to Pay 2 USR / PAR.Nbr Invoices Paid 2 Usr *Rounded
 PAR.Days_to_Pay_2_USR = PAR.Days_to_Pay_2_USR / PAR.Nbr_Invoices_Paid_2_Usr 'H';

 //?Calculate average Days to Pay - Month 2
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 2 USR = CON.*ZERO
 PAR.Days_to_Pay_2_USR = *ZERO;

 ENDIF;

 //?Calculate average Days to Pay - Month 3
 CASE;

 // IF PAR.Nbr Invoices Paid 3 Usr is Not zero
 IF PAR.Nbr_Invoices_Paid_3_Usr <> *ZERO;

 // PAR.Days to Pay 3 USR = PAR.Days to Pay 3 USR / PAR.Nbr Invoices Paid 3 Usr *Rounded
 PAR.Days_to_Pay_3_USR = PAR.Days_to_Pay_3_USR / PAR.Nbr_Invoices_Paid_3_Usr 'H';

 //?Calculate average Days to Pay - Month 3
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 3 USR = CON.*ZERO
 PAR.Days_to_Pay_3_USR = *ZERO;

 ENDIF;

 //?Calculate average Days to Pay - Month 4
 CASE;

 // IF PAR.Nbr Invoices Paid 4 Usr is Not zero
 IF PAR.Nbr_Invoices_Paid_4_Usr <> *ZERO;

 // PAR.Days to Pay 4 USR = PAR.Days to Pay 4 USR / PAR.Nbr Invoices Paid 4 Usr *Rounded
 PAR.Days_to_Pay_4_USR = PAR.Days_to_Pay_4_USR / PAR.Nbr_Invoices_Paid_4_Usr 'H';

 //?Calculate average Days to Pay - Month 4
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 4 USR = CON.*ZERO
 PAR.Days_to_Pay_4_USR = *ZERO;

 ENDIF;

 //?Calculate average Days to Pay - Month 5
 CASE;

 // IF PAR.Nbr Invoices Paid 5 Usr is Not zero
 IF PAR.Nbr_Invoices_Paid_5_Usr <> *ZERO;

 // PAR.Days to Pay 5 USR = PAR.Days to Pay 5 USR / PAR.Nbr Invoices Paid 5 Usr *Rounded
 PAR.Days_to_Pay_5_USR = PAR.Days_to_Pay_5_USR / PAR.Nbr_Invoices_Paid_5_Usr 'H';

 //?Calculate average Days to Pay - Month 5
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 5 USR = CON.*ZERO
 PAR.Days_to_Pay_5_USR = *ZERO;

 ENDIF;

 //?Calculate average Days to Pay - Month 6
 CASE;

 // IF PAR.Nbr Invoices Paid 6 Usr is Not zero
 IF PAR.Nbr_Invoices_Paid_6_Usr <> *ZERO;

 // PAR.Days to Pay 6 USR = PAR.Days to Pay 6 USR / PAR.Nbr Invoices Paid 6 Usr *Rounded
 PAR.Days_to_Pay_6_USR = PAR.Days_to_Pay_6_USR / PAR.Nbr_Invoices_Paid_6_Usr 'H';

 //?Calculate average Days to Pay - Month 6
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay 6 USR = CON.*ZERO
 PAR.Days_to_Pay_6_USR = *ZERO;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Past 6 Avg Dys Pay RT) TYPE(RTVOBJ) FILE(PDLDCPP)          AC1698413;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.A_R_Balance_Year);
PARAMETER(LCL.A_R_Balance_Month);
PARAMETER(CUR.Month_1_USR);
PARAMETER(CUR.Days_to_Pay_1_USR);
PARAMETER(CUR.Month_2_USR);
PARAMETER(CUR.Days_to_Pay_2_USR);
PARAMETER(CUR.Month_3_USR);
PARAMETER(CUR.Days_to_Pay_3_USR);
PARAMETER(CUR.Month_4_USR);
PARAMETER(CUR.Days_to_Pay_4_USR);
PARAMETER(CUR.Month_5_USR);
PARAMETER(CUR.Days_to_Pay_5_USR);
PARAMETER(CUR.Month_6_USR);
PARAMETER(CUR.Days_to_Pay_6_USR);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?***** 05/19/2006 LJB T00009
 //?** Size of the Days to Pay Usr fields was changed from
 //?** 3.0 to 5.0 to prevent truncation when accumulating for
 //?** large volume customers.
 //?*****
 ENDDO;

 //?USER: Process Data record

 //?original 1/27/05
 CASE;

 // IF DB1.A/R Balance Month EQ PAR.A/R Balance Month
 IF DB1.A_R_Balance_Month = PAR.A_R_Balance_Month;

 //?original 1/27/05
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Month 1 USR is Zero
 IF PAR.Month_1_USR = *ZERO;

 // PAR.Month 1 USR = DB1.A/R Balance Month
 PAR.Month_1_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 1 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_1_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 2 USR is Zero
 IF PAR.Month_2_USR = *ZERO;

 // PAR.Month 2 USR = DB1.A/R Balance Month
 PAR.Month_2_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 2 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_2_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 3 USR is Zero
 IF PAR.Month_3_USR = *ZERO;

 // PAR.Month 3 USR = DB1.A/R Balance Month
 PAR.Month_3_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 3 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_3_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 4 USR is Zero
 IF PAR.Month_4_USR = *ZERO;

 // PAR.Month 4 USR = DB1.A/R Balance Month
 PAR.Month_4_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 4 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_4_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 5 USR is Zero
 IF PAR.Month_5_USR = *ZERO;

 // PAR.Month 5 USR = DB1.A/R Balance Month
 PAR.Month_5_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 5 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_5_USR = DB1.Bal_Avg_Days_to_Pay;

 // IF PAR.Month 6 USR is Zero
 IF PAR.Month_6_USR = *ZERO;

 // PAR.Month 6 USR = DB1.A/R Balance Month
 PAR.Month_6_USR = DB1.A_R_Balance_Month;

 // PAR.Days to Pay 6 USR = DB1.Bal Avg Days to Pay
 PAR.Days_to_Pay_6_USR = DB1.Bal_Avg_Days_to_Pay;

 ENDIF;

 ENDIF;

}


ENDIF;

// Call program ZZZ Credit Applied    UP.
CALL PROGRAM(ZZZ Credit Applied    UP) ('AR800');
PARAMETER(CUR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(2);
PARAMETER(LCL.USR_Age_Current_A);
PARAMETER(LCL.USR_Age_Value_1_A);
PARAMETER(LCL.USR_Age_Value_2_A);
PARAMETER(LCL.USR_Age_Value_3_A);
PARAMETER(LCL.USR_Age_Value_4_A);
PARAMETER(LCL.USR_Age_Value_5_A);
PARAMETER(LCL.USR_Adjustment_Amount_1);
PARAMETER(LCL.USR_Total_Due);

EXECUTE FUNCTION(RTV HighBal/Date-Parnt RT) TYPE(RTVOBJ) FILE(PDLDCPP)          AC1944210;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.A_R_Balance_Year);
PARAMETER(LCL.A_R_Balance_Month);
PARAMETER(LCL.Amount_of_Highest_A_R_Bal);
PARAMETER(CUR.Date_of_Highest_A_R_Bal);
{
 //?USER: Initialize routine

 // LCL.Amount of Highest A/R Bal = CON.*ZERO
 LCL.Amount_of_Highest_A_R_Bal = *ZERO;

 //?USER: Process Data record

 // LCL.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal + LCL.Amount of Highest A/R Bal
 LCL.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal
 + LCL.Amount_of_Highest_A_R_Bal;

 CASE;

 // IF DB1.Date of Highest A/R Bal. GT LCL.Date of Highest A/R Bal.
 IF DB1.Date_of_Highest_A_R_Bal > LCL.Date_of_Highest_A_R_Bal;

 // LCL.Date of Highest A/R Bal. = DB1.Date of Highest A/R Bal.
 LCL.Date_of_Highest_A_R_Bal = DB1.Date_of_Highest_A_R_Bal;

 ENDIF;

 //?USER: Exit processing

 // PAR.Amount of Highest A/R Bal = LCL.Amount of Highest A/R Bal
 PAR.Amount_of_Highest_A_R_Bal = LCL.Amount_of_Highest_A_R_Bal;

 // PAR.Date of Highest A/R Bal. = LCL.Date of Highest A/R Bal.
 PAR.Date_of_Highest_A_R_Bal = LCL.Date_of_Highest_A_R_Bal;

}


// CUR.High A/R Bal 9,0 usr = LCL.Amount of Highest A/R Bal
CUR.High_A_R_Bal_90_usr = LCL.Amount_of_Highest_A_R_Bal;

//?** Print the Credit Applied amounts from program AR800
// CUR.Credit Applied usr 6 9,0 = LCL.USR Age Current A
CUR.Credit_Applied_usr_6_90 = LCL.USR_Age_Current_A;

// CUR.Credit Applied usr 1 9,0 = LCL.USR Age Value 1 A
CUR.Credit_Applied_usr_1_90 = LCL.USR_Age_Value_1_A;

// CUR.Credit Applied usr 2 9,0 = LCL.USR Age Value 2 A
CUR.Credit_Applied_usr_2_90 = LCL.USR_Age_Value_2_A;

// CUR.Credit Applied usr 3 9,0 = LCL.USR Age Value 3 A
CUR.Credit_Applied_usr_3_90 = LCL.USR_Age_Value_3_A;

// CUR.Credit Applied usr 4 9,0 = LCL.USR Age Value 4 A
CUR.Credit_Applied_usr_4_90 = LCL.USR_Age_Value_4_A;

// CUR.Credit Applied usr 5 9,0 = LCL.USR Age Value 5 A
CUR.Credit_Applied_usr_5_90 = LCL.USR_Age_Value_5_A;

// CUR.Credit/On Account Amount = LCL.USR Adjustment Amount 1
CUR.Credit_On_Account_Amount = LCL.USR_Adjustment_Amount_1;

EXECUTE FUNCTION(RTV Sales Route        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1371227;
PARAMETER(CUR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(CUR.Sales_Route_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Addr, A/R Cst RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263804;
PARAMETER(CUR.Parent_Customer);
PARAMETER(NLL.Customer_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(CUR.City);
PARAMETER(CUR.State_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Email_When_Order_Shipped);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

//?** Add subtotal by Billing and Total by Parent, Total at the end.
// WRK.Total Due Amount = WRK.Total Due Amount + CUR.Total Due Amount
WRK.Total_Due_Amount = WRK.Total_Due_Amount + CUR.Total_Due_Amount;

//?** Accumulate the Report Total Amount Due
// PAR.USR Extended Cost Amt. 1 = PAR.USR Extended Cost Amt. 1 + CUR.Total Due Amount
PAR.USR_Extended_Cost_Amt_1 = PAR.USR_Extended_Cost_Amt_1 + CUR.Total_Due_Amount;

//?** Accumulate the Credit Applied and Aging Amounts
// PAR.USR Age Current A = PAR.USR Age Current A + LCL.USR Age Current A
PAR.USR_Age_Current_A = PAR.USR_Age_Current_A + LCL.USR_Age_Current_A;

// PAR.USR Age Value 1 A = PAR.USR Age Value 1 A + LCL.USR Age Value 1 A
PAR.USR_Age_Value_1_A = PAR.USR_Age_Value_1_A + LCL.USR_Age_Value_1_A;

// PAR.USR Age Value 2 A = PAR.USR Age Value 2 A + LCL.USR Age Value 2 A
PAR.USR_Age_Value_2_A = PAR.USR_Age_Value_2_A + LCL.USR_Age_Value_2_A;

// PAR.USR Age Value 3 A = PAR.USR Age Value 3 A + LCL.USR Age Value 3 A
PAR.USR_Age_Value_3_A = PAR.USR_Age_Value_3_A + LCL.USR_Age_Value_3_A;

// PAR.USR Age Value 4 A = PAR.USR Age Value 4 A + LCL.USR Age Value 4 A
PAR.USR_Age_Value_4_A = PAR.USR_Age_Value_4_A + LCL.USR_Age_Value_4_A;

// PAR.USR Age Value 5 A = PAR.USR Age Value 5 A + LCL.USR Age Value 5 A
PAR.USR_Age_Value_5_A = PAR.USR_Age_Value_5_A + LCL.USR_Age_Value_5_A;

// PAR.USR Adjustment Amount 1 = PAR.USR Adjustment Amount 1 + LCL.USR Adjustment Amount 1
PAR.USR_Adjustment_Amount_1 = PAR.USR_Adjustment_Amount_1 + LCL.USR_Adjustment_Amount_1;

// NXT.Company Number = CUR.Company Number
NXT.Company_Number = CUR.Company_Number;

//?USER: Print required level totals

CASE;

IF NEW AR_Customer_Name;
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// NXT.Total Due Amount = WRK.Total Due Amount
NXT.Total_Due_Amount = WRK.Total_Due_Amount;

// Print A/R Customer Name totals format
PRINT A/R Customer Name totals format;

ENDIF;

CASE;

IF NEW Parent_Customer_Name;
// WRK.Total Due Amount = CON.*ZERO
WRK.Total_Due_Amount = *ZERO;

// Print Parent Customer Name totals format
PRINT Parent Customer Name totals format;

ENDIF;

//?USER: On print of final totals format

// CUR.Total Due Amount = PAR.USR Extended Cost Amt. 1
CUR.Total_Due_Amount = PAR.USR_Extended_Cost_Amt_1;

