// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLMXFR
// ?Date: 14.08.2025 Time: 03:35:06
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 5/16/2023 For getting the ar exempt for RB , added check for
//?    adjustment type= PAY. a RB payment came in with PAY
//?RMC 12/15/22 W116222 the below didnt work right. changed to check
//?  for adj type=CB AND the suffix is RB/CB rather than OR.
//?SUFFIX=IN AND ADJ TYPE=CB WERENT GETTING THE TF EXEMPT CODE
//?RMC 1/11/18 S12308 get ar tf exempt from ar header ext for CB,RB
//?RMC 2/25/15 C3977 -  for CB suffix, output orig inv from a/r header
//?RMC 4/12/14 E3103 -  for CB suffix, force exempt to NE
//?RMC 1/24/14 E2991 -  for CB, get next # from company control
EXECUTE FUNCTION(PRC Lckbx to A/R Post  RT) TYPE(RTVOBJ) FILE(PDMACPP)          AC1515397;
PARAMETER(PAR.LckBx_Number);
PARAMETER(PAR.LckBx_Deposit_Date);
PARAMETER(PAR.LckBx_Deposit_Time);
{
 //?USER: Process Data record

 //?Determine Bank.
 DO;

 //?*********************************************************
 //?note: If other banks are added later, insert code here to
 //?      set the bank code based on the (?lockbox number?).
 //?*********************************************************
 //?Get Bank Code from Bank Master    PK0289 5/24/01
 //?*********************************************************
 EXECUTE FUNCTION(RTV Bank Cd f/Lckbx   RT) TYPE(RTVOBJ) FILE(CAEBREP)           AC1623891;
 PARAMETER(PAR.Bank_Code);
 PARAMETER(DB1.LckBx_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDDO;

 // PAR.Total Cash Applied = CND.Zero
 PAR.Total_Cash_Applied = *ZERO;

 //?*** Process the Bank Deposit. ***
 EXECUTE FUNCTION(PRC Lckbx to A/R Post  RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1515418;
 PARAMETER(DB1.LckBx_Number);
 PARAMETER(DB1.LckBx_Deposit_Date);
 PARAMETER(DB1.LckBx_Deposit_Time);
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.Total_Cash_Applied);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.LckBx Hold Flag is No
  IF DB1.LckBx_Hold_Flag = 'N';

  //?*** Process all of the invoice trans. for each check. ***
  DO;

  EXECUTE FUNCTION(PRC Lckbx to A/R Post  RT) TYPE(RTVOBJ) FILE(PDMDCPP)          AC1515422;
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Check_Number);
  PARAMETER(PAR.Bank_Code);
  PARAMETER(PAR.Total_Cash_Applied);
  {
   //?USER: Initialize routine

   // PAR.Save Invoice Number   USR = CON.*ZERO
   PAR.Save_Invoice_Number_USR = *ZERO;

   // PAR.Save Adjustment Type  USR = CND.Not Entered
   PAR.Save_Adjustment_Type_USR = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.LckBx Invoice Number EQ PAR.Save Invoice Number   USR
   IF DB1.LckBx_Invoice_Number = PAR.Save_Invoice_Number_USR;

   // AND DB1.Adjustment Type Code EQ PAR.Save Adjustment Type  USR
   AND DB1.Adjustment_Type_Code = PAR.Save_Adjustment_Type_USR;

   //?*** Skip Lockbox Invoice Record ***
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Find A/R Header record for the Lockbox Invoice.
   DO;

   // Call program RTV Total Inv/Adj Amt  XF.
   CALL PROGRAM(RTV Total Inv/Adj Amt  XF) ('PDLOXFR');
   PARAMETER(DB1.LckBx_Number);
   PARAMETER(DB1.LckBx_Deposit_Date);
   PARAMETER(DB1.LckBx_Deposit_Time);
   PARAMETER(DB1.LckBx_Batch_Number);
   PARAMETER(DB1.LckBx_Item_Number);
   PARAMETER(DB1.LckBx_Invoice_Number);
   PARAMETER(DB1.Adjustment_Type_Code);
   PARAMETER(PAR.LckBx_Total_Inv_Amt_USR);

   //?*** Find A/R Header record for the Lockbox Invoice. ***
   //?***     - Suffix: 'IN', 'CB', or 'DM'               ***
   //?***     - Purge Status: Open                        ***
   EXECUTE FUNCTION(PRC Lckbx to A/R Post RTV) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1515424;
   PARAMETER(DB1.LckBx_Invoice_Number);
   PARAMETER(DB1.LckBx_Deposit_Date);
   PARAMETER(DB1.LckBx_Deposit_Time);
   PARAMETER(PAR.LckBx_Check_Number);
   PARAMETER(PAR.LckBx_Total_Inv_Amt_USR);
   PARAMETER(DB1.Adjustment_Type_Code);
   PARAMETER(DB1.Explanation);
   PARAMETER(PAR.Bank_Code);
   PARAMETER(PAR.Total_Cash_Applied);
   {
    //?USER: Initialize routine

    //?modification history
    DO;

    //?RMC 5/16/2023 For getting the ar exempt for RB , added check for
    //?    adjustment type= PAY. a RB payment came in with PAY
    //?01/11/2018 RMC S12308 get ar exempt from a/r header ext for CB, RB
    //?04/26/2008 slm Get the TF Exempt Flag from the 1st Sales History
    ENDDO;

    //?USER: Process Data record

    //?*** Get G/L Code for Adjustment Type.
    EXECUTE FUNCTION(RTV G/L ID Code JDE    RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1515434;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Adjustment_Type_Code);
    PARAMETER(PAR.G_L_ID_Code_JDE);
    PARAMETER(PAR.Cash_Adj);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Determine Values for Miscellaneous A/R Fields.
    DO;

    //?Transaction Amounts.
    CASE;

    // IF PAR.Adjustment Type Code is Regular Pay
    IF PAR.Adjustment_Type_Code = 'PAY';

    //?Calculate "payment" transaction amounts.
    DO;

    // PAR.Amount Paid = DB1.Amount Paid + PAR.LckBx Invoice Amount
    PAR.Amount_Paid = DB1.Amount_Paid + PAR.LckBx_Invoice_Amount;

    // PAR.Adjustment Amount = DB1.Adjustment Amount
    PAR.Adjustment_Amount = DB1.Adjustment_Amount;

    // PAR.Last Payment Date = PAR.LckBx Deposit Date
    PAR.Last_Payment_Date = PAR.LckBx_Deposit_Date;

    //?*** add to "total cash applied" for Bank Deposit Record. ***
    // PAR.Total Cash Applied = PAR.Total Cash Applied + PAR.LckBx Invoice Amount
    PAR.Total_Cash_Applied = PAR.Total_Cash_Applied + PAR.LckBx_Invoice_Amount;

    ENDDO;

    //?Transaction Amounts.
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate "adjustment" transaction amounts.
    DO;

    // PAR.Amount Paid = DB1.Amount Paid
    PAR.Amount_Paid = DB1.Amount_Paid;

    // PAR.Adjustment Amount = DB1.Adjustment Amount + PAR.LckBx Invoice Amount
    PAR.Adjustment_Amount = DB1.Adjustment_Amount + PAR.LckBx_Invoice_Amount;

    // PAR.Last Payment Date = DB1.Last Payment Date
    PAR.Last_Payment_Date = DB1.Last_Payment_Date;

    ENDDO;

    ENDIF;

    //?*** remaining balance due ***
    // PAR.Remaining Balance Due = DB1.Remaining Balance Due - PAR.LckBx Invoice Amount
    PAR.Remaining_Balance_Due = DB1.Remaining_Balance_Due - PAR.LckBx_Invoice_Amount;

    CASE;

    // IF PAR.Remaining Balance Due is less or equal to zero
    IF PAR.Remaining_Balance_Due <= *ZERO;

    // PAR.Paid in Full Date = JOB.*Job date
    PAR.Paid_in_Full_Date = JOB.*Job_date;

    // PAR.Days to Pay = PAR.LckBx Deposit Date - DB1.Transaction Date Code *DAYS
    PAR.Days_to_Pay = DURATION(PAR.LckBx_Deposit_Date DB1.Transaction_Date_Code 'DY' 1111111
    'NONE' 'N' 1);

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Paid in Full Date = DB1.Paid in Full Date
    PAR.Paid_in_Full_Date = DB1.Paid_in_Full_Date;

    // PAR.Days to Pay = DB1.Days to Pay
    PAR.Days_to_Pay = DB1.Days_to_Pay;

    ENDIF;

    ENDDO;

    //?File Creates & Updates.
    DO;

    //?*** Create A/R Detail for Invoice Transaction. ***
    // PAR.Sequence Number = CON.*ZERO
    PAR.Sequence_Number = *ZERO;

    EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(PAR.Sequence_Number);
    {
     //?USER: Processing if Data record not found

     // PAR.Sequence Number = CON.1
     PAR.Sequence_Number = 1;

     //?USER: Process Data record

     // PAR.Sequence Number = DB1.Sequence Number
     PAR.Sequence_Number = DB1.Sequence_Number;

     //?USER: Exit processing

     // PAR.Sequence Number = PAR.Sequence Number + CON.1
     PAR.Sequence_Number = PAR.Sequence_Number + 1;

    }

    //?1/11/2018 RMC If the Suffix is "RB" use Exempt from Orig Inv     S12308
    //? Use a/r header ext for both CB &  RB
    //?5/12/2014 RMC If the Suffix is "CB" use Exempt from Orig Inv
    //?after  05/16/23
    CASE;

    // IF PAR.Adjustment Type Code is Chargeback
    IF ( PAR.Adjustment_Type_Code = 'CB';

    // OR PAR.Adjustment Type Code is Regular Pay
    OR PAR.Adjustment_Type_Code = 'PAY' );

    // AND DB1.Invoice Suffix is Charge Backs
    AND ( DB1.Invoice_Suffix = 'CB';

    // OR DB1.Invoice Suffix is Rebill
    OR DB1.Invoice_Suffix = 'RB' );

    //?added type = PAY. a RB payment came in with PAY
    // LCL.A/R TF Exempt Code = CND.Not Exempt
    LCL.A_R_TF_Exempt_Code = 'NE';

    EXECUTE FUNCTION(Rtv Orig Order/Inv    RT) TYPE(RTVOBJ) FILE(PBC0CPP)           AC2146735;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(LCL.Attach_to_Invoice_Number);
    PARAMETER(LCL.Attach_to_Order_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(RTV TF AR Exempt f/ordRT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC2146736;
    PARAMETER(DB1.Company_Number);
    PARAMETER(LCL.Attach_to_Order_Number);
    PARAMETER(LCL.A_R_TF_Exempt_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    //?after  05/16/23
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Call program Rtv TF Exempt By Inv  XF.
    CALL PROGRAM(Rtv TF Exempt By Inv  XF) ('PMUJXFR');
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(LCL.A_R_TF_Exempt_Code);

    ENDIF;

    // Call program VAL Acct ID JDE-8 dgt  UP.
    CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
    PARAMETER(PAR.G_L_ID_Code_JDE);
    PARAMETER(NLL.Cost_Center);
    PARAMETER(NLL.Object_Account);
    PARAMETER(NLL.Subsidiary);
    PARAMETER(NLL.Description);
    PARAMETER(PAR.G_L_Posting_Company);
    PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
    PARAMETER(NLL.Error_Return_text);

    //?Populate Explanation for Chargebacks
    CASE;

    // IF PAR.Adjustment Type Code is Chargeback
    IF PAR.Adjustment_Type_Code = 'CB';

    // LCL.Explanation = PAR.Explanation
    LCL.Explanation = PAR.Explanation;

    //?Populate Explanation for Chargebacks
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Explanation = CND.Blank
    LCL.Explanation = *BLANK;

    ENDIF;

    //?C3977 RMC 2/25/15 output orig inv for CB
    EXECUTE FUNCTION(CRT A/R Detail (Lckbx) CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1515444;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(PAR.Sequence_Number);
    PARAMETER(PAR.Adjustment_Type_Code);
    PARAMETER(PAR.LckBx_Invoice_Amount);
    PARAMETER(PAR.LckBx_Check_Number);
    PARAMETER(LCL.Explanation);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.LckBx_Deposit_Date);
    PARAMETER(PAR.LckBx_Deposit_Time);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Bank_Code);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Cash_Adj);
    PARAMETER('E');
    PARAMETER('PDLMXFR');
    PARAMETER(*BLANK);
    PARAMETER(PAR.G_L_Posting_Company);
    PARAMETER(PAR.G_L_ID_Code_JDE);
    PARAMETER('N');
    PARAMETER(LCL.A_R_TF_Exempt_Code);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(DB1.Original_Inv_for_CB);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(JOB.*Job_time);
    PARAMETER('LOCKBOX');
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(JOB.*Job_date);
    //?*** Update A/R Header for Invoice Transaction. ***
    EXECUTE FUNCTION(CHG A/R Detail (Lckbx) CH) TYPE(CHGOBJ) FILE(ARBDCPP)          AC1515455;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(PAR.Adjustment_Amount);
    PARAMETER(PAR.Amount_Paid);
    PARAMETER(PAR.Remaining_Balance_Due);
    PARAMETER(PAR.Bank_Code);
    PARAMETER(PAR.Last_Payment_Date);
    PARAMETER(PAR.Paid_in_Full_Date);
    PARAMETER(PAR.LckBx_Check_Number);
    PARAMETER(PAR.Days_to_Pay);
    PARAMETER(JOB.*Job_time);
    PARAMETER('LOCKBOX');
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(JOB.*Job_date);
    //?*** Update A/R Header for Invoice Transaction. ***
    //?*** PK0333 ***
    CASE;

    // IF PAR.Adjustment Type Code is Chargeback
    IF PAR.Adjustment_Type_Code = 'CB';

    // OR PAR.Adjustment Type Code is Accrual Chargeback
    OR PAR.Adjustment_Type_Code = 'ACB';

    //?Create A/R Header for Chargeback Transaction.
    DO;

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Record Created        USR = CND.No
    PAR.Record_Created_USR = 'N';

    // DOW PAR.Record Created        USR is No
    DOW PAR.Record_Created_USR = 'N';

    //?*** Create a Chargeback record in the A/R Header file. ***
    DO;

    //?*** Convert the invoice nbr into a Chargeback Reference nbr. ***
    EXECUTE FUNCTION(RTV Next CB Number     RT) TYPE(RTVOBJ) FILE(CAASREP)          AC2082405;
    PARAMETER(*ZERO);
    PARAMETER(LCL.Next_Charge_Back_Number);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.Next Charge Back Number = LCL.Next Charge Back Number + CON.1
    LCL.Next_Charge_Back_Number = LCL.Next_Charge_Back_Number + 1;

    EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
    PARAMETER(LCL.Next_Charge_Back_Number);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     // PGM.*Return code = CND.*Record already exists
     PGM.*Return_code = 'Y2U0003';

    }

    // DOW PGM.*Return code is *Record already exists
    DOW PGM.*Return_code = 'Y2U0003';

    // LCL.Next Charge Back Number = LCL.Next Charge Back Number + CON.1
    LCL.Next_Charge_Back_Number = LCL.Next_Charge_Back_Number + 1;

    EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
    PARAMETER(LCL.Next_Charge_Back_Number);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     // PGM.*Return code = CND.*Record already exists
     PGM.*Return_code = 'Y2U0003';

    }

    ENDDO;

    EXECUTE FUNCTION(RTV Next Charge Back# CH) TYPE(CHGOBJ) FILE(CAASREP)           AC2082404;
    PARAMETER(*ZERO);
    PARAMETER(LCL.Next_Charge_Back_Number);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.Invoice Number        USR = LCL.Next Charge Back Number
    PAR.Invoice_Number_USR = LCL.Next_Charge_Back_Number;

    // LCL.Original Inv for CB = DB1.Invoice Number
    LCL.Original_Inv_for_CB = DB1.Invoice_Number;

    //?*** Create a Chargeback record in the A/R Header file. ***
    EXECUTE FUNCTION(CRT A/R Detail (Lckbx) CR) TYPE(CRTOBJ) FILE(ARBDCPP)          AC1515456;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Invoice_Number_USR);
    PARAMETER('CB');
    PARAMETER(PAR.Adjustment_Type_Code);
    PARAMETER(PAR.LckBx_Invoice_Amount);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.LckBx_Invoice_Amount);
    PARAMETER('E');
    PARAMETER('O');
    PARAMETER(PAR.Bank_Code);
    PARAMETER(*ZERO);
    PARAMETER(DB1.Order_Number_Ref);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Salesperson_Code);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(PAR.LckBx_Deposit_Date);
    PARAMETER(PAR.LckBx_Deposit_Date);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Original_Inv_for_CB);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.A_R_Check_Number);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(JOB.*Job_time);
    PARAMETER('LOCKBOX');
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Record_Created_USR);
    {
     //?USER: Processing before Data update

     // PAR.Record Created        USR = CND.No
     PAR.Record_Created_USR = 'N';

     //?USER: Processing after Data update

     // PAR.Record Created        USR = CND.Yes
     PAR.Record_Created_USR = 'Y';

     //?E6933 DN  08/12/16 - Create A/R Header Ext record.
     // Call program Crt A/R Header Ext    XF.
     CALL PROGRAM(Crt A/R Header Ext    XF) ('PBX3XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Remaining_Balance_Due);
     PARAMETER(DB1.Order_Number_Ref);
     PARAMETER(DB1.Original_Inv_for_CB);

    }

    ENDDO;

    ENDDO;

    ENDDO;

    ENDIF;

    ENDDO;

    //?*** Stop after first A/R Header Record. ***
    QUIT;

   }

   ENDDO;

   ENDIF;

   // PAR.Save Invoice Number   USR = DB1.LckBx Invoice Number
   PAR.Save_Invoice_Number_USR = DB1.LckBx_Invoice_Number;

   // PAR.Save Adjustment Type  USR = DB1.Adjustment Type Code
   PAR.Save_Adjustment_Type_USR = DB1.Adjustment_Type_Code;

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDDO;

  ENDIF;

 }

 //?*** Create a Bank Deposit Record. ***
 EXECUTE FUNCTION(CRT AR A/R Bank DepositCR) TYPE(CRTOBJ) FILE(PDJ2CPP)          AC1333048;
 PARAMETER(PAR.Bank_Code);
 PARAMETER(DB1.LckBx_Deposit_Date);
 PARAMETER(DB1.LckBx_Deposit_Time);
 PARAMETER(DB1.LckBx_Deposit_Amount);
 PARAMETER(PAR.Total_Cash_Applied);
 PARAMETER('E');
 PARAMETER(*ZERO);
 PARAMETER(DB1.LckBx_Dpst_Nbr_of_Checks);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER('LOCKBOX');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


