// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBF6PFR
// ?Date: 14.08.2025 Time: 12:03:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

CASE;

IF NEW Order_Number;
EXECUTE FUNCTION(RTV MPR Bld Dwnld     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2052459;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(CUR.Actual_Shipped_Date);
PARAMETER(LCL.Header_Status);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(CUR.Date_of_Original_Entry);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Customer Type     RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1585599;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

}


//?1. Get Absorbed Freight
// LCL.Freight Rate USR = CON.*ZERO
LCL.Freight_Rate_USR = *ZERO;

CASE;

// IF LCL.Shipping Method is Prepaid
IF LCL.Shipping_Method = 'PR'/'PT';

EXECUTE FUNCTION(RTV Pricing: CFRTAB   IF) TYPE(EXCINTFUN)                      AC1846404;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(LCL.Pricing_Retrieved_Amount);
PARAMETER(LCL.Error_Return);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(DB1.Order_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848045;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Shipping_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Shipping Method is Prepaid
 IF LCL.Shipping_Method = 'PR'/'PT';

 //?R12926 DN 04/24/18-At Order level, get Absorbed Freight Rate from OH.
 EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Customer Absorbed Frieght is entered as Hundred weight, therefore
 //?Converting to Hundred weight is not necessary.
 // PAR.Pricing Retrieved Amount = PAR.Absorbed Freight Rate CWT
 PAR.Pricing_Retrieved_Amount = PAR.Absorbed_Freight_Rate_CWT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pricing Retrieved Amount = CON.*ZERO
 PAR.Pricing_Retrieved_Amount = *ZERO;

 ENDIF;

}


// LCL.Absorbed Freight Rate CWT = LCL.Pricing Retrieved Amount
LCL.Absorbed_Freight_Rate_CWT = LCL.Pricing_Retrieved_Amount;

// CUR.Freight Rate USR = LCL.Absorbed Freight Rate CWT
CUR.Freight_Rate_USR = LCL.Absorbed_Freight_Rate_CWT;

ENDIF;

// Print Order Number header format
PRINT Order Number header format;

ENDIF;

// SUPPRESSED PRINT Order Sequence Number header format

//?USER: On print of detail format

//?Unit price CWT  for CS and other
CASE;

// IF DB1.U/M - Base Price is Cases
IF DB1.U_M_Base_Price = 'CS';

CASE;

// IF DB1.Unit Weight Ordered U/M is Greater than zero
IF DB1.Unit_Weight_Ordered_U_M > *ZERO;

// Comp:Unit prc CWT for CS
CUR.Unit_Price = ( DB1.Unit_Price / DB1.Unit_Weight_Ordered_U_M ) * 100;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(LCL.Unit_Weight);
PARAMETER(CUR.Quality_Level);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Comp:Unit prc CWT for CS
CUR.Unit_Price = ( DB1.Unit_Price / LCL.Unit_Weight ) * 100;

ENDIF;

//?Unit price CWT  for CS and other
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Unit Price = DB1.Unit Price * CON.100 *
CUR.Unit_Price = DB1.Unit_Price * 100;

ENDIF;

//?2. Get Known Ledgered and Revenue Adjustments
//?** This will read all accrual codes that are setup for the
//?** ShipTo customer and accumulate the Accrual Rates.
//?** If Actual Shipped Date is zeros, use Requested Ship Date
CASE;

// IF DB1.Actual Shipped Date is entered
IF DB1.Actual_Shipped_Date <> *ZERO;

// WRK.Period Beginning Date = DB1.Actual Shipped Date
WRK.Period_Beginning_Date = DB1.Actual_Shipped_Date;

//?** If Actual Shipped Date is zeros, use Requested Ship Date
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Period Beginning Date = DB1.Requested Ship Date
WRK.Period_Beginning_Date = DB1.Requested_Ship_Date;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Cust Accr-MPR     PO
EXECUTE FUNCTION(Prt Cust Accr-MPR     PO) TYPE(PRTOBJ);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(1);
PARAMETER(WRK.Period_Beginning_Date);
PARAMETER(WRK.Period_Ending_Date);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(LCL.Pricing_Retrieved_Amount);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : PRT MPR Audit-ODA     PO
EXECUTE FUNCTION(PRT MPR Audit-ODA     PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Order_Sequence_Number);
PARAMETER(CUR.Order_Secondary_Line_Seq);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Order Sequence Number totals format

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Company Number totals format

