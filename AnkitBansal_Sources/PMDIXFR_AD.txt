// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMDIXFR
// ?Date: 14.08.2025 Time: 03:44:47
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.Palletize = PAR.Palletize
LCL.Palletize = PAR.Palletize;

CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// LCL.Palletize = CND.yes
LCL.Palletize = 'Y';

ENDIF;

// LCL.Print Pick Slip = PAR.Print Pick Slip
LCL.Print_Pick_Slip = PAR.Print_Pick_Slip;

CASE;

// IF PAR.Company Number is Missoula
IF PAR.Company_Number = 363;

// LCL.Print Pick Slip = CND.no
LCL.Print_Pick_Slip = 'N';

ENDIF;

EXECUTE FUNCTION(CRT Order Hdr-auto nbr CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1316826;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Cancel_Date);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Special_Instructions);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(PAR.Reason_Code);
PARAMETER(PAR.Order_in_Use);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Credit_Hold);
PARAMETER(PAR.Production_Hold);
PARAMETER(PAR.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(*BLANK);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Attach_to_Invoice_Number);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(PAR.Resell_Reference_Number);
PARAMETER(PAR.Special_Comment_1);
PARAMETER(PAR.Special_Comment_2);
PARAMETER(PAR.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Manager_Level_Code);
PARAMETER(PAR.VP_Level_Code);
PARAMETER(PAR.Attach_to_Order_Number);
PARAMETER(PAR.Reason_for_Price_Audit);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Modified_Flag);
PARAMETER(PAR.A_R_order_Value_Total);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Order_Certification_Flag);
PARAMETER(PAR.Invoice_Order_Value_Tot);
PARAMETER(PAR.Process_Sts_for_3C);
PARAMETER(PAR.Order_Conf_Fax_Sts);
PARAMETER(PAR.Manifest_Fax_Sts);
PARAMETER(PAR.Invoice_Fax_Sts);
PARAMETER(PAR.Transfer_in_Storage_Ind);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(PAR.Order_Emailed);
PARAMETER(PAR.Export_Docs_Go_w_Driver);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER(PAR.Broker_Order_Status);
PARAMETER(PAR.Air_Freight_Order);
PARAMETER(PAR.Order_Requires_Review);
PARAMETER(PAR.OH_Load_Plan_Ready);
PARAMETER(PAR.Export_USDA_Approved);
PARAMETER(PAR.HPB_Ship_to_Warehouse);
PARAMETER(PAR.OH_TF_Exempt_Code);
PARAMETER(PAR.OH_Appt_Confirmation_Dt);
PARAMETER(PAR.JPN_Invoice_Issuance_Date);
PARAMETER(PAR.Load_Actual_Shipped_Date);
PARAMETER(PAR.Load_BOL_Complete_Date);
PARAMETER(PAR.Load_Truck_Departure_Date);
PARAMETER(PAR.Maximum_Gross_Weight);
PARAMETER(PAR.Time_of_Original_Entry);
PARAMETER(PAR.OH_Appt_Confirmation_Tm);
PARAMETER(PAR.Load_BOL_Complete_Time);
PARAMETER(PAR.Load_Truck_Departure_Time);
PARAMETER(PAR.Act_Frt_Reference_Amount);
PARAMETER(PAR.Act_Non_Ref_Frt_Amount);
PARAMETER(PAR.OH_Fuel_Surcharge_Amount);
PARAMETER(PAR.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(PAR.OH_Total_Ref_Frt_Amt);
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Auto_Order_Numbering);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 //?Get/Update current next number
 CASE;

 // IF PAR.Auto Order Numbering? is yes
 IF PAR.Auto_Order_Numbering = 'Y';

 //?PKTR01 Update control company 000                 7/27/04
 EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Processing before Data update

  //?Assumes Credit memo numbers always automatically assigned
  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // PAR.USR Next Order Number = DB1.Next Order Number
  PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

  // DB1.Next Order Number = DB1.Next Order Number + CON.1
  DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?Check return code
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Check return code
 // IF *OTHERWISE
 IF *OTHERWISE;

 PGM.*Return_code = 'Y2U9999';

 RETURN;

 ENDIF;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 //?Get/Update invoice number if Credit or Debit memo
 CASE;

 // IF PAR.Invoice Number is Equal to zero
 IF PAR.Invoice_Number = *ZERO;

 // AND PAR.Billing Activity Type is Credit or Debit Memo
 AND PAR.Billing_Activity_Type = '2'/'3';

 //?02/18/05 PKD get from company 000
 EXECUTE FUNCTION(CHG Next Invoice Nbr   CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1329962;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Invoice_Number);
 {
  //?USER: Processing before Data update

  //?Assumes Invoice numbers always automatically assigned
  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // Call program Val Invoice Exists    XF.
  CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
  PARAMETER(DB1.Next_Invoice_Number);
  PARAMETER(LCL.Record_Found_USR);

  // DOW LCL.Record Found USR is Record Found
  DOW LCL.Record_Found_USR = 'Y';

  // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
  DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

  // Call program Val Invoice Exists    XF.
  CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
  PARAMETER(DB1.Next_Invoice_Number);
  PARAMETER(LCL.Record_Found_USR);

  ENDDO;

  // PAR.USR Next Invoice Number = DB1.Next Invoice Number
  PAR.USR_Next_Invoice_Number = DB1.Next_Invoice_Number;

  // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
  DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Invoice Suffix
 CASE;

 // IF PAR.Billing Activity Type is Credit Memo
 IF PAR.Billing_Activity_Type = '2';

 // DB1.Invoice Suffix = CND.Credit Memos
 DB1.Invoice_Suffix = 'CM';

 //?Invoice Suffix
 // IF PAR.Billing Activity Type is Debit Memo
 IF PAR.Billing_Activity_Type = '3';

 // DB1.Invoice Suffix = CND.Debit Memos
 DB1.Invoice_Suffix = 'DM';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Time_of_Original_Entry);

 //?USER: Processing if Data record already exists

 RETURN;

 //?USER: Processing if Data update error

 RETURN;

}


//?07/31/19 DN R15161-Set New OHE Fields & Commented Out CHGOBJ in OHE CRTOBJ
EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
PARAMETER(PAR.OHE_HPB_RIN_Price);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Spot_Buy);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Override_Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(PAR.Delivery_P_O_Number);
PARAMETER(PAR.OHE_Intended_for_ExportCC);
PARAMETER(LCL.OHE_EDI_943_Action);
PARAMETER(LCL.OHE_EDI_944_Action);
PARAMETER(LCL.OHE_EDI_940_Action);
PARAMETER(LCL.OHE_EDI_945_Action);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Appt_Confirmation_#);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
PARAMETER(*BLANK);
PARAMETER(PAR.Letter_of_Credit_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


