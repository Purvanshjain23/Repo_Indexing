// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWFPFR
// ?Date: 14.08.2025 Time: 12:05:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('TRF');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?***** Change Log and Comments
//?** 07/27/2006 LJB
//?** Add Salesperson # and Name to Top of page if passed in
//?** Add salesperson code as a column after zip code
//?** JRB 05/31/07 DLY029 Removed conditioning TOP Co Num - Always
//?passing in zero so will be ALL
//?*****
//?USER: Record selection processing

//?RMC 8/9/6 pass/use record sts from Customer file
//?SEL: Record Status
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

EXECUTE FUNCTION(RTV Record Sts         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1680719;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Skip not = par
CASE;

// IF WRK.Record Status NE PAR.Record Status
IF WRK.Record_Status <> PAR.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Company Number
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

CASE;

// IF DB1.Company Number NE PAR.Company Number
IF DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Salesperson
CASE;

// IF PAR.Salesperson Code 1 is entered
IF PAR.Salesperson_Code_1 <> *BLANK;

CASE;

// IF DB1.Sales Route Code NE PAR.Salesperson Code 1
IF DB1.Sales_Route_Code <> PAR.Salesperson_Code_1;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Ship To Customers only
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Ship To Flag       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1464722;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Customer_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Ship To Customer Flag is No Use as Ship to Cust
IF LCL.Ship_To_Customer_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Record Status = PAR.Record Status
TOP_Record_Status = PAR.Record_Status;

CASE;

// IF TOP.Record Status is Valid Entries
IF TOP_Record_Status = 'A'/'D'/'I';

// TOP.Condition Desc. 1  USR = Condition name of TOP.Record Status
TOP_Condition_Desc_1_USR = RTVCND(TOP_Record_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.*ALL
TOP_Condition_Desc_1_USR = *ALL;

ENDIF;

//?** Print Salesperson # and Name if passed in  07/27/2006 LJB
//?** Retrieve salesperson name if salesperson code is passed in
CASE;

// IF PAR.Salesperson Code 1 is not entered
IF PAR.Salesperson_Code_1 = *BLANK;

// TOP.Salesperson Name = CON.*ALL
TOP_Salesperson_Name = *ALL;

//?** Retrieve salesperson name if salesperson code is passed in
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Salesperson Code 1 = PAR.Salesperson Code 1
TOP_Salesperson_Code_1 = PAR.Salesperson_Code_1;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(TOP_Salesperson_Code_1);
PARAMETER(TOP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Retrieve Company Name if Company# is passed in
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// TOP.Company Name DRV = CON.*ALL
TOP_Company_Name_DRV = *ALL;

//?** Retrieve Company Name if Company# is passed in
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(PAR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// PAR.Output Only 1 USR = CND.no
PAR.Output_Only_1_USR = 'N';

// PAR.Output Only 2 USR = CND.no
PAR.Output_Only_2_USR = 'N';

EXECUTE FUNCTION(Rtv Plant Cos all     RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1809261;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.USR_Company_Number_1);
PARAMETER(LCL.USR_Company_Number_2);
PARAMETER(LCL.USR_Company_Number_3);
PARAMETER(LCL.USR_Company_Number_4);
PARAMETER(LCL.USR_Company_Number_5);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.USR Company Number 1 is Equal to zero
 IF PAR.USR_Company_Number_1 = *ZERO;

 // PAR.USR Company Number 1 = DB1.Company Number
 PAR.USR_Company_Number_1 = DB1.Company_Number;

 // IF PAR.USR Company Number 2 is Equal to zero
 IF PAR.USR_Company_Number_2 = *ZERO;

 // PAR.USR Company Number 2 = DB1.Company Number
 PAR.USR_Company_Number_2 = DB1.Company_Number;

 // IF PAR.USR Company Number 3 is Equal to zero
 IF PAR.USR_Company_Number_3 = *ZERO;

 // PAR.USR Company Number 3 = DB1.Company Number
 PAR.USR_Company_Number_3 = DB1.Company_Number;

 // IF PAR.USR Company Number 4 is Equal to zero
 IF PAR.USR_Company_Number_4 = *ZERO;

 // PAR.USR Company Number 4 = DB1.Company Number
 PAR.USR_Company_Number_4 = DB1.Company_Number;

 // IF PAR.USR Company Number 5 is Equal to zero
 IF PAR.USR_Company_Number_5 = *ZERO;

 // PAR.USR Company Number 5 = DB1.Company Number
 PAR.USR_Company_Number_5 = DB1.Company_Number;

 ENDIF;

}


// TOP.USR Company Number 1 = LCL.USR Company Number 1
TOP_USR_Company_Number_1 = LCL.USR_Company_Number_1;

// TOP.USR Company Number 2 = LCL.USR Company Number 2
TOP_USR_Company_Number_2 = LCL.USR_Company_Number_2;

// TOP.Plant Company 1 = LCL.USR Company Number 1
TOP_Plant_Company_1 = LCL.USR_Company_Number_1;

// TOP.Plant Company 2 = LCL.USR Company Number 2
TOP_Plant_Company_2 = LCL.USR_Company_Number_2;

// TOP.Update Exception Status = PAR.Update Exception Status
TOP_Update_Exception_Status = PAR.Update_Exception_Status;

// TOP.Condition Desc. 2  USR = Condition name of TOP.Update Exception Status
TOP_Condition_Desc_2_USR = RTVCND(TOP_Update_Exception_Status);

// TOP.Days = PAR.Days
TOP_Days = PAR.Days;

//?USER: Print required level headings

// SUPPRESSED PRINT Ship To Customer header format

// SUPPRESSED PRINT Company Number header format

//?USER: On print of detail format

//?** Condition selection criteria not to print after 1st page
// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

//?Last Shipment Date
CASE;

// IF CUR.Absorbed Freight Rate CWT is Entered
IF CUR.Absorbed_Freight_Rate_CWT <> *ZERO;

EXECUTE FUNCTION(Rtv Last Shipment     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1889557;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Scheduled Ship Date is not entered
IF LCL.Scheduled_Ship_Date = *ZERO;

EXECUTE FUNCTION(Rtv Last Shipment     RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1889573;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Type - Sales is Regular Order
 IF DB1.Order_Type_Sales = 'OR';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

//?Last Shipment Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Scheduled Ship Date = CON.*ZERO
LCL.Scheduled_Ship_Date = *ZERO;

ENDIF;

//?DURATION
CASE;

// IF LCL.Scheduled Ship Date is entered
IF LCL.Scheduled_Ship_Date <> *ZERO;

// AND LCL.Scheduled Ship Date LT JOB.*Job date
AND LCL.Scheduled_Ship_Date < JOB.*Job_date;

// LCL.Days = JOB.*Job date - LCL.Scheduled Ship Date *DAYS
LCL.Days = DURATION(JOB.*Job_date LCL.Scheduled_Ship_Date 'DY' 1111111 'NONE' 'N' 1);

//?DURATION
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = CON.*ZERO
LCL.Days = *ZERO;

ENDIF;

CASE;

// IF CUR.Company Number EQ LCL.USR Company Number 1
IF CUR.Company_Number = LCL.USR_Company_Number_1;

// NXT.Absorbed Freight Rate = CUR.Absorbed Freight Rate
NXT.Absorbed_Freight_Rate_CWT = CUR.Absorbed_Freight_Rate_CWT;

// NXT.Usr Date 1 = LCL.Scheduled Ship Date
NXT.Usr_Date_1 = LCL.Scheduled_Ship_Date;

// NXT.Days to Pay 1 USR = LCL.Days
NXT.Days_to_Pay_1_USR = LCL.Days;

// IF CUR.Company Number EQ LCL.USR Company Number 2
IF CUR.Company_Number = LCL.USR_Company_Number_2;

// NXT.Usr Abs Freight Rate = CUR.Absorbed Freight Rate
NXT.Usr_Abs_Freight_Rate = CUR.Absorbed_Freight_Rate_CWT;

// NXT.Usr Date 2 = LCL.Scheduled Ship Date
NXT.Usr_Date_2 = LCL.Scheduled_Ship_Date;

// NXT.Days to Pay 2 USR = LCL.Days
NXT.Days_to_Pay_2_USR = LCL.Days;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Company Number totals format

CASE;

IF NEW Ship_To_Customer;
EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Customer_Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(CUR.City);
PARAMETER(CUR.State_Code);
PARAMETER(CUR.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.Days to Pay 1 USR GE PAR.Days
IF CUR.Days_to_Pay_1_USR >= PAR.Days;

// OR CUR.Days to Pay 2 USR GE PAR.Days
OR CUR.Days_to_Pay_2_USR >= PAR.Days;

// PGM.*Print format = CND.Print format
PGM.*Print_format = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

CASE;

// IF PAR.Update Exception Status is yes
IF PAR.Update_Exception_Status = 'Y';

//?Company 1
CASE;

// IF LCL.USR Company Number 1 is not equal to zero
IF LCL.USR_Company_Number_1 <> *ZERO;

CASE;

// IF CUR.Days to Pay 1 USR GE PAR.Days
IF CUR.Days_to_Pay_1_USR >= PAR.Days;

//?UPDATE
EXECUTE FUNCTION(Chg ABS Frt           CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC1774712;
PARAMETER(LCL.USR_Company_Number_1);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

//?Company 2
CASE;

// IF LCL.USR Company Number 2 is not equal to zero
IF LCL.USR_Company_Number_2 <> *ZERO;

CASE;

// IF CUR.Days to Pay 2 USR GE PAR.Days
IF CUR.Days_to_Pay_2_USR >= PAR.Days;

//?UPDATE
EXECUTE FUNCTION(Chg ABS Frt           CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC1774712;
PARAMETER(LCL.USR_Company_Number_2);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

