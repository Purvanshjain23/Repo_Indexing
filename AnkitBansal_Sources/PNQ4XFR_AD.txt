// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNQ4XFR
// ?Date: 14.08.2025 Time: 03:46:14
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?----------- CIMSLV: Customer Item Muscle Value
//?CALC: Item Muscle Value
EXECUTE FUNCTION(Clc Muscle Value      RT) TYPE(RTVOBJ) FILE(PNF9REP)           AC1982237;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Item_Code);
PARAMETER('M');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Pricing_Retrieved_Amount);
PARAMETER(PAR.Event_Called_From);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.OD_Market_Begin_Date);
PARAMETER(PAR.OD_Market_Ending_Date);
PARAMETER(PAR.Error_Return);
{
 //?USER: Process Data record

 //?--- Muscle Value ---
 //?Muscle Value = ((x1  + x2) * (x3 / x4) - x5) / (x5 / x6)
 //?((BseMktPrice + PrmDed) * (%ofMkt / 100) - CrdVal) / (Yld / 100)
 //?RTV: Base Market Price
 CASE;

 // IF DB1.CIFD Commodity Market is Entered
 IF DB1.CIFD_Commodity_Market <> *BLANK;

 // AND DB1.CIFD Commodity Price Grp is Not Blank
 AND DB1.CIFD_Commodity_Price_Grp <> *BLANK;

 //?--- Retrieve Base Market Price
 CASE;

 // IF PAR.Event Called From is All Values
 IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

 //?--- Date Method Code Entered
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // Call program CLC Date Method        XF.
 CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Price_Adjustment_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(DB1.CIFD_Commodity_Price_Grp);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Item_Code);

 //?--- Date Method Code Entered
 // IF PAR.OD Market Begin Date is Entered
 IF PAR.OD_Market_Begin_Date <> *ZERO;

 // AND PAR.OD Market Ending Date is Entered
 AND PAR.OD_Market_Ending_Date <> *ZERO;

 EXECUTE FUNCTION(Rtv Date Range Avg Cd RT) TYPE(RTVOBJ) FILE(PDIPREP)           AC1998797;
 PARAMETER('O');
 PARAMETER('R');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Date_Method_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Call program CLC Date Method        XF.
 CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Date_Method_Code);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Price_Adjustment_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(DB1.CIFD_Commodity_Price_Grp);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Item_Code);

 //?--- Date Method Code Entered
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*** Load Date used for calculation (to retrieve Market date)
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Date Used for Calculation = PAR.Market Pricing Date
 PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

 //?*** Load Date used for calculation (to retrieve Market date)
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Date Used for Calculation is not entered
 IF PAR.Date_Used_for_Calculation = *ZERO;

 CASE;

 // IF PAR.Actual Shipped Date is entered
 IF PAR.Actual_Shipped_Date <> *ZERO;

 // PAR.Date Used for Calculation = PAR.Actual Shipped Date
 PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Date Used for Calculation = PAR.Requested Ship Date
 PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Retrieve Base Market Price
 CASE;

 // IF DB1.CIFD Commodity Market is Entered
 IF DB1.CIFD_Commodity_Market <> *BLANK;

 // AND DB1.CIFD Commodity Price Grp is Not Blank
 AND DB1.CIFD_Commodity_Price_Grp <> *BLANK;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(DB1.CIFD_Commodity_Market);
 PARAMETER(DB1.CIFD_Commodity_Price_Grp);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Price_Adjustment_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?Flag as Unpriced if Price Date doesn't match Market date entered
 CASE;

 // IF PAR.Pricing Date Used NE PAR.Date Used for Calculation
 IF PAR.Pricing_Date_Used <> PAR.Date_Used_for_Calculation;

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 //?If no pricing record was found then flag as pricing error.
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Return = CND.MKTPRC Error
 PAR.Error_Return = 'MKT';

 ENDIF;

 ENDIF;

 //?If record not found use default commodity market from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(RTV Item Pricing Info  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1412083;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.UOM_Primary);
 PARAMETER(NLL.Conversion_Factor_1);
 PARAMETER(NLL.Operation_Factor_1);
 PARAMETER(NLL.UOM_Second);
 PARAMETER(NLL.Conversion_Factor_2);
 PARAMETER(NLL.Operation_Factor_2);
 PARAMETER(NLL.UOM_Third);
 PARAMETER(NLL.UOM_Pricing);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Production_Date_Control);
 PARAMETER(NLL.Catch_Weight_Status);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.CIFD Commodity Market NE PAR.Default Commod Mark basis
 IF DB1.CIFD_Commodity_Market <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Price_Adjustment_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?RTV: Base Market Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Price Adjustment Amount = CON.*ZERO
 PAR.Price_Adjustment_Amount = *ZERO;

 ENDIF;

 // Call program RTV Pricing: CICRDV   XF.
 CALL PROGRAM(RTV Pricing: CICRDV   XF) ('PNQXXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(LCL.Componant_Price);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CICRDV Error
 PAR.Error_Return = 'CRD';

 //?Error Routine - Exit if Error
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Muscle Value
 LCL.Numeric_Value_1_USR = ( ( ( PAR.Price_Adjustment_Amount
 + DB1.CIFD_Market_Prem_Deduct ) * ( DB1.CIFD_Percent_of_Market / 100 'H' ) 'H' )                  +
 - LCL.Componant_Price ) / ( DB1.CIFD_Yield_Percent / 100 'H' ) 'H';

 // PAR.Price Adjustment Amount = LCL.Numeric Value 1 USR * CON.1 *Rounded
 PAR.Price_Adjustment_Amount = LCL.Numeric_Value_1_USR * 1 'H';

 //?--- Total Muscle Value ---
 // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + PAR.Price Adjustment Amount
 PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount
 + PAR.Price_Adjustment_Amount;

 ENDIF;

}


//?------------------------------------------------------
//?Convert Price to CWT
CASE;

// IF PAR.Pricing Retrieved Amount is Not Zeros
IF PAR.Pricing_Retrieved_Amount <> *ZERO;

// Call program CLC Convert Price - CW XF.
CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Pricing_Retrieved_Amount);
PARAMETER(PAR.Price_Adjustment_Amount);

// PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

ENDIF;

