// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKGHE1R
// ?Date: 14.08.2025 Time: 02:49:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?History
DO;

//?E004069 RMC 6/11/15 Added Debit Note Reason, -Contra
//?  9/27/16  condition on Live with M3 = Parallel/Yes
EXECUTE FUNCTION(HPE053) TYPE(EXCINTFUN)                                        AB1188437;
{
 //?Execute internal function

 //?This project allows Insurance Reimbursements to be calculated
 //?in the payment processing routines.
 //?Special Notes:
 //?D/A :  Added new fields to specify which class to apply the d/a,
 //?and an Insurance Deduction status.
 //?Producer D/A : added accept /decline dates for the d/a codes.
 //?Programs look at the Rcd Sts to determine if the code is in affect.
}


//? 011097    slm chg  Insurance tran was not deisplay it was
//?                    a insurance tran to the user
EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// WRK.Company Number USR = CVTVAR(PAR.CC Company Number)
WRK.Company_Number_USR = CVTVAR(PAR.CC_Company_Number);

//?E3580 RMC 09/27/16 - M3 Vendor interfaces changes- condition screen flds
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(WRK.Company_Number_USR);
PARAMETER('M3VEND');
PARAMETER(PAR.Live_with_M3_USR);

//?USER: Initialize key screen

CASE;

// IF PAR.DED D/A Code EQ WRK.Blank USR
IF PAR.DED_D_A_Code = WRK.Blank_USR;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

// DTL.DED Type = CND.Producer
DTL.DED_Type = 'P';

// DTL.DED Accrual Only = CND.No
DTL.DED_Accrual_Only = 'N';

// DTL.DED Affect Gross Price = CND.No
DTL.DED_Reserve_Account_Upd = 'N';

// DTL.Insurance Deduction = CND.No
DTL.DED_Insurance_Deduction = 'N';

// DTL.DED Accrual Only = CND.No
DTL.DED_Accrual_Only = 'N';

// DTL.DED Commission Deduction = CND.No
DTL.DED_Commission_Deduction = 'N';

//?USER: Initialize detail screen (existing record)

// DTL.Fixed/Variable Desc Usr = Condition name of DB1.DED Fix/Var/Sys
DTL.Fixed_Variable_Desc_Usr = RTVCND(DB1.DED_Fix_Var_Sys);

// DTL.Fixed UOM Desc Usr = Condition name of DB1.DED Fixed UOM
DTL.Fixed_UOM_Desc_Usr = RTVCND(DB1.DED_Fixed_UOM);

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

// DTL.Plant Trans Usr = Condition name of DTL.DED Plant Deduction
DTL.Plant_Trans_Usr = RTVCND(DTL.DED_Plant_Deduction);

// DTL.Description 30 USR = Condition name of DB1.DED Prdcr Special Proc
DTL.Description_30_USR = RTVCND(DB1.DED_Prdcr_Special_Proc);

// DTL.@Description 16 Usr = Condition name of DB1.Insurance Deduction
DTL.@Description_16_Usr = RTVCND(DB1.DED_Insurance_Deduction);

// DTL.Accurals Description Usr = Condition name of DB1.DED Accrual Only
DTL.Accurals_Description_Usr = RTVCND(DB1.DED_Accrual_Only);

// DTL.Buy Order Type Desc USR = Condition name of DB1.DED Valid BO Type
DTL.Buy_Order_Type_Desc_USR = RTVCND(DB1.DED_Valid_BO_Type);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?First Gl Code
EXECUTE FUNCTION(Rtv HPE G/L Accounts  RT) TYPE(RTVOBJ) FILE(PKCWREP)           AB1145486;
PARAMETER(WRK.CC_Company_Number);
PARAMETER(DTL.DED_Gl_Code);
PARAMETER(DTL.Gl_Description_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Contra Gl Code
EXECUTE FUNCTION(Rtv HPE G/L Accounts  RT) TYPE(RTVOBJ) FILE(PKCWREP)           AB1145486;
PARAMETER(WRK.CC_Company_Number);
PARAMETER(DTL.DED_Contra_Gl_Code);
PARAMETER(DTL.Contra_Gl_Desc_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

//?For a fixed D/A code, the UOM and AMT
//? GL Code, (+/-). are required
//?For a system D/A code.
//? GL Code, (+/-). are required
//?For a variable D/A code
//? GL Code / The variable information is stored in the
//?  in the Producer STD D/A
//?Validate uom,amount for fixed/var/system
CASE;

// IF DTL.DED Fixed/Variable is Fixed
IF DTL.DED_Fix_Var_Sys = 'F';

CASE;

// IF DTL.DED Fixed UOM EQ WRK.Blank USR
IF DTL.DED_Fixed_UOM = WRK.Blank_USR;

// Send error message - 'UOM is required for a fixed D/A code.'
ERROR(PRK0195);
MSGPARM(DTL.DED_Fixed_UOM);

ENDIF;

CASE;

// IF DTL.DED Fixed Unit Amt EQ WRK.Zero USR
IF DTL.DED_Fixed_Unit_Amt = WRK.Zero_USR;

// Send error message - 'Amt is required for a fixed D/A code.'
ERROR(PRK0196);
MSGPARM(DTL.DED_Fixed_Unit_Amt);

ENDIF;

CASE;

// IF DTL.DED Fixed Unit Amt Sign EQ WRK.Blank USR
IF DTL.DED_Fixed_Unit_Amt_Sign = WRK.Blank_USR;

// Send error message - 'Amt Sign is required for D/A code.'
ERROR(PRK0410);
MSGPARM(DTL.DED_Fixed_Unit_Amt_Sign);

ENDIF;

//?Validate uom,amount for fixed/var/system
// IF *OTHERWISE
IF *OTHERWISE;

//?For a System: user class *USER cannot create & (+/-) is required
//?System
CASE;

// IF DTL.DED Fix/Var/Sys is System
IF DTL.DED_Fix_Var_Sys = 'S';

//?comment out until this can be tested more
//?comment out until this can be tested more
ENDIF;

//?For a variable D/A code, or System, the UOM and AMT are not allowed.
CASE;

// IF DTL.DED Fixed UOM NE WRK.Blank USR
IF DTL.DED_Fixed_UOM <> WRK.Blank_USR;

// Send error message - 'This UOM is only allowed for Fixed D/A Codes.'
ERROR(PRK0197);

ENDIF;

CASE;

// IF DTL.DED Fixed Unit Amt NE WRK.Zero USR
IF DTL.DED_Fixed_Unit_Amt <> WRK.Zero_USR;

// Send error message - 'This amount is only allowed if this is a Fixed D/A code.'
ERROR(PRK0198);
MSGPARM(DTL.DED_Fixed_Unit_Amt);

ENDIF;

ENDIF;

//?VALIDATE UOM FOR ACCRUALS
CASE;

// IF DTL.DED Fixed UOM is Dead Head UOM
IF DTL.DED_Fixed_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

// AND DTL.DED Accrual Only is Yes
AND DTL.DED_Accrual_Only = 'Y';

// Send error message - 'Accrual & Dead Hd UOM Err'
ERROR(PRK0696);
MSGPARM(DTL.DED_Fixed_UOM);

ENDIF;

// DTL.Fixed/Variable Desc Usr = Condition name of DTL.DED Fix/Var/Sys
DTL.Fixed_Variable_Desc_Usr = RTVCND(DTL.DED_Fix_Var_Sys);

// DTL.Fixed UOM Desc Usr = Condition name of DTL.DED Fixed UOM
DTL.Fixed_UOM_Desc_Usr = RTVCND(DTL.DED_Fixed_UOM);

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

// DTL.Plant Trans Usr = Condition name of DTL.DED Plant Deduction
DTL.Plant_Trans_Usr = RTVCND(DTL.DED_Plant_Deduction);

// DTL.Description 30 USR = Condition name of DTL.DED Prdcr Special Proc
DTL.Description_30_USR = RTVCND(DTL.DED_Prdcr_Special_Proc);

// DTL.@Description 16 Usr = Condition name of DTL.Insurance Deduction
DTL.@Description_16_Usr = RTVCND(DTL.DED_Insurance_Deduction);

// DTL.Accurals Description Usr = Condition name of DTL.DED Accrual Only
DTL.Accurals_Description_Usr = RTVCND(DTL.DED_Accrual_Only);

// DTL.Buy Order Type Desc USR = Condition name of DTL.DED Valid BO Type
DTL.Buy_Order_Type_Desc_USR = RTVCND(DTL.DED_Valid_BO_Type);

//?G/L special processing
DO;

//?First Gl Code
DO;

//?Sel:  GL Code
CASE;

// IF PGM.*Cursor field <IS> DTL.DED Gl Code
IF PGM.*Cursor_field = DTL.DED_Gl_Code;

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// Call program Sel G/L Accounts      SR.
CALL PROGRAM(Sel G/L Accounts      SR) ('PKVCSRR');
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DTL.DED_Gl_Code);
PARAMETER(DTL.Gl_Description_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER('HPE');
PARAMETER(WRK.CGL_Account_Category_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.DED Gl Code EQ WRK.Blank USR
IF DTL.DED_Gl_Code = WRK.Blank_USR;

// Call program Sel G/L Accounts      SR.
CALL PROGRAM(Sel G/L Accounts      SR) ('PKVCSRR');
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DTL.DED_Gl_Code);
PARAMETER(DTL.Gl_Description_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER('HPE');
PARAMETER(WRK.CGL_Account_Category_Code);

// IF DTL.DED Gl Code NE WRK.Blank USR
IF DTL.DED_Gl_Code <> WRK.Blank_USR;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv HPE G/L Accounts  RT) TYPE(RTVOBJ) FILE(PKCWREP)           AB1145486;
PARAMETER(WRK.CC_Company_Number);
PARAMETER(DTL.DED_Gl_Code);
PARAMETER(DTL.Gl_Description_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Invalid G/L Code'
ERROR(PRK0409);
MSGPARM(DTL.DED_Gl_Code);

ENDIF;

ENDIF;

ENDDO;

//?Contra Gl Code
DO;

CASE;

// IF PGM.*Cursor field <IS> DTL.DED Contra Gl Code
IF PGM.*Cursor_field = DTL.DED_Contra_Gl_Code;

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// Call program Sel G/L Accounts      SR.
CALL PROGRAM(Sel G/L Accounts      SR) ('PKVCSRR');
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DTL.DED_Contra_Gl_Code);
PARAMETER(DTL.Contra_Gl_Desc_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER('HPE');
PARAMETER(WRK.CGL_Account_Category_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.DED Contra Gl Code NE WRK.Blank USR
IF DTL.DED_Contra_Gl_Code <> WRK.Blank_USR;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv HPE G/L Accounts  RT) TYPE(RTVOBJ) FILE(PKCWREP)           AB1145486;
PARAMETER(WRK.CC_Company_Number);
PARAMETER(DTL.DED_Contra_Gl_Code);
PARAMETER(DTL.Contra_Gl_Desc_Usr);
PARAMETER(WRK.CGl_GL_Acct_ID);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Invalid Contra G/L Code'
ERROR(PRK0564);
MSGPARM(DTL.DED_Contra_Gl_Code);

ENDIF;

ENDIF;

ENDDO;

ENDDO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?USER: Validate detail screen relations

// DTL.Condition Name USR = Condition name of DTL.DED Reserve Account Upd
DTL.Condition_Name_USR = RTVCND(DTL.DED_Reserve_Account_Upd);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt D/A               CR) TYPE(CRTOBJ) FILE(PKBBREP)           AB1103474;
PARAMETER(DTL.DED_D_A_Code);
PARAMETER(DTL.DED_Description);
PARAMETER(DTL.DED_Fix_Var_Sys);
PARAMETER(DTL.DED_Fixed_UOM);
PARAMETER(DTL.DED_Fixed_Unit_Amt);
PARAMETER(DTL.DED_Fixed_Unit_Amt_Sign);
PARAMETER(DTL.DED_Type);
PARAMETER(DTL.DED_Plant_Deduction);
PARAMETER(DTL.DED_Gl_Code);
PARAMETER(DTL.DED_Contra_Gl_Code);
PARAMETER(DTL.DED_Ranking);
PARAMETER(DTL.DED_Include_Resale);
PARAMETER(DTL.DED_Include_Subject);
PARAMETER(DTL.DED_Include_Market);
PARAMETER(DTL.DED_Accrual_Only);
PARAMETER(DTL.DED_Reserve_Account_Upd);
PARAMETER(DTL.DED_Prdcr_Special_Proc);
PARAMETER(DTL.DED_Insurance_Deduction);
PARAMETER(DTL.DED_Valid_BO_Type);
PARAMETER(DTL.DED_Commission_Deduction);
PARAMETER(DTL.DED_Deferred_Payment);
PARAMETER(DTL.DED_M3_Debit_Note_Reason);
PARAMETER(DTL.DED_M3_Debt_Nt_Rsn_Contra);
PARAMETER(DTL.DED_Unused_Txt_1);
PARAMETER(DTL.DED_Unused_Txt_2);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg D/A               CH) TYPE(CHGOBJ) FILE(PKBBREP)           AB1103475;
PARAMETER(DTL.DED_D_A_Code);
PARAMETER(DTL.DED_Description);
PARAMETER(DTL.DED_Fix_Var_Sys);
PARAMETER(DTL.DED_Fixed_UOM);
PARAMETER(DTL.DED_Fixed_Unit_Amt);
PARAMETER(DTL.DED_Fixed_Unit_Amt_Sign);
PARAMETER(DTL.DED_Type);
PARAMETER(DTL.DED_Plant_Deduction);
PARAMETER(DTL.DED_Gl_Code);
PARAMETER(DTL.DED_Contra_Gl_Code);
PARAMETER(DTL.DED_Ranking);
PARAMETER(DTL.DED_Include_Resale);
PARAMETER(DTL.DED_Include_Subject);
PARAMETER(DTL.DED_Include_Market);
PARAMETER(DTL.DED_Accrual_Only);
PARAMETER(DTL.DED_Reserve_Account_Upd);
PARAMETER(DTL.DED_Prdcr_Special_Proc);
PARAMETER(DTL.DED_Insurance_Deduction);
PARAMETER(DTL.DED_Valid_BO_Type);
PARAMETER(DTL.DED_Commission_Deduction);
PARAMETER(DTL.DED_Deferred_Payment);
PARAMETER(DTL.DED_M3_Debit_Note_Reason);
PARAMETER(DTL.DED_M3_Debt_Nt_Rsn_Contra);
PARAMETER(DTL.DED_Unused_Txt_1);
PARAMETER(DTL.DED_Unused_Txt_2);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

