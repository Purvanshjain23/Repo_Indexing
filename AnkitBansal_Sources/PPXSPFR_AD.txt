// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPXSPFR
// ?Date: 14.08.2025 Time: 12:06:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?** Set null report processing flag
// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?Either use actual ship date or job date for  selection on date
CASE;

// IF PAR.Actual Shipped Date is entered
IF PAR.Actual_Shipped_Date <> *ZERO;

// WRK.From Date             USR = PAR.Actual Shipped Date
WRK.From_Date_USR = PAR.Actual_Shipped_Date;

//?Either use actual ship date or job date for  selection on date
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.From Date             USR = JOB.*Job date
WRK.From_Date_USR = JOB.*Job_date;

ENDIF;

//?USER: Record selection processing

// Call program Vry Fees & Payments PrcXF.
CALL PROGRAM(Vry Fees & Payments PrcXF) ('PMHPXFR');
PARAMETER(DB1.Company_Number);
PARAMETER('FEEPAYPROC');
PARAMETER(LCL.Fees_Payments_Prc_Usr);

//?** If Order Number is entered, then match is required.
CASE;

// IF PAR.Order Number is Not equal to zeros
IF PAR.Order_Number <> *ZERO;

// AND DB1.Order Number NE PAR.Order Number
AND DB1.Order_Number <> PAR.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

//?** If ASD is entered, then match of *LE 7 days out is required.
CASE;

// IF PAR.Actual Shipped Date is entered
IF PAR.Actual_Shipped_Date <> *ZERO;

// LCL.Date Out = JOB.*Job date + CON.7 *DAYS
LCL.Date_Out = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

CASE;

// IF DB1.Actual Shipped Date GT PAR.Actual Shipped Date
IF DB1.Actual_Shipped_Date > PAR.Actual_Shipped_Date;

// AND DB1.Actual Shipped Date LT LCL.Date Out
AND DB1.Actual_Shipped_Date < LCL.Date_Out;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC 6/21/06 pass db1.actual shipped date in lieu of wrk.actual shipped dt
ENDIF;

ENDIF;

//?** Fees & Payment = N or blank do not valdate Revenue dates
//?Selection of Revenue dates if IC
CASE;

// IF LCL.Fees & Payments Prc Usr is *No/Blank
IF LCL.Fees_Payments_Prc_Usr = *BLANK/'N';

//?Selection of Revenue dates if IC
// IF *OTHERWISE
IF *OTHERWISE;

//?03/24/17 DN R9700-Commented out '** If Inter-Company' & changed below.
//?03/24/17 DN R9700-If IC then ASD must be within Revenue date range.
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

CASE;

// IF LCL.Fees & Payments Prc Usr is Yes
IF LCL.Fees_Payments_Prc_Usr = 'Y';

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(WRK.From_Date_USR);
PARAMETER(WRK.To_Date_USR);

//?Check Cmp 360/960 Current Week From/To Dates.
CASE;

// IF DB1.Actual Shipped Date GT WRK.To Date               USR
IF DB1.Actual_Shipped_Date > WRK.To_Date_USR;

// OR DB1.Actual Shipped Date LT WRK.From Date             USR
OR DB1.Actual_Shipped_Date < WRK.From_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

// IF LCL.Fees & Payments Prc Usr is Inter-Company
IF LCL.Fees_Payments_Prc_Usr = 'I';

EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
PARAMETER(DB1.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Date_Sat_USR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Out = DB1.Post to G/L Date
 PAR.Date_Out = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.Date_Sat_USR);
PARAMETER(LCL.Date_Sun_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


//?Check Cmp 440 Prior Week From/To Dates.
CASE;

// IF DB1.Actual Shipped Date GT LCL.Date Sat USR
IF DB1.Actual_Shipped_Date > LCL.Date_Sat_USR;

// OR DB1.Actual Shipped Date LT LCL.Date Sun USR
OR DB1.Actual_Shipped_Date < LCL.Date_Sun_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?** If Load ID is entered, then match is required.
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

// AND DB1.Load ID NE PAR.Load ID
AND DB1.Load_ID <> PAR.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

// PAR.Print Pre-Inv/Exception = CND.*BLANK
PAR.Print_Pre_Inv_Exception = *BLANK;

//?05/01/18 DN R12926-Removed Absorbed Freight Rate CWT Parm on PPX8XFR.
// Call program PRT Invc Excpt Select  XF.
CALL PROGRAM(PRT Invc Excpt Select  XF) ('PPX8XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DB1.Customer_Purchase_Order_#);
PARAMETER(DB1.Order_Date);
PARAMETER(DB1.Actual_Shipped_Date);
PARAMETER(DB1.Header_Status);
PARAMETER(DB1.Header_Status_Last);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER(DB1.Load_ID);
PARAMETER(DB1.Price_Audit);
PARAMETER(DB1.Price_Status);
PARAMETER(DB1.Shipping_Method);
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(DB1.Event_Code);
PARAMETER(DB1.Billing_Activity_Type);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Update_Exception_Status);
PARAMETER(PGM.*Record_selected);
PARAMETER(PAR.Print_Pre_Inv_Exception);
PARAMETER(PAR.Departure_Sts_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Manual_Prc_Err_Sts_USR);
PARAMETER(LCL.Projected_Market_Price);
PARAMETER(PAR.Average_Ship_Wgt_Err_USR);
PARAMETER(PAR.InterCo_Price_Err_USR);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Order_Status);
PARAMETER(LCL.GTIN_Error_Sts_USR);
PARAMETER(LCL.GTIN_Error_Item_Code_USR);
PARAMETER(PAR.Item_Code_USR);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Price_Overage_Override);
PARAMETER(PAR.Process_Cust_Types_Usr);
PARAMETER(PAR.USR_Check_Y_N_Status);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Skip if not flagged to print on the exception report.
CASE;

// IF PAR.Print Pre-Inv/Exception is Print on Exception
IF PAR.Print_Pre_Inv_Exception = 'E';

//?** If printing invoice for one order and there is an error, set flag
//?** to Yes and pass back to skip the posting process.
//?** If Order Number is entered and there's an error, set flag to Yes
CASE;

// IF PAR.Order Number is Not equal to zeros
IF PAR.Order_Number <> *ZERO;

// PAR.USR Status (Y/N) = CND.yes
PAR.USR_Status_Y_N = 'Y';

ENDIF;

//?** Skip if not flagged to print on the exception report.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// AND DB1.Event Code is 03 Picked
AND DB1.Event_Code = '03';

//?Final rules define on 7/30/2009
//?Per Ashley if the Order Status is 'A' available but
//?there is a Truck Depart date & time
//?these are the ones that she wants
//?7/30/2009 selection on 03 based on truck delivery date
//?actual ship date is zero on these records
//?then it was discussed that
//?tom dye does not want the shd ship date to be changed by the users
//?in some cases there are multiple orders for a load which would have
//?different truck delivery date -- users are currently changing these
//?records, but may not be doing so soon enough
//?if these records do appear on the invoice exception on Monday
//?then Jami M will manually stop the invoice run.
//?this will trigger Tom & Ashley to get these order truck dlv date chg
//?if invoice must go this order is at the stage of 03
//?and allowing it to print on the report will not hurt anything
//?but currently going to see how the user can correct the date.
//?Trk Deprt Dt/Tm from Ld Hdr.  Remove live with tpm check
EXECUTE FUNCTION(Rtv Sts/BOLDt/DptDtTm RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1564871;
PARAMETER(DB1.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine if print when Available but truck has departed
CASE;

// IF DB1.Header Status is Available
IF DB1.Header_Status = 'A';

// AND LCL.Truck Departure Date is Entered
AND LCL.Truck_Departure_Date <> *ZERO;

// AND LCL.Truck Departure Date LE WRK.From Date             USR
AND LCL.Truck_Departure_Date <= WRK.From_Date_USR;

//?Want to print these event 03 with this shipping error
// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Determine if print when Available but truck has departed
// IF *OTHERWISE
IF *OTHERWISE;

QUIT;

ENDIF;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Description Usr - 50 = CON.*** SALES ORDERS ONLY ***
TOP_Description_Usr_50 = '*** SALES ORDERS ONLY ***';

//?Last part of title
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- Inter-Co Customers,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- Inter-Co Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is 3rd Party Customer(s)
IF PAR.Process_Cust_Types_Usr = 'TP';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- 3rd Party Customers,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- 3rd Party Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is All Customers
IF PAR.Process_Cust_Types_Usr = 'BT';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- *All Customers,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- *All Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is Selection by Order/Load
IF PAR.Process_Cust_Types_Usr = 'OR';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- Selection by Order/Load,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- Selection by Order/Load' (1);

ENDIF;

//?USER: On print of first page format

//?04/04/17 DN R9700-Get Inter Company Group description.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(PAR.Company_Number);
PARAMETER('ICPRGROUP');
PARAMETER(X1PG_Inter_Company_Grp_Dsc_USR);
PARAMETER(NLL.System_Value_Alpha);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

// 1PG.Load ID = PAR.Load ID
X1PG_Load_ID = PAR.Load_ID;

// 1PG.Order Number = PAR.Order Number
X1PG_Order_Number = PAR.Order_Number;

// 1PG.Actual Shipped Date = PAR.Actual Shipped Date
X1PG_Actual_Shipped_Date = PAR.Actual_Shipped_Date;

//?** if IC - put the Revenue To Date into the print field
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// 1PG.Actual Shipped Date = WRK.To Date               USR
X1PG_Actual_Shipped_Date = WRK.To_Date_USR;

// 1PG.USR Desc. 10 = CON.*BLANK
X1PG_USR_Desc_10 = *BLANK;

//?** if IC - put the Revenue To Date into the print field
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Order Number is Equal to zeros
IF PAR.Order_Number = *ZERO;

// AND PAR.Load ID is Blank
AND PAR.Load_ID = *ZERO;

// AND PAR.Actual Shipped Date is not entered
AND PAR.Actual_Shipped_Date = *ZERO;

// 1PG.USR Desc. 10 = CON.*ALL
X1PG_USR_Desc_10 = *ALL;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

//?documentation: Final rules defined on 7/30/2009
//?Per Ashley if the Order Status is 'A' available but
//?there is a Truck Depart date & time
//?these are the ones that she wants
//?7/30/2009 selection on 03 based on delivery date
//?actual ship date is zero on these records
//?then it was discussed that the schedule shp date
//?tom dye does not want the shd ship date to be changed by the users
//?in some cases there are multiple orders for a load which would have
//?different truck delivery date -- users are currently changing these
//?records, but may not be doing so soon enough
//?if these records do appear on the invoice exception on Monday
//?then Jami M will manually stop the invoice run.
//?this will trigger Tom & Ashley to get these order truck dlv date chg
//?if invoice must go this order is at the stage of 03
//?and allowing it to print on the report will not hurt anything
//?but currently going to see how the user can correct the data.
EXECUTE FUNCTION(One Invoice Per PO DRV) TYPE(DRVFLD)                           AC1805255;
PARAMETER(CUR.One_Invoice_Per_PO_DRV);
PARAMETER(CUR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.One_Invoice_Per_PO_DRV);
 {
  //?USER: Processing if Data record not found

  // PAR.One Invoice Per PO = CND.No
  PAR.One_Invoice_Per_PO = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// LCL.One Invoice Per PO DRV = CUR.One Invoice Per PO DRV
LCL.One_Invoice_Per_PO_DRV = CUR.One_Invoice_Per_PO_DRV;

// LCL.Load ID USR = CUR.Load ID
LCL.Load_ID_USR = CUR.Load_ID;

// LCL.Order Number Saved USR = CUR.Order Number
LCL.Order_Number_Saved_USR = CUR.Order_Number;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?rtv BOL & Trk Depart from Load Hdr
EXECUTE FUNCTION(Rtv Sts/BOLDt/DptDtTm RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1564871;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Load_Status);
PARAMETER(CUR.BOL_Complete_Date);
PARAMETER(CUR.Truck_Departure_Date);
PARAMETER(CUR.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Initialize display flags for this record
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

// WRK.USR Display 2 = CND.No
WRK.USR_Display_2 = 'N';

// WRK.USR Display 3 = CND.No
WRK.USR_Display_3 = 'N';

// WRK.USR Display 4 = CND.No
WRK.USR_Display_4 = 'N';

// WRK.USR Display 5 = CND.No
WRK.USR_Display_5 = 'N';

// WRK.USR Display 6 = CND.No
WRK.USR_Display_6 = 'N';

// WRK.USR Display 7 = CND.No
WRK.USR_Display_7 = 'N';

// WRK.USR Display 8 = CND.No
WRK.USR_Display_8 = 'N';

// WRK.USR Display 9 = CND.No
WRK.USR_Display_9 = 'N';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// WRK.USR Display 11 = CND.No
WRK.USR_Display_11 = 'N';

// WRK.USR Display 12 = CND.No
WRK.USR_Display_12 = 'N';

// WRK.USR Display 13 = CND.No
WRK.USR_Display_13 = 'N';

// WRK.USR Display 14 = CND.No
WRK.USR_Display_14 = 'N';

// WRK.USR Display 15 = CND.No
WRK.USR_Display_15 = 'N';

// WRK.USR Display 16 = CND.No
WRK.USR_Display_16 = 'N';

ENDIF;

//?Reason 1:  Order Unpriced
CASE;

// IF DB1.Price Status is Unpriced
IF DB1.Price_Status = 'U';

// CUR.Error Reason Descript 1 = CON.Order Unpriced
CUR.Error_Reason_Descript_1 = 'Order Unpriced';

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

ENDIF;

//?Reason 2:  Order Marked for Price Audit
CASE;

// IF DB1.Price Audit is Needs Price Audit
IF DB1.Price_Audit = 'N';

// CUR.Error Reason Descript 2 = CON.Price Audit Required
CUR.Error_Reason_Descript_2 = 'Price Audit Required';

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

ENDIF;

//?Reason 3:  Load status not= "S"
CASE;

// IF CUR.Load Status is Not Shipped
IF CUR.Load_Status = 'C'/'E'/'I'/'L'/'U';

// WRK.More Products USR = CND.Blank
WRK.More_Products_USR = *BLANK;

// CUR.Error Reason Descript 3 = CON.Load not Shipped
CUR.Error_Reason_Descript_3 = 'Load not Shipped';

//?** Get the order that didn't ship from order header   E004119
EXECUTE FUNCTION(RTV Orders not shipped RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2116127;
PARAMETER(WRK.Order_Number);
PARAMETER(LCL.Load_ID_USR);
PARAMETER(WRK.More_Products_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // WRK.Event Code = CND.Not Updated
 WRK.Event_Code = *BLANK;

 EXECUTE FUNCTION(RTV Status,Event       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1464724;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Header_Status);
 PARAMETER(WRK.Event_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Event Code is Open Orders
 IF WRK.Event_Code < '04';

 MOVE *ALL (To: PAR From: DB1);

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 CASE;

 // IF WRK.Count USR is GT 1
 IF WRK.Count_USR > 1;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.More Products USR = CND.Yes
 PAR.More_Products_USR = 'Y';

 ENDIF;

}


//?** Get the order number that did not ship  10/23/2006 LJB V61023A
//?** Concat order# to message from load dtl or order header
CASE;

// IF WRK.Order Number is Greater then zero
IF WRK.Order_Number > *ZERO;

// LCL.Order Alpha = CVTVAR(WRK.Order Number)
LCL.Order_Alpha = CVTVAR(WRK.Order_Number);

// CUR.Error Reason Descript 3 = CONCAT(CUR.Error Reason Descript 3,CON.:OR-,CON.*ZERO)
CUR.Error_Reason_Descript_3 = CUR.Error_Reason_Descript_3 + ':OR-' (*ZERO);

// CUR.Error Reason Descript 3 = CONCAT(CUR.Error Reason Descript 3,LCL.Order Alpha,CON.*ZERO)
CUR.Error_Reason_Descript_3 = CUR.Error_Reason_Descript_3 + LCL.Order_Alpha (*ZERO);

//?** Put "+" if more than one order is not shipped
CASE;

// IF WRK.More Products USR is Yes
IF WRK.More_Products_USR = 'Y';

// CUR.Error Reason Descript 3 = CONCAT(CUR.Error Reason Descript 3,CON.+,CON.1)
CUR.Error_Reason_Descript_3 = CUR.Error_Reason_Descript_3 + '+' (1);

ENDIF;

ENDIF;

// WRK.USR Display 3 = CND.Yes
WRK.USR_Display_3 = 'Y';

ENDIF;

//?Reason 4:  Pricing extension error
CASE;

// IF PAR.Update Exception Status is yes
IF PAR.Update_Exception_Status = 'Y';

// CUR.Error Reason Descript 4 = CON.Pricing Extension Error
CUR.Error_Reason_Descript_4 = 'Pricing Extension Error';

// WRK.USR Display 4 = CND.Yes
WRK.USR_Display_4 = 'Y';

ENDIF;

//?Reason 5: Departure status:Ld Hdr, if Live w/tpm then Ord Hdr E004119
CASE;

// IF PAR.Departure Sts USR is No Dalay
IF PAR.Departure_Sts_USR = 'D'/'B'/'N';

// OR PAR.Departure Sts USR is BOL Not Completed
OR PAR.Departure_Sts_USR = 'C';

// CUR.Error Reason Descript 5 = Condition name of PAR.Departure Sts USR
CUR.Error_Reason_Descript_5 = RTVCND(PAR.Departure_Sts_USR);

// WRK.USR Display 5 = CND.Yes
WRK.USR_Display_5 = 'Y';

//?Reason 5: Departure status:Ld Hdr, if Live w/tpm then Ord Hdr E004119
// IF PAR.Departure Sts USR is Truck departed < ?hrs ago
IF PAR.Departure_Sts_USR = 'T';

// WRK.Hour 1 USR = PAR.System Value Numeric
WRK.Hour_1_USR = PAR.System_Value_Numeric;

// Retrieve message - 'Trk departed < &1hrs ago'
CUR.Error_Reason_Descript_5 = RTVMSG(USR2846);
PARAMETER(WRK.Hour_1_USR);

// WRK.USR Display 5 = CND.Yes
WRK.USR_Display_5 = 'Y';

//?Reason 5: Departure status:Ld Hdr, if Live w/tpm then Ord Hdr E004119
// IF PAR.Departure Sts USR is BOL Completed <?Min ago
IF PAR.Departure_Sts_USR = 'P';

EXECUTE FUNCTION(Rtv Bypass DDt Sts    RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2007943;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Bypass_DDt_Delay_w_Invcng);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Bypass DDt/Delay w/Invcng is Yes
IF LCL.Bypass_DDt_Delay_w_Invcng = 'Y';

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(CUR.Company_Number);
PARAMETER('INVDELAYBY');
PARAMETER(LCL.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(CUR.Company_Number);
PARAMETER('INVDELAYMN');
PARAMETER(LCL.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// WRK.Hour 1 USR = LCL.System Value Numeric
WRK.Hour_1_USR = LCL.System_Value_Numeric;

// Retrieve message - 'BOL printed < &1 min ago.'
CUR.Error_Reason_Descript_5 = RTVMSG(USR3833);
PARAMETER(WRK.Hour_1_USR);

// WRK.USR Display 5 = CND.Yes
WRK.USR_Display_5 = 'Y';

ENDIF;

//?Reason 6 & 7:  Manual Price out of range
CASE;

// IF PAR.Manual Prc Err Sts USR is yes
IF PAR.Manual_Prc_Err_Sts_USR = 'Y';

//?Line 6
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Item Code Txt = CVTVAR(PAR.Item Code USR)
LCL.Item_Code_Txt = CVTVAR(PAR.Item_Code_USR);

// CUR.Explaination Text 2 = CONCAT(CON.MAN PRICE RNG ERR FOR,LCL.Item Code Txt,CON.1)
CUR.Explaination_Text_2 = 'MAN PRICE RNG ERR FOR' + LCL.Item_Code_Txt (1);

//?Convert price to text
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Price 7,4 USR = LCL.Price Overage Override
LCL.Price_74_USR = LCL.Price_Overage_Override;

//?** Convert and Concatenate the price to the item number   LJB L61212A
//?** Format the price override:
//?** 1. Place the first 3 numbers in a 3 char text field
//?** 2. Place the last 4 numbers in a 4 char text field
//?** 3. Concatonate them together with a decimal point between
//?** 4. Add a "=>" after the item code
//?** 5. Add the formatted price to the end of the error message
// LCL.Price 7 Alpha USR = CVTVAR(LCL.Price 7,4 USR)
LCL.Price_7_Alpha_USR = CVTVAR(LCL.Price_74_USR);

// LCL.Text 3 Length USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.1,CON.3)
LCL.Text_3_Length_USR = SUBSTRING(LCL.Price_7_Alpha_USR:1:3);

// LCL.USR Work Field 4A     USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.4,CON.4)
LCL.USR_Work_Field_4A_USR = SUBSTRING(LCL.Price_7_Alpha_USR:4:4);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Text 3 Length USR,CON..,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Text_3_Length_USR + '.' (*ZERO);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Price 7 Alpha USR,LCL.USR Work Field 4A     USR,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Price_7_Alpha_USR + LCL.USR_Work_Field_4A_USR (*ZERO);

ENDIF;

// CUR.Explaination Text 2 = CONCAT(CUR.Explaination Text 2,CON.=>,CON.*ZERO)
CUR.Explaination_Text_2 = CUR.Explaination_Text_2 + '=>' (*ZERO);

// CUR.Explaination Text 2 = CONCAT(CUR.Explaination Text 2,LCL.Price 7 Alpha USR,CON.*ZERO)
CUR.Explaination_Text_2 = CUR.Explaination_Text_2 + LCL.Price_7_Alpha_USR (*ZERO);

ENDIF;

//?Line 7
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Error Reason Descript 7 = CONCAT(LCL.Default Commod Mark basis,LCL.Commodity Price Group,CON.
CUR.Error_Reason_Descript_7 = LCL.Default_Commod_Mark_basis + LCL.Commodity_Price_Group (*ZERO);

// CUR.Error Reason Descript 7 = CONCAT(CUR.Error Reason Descript 7,CON.=,CND.*One)
CUR.Error_Reason_Descript_7 = CUR.Error_Reason_Descript_7 + '=' (1);

//?Convert market price to text
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Price 7,4 USR = LCL.Projected Market Price
LCL.Price_74_USR = LCL.Projected_Market_Price;

// LCL.Price 7 Alpha USR = CVTVAR(LCL.Price 7,4 USR)
LCL.Price_7_Alpha_USR = CVTVAR(LCL.Price_74_USR);

// LCL.Text 3 Length USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.1,CON.3)
LCL.Text_3_Length_USR = SUBSTRING(LCL.Price_7_Alpha_USR:1:3);

// LCL.USR Work Field 4A     USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.4,CON.4)
LCL.USR_Work_Field_4A_USR = SUBSTRING(LCL.Price_7_Alpha_USR:4:4);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Text 3 Length USR,CON..,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Text_3_Length_USR + '.' (*ZERO);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Price 7 Alpha USR,LCL.USR Work Field 4A     USR,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Price_7_Alpha_USR + LCL.USR_Work_Field_4A_USR (*ZERO);

ENDIF;

// CUR.Error Reason Descript 7 = CONCAT(CUR.Error Reason Descript 7,LCL.Price 7 Alpha USR,CND.*One)
CUR.Error_Reason_Descript_7 = CUR.Error_Reason_Descript_7 + LCL.Price_7_Alpha_USR (1);

//?Absorbed Freight Rate
//?Convert absorbed freight to text
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?05/01/18 DN R12926-Use Absorbed Freight Rate from Order Header.
// LCL.Price 7,4 USR = DB1.Absorbed Freight Rate CWT / CON.100 *
LCL.Price_74_USR = DB1.Absorbed_Freight_Rate_CWT / 100;

// LCL.Price 7 Alpha USR = CVTVAR(LCL.Price 7,4 USR)
LCL.Price_7_Alpha_USR = CVTVAR(LCL.Price_74_USR);

// LCL.Text 3 Length USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.1,CON.3)
LCL.Text_3_Length_USR = SUBSTRING(LCL.Price_7_Alpha_USR:1:3);

// LCL.USR Work Field 4A     USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.4,CON.4)
LCL.USR_Work_Field_4A_USR = SUBSTRING(LCL.Price_7_Alpha_USR:4:4);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Text 3 Length USR,CON..,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Text_3_Length_USR + '.' (*ZERO);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Price 7 Alpha USR,LCL.USR Work Field 4A     USR,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Price_7_Alpha_USR + LCL.USR_Work_Field_4A_USR (*ZERO);

ENDIF;

// CUR.Error Reason Descript 7 = CONCAT(CUR.Error Reason Descript 7,CON.+ Freight =,CND.*One)
CUR.Error_Reason_Descript_7 = CUR.Error_Reason_Descript_7 + '+ Freight =' (1);

// CUR.Error Reason Descript 7 = CONCAT(CUR.Error Reason Descript 7,LCL.Price 7 Alpha USR,CND.*One)
CUR.Error_Reason_Descript_7 = CUR.Error_Reason_Descript_7 + LCL.Price_7_Alpha_USR (1);

ENDIF;

//?Line 7a
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Overage
//?Convert overage to text
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Price 7,4 USR = LCL.Market Overage
LCL.Price_74_USR = LCL.Market_Overage;

// LCL.Price 7 Alpha USR = CVTVAR(LCL.Price 7,4 USR)
LCL.Price_7_Alpha_USR = CVTVAR(LCL.Price_74_USR);

// LCL.Text 3 Length USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.1,CON.3)
LCL.Text_3_Length_USR = SUBSTRING(LCL.Price_7_Alpha_USR:1:3);

// LCL.USR Work Field 4A     USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.4,CON.4)
LCL.USR_Work_Field_4A_USR = SUBSTRING(LCL.Price_7_Alpha_USR:4:4);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Text 3 Length USR,CON..,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Text_3_Length_USR + '.' (*ZERO);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Price 7 Alpha USR,LCL.USR Work Field 4A     USR,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Price_7_Alpha_USR + LCL.USR_Work_Field_4A_USR (*ZERO);

ENDIF;

// CUR.Error Reason Descript 7a = CONCAT(CON.+ Overage =,LCL.Price 7 Alpha USR,CND.*One)
CUR.Error_Reason_Descript_7a = '+ Overage =' + LCL.Price_7_Alpha_USR (1);

// CUR.Error Reason Descript 7a = CONCAT(CUR.Error Reason Descript 7a,CON.=>,CND.*One)
CUR.Error_Reason_Descript_7a = CUR.Error_Reason_Descript_7a + '=>' (1);

//?Price
//?Convert comparison price to text
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Calc Comparison Price
LCL.Price_74_USR = ( LCL.Projected_Market_Price + ( LCL.Absorbed_Freight_Rate_CWT / 100 )          +
) + LCL.Market_Overage;

// LCL.Price 7 Alpha USR = CVTVAR(LCL.Price 7,4 USR)
LCL.Price_7_Alpha_USR = CVTVAR(LCL.Price_74_USR);

// LCL.Text 3 Length USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.1,CON.3)
LCL.Text_3_Length_USR = SUBSTRING(LCL.Price_7_Alpha_USR:1:3);

// LCL.USR Work Field 4A     USR = SUBSTRING(LCL.Price 7 Alpha USR,CON.4,CON.4)
LCL.USR_Work_Field_4A_USR = SUBSTRING(LCL.Price_7_Alpha_USR:4:4);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Text 3 Length USR,CON..,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Text_3_Length_USR + '.' (*ZERO);

// LCL.Price 7 Alpha USR = CONCAT(LCL.Price 7 Alpha USR,LCL.USR Work Field 4A     USR,CON.*ZERO)
LCL.Price_7_Alpha_USR = LCL.Price_7_Alpha_USR + LCL.USR_Work_Field_4A_USR (*ZERO);

ENDIF;

// CUR.Error Reason Descript 7a = CONCAT(CUR.Error Reason Descript 7a,LCL.Price 7 Alpha USR,CND.*One
CUR.Error_Reason_Descript_7a = CUR.Error_Reason_Descript_7a + LCL.Price_7_Alpha_USR (1);

ENDIF;

// WRK.USR Display 6 = CND.Yes
WRK.USR_Display_6 = 'Y';

// WRK.USR Display 7 = CND.Yes
WRK.USR_Display_7 = 'Y';

ENDIF;

//?Reason 8:  Avg Shpd Wgt not in range-Disable if Live w/TPM  E004019
CASE;

// IF PAR.Average Ship Wgt Err USR is yes
IF PAR.Average_Ship_Wgt_Err_USR = 'Y';

// LCL.Item Code Txt = CVTVAR(PAR.Item Code)
LCL.Item_Code_Txt = CVTVAR(PAR.Item_Code);

// CUR.Error Reason Descript 8 = CONCAT(LCL.Item Code Txt,CON.: Avg Ship Wgt Err,CON.*ZERO)
CUR.Error_Reason_Descript_8 = LCL.Item_Code_Txt + ': Avg Ship Wgt Err' (*ZERO);

// WRK.USR Display 8 = CND.Yes
WRK.USR_Display_8 = 'Y';

ENDIF;

//?Reason 9:  Inter-Company Price Error  IC Invoice Price = 0
CASE;

// IF PAR.InterCo Price Err USR is Yes
IF PAR.InterCo_Price_Err_USR = 'Y';

// LCL.Item Code Txt = CVTVAR(PAR.Item Code)
LCL.Item_Code_Txt = CVTVAR(PAR.Item_Code);

// CUR.Error Reason Descript 9 = CONCAT(LCL.Item Code Txt,CON.:IC Invoice Price = 0,CON.*ZERO)
CUR.Error_Reason_Descript_9 = LCL.Item_Code_Txt + ':IC Invoice Price = 0' (*ZERO);

// WRK.USR Display 9 = CND.Yes
WRK.USR_Display_9 = 'Y';

ENDIF;

//?Reason 10: Revenue week is closed for the Actual Ship Date    LJB
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// AND DB1.Order Type - Sales is Regular Order
AND DB1.Order_Type_Sales = 'OR';

// CUR.Explaination Text 1 = CON.Revenue Week closed for
CUR.Explaination_Text_1 = 'Revenue Week closed for';

// CUR.Explaination Text 1 = CONCAT(CUR.Explaination Text 1,CON.Actual Ship Date,CON.1)
CUR.Explaination_Text_1 = CUR.Explaination_Text_1 + 'Actual Ship Date' (1);

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

//?Reason 11: PFS Ship order detail is unprocessed    RMC 7/31/06
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

// CUR.Explaination Text 11 = CONCAT(CON.PFS Ship Order Dtl is Unp,CON.rocessed.,CON.*ZERO)
CUR.Explaination_Text_11 = 'PFS Ship Order Dtl is Unp' + 'rocessed.' (*ZERO);

// WRK.USR Display 11 = CND.Yes
WRK.USR_Display_11 = 'Y';

ENDIF;

//?Reason 12: Order Status for One-Invoice Per PO. 12/05/06 PKD PK0040
CASE;

// IF PAR.Order Status is Open
IF PAR.Order_Status = 'O';

// CUR.Explaination Text 12 = CONCAT(CON.Orders for PO,DB1.Customer Purchase Order #,CON.1)
CUR.Explaination_Text_12 = 'Orders for PO' + DB1.Customer_Purchase_Order_# (1);

// CUR.Explaination Text 12 = CONCAT(CUR.Explaination Text 12,CON.not shipped,CON.1)
CUR.Explaination_Text_12 = CUR.Explaination_Text_12 + 'not shipped' (1);

// WRK.USR Display 12 = CND.Yes
WRK.USR_Display_12 = 'Y';

ENDIF;

// CUR.Explaination Text 13 = CON.*BLANK
CUR.Explaination_Text_13 = *BLANK;

// CUR.Explaination Text 13a = CON.*BLANK
CUR.Explaination_Text_13a = *BLANK;

//?Reason 13: Oth Ords for this Combo PO have errors 4/26/07 SLM PK0040
CASE;

// IF PAR.Order Status is Cmb PO has Errors
IF PAR.Order_Status = 'E';

// OR CUR.One Invoice Per PO DRV is Yes
OR CUR.One_Invoice_Per_PO_DRV = 'Y';

EXECUTE FUNCTION(RTV Po and its Orders RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1817155;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DB1.Customer_Purchase_Order_#);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Order_Number_1_ALPHA_USR);
PARAMETER(LCL.Order_Number_2_ALPHA_USR);
PARAMETER(LCL.Order_Number_3_ALPHA_USR);
PARAMETER(LCL.Order_Number_4_ALPHA_USR);
PARAMETER(LCL.More_Explanation_USR);
{
 //?USER: Initialize routine

 // PAR.Order Number 1 ALPHA USR = CON.*BLANK
 PAR.Order_Number_1_ALPHA_USR = *BLANK;

 // PAR.Order Number 2 ALPHA USR = CON.*BLANK
 PAR.Order_Number_2_ALPHA_USR = *BLANK;

 // PAR.Order Number 3 ALPHA USR = CVTVAR(CON.*BLANK)
 PAR.Order_Number_3_ALPHA_USR = CVTVAR(*BLANK);

 // PAR.Order Number 4 ALPHA USR = CVTVAR(CON.*BLANK)
 PAR.Order_Number_4_ALPHA_USR = CVTVAR(*BLANK);

 // PAR.More Explanation USR = CVTVAR(CND.Blank)
 PAR.More_Explanation_USR = CVTVAR(*BLANK);

 //?USER: Process Data record

 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 //?do not perform this on the order = to order being sent in
 // IF PAR.Order Number 1 ALPHA USR EQ WRK.Blank for 12          USR
 IF PAR.Order_Number_1_ALPHA_USR = WRK.Blank_for_12_USR;

 // PAR.Order Number 1 ALPHA USR = CVTVAR(DB1.Order Number)
 PAR.Order_Number_1_ALPHA_USR = CVTVAR(DB1.Order_Number);

 // IF PAR.Order Number 2 ALPHA USR EQ WRK.Blank for 12          USR
 IF PAR.Order_Number_2_ALPHA_USR = WRK.Blank_for_12_USR;

 // PAR.Order Number 2 ALPHA USR = CVTVAR(DB1.Order Number)
 PAR.Order_Number_2_ALPHA_USR = CVTVAR(DB1.Order_Number);

 // IF PAR.Order Number 3 ALPHA USR EQ WRK.Blank for 12          USR
 IF PAR.Order_Number_3_ALPHA_USR = WRK.Blank_for_12_USR;

 // PAR.Order Number 3 ALPHA USR = CVTVAR(DB1.Order Number)
 PAR.Order_Number_3_ALPHA_USR = CVTVAR(DB1.Order_Number);

 // IF PAR.Order Number 4 ALPHA USR EQ WRK.Blank for 12          USR
 IF PAR.Order_Number_4_ALPHA_USR = WRK.Blank_for_12_USR;

 // PAR.Order Number 4 ALPHA USR = CVTVAR(DB1.Order Number)
 PAR.Order_Number_4_ALPHA_USR = CVTVAR(DB1.Order_Number);

 // IF PAR.Order Number 4 ALPHA USR NE WRK.Blank for 12          USR
 IF PAR.Order_Number_4_ALPHA_USR <> WRK.Blank_for_12_USR;

 //?Still more records so this will make the + and quit
 // PAR.More Explanation USR = CND.Yes
 PAR.More_Explanation_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Order Number 1 ALPHA USR GT WRK.BLANK 1               USR
IF LCL.Order_Number_1_ALPHA_USR > WRK.BLANK_1_USR;

// CUR.Explaination Text 13 = CONCAT(CON.PO #,DB1.Customer Purchase Order #,CON.1)
CUR.Explaination_Text_13 = 'PO #' + DB1.Customer_Purchase_Order_# (1);

CASE;

// IF PAR.Order Status is Cmb PO has Errors
IF PAR.Order_Status = 'E';

// CUR.Explaination Text 13 = CONCAT(CUR.Explaination Text 13,CON.has ords w/errors,CON.1)
CUR.Explaination_Text_13 = CUR.Explaination_Text_13 + 'has ords w/errors' (1);

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Explaination Text 13 = CONCAT(CUR.Explaination Text 13,CON.has other orders,CON.1)
CUR.Explaination_Text_13 = CUR.Explaination_Text_13 + 'has other orders' (1);

ENDIF;

// WRK.USR Display 13 = CND.Yes
WRK.USR_Display_13 = 'Y';

// CUR.Explaination Text 13a = CONCAT(CON.Orders:,LCL.Order Number 1 ALPHA USR,CON.1)
CUR.Explaination_Text_13a = 'Orders:' + LCL.Order_Number_1_ALPHA_USR (1);

// CUR.Explaination Text 13a = CONCAT(CUR.Explaination Text 13a,LCL.Order Number 2 ALPHA USR,CND.*On
CUR.Explaination_Text_13a = CUR.Explaination_Text_13a + LCL.Order_Number_2_ALPHA_USR (1);

// CUR.Explaination Text 13a = CONCAT(CUR.Explaination Text 13a,LCL.Order Number 3 ALPHA USR,CND.*On
CUR.Explaination_Text_13a = CUR.Explaination_Text_13a + LCL.Order_Number_3_ALPHA_USR (1);

// CUR.Explaination Text 13a = CONCAT(CUR.Explaination Text 13a,LCL.Order Number 4 ALPHA USR,CND.*On
CUR.Explaination_Text_13a = CUR.Explaination_Text_13a + LCL.Order_Number_4_ALPHA_USR (1);

CASE;

// IF LCL.More Explanation USR is Yes
IF LCL.More_Explanation_USR = 'Y';

// CUR.Explaination Text 13a = CONCAT(CUR.Explaination Text 13a,CON.+,CND.*One)
CUR.Explaination_Text_13a = CUR.Explaination_Text_13a + '+' (1);

ENDIF;

ENDIF;

ENDIF;

//?Reason 14: Order=avail but there is Truck Depart/Time
CASE;

// IF CUR.Event Code is Entered Thru 03 Picked
IF CUR.Event_Code >= '01';
AND CUR.Event_Code <= '03';

CASE;

// IF CUR.Header Status is Available
IF CUR.Header_Status = 'A';

// AND CUR.Truck Departure Date is Entered
AND CUR.Truck_Departure_Date <> *ZERO;

// AND LCL.Truck Departure Date LE WRK.From Date             USR
AND LCL.Truck_Departure_Date <= WRK.From_Date_USR;

// CUR.Explaination Text 14 = CON.Available to Shp/Trk has
CUR.Explaination_Text_14 = 'Available to Shp/Trk has';

// CUR.Explaination Text 14 = CONCAT(CUR.Explaination Text 14,CON.a departure dte,CON.1)
CUR.Explaination_Text_14 = CUR.Explaination_Text_14 + 'a departure dte' (1);

// WRK.USR Display 14 = CND.Yes
WRK.USR_Display_14 = 'Y';

ENDIF;

ENDIF;

//?Reason 15: EDI PO Ack-855 not sent yet for customer that requires one.
CASE;

// IF LCL.D-EDI INV PROC FLAG is Not Yes
IF LCL.D_EDI_INV_PROC_FLAG = 'N'/*BLANK;

// CUR.Explaination Text 15 = CON.EDI PO Ack Sts =
CUR.Explaination_Text_15 = 'EDI PO Ack Sts =';

CASE;

// IF LCL.D-EDI INV PROC FLAG is *No
IF LCL.D_EDI_INV_PROC_FLAG = 'N';

// LCL.Text 10A USR = CON.Pending
LCL.Text_10A_USR = 'Pending';

// IF LCL.D-EDI INV PROC FLAG is Not Processed
IF LCL.D_EDI_INV_PROC_FLAG = *BLANK;

// LCL.Text 10A USR = CON.Not Found
LCL.Text_10A_USR = 'Not Found';

ENDIF;

// CUR.Explaination Text 15 = CONCAT(CUR.Explaination Text 15,LCL.Text 10A USR,CON.1)
CUR.Explaination_Text_15 = CUR.Explaination_Text_15 + LCL.Text_10A_USR (1);

// WRK.USR Display 15 = CND.Yes
WRK.USR_Display_15 = 'Y';

ENDIF;

//?Reason 16: GTIN Error
CASE;

// IF LCL.GTIN Error Sts USR is Error
IF LCL.GTIN_Error_Sts_USR = 'E';

// CUR.Explaination Text 16 = CON.EDI PO Ack Err =
CUR.Explaination_Text_16 = 'EDI PO Ack Err =';

EXECUTE FUNCTION(Item Code DRV) TYPE(DRVFLD)                                    AC1670444;
PARAMETER(LCL.Item_Code_DRV);
PARAMETER(LCL.GTIN_Error_Item_Code_USR);
{
 //?Calculate derived field

 // LCL.Number 5,0            USR = PAR.Item Code
 LCL.Number_50_USR = PAR.Item_Code;

 // LCL.Text USR 5 = CVTVAR(LCL.Number 5,0            USR)
 LCL.Text_USR_5 = CVTVAR(LCL.Number_50_USR);

 // PAR.Item Code DRV = LCL.Text USR 5
 PAR.Item_Code_DRV = LCL.Text_USR_5;

}


// LCL.Item Code 5A = LCL.Item Code DRV
LCL.Item_Code_5A = LCL.Item_Code_DRV;

// CUR.Explaination Text 16 = CONCAT(CUR.Explaination Text 16,LCL.Item Code 5A,CON.1)
CUR.Explaination_Text_16 = CUR.Explaination_Text_16 + LCL.Item_Code_5A (1);

// CUR.Explaination Text 16 = CONCAT(CUR.Explaination Text 16,CON.GTIN,CON.1)
CUR.Explaination_Text_16 = CUR.Explaination_Text_16 + 'GTIN' (1);

// CUR.Explaination Text 16 = CONCAT(CUR.Explaination Text 16,CON.Missing,CON.1)
CUR.Explaination_Text_16 = CUR.Explaination_Text_16 + 'Missing' (1);

// WRK.USR Display 16 = CND.Yes
WRK.USR_Display_16 = 'Y';

ENDIF;

//?USER: Process after print of detail format

CASE;

// IF DB1.Order Type Print Status is yes
IF DB1.Order_Type_Print_Status = 'Y';

// WRK.Order Type Print Status = CND.no
WRK.Order_Type_Print_Status = 'N';

EXECUTE FUNCTION(CHG Ord Typ Prt Status CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1308691;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(WRK.Order_Type_Print_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(PAR.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Call program Rtv One Invoice /PO   XP.
CALL PROGRAM(Rtv One Invoice /PO   XP) ('PMCOXFR');
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.One_Invoice_Per_PO);

CASE;

// IF LCL.One Invoice Per PO is Yes
IF LCL.One_Invoice_Per_PO = 'Y';

// Call program CHG Po and its Ords    XF.
CALL PROGRAM(CHG Po and its Ords    XF) ('PMF8XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DB1.Customer_Purchase_Order_#);
PARAMETER(WRK.Order_Type_Print_Status);
PARAMETER(DB1.Scheduled_Ship_Date);

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Accounting Company Number totals format

