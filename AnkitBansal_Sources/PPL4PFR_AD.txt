// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPL4PFR
// ?Date: 14.08.2025 Time: 12:06:35
// ?------------------------------------------------------------------------------------------------

//?USER: Process top of page

EXECUTE FUNCTION(Rtv Claim Status      RT) TYPE(RTVOBJ) FILE(PDMKCPP)           AC1878235;
PARAMETER(PAR.Claim_Number);
PARAMETER(TOP_Claim_Status_Rtv_Usr);
PARAMETER(TOP_Claim_Resolution_Explan);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Claim Resolution Explan. = TOP.Claim Resolution Explan.
PAR.Claim_Resolution_Explan = TOP_Claim_Resolution_Explan;

// TOP.Claim Status Desc     USR = Condition name of TOP.Claim Status Rtv      Usr
TOP_Claim_Status_Desc_USR = RTVCND(TOP_Claim_Status_Rtv_Usr);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(PAR.Claim_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// TOP.Claim Company Number = PAR.Claim Company Number
TOP_Claim_Company_Number = PAR.Claim_Company_Number;

// TOP.Claim Number = PAR.Claim Number
TOP_Claim_Number = PAR.Claim_Number;

//?** If change type is passed in, put the name in the explanation text
CASE;

// IF PAR.Claim Print Type is Regular Claim
IF PAR.Claim_Print_Type = 'R';

// TOP.Explaination Text 1 = CND.Blank
TOP_Explaination_Text_1 = *BLANK;

//?** If change type is passed in, put the name in the explanation text
// IF PAR.Claim Print Type is Audit Notes
IF PAR.Claim_Print_Type = 'A';

// TOP.Explaination Text 1 = CON.Change on Claim
TOP_Explaination_Text_1 = 'Change on Claim';

//?** If change type is passed in, put the name in the explanation text
// IF PAR.Claim Print Type is Internal Notes
IF PAR.Claim_Print_Type = 'I';

// TOP.Explaination Text 1 = CON.Claim with Internal Notes
TOP_Explaination_Text_1 = 'Claim with Internal Notes';

//?** If change type is passed in, put the name in the explanation text
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Explaination Text 1 = CON.*BLANK
TOP_Explaination_Text_1 = *BLANK;

ENDIF;

//?WI592 DN 06/07/23-Get Warehouse & Accounting Company.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV 1st Warehouse 2    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2158777;
PARAMETER(DB1.Claim_Company_Number);
PARAMETER(DB1.Claim_Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(TOP_Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: On print of detail format

// CUR.Claim Type Descr Usr = Condition name of DB1.Claim Type
CUR.Claim_Type_Descr_Usr = RTVCND(DB1.Claim_Type);

// CUR.Claim Status Desc     USR = Condition name of DB1.Claim Status
CUR.Claim_Status_Desc_USR = RTVCND(DB1.Claim_Status);

//?Get History/Order Info.
EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
PARAMETER(CUR.Claim_Company_Number);
PARAMETER(CUR.Claim_Order_Number);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(CUR.Customer_Purchase_Order_#);
PARAMETER(CUR.Carrier_Code);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(CUR.Actual_Ship_Date);
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
PARAMETER(CUR.Claim_Company_Number);
PARAMETER(CUR.Claim_Order_Number);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(CUR.Customer_Purchase_Order_#);
PARAMETER(CUR.Actual_Ship_Date);
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Salesperson_to_Rvw_Claim);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?Get Customer Phone Number.
EXECUTE FUNCTION(RTV Customer Telephone RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1216241;
PARAMETER(CUR.Claim_Ship_to_Customer);
PARAMETER(CUR.Telephone_Number_FF);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Warehouse Description.
EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(CUR.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Get Salesperson Name.
EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CUR.Salesperson_to_Rvw_Claim);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Trailer Id.
EXECUTE FUNCTION(RTV Claim Load Info    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1524881;
PARAMETER(CUR.Claim_Company_Number);
PARAMETER(CUR.Claim_Order_Number);
PARAMETER(CUR.Trailer_Id);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Claim Load Info    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1525206;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Trailer_Id);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Get Salesperson Approved Name.
EXECUTE FUNCTION(RTV Profile Desc.      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1253264;
PARAMETER(CUR.Sales_Approved_User);
PARAMETER(LCL.Text_USR_23);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CUR.ACR_Shipping_Method_DRV);
PARAMETER(CUR.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?T10560 DN  05/18/17-Added FPR ID to report.
// CUR.FPR ID USR = DB1.FPR ID
CUR.FPR_ID_USR = DB1.FPR_ID;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Claim-Comment
EXECUTE FUNCTION(Prt Claim-Comm Expl   PO) TYPE(PRTOBJ);
PARAMETER(CUR.Claim_Number);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?Embedded PRTOBJ : Prt Claim-Products    PO
// LCL.Total Trans Amount 1 Usr = CON.*ZERO
LCL.Total_Trans_Amount_1_Usr = *ZERO;

EXECUTE FUNCTION(Prt Claim-Products    PO) TYPE(PRTOBJ);
PARAMETER(CUR.Claim_Number);
PARAMETER(LCL.Total_Trans_Amount_1_Usr);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?Embedded PRTOBJ : PRT Claim-Resale Prd  PO
// LCL.Total Trans Amount 2 Usr = CON.*ZERO
LCL.Total_Trans_Amount_2_Usr = *ZERO;

EXECUTE FUNCTION(PRT Claim-Resale Prd  PO) TYPE(PRTOBJ);
PARAMETER(LCL.Total_Trans_Amount_2_Usr);
PARAMETER(CUR.Claim_Number);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?Embedded PRTOBJ : Prt Claim-Expense     PO
EXECUTE FUNCTION(Prt Claim-Expense     PO) TYPE(PRTOBJ);
PARAMETER(CUR.Claim_Number);
PARAMETER(CUR.Claim_Net_Loss);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?PRTOBJ calls after print of final totals format

//?Embedded PRTOBJ : Prt Claim-Comm System PO
CASE;

// IF PAR.Claim Prt AuditNotes  USR is *YES
IF PAR.Claim_Prt_AuditNotes_USR = *YES;

// LCL.Claim Expl Action = CND.Claim was changed
LCL.Claim_Expl_Action = 'CLMCHANGE';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Claim Expl Action = CND.No Claim Action
LCL.Claim_Expl_Action = *BLANK;

//?QUIT
QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Claim-Comm ChgAct PO) TYPE(PRTOBJ);
PARAMETER(LCL.Claim_Expl_Action);
PARAMETER(PAR.Claim_Number);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?Embedded PRTOBJ : Prt Claim-Comm Intrl  PO
CASE;

// IF PAR.Claim Prt IntrlNotes  USR is *YES
IF PAR.Claim_Prt_IntrlNotes_USR = *YES;

// IF *OTHERWISE
IF *OTHERWISE;

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Claim-Comm Intrl  PO) TYPE(PRTOBJ);
PARAMETER(PAR.Claim_Number);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


