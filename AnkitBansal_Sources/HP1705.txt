      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1705
      * TITLE:       Copy Farm Links
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     02/05/04
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to copy Farm Links from one Budget Template to another.
      *
      *           Any/all records that exist for the TO Template will be deleted
      *           prior to the copy.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 99/99/99
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1705   cf   e             workstn
     F                                     infds(iofeed)
      *
     Fhsp185    if   e           k disk
      *    Budget template header
      *
      *
     Fhsp187    uf   e           k disk
      *    Budget template/farm links
      *
      *
     Fhsl187a   o    e           k disk    rename(tlrec:tlreca) prefix(p1)
      *    Budget template/farm links
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      *
      * Parm fields
      *
     D xxaist          s              1
     D xxfbtcd         s                   like(d1fbtcd)
     D xxfbtds         s                   like(d1fbtds)
     D xxbtcd          s                   like(d1fbtcd)
     D xxbtds          s                   like(d1fbtds)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp1705k1
     C                   write     hp1705ec
     C                   exfmt     hp1705r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $copy
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *  1) TO budget template
      *
     C                   exsr      $tbtcd
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate TO Budget Template Code
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must exist in the Budget Template Master file
      *  3) cannot be the same as the FROM template
      *
      *
     C     $tbtcd        begsr
      *
     C                   move      *blank        d1tbtds
      *
      * Eliminate leading spaces
      *
     C                   eval      d1tbtcd = %triml(d1tbtcd)
      *
     C                   select
     C                   when      d1tbtcd = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     d1tbtcd       chain(n)  hsp185                             92
     C                   if        *in92 = *off                                 If hit
     C                   move      thbtds        d1tbtds
      *
     C                   if        d1fbtcd = d1tbtcd                            If same
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04719'
     C                   endif
     C                   endif                                                  If same
     C                   else
      *
      * TO Template not in Master file
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04718'
     C                   clear                   mgw
     C                   movea     d1tbtcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      *  F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * TO Budget Template code
      *
     C                   select
     C                   when      fld = 'D1TBTCD'
     C                   call      'HP5039'
     C                   parm      *blank        xxaist
     C                   parm      *blank        xxbtcd
     C                   parm      *blank        xxbtds
     C                   seton                                        51
     C                   if        xxbtcd <> *blank
     C                   move      xxbtcd        d1tbtcd
     C                   move      xxbtds        d1tbtds
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process the users request
      *---------------------------------------------------------------
      *
     C     $copy         begsr
      *
     C                   exsr      $edit1
      *
     C                   if        error = 0                                    If no error
      *
      * Delete all Farm Link records that already exist for the 'TO'
      * template.
      *
     C     d1tbtcd       setll     hsp187
     C                   dou       *in91 = *on                                  Do delete
     C     d1tbtcd       reade     hsp187                                 91
     C                   if        *in91 = *off                                 If not eof
     C                   delete    tlrec
     C                   endif                                                  If not eof
     C                   enddo                                                  Do delete
      *
      *
      * Read all Farm Link records for the FROM template and write a record
      * for the TO template.
      *
     C     d1fbtcd       setll     hsp187
     C                   dou       *in91 = *on                                  Do write
     C     d1fbtcd       reade(n)  hsp187                                 91
     C                   if        *in91 = *off                                 If not eof
     C                   move      d1tbtcd       p1tlbtcd
     C                   z-add     tlfscd        p1tlfscd
     C                   write     tlreca
     C                   endif                                                  If not eof
     C                   enddo                                                  Do write
      *
      * Issue copy completion message.
      *
     C                   add       1             error
     C                   movel     'HS04720'     mgid(e)
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1fbtcd       parm                    xxfbtcd
     C     d1fbtds       parm                    xxfbtds
     C                   parm                    rtncd
      *
      * Key lists
      *    None
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
