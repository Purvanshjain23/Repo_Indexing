// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUTME1R
// ?Date: 14.08.2025 Time: 03:51:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 9/15/2021 JBB WI464 - Pallet Mangement
//?                       Function created.  Standard edit record.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?If incoming Pallet Type is blank, set Mode to ADD
CASE;

// IF PAR.PM Pallet Type is None
IF PAR.PM_Pallet_Type = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Validate detail screen fields

//?Interchange Code validation
CASE;

// IF DTL.Interchange Code is Adv Ship Notice     856
IF DTL.Interchange_Code = 'ADVSN';

//?Validate Class Code is entered
CASE;

// IF DTL.Class Code EQ LCL.Class Code
IF DTL.Class_Code = LCL.Class_Code;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(DTL.Class_Code);

ENDIF;

//?Validate EDI Trading Partner is entered
CASE;

// IF NOT DTL.EDI Trading Partner No. is Entered
IF ! DTL.EDI_Trading_Partner_No <> *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(DTL.EDI_Trading_Partner_No);

ENDIF;

//?Validate EDI WHS Duns Number is entered
CASE;

// IF DTL.EDI Whs Duns Number is Not Entered
IF DTL.EDI_Whs_Duns_Number = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(DTL.EDI_Whs_Duns_Number);

ENDIF;

//?Validate Product ID GTIN is entered
CASE;

// IF DTL.Product ID GTIN is Not Entered
IF DTL.Product_ID_GTIN = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(DTL.Product_ID_GTIN);

ENDIF;

//?Interchange Code validation
// IF DTL.Interchange Code NE LCL.Interchange Code
IF DTL.Interchange_Code <> LCL.Interchange_Code;

// AND NOT DTL.Interchange Code is Adv Ship Notice     856
AND ! DTL.Interchange_Code = 'ADVSN';

// Send error message - 'Interchange Code is not valid.  It must be ADVSN.'
ERROR(USR5209);
MSGPARM(DTL.Interchange_Code);

ENDIF;

//?Class Code Validation
CASE;

// IF DTL.Class Code is Ship Notice/Manifest
IF DTL.Class_Code = '856';

//?Valid value
//?Class Code Validation
// IF DTL.Class Code NE LCL.Class Code
IF DTL.Class_Code <> LCL.Class_Code;

// AND NOT DTL.Class Code is Ship Notice/Manifest
AND ! DTL.Class_Code = '856';

// Send error message - 'Class Code is not valid.  It must be 856.'
ERROR(USR5210);
MSGPARM(DTL.Class_Code);

ENDIF;

//?ASN Ready validation
CASE;

// IF DTL.ASN Ready (Y/N) is Yes
IF DTL.ASN_Ready_Y_N = 'Y';

// AND DTL.Rental (Y/N) is No
AND DTL.Rental_Y_N = 'N';

// Send error message - 'ASN Ready cannot be Yes when the Rental flag is No.'
ERROR(USR5212);
MSGPARM(DTL.Rental_Y_N);
MSGPARM(DTL.ASN_Ready_Y_N);

//?ASN Ready validation
// IF DTL.ASN Ready (Y/N) is Yes
IF DTL.ASN_Ready_Y_N = 'Y';

//?Validate Interchange, Class, Trading Partner, Duns#, Prod ID entered
CASE;

// IF DTL.Interchange Code is Adv Ship Notice     856
IF DTL.Interchange_Code = 'ADVSN';

// AND DTL.Class Code is Ship Notice/Manifest
AND DTL.Class_Code = '856';

// AND DTL.EDI Trading Partner No. is Entered
AND DTL.EDI_Trading_Partner_No <> *BLANK;

// AND DTL.EDI Whs Duns Number is NE Blank
AND DTL.EDI_Whs_Duns_Number <> *BLANK;

// AND DTL.Product ID GTIN is Entered
AND DTL.Product_ID_GTIN <> *BLANK;

//?Validate Interchange, Class, Trading Partner, Duns#, Prod ID entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'ASN Ready cannot be Y.  Interchange, Class, Trade Partner, DUNS, Prod ID er
ERROR(USR5211);
MSGPARM(DTL.ASN_Ready_Y_N);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Pallet Master     CR) TYPE(CRTOBJ) FILE(PUB6CPP)           AC2197640;
PARAMETER(DTL.PM_Pallet_Type);
PARAMETER(DTL.PM_Description);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Rental_Y_N);
PARAMETER(DTL.Effective_Date);
PARAMETER(DTL.Product_ID_GTIN);
PARAMETER(DTL.Interchange_Code);
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_Whs_Duns_Number);
PARAMETER(DTL.Contact_Name);
PARAMETER(*MISSING);
PARAMETER(DTL.Status_1_Unused);
PARAMETER(DTL.Status_2_Unused);
PARAMETER(DTL.Text_75_Unused);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Pallet Master     CH) TYPE(CHGOBJ) FILE(PUB6CPP)           AC2197641;
PARAMETER(DTL.PM_Pallet_Type);
PARAMETER(DTL.PM_Description);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Rental_Y_N);
PARAMETER(DTL.Effective_Date);
PARAMETER(DTL.Product_ID_GTIN);
PARAMETER(DTL.Interchange_Code);
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_Whs_Duns_Number);
PARAMETER(DTL.Contact_Name);
PARAMETER(*MISSING);
PARAMETER(DTL.Status_1_Unused);
PARAMETER(DTL.Status_2_Unused);
PARAMETER(DTL.Text_75_Unused);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


