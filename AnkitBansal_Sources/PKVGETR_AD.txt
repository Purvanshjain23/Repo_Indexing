// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVGETR
// ?Date: 14.08.2025 Time: 02:51:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Load existing header

//?Get Defects/hd
CASE;

// IF CTL.TH Hog Class Type is Not Market
IF CTL.TH_Hog_Class_Type = 'R'/'S';

EXECUTE FUNCTION(Rtv Tattoo Def-10     RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1199885;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(DB1.TH_Tattoo_Number);
PARAMETER(DB1.TH_Kill_Date);
PARAMETER(CTL.Defect_User_1);
PARAMETER(CTL.Defect_User_2);
PARAMETER(CTL.Defect_User_3);
PARAMETER(CTL.Defect_User_4);
PARAMETER(CTL.Defect_User_5);
PARAMETER(CTL.Defect_User_6);
PARAMETER(CTL.Defect_User_7);
PARAMETER(CTL.Defect_User_8);
PARAMETER(CTL.Defect_User_9);
PARAMETER(CTL.Defect_User_10);
PARAMETER(CTL.Defect_HD_user_1);
PARAMETER(CTL.Defect_HD_user_2);
PARAMETER(CTL.Defect_HD_user_3);
PARAMETER(CTL.Defect_HD_user_4);
PARAMETER(CTL.Defect_HD_user_5);
PARAMETER(CTL.Defect_HD_user_6);
PARAMETER(CTL.Defect_HD_user_7);
PARAMETER(CTL.Defect_HD_user_8);
PARAMETER(CTL.Defect_HD_user_9);
PARAMETER(CTL.Defect_HD_user_10);
{
 //?USER: Initialize routine

 // WRK.Defect Count Usr = CND.One
 WRK.Defect_Count_Usr = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Defect Count Usr is One
 IF WRK.Defect_Count_Usr = 1;

 // PAR.Defect User  1 = DB1.DF Defect Code
 PAR.Defect_User_1 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 1 = DB1.TDF Head Defect
 PAR.Defect_HD_user_1 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Two
 WRK.Defect_Count_Usr = 2;

 // IF WRK.Defect Count Usr is Two
 IF WRK.Defect_Count_Usr = 2;

 // PAR.Defect User  2 = DB1.DF Defect Code
 PAR.Defect_User_2 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 2 = DB1.TDF Head Defect
 PAR.Defect_HD_user_2 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Three
 WRK.Defect_Count_Usr = 3;

 // IF WRK.Defect Count Usr is Three
 IF WRK.Defect_Count_Usr = 3;

 // PAR.Defect User  3 = DB1.DF Defect Code
 PAR.Defect_User_3 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 3 = DB1.TDF Head Defect
 PAR.Defect_HD_user_3 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Four
 WRK.Defect_Count_Usr = 4;

 // IF WRK.Defect Count Usr is Four
 IF WRK.Defect_Count_Usr = 4;

 // PAR.Defect User  4 = DB1.DF Defect Code
 PAR.Defect_User_4 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 4 = DB1.TDF Head Defect
 PAR.Defect_HD_user_4 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Five
 WRK.Defect_Count_Usr = 5;

 // IF WRK.Defect Count Usr is Five
 IF WRK.Defect_Count_Usr = 5;

 // PAR.Defect User  5 = DB1.DF Defect Code
 PAR.Defect_User_5 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 5 = DB1.TDF Head Defect
 PAR.Defect_HD_user_5 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Six
 WRK.Defect_Count_Usr = 6;

 // IF WRK.Defect Count Usr is Six
 IF WRK.Defect_Count_Usr = 6;

 // PAR.Defect User  6 = DB1.DF Defect Code
 PAR.Defect_User_6 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 6 = DB1.TDF Head Defect
 PAR.Defect_HD_user_6 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Seven
 WRK.Defect_Count_Usr = 7;

 // IF WRK.Defect Count Usr is Seven
 IF WRK.Defect_Count_Usr = 7;

 // PAR.Defect User  7 = DB1.DF Defect Code
 PAR.Defect_User_7 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 7 = DB1.TDF Head Defect
 PAR.Defect_HD_user_7 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Eight
 WRK.Defect_Count_Usr = 8;

 // IF WRK.Defect Count Usr is Eight
 IF WRK.Defect_Count_Usr = 8;

 // PAR.Defect User  8 = DB1.DF Defect Code
 PAR.Defect_User_8 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 8 = DB1.TDF Head Defect
 PAR.Defect_HD_user_8 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Nine
 WRK.Defect_Count_Usr = 9;

 // IF WRK.Defect Count Usr is Nine
 IF WRK.Defect_Count_Usr = 9;

 // PAR.Defect User  9 = DB1.DF Defect Code
 PAR.Defect_User_9 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 9 = DB1.TDF Head Defect
 PAR.Defect_HD_user_9 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Ten
 WRK.Defect_Count_Usr = 10;

 // IF WRK.Defect Count Usr is Ten
 IF WRK.Defect_Count_Usr = 10;

 // PAR.Defect User 10 = DB1.DF Defect Code
 PAR.Defect_User_10 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 10 = DB1.TDF Head Defect
 PAR.Defect_HD_user_10 = DB1.TDF_Head_Defect;

 // WRK.Defect Count Usr = CND.Eleven
 WRK.Defect_Count_Usr = 11;

 QUIT;

 ENDIF;

}


//?Get Defects/hd
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Defect User  1 = CON.*BLANK
CTL.Defect_User_1 = *BLANK;

// CTL.Defect User  2 = CON.*BLANK
CTL.Defect_User_2 = *BLANK;

// CTL.Defect User  3 = CON.*BLANK
CTL.Defect_User_3 = *BLANK;

// CTL.Defect User  4 = CON.*BLANK
CTL.Defect_User_4 = *BLANK;

// CTL.Defect User  5 = CON.*BLANK
CTL.Defect_User_5 = *BLANK;

// CTL.Defect User  6 = CON.*BLANK
CTL.Defect_User_6 = *BLANK;

// CTL.Defect User  7 = CON.*BLANK
CTL.Defect_User_7 = *BLANK;

// CTL.Defect User  8 = CON.*BLANK
CTL.Defect_User_8 = *BLANK;

// CTL.Defect User  9 = CON.*BLANK
CTL.Defect_User_9 = *BLANK;

// CTL.Defect User 10 = CON.*BLANK
CTL.Defect_User_10 = *BLANK;

// CTL.Defect HD user 1 = CON.*ZERO
CTL.Defect_HD_user_1 = *ZERO;

// CTL.Defect HD user 2 = CON.*ZERO
CTL.Defect_HD_user_2 = *ZERO;

// CTL.Defect HD user 3 = CON.*ZERO
CTL.Defect_HD_user_3 = *ZERO;

// CTL.Defect HD user 4 = CON.*ZERO
CTL.Defect_HD_user_4 = *ZERO;

// CTL.Defect HD user 5 = CON.*ZERO
CTL.Defect_HD_user_5 = *ZERO;

// CTL.Defect HD user 6 = CON.*ZERO
CTL.Defect_HD_user_6 = *ZERO;

// CTL.Defect HD user 7 = CON.*ZERO
CTL.Defect_HD_user_7 = *ZERO;

// CTL.Defect HD user 8 = CON.*ZERO
CTL.Defect_HD_user_8 = *ZERO;

// CTL.Defect HD user 9 = CON.*ZERO
CTL.Defect_HD_user_9 = *ZERO;

// CTL.Defect HD user 10 = CON.*ZERO
CTL.Defect_HD_user_10 = *ZERO;

ENDIF;

// CTL.PD Producer Code = PAR.PD Producer Code
CTL.PD_Producer_Code = PAR.PD_Producer_Code;

// CTL.PL Location Code = PAR.PL Location Code
CTL.PL_Location_Code = PAR.PL_Location_Code;

// CTL.HC Class Code = PAR.HC Class Code
CTL.HC_Class_Code = PAR.HC_Class_Code;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HC Class Code = PAR.HC Class Code
WRK.HC_Class_Code = PAR.HC_Class_Code;

//?USER: Initialize subfile record (old record)

// RCD.TD Avg Live Wgt = RCD.TST Wgt / RCD.TST Head *
RCD.TD_Avg_Live_Wgt = RCD.TST_Wgt / RCD.TST_Head;

// RCD.Head Total USR = RCD.TST Head
RCD.Head_Total_USR = RCD.TST_Head;

// RCD.Weight Tot USR = RCD.TST Wgt
RCD.Weight_Tot_USR = RCD.TST_Wgt;

EXECUTE FUNCTION(Rtv Pen Type          RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1170335;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(WRK.Pen_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Manual / Live Scale
CASE;

// IF DB2.TST Record Created Status is Manual Record
IF DB2.TST_Record_Created_Status = 'M';

// RCD.@Desc 15 = CON.Manual Entry
RCD.@Desc_15 = 'Manual Entry';

//?Manual / Live Scale
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Desc 15 = CON.Live Scale
RCD.@Desc_15 = 'Live Scale';

ENDIF;

//?Scale ticket printed or not
CASE;

// IF DB2.RS Record Status is Active
IF DB2.RS_Record_Status = 'A';

// RCD.@Desc 30 = WRK.Blank USR
RCD.@Desc_30 = WRK.Blank_USR;

//?Scale ticket printed or not
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Desc 30 = CON.Printed
RCD.@Desc_30 = 'Printed';

ENDIF;

//?USER: Validate header non-key fields

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(CTL.TH_Hog_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?F4  on Defects
DO;

CASE;

// IF PGM.*Cursor field <IS> CTL.Defect User  1
IF PGM.*Cursor_field = CTL.Defect_User_1;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_1);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  2
IF PGM.*Cursor_field = CTL.Defect_User_2;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_2);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  3
IF PGM.*Cursor_field = CTL.Defect_User_3;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_3);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  4
IF PGM.*Cursor_field = CTL.Defect_User_4;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_4);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  5
IF PGM.*Cursor_field = CTL.Defect_User_5;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_5);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  6
IF PGM.*Cursor_field = CTL.Defect_User_6;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_6);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  7
IF PGM.*Cursor_field = CTL.Defect_User_7;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_7);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  8
IF PGM.*Cursor_field = CTL.Defect_User_8;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_8);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User  9
IF PGM.*Cursor_field = CTL.Defect_User_9;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_9);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> CTL.Defect User 10
IF PGM.*Cursor_field = CTL.Defect_User_10;

// AND CTL.*CMD key is *Prompt
AND CTL.*CMD_key = '04';

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(CTL.Defect_User_10);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDDO;

//?Validate Defects
CASE;

// IF WRK.HC Defect Required is Yes
IF WRK.HC_Defect_Required = 'Y';

//?val def 1
CASE;

// IF CTL.Defect User  1 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 1 is Not Zero
OR CTL.Defect_HD_user_1 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_1);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_1);

ENDIF;

ENDIF;

//?val def 2
CASE;

// IF CTL.Defect User  2 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 2 is Not Zero
OR CTL.Defect_HD_user_2 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_2);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_2);

ENDIF;

ENDIF;

//?val def 3
CASE;

// IF CTL.Defect User  3 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 3 is Not Zero
OR CTL.Defect_HD_user_3 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_3);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_3);

ENDIF;

ENDIF;

//?val def 4
CASE;

// IF CTL.Defect User  4 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 4 is Not Zero
OR CTL.Defect_HD_user_4 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_4);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_4);

ENDIF;

ENDIF;

//?val def 5
CASE;

// IF CTL.Defect User  5 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 5 is Not Zero
OR CTL.Defect_HD_user_5 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_5);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_5);

ENDIF;

ENDIF;

//?val def 6
CASE;

// IF CTL.Defect User  6 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 6 is Not Zero
OR CTL.Defect_HD_user_6 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_6);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_6);

ENDIF;

ENDIF;

//?val def 7
CASE;

// IF CTL.Defect User  7 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 7 is Not Zero
OR CTL.Defect_HD_user_7 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_7);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_7);

ENDIF;

ENDIF;

//?val def 8
CASE;

// IF CTL.Defect User  8 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 8 is Not Zero
OR CTL.Defect_HD_user_8 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_8);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_8);

ENDIF;

ENDIF;

//?val def 9
CASE;

// IF CTL.Defect User  9 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 9 is Not Zero
OR CTL.Defect_HD_user_9 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_9);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_9);

ENDIF;

ENDIF;

//?val def 10
CASE;

// IF CTL.Defect User 10 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

// OR CTL.Defect HD user 10 is Not Zero
OR CTL.Defect_HD_user_10 <> *ZERO;

EXECUTE FUNCTION(Val Hog Defect        RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1200185;
PARAMETER(CTL.Defect_User_10);
PARAMETER(WRK.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

}


CASE;

// IF WRK.*Return code is Record Found
IF WRK.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Defect Not Found'
ERROR(PRK0752);
MSGPARM(CTL.Defect_User_10);

ENDIF;

ENDIF;

//?val def as being required
CASE;

// IF CTL.Defect User  1 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  2 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  3 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  4 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  5 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  6 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  7 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  8 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User  9 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF CTL.Defect User 10 NE WRK.Blank Usr 1 fld Usr
IF CTL.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

//?val def as being required
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Defect required for Class Code.'
ERROR(PRK0357);

ENDIF;

ENDIF;

//?class code validation to pen type
CASE;

// IF CTL.HC Class Code NE WRK.HC Class Code
IF CTL.HC_Class_Code <> WRK.HC_Class_Code;

CASE;

// IF CTL.TH Hog Class Type NE WRK.Pen Type
IF CTL.TH_Hog_Class_Type <> WRK.Pen_Type;

// Send error message - 'Class code &1 type &2 not the same as pen type &3.'
ERROR(PRK0608);
MSGPARM(CTL.HC_Class_Code);
MSGPARM(CTL.TH_Hog_Class_Type);
MSGPARM(WRK.Pen_Type);

QUIT;

ENDIF;

ENDIF;

CASE;

// IF CTL.TH Scale Ticket Sts is Printed
IF CTL.TH_Scale_Ticket_Sts = 'P';

// CTL.TH Scale Ticket Sts = CND.Reprint
CTL.TH_Scale_Ticket_Sts = 'R';

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF RCD.TST Head is Not Zero
IF RCD.TST_Head <> *ZERO;

// RCD.TD Avg Live Wgt = RCD.TST Wgt / RCD.TST Head *
RCD.TD_Avg_Live_Wgt = RCD.TST_Wgt / RCD.TST_Head;

ENDIF;

//?RMC    2/23/06 Wt required if Producer not being weighed on Truck Scl
//?       added this to match the Create function  PKMBE1R
EXECUTE FUNCTION(Rtv Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1241888;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(LCL.PL_Truck_Scale_Wgh_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Weight is req for External Hogs and all pc uploaded hogs
CASE;

// IF RCD.TST Wgt is Zeros
IF RCD.TST_Wgt = *ZERO;

// AND CTL.TH Source Type is External
AND ( ( CTL.TH_Source_Type = 'E';

// OR RCD.TST Record Created Status is PC Uploaded Record
OR RCD.TST_Record_Created_Status = 'P' );

// OR CTL.TH Source Type is Internal
OR ( CTL.TH_Source_Type = 'I';

// AND CTL.TH Recalc Live Wgt is EQ Zero
AND CTL.TH_Recalc_Live_Wgt = *ZERO ) );

//?RMC - 2/23/06 added this case
CASE;

// IF LCL.PL Truck Scale Wgh Sts is No
IF LCL.PL_Truck_Scale_Wgh_Sts = 'N';

// Send error message - 'Weight is Required'
ERROR(PRK0362);
MSGPARM(RCD.TST_Wgt);

ENDIF;

ENDIF;

CASE;

// IF CTL.TH Scale Ticket Sts is Printed
IF CTL.TH_Scale_Ticket_Sts = 'P';

// CTL.TH Scale Ticket Sts = CND.Reprint
CTL.TH_Scale_Ticket_Sts = 'R';

ENDIF;

//?CALC: Subfile record function fields

CTL.Head_Received_SUM = SUM(RCD.TST_Head);

CTL.Weight_SUM = SUM(RCD.TST_Wgt);

//?Manual / Live Scale
CASE;

// IF RCD.TST Record Created Status is Manual Record
IF RCD.TST_Record_Created_Status = 'M';

// RCD.@Desc 15 = CON.Manual Entry
RCD.@Desc_15 = 'Manual Entry';

//?Manual / Live Scale
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Desc 15 = CON.Live Scale
RCD.@Desc_15 = 'Live Scale';

ENDIF;

//?Scale ticket printed or not
CASE;

// IF RCD.RS Record Status is Active
IF RCD.RS_Record_Status = 'A';

// RCD.@Desc 30 = WRK.Blank USR
RCD.@Desc_30 = WRK.Blank_USR;

//?Scale ticket printed or not
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Desc 30 = CON.Printed
RCD.@Desc_30 = 'Printed';

ENDIF;

//?CALC: Header function fields

// CTL.TH Avg Live Wgt = CTL.TH Live Wgt / CTL.Head Received  SUM *
CTL.TH_Avg_Live_Wgt = CTL.TH_Live_Wgt / CTL.Head_Received_SUM;

//?USER: Change header DBF record

EXECUTE FUNCTION(Chg TH when Rprnt Scl CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1184118;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.Head_Received_SUM);
PARAMETER(CTL.Weight_SUM);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Scale_Ticket_Sts);
PARAMETER(CTL.TH_Hog_Class_Type);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.Defect_User_1);
PARAMETER(CTL.Defect_User_2);
PARAMETER(CTL.Defect_User_3);
PARAMETER(CTL.Defect_User_4);
PARAMETER(CTL.Defect_User_5);
PARAMETER(CTL.Defect_User_6);
PARAMETER(CTL.Defect_User_7);
PARAMETER(CTL.Defect_User_8);
PARAMETER(CTL.Defect_User_9);
PARAMETER(CTL.Defect_User_10);
PARAMETER(CTL.Defect_HD_user_1);
PARAMETER(CTL.Defect_HD_user_2);
PARAMETER(CTL.Defect_HD_user_3);
PARAMETER(CTL.Defect_HD_user_4);
PARAMETER(CTL.Defect_HD_user_5);
PARAMETER(CTL.Defect_HD_user_6);
PARAMETER(CTL.Defect_HD_user_7);
PARAMETER(CTL.Defect_HD_user_8);
PARAMETER(CTL.Defect_HD_user_9);
PARAMETER(CTL.Defect_HD_user_10);
{
 //?USER: Processing before Data read

 //?susan review change tattoo header
 //?USER: Processing after Data read

 EXECUTE FUNCTION(Rtv/Chg for reprint   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1184114;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Live_Wgt);
 {
  //?USER: Process Data record

  //? Subtract original head count
  // WRK.BOL Head Received = DB1.BOL Head Received - PAR.Head Total USR
  WRK.BOL_Head_Received = DB1.BOL_Head_Received - PAR.Head_Total_USR;

  //? Add new head count
  // WRK.BOL Head Received = WRK.BOL Head Received + PAR.BOL Head Received
  WRK.BOL_Head_Received = WRK.BOL_Head_Received + PAR.BOL_Head_Received;

  // WRK.BOL Live Wgt Received = DB1.BOL Live Wgt Received
  WRK.BOL_Live_Wgt_Received = DB1.BOL_Live_Wgt_Received;

  //?Calculate freight based on the unit of measure
  // WRK.BOL Freight Amt = DB1.BOL Freight Amt
  WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

  EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  {
   //?USER: Initialize routine

   // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
   PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

   // PAR.Held Over Records Y/N = CND.No
   PAR.Held_Over_Records_Y_N = 'N';

   // PAR.Tattoo is paid Usr = CND.No
   PAR.Tattoo_is_paid_Usr = 'N';

   //?USER: Process Data record

   //?If one tattoo is paid but freight was spread then accumulate
   //?what is paid, for held over respread problem
   //?when this probelm goes away, then just flag that there is one paid
   CASE;

   // IF DB1.TH Payment Sts is Paid Anything
   IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

   //?CHECK IF FREIGHT AMOUNT IS IN RECORD
   CASE;

   // IF DB1.TH Freight Amount is Not Zeros
   IF DB1.TH_Freight_Amount <> *ZERO;

   // PAR.Tattoo is paid Usr = CND.Yes
   PAR.Tattoo_is_paid_Usr = 'Y';

   ENDIF;

   // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
   PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?CHECK FOR HELD OVER RECORD
   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // OR DB1.TH Held Over is greater than 0
   OR DB1.TH_Held_Over > *ZERO;

   // PAR.Held Over Records Y/N = CND.Yes
   PAR.Held_Over_Records_Y_N = 'Y';

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.BOL Trucker Payment Sts is Not Paid including Blank
  IF DB1.BOL_Trucker_Payment_Sts = *BLANK/'MT'/'ST';

  // AND WRK.Tattoo is paid Usr is No
  AND WRK.Tattoo_is_paid_Usr = 'N';

  // Call program Clc Freight Amt       XF.
  CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);

  ENDIF;

  CASE;

  // IF WRK.BOL Freight Amt is Not Zeros
  IF WRK.BOL_Freight_Amt <> *ZERO;

  // AND WRK.BOL Head Received is Greater then Zero
  AND WRK.BOL_Head_Received > *ZERO;

  // AND DB1.BOL Trucker Payment Sts is Blank
  AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

  // WRK.BOL Trucker Payment Sts = CND.Select Trucker
  WRK.BOL_Trucker_Payment_Sts = 'ST';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
  WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

  ENDIF;

  EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(DB1.BOL_Pln_Delv_Date);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 //?E00144 slm 061108 ALLOW ON MARKET AND RESALE
 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Crt Tattoo Def-10     IF) TYPE(EXCINTFUN)                      AB1199890;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Defect_User_1);
 PARAMETER(PAR.Defect_User_2);
 PARAMETER(PAR.Defect_User_3);
 PARAMETER(PAR.Defect_User_4);
 PARAMETER(PAR.Defect_User_5);
 PARAMETER(PAR.Defect_User_6);
 PARAMETER(PAR.Defect_User_7);
 PARAMETER(PAR.Defect_User_8);
 PARAMETER(PAR.Defect_User_9);
 PARAMETER(PAR.Defect_User_10);
 PARAMETER(PAR.Defect_HD_user_1);
 PARAMETER(PAR.Defect_HD_user_2);
 PARAMETER(PAR.Defect_HD_user_3);
 PARAMETER(PAR.Defect_HD_user_4);
 PARAMETER(PAR.Defect_HD_user_5);
 PARAMETER(PAR.Defect_HD_user_6);
 PARAMETER(PAR.Defect_HD_user_7);
 PARAMETER(PAR.Defect_HD_user_8);
 PARAMETER(PAR.Defect_HD_user_9);
 PARAMETER(PAR.Defect_HD_user_10);
 PARAMETER(DB1.HC_Class_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Del Tattoo Def    RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1199889;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Dlt Tattoo Defect     DO) TYPE(DLTOBJ) FILE(PKDZREP)           AB1197900;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.DF_Defect_Code);
  }

  //?Defect 1
  CASE;

  // IF PAR.Defect User  1 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_1 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_1);
  PARAMETER(PAR.Defect_HD_user_1);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 2
  CASE;

  // IF PAR.Defect User  2 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_2 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_2);
  PARAMETER(PAR.Defect_HD_user_2);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 3
  CASE;

  // IF PAR.Defect User  3 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_3 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_3);
  PARAMETER(PAR.Defect_HD_user_3);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 4
  CASE;

  // IF PAR.Defect User  4 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_4 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_4);
  PARAMETER(PAR.Defect_HD_user_4);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 5
  CASE;

  // IF PAR.Defect User  5 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_5 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_5);
  PARAMETER(PAR.Defect_HD_user_5);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 6
  CASE;

  // IF PAR.Defect User  6 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_6 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_6);
  PARAMETER(PAR.Defect_HD_user_6);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 7
  CASE;

  // IF PAR.Defect User  7 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_7 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_7);
  PARAMETER(PAR.Defect_HD_user_7);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 8
  CASE;

  // IF PAR.Defect User  8 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_8 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_8);
  PARAMETER(PAR.Defect_HD_user_8);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 9
  CASE;

  // IF PAR.Defect User  9 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_9 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_9);
  PARAMETER(PAR.Defect_HD_user_9);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

  //?Defect 10
  CASE;

  // IF PAR.Defect User 10 NE WRK.Blank Usr 1 fld Usr
  IF PAR.Defect_User_10 <> WRK.Blank_Usr_1_fld_Usr;

  EXECUTE FUNCTION(Crt Tattoo Defect     CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1197898;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Defect_User_10);
  PARAMETER(PAR.Defect_HD_user_10);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Hog Defect Class  RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1286918;
   PARAMETER(DB1.DF_Defect_Code);
   PARAMETER(DB1.TDF_Classification_Defs);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg TST, TD on reprnt CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1162634;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TST_Sequence_Number);
PARAMETER(RCD.TST_Head);
PARAMETER(RCD.TST_Wgt);
PARAMETER(RCD.TST_Wgt_Date);
PARAMETER(RCD.TST_Wgt_Time);
PARAMETER(RCD.TST_Wgt_Hour);
PARAMETER(RCD.TST_Last_Zero_Date);
PARAMETER(RCD.TST_Last_Zero_Time);
PARAMETER(RCD.TST_Record_Created_Status);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data read

 //?SUSAN REVIEW BEFORE change of the tattoo scale
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 //?susan review tattoo scale ticket update
 //?Get total weight and head  of ts for this pen
 EXECUTE FUNCTION(Rtv Scl Tkt Totals/Pen Rt) TYPE(RTVOBJ) FILE(PKB3CPP)          AB1178680;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Head_Total_Usr_2);
 PARAMETER(WRK.Weight_Total_Usr_2);
 {
  //?USER: Initialize routine

  // PAR.Head Total USR = CON.*ZERO
  PAR.Head_Total_USR = *ZERO;

  // PAR.Weight Tot USR = CON.*ZERO
  PAR.Weight_Tot_USR = *ZERO;

  //?USER: Processing if Data record not found

  // PAR.Head Total USR = CON.*ZERO
  PAR.Head_Total_USR = *ZERO;

  // PAR.Weight Tot USR = CON.*ZERO
  PAR.Weight_Tot_USR = *ZERO;

  //?USER: Process Data record

  // PAR.Head Total USR = PAR.Head Total USR + DB1.TST Head
  PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TST_Head;

  // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TST Wgt
  PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TST_Wgt;

 }

 //?Update total weight and head for this pen
 EXECUTE FUNCTION(Rtv/Chg Td Wh Rprnt2  Rt) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1178681;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Weight_Total_Usr_2);
 PARAMETER(WRK.Head_Total_Usr_2);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // WRK.TD Avg Live Wgt = PAR.TD Live Wgt / PAR.TD Pen Head *
  WRK.TD_Avg_Live_Wgt = PAR.TD_Live_Wgt / PAR.TD_Pen_Head;

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(PAR.TD_Live_Wgt);
  PARAMETER(PAR.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(WRK.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Processing if Data record not found

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  {
   //?USER: Process Data record

   // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
   WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

   // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
   WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.Pen_Description);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(WRK.Pen_Current_Head);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Exit processing

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?USER: Exit program processing

//?susan review exit pgm
//?If Not F3 then Reprint Scale Ticket
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

//?If Not F3 then Reprint Scale Ticket
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(C2330 Rec of all Tst tatt) TYPE(EXCINTFUN)                     AB1191147;
{
 //?Execute internal function

 //?01/29/97   SLM     Count only the scale tickets for this tattoo
}


//?MOVE RECOUNT OF TATTOO HEADER PRIOR TO PRINT OF SCALE TICKET
// Call program Chg BOL/THDR Rec/Wgt  XF.
CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

//?Mark the Scale Ticket as Unprinted.
EXECUTE FUNCTION(Rtv/Chg for Reprint   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1156432;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo Scale Tkt  CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1113770;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(DB1.TST_Head);
 PARAMETER(DB1.TST_Wgt);
 PARAMETER(DB1.TST_Wgt_Date);
 PARAMETER(DB1.TST_Wgt_Time);
 PARAMETER(DB1.TST_Wgt_Hour);
 PARAMETER(DB1.TST_Last_Zero_Date);
 PARAMETER(DB1.TST_Last_Zero_Time);
 PARAMETER(DB1.TST_Record_Created_Status);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER('A');
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?AND Print the scale ticket
EXECUTE FUNCTION(Prt Scale Tkt         IF) TYPE(EXCINTFUN)                      AB1231827;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
{
 //?Execute internal function

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPESCLPRT');
 PARAMETER(LCL.System_Value_Alpha_USR);

 // LCL.PRT Printer Device = LCL.System Value Alpha    USR
 LCL.PRT_Printer_Device = LCL.System_Value_Alpha_USR;

 // Execute command - 'OVRPRTF Printer'
 EXECUTE COMMAND(PRK0941);
 PARAMETER('PKO8PFR$');
 PARAMETER(LCL.PRT_Printer_Device);

 // Call program Prt Scale Tkt         PF.
 CALL PROGRAM(Prt Scale Tkt         PF) ('PKO8PFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);

}


//?Crt/Upd Update Tattoo Header buy order
EXECUTE FUNCTION(Rtv TST,Crt Ttt Dtl2  RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1178711;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Scale_Ticket_Sts);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.TH Scale Ticket Sts is Not Printed
 IF PAR.TH_Scale_Ticket_Sts = 'N';

 //?BOH - Change Status to Locked so BOH info may not be changed!
 EXECUTE FUNCTION(Rtv/Chg BOH Status     RT) TYPE(RTVOBJ) FILE(PKAWCPP)          AB1145779;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER('L');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg BOH Status        CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1145821;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOH_Buy_Order_Date);
  PARAMETER(DB1.BOH_Kill_Date);
  PARAMETER(DB1.BOH_Payment_Type);
  PARAMETER(DB1.BOH_Buy_Order_Type);
  PARAMETER(DB1.BOH_Market_Add_Deduct);
  PARAMETER(PAR.BOH_Status);
  PARAMETER(DB1.BOH_Delv_Plan_Printed);
  PARAMETER(DB1.BOH_Quote_Price_Type);
  PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.PPWS_Company_Number);
  PARAMETER(DB1.CW_Year);
  PARAMETER(DB1.CW_Week_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.PC_Contract_Code);
  PARAMETER(DB1.PSC_Sub_Contract_Code);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.PO_Option_Code);
  PARAMETER(DB1.CMP_Program_Code);
  PARAMETER(DB1.HB_Buyer_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update TH Scale Ticket Sts with P
 EXECUTE FUNCTION(Rtv/Chg f/SclTk Reprnt RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1156408;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Ttto's SclTckPrt  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190813;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER('P');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Change record status to D = Flag for Purge
 EXECUTE FUNCTION(Chg Tattoo Scale Tkt  CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1113770;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(DB1.TST_Head);
 PARAMETER(DB1.TST_Wgt);
 PARAMETER(DB1.TST_Wgt_Date);
 PARAMETER(DB1.TST_Wgt_Time);
 PARAMETER(DB1.TST_Wgt_Hour);
 PARAMETER(DB1.TST_Last_Zero_Date);
 PARAMETER(DB1.TST_Last_Zero_Time);
 PARAMETER(DB1.TST_Record_Created_Status);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER('D');
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


CASE;

// IF CTL.TH Scale Ticket Sts is Not Printed
IF CTL.TH_Scale_Ticket_Sts = 'N';

EXECUTE FUNCTION(Rtv Tattoo Hdr Act Comm) TYPE(RTVOBJ) FILE(PKA1CPP)            AB1161771;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(WRK.TH_AP_Voucher_Document#);
PARAMETER(WRK.TH_Voucher_Payment_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Crt Tattoo Action Comm XF.
CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.Head_Received_SUM);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('RH');
PARAMETER(*ZERO);

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Scale Ticket for Tattoo &1 has been processed and printed.'
MESSAGE(PRK0370 *INFO);
MSGPARM(CTL.TH_Tattoo_Number);

RETURN;

ENDIF;

ENDIF;

// Call program Chg BOL/THDR Rec/Wgt  XF.
CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

