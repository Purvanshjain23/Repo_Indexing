// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKRSE1R
// ?Date: 14.08.2025 Time: 02:50:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? CST/ITM Santosh 04/14/25 - Recompilation due to DDS to DDL conversion of
//?    "PKCWREP - G/L Account Codes".
//? 4/20/2021 JBB WI440  - M3 to JDE Financials
//?                        When Live with E1 flag is Y, do not process
//?                        F15 logic.
//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
//?R12636 DN  02/23/18 - Freight Variance Load ID
//?- Added condition 'F' Freight to CGL Sub-Account Type field as a
//?  result added 'F' sts to 'NOT *BLANK' LST condition. Recompile
//?  only. No logic changed.
//?R9083  RMC 06/05/17 - Added F15 to select M3 Accts.
ENDDO;

// WRK.Blank USR = CON.*BLANK
WRK.Blank_USR = *BLANK;

// WRK.Return Code USR = CND.*Normal
WRK.Return_Code_USR = *BLANK;

//?Retrieve Live with E1 flag from Company Values file
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('E1LIVE');
PARAMETER(LCL.Live_with_E1);

//?USER: Initialize key screen

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize detail screen (new record)

// DTL.CGL Control Sts = CND.User
DTL.CGL_Control_Sts = 'U';

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

// DTL.Condition Name 1 USR = Condition name of DTL.CGl System Reference Code
DTL.Condition_Name_1_USR = RTVCND(DTL.CGl_System_Reference_Code);

// DTL.Condition Name 2 USR = Condition name of DTL.CGL Account Category Code
DTL.Condition_Name_2_USR = RTVCND(DTL.CGL_Account_Category_Code);

// DTL.Condition Name 3 USR = Condition name of DTL.CGL Control Sts
DTL.Condition_Name_3_USR = RTVCND(DTL.CGL_Control_Sts);

// DTL.Balance Sheet Act Dsc USR = Condition name of DTL.CGL Balance Sheet Act Sts
DTL.Balance_Sheet_Act_Dsc_USR = RTVCND(DTL.CGL_Balance_Sheet_Act_Sts);

// DTL.Sub-Acct Type Desc 15 USR = Condition name of DTL.CGL Sub-Account Type
DTL.Sub_Acct_Type_Desc_15_USR = RTVCND(DTL.CGL_Sub_Account_Type);

// Call program Val Company Number    XF.
CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF DB1.CGl GL Acct ID NE WRK.Blank USR
IF DB1.CGl_GL_Acct_ID <> WRK.Blank_USR;

// WRK.CGl GL Acct ID = DTL.CGl GL Acct ID
WRK.CGl_GL_Acct_ID = DTL.CGl_GL_Acct_ID;

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER(DTL.GL_Act_ID_ObjSubDsc_USR);

CASE;

// IF DTL.GL Act ID-Obj,Sub,Dsc USR EQ WRK.Blank USR
IF DTL.GL_Act_ID_ObjSubDsc_USR = WRK.Blank_USR;

CASE;

// IF DTL.CGL Code EQ DTL.CGl GL Acct ID
IF DTL.CGL_Code = DTL.CGl_GL_Acct_ID;

EXECUTE FUNCTION(RTV Dim/Dsc f/CGL Code RT) TYPE(RTVOBJ) FILE(PLB8REP)          AB1335641;
PARAMETER(DB1.CC_Company_Number);
PARAMETER(DB1.CGL_Code);
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(WRK.MCR_M3_Dimension_1);
PARAMETER(WRK.MCR_M3_Dimension_2);
PARAMETER(WRK.MCR_M3_Dimension_3);
PARAMETER(WRK.MCR_M3_Dimension_4);
PARAMETER(WRK.MCR_M3_Dimension_5);
PARAMETER(WRK.MCR_M3_Dimension_6);
PARAMETER(WRK.MCR_M3_Dimension_7);
PARAMETER(WRK.MCR_M3_Account_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv M3 DIM/Dsc f/GLID RT) TYPE(RTVOBJ) FILE(PLB8REP)           AB1326253;
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(WRK.MCR_M3_Dimension_1);
PARAMETER(WRK.MCR_M3_Dimension_2);
PARAMETER(WRK.MCR_M3_Dimension_3);
PARAMETER(WRK.MCR_M3_Dimension_4);
PARAMETER(WRK.MCR_M3_Dimension_5);
PARAMETER(WRK.MCR_M3_Dimension_6);
PARAMETER(WRK.MCR_M3_Dimension_7);
PARAMETER(WRK.MCR_M3_Account_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.GL Act ID-Obj,Sub,Dsc USR = CONCAT(DTL.CGl GL Acct ID,WRK.MCR M3 Account Desc,CON.3)
DTL.GL_Act_ID_ObjSubDsc_USR = DTL.CGl_GL_Acct_ID + WRK.MCR_M3_Account_Desc (3);

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

// DTL.Condition Name 1 USR = Condition name of DTL.CGl System Reference Code
DTL.Condition_Name_1_USR = RTVCND(DTL.CGl_System_Reference_Code);

// DTL.Condition Name 2 USR = Condition name of DTL.CGL Account Category Code
DTL.Condition_Name_2_USR = RTVCND(DTL.CGL_Account_Category_Code);

// DTL.Condition Name 3 USR = Condition name of DTL.CGL Control Sts
DTL.Condition_Name_3_USR = RTVCND(DTL.CGL_Control_Sts);

// DTL.Balance Sheet Act Dsc USR = Condition name of DTL.CGL Balance Sheet Act Sts
DTL.Balance_Sheet_Act_Dsc_USR = RTVCND(DTL.CGL_Balance_Sheet_Act_Sts);

// DTL.Sub-Acct Type Desc 15 USR = Condition name of DTL.CGL Sub-Account Type
DTL.Sub_Acct_Type_Desc_15_USR = RTVCND(DTL.CGL_Sub_Account_Type);

//?SEL: Account Category
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.CGL Account Category Code
IF PGM.*Cursor_field = DTL.CGL_Account_Category_Code;

// Call program Sel Account Cat   OMS SR.
CALL PROGRAM(Sel Account Cat   OMS SR) ('PLRSSRR');
PARAMETER(DTL.CGL_Account_Category_Code);

ENDIF;

ENDIF;

//?VAL: Account Category
CASE;

// IF DTL.CGL Account Category Code NE WRK.Blank USR
IF DTL.CGL_Account_Category_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Account Cat       RT) TYPE(RTVOBJ) FILE(PLBHREP)           AB1308075;
PARAMETER(DTL.CGL_Account_Category_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'G/L Account Category not found.'
ERROR(PRK1269);
MSGPARM(DTL.CGL_Account_Category_Code);

ENDIF;

ENDIF;

//?Select G/L Account
CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

EXECUTE FUNCTION(Rtv Lv/Crc Cost Cntr  RT) TYPE(RTVOBJ) FILE(PKCVREP)           AB1145771;
PARAMETER(DTL.CGL_Account_Company);
PARAMETER(PAR.Cost_Center_Live_USR);
PARAMETER(PAR.Cost_Center_Carc_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.Cost Center Live USR NE WRK.Blank USR
 IF PAR.Cost_Center_Live_USR <> WRK.Blank_USR;

 // AND PAR.Cost Center Carc USR NE WRK.Blank USR
 AND PAR.Cost_Center_Carc_USR <> WRK.Blank_USR;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Cost Center Live USR = DB1.CCC Cost Center
 PAR.Cost_Center_Live_USR = DB1.CCC_Cost_Center;

 // PAR.Cost Center Carc USR = DB1.CCC Cost Center
 PAR.Cost_Center_Carc_USR = DB1.CCC_Cost_Center;

 ENDIF;

}


// WRK.Company Number Alpha Usr = CVTVAR(DTL.CGL Account Company)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.CGL_Account_Company);

// WRK.Cost Center Carc USR = WRK.Cost Center USR
WRK.Cost_Center_Carc_USR = WRK.Cost_Center_USR;

// WRK.GL Act ID-Obj,Sub,Dsc USR = DTL.GL Act ID-Obj,Sub,Dsc USR
WRK.GL_Act_ID_ObjSubDsc_USR = DTL.GL_Act_ID_ObjSubDsc_USR;

// WRK.CGl GL Acct ID = DTL.CGl GL Acct ID
WRK.CGl_GL_Acct_ID = DTL.CGl_GL_Acct_ID;

// Call program Sel Account ID        UP.
CALL PROGRAM(Sel Account ID        UP) ('ACTSEL');
PARAMETER(PGM.*Return_code);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Cost_Center_USR);
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(DTL.GL_Act_ID_ObjSubDsc_USR);

//?if no selection, restore what was there
CASE;

// IF DTL.CGl GL Acct ID EQ WRK.Blank USR
IF DTL.CGl_GL_Acct_ID = WRK.Blank_USR;

// DTL.GL Act ID-Obj,Sub,Dsc USR = WRK.GL Act ID-Obj,Sub,Dsc USR
DTL.GL_Act_ID_ObjSubDsc_USR = WRK.GL_Act_ID_ObjSubDsc_USR;

// DTL.CGl GL Acct ID = WRK.CGl GL Acct ID
DTL.CGl_GL_Acct_ID = WRK.CGl_GL_Acct_ID;

ENDIF;

ENDIF;

//?Select M3 G/L Account  F15
CASE;

// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

// WRK.CGL Code = DTL.CGL Code
WRK.CGL_Code = DTL.CGL_Code;

// WRK.CGl GL Acct ID = DTL.CGl GL Acct ID
WRK.CGl_GL_Acct_ID = DTL.CGl_GL_Acct_ID;

// WRK.GL Act ID-Obj,Sub,Dsc USR = DTL.GL Act ID-Obj,Sub,Dsc USR
WRK.GL_Act_ID_ObjSubDsc_USR = DTL.GL_Act_ID_ObjSubDsc_USR;

// Call program Sel G/L ACCT ID       SL.
CALL PROGRAM(Sel G/L ACCT ID       SL) ('PWCTSRR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.CGL_Code);
PARAMETER(DTL.CGl_GL_Acct_ID);

//?When E1 Live  --> allow f15 - dont update with selection
CASE;

// IF LCL.Live with E1 is No
IF LCL.Live_with_E1 = 'N';

CASE;

// IF DTL.CGl GL Acct ID is Not Blanks
IF DTL.CGl_GL_Acct_ID <> *BLANK;

EXECUTE FUNCTION(Rtv M3 DIM/Dsc f/GLID RT) TYPE(RTVOBJ) FILE(PLB8REP)           AB1326253;
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(WRK.MCR_M3_Dimension_1);
PARAMETER(WRK.MCR_M3_Dimension_2);
PARAMETER(WRK.MCR_M3_Dimension_3);
PARAMETER(WRK.MCR_M3_Dimension_4);
PARAMETER(WRK.MCR_M3_Dimension_5);
PARAMETER(WRK.MCR_M3_Dimension_6);
PARAMETER(WRK.MCR_M3_Dimension_7);
PARAMETER(WRK.MCR_M3_Account_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.GL Act ID-Obj,Sub,Dsc USR = CONCAT(DTL.CGl GL Acct ID,WRK.MCR M3 Account Desc,CON.3)
DTL.GL_Act_ID_ObjSubDsc_USR = DTL.CGl_GL_Acct_ID + WRK.MCR_M3_Account_Desc (3);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.CGl GL Acct ID = WRK.CGl GL Acct ID
DTL.CGl_GL_Acct_ID = WRK.CGl_GL_Acct_ID;

// DTL.GL Act ID-Obj,Sub,Dsc USR = WRK.GL Act ID-Obj,Sub,Dsc USR
DTL.GL_Act_ID_ObjSubDsc_USR = WRK.GL_Act_ID_ObjSubDsc_USR;

ENDIF;

ENDIF;

//?Commented by RMC per Alice on 4/11/01
//?USER: Validate detail screen relations

CASE;

// IF DTL.CGl GL Acct ID NE WRK.Blank USR
IF DTL.CGl_GL_Acct_ID <> WRK.Blank_USR;

// WRK.CGl GL Acct ID = DTL.CGl GL Acct ID
WRK.CGl_GL_Acct_ID = DTL.CGl_GL_Acct_ID;

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(WRK.CGl_GL_Acct_ID);
PARAMETER(DTL.GL_Act_ID_ObjSubDsc_USR);

CASE;

// IF WRK.Return Code USR is Vendor Error
IF WRK.Return_Code_USR = 'ERR';

EXECUTE FUNCTION(Rtv M3 DIM/Dsc f/GLID RT) TYPE(RTVOBJ) FILE(PLB8REP)           AB1326253;
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(WRK.MCR_M3_Dimension_1);
PARAMETER(WRK.MCR_M3_Dimension_2);
PARAMETER(WRK.MCR_M3_Dimension_3);
PARAMETER(WRK.MCR_M3_Dimension_4);
PARAMETER(WRK.MCR_M3_Dimension_5);
PARAMETER(WRK.MCR_M3_Dimension_6);
PARAMETER(WRK.MCR_M3_Dimension_7);
PARAMETER(WRK.MCR_M3_Account_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.MCR M3 Dimension 1 is Entered
IF WRK.MCR_M3_Dimension_1 <> *BLANK;

// DTL.GL Act ID-Obj,Sub,Dsc USR = CONCAT(DTL.CGl GL Acct ID,WRK.MCR M3 Account Desc,CON.3)
DTL.GL_Act_ID_ObjSubDsc_USR = DTL.CGl_GL_Acct_ID + WRK.MCR_M3_Account_Desc (3);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'G/L Account is inactive.  Select another.'
ERROR(PRK0505);
MSGPARM(DTL.GL_Act_ID_ObjSubDsc_USR);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt HPE G/L Account   CR) TYPE(CRTOBJ) FILE(PKCWREP)           AB1143900;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.CGL_Code);
PARAMETER(DTL.CGL_Code_Description);
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(DTL.CGl_System_Reference_Code);
PARAMETER(DTL.CGL_Account_Category_Code);
PARAMETER(DTL.CGL_Control_Sts);
PARAMETER(DTL.CGL_Sub_Account_Type);
PARAMETER(DTL.CGL_Balance_Sheet_Act_Sts);
PARAMETER(DTL.CGL_Account_Company);
PARAMETER(DTL.CGL_Sub_Ledger_Req);
PARAMETER(DTL.CGL_Debit_Credit);
PARAMETER(DTL.CLG_Unused_Sts_2);
PARAMETER(DTL.CLG_Unused_Sts_3);
PARAMETER(DTL.CLG_Unused_Sts_4);
PARAMETER(DTL.CLG_Unused_Sts_5);
PARAMETER(DTL.CLG_Unused_Sts_6);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg HPE G/L Account   CH) TYPE(CHGOBJ) FILE(PKCWREP)           AB1143901;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.CGL_Code);
PARAMETER(DTL.CGL_Code_Description);
PARAMETER(DTL.CGl_GL_Acct_ID);
PARAMETER(DTL.CGl_System_Reference_Code);
PARAMETER(DTL.CGL_Account_Category_Code);
PARAMETER(DTL.CGL_Control_Sts);
PARAMETER(DTL.CGL_Sub_Account_Type);
PARAMETER(DTL.CGL_Balance_Sheet_Act_Sts);
PARAMETER(DTL.CGL_Account_Company);
PARAMETER(DTL.CGL_Sub_Ledger_Req);
PARAMETER(DTL.CGL_Debit_Credit);
PARAMETER(DTL.CLG_Unused_Sts_2);
PARAMETER(DTL.CLG_Unused_Sts_3);
PARAMETER(DTL.CLG_Unused_Sts_4);
PARAMETER(DTL.CLG_Unused_Sts_5);
PARAMETER(DTL.CLG_Unused_Sts_6);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


