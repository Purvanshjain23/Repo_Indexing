// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVGFE1R
// ?Date: 14.08.2025 Time: 03:52:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

// DTL.Authorization Command Ln1 = SUBSTRING(DTL.SPA Authorization Command,CON.1,CON.50)
DTL.Authorization_Command_Ln1 = SUBSTRING(DTL.SPA_Authorization_Command:1:50);

// DTL.Authorization Command Ln2 = SUBSTRING(DTL.SPA Authorization Command,CON.51,CON.50)
DTL.Authorization_Command_Ln2 = SUBSTRING(DTL.SPA_Authorization_Command:51:50);

// DTL.Authorization Command Ln3 = SUBSTRING(DTL.SPA Authorization Command,CON.101,CON.50)
DTL.Authorization_Command_Ln3 = SUBSTRING(DTL.SPA_Authorization_Command:101:50);

// DTL.Authorization Command Ln4 = SUBSTRING(DTL.SPA Authorization Command,CON.151,CON.50)
DTL.Authorization_Command_Ln4 = SUBSTRING(DTL.SPA_Authorization_Command:151:50);

// DTL.Authorization Command Ln5 = SUBSTRING(DTL.SPA Authorization Command,CON.201,CON.50)
DTL.Authorization_Command_Ln5 = SUBSTRING(DTL.SPA_Authorization_Command:201:50);

// DTL.Authorization Command Ln6 = SUBSTRING(DTL.SPA Authorization Command,CON.251,CON.50)
DTL.Authorization_Command_Ln6 = SUBSTRING(DTL.SPA_Authorization_Command:251:50);

EXECUTE FUNCTION(RTV All Secu Encr/Decr RT) TYPE(RTVOBJ) FILE(PVCGREP)          AC2229132;
PARAMETER(DB1.SPA_Authorization_Process);
PARAMETER(DB1.SPA_Process_Environment);
PARAMETER(DTL.SPA_Encr_Decr_key);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Create_Date_Timestamp);
PARAMETER(NLL.Create_User_ID);
PARAMETER(NLL.Create_Program_Name);
PARAMETER(NLL.Update_Date_Timestamp);
PARAMETER(NLL.Update_User_Id);
PARAMETER(NLL.Update_Program_Name);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Decrypted Password
CASE;

// IF DTL.SPA Password is Entered
IF DTL.SPA_Password <> *BLANK;

// LCL.SPA Encry Password    USR = DTL.SPA Password
LCL.SPA_Encry_Password_USR = DTL.SPA_Password;

// DTL.SPA Password = CND.*Not Entered
DTL.SPA_Password = *BLANK;

// Call program Paswrd Encrypt/Decrypt UP.
CALL PROGRAM(Paswrd Encrypt/Decrypt UP) ('PVGIUPR');
PARAMETER('D');
PARAMETER(LCL.SPA_Encry_Password_USR);
PARAMETER(DTL.SPA_Encr_Decr_key);
PARAMETER(DTL.SPA_Password);

ENDIF;

// DTL.SPA IP Address        USR = DTL.SPA IP Address
DTL.SPA_IP_Address_USR = DTL.SPA_IP_Address;

//?USER: Validate detail screen fields

// Execute function Concatenate Cmd Text   US.
EXECUTE FUNCTION(Concatenate Cmd Text   US) TYPE(EXCUSRSRC) ('PVGHUFR');
PARAMETER(DTL.Authorization_Command_Ln1);
PARAMETER(DTL.Authorization_Command_Ln2);
PARAMETER(DTL.Authorization_Command_Ln3);
PARAMETER(DTL.Authorization_Command_Ln4);
PARAMETER(DTL.Authorization_Command_Ln5);
PARAMETER(DTL.Authorization_Command_Ln6);
PARAMETER(DTL.SPA_Authorization_Command);
{
 /free
 #OFAAB = #IFGAB + #IFHAB + #IFIAB + #IFJAB + #IFKAB + #IFLAB ;
 /end-free
}


//?User ID, Password are entered and Encryption Key is blank
CASE;

// IF DTL.SPA User ID is Entered
IF ( DTL.SPA_User_ID <> *BLANK;

// OR DTL.SPA Password is Entered
OR DTL.SPA_Password <> *BLANK );

// AND DTL.SPA Encr/Decr key is Not Entered
AND DTL.SPA_Encr_Decr_key = *BLANK;

// Send error message - 'Encryption/Decryption key to be entered.'
ERROR(USR5499);
MSGPARM(DTL.SPA_Encr_Decr_key);

QUIT;

ENDIF;

//?Password is Blan and Encryption Key is Entered
CASE;

// IF DTL.SPA Password is *Not Entered
IF DTL.SPA_Password = *BLANK;

// AND DTL.SPA Encr/Decr key is Entered
AND DTL.SPA_Encr_Decr_key <> *BLANK;

// Send error message - 'Password Invalid'
ERROR(USR3254);
MSGPARM(DTL.SPA_Password);

QUIT;

ENDIF;

// Execute function Validate Password      US.
EXECUTE FUNCTION(Validate Password      US) TYPE(EXCUSRSRC) ('PVHYUFR');
PARAMETER(DTL.SPA_Password);
PARAMETER(LCL.Pswd_Validation_Sts_USR);
{
 dl_UpCase_Start   S              2  0 inz(0)
 dl_Upcase_scan    S              2  0 inz(0)
 dl_upcase_string  S             26    inz(' ')
 dl_upcase_char    S              1    inz(' ')
 dl_upcase_count   S              2  0 inz(1)

 dl_LwCase_Start   S              2  0 inz(0)
 dl_Lwcase_scan    S              2  0 inz(0)
 dl_Lwcase_string  S             26    inz(' ')
 dl_Lwcase_char    S              1    inz(' ')
 dl_Lwcase_count   S              2  0 inz(1)

 dl_Num_Start      S              2  0 inz(0)
 dl_Num_scan       S              2  0 inz(0)
 dl_Num_string     S             10    inz(' ')
 dl_Num_char       S              1    inz(' ')
 dl_Num_count      S              2  0 inz(1)

 dl_space          S              1    inz(' ')
 dl_space_Count    S              2  0 inz(0)

 dl_Spc_Start      S              2  0 inz(0)
 dl_Spc_scan       S              2  0 inz(0)
 dl_Spc_string     S             30    inz(' ')
 dl_Spc_char       S              1    inz(' ')
 dl_Spc_count      S              2  0 inz(1)

 /free

 #OQQSC = *Blanks ;

 // Check for 15 character length
 If %subst(#IFDAB : 15 : 1) = *Blanks ;
 #OQQSC = 'L';
 Else;
 // Check for empty spaces
 l_space_Count = 1;
 Dow l_space_Count < 15 ;
 If %subst(#IFDAB : l_space_Count : 1) = *Blanks ;
 #OQQSC = 'B';
 leave;
 Endif;
 l_space_Count = l_space_Count + 1;
 Enddo;
 Endif;

 // Check for Uppercase letter
 If #OQQSC = ' ';
 l_upcase_string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
 l_UpCase_Start = 1;
 l_upcase_char = %subst(l_upcase_string : l_UpCase_Start : 1);
 l_upcase_count = 0 ;

 Dow l_upcase_count < 26;
 l_upcase_scan = %scan(l_upcase_char : #IFDAB);
 If l_upcase_scan > 0;
 #OQQSC = ' ';
 leave;
 Else;
 #OQQSC = 'U';
 Endif;
 l_UpCase_Start = l_UpCase_Start + 1;
 l_upcase_count = l_upcase_count + 1;
 If l_UpCase_Start > 26 ;
 leave;
 Endif;
 l_Upcase_char = %subst(l_Upcase_string : l_UpCase_Start : 1);
 Enddo;
 Endif;

 // Check for Lowercase letter
 If #OQQSC = ' ';
 l_Lwcase_string = 'abcdefghijklmnopqrstuvwxyz';
 l_LwCase_Start = 1;
 l_Lwcase_char = %subst(l_Lwcase_string : l_LwCase_Start : 1);
 l_Lwcase_count = 0;

 Dow l_Lwcase_count < 26;
 l_Lwcase_scan = %scan(l_Lwcase_char : #IFDAB);
 If l_Lwcase_scan > 0;
 #OQQSC = ' ';
 leave;
 Else;
 #OQQSC = 'l';
 Endif;
 l_LwCase_Start = l_LwCase_Start + 1;
 l_Lwcase_count = l_Lwcase_count + 1;
 If l_LwCase_Start > 26 ;
 leave;
 Endif;
 l_Lwcase_char = %subst(l_Lwcase_string : l_LwCase_Start : 1);
 Enddo;
 Endif;

 // Check for Numeric value
 If #OQQSC = ' ';
 l_num_string = '0123456789';
 l_num_Start = 1;
 l_num_char = %subst(l_num_string : l_num_Start : 1);
 l_num_count = 0;

 Dow l_num_count < 10;
 l_num_scan = %scan(l_num_char : #IFDAB);
 If l_num_scan > 0;
 #OQQSC = ' ';
 leave;
 Else;
 #OQQSC = 'N';
 Endif;
 l_num_Start = l_num_Start + 1;
 l_num_count = l_num_count + 1;
 If l_num_Start > 10 ;
 leave;
 Endif;
 l_Num_char = %subst(l_Num_string : l_Num_Start : 1);
 Enddo;
 Endif;

 // Check for Special Character
 If #OQQSC = ' ';
 l_Spc_string = '~!@#$%^&*()_-+={[}]|\:;"<,>.?/';
 l_Spc_Start = 1;
 l_Spc_char = %subst(l_Spc_string : l_Spc_Start : 1);
 l_Spc_count = 0;

 Dow l_Spc_count < 30;
 l_Spc_scan = %scan(l_Spc_char : #IFDAB);
 If l_Spc_scan > 0;
 #OQQSC = ' ';
 leave;
 Else;
 #OQQSC = 'S';
 Endif;
 l_Spc_Start = l_Spc_Start + 1;
 l_Spc_count = l_Spc_count + 1;
 If l_Spc_Start > 30 ;
 leave;
 Endif;
 l_Spc_char = %subst(l_Spc_string : l_Spc_Start : 1);
 Enddo;
 Endif;
 /end-free
}


//?Password Length error
CASE;

// IF LCL.Pswd Validation Sts   USR is Blank Space Error
IF LCL.Pswd_Validation_Sts_USR = 'B';

// Send error message - 'Password should not have blank space.'
ERROR(USR5518);
MSGPARM(DTL.SPA_Password);

//?Password Length error
// IF LCL.Pswd Validation Sts   USR is Length Error
IF LCL.Pswd_Validation_Sts_USR = 'L';

// Send error message - 'Password must be at least 15 characters.'
ERROR(USR5515);
MSGPARM(DTL.SPA_Password);

//?Password Length error
// IF LCL.Pswd Validation Sts   USR is LowerCase Error
IF LCL.Pswd_Validation_Sts_USR = 'l';

// Send error message - 'Password must have one lowercase letter.'
ERROR(USR5519);
MSGPARM(DTL.SPA_Password);

//?Password Length error
// IF LCL.Pswd Validation Sts   USR is Special Character Error
IF LCL.Pswd_Validation_Sts_USR = 'S';

// Send error message - 'Password must have one special character.'
ERROR(USR5521);
MSGPARM(DTL.SPA_Password);

//?Password Length error
// IF LCL.Pswd Validation Sts   USR is UpperCase Error
IF LCL.Pswd_Validation_Sts_USR = 'U';

// Send error message - 'Password must have one uppercase letter.'
ERROR(USR5520);
MSGPARM(DTL.SPA_Password);

//?Password Length error
// IF LCL.Pswd Validation Sts   USR is Numeric Error
IF LCL.Pswd_Validation_Sts_USR = 'N';

// Send error message - 'Password must have one numeric value.'
ERROR(USR5522);
MSGPARM(DTL.SPA_Password);

ENDIF;

//?Encrypt Password
CASE;

// IF DTL.SPA Password is Entered
IF DTL.SPA_Password <> *BLANK;

// Call program Paswrd Encrypt/Decrypt UP.
CALL PROGRAM(Paswrd Encrypt/Decrypt UP) ('PVGIUPR');
PARAMETER('E');
PARAMETER(DTL.SPA_Password);
PARAMETER(DTL.SPA_Encr_Decr_key);
PARAMETER(LCL.SPA_Password);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Create SPA Security Contr) TYPE(CRTOBJ) FILE(PVCFCPP)          AC2229083;
PARAMETER(DTL.SPA_Authorization_Process);
PARAMETER(DTL.SPA_Process_Environment);
PARAMETER(DTL.SPA_Authorization_Command);
PARAMETER(DTL.SPA_Command_Type);
PARAMETER(DTL.SPA_User_ID);
PARAMETER(LCL.SPA_Password);
PARAMETER(DTL.SPA_IP_Address_USR);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Update_Date_Timestamp);
PARAMETER(DTL.SPA_Encr_Decr_key);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
 PARAMETER(DB1.Create_Date_Timestamp);
 PARAMETER(DB1.Create_User_ID);
 PARAMETER(DB1.Create_Program_Name);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?Execute internal function

  //?*** Set CREATE Time Stamp Info.
  // PAR.Create Date Timestamp = JOB.*System timestamp
  PAR.Create_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Create User ID = JOB.*USER
  PAR.Create_User_ID = JOB.*USER;

  // PAR.Create Program Name = JOB.*PROGRAM
  PAR.Create_Program_Name = JOB.*PROGRAM;

  //?*** Set CHANGE Time Stamp Info.
  //?Cannot set Update Date TS here, will error.
  // PAR.Update User Id = CON.*BLANK
  PAR.Update_User_Id = *BLANK;

  // PAR.Update Program Name = CON.*BLANK
  PAR.Update_Program_Name = *BLANK;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt/Chg Secu Ecn/Decr  RT) TYPE(RTVOBJ) FILE(PVCGREP)          AC2229182;
 PARAMETER(DB1.SPA_Authorization_Process);
 PARAMETER(DB1.SPA_Process_Environment);
 PARAMETER(PAR.SPA_Encr_Decr_key);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date_Timestamp);
 PARAMETER(DB1.Create_User_ID);
 PARAMETER(DB1.Create_Program_Name);
 PARAMETER(DB1.Update_Date_Timestamp);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?USER: Processing if Data record not found

  CASE;

  // IF PAR.SPA Encr/Decr key is Entered
  IF PAR.SPA_Encr_Decr_key <> *BLANK;

  EXECUTE FUNCTION(Create SPA Security Enc/D) TYPE(CRTOBJ) FILE(PVCGREP)          AC2229121;
  PARAMETER(PAR.SPA_Authorization_Process);
  PARAMETER(PAR.SPA_Process_Environment);
  PARAMETER(PAR.SPA_Encr_Decr_key);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Update_Date_Timestamp);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
   PARAMETER(DB1.Create_Date_Timestamp);
   PARAMETER(DB1.Create_User_ID);
   PARAMETER(DB1.Create_Program_Name);
   PARAMETER(DB1.Update_User_Id);
   PARAMETER(DB1.Update_Program_Name);
   {
    //?Execute internal function

    //?*** Set CREATE Time Stamp Info.
    // PAR.Create Date Timestamp = JOB.*System timestamp
    PAR.Create_Date_Timestamp = JOB.*System_timestamp;

    // PAR.Create User ID = JOB.*USER
    PAR.Create_User_ID = JOB.*USER;

    // PAR.Create Program Name = JOB.*PROGRAM
    PAR.Create_Program_Name = JOB.*PROGRAM;

    //?*** Set CHANGE Time Stamp Info.
    //?Cannot set Update Date TS here, will error.
    // PAR.Update User Id = CON.*BLANK
    PAR.Update_User_Id = *BLANK;

    // PAR.Update Program Name = CON.*BLANK
    PAR.Update_Program_Name = *BLANK;

   }

  }

  ENDIF;

  //?USER: Process Data record

  CASE;

  // IF PAR.SPA Encr/Decr key NE DB1.SPA Encr/Decr key
  IF PAR.SPA_Encr_Decr_key <> DB1.SPA_Encr_Decr_key;

  EXECUTE FUNCTION(Change SPA Security Enc/D) TYPE(CHGOBJ) FILE(PVCGREP)          AC2229122;
  PARAMETER(DB1.SPA_Authorization_Process);
  PARAMETER(DB1.SPA_Process_Environment);
  PARAMETER(PAR.SPA_Encr_Decr_key);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
   PARAMETER(DB1.Update_Date_Timestamp);
   PARAMETER(DB1.Update_User_Id);
   PARAMETER(DB1.Update_Program_Name);
   {
    //?Execute internal function

    //?*** Set CHANGE Time Stamp Info.
    // PAR.Update Date Timestamp = JOB.*System timestamp
    PAR.Update_Date_Timestamp = JOB.*System_timestamp;

    // PAR.Update User Id = JOB.*USER
    PAR.Update_User_Id = JOB.*USER;

    // PAR.Update Program Name = JOB.*PROGRAM
    PAR.Update_Program_Name = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Change SPA Security Contr) TYPE(CHGOBJ) FILE(PVCFCPP)          AC2229084;
PARAMETER(DTL.SPA_Authorization_Process);
PARAMETER(DTL.SPA_Process_Environment);
PARAMETER(DTL.SPA_Authorization_Command);
PARAMETER(DTL.SPA_Command_Type);
PARAMETER(DTL.SPA_User_ID);
PARAMETER(LCL.SPA_Password);
PARAMETER(DTL.SPA_IP_Address_USR);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.SPA_Encr_Decr_key);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
 PARAMETER(DB1.Update_Date_Timestamp);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?Execute internal function

  //?*** Set CHANGE Time Stamp Info.
  // PAR.Update Date Timestamp = JOB.*System timestamp
  PAR.Update_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Update User Id = JOB.*USER
  PAR.Update_User_Id = JOB.*USER;

  // PAR.Update Program Name = JOB.*PROGRAM
  PAR.Update_Program_Name = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt/Chg Secu Ecn/Decr  RT) TYPE(RTVOBJ) FILE(PVCGREP)          AC2229182;
 PARAMETER(DB1.SPA_Authorization_Process);
 PARAMETER(DB1.SPA_Process_Environment);
 PARAMETER(PAR.SPA_Encr_Decr_key);
 PARAMETER(PAR.Record_Status);
 PARAMETER(DB1.Create_Date_Timestamp);
 PARAMETER(DB1.Create_User_ID);
 PARAMETER(DB1.Create_Program_Name);
 PARAMETER(DB1.Update_Date_Timestamp);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?USER: Processing if Data record not found

  CASE;

  // IF PAR.SPA Encr/Decr key is Entered
  IF PAR.SPA_Encr_Decr_key <> *BLANK;

  EXECUTE FUNCTION(Create SPA Security Enc/D) TYPE(CRTOBJ) FILE(PVCGREP)          AC2229121;
  PARAMETER(PAR.SPA_Authorization_Process);
  PARAMETER(PAR.SPA_Process_Environment);
  PARAMETER(PAR.SPA_Encr_Decr_key);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Update_Date_Timestamp);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
   PARAMETER(DB1.Create_Date_Timestamp);
   PARAMETER(DB1.Create_User_ID);
   PARAMETER(DB1.Create_Program_Name);
   PARAMETER(DB1.Update_User_Id);
   PARAMETER(DB1.Update_Program_Name);
   {
    //?Execute internal function

    //?*** Set CREATE Time Stamp Info.
    // PAR.Create Date Timestamp = JOB.*System timestamp
    PAR.Create_Date_Timestamp = JOB.*System_timestamp;

    // PAR.Create User ID = JOB.*USER
    PAR.Create_User_ID = JOB.*USER;

    // PAR.Create Program Name = JOB.*PROGRAM
    PAR.Create_Program_Name = JOB.*PROGRAM;

    //?*** Set CHANGE Time Stamp Info.
    //?Cannot set Update Date TS here, will error.
    // PAR.Update User Id = CON.*BLANK
    PAR.Update_User_Id = *BLANK;

    // PAR.Update Program Name = CON.*BLANK
    PAR.Update_Program_Name = *BLANK;

   }

  }

  ENDIF;

  //?USER: Process Data record

  CASE;

  // IF PAR.SPA Encr/Decr key NE DB1.SPA Encr/Decr key
  IF PAR.SPA_Encr_Decr_key <> DB1.SPA_Encr_Decr_key;

  EXECUTE FUNCTION(Change SPA Security Enc/D) TYPE(CHGOBJ) FILE(PVCGREP)          AC2229122;
  PARAMETER(DB1.SPA_Authorization_Process);
  PARAMETER(DB1.SPA_Process_Environment);
  PARAMETER(PAR.SPA_Encr_Decr_key);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
   PARAMETER(DB1.Update_Date_Timestamp);
   PARAMETER(DB1.Update_User_Id);
   PARAMETER(DB1.Update_Program_Name);
   {
    //?Execute internal function

    //?*** Set CHANGE Time Stamp Info.
    // PAR.Update Date Timestamp = JOB.*System timestamp
    PAR.Update_Date_Timestamp = JOB.*System_timestamp;

    // PAR.Update User Id = JOB.*USER
    PAR.Update_User_Id = JOB.*USER;

    // PAR.Update Program Name = JOB.*PROGRAM
    PAR.Update_Program_Name = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


