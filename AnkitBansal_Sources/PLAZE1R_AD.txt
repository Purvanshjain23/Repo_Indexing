// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLAZE1R
// ?Date: 14.08.2025 Time: 02:53:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATION HISTORY
DO;

//?WI572 EricL 5/31/23 - Added below Prop 12 cond values to PKVLLSP
//?PP Prop 12 pen gestated
//?PT Prop 12 pen gestated top
//?P2 Prop 12 2nd top
//?P3 Prop 12 3rd top
//?P4 Prop 12 4th top
//?CA California Prop 12
//?MA Massachusetts Question 3
//?E50577 JJH 07/24/19 - Add Load Type conditions
//?- Added Load Type - 2D, 3D, and 4D to Status Field DT Load Type
//?- Recompile only, no logic changes.
//?- Remove all code from E10812 for Split Loads.  This code was
//?  never implemented and never moved into Production.
//?- A saved copy of this function was moved to Edt Delivery Tracking ERx
//?Susan Mason 01/30/2013  MTech changes
//?Load Type
//?Susan Mason 08/03/2011  Truck Arrival Schedule process
//?If the truck arrival schedule is allowed
//?then update the buy order load flagged with 'A'
//?SHOW THE GATE YES OR NO IF THIS IS FROM THE GATE PROCESS
//?++++++++++++++++++++++++++++++++++++++++
//?E00347 6/16/2009 SLM - EMAIL from LeAnn,
//?Place in a different HPS program per Leann,
//?pertaining to driver.
//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.Current_System_Date_USR);

//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

// WRK.MTech Live Yes or No = WRK.System Value Alpha    USR
WRK.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?USER: Initialize detail screen (existing record)

// LCL.DT Driver = DB1.DT Driver
LCL.DT_Driver = DB1.DT_Driver;

// LCL.DT Farm Site Code = DB1.DT Farm Site Code
LCL.DT_Farm_Site_Code = DB1.DT_Farm_Site_Code;

// LCL.DT Building = DB1.DT Building
LCL.DT_Building = DB1.DT_Building;

// LCL.DT Room = DB1.DT Room
LCL.DT_Room = DB1.DT_Room;

// LCL.DT Trucker Code HPS Prior = DB1.DT Trucker Code HPS
LCL.DT_Trucker_Code_HPS_Prior = DB1.DT_Trucker_Code_HPS;

//?******* Farm Dates and Times  *******
//?Validate: Frm Depart Date
CASE;

// IF DTL.DT Frm Depart Date is Entered
IF DTL.DT_Leave_Farm_Date <> 0;

// AND DTL.DT Frm Depart Time is Entered
AND DTL.DT_Leave_Farm_Time > 0;

//?Validate with frm beg loading
CASE;

// IF DTL.DT Frm Beg Loading Date is Not Entered
IF DTL.DT_Start_Loading_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_Leave_Farm_Date);
MSGPARM(DTL.DT_Leave_Farm_Time);

//?Validate with frm beg loading
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Frm Depart Date GT PAR.Current System Date   USR
IF DTL.DT_Leave_Farm_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Leave_Farm_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Frm Depart Date EQ DTL.DT Frm Beg Loading Date
IF ( DTL.DT_Leave_Farm_Date = DTL.DT_Start_Loading_Date;

// AND DTL.DT Frm Depart Time LE DTL.DT Frm Beg Loading Time
AND DTL.DT_Leave_Farm_Time <= DTL.DT_Start_Loading_Time );

// OR DTL.DT Frm Depart Date LT DTL.DT Frm Beg Loading Date
OR DTL.DT_Leave_Farm_Date < DTL.DT_Start_Loading_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_Leave_Farm_Date);
MSGPARM(DTL.DT_Leave_Farm_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: Frm Beg Loading
CASE;

// IF DTL.DT Frm Beg Loading Date is Entered
IF DTL.DT_Start_Loading_Date <> *ZERO;

// AND DTL.DT Frm Beg Loading Time is Entered
AND DTL.DT_Start_Loading_Time > *ZERO;

//?validate
CASE;

// IF DTL.DT Frm Arrival Date is Not Entered
IF DTL.DT_Arrive_@_Farm_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_Start_Loading_Date);
MSGPARM(DTL.DT_Start_Loading_Time);

//?validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Frm Beg Loading Date GT PAR.Current System Date   USR
IF DTL.DT_Start_Loading_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Start_Loading_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Frm Beg Loading Date EQ DTL.DT Frm Arrival Date
IF ( DTL.DT_Start_Loading_Date = DTL.DT_Arrive_@_Farm_Date;

// AND DTL.DT Frm Beg Loading Time LE DTL.DT Frm Arrival Time
AND DTL.DT_Start_Loading_Time <= DTL.DT_Arrive_@_Farm_Time );

// OR DTL.DT Frm Beg Loading Date LT DTL.DT Frm Arrival Date
OR DTL.DT_Start_Loading_Date < DTL.DT_Arrive_@_Farm_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_Start_Loading_Date);
MSGPARM(DTL.DT_Start_Loading_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: Frm Arrival Date
CASE;

// IF DTL.DT Frm Arrival Date is Entered
IF DTL.DT_Arrive_@_Farm_Date <> *ZERO;

// AND DTL.DT Frm Arrival Time is Entered
AND DTL.DT_Arrive_@_Farm_Time > *ZERO;

//?Validate
CASE;

// IF DTL.DT Sched Route Start Date is Not Entered
IF DTL.DT_Route_Start_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_Arrive_@_Farm_Date);
MSGPARM(DTL.DT_Arrive_@_Farm_Time);

//?Validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Frm Arrival Date GT PAR.Current System Date   USR
IF DTL.DT_Arrive_@_Farm_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Arrive_@_Farm_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Frm Arrival Date EQ DTL.DT Sched Route Start Date
IF ( DTL.DT_Arrive_@_Farm_Date = DTL.DT_Route_Start_Date;

// AND DTL.DT Frm Arrival Time LE DTL.DT Sched Route Start Time
AND DTL.DT_Arrive_@_Farm_Time <= DTL.DT_Route_Start_Time );

// OR DTL.DT Frm Arrival Date LT DTL.DT Sched Route Start Date
OR DTL.DT_Arrive_@_Farm_Date < DTL.DT_Route_Start_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_Arrive_@_Farm_Date);
MSGPARM(DTL.DT_Arrive_@_Farm_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: Route Start Date     (check GT Delv Date)
CASE;

// IF DTL.DT Sched Route Start Date is Entered
IF DTL.DT_Route_Start_Date <> *ZERO;

// AND DTL.DT Sched Route Start Time is Entered
AND DTL.DT_Route_Start_Time > *ZERO;

CASE;

// IF DTL.DT Delivery Date is Not Entered
IF DTL.DT_Delivery_Date = 0;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_Route_Start_Date);
MSGPARM(DTL.DT_Route_Start_Time);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Sched Route Start Date GT PAR.Current System Date   USR
IF DTL.DT_Route_Start_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Route_Start_Date);
MSGPARM(PAR.Current_System_Date_USR);

ENDIF;

ENDIF;

ENDIF;

//?******* Plant Dates and Times  *******
//?Validate: TrkScl Weigh-out
CASE;

// IF DTL.DT TrkScl Weigh-Out Date is Entered
IF DTL.DT_TrkScl_Weigh_Out_Date <> *ZERO;

// AND DTL.DT TrkScl Weigh-Out Time is Entered
AND DTL.DT_TrkScl_Weigh_Out_Time > *ZERO;

//?Validate
CASE;

// IF DTL.DT Beg Unload Date is Not Entered
IF DTL.DT_Start_Unloading_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Date);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Time);

//?Validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT TrkScl Weigh-Out Date GT PAR.Current System Date   USR
IF DTL.DT_TrkScl_Weigh_Out_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT TrkScl Weigh-Out Date EQ DTL.DT Beg Unload Date
IF ( DTL.DT_TrkScl_Weigh_Out_Date = DTL.DT_Start_Unloading_Date;

// AND DTL.DT TrkScl Weigh-Out Time LE DTL.DT Beg Unload Time
AND DTL.DT_TrkScl_Weigh_Out_Time <= DTL.DT_Start_Unloading_Time );

// OR DTL.DT TrkScl Weigh-Out Date LT DTL.DT Beg Unload Date
OR DTL.DT_TrkScl_Weigh_Out_Date < DTL.DT_Start_Unloading_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Date);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: Beg Unload
CASE;

// IF DTL.DT Beg Unload Date is Entered
IF DTL.DT_Start_Unloading_Date <> *ZERO;

// AND DTL.DT Beg Unload Time is Entered
AND DTL.DT_Start_Unloading_Time > *ZERO;

//?validate
CASE;

// IF DTL.DT Rcv Dock Arvl Date is Not Entered
IF DTL.DT_To_Recv_Dock_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_Start_Unloading_Date);
MSGPARM(DTL.DT_Start_Unloading_Time);

//?validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Beg Unload Date GT PAR.Current System Date   USR
IF DTL.DT_Start_Unloading_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Start_Unloading_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Beg Unload Date EQ DTL.DT Rcv Dock Arvl Date
IF ( DTL.DT_Start_Unloading_Date = DTL.DT_To_Recv_Dock_Date;

// AND DTL.DT Beg Unload Time LE DTL.DT Rcv Dock Arvl Time
AND DTL.DT_Start_Unloading_Time <= DTL.DT_To_Recv_Dock_Time );

// OR DTL.DT Beg Unload Date LT DTL.DT Rcv Dock Arvl Date
OR DTL.DT_Start_Unloading_Date < DTL.DT_To_Recv_Dock_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_Start_Unloading_Date);
MSGPARM(DTL.DT_Start_Unloading_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: Rcv Dock Arvl
CASE;

// IF DTL.DT Rcv Dock Arvl Date is Entered
IF DTL.DT_To_Recv_Dock_Date <> *ZERO;

// AND DTL.DT Rcv Dock Arvl Time is Entered
AND DTL.DT_To_Recv_Dock_Time > *ZERO;

//?Validate
CASE;

// IF DTL.DT TrkScl Weigh-In Date is Not Entered
IF DTL.DT_TrkScl_Weigh_In_Date = *ZERO;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_To_Recv_Dock_Date);
MSGPARM(DTL.DT_To_Recv_Dock_Time);

//?Validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Rcv Dock Arvl Date GT PAR.Current System Date   USR
IF DTL.DT_To_Recv_Dock_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_To_Recv_Dock_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Rcv Dock Arvl Date EQ DTL.DT TrkScl Weigh-In Date
IF ( DTL.DT_To_Recv_Dock_Date = DTL.DT_TrkScl_Weigh_In_Date;

// AND DTL.DT Rcv Dock Arvl Time LE DTL.DT TrkScl Weigh-In Time
AND DTL.DT_To_Recv_Dock_Time <= DTL.DT_TrkScl_Weigh_In_Time );

// OR DTL.DT Rcv Dock Arvl Date LT DTL.DT TrkScl Weigh-In Date
OR DTL.DT_To_Recv_Dock_Date < DTL.DT_TrkScl_Weigh_In_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_To_Recv_Dock_Date);
MSGPARM(DTL.DT_To_Recv_Dock_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: TrkScl Weigh-In
CASE;

// IF DTL.DT TrkScl Weigh-In Date is Entered
IF DTL.DT_TrkScl_Weigh_In_Date <> *ZERO;

// AND DTL.DT TrkScl Weigh-In Time is Entered
AND DTL.DT_TrkScl_Weigh_In_Time > *ZERO;

//?validate
CASE;

// IF DTL.DT Plt Arrival Date is Not Entered
IF DTL.DT_Arrive_@_Plant_Date = 0;

// Send information message - 'Warn:Dt/Tm &1 &2 should not be entered before prev Dt/Tm.'
MESSAGE(PRK1059 *INFO);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Date);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Time);

//?validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT TrkScl Weigh-In Date GT PAR.Current System Date   USR
IF DTL.DT_TrkScl_Weigh_In_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Date);
MSGPARM(PAR.Current_System_Date_USR);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT TrkScl Weigh-In Date EQ DTL.DT Plt Arrival Date
IF ( DTL.DT_TrkScl_Weigh_In_Date = DTL.DT_Arrive_@_Plant_Date;

// AND DTL.DT TrkScl Weigh-In Time LE DTL.DT Plt Arrival Time
AND DTL.DT_TrkScl_Weigh_In_Time <= DTL.DT_Arrive_@_Plant_Time );

// OR DTL.DT TrkScl Weigh-In Date LT DTL.DT Plt Arrival Date
OR DTL.DT_TrkScl_Weigh_In_Date < DTL.DT_Arrive_@_Plant_Date;

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Date);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate: Plant Arrival
CASE;

// IF DTL.DT Plt Arrival Date is Entered
IF DTL.DT_Arrive_@_Plant_Date <> *ZERO;

// AND DTL.DT Plt Arrival Time is Entered
AND DTL.DT_Arrive_@_Plant_Time > *ZERO;

CASE;

// IF DTL.DT Plt Arrival Date GT PAR.Current System Date   USR
IF DTL.DT_Arrive_@_Plant_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Arrive_@_Plant_Date);
MSGPARM(PAR.Current_System_Date_USR);

ENDIF;

CASE;

// IF DTL.DT Source Type is Internal
IF DTL.DT_Source_Type = 'I';

CASE;

// IF DTL.DT Plt Arrival Date LT DTL.DT Frm Depart Date
IF DTL.DT_Arrive_@_Plant_Date < DTL.DT_Leave_Farm_Date;

// OR DTL.DT Plt Arrival Date EQ DTL.DT Frm Depart Date
OR ( DTL.DT_Arrive_@_Plant_Date = DTL.DT_Leave_Farm_Date;

// AND DTL.DT Plt Arrival Time LT DTL.DT Frm Depart Time
AND DTL.DT_Arrive_@_Plant_Time < DTL.DT_Leave_Farm_Time );

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_Arrive_@_Plant_Date);
MSGPARM(DTL.DT_Arrive_@_Plant_Time);

ENDIF;

ENDIF;

ENDIF;

//?******* Default Job Date into 1st blank date *******
DO;

//?Default/position cursor for Internals
CASE;

// IF DB1.DT Source Type is Internal
IF DB1.DT_Source_Type = 'I';

CASE;

// IF DTL.DT Route Start Date is Not Entered
IF DTL.DT_Route_Start_Date = *ZERO;

// DTL.DT Route Start Date = DTL.DT Delivery Date
DTL.DT_Route_Start_Date = DTL.DT_Delivery_Date;

SET CURSOR;

// IF DTL.DT Arrive @ Farm Date is Not Entered
IF DTL.DT_Arrive_@_Farm_Date = *ZERO;

// DTL.DT Arrive @ Farm Date = DTL.DT Route Start Date
DTL.DT_Arrive_@_Farm_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT Start Loading Date is Not Entered
IF DTL.DT_Start_Loading_Date = *ZERO;

// DTL.DT Start Loading Date = DTL.DT Route Start Date
DTL.DT_Start_Loading_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT Leave Farm Date is Not Entered
IF DTL.DT_Leave_Farm_Date = *ZERO;

// DTL.DT Leave Farm Date = DTL.DT Route Start Date
DTL.DT_Leave_Farm_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT Arrive @ Plant Date is Not Entered
IF DTL.DT_Arrive_@_Plant_Date = 0;

// DTL.DT Arrive @ Plant Date = DTL.DT Route Start Date
DTL.DT_Arrive_@_Plant_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT TrkScl Weigh-In Date is Not Entered
IF DTL.DT_TrkScl_Weigh_In_Date = *ZERO;

// DTL.DT TrkScl Weigh-In Date = DTL.DT Route Start Date
DTL.DT_TrkScl_Weigh_In_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT To Recv Dock Date is Not Entered
IF DTL.DT_To_Recv_Dock_Date = *ZERO;

// DTL.DT To Recv Dock Date = DTL.DT Route Start Date
DTL.DT_To_Recv_Dock_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT Start Unloading Date is Not Entered
IF DTL.DT_Start_Unloading_Date = *ZERO;

// DTL.DT Start Unloading Date = DTL.DT Route Start Date
DTL.DT_Start_Unloading_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

// IF DTL.DT TrkScl Weigh-Out Date is Not Entered
IF DTL.DT_TrkScl_Weigh_Out_Date = *ZERO;

// DTL.DT TrkScl Weigh-Out Date = DTL.DT Route Start Date
DTL.DT_TrkScl_Weigh_Out_Date = DTL.DT_Route_Start_Date;

SET CURSOR;

ENDIF;

ENDIF;

//?Default/position cursor for external
CASE;

// IF DB1.DT Source Type is External
IF DB1.DT_Source_Type = 'E';

CASE;

// IF DTL.DT Arrive @ Plant Date is Not Entered
IF DTL.DT_Arrive_@_Plant_Date = 0;

// DTL.DT Arrive @ Plant Date = DTL.DT Delivery Date
DTL.DT_Arrive_@_Plant_Date = DTL.DT_Delivery_Date;

SET CURSOR;

// IF DTL.DT TrkScl Weigh-In Date is Not Entered
IF DTL.DT_TrkScl_Weigh_In_Date = *ZERO;

// DTL.DT TrkScl Weigh-In Date = DTL.DT Arrive @ Plant Date
DTL.DT_TrkScl_Weigh_In_Date = DTL.DT_Arrive_@_Plant_Date;

SET CURSOR;

// IF DTL.DT To Recv Dock Date is Not Entered
IF DTL.DT_To_Recv_Dock_Date = *ZERO;

// DTL.DT To Recv Dock Date = DTL.DT Arrive @ Plant Date
DTL.DT_To_Recv_Dock_Date = DTL.DT_Arrive_@_Plant_Date;

SET CURSOR;

// IF DTL.DT Start Unloading Date is Not Entered
IF DTL.DT_Start_Unloading_Date = *ZERO;

// DTL.DT Start Unloading Date = DTL.DT Arrive @ Plant Date
DTL.DT_Start_Unloading_Date = DTL.DT_Arrive_@_Plant_Date;

SET CURSOR;

// IF DTL.DT TrkScl Weigh-Out Date is Not Entered
IF DTL.DT_TrkScl_Weigh_Out_Date = *ZERO;

// DTL.DT TrkScl Weigh-Out Date = DTL.DT Arrive @ Plant Date
DTL.DT_TrkScl_Weigh_Out_Date = DTL.DT_Arrive_@_Plant_Date;

SET CURSOR;

ENDIF;

ENDIF;

ENDDO;

//?Get BOL Head shipped -- in case it changed
EXECUTE FUNCTION(Rtv Avg Live Wgt      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1252631;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(LCL.TH_Avg_Live_Wgt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // AND PAR.TH Avg Live Wgt is EQ Zero
 AND PAR.TH_Avg_Live_Wgt = *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


EXECUTE FUNCTION(Rtv Shipped Head/Spr  RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1303684;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(WRK.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(DTL.DT_Delivered_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.DT Delivered Weight lbs = DTL.DT Delivered Head * LCL.TH Avg Live Wgt *
DTL.DT_Delivered_Weight_lbs = DTL.DT_Delivered_Head * LCL.TH_Avg_Live_Wgt;

// WRK.Display Output Only Usr = CND.Blank
WRK.Display_Output_Only_Usr = *BLANK;

// DTL.Text description = CON.*BLANK
DTL.Text_description = *BLANK;

//?Note Susan MTech changes
//?E2423 the HP292 will be used in the Mtech Live or Not MTech Live
CASE;

// IF DTL.DT Source Type is Internal
IF DTL.DT_Source_Type = 'I';

//?slm e2423 11/8/13 Verify that this is working
// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(PGM.*Return_code);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
PARAMETER(NLL.State);
PARAMETER(NLL.HPS_Farm_County);
PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
PARAMETER(DTL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

//?3/4/2014 correct to use the trucker from the drivere
// Call program Val HPS Driver ActOnlyUP.
CALL PROGRAM(Val HPS Driver ActOnlyUP) ('HP292');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Driver);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.DT_Truck_ID);
PARAMETER(NLL.DT_Trailer_ID);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Trucker_Name_Usr_25);
PARAMETER(DTL.MTech_Trucker_Ref);
PARAMETER(DTL.MTech_Driver_Ref);

// Call program Val HPS Trucker       UP.
CALL PROGRAM(Val HPS Trucker       UP) ('HP275');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(NLL.HPS_Trucker_Name);
PARAMETER(NLL.HPS_Trucker_Type);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(DTL.MTech_Trucker_Ref);

CASE;

// IF DTL.DT Trucker Code HPS NE LCL.DT Trucker Code HPS Prior
IF DTL.DT_Trucker_Code_HPS <> LCL.DT_Trucker_Code_HPS_Prior;

CASE;

// IF DB1.DT Trucker Code HPS is Entered
IF DB1.DT_Trucker_Code_HPS <> *BLANK;

// DTL.Text description = CONCAT(CON.Prior Trucker,LCL.DT Trucker Code HPS Prior,CON.1)
DTL.Text_description = 'Prior Trucker' + LCL.DT_Trucker_Code_HPS_Prior (1);

// DTL.Text description = CONCAT(DTL.Text description,CON.User must update,CON.1)
DTL.Text_description = DTL.Text_description + 'User must update' (1);

ENDIF;

ENDIF;

// Call program Val HPS Loading Crew  UP.
CALL PROGRAM(Val HPS Loading Crew  UP) ('HP273');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DB1.DT_Loading_Crew);
PARAMETER(NLL.HPS_Loading_Crew_Desc);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(DTL.MTech_Load_Crew_Ref);

ENDIF;

CASE;

// IF DB1.DT GATE UPDATE *YES is *Yes
IF DB1.DT_GATE_UPDATE_YES = *YES;

// DTL.Text of 35 size  Usr = CON.Gate Update this record
DTL.Text_of_35_size_Usr = 'Gate Update this record';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text of 35 size  Usr = CON.*BLANK
DTL.Text_of_35_size_Usr = *BLANK;

ENDIF;

//?USER: Validate detail screen fields

//?F7=Edit Tracking Comments
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Delv Track Cmnt   EF.
CALL PROGRAM(Edt Delv Track Cmnt   EF) ('PLAWEFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);

ENDIF;

//?F8=Edit Split
CASE;

// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

CASE;

// IF DTL.DT Full/Split Load is Full
IF DTL.DT_Full_Split_Load = 'F';

// Send error message - 'F8 not valid for Full Load.'
ERROR(PRK1062);
MSGPARM(DTL.DT_Full_Split_Load);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Delv Trckng Split EF.
CALL PROGRAM(Edt Delv Trckng Split EF) ('PLA4EFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(DTL.DT_Delivered_Head);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Source_Type);
PARAMETER(DTL.DT_Delivered_Weight_lbs);

ENDIF;

ENDIF;

CASE;

// IF DTL.DT Source Type is Internal
IF DTL.DT_Source_Type = 'I';

//?******* Prompt HPS Fields  *******
//?Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?farm site
CASE;

// IF PGM.*Cursor field <IS> DTL.DT Farm Site Code
IF PGM.*Cursor_field = DTL.DT_Farm_Site_Code;

//?E2423 Mtech Live or Not Live will use this HPS program
//?E2423 the HP5003 will be used in the Mtech Live or Not MTech Live
//?slm e2423 11/8/13 Get LEANN to add two MTech Ref - Driver, and Trucker
//?slm e2423 11/8/13 Verify that this is working
// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.MTech_Farm_Site_Ref);

ENDIF;

//?E2423 02202013 Removed Selection on Load Type - Now Condition
//?regardless of Live with Mtech or Not Live with MTech
//?Build Room
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?E2423 022013
CASE;

// IF PGM.*Cursor field <IS> DTL.DT Building
IF PGM.*Cursor_field = DTL.DT_Building;

// OR PGM.*Cursor field <IS> DTL.DT Room
OR PGM.*Cursor_field = DTL.DT_Room;

//?E2423 Mtech Live will not use this HPS program
// Call program Z1Sel HPS Building/RoomUP.
CALL PROGRAM(Z1Sel HPS Building/RoomUP) ('HP5950');
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(WRK.DT_Hog_Group_Reference);
PARAMETER(WRK.HPS_Hog_Group_Status);
PARAMETER(WRK.HPS_Hog_Production_Phase);
PARAMETER(WRK.HPS_Hog_Production_Type);

ENDIF;

ENDIF;

//?Driver
CASE;

// IF PGM.*Cursor field <IS> DTL.DT Driver
IF PGM.*Cursor_field = DTL.DT_Driver;

//?E2423 Mtech Live or Not Live will use this HPS program
// LCL.DT Trucker Code HPS Prior = DTL.DT Trucker Code HPS
LCL.DT_Trucker_Code_HPS_Prior = DTL.DT_Trucker_Code_HPS;

//?slm e2423 11/8/13 Verify that this is working
// Call program Sel HPS Driver        UP.
CALL PROGRAM(Sel HPS Driver        UP) ('HP574');
PARAMETER('A');
PARAMETER(DTL.DT_Driver);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(WRK.DT_Trucker_Name_Usr_25);
PARAMETER(DTL.MTech_Trucker_Ref);
PARAMETER(DTL.MTech_Driver_Ref);

// DTL.Text description = CON.*BLANK
DTL.Text_description = *BLANK;

CASE;

// IF DTL.DT Trucker Code HPS NE LCL.DT Trucker Code HPS Prior
IF DTL.DT_Trucker_Code_HPS <> LCL.DT_Trucker_Code_HPS_Prior;

CASE;

// IF DB1.DT Trucker Code HPS is Entered
IF DB1.DT_Trucker_Code_HPS <> *BLANK;

// DTL.Text description = CONCAT(CON.Prior Trucker,LCL.DT Trucker Code HPS Prior,CON.1)
DTL.Text_description = 'Prior Trucker' + LCL.DT_Trucker_Code_HPS_Prior (1);

// DTL.Text description = CONCAT(DTL.Text description,CON.User must update,CON.1)
DTL.Text_description = DTL.Text_description + 'User must update' (1);

ENDIF;

ENDIF;

ENDIF;

//?Load Crew
CASE;

// IF PGM.*Cursor field <IS> DTL.DT Loading Crew
IF PGM.*Cursor_field = DTL.DT_Loading_Crew;

//?E2423 Mtech Live or Not Live will use this HPS program
//?slm e2423 11/8/13 ADD o MTech Ref
//?slm e2423 11/8/13 Verify that this is working
// Call program Sel HPS Load Crew     UP.
CALL PROGRAM(Sel HPS Load Crew     UP) ('HP592');
PARAMETER('A');
PARAMETER(DTL.DT_Loading_Crew);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(DTL.MTech_Load_Crew_Ref);

ENDIF;

//?Contrct Hauler Rsn
CASE;

// IF PGM.*Cursor field <IS> DTL.CHR Code
IF PGM.*Cursor_field = DTL.CHR_Code;

//?E2423 Mtech Live or Not Live will use this HPS program
// Call program Sel Contrct Hauler Rs SR.
CALL PROGRAM(Sel Contrct Hauler Rs SR) ('PLDSSRR');
PARAMETER(DTL.CHR_Code);

ENDIF;

//?Trucker  - add select new slm
CASE;

// IF PGM.*Cursor field <IS> DTL.DT Trucker Code HPS
IF PGM.*Cursor_field = DTL.DT_Trucker_Code_HPS;

//?E2423 Mtech Live or Not Live will use this HPS program
// LCL.DT Trucker Code HPS Prior = DTL.DT Trucker Code HPS
LCL.DT_Trucker_Code_HPS_Prior = DTL.DT_Trucker_Code_HPS;

//?slm e2423 11/8/13 Verify that this is working
// Call program Sel HPS Trucker       UP.
CALL PROGRAM(Sel HPS Trucker       UP) ('HP538');
PARAMETER('A');
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(WRK.Condition_Name_USR);
PARAMETER(DTL.MTech_Trucker_Ref);

CASE;

// IF DTL.DT Trucker Code HPS NE LCL.DT Trucker Code HPS Prior
IF DTL.DT_Trucker_Code_HPS <> LCL.DT_Trucker_Code_HPS_Prior;

CASE;

// IF DB1.DT Trucker Code HPS is Entered
IF DB1.DT_Trucker_Code_HPS <> *BLANK;

// DTL.Text description = CONCAT(CON.Prior Trucker,LCL.DT Trucker Code HPS Prior,CON.1)
DTL.Text_description = 'Prior Trucker' + LCL.DT_Trucker_Code_HPS_Prior (1);

// DTL.Text description = CONCAT(DTL.Text description,CON.User must update,CON.1)
DTL.Text_description = DTL.Text_description + 'User must update' (1);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?******* Validate HPS Fields  *******
//?E2423 Live or Not Live we will use the condition file
//?Load type validation based on condition list
//?Validate Load Type - Required
CASE;

// IF DTL.DT Load Type is Entered List
IF DTL.DT_Load_Type = 'BB'/'CF'/'FD'/'FC'/'GN'/'NL'/'RS'/'RR'/'SC'/'TL'/'GT'/'PG'/'2D'             +
/'3D'/'4D'/'G2'/'G3'/'LD'/'G4'/'MA'/'PP'/'PT'/'P2'/'P3'/'CA'/'P4';

//?Validate Load Type - Required
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load type &1 not found.'
ERROR(PRK1067);
MSGPARM(DTL.DT_Load_Type);

ENDIF;

//?Validate Farm Site
CASE;

// IF DTL.DT Farm Site Code NE WRK.Zero USR
IF DTL.DT_Farm_Site_Code <> WRK.Zero_USR;

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

//?FP1180 Do not get the Driver nor the Trucker from
//?the farm site.
//?E2423 Mtech Not Live will use this HPS program
//?Change to NLL on the Trasportation office
//?slm e2423 11/8/13 Get LEANN to CHECK ON LOAD CREW
//?slm e2423 11/8/13 Verify that this is working
EXECUTE FUNCTION(Val HPS Farm SiteNTrDr1IF) TYPE(EXCINTFUN)                     AB1316982;
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.State);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(LCL.DT_Loading_Crew);
PARAMETER(DTL.MTech_Farm_Site_Ref);
PARAMETER(DTL.MTech_Load_Crew_Ref);
{
 //?Execute internal function

 //?Modification history
 DO;

 //?FP1108 Associate HPS Driver with Truckers
 //?03/18/2009 Will use the following program from HPS
 //?but will not get the Trucker nor the Driver any more
 ENDDO;

 //?E2423 02202013
 //?This HPS program will be used for Mtech Live or not Mtech Live
 // Call program Val HPS Farm Site DS  UP.
 CALL PROGRAM(Val HPS Farm Site DS  UP) ('HP271');
 PARAMETER(PAR.Return_Code_USR);
 PARAMETER(PAR.HRH_Farm_Site);
 PARAMETER(PAR.Farm_site_Name_f_HPS_USR);
 PARAMETER(PAR.State);
 PARAMETER(PAR.DT_Transportation_Office);
 PARAMETER(NLL.DT_Trucker_Code_HPS);
 PARAMETER(PAR.DT_Loading_Crew);
 PARAMETER(NLL.DT_Driver);
 PARAMETER(PAR.MTech_Farm_Site_Ref);
 PARAMETER(NLL.MTech_Trucker_Ref);
 PARAMETER(PAR.MTech_Load_Crew_Ref);
 PARAMETER(NLL.MTech_Driver_Ref);

}


CASE;

// IF WRK.Return Code USR is Error Found
IF WRK.Return_Code_USR = 'ERROR';

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(DTL.DT_Farm_Site_Code);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.DT Loading Crew is Not Entered
IF DTL.DT_Loading_Crew = *BLANK;

// DTL.DT Loading Crew = LCL.DT Loading Crew
DTL.DT_Loading_Crew = LCL.DT_Loading_Crew;

ENDIF;

ENDIF;

//?Validate Farm Site
//?Validate Farm Site
//?Validate Building/Room -  rmc 2/15/05 if changed and not blank
// IF DTL.DT Farm Site Code NE LCL.DT Farm Site Code
IF ( DTL.DT_Farm_Site_Code <> LCL.DT_Farm_Site_Code;

// OR DTL.DT Building NE LCL.DT Building
OR DTL.DT_Building <> LCL.DT_Building;

// OR DTL.DT Room NE LCL.DT Room
OR DTL.DT_Room <> LCL.DT_Room );

// AND DTL.DT Building NE WRK.Blank Usr 2
AND ( DTL.DT_Building <> WRK.Blank_Usr_2;

// OR DTL.DT Room NE WRK.Blank Usr 2
OR DTL.DT_Room <> WRK.Blank_Usr_2 );

CASE;

// IF DTL.DT Full/Split Load is Split
IF DTL.DT_Full_Split_Load = 'S';

// Send error message - 'Building/Room not valid for Split Load.'
ERROR(PRK1061);
MSGPARM(DTL.DT_Building);
MSGPARM(DTL.DT_Room);

ENDIF;

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?E2423 Mtech Live or Not Live will use this program
// Call program Z1Val HPS Building/RoomUP.
CALL PROGRAM(Z1Val HPS Building/RoomUP) ('HP274');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(DTL.DT_Hog_Group_Reference);
PARAMETER(DTL.DT_Sire_Line_Code);

CASE;

// IF WRK.Return Code USR is Error Found
IF WRK.Return_Code_USR = 'ERROR';

// Send error message - 'Building/Room not valid.'
ERROR(PRK1077);
MSGPARM(DTL.DT_Building);
MSGPARM(DTL.DT_Room);

// IF WRK.Return Code USR is Multiple group no selectn
IF WRK.Return_Code_USR = 'SELECT';

// Send error message - 'Building/Room has multiple groups. Please select one.'
ERROR(PRK1129);
MSGPARM(DTL.DT_Building);
MSGPARM(DTL.DT_Room);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.DT Farm Site Code = DTL.DT Farm Site Code
LCL.DT_Farm_Site_Code = DTL.DT_Farm_Site_Code;

// LCL.DT Building = DTL.DT Building
LCL.DT_Building = DTL.DT_Building;

// LCL.DT Room = DTL.DT Room
LCL.DT_Room = DTL.DT_Room;

ENDIF;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// LCL.DT Farm Site Code = DTL.DT Farm Site Code
LCL.DT_Farm_Site_Code = DTL.DT_Farm_Site_Code;

// LCL.DT Building = DTL.DT Building
LCL.DT_Building = DTL.DT_Building;

// LCL.DT Room = DTL.DT Room
LCL.DT_Room = DTL.DT_Room;

ENDIF;

ENDIF;

//?Validate Driver - without default from farm site
DO;

//?reworked due to no longer default from farm site routine
//?Driver is a required field
//?E2423 Mtech Live or Not Live will use this program
//?slm e2423 11/8/13 Verify that this is working
// Call program Val HPS Driver ActOnlyUP.
CALL PROGRAM(Val HPS Driver ActOnlyUP) ('HP292');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Driver);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.DT_Truck_ID);
PARAMETER(NLL.DT_Trailer_ID);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Trucker_Name_Usr_25);
PARAMETER(DTL.MTech_Trucker_Ref);
PARAMETER(DTL.MTech_Driver_Ref);

CASE;

// IF WRK.Return Code USR is Error Found
IF WRK.Return_Code_USR = 'ERROR';

// Send error message - 'Driver &1 not found.'
ERROR(PRK1066);
MSGPARM(DTL.DT_Driver);

ENDIF;

//?Default Trailer id
CASE;

// IF DTL.DT Trailer ID is Not Entered
IF DTL.DT_Trailer_ID = *BLANK;

// OR DTL.DT Driver NE LCL.DT Driver
OR DTL.DT_Driver <> LCL.DT_Driver;

CASE;

// IF LCL.DT Trailer ID is Entered
IF LCL.DT_Trailer_ID <> *BLANK;

// DTL.DT Trailer ID = LCL.DT Trailer ID
DTL.DT_Trailer_ID = LCL.DT_Trailer_ID;

ENDIF;

ENDIF;

ENDDO;

//?Validate Trucker  / Contract Hauler Reason
CASE;

// IF DTL.DT Trucker Code HPS NE WRK.Blank Usr 2
IF DTL.DT_Trucker_Code_HPS <> WRK.Blank_Usr_2;

//?Validate if entered .. but dont force it here. 01/22/04
CASE;

// IF DTL.CHR Code is Not Entered
IF DTL.CHR_Code = *BLANK;

//?Validate if entered .. but dont force it here. 01/22/04
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Contrct Hauler Rs RT) TYPE(RTVOBJ) FILE(PLANREP)           AB1255540;
PARAMETER(DTL.CHR_Code);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

}


CASE;

// IF WRK.Return Code USR is *Record does not exist
IF WRK.Return_Code_USR = 'Y2U0005';

// Send error message - 'Contract Hauler Reason not found.'
ERROR(PRK1094);
MSGPARM(DTL.CHR_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Crew
CASE;

// IF DTL.DT Loading Crew NE WRK.Blank Usr 2
IF DTL.DT_Loading_Crew <> WRK.Blank_Usr_2;

//?E2423 Mtech Live or Not Live will use this HPS program
//?slm e2423 11/8/13 Verify that this is working
// Call program Val HPS Loading Crew  UP.
CALL PROGRAM(Val HPS Loading Crew  UP) ('HP273');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Loading_Crew);
PARAMETER(WRK.HPS_Loading_Crew_Desc);
PARAMETER(WRK.DT_Transportation_Office);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(DTL.MTech_Load_Crew_Ref);

CASE;

// IF WRK.Return Code USR is Error Found
IF WRK.Return_Code_USR = 'ERROR';

// Send error message - 'Loading Crew &1 not found.'
ERROR(PRK1065);
MSGPARM(DTL.DT_Loading_Crew);

ENDIF;

ENDIF;

ENDIF;

//?Validate DT Split Head total - Original Code
CASE;

// IF DTL.DT Full/Split Load is Split
IF DTL.DT_Full_Split_Load = 'S';

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(WRK.DTS_Delivered_Head);
PARAMETER(WRK.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


CASE;

// IF WRK.DTS Delivered Head NE DTL.DT Delivered Head
IF WRK.DTS_Delivered_Head <> DTL.DT_Delivered_Head;

// Send error message - 'Delv Tracking Split Head must equal the Delivered Head.'
ERROR(PRK1063);
MSGPARM(DTL.DT_Delivered_Head);

ENDIF;

ENDIF;

//?Validate Split exists if changed to Full
CASE;

// IF DTL.DT Full/Split Load is Full
IF DTL.DT_Full_Split_Load = 'F';

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(WRK.DTS_Delivered_Head);
PARAMETER(WRK.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


CASE;

// IF WRK.DTS Delivered Head GT WRK.Zero USR
IF WRK.DTS_Delivered_Head > WRK.Zero_USR;

// Send error message - 'Delivery Tracking Split exists. Cannot change load from Split to Full.'
ERROR(PRK1068);
MSGPARM(DTL.DT_Full_Split_Load);

ENDIF;

ENDIF;

//?Validate Times as military 8/5/2021 negative not allowed
DO;

//?slm 8/06/21 add validation for the military time and do not allow
//?negative time
//?move validation in order of the fields on the delivery tracking
//?data base
//?validate DT Route Start Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Route_Start_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Route_Start_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Route_Start_Time);

ENDIF;

ENDDO;

//?validate DT Arrive @ Farm Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Arrive_@_Farm_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Arrive_@_Farm_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Arrive_@_Farm_Time);

ENDIF;

ENDDO;

//?validate DT Start Loading Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Start_Loading_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Start_Loading_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Start_Loading_Time);

ENDIF;

ENDDO;

//?validate DT Leave Farm Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Leave_Farm_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Leave_Farm_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Leave_Farm_Time);

ENDIF;

ENDDO;

//?validate DT Arrive @ Plant Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Arrive_@_Plant_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Arrive_@_Plant_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Arrive_@_Plant_Time);

ENDIF;

ENDDO;

//?validate DT TrkScl Weigh-In Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_TrkScl_Weigh_In_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Time);

ENDIF;

ENDDO;

//?validate DT To Recv Dock Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_To_Recv_Dock_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_To_Recv_Dock_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_To_Recv_Dock_Time);

ENDIF;

ENDDO;

//?validate DT Start Unloading Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Start_Unloading_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Start_Unloading_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Start_Unloading_Time);

ENDIF;

ENDDO;

//?validate DT TrkScl Weigh-Out Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_TrkScl_Weigh_Out_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Time);

ENDIF;

ENDDO;

ENDDO;

//?Default Route Start Date if >0, into all dates with times 2/11/04
CASE;

// IF DTL.DT Route Start Date is Entered
IF DTL.DT_Route_Start_Date <> *ZERO;

// LCL.Date USR = DTL.DT Route Start Date
LCL.Date_USR = DTL.DT_Route_Start_Date;

//?Default Route Start Date if >0, into all dates with times 2/11/04
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date USR = DTL.DT Delivery Date
LCL.Date_USR = DTL.DT_Delivery_Date;

ENDIF;

//?arrive @ farm
CASE;

// IF DTL.DT Arrive @ Farm Time is Entered
IF DTL.DT_Arrive_@_Farm_Time > *ZERO;

// AND DTL.DT Arrive @ Farm Date is Not Entered
AND DTL.DT_Arrive_@_Farm_Date = *ZERO;

// DTL.DT Arrive @ Farm Date = LCL.Date USR
DTL.DT_Arrive_@_Farm_Date = LCL.Date_USR;

ENDIF;

//?start loading
CASE;

// IF DTL.DT Start Loading Time is Entered
IF DTL.DT_Start_Loading_Time > *ZERO;

// AND DTL.DT Start Loading Date is Not Entered
AND DTL.DT_Start_Loading_Date = *ZERO;

// DTL.DT Start Loading Date = LCL.Date USR
DTL.DT_Start_Loading_Date = LCL.Date_USR;

ENDIF;

//?leave farm
CASE;

// IF DTL.DT Leave Farm Time is Entered
IF DTL.DT_Leave_Farm_Time > 0;

// AND DTL.DT Leave Farm Date is Not Entered
AND DTL.DT_Leave_Farm_Date = *ZERO;

// DTL.DT Leave Farm Date = LCL.Date USR
DTL.DT_Leave_Farm_Date = LCL.Date_USR;

ENDIF;

//?arrive @ plant
CASE;

// IF DTL.DT Arrive @ Plant Time is Entered
IF DTL.DT_Arrive_@_Plant_Time > *ZERO;

// AND DTL.DT Arrive @ Plant Date is Not Entered
AND DTL.DT_Arrive_@_Plant_Date = 0;

// DTL.DT Arrive @ Plant Date = LCL.Date USR
DTL.DT_Arrive_@_Plant_Date = LCL.Date_USR;

ENDIF;

//?trk scl weigh in
CASE;

// IF DTL.DT TrkScl Weigh-In Time is Entered
IF DTL.DT_TrkScl_Weigh_In_Time > *ZERO;

// AND DTL.DT TrkScl Weigh-In Date is Not Entered
AND DTL.DT_TrkScl_Weigh_In_Date = *ZERO;

// DTL.DT TrkScl Weigh-In Date = LCL.Date USR
DTL.DT_TrkScl_Weigh_In_Date = LCL.Date_USR;

ENDIF;

//?to recv dock
CASE;

// IF DTL.DT To Recv Dock Time is Entered
IF DTL.DT_To_Recv_Dock_Time > *ZERO;

// AND DTL.DT To Recv Dock Date is Not Entered
AND DTL.DT_To_Recv_Dock_Date = *ZERO;

// DTL.DT To Recv Dock Date = LCL.Date USR
DTL.DT_To_Recv_Dock_Date = LCL.Date_USR;

ENDIF;

//?start unloading
CASE;

// IF DTL.DT Start Unloading Time is Entered
IF DTL.DT_Start_Unloading_Time > *ZERO;

// AND DTL.DT Start Unloading Date is Not Entered
AND DTL.DT_Start_Unloading_Date = *ZERO;

// DTL.DT Start Unloading Date = LCL.Date USR
DTL.DT_Start_Unloading_Date = LCL.Date_USR;

ENDIF;

//?trk scl weigh out
CASE;

// IF DTL.DT TrkScl Weigh-Out Time is Entered
IF DTL.DT_TrkScl_Weigh_Out_Time > *ZERO;

// AND DTL.DT TrkScl Weigh-Out Date is Not Entered
AND DTL.DT_TrkScl_Weigh_Out_Date = *ZERO;

// DTL.DT TrkScl Weigh-Out Date = LCL.Date USR
DTL.DT_TrkScl_Weigh_Out_Date = LCL.Date_USR;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(DTL.DT_Actual_Kill_Date);
PARAMETER(DTL.DT_Actual_Delivery_Hour);
PARAMETER(DTL.DT_Scheduled_Hour);
PARAMETER(DTL.DT_Delivery_Initiation);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(DTL.DT_Sire_Line_Code);
PARAMETER(DTL.DT_Hog_Group_Reference);
PARAMETER(DTL.DT_Delivered_Head);
PARAMETER(DTL.DT_Delivered_Weight_lbs);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(DTL.DT_Driver);
PARAMETER(DTL.DT_Loading_Crew);
PARAMETER(DTL.CHR_Code);
PARAMETER(DTL.DT_Load_Type);
PARAMETER(DTL.DT_Full_Split_Load);
PARAMETER(DTL.DT_Movement_Number);
PARAMETER(DTL.DT_Truck_ID);
PARAMETER(DTL.DT_Trailer_ID);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(DTL.DT_Transprtn_Office_Date);
PARAMETER(DTL.DT_Transprtn_Office_Time);
PARAMETER(DTL.DT_Arrive@Frm_v_StartLd);
PARAMETER(DTL.DT_On_Time_Farm_Arrvl_Sts);
PARAMETER(DTL.DT_Route_Start_Pnt);
PARAMETER(DTL.DT_Route_Start_Date);
PARAMETER(DTL.DT_Route_Start_Time);
PARAMETER(DTL.DT_Route_Start_Variance);
PARAMETER(DTL.DT_Wait_@_Transp_Offc_Tm);
PARAMETER(DTL.DT_Arrive_@_Farm_Date);
PARAMETER(DTL.DT_Arrive_@_Farm_Time);
PARAMETER(DTL.DT_Drive_Time_To_Farm);
PARAMETER(DTL.DT_Start_Loading_Date);
PARAMETER(DTL.DT_Start_Loading_Time);
PARAMETER(DTL.DT_Start_Loading_Variance);
PARAMETER(DTL.DT_Wait_@_Farm);
PARAMETER(DTL.DT_Frm_End_Loading_Date);
PARAMETER(DTL.DT_Frm_End_Loading_Time);
PARAMETER(DTL.DT_Load_Time);
PARAMETER(DTL.DT_Leave_Farm_Date);
PARAMETER(DTL.DT_Leave_Farm_Time);
PARAMETER(DTL.DT_Wait_Depart_Frm);
PARAMETER(DTL.DT_Plt_TrkWsh_Arvl_Date);
PARAMETER(DTL.DT_Plt_TrkWsh_Arvl_Time);
PARAMETER(DTL.DT_Arrive_@_Plant_Date);
PARAMETER(DTL.DT_Arrive_@_Plant_Time);
PARAMETER(DTL.DT_Wait_@_TrkWsh);
PARAMETER(DTL.DT_Drive_Time_To_Plant);
PARAMETER(DTL.DT_Delv_Time_Variance);
PARAMETER(DTL.DT_On_Time_Delivery);
PARAMETER(DTL.Delivery_Reason_Code);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Date);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Time);
PARAMETER(DTL.DT_Wait_@_TrkScl);
PARAMETER(DTL.DT_To_Recv_Dock_Date);
PARAMETER(DTL.DT_To_Recv_Dock_Time);
PARAMETER(DTL.DT_Wait_Rcv_Dock);
PARAMETER(DTL.DT_Start_Unloading_Date);
PARAMETER(DTL.DT_Start_Unloading_Time);
PARAMETER(DTL.DT_Wait_@_Rcv_Dock);
PARAMETER(DTL.DT_End_Unload_Date);
PARAMETER(DTL.DT_End_Unload_Time);
PARAMETER(DTL.DT_Unload_Time);
PARAMETER(DTL.DT_Unload_Variance_Time);
PARAMETER(DTL.DT_TrkScl_Weigh_Out_Date);
PARAMETER(DTL.DT_TrkScl_Weigh_Out_Time);
PARAMETER(DTL.DT_Wait_Time_@_the_Plant);
PARAMETER(DTL.DT_Formula_Wait_Tm_@_Plt);
PARAMETER(DTL.DT_Source_Type);
PARAMETER(DTL.DT_GATE_UPDATE_YES);
PARAMETER(DTL.DT_Unused_Date);
PARAMETER(DTL.DT_Unused_Time);
PARAMETER(DTL.DT_Unused_Wait_Time);
PARAMETER(DTL.DSD_Scheduled_Delv_Head);
PARAMETER(DTL.DT_Head_Received);
PARAMETER(DTL.DT_Weight_Received);
PARAMETER(DTL.DT_Avg_Weight_Received);
PARAMETER(DTL.DT_Head_DOA);
PARAMETER(DTL.DT_Weight_DOA);
PARAMETER(DTL.DT_Head_Yard_Dead);
PARAMETER(DTL.DT_Weight_Yard_Dead);
PARAMETER(DTL.DT_Head_Condemned);
PARAMETER(DTL.DT_Weight_Condemned);
PARAMETER(DTL.DT_Head_Held_Over);
PARAMETER(DTL.DT_Weight_Held_Over);
PARAMETER(DTL.DT_Head_Killed);
PARAMETER(DTL.DT_Weight_Killed);
PARAMETER(DTL.DT_Head_Market);
PARAMETER(DTL.DT_Weight_Market);
PARAMETER(DTL.DT_Avg_Weight_Market);
PARAMETER(DTL.DT_Head_Resale);
PARAMETER(DTL.DT_Weight_Resale);
PARAMETER(DTL.DT_Avg_Weight_Resale);
PARAMETER(DTL.DT_Head_Unused_1);
PARAMETER(DTL.DT_Weight_Unused_1);
PARAMETER(DTL.DT_Head_Unused_2);
PARAMETER(DTL.DT_Weight_Unused_2);
PARAMETER(DTL.DT_Error_Sts);
PARAMETER(DTL.DT_Error_Reason);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER('A');
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.DT_Movement_Number);
 PARAMETER(PAR.DT_Farm_Site_Code);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
  IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

  CASE;

  // IF DB1.TH Source Type is Internal
  IF DB1.TH_Source_Type = 'I';

  //?Due to test with e2423 SAW that we were change the
  //?movement and farm site and not the state code
  //?use this retrieve regardless of Not Live Or Live with MTech
  // Call program Rtv HPS Farm Inf-Mtech UP.
  CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
  PARAMETER(PGM.*Return_code);
  PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
  PARAMETER(WRK.State);
  PARAMETER(NLL.HPS_Farm_County);
  PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
  PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
  PARAMETER(NLL.MTech_Farm_Site_Ref);
  PARAMETER(NLL.MTech_Cell_Manager_Ref);

  EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(WRK.State);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_State);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  ENDIF;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Delivery Tracking IF) TYPE(EXCINTFUN) FILE(PLAFCPP)        AB1247887;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(DTL.DT_Actual_Kill_Date);
PARAMETER(DTL.DT_Scheduled_Hour);
PARAMETER(DTL.DT_Delivery_Initiation);
PARAMETER(DTL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(DTL.DT_Sire_Line_Code);
PARAMETER(DTL.DT_Hog_Group_Reference);
PARAMETER(DTL.DT_Delivered_Head);
PARAMETER(DTL.DT_Delivered_Weight_lbs);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(DTL.DT_Driver);
PARAMETER(DTL.DT_Loading_Crew);
PARAMETER(DTL.CHR_Code);
PARAMETER(DTL.DT_Load_Type);
PARAMETER(DTL.DT_Full_Split_Load);
PARAMETER(DTL.DT_Movement_Number);
PARAMETER(DTL.DT_Truck_ID);
PARAMETER(DTL.DT_Trailer_ID);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(DTL.DT_Transprtn_Office_Date);
PARAMETER(DTL.DT_Transprtn_Office_Time);
PARAMETER(DTL.DT_On_Time_Farm_Arrvl_Sts);
PARAMETER(DTL.DT_Route_Start_Pnt);
PARAMETER(DTL.DT_Route_Start_Date);
PARAMETER(DTL.DT_Route_Start_Time);
PARAMETER(DTL.DT_Wait_@_Transp_Offc_Tm);
PARAMETER(DTL.DT_Arrive_@_Farm_Date);
PARAMETER(DTL.DT_Arrive_@_Farm_Time);
PARAMETER(DTL.DT_Drive_Time_To_Farm);
PARAMETER(DTL.DT_Start_Loading_Date);
PARAMETER(DTL.DT_Start_Loading_Time);
PARAMETER(DTL.DT_Wait_@_Farm);
PARAMETER(DTL.DT_Frm_End_Loading_Date);
PARAMETER(DTL.DT_Frm_End_Loading_Time);
PARAMETER(DTL.DT_Load_Time);
PARAMETER(DTL.DT_Leave_Farm_Date);
PARAMETER(DTL.DT_Leave_Farm_Time);
PARAMETER(DTL.DT_Wait_Depart_Frm);
PARAMETER(DTL.DT_Plt_TrkWsh_Arvl_Date);
PARAMETER(DTL.DT_Plt_TrkWsh_Arvl_Time);
PARAMETER(DTL.DT_Arrive_@_Plant_Date);
PARAMETER(DTL.DT_Arrive_@_Plant_Time);
PARAMETER(DTL.DT_Wait_@_TrkWsh);
PARAMETER(DTL.DT_Drive_Time_To_Plant);
PARAMETER(DTL.DT_Delv_Time_Variance);
PARAMETER(DTL.DT_On_Time_Delivery);
PARAMETER(DTL.Delivery_Reason_Code);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Date);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Time);
PARAMETER(DTL.DT_Wait_@_TrkScl);
PARAMETER(DTL.DT_To_Recv_Dock_Date);
PARAMETER(DTL.DT_To_Recv_Dock_Time);
PARAMETER(DTL.DT_Wait_Rcv_Dock);
PARAMETER(DTL.DT_Start_Unloading_Date);
PARAMETER(DTL.DT_Start_Unloading_Time);
PARAMETER(DTL.DT_Wait_@_Rcv_Dock);
PARAMETER(DTL.DT_End_Unload_Date);
PARAMETER(DTL.DT_End_Unload_Time);
PARAMETER(DTL.DT_Unload_Time);
PARAMETER(DTL.DT_Unload_Variance_Time);
PARAMETER(DTL.DT_TrkScl_Weigh_Out_Date);
PARAMETER(DTL.DT_TrkScl_Weigh_Out_Time);
PARAMETER(DTL.DT_Wait_Time_@_the_Plant);
PARAMETER(DTL.DT_Source_Type);
PARAMETER(DTL.DT_GATE_UPDATE_YES);
PARAMETER(DTL.DT_Unused_Date);
PARAMETER(DTL.DT_Unused_Time);
PARAMETER(DTL.DT_Unused_Wait_Time);
PARAMETER(DTL.DT_Error_Sts);
PARAMETER(DTL.DT_Error_Reason);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(PAR.Trk_Arrival_Sched_Sts);
{
 //?Execute internal function

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 EXECUTE FUNCTION(Rtv DSH Status        RT) TYPE(RTVOBJ) FILE(PLADCPP)           AB1247374;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(LCL.DSH_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Update Date/Times only if the Time is also entered  2/26/03
 DO;

 CASE;

 // IF PAR.DT Sched Route Start Time is Not Entered
 IF PAR.DT_Route_Start_Time = *ZERO;

 // OR PAR.DT Sched Route Start Date is Not Entered
 OR PAR.DT_Route_Start_Date = *ZERO;

 // PAR.DT Sched Route Start Date = CON.*ZERO
 PAR.DT_Route_Start_Date = *ZERO;

 // PAR.DT Sched Route Start Time = CON.*ZERO
 PAR.DT_Route_Start_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT Frm Arrival Time is Not Entered
 IF PAR.DT_Arrive_@_Farm_Time = *ZERO;

 // OR PAR.DT Frm Arrival Date is Not Entered
 OR PAR.DT_Arrive_@_Farm_Date = *ZERO;

 // PAR.DT Frm Arrival Date = CON.*ZERO
 PAR.DT_Arrive_@_Farm_Date = *ZERO;

 // PAR.DT Frm Arrival Time = CON.*ZERO
 PAR.DT_Arrive_@_Farm_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT Frm Beg Loading Time is Not Entered
 IF PAR.DT_Start_Loading_Time = *ZERO;

 // OR PAR.DT Frm Beg Loading Date is Not Entered
 OR PAR.DT_Start_Loading_Date = *ZERO;

 // PAR.DT Frm Beg Loading Date = CON.*ZERO
 PAR.DT_Start_Loading_Date = *ZERO;

 // PAR.DT Frm Beg Loading Time = CON.*ZERO
 PAR.DT_Start_Loading_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT Frm Depart Time is Not Entered
 IF PAR.DT_Leave_Farm_Time = *ZERO;

 // OR PAR.DT Frm Depart Date is Not Entered
 OR PAR.DT_Leave_Farm_Date = *ZERO;

 // PAR.DT Frm Depart Date = CON.*ZERO
 PAR.DT_Leave_Farm_Date = *ZERO;

 // PAR.DT Frm Depart Time = CON.*ZERO
 PAR.DT_Leave_Farm_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT Arrive @ Plant Time is Not Entered
 IF PAR.DT_Arrive_@_Plant_Time = *ZERO;

 // OR PAR.DT Arrive @ Plant Date is Not Entered
 OR PAR.DT_Arrive_@_Plant_Date = 0;

 // PAR.DT Arrive @ Plant Date = CON.*ZERO
 PAR.DT_Arrive_@_Plant_Date = *ZERO;

 // PAR.DT Arrive @ Plant Time = CON.*ZERO
 PAR.DT_Arrive_@_Plant_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT TrkScl Weigh-In Time is Not Entered
 IF PAR.DT_TrkScl_Weigh_In_Time = *ZERO;

 // OR PAR.DT TrkScl Weigh-In Date is Not Entered
 OR PAR.DT_TrkScl_Weigh_In_Date = *ZERO;

 // PAR.DT TrkScl Weigh-In Date = CON.*ZERO
 PAR.DT_TrkScl_Weigh_In_Date = *ZERO;

 // PAR.DT TrkScl Weigh-In Time = CON.*ZERO
 PAR.DT_TrkScl_Weigh_In_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT Rcv Dock Arvl Time is Not Entered
 IF PAR.DT_To_Recv_Dock_Time = *ZERO;

 // OR PAR.DT Rcv Dock Arvl Date is Not Entered
 OR PAR.DT_To_Recv_Dock_Date = *ZERO;

 // PAR.DT Rcv Dock Arvl Date = CON.*ZERO
 PAR.DT_To_Recv_Dock_Date = *ZERO;

 // PAR.DT Rcv Dock Arvl Time = CON.*ZERO
 PAR.DT_To_Recv_Dock_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT Beg Unload Time is Not Entered
 IF PAR.DT_Start_Unloading_Time = *ZERO;

 // OR PAR.DT Beg Unload Date is Not Entered
 OR PAR.DT_Start_Unloading_Date = *ZERO;

 // PAR.DT Beg Unload Date = CON.*ZERO
 PAR.DT_Start_Unloading_Date = *ZERO;

 // PAR.DT Beg Unload Time = CON.*ZERO
 PAR.DT_Start_Unloading_Time = *ZERO;

 ENDIF;

 CASE;

 // IF PAR.DT TrkScl Weigh-Out Time is Not Entered
 IF PAR.DT_TrkScl_Weigh_Out_Time = *ZERO;

 // OR PAR.DT TrkScl Weigh-Out Date is Not Entered
 OR PAR.DT_TrkScl_Weigh_Out_Date = *ZERO;

 // PAR.DT TrkScl Weigh-Out Date = CON.*ZERO
 PAR.DT_TrkScl_Weigh_Out_Date = *ZERO;

 // PAR.DT TrkScl Weigh-Out Time = CON.*ZERO
 PAR.DT_TrkScl_Weigh_Out_Time = *ZERO;

 ENDIF;

 ENDDO;

 CASE;

 // IF PAR.DT Arrive @ Plant Time is Entered
 IF PAR.DT_Arrive_@_Plant_Time > *ZERO;

 // LCL.DT Actual Delivery Hour = PAR.DT Arrive @ Plant Time / CON.100 *
 LCL.DT_Actual_Delivery_Hour = PAR.DT_Arrive_@_Plant_Time / 100;

 ENDIF;

 EXECUTE FUNCTION(Chg Delivery Tracking CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1244757;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(PAR.DT_Actual_Kill_Date);
 PARAMETER(LCL.DT_Actual_Delivery_Hour);
 PARAMETER(PAR.DT_Scheduled_Hour);
 PARAMETER(PAR.DT_Delivery_Initiation);
 PARAMETER(PAR.DT_Farm_Site_Code);
 PARAMETER(PAR.DT_Building);
 PARAMETER(PAR.DT_Room);
 PARAMETER(PAR.DT_Sire_Line_Code);
 PARAMETER(PAR.DT_Hog_Group_Reference);
 PARAMETER(PAR.DT_Delivered_Head);
 PARAMETER(PAR.DT_Delivered_Weight_lbs);
 PARAMETER(PAR.DT_Trucker_Code_HPS);
 PARAMETER(PAR.DT_Driver);
 PARAMETER(PAR.DT_Loading_Crew);
 PARAMETER(PAR.CHR_Code);
 PARAMETER(PAR.DT_Load_Type);
 PARAMETER(PAR.DT_Full_Split_Load);
 PARAMETER(PAR.DT_Movement_Number);
 PARAMETER(PAR.DT_Truck_ID);
 PARAMETER(PAR.DT_Trailer_ID);
 PARAMETER(PAR.DT_Transportation_Office);
 PARAMETER(PAR.DT_Transprtn_Office_Date);
 PARAMETER(PAR.DT_Transprtn_Office_Time);
 PARAMETER(*ZERO);
 PARAMETER(PAR.DT_On_Time_Farm_Arrvl_Sts);
 PARAMETER(PAR.DT_Route_Start_Pnt);
 PARAMETER(PAR.DT_Route_Start_Date);
 PARAMETER(PAR.DT_Route_Start_Time);
 PARAMETER(*ZERO);
 PARAMETER(PAR.DT_Wait_@_Transp_Offc_Tm);
 PARAMETER(PAR.DT_Arrive_@_Farm_Date);
 PARAMETER(PAR.DT_Arrive_@_Farm_Time);
 PARAMETER(PAR.DT_Drive_Time_To_Farm);
 PARAMETER(PAR.DT_Start_Loading_Date);
 PARAMETER(PAR.DT_Start_Loading_Time);
 PARAMETER(*ZERO);
 PARAMETER(PAR.DT_Wait_@_Farm);
 PARAMETER(PAR.DT_Frm_End_Loading_Date);
 PARAMETER(PAR.DT_Frm_End_Loading_Time);
 PARAMETER(PAR.DT_Load_Time);
 PARAMETER(PAR.DT_Leave_Farm_Date);
 PARAMETER(PAR.DT_Leave_Farm_Time);
 PARAMETER(PAR.DT_Wait_Depart_Frm);
 PARAMETER(PAR.DT_Plt_TrkWsh_Arvl_Date);
 PARAMETER(PAR.DT_Plt_TrkWsh_Arvl_Time);
 PARAMETER(PAR.DT_Arrive_@_Plant_Date);
 PARAMETER(PAR.DT_Arrive_@_Plant_Time);
 PARAMETER(PAR.DT_Wait_@_TrkWsh);
 PARAMETER(PAR.DT_Drive_Time_To_Plant);
 PARAMETER(PAR.DT_Delv_Time_Variance);
 PARAMETER(PAR.DT_On_Time_Delivery);
 PARAMETER(PAR.Delivery_Reason_Code);
 PARAMETER(PAR.DT_TrkScl_Weigh_In_Date);
 PARAMETER(PAR.DT_TrkScl_Weigh_In_Time);
 PARAMETER(PAR.DT_Wait_@_TrkScl);
 PARAMETER(PAR.DT_To_Recv_Dock_Date);
 PARAMETER(PAR.DT_To_Recv_Dock_Time);
 PARAMETER(PAR.DT_Wait_Rcv_Dock);
 PARAMETER(PAR.DT_Start_Unloading_Date);
 PARAMETER(PAR.DT_Start_Unloading_Time);
 PARAMETER(PAR.DT_Wait_@_Rcv_Dock);
 PARAMETER(PAR.DT_End_Unload_Date);
 PARAMETER(PAR.DT_End_Unload_Time);
 PARAMETER(PAR.DT_Unload_Time);
 PARAMETER(PAR.DT_Unload_Variance_Time);
 PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(PAR.DT_Wait_Time_@_the_Plant);
 PARAMETER(*ZERO);
 PARAMETER(PAR.DT_Source_Type);
 PARAMETER(PAR.DT_GATE_UPDATE_YES);
 PARAMETER(PAR.DT_Unused_Date);
 PARAMETER(PAR.DT_Unused_Time);
 PARAMETER(PAR.DT_Unused_Wait_Time);
 PARAMETER(PAR.DT_Error_Sts);
 PARAMETER(PAR.DT_Error_Reason);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.SR_Source_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?E2423 changes due to farm site, and Live or not Live with Mtech
 CASE;

 // IF PAR.DT Source Type is Internal
 IF PAR.DT_Source_Type = 'I';

 //?E2423 changes due to farm site, and Live or not Live with Mtech
 //?Get Farm Site Information either by Movement or Farm Site
 CASE;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // Call program Rtv HPS Farm Inf-Mtech UP.
 CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
 PARAMETER(PGM.*Return_code);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(PAR.DT_Farm_Site_Code);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);
 PARAMETER(WRK.HPS_Farm_County);
 PARAMETER(WRK.HPS_Cell_Manager_Code_USR);
 PARAMETER(WRK.HPS_Cell_Manager_Nm_USR);
 PARAMETER(NLL.MTech_Farm_Site_Ref);
 PARAMETER(NLL.MTech_Cell_Manager_Ref);

 // LCL.Farm Site USR = PAR.DT Farm Site Code
 LCL.Farm_Site_USR = PAR.DT_Farm_Site_Code;

 //?Get Farm Site Information either by Movement or Farm Site
 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.DT_Movement_Number);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(LCL.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.DT_Movement_Number);
 PARAMETER(LCL.Farm_Site_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
  IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

  CASE;

  // IF DB1.TH Source Type is Internal
  IF DB1.TH_Source_Type = 'I';

  //?Due to test with e2423 SAW that we were change the
  //?movement and farm site and not the state code
  //?use this retrieve regardless of Not Live Or Live with MTech
  // Call program Rtv HPS Farm Inf-Mtech UP.
  CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
  PARAMETER(PGM.*Return_code);
  PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
  PARAMETER(WRK.State);
  PARAMETER(NLL.HPS_Farm_County);
  PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
  PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
  PARAMETER(NLL.MTech_Farm_Site_Ref);
  PARAMETER(NLL.MTech_Cell_Manager_Ref);

  EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(WRK.State);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_State);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?E2423 Mtech Not Live
 //?Get the next movement number using the HPS app - Not Live with Mtech
 CASE;

 // IF PAR.DT Source Type is Internal
 IF PAR.DT_Source_Type = 'I';

 // AND LCL.DSH Status is Open for Live Prod
 AND LCL.DSH_Status = '02'/'03'/'05';

 // LCL.DT Movement Number = PAR.DT Movement Number
 LCL.DT_Movement_Number = PAR.DT_Movement_Number;

 // Call program Z1d Shppd Mvmnts f/DT UP.
 CALL PROGRAM(Z1d Shppd Mvmnts f/DT UP) ('HP278');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(LCL.DT_Movement_Number);

 CASE;

 // IF PAR.DT Movement Number EQ WRK.Zero USR
 IF PAR.DT_Movement_Number = WRK.Zero_USR;

 CASE;

 // IF LCL.DT Movement Number EQ WRK.Zero USR
 IF LCL.DT_Movement_Number = WRK.Zero_USR;

 // Send information message - 'Unscheduled Movement could not be created.'
 MESSAGE(PRK1072 *INFO);
 MSGPARM(LCL.DT_Movement_Number);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Upd Movement #        RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1251432;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(LCL.DT_Movement_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Movement #        CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1251433;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DT_Delivery_Date);
  PARAMETER(DB1.DT_Delivery_Time);
  PARAMETER(DB1.DT_Delivery_Time_Seq);
  PARAMETER(PAR.DT_Movement_Number);
 }

 //?since the movement is being created then what is the
 //?farm site and state code for this movement
 //?this was done to have the farm site movement and state code on
 //?the tattoo header
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(LCL.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 EXECUTE FUNCTION(Upd Farm, Movement,St RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1314544;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(LCL.DT_Movement_Number);
 PARAMETER(WRK.State);
 PARAMETER(LCL.Farm_Site_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
  IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

  CASE;

  // IF DB1.TH Source Type is Internal
  IF DB1.TH_Source_Type = 'I';

  //?Due to test with e2423 SAW that we were change the
  //?movement and fram site and not the state code
  //?use this retreiev regardless of Not Live Or Live with MTech
  // Call program Rtv HPS Farm Inf-Mtech UP.
  CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
  PARAMETER(PGM.*Return_code);
  PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
  PARAMETER(WRK.State);
  PARAMETER(NLL.HPS_Farm_County);
  PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
  PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
  PARAMETER(NLL.MTech_Farm_Site_Ref);
  PARAMETER(NLL.MTech_Cell_Manager_Ref);

  EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(WRK.State);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_State);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  ENDIF;

 }

 // Send information message - 'Unscheduled Movement &1 created.  Press F5 to Refresh'
 MESSAGE(PRK1071 *INFO);
 MSGPARM(LCL.DT_Movement_Number);

 ENDIF;

 ENDIF;

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 //?E2423 Mtech Live will not be assigning movement numbers
 ENDIF;

 //?Susan Mason 8/11/2011 Changes to the Arrival Process
 // LCL.Trk Arrival Sched Sts = PAR.Trk Arrival Sched Sts
 LCL.Trk_Arrival_Sched_Sts = PAR.Trk_Arrival_Sched_Sts;

 CASE;

 // IF LCL.Trk Arrival Sched Sts is Allow Arrival Process
 IF LCL.Trk_Arrival_Sched_Sts = 'Y';

 //?If Arrival process = yes then dates are required
 //?Validation for the Maintenance of the delivery tracking
 // Call program Val DelTrck ArrvRules XF.
 CALL PROGRAM(Val DelTrck ArrvRules XF) ('PLQGXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(WRK.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(PGM.*Return_code);
 PARAMETER('M');

 CASE;

 // IF PGM.*Return code is Arrival Date/Tm Error
 IF PGM.*Return_code = 'A';

 // IF WRK.BOL Truck Scale Weigh Sts is In/Out/Respread
 IF WRK.BOL_Truck_Scale_Weigh_Sts = 'I'/'O'/'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Trk Arrival Sched Sts = CND.Authorized Process
 LCL.Trk_Arrival_Sched_Sts = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Trk Arrival Sched Sts is Authorized Process
 IF LCL.Trk_Arrival_Sched_Sts = 'Y';

 CASE;

 // IF PAR.DT Arrive @ Plant Date is Entered
 IF PAR.DT_Arrive_@_Plant_Date <> *ZERO;

 //?Set to A
 // Call program Chg Bol Spr - ArvProc XF.
 CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('A');

 // IF PAR.DT Arrive @ Plant Date is Not Entered
 IF PAR.DT_Arrive_@_Plant_Date = 0;

 //?Set to none
 // Call program Chg Bol Spr - ArvProc XF.
 CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(*BLANK);

 ENDIF;

 ENDIF;

}


//?USER: Exit program processing

//?Original Logic
CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

// PAR.Status 1 = CND.Yes
PAR.Status_1 = 'Y';

// Call program Exc Clc DT Wait perDt XF.
CALL PROGRAM(Exc Clc DT Wait perDt XF) ('PLC8XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);

ENDIF;

