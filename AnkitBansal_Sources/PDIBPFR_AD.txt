// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDIBPFR
// ?Date: 14.08.2025 Time: 12:03:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// PAR.Shipped Item Code = CON.*ZERO
PAR.Shipped_Item_Code = *ZERO;

//?USER: Record selection processing

//?New item
CASE;

// IF PAR.Shipped Item Code NE DB1.Shipped Item Code
IF PAR.Shipped_Item_Code <> DB1.Shipped_Item_Code;

// PAR.Shipped Item Code = DB1.Shipped Item Code
PAR.Shipped_Item_Code = DB1.Shipped_Item_Code;

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF DB1.Actual Shipped Date LT PAR.USR From Date
IF DB1.Actual_Shipped_Date < PAR.USR_From_Date;

// OR DB1.Actual Shipped Date GT PAR.USR Through Date
OR DB1.Actual_Shipped_Date > PAR.USR_Through_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Check Sales flags
CASE;

// IF PAR.USR Include all Products is NO
IF PAR.USR_Include_all_Products = 'N';

// AND PAR.Print on Realization Rpt is No
AND PAR.Print_on_Realization_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Check Sales flags
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// AND PAR.USR Sales Realiz. Flag is None
AND PAR.USR_Sales_Realiz_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Description - 15 = Condition name of PAR.USR Sales Realiz. Flag
X1PG_USR_Description_15 = RTVCND(PAR.USR_Sales_Realiz_Flag);

//?USER: Null report processing

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Item Structure Group Code header format

// SUPPRESSED PRINT Shipped Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(CUR.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FOB amount and weight
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

//?FOB amount and weight
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// AND DB1.Affect Sales Doll Status is yes
AND DB1.Affect_Sales_Doll_Status = 'Y';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?reverse sign of weight if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.Weight Billed GT WRK.ZERO
AND CUR.Weight_Billed > WRK.ZERO;

// CUR.Weight Billed = CON.*ZERO - CUR.Weight Billed
CUR.Weight_Billed = *ZERO - CUR.Weight_Billed;

ENDIF;

//?Inventory value
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.Billing Detail Cost Dol. = CON.*ZERO
CUR.Billing_Detail_Cost_Dol = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Revaluation Eff. Date = CON.9999999
WRK.Revaluation_Eff_Date = 9999999;

// WRK.Revaluation Eff. Time = CON.999999
WRK.Revaluation_Eff_Time = 999999;

// CUR.Unit Cost Per Pound = CND.equal to zero
CUR.Unit_Cost_Per_Pound = *ZERO;

EXECUTE FUNCTION(RTV Cost/Dte/Tme/Rev   RT) TYPE(RTVOBJ) FILE(PDKZCPP)          AC1416061;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(WRK.Revaluation_Eff_Date);
PARAMETER(WRK.Revaluation_Eff_Time);
PARAMETER(CUR.Unit_Cost_Per_Pound);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(WRK.Revaluation_Cost_Type);
PARAMETER(CUR.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CUR.Unit Cost Per Pound is Greater than zero
IF CUR.Unit_Cost_Per_Pound > *ZERO;

// CUR.USR Weight = CUR.Weight Billed
CUR.USR_Weight = CUR.Weight_Billed;

// CUR.Billing Detail Cost Dol. = CUR.Unit Cost Per Pound * CUR.USR Weight *Rounded
CUR.Billing_Detail_Cost_Dol = CUR.Unit_Cost_Per_Pound * CUR.USR_Weight 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Billing Detail Cost Dol. = CON.*ZERO
CUR.Billing_Detail_Cost_Dol = *ZERO;

// CUR.USR Weight = CON.*ZERO
CUR.USR_Weight = *ZERO;

ENDIF;

ENDIF;

//?Inventory value
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.Billing Detail Cost Dol. = CON.*ZERO
CUR.Billing_Detail_Cost_Dol = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Revaluation Eff. Date = CON.9999999
WRK.Revaluation_Eff_Date = 9999999;

// WRK.Revaluation Eff. Time = CON.999999
WRK.Revaluation_Eff_Time = 999999;

// CUR.Unit Cost Per Pound = CND.equal to zero
CUR.Unit_Cost_Per_Pound = *ZERO;

EXECUTE FUNCTION(RTV Cost/Dte/Tme/Rev   RT) TYPE(RTVOBJ) FILE(PDKZCPP)          AC1416061;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(WRK.Revaluation_Eff_Date);
PARAMETER(WRK.Revaluation_Eff_Time);
PARAMETER(CUR.Unit_Cost_Per_Pound);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(WRK.Revaluation_Cost_Type);
PARAMETER(CUR.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CUR.Unit Cost Per Pound is Greater than zero
IF CUR.Unit_Cost_Per_Pound > *ZERO;

// CUR.USR Weight = CUR.Weight Billed
CUR.USR_Weight = CUR.Weight_Billed;

// CUR.Billing Detail Cost Dol. = CUR.Unit Cost Per Pound * CUR.USR Weight *Rounded
CUR.Billing_Detail_Cost_Dol = CUR.Unit_Cost_Per_Pound * CUR.USR_Weight 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Billing Detail Cost Dol. = CON.*ZERO
CUR.Billing_Detail_Cost_Dol = *ZERO;

// CUR.USR Weight = CON.*ZERO
CUR.USR_Weight = *ZERO;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.Billing Detail Cost Dol. = CON.*ZERO
CUR.Billing_Detail_Cost_Dol = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Revaluation Eff. Date = CON.9999999
WRK.Revaluation_Eff_Date = 9999999;

// WRK.Revaluation Eff. Time = CON.999999
WRK.Revaluation_Eff_Time = 999999;

// CUR.Unit Cost Per Pound = CND.equal to zero
CUR.Unit_Cost_Per_Pound = *ZERO;

EXECUTE FUNCTION(RTV Cost/Dte/Tme/Rev   RT) TYPE(RTVOBJ) FILE(PDKZCPP)          AC1416061;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(WRK.Revaluation_Eff_Date);
PARAMETER(WRK.Revaluation_Eff_Time);
PARAMETER(CUR.Unit_Cost_Per_Pound);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(WRK.Revaluation_Cost_Type);
PARAMETER(CUR.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CUR.Unit Cost Per Pound is Greater than zero
IF CUR.Unit_Cost_Per_Pound > *ZERO;

// CUR.USR Weight = CUR.Weight Billed
CUR.USR_Weight = CUR.Weight_Billed;

// CUR.Billing Detail Cost Dol. = CUR.Unit Cost Per Pound * CUR.USR Weight *Rounded
CUR.Billing_Detail_Cost_Dol = CUR.Unit_Cost_Per_Pound * CUR.USR_Weight 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Billing Detail Cost Dol. = CON.*ZERO
CUR.Billing_Detail_Cost_Dol = *ZERO;

// CUR.USR Weight = CON.*ZERO
CUR.USR_Weight = *ZERO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process after print of detail format

NXT.USR_FOB_Sales_Price = SUM(CUR.FOB_Gross_Amount);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed);

NXT.Weight_Billed_Actual_SUM = SUM(CUR.USR_Weight);

NXT.Product_Value_SUM = SUM(CUR.Billing_Detail_Cost_Dol);

//?USER: Print required level totals

CASE;

IF NEW Shipped_Item_Code;
CASE;

// IF CUR.Item Structure Group Code EQ PAR.Item Structure Group Code
IF CUR.Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Compute FOB Sales Price (CWT)
CASE;

// IF CUR.Weight Billed SUM NE WRK.ZERO
IF CUR.Weight_Billed_SUM <> WRK.ZERO;

// Synon (17,9) work field =       * Compute FOB Sales Prc CWT
PGM.*Synon_179_work_field = ( CUR.USR_FOB_Sales_Price / CUR.Weight_Billed_SUM 'H' ) * 100          +
'H';

//?Compute FOB Gross Amount
CASE;

// IF CUR.USR FOB Sales Price LT WRK.ZERO
IF CUR.USR_FOB_Sales_Price < WRK.ZERO;

// AND CUR.Weight Billed SUM LT WRK.ZERO
AND CUR.Weight_Billed_SUM < WRK.ZERO;

// CUR.FOB Gross Amount = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.FOB_Gross_Amount = PGM.*Synon_179_work_field * -1 'H';

//?Compute FOB Gross Amount
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.FOB Gross Amount = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.FOB_Gross_Amount = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute FOB Sales Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

ENDIF;

//?Compute Inventory Value (CWT)
CASE;

// IF CUR.Weight Billed Actual  SUM NE WRK.ZERO
IF CUR.Weight_Billed_Actual_SUM <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Product Value CWT
PGM.*Synon_179_work_field = ( CUR.Product_Value_SUM / CUR.Weight_Billed_Actual_SUM 'H' )           +
* 100 'H';

//?calculate Product value
CASE;

// IF CUR.Product Value SUM LT WRK.ZERO
IF CUR.Product_Value_SUM < WRK.ZERO;

// AND CUR.Weight Billed Actual  SUM LT WRK.ZERO
AND CUR.Weight_Billed_Actual_SUM < WRK.ZERO;

// CUR.Product Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.Product_Value = PGM.*Synon_179_work_field * -1 'H';

//?calculate Product value
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Product Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.Product_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Inventory Value (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Product Value = CON.*ZERO
CUR.Product_Value = *ZERO;

ENDIF;

//?compute var/CWT
// CUR.Variance amount 1     USR = CUR.FOB Gross Amount - CUR.Product Value
CUR.Variance_amount_1_USR = CUR.FOB_Gross_Amount - CUR.Product_Value;

//?Compute Dollar Variance
// Synon (17,9) work field =       * Convert to CWT
PGM.*Synon_179_work_field = CUR.Variance_amount_1_USR * ( CUR.Weight_Billed_SUM / 100              +
'H' ) 'H';

// CUR.Variance Amount 2     USR = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.Variance_Amount_2_USR = PGM.*Synon_179_work_field * 1 'H';

// Print Shipped Item Code totals format
PRINT Shipped Item Code totals format;

// PAR.Item Structure Group Code = CUR.Item Structure Group Code
PAR.Item_Structure_Group_Code = CUR.Item_Structure_Group_Code;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

// NXT.Variance Amount 2     USR = NXT.Variance Amount 2     USR + CUR.Variance Amo
NXT.Variance_Amount_2_USR = NXT.Variance_Amount_2_USR + CUR.Variance_Amount_2_USR;

// CUR.Variance Amount 2     USR = CON.*ZERO
CUR.Variance_Amount_2_USR = *ZERO;

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
// Print Item Structure Group Code totals format
PRINT Item Structure Group Code totals format;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

// NXT.Variance Amount 2     USR = NXT.Variance Amount 2     USR + CUR.Variance Amo
NXT.Variance_Amount_2_USR = NXT.Variance_Amount_2_USR + CUR.Variance_Amount_2_USR;

// CUR.Variance Amount 2     USR = CON.*ZERO
CUR.Variance_Amount_2_USR = *ZERO;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

