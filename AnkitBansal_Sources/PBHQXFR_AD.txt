// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBHQXFR
// ?Date: 14.08.2025 Time: 03:48:01
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Get EDI Invoice Class for BT Customer
EXECUTE FUNCTION(RTV BT Intrchg Class  RT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2062107;
PARAMETER(PAR.Bill_to_Customer);
PARAMETER('IN');
PARAMETER(LCL.Class_Code);
PARAMETER(PAR.EDI_File_Set);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Process all Item line Accruals  Invoice Print type = "IT"
EXECUTE FUNCTION(Rtv Accrual Type/Cde  RT) TYPE(RTVOBJ) FILE(PDICCPP)           AC2061726;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('IT');
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(LCL.Class_Code);
{
 //?USER: Initialize routine

 //?Maintenance:
 //?6/19/18 SZ Fixed parm to rtv the G73 description
 //?7/15/16 SZ changed pgm to rtv the S1 Allow/Chg Indicator
 //?4/12/16 SZ Added the rate to update the Allow/Chg detail
 //?4/11/16 SZ Fixed parms to rtv the 880 codes.
 //?6/3/15 SZ add parm Element val to EDI Seg/Elem Map Values to get the
 //?          the description.
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?PROCESS IF ITEM ACCRUAL
 DO;

 CASE;

 // IF PAR.HDA Invoice Print Type is Item
 IF PAR.HDA_Invoice_Print_Type = 'IT';

 //?Populate the 880 Invoice G72 fields
 CASE;

 // IF PAR.Class Code is Grocery Invoice
 IF PAR.Class_Code = '880';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get the Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(2);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve allow/chg Indicator
 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 //?Retrieve allow/chg Indicator
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 // PAR.S5/G8 Amount = DB1.Extended Amount
 PAR.S5_G8_Amount = DB1.Extended_Amount;

 // PAR.S8/G5 Rate = DB1.Accrual Rate
 PAR.S8_G5_Rate = DB1.Accrual_Rate;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP002D)           AC2061752;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Accrual_Rate);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 //?Populate the 880 Invoice G72 fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Populate the 810 Invoice SAC fields
 //?Class code is Invoice 810
 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get the Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.S5/G8 Amount = DB1.Extended Amount
 PAR.S5_G8_Amount = DB1.Extended_Amount;

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP002D)           AC2061752;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Accrual_Rate);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 ENDIF;

 ENDIF;

 ENDDO;

 //?Process IF Invoice Total Accruals
 DO;

 CASE;

 // IF PAR.HDA Invoice Print Type is Invoice Total
 IF PAR.HDA_Invoice_Print_Type = 'IN';

 //?First time processing
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?Break on the Accrual code
 CASE;

 // IF LCL.Accrual Code NE DB1.Accrual Code
 IF LCL.Accrual_Code <> DB1.Accrual_Code;

 //?Populate the 880 Invoice G72 fields
 CASE;

 // IF PAR.Class Code is Grocery Invoice
 IF PAR.Class_Code = '880';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(2);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 // LCL.Extended Amount = CON.*ZERO
 LCL.Extended_Amount = *ZERO;

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 //?Populate the 880 Invoice G72 fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Populate the 810 Invoice SAC fields
 //?Class code is Invoice 810
 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 // LCL.Extended Amount = CON.*ZERO
 LCL.Extended_Amount = *ZERO;

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 ENDIF;

 ENDIF;

 // LCL.Extended Amount = LCL.Extended Amount + DB1.Extended Amount
 LCL.Extended_Amount = LCL.Extended_Amount + DB1.Extended_Amount;

 ENDIF;

 ENDDO;

 //?USER: Exit processing

 //?LAST RECORD PROCESSING Header Accruals
 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 CASE;

 // IF PAR.HDA Invoice Print Type is Invoice Total
 IF PAR.HDA_Invoice_Print_Type = 'IN';

 //?Populate the 880 Invoice G72 fields
 CASE;

 // IF PAR.Class Code is Grocery Invoice
 IF PAR.Class_Code = '880';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(2);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 //?Populate the 880 Invoice G72 fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Populate the 810 Invoice SAC fields
 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 ENDIF;

 ENDIF;

 ENDIF;

}


//?Process all Invoice Total Accruals  Invoice print type = "IN"
EXECUTE FUNCTION(Rtv Accrual Type/Cde  RT) TYPE(RTVOBJ) FILE(PDICCPP)           AC2061726;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('IN');
PARAMETER(PAR.EDI_SURROGATE_NUMBER);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(LCL.Class_Code);
{
 //?USER: Initialize routine

 //?Maintenance:
 //?6/19/18 SZ Fixed parm to rtv the G73 description
 //?7/15/16 SZ changed pgm to rtv the S1 Allow/Chg Indicator
 //?4/12/16 SZ Added the rate to update the Allow/Chg detail
 //?4/11/16 SZ Fixed parms to rtv the 880 codes.
 //?6/3/15 SZ add parm Element val to EDI Seg/Elem Map Values to get the
 //?          the description.
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?PROCESS IF ITEM ACCRUAL
 DO;

 CASE;

 // IF PAR.HDA Invoice Print Type is Item
 IF PAR.HDA_Invoice_Print_Type = 'IT';

 //?Populate the 880 Invoice G72 fields
 CASE;

 // IF PAR.Class Code is Grocery Invoice
 IF PAR.Class_Code = '880';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get the Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(2);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve allow/chg Indicator
 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 //?Retrieve allow/chg Indicator
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 // PAR.S5/G8 Amount = DB1.Extended Amount
 PAR.S5_G8_Amount = DB1.Extended_Amount;

 // PAR.S8/G5 Rate = DB1.Accrual Rate
 PAR.S8_G5_Rate = DB1.Accrual_Rate;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP002D)           AC2061752;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Accrual_Rate);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 //?Populate the 880 Invoice G72 fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Populate the 810 Invoice SAC fields
 //?Class code is Invoice 810
 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get the Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.S5/G8 Amount = DB1.Extended Amount
 PAR.S5_G8_Amount = DB1.Extended_Amount;

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP002D)           AC2061752;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Accrual_Rate);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 ENDIF;

 ENDIF;

 ENDDO;

 //?Process IF Invoice Total Accruals
 DO;

 CASE;

 // IF PAR.HDA Invoice Print Type is Invoice Total
 IF PAR.HDA_Invoice_Print_Type = 'IN';

 //?First time processing
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?Break on the Accrual code
 CASE;

 // IF LCL.Accrual Code NE DB1.Accrual Code
 IF LCL.Accrual_Code <> DB1.Accrual_Code;

 //?Populate the 880 Invoice G72 fields
 CASE;

 // IF PAR.Class Code is Grocery Invoice
 IF PAR.Class_Code = '880';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(2);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 // LCL.Extended Amount = CON.*ZERO
 LCL.Extended_Amount = *ZERO;

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 //?Populate the 880 Invoice G72 fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Populate the 810 Invoice SAC fields
 //?Class code is Invoice 810
 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 // LCL.Extended Amount = CON.*ZERO
 LCL.Extended_Amount = *ZERO;

 // LCL.Accrual Code = DB1.Accrual Code
 LCL.Accrual_Code = DB1.Accrual_Code;

 ENDIF;

 ENDIF;

 // LCL.Extended Amount = LCL.Extended Amount + DB1.Extended Amount
 LCL.Extended_Amount = LCL.Extended_Amount + DB1.Extended_Amount;

 ENDIF;

 ENDDO;

 //?USER: Exit processing

 //?LAST RECORD PROCESSING Header Accruals
 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 CASE;

 // IF PAR.HDA Invoice Print Type is Invoice Total
 IF PAR.HDA_Invoice_Print_Type = 'IN';

 //?Populate the 880 Invoice G72 fields
 CASE;

 // IF PAR.Class Code is Grocery Invoice
 IF PAR.Class_Code = '880';

 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('G72');
 PARAMETER(1);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('G72');
 PARAMETER(2);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 //?Populate the 880 Invoice G72 fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Populate the 810 Invoice SAC fields
 //?S2/G1 All/Chg Code
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Allow/Charge Description
 EXECUTE FUNCTION(Rtv AccrSeg/Elem Val  RT) TYPE(RTVOBJ) FILE(PBAVCPP)           AC2061742;
 PARAMETER('SAC');
 PARAMETER(2);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(LCL.Element_Value_Definition);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S12/G2 All/Chg Method
 EXECUTE FUNCTION(RTV EDI Accrual X-Ref RT) TYPE(RTVOBJ) FILE(PBAWREP)           AC2062089;
 PARAMETER(LCL.Accrual_Code);
 PARAMETER('SAC');
 PARAMETER(12);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get Allow or Charge Indicator
 DO;

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(LCL.Add_on_Allowance);
 PARAMETER(NLL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Add-on/Allowance is Add-on
 IF LCL.Add_on_Allowance = 'A';

 // PAR.S1 Allow/Chg Indicator = CND.Charge(Add)
 PAR.S1_Allow_Chg_Indicator = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Add-on/Allowance is Allowance
 IF LCL.Add_on_Allowance = 'S';

 // PAR.S1 Allow/Chg Indicator = CND.Allowance(Subtract)
 PAR.S1_Allow_Chg_Indicator = 'A';

 ENDIF;

 ENDIF;

 ENDDO;

 // LCL.ENT01-SEQUENCE # = CON.1 + LCL.ENT01-SEQUENCE #
 LCL.ENT01_SEQUENCE_# = 1 + LCL.ENT01_SEQUENCE_#;

 // PAR.S5/G8 Amount = LCL.Extended Amount
 PAR.S5_G8_Amount = LCL.Extended_Amount;

 EXECUTE FUNCTION(CRT EDI SAC/G72 Allow/CR) TYPE(CRTOBJ) FILE(ECP001D)           AC2061719;
 PARAMETER(PAR.EDI_SURROGATE_NUMBER);
 PARAMETER(PAR.S2_G1_Allow_Chg_cde);
 PARAMETER(PAR.S12_G2_All_Chg_Method);
 PARAMETER(LCL.ENT01_SEQUENCE_#);
 PARAMETER(PAR.S1_Allow_Chg_Indicator);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.S5_G8_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Element_Value_Definition);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 ENDIF;

 ENDIF;

 ENDIF;

}


