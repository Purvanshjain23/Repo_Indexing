// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLXIXFR
// ?Date: 14.08.2025 Time: 02:55:42
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//? 7/02/2021 JBB WHD80995 - Increase rollover values for BO#
//?                          Recompile only after changing the
//?                          RTVOBJ-Rtv Crt Next BOH      RT to
//?                          rollover when the BO# reaches 999999,
//?                          instead of 99999.
//?2/09/06 Change this area to get the sub contract code for the buyorder
//?        by Date Decending and not just the last record
//?9/23/03 If input parm is *zero, create BOH, else just create the load.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

// WRK.BOH Buy Order Number = PAR.BOH Buy Order Number
WRK.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

EXECUTE FUNCTION(Rtv Std Time,buyer    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1122902;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.PD_Std_Delv_Time);
PARAMETER(WRK.PD_Std_Truck_Size);
PARAMETER(WRK.PD_Freight_Exp_Paid_By);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.HB_Buyer_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Create BOH if input parm is *zero            9/23/03
CASE;

// IF PAR.BOH Buy Order Number is EQ Zero
IF PAR.BOH_Buy_Order_Number = *ZERO;

// WRK.PC Contract Code = WRK.Blank USR
WRK.PC_Contract_Code = WRK.Blank_USR;

// WRK.PSC Sub-Contract Code = WRK.Blank USR
WRK.PSC_Sub_Contract_Code = WRK.Blank_USR;

// WRK.GN Genetic Code = WRK.Blank USR
WRK.GN_Genetic_Code = WRK.Blank_USR;

// WRK.PO Option Code = WRK.Blank USR
WRK.PO_Option_Code = WRK.Blank_USR;

// WRK.CMP Program Code = WRK.Blank USR
WRK.CMP_Program_Code = WRK.Blank_USR;

// WRK.PSC Commodity Market Code = CON.*BLANK
WRK.PSC_Commodity_Market_Code = *BLANK;

// WRK.PSC Commodity Price Group = CON.*BLANK
WRK.PSC_Commodity_Price_Group = *BLANK;

// WRK.PSC Mkt + or - = CON.*ZERO
WRK.PSC_Mkt_+_or = *ZERO;

// WRK.PSC Market Date Method = CON.*BLANK
WRK.PSC_Market_Date_Method = *BLANK;

//?Read by prod/location/kill date/
EXECUTE FUNCTION(Rtv Sb-Ctr BO info-DTEDF) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1269440;
PARAMETER(WRK.PC_Contract_Code);
PARAMETER(WRK.PSC_Sub_Contract_Code);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(WRK.PSC_Commodity_Market_Code);
PARAMETER(WRK.PSC_Commodity_Price_Group);
PARAMETER(WRK.PSC_Mkt_+_or);
PARAMETER(WRK.PSC_Market_Date_Method);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.PO_Option_Code);
PARAMETER(WRK.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Set BO Type
CASE;

// IF WRK.PC Contract Code NE WRK.Blank USR
IF WRK.PC_Contract_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

// WRK.BOH Buy Order Type = CND.Contract
WRK.BOH_Buy_Order_Type = 'C';

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// WRK.BOH Buy Order Type = CND.Internal
WRK.BOH_Buy_Order_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.BOH Buy Order Type = CND.Open Market
WRK.BOH_Buy_Order_Type = 'O';

ENDIF;

//?Set BO Type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

// WRK.BOH Buy Order Type = CND.Open Market
WRK.BOH_Buy_Order_Type = 'O';

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// WRK.BOH Buy Order Type = CND.Internal
WRK.BOH_Buy_Order_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.BOH Buy Order Type = CND.Open Market
WRK.BOH_Buy_Order_Type = 'O';

ENDIF;

ENDIF;

CASE;

// IF WRK.PO Option Code EQ WRK.Blank USR
IF WRK.PO_Option_Code = WRK.Blank_USR;

// WRK.PO Option Code = CND.Cash Basis Price
WRK.PO_Option_Code = 'CBP';

ENDIF;

//?this isnt the right one - so leave it blank if ODB
CASE;

// IF WRK.CMP Program Code EQ WRK.Blank USR
IF WRK.CMP_Program_Code = WRK.Blank_USR;

// AND WRK.BOH Buy Order Type is Contract or Internal
AND WRK.BOH_Buy_Order_Type = 'C'/'I';

EXECUTE FUNCTION(Rtv CMP SBD Standard  RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1122932;
PARAMETER(WRK.CMP_Program_Code);
PARAMETER('S');
{
 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.CMP_Program_Code = DB1.CMP_Program_Code;

}


ENDIF;

// Call program RTV Year/Period/Week   XF.
CALL PROGRAM(RTV Year/Period/Week   XF) ('PDT3XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(WRK.CW_Year);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(WRK.CW_Week_Number);

EXECUTE FUNCTION(Crt Buy Order Head DS IF) TYPE(EXCINTFUN)                      AB1246637;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.BOH_Buy_Order_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER('C');
PARAMETER(WRK.BOH_Buy_Order_Type);
PARAMETER(WRK.PSC_Mkt_+_or);
PARAMETER('O');
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.PSC_Commodity_Market_Code);
PARAMETER(WRK.PSC_Commodity_Price_Group);
PARAMETER(WRK.PSC_Market_Date_Method);
PARAMETER(WRK.Status_3);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(WRK.CW_Year);
PARAMETER(WRK.CW_Week_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(WRK.PC_Contract_Code);
PARAMETER(WRK.PSC_Sub_Contract_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.PO_Option_Code);
PARAMETER(WRK.CMP_Program_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('Y');
{
 //?Execute internal function

 //?Status 3 is yes to force create bo from Delv Sch
 EXECUTE FUNCTION(Rtv BOH For Prdcr/Loc RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1246633;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOH_Kill_Date);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 {
  //?USER: Initialize routine

  // PAR.BOH Buy Order Number = CON.*ZERO
  PAR.BOH_Buy_Order_Number = *ZERO;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PAR.BOH Buy Order Number is EQ Zero
 IF PAR.BOH_Buy_Order_Number = *ZERO;

 // OR PAR.Status 3 is Yes
 OR PAR.Status_3 = 'Y';

 EXECUTE FUNCTION(Rtv/Upd Next BO       RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1100930;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 {
  //?USER: Initialize routine

  //?Modification history
  DO;

  //? 7/02/2021 JBB WHD80995 - Increase rollover from 99999 to 9999999
  ENDDO;

  //?USER: Process Data record

  // PAR.BOH Buy Order Number = DB1.Next Buy Order Number
  PAR.BOH_Buy_Order_Number = DB1.Next_Buy_Order_Number;

  CASE;

  // IF DB1.Next Buy Order Number is EQ 9999999
  IF DB1.Next_Buy_Order_Number = 9999999;

  EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(10000);
  PARAMETER(DB1.Last_Tattoo_Nbr);
  PARAMETER(DB1.Current_Production_Date);
  PARAMETER(DB1.Next_Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Next Buy Order Number = DB1.Next Buy Order Number + CON.1
  WRK.Next_Buy_Order_Number = DB1.Next_Buy_Order_Number + 1;

  EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(WRK.Next_Buy_Order_Number);
  PARAMETER(DB1.Last_Tattoo_Nbr);
  PARAMETER(DB1.Current_Production_Date);
  PARAMETER(DB1.Next_Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Buy Order Header  CR) TYPE(CRTOBJ) FILE(PKAWCPP)           AB1100514;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOH_Buy_Order_Date);
 PARAMETER(PAR.BOH_Kill_Date);
 PARAMETER(PAR.BOH_Payment_Type);
 PARAMETER(PAR.BOH_Buy_Order_Type);
 PARAMETER(PAR.BOH_Market_Add_Deduct);
 PARAMETER(PAR.BOH_Status);
 PARAMETER(PAR.BOH_Delv_Plan_Printed);
 PARAMETER(PAR.BOH_Quote_Price_Type);
 PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(PAR.BOH_Commodity_Market_Code);
 PARAMETER(PAR.BOH_Commodity_Price_Group);
 PARAMETER(PAR.BOH_Market_Date_Method);
 PARAMETER(PAR.BOH_MPR_Reporting_Date);
 PARAMETER(PAR.BOH_Hedge_Date);
 PARAMETER(PAR.BOH_Unused_Date_3);
 PARAMETER(PAR.BOH_Unused_Date_4);
 PARAMETER(PAR.BOH_Unused_Date_5);
 PARAMETER(PAR.BOH_Hedge_Head_Total);
 PARAMETER(PAR.BOH_Hedge_Reference_BO);
 PARAMETER(PAR.BOH_Hedge_Time_hhmm);
 PARAMETER(PAR.BOH_Unused_Nbr_4);
 PARAMETER(PAR.BOH_Unused_Nbr_5);
 PARAMETER(PAR.BOH_Unused_Nbr_6);
 PARAMETER(PAR.BOH_Unused_Nbr_7);
 PARAMETER(PAR.BOH_Unused_Nbr_8);
 PARAMETER(PAR.BOH_Unused_Nbr_9);
 PARAMETER(PAR.BOH_Unused_Nbr_10);
 PARAMETER(PAR.BOH_MPR_Reporting_Time);
 PARAMETER(PAR.BOH_MPR_EST_RPT_STS);
 PARAMETER(PAR.BOH_MPR_Purchase_Type);
 PARAMETER(PAR.BOH_Status_4);
 PARAMETER(PAR.BOH_Status_5);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.CW_Year);
 PARAMETER(PAR.CW_Week_Number);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.PC_Contract_Code);
 PARAMETER(PAR.PSC_Sub_Contract_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.PO_Option_Code);
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  //?RMC 6/19/19 whd 49122 Chg time to 1:45 per Jerry L at tf
  //?RMC 9/23/16 R7307   Chg time as of 10/11/2016  per new MPR Rule:
  //?            compile all functions that call this CRTOBJ
  //?     9:55:59 changed to 9:30:59             9:56 changed to 9:31
  //?     1:55:59 changed to 1:30:59
  //?************************************************************************
  //?RMC  Chg time as of 01/10/07:
  //?     9:30:59 changed to 9:55:59             9:31 changed to 9:56
  //?     1:30:59 changed to 1:55:59
  //?*********************************************************************
  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?** create record boh status as open
  // DB1.BOH Status = CND.Open
  DB1.BOH_Status = 'O';

  //?PK0254 -- MPR Reporting Time and Date       RMC 1/19/2001
  //?  If Current Time < 9:30:59 am
  //?    Reporting Date = Current Date
  //?    Reporting Time = 1
  //?  If 9:31 am < Current Time < 1:30:59 pm
  //?    Reporting Date = Current Date
  //?    Reporting Time = 2
  //?*** replace with R7307 -- effective 10/11/2016
  //?  * Otherwise         (These will not be reported at all.)
  //?  * Reporting Date = 0
  //?  * Reporting Time = 0
  //?*** NEW     with R7307 -- effective 10/11/2016
  //?    Reporting Date = Next kill date - skip sat/sun
  //?    Reporting Time = 1
  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(LCL.*DATE);
  PARAMETER(LCL.*TIME);

  CASE;

  // IF LCL.*TIME is LE 09:30:59
  IF LCL.*TIME <= 093059;

  // DB1.BOH MPR Reporting Date = LCL.*DATE
  DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
  DB1.BOH_MPR_Reporting_Time = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.*TIME is LE 13:45:59
  IF LCL.*TIME <= 134559;

  //?6/19/19 RMC time was LE 13:30:59
  // DB1.BOH MPR Reporting Date = LCL.*DATE
  DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 2
  DB1.BOH_MPR_Reporting_Time = 2;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R7307 -- GT 1:30 get reported at next day's 1st submission at 9:30
  // Call program RTV Next WkDy,N=Holidy XF.
  CALL PROGRAM(RTV Next WkDy,N=Holidy XF) ('PBYUXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(LCL.*DATE);
  PARAMETER(LCL.MPR_Reporting_Date);

  // DB1.BOH MPR Reporting Date = LCL.MPR Reporting Date
  DB1.BOH_MPR_Reporting_Date = LCL.MPR_Reporting_Date;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
  DB1.BOH_MPR_Reporting_Time = 1;

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


ENDIF;

// PAR.BOH Company Number = PAR.CC Company Number
PAR.BOH_Company_Number = PAR.CC_Company_Number;

// PAR.BOH Buy Order Number = WRK.BOH Buy Order Number
PAR.BOH_Buy_Order_Number = WRK.BOH_Buy_Order_Number;

// PAR.BOL Load Number = WRK.BOL Load Number
PAR.BOL_Load_Number = WRK.BOL_Load_Number;

