// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POPSXFR
// ?Date: 14.08.2025 Time: 03:38:26
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Prc AS Case Dtl UPL   RT) TYPE(RTVOBJ) FILE(POB0CPP)           AC1646283;
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(JOB.*USER);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 //?*******
 // PAR.AS Transaction Date = JOB.*Job date
 PAR.AS_Transaction_Date = JOB.*Job_date;

 // PAR.AS Transaction Time = JOB.*Job time
 PAR.AS_Transaction_Time = JOB.*Job_time;

 // PAR.AS Notified List = CON.ASCASUPL
 PAR.AS_Notified_List = 'ASCASUPL';

 // LCL.Upload Error USR = CND.no
 LCL.Upload_Error_USR = 'N';

 // LCL.Date To               USR = JOB.*Job date + CON.1 *DAYS
 LCL.Date_To_USR = DATEINCR(JOB.*Job_date 1 'DY' 1111111 'NONE' 'N' 1);

 //?******* for testing only
 //?USER: Process Data record

 //?10/26/02
 //?Dont create product trace for product ' 2222' = Scale check record
 //? Or if Scale is to be excluded per the flag.
 //?11/26/03  Upd 'Incl in Prd Trc Match' Sts from flag
 //?07/29/05 PKD Using Carlisle to create the Manifest.  The Production
 //?             Date and Time are not known by carlisle.
 CASE;

 // IF DB1.AS Product Code is Scale Check
 IF DB1.AS_Product_Code = ' 2222';

 // OR DB1.AS Product Code is Scale Check 02222
 OR DB1.AS_Product_Code = '02222';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Validate fields before Validate product trace
 DO;

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // WRK.Text USR 8 = DB1.AS Serial Number
 WRK.Text_USR_8 = DB1.AS_Serial_Number;

 // Execute function RPG TESTN for 8 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 8 pos.  US) TYPE(EXCUSRSRC) ('POPTUFR');
 PARAMETER(WRK.Text_USR_8);
 {
  C                     TESTN          WUYMTX  8  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // LCL.PT Serial Number = CON.*ZERO
 LCL.PT_Serial_Number = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Serial_Number);
 PARAMETER('SERNOTNUM');
 PARAMETER(PAR.AS_Notified_List);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Serial Number = CVTVAR(DB1.AS Serial Number)
 LCL.PT_Serial_Number = CVTVAR(DB1.AS_Serial_Number);

 ENDIF;

 // WRK.Text USR 8 = DB1.AS Label Date YYYYMMDD
 WRK.Text_USR_8 = DB1.AS_Label_Date_YYYYMMDD;

 // Execute function RPG TESTN for 8 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 8 pos.  US) TYPE(EXCUSRSRC) ('POPTUFR');
 PARAMETER(WRK.Text_USR_8);
 {
  C                     TESTN          WUYMTX  8  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 //?Use job date if invalid
 // WRK.Label Date = JOB.*Job date
 WRK.Label_Date = JOB.*Job_date;

 // WRK.Year Code = WRK.Label Date *YEAR
 WRK.Year_Code = DATEDTLS(WRK.Label_Date 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Year Alpha (YYYY) USR = WRK.Year Code
 LCL.Year_Alpha_YYYY_USR = WRK.Year_Code;

 // LCL.Month/Year NBR        USR = WRK.Label Date
 LCL.Month_Year_NBR_USR = WRK.Label_Date;

 // LCL.Text USR 4 = LCL.Month/Year NBR        USR
 LCL.Text_USR_4 = LCL.Month_Year_NBR_USR;

 // LCL.AS Label Date YYYYMMDD = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Text USR 4,CON.*ZERO)
 LCL.AS_Label_Date_YYYYMMDD = LCL.Year_Alpha_YYYY_USR + LCL.Text_USR_4 (*ZERO);

 // LCL.PT Label Date YYYYMMDD = CVTVAR(LCL.AS Label Date YYYYMMDD)
 LCL.PT_Label_Date_YYYYMMDD = CVTVAR(LCL.AS_Label_Date_YYYYMMDD);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Label Date YYYYMMDD = CVTVAR(DB1.AS Label Date YYYYMMDD)
 LCL.PT_Label_Date_YYYYMMDD = CVTVAR(DB1.AS_Label_Date_YYYYMMDD);

 // WRK.Label Date = LCL.PT Label Date YYYYMMDD
 WRK.Label_Date = LCL.PT_Label_Date_YYYYMMDD;

 //?Set Century.
 CASE;

 // IF WRK.Label Date is < 410101
 IF WRK.Label_Date < 410101;

 // WRK.Label Date = WRK.Label Date + CON.1000000
 WRK.Label_Date = WRK.Label_Date + 1000000;

 ENDIF;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Label_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?Validate label date -  Use job date if invalid 7/08/02
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // WRK.Label Date = JOB.*Job date
 WRK.Label_Date = JOB.*Job_date;

 // WRK.Year Code = WRK.Label Date *YEAR
 WRK.Year_Code = DATEDTLS(WRK.Label_Date 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Year Alpha (YYYY) USR = WRK.Year Code
 LCL.Year_Alpha_YYYY_USR = WRK.Year_Code;

 // LCL.Month/Year NBR        USR = WRK.Label Date
 LCL.Month_Year_NBR_USR = WRK.Label_Date;

 // LCL.Text USR 4 = LCL.Month/Year NBR        USR
 LCL.Text_USR_4 = LCL.Month_Year_NBR_USR;

 // LCL.AS Label Date YYYYMMDD = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Text USR 4,CON.*ZERO)
 LCL.AS_Label_Date_YYYYMMDD = LCL.Year_Alpha_YYYY_USR + LCL.Text_USR_4 (*ZERO);

 // LCL.PT Label Date YYYYMMDD = CVTVAR(LCL.AS Label Date YYYYMMDD)
 LCL.PT_Label_Date_YYYYMMDD = CVTVAR(LCL.AS_Label_Date_YYYYMMDD);

 ENDIF;

 ENDIF;

 // WRK.Text USR 6 = DB1.AS Production Time
 WRK.Text_USR_6 = DB1.AS_Production_Time;

 // Execute function RPG TESTN for 6 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 6 pos.  US) TYPE(EXCUSRSRC) ('POKHUFR');
 PARAMETER(WRK.Text_USR_6);
 {
  C                     TESTN          WUXLTX  6  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // WRK.PT Production Time = CON.*ZERO
 WRK.PT_Production_Time = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Production_Time);
 PARAMETER('PTMNOTNUM');
 PARAMETER(PAR.AS_Notified_List);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Production Time = CVTVAR(DB1.AS Production Time)
 LCL.PT_Production_Time = CVTVAR(DB1.AS_Production_Time);

 ENDIF;

 // LCL.PT Order Number = CON.*ZERO
 LCL.PT_Order_Number = *ZERO;

 //?Order Number
 CASE;

 // IF DB1.AS Order Number is Not EQ to Zero
 IF DB1.AS_Order_Number <> *BLANK;

 // WRK.Text USR 7 = DB1.AS Order Number
 WRK.Text_USR_7 = DB1.AS_Order_Number;

 // Execute function RPG TESTN for 7 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 7 pos.  US) TYPE(EXCUSRSRC) ('POKFUFR');
 PARAMETER(WRK.Text_USR_7);
 {
  C                     TESTN          WUY8TX  7  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // LCL.PT Order Number = CON.*ZERO
 LCL.PT_Order_Number = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Order Number = CVTVAR(DB1.AS Order Number)
 LCL.PT_Order_Number = CVTVAR(DB1.AS_Order_Number);

 ENDIF;

 EXECUTE FUNCTION(Val Order Hdr Exists   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1316396;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Order_Number);
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Order_Number);
 PARAMETER('ORDERNUM');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDIF;

 ENDDO;

 //?If no errors, process record
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 //?Item Code
 DO;

 // WRK.Text USR 5 = DB1.AS Product Code
 WRK.Text_USR_5 = DB1.AS_Product_Code;

 // Execute function RPG TESTN for 5 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 5 pos.  US) TYPE(EXCUSRSRC) ('POKGUFR');
 PARAMETER(WRK.Text_USR_5);
 {
  C                     TESTN          WUY7TX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // LCL.PT Product Code = CON.*ZERO
 LCL.PT_Product_Code = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Product Code = CVTVAR(DB1.AS Product Code)
 LCL.PT_Product_Code = CVTVAR(DB1.AS_Product_Code);

 ENDIF;

 EXECUTE FUNCTION(Val Item/Rtv Whse,PDC  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1360252;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Product_Code);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If item is not found error EQ yes
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // PAR.AS Error Record = DB1.AS Product Code
 PAR.AS_Error_Record = DB1.AS_Product_Code;

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(PAR.AS_Error_Record);
 PARAMETER('ITEMCODE');
 PARAMETER(PAR.AS_Notified_List);

 //?If item is not found error EQ yes
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Fill in warehouse
 CASE;

 // IF DB1.AS Warehouse ID Code EQ WRK.BLANK
 IF DB1.AS_Warehouse_ID_Code = WRK.BLANK;

 //?default whse from company/item
 // LCL.PT Warehouse ID Code = WRK.Warehouse Code
 LCL.PT_Warehouse_ID_Code = WRK.Warehouse_Code;

 //?Fill in warehouse
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Warehouse ID Code = DB1.AS Warehouse ID Code
 LCL.PT_Warehouse_ID_Code = DB1.AS_Warehouse_ID_Code;

 ENDIF;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(LCL.PT_Warehouse_ID_Code);
 PARAMETER(LCL.PT_Fresh_Frozen_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If warehouse is not found error EQ yes
 CASE;

 // IF LCL.PT Fresh/Frozen Code is Equal blank
 IF LCL.PT_Fresh_Frozen_Code = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Warehouse_ID_Code);
 PARAMETER('WHSCODE');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(Rtv Prod Dt f/Lbl Dt   RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1648039;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Product_Code);
 PARAMETER(DB1.AS_Warehouse_ID_Code);
 PARAMETER(WRK.Label_Date);
 PARAMETER(LCL.Production_Date);
 {
  //?USER: Processing if Data record not found

  CASE;

  // IF PAR.Label Date GT JOB.*Job date
  IF PAR.Label_Date > JOB.*Job_date;

  // PAR.Production Date = JOB.*Job date
  PAR.Production_Date = JOB.*Job_date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Production Date = PAR.Label Date
  PAR.Production_Date = PAR.Label_Date;

  ENDIF;

  //?USER: Process Data record

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  QUIT;

 }

 // WRK.Year Code = LCL.Production Date *YEAR
 WRK.Year_Code = DATEDTLS(LCL.Production_Date 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Year Alpha (YYYY) USR = WRK.Year Code
 LCL.Year_Alpha_YYYY_USR = WRK.Year_Code;

 // LCL.Month/Year NBR        USR = LCL.Production Date
 LCL.Month_Year_NBR_USR = LCL.Production_Date;

 // LCL.Text USR 4 = LCL.Month/Year NBR        USR
 LCL.Text_USR_4 = LCL.Month_Year_NBR_USR;

 // LCL.AS Prod Date YYYYMMDD = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Text USR 4,CON.*ZERO)
 LCL.AS_Prod_Date_YYYYMMDD = LCL.Year_Alpha_YYYY_USR + LCL.Text_USR_4 (*ZERO);

 // LCL.PT Prod Date YYYYMMDD = CVTVAR(LCL.AS Prod Date YYYYMMDD)
 LCL.PT_Prod_Date_YYYYMMDD = CVTVAR(LCL.AS_Prod_Date_YYYYMMDD);

 //?Check Product Trace for existence ----
 EXECUTE FUNCTION(Val Product Trace     RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1646317;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Serial_Number);
 PARAMETER(LCL.PT_Prod_Date_YYYYMMDD);
 PARAMETER(LCL.PT_Production_Time);
 PARAMETER(LCL.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PAR.*Return code = CND.*Record does not exist
  PAR.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.*Return code = CND.*Normal
  PAR.*Return_code = *BLANK;

 }

 //?Check without time only for Manifested status    8/1/05
 CASE;

 // IF DB1.AS Inventory Status is Manifested
 IF DB1.AS_Inventory_Status = '3';

 //?Check Product Trace Without Time.
 CASE;

 // IF LCL.*Return code is *Record does not exist
 IF LCL.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Val Prd Trace WO/Tme  RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1745696;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Serial_Number);
 PARAMETER(LCL.PT_Prod_Date_YYYYMMDD);
 PARAMETER(LCL.PT_Production_Time);
 PARAMETER(LCL.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PAR.*Return code = CND.*Record does not exist
  PAR.*Return_code = 'Y2U0005';

  // PAR.PT Production Time = CON.*ZERO
  PAR.PT_Production_Time = *ZERO;

  //?USER: Process Data record

  // PAR.*Return code = CND.*Normal
  PAR.*Return_code = *BLANK;

  // PAR.PT Production Time = DB1.PT Production Time
  PAR.PT_Production_Time = DB1.PT_Production_Time;

  QUIT;

 }

 CASE;

 // IF LCL.PT Production Time is Not Entered
 IF LCL.PT_Production_Time = *ZERO;

 // LCL.PT Production Time = CON.235900
 LCL.PT_Production_Time = 235900;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Gather the data for a new record / else update existing record
 CASE;

 // IF LCL.*Return code is *Record does not exist
 IF LCL.*Return_code = 'Y2U0005';

 //?Calculate Offset Production Date and time
 DO;

 //?10/27/03 Get Offset from new file
 // LCL.Scale ID = SUBSTRING(DB1.AS Serial Number,CON.1,CON.2)
 LCL.Scale_ID = SUBSTRING(DB1.AS_Serial_Number:1:2);

 EXECUTE FUNCTION(Rtv Line/ID/Ofst p/Dt RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1678379;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Scale_ID);
 PARAMETER(WRK.Label_Date);
 PARAMETER(LCL.CS_Scale_Offset_Minutes);
 PARAMETER(LCL.CS_Include_in_PrdTr_Match);
 {
  //?USER: Processing if Data record not found

  // PAR.CS Scale Offset Minutes = CON.*ZERO
  PAR.CS_Scale_Offset_Minutes = *ZERO;

  // PAR.CS Exclude from ProdTrace = CND.no
  PAR.CS_Include_in_PrdTr_Match = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Prod Trace Offset RT) TYPE(RTVOBJ) FILE(PPABREP)           AC1678376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Line_Code);
  PARAMETER(PAR.CS_Scale_Offset_Minutes);
  PARAMETER(PAR.CS_Include_in_PrdTr_Match);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // LCL.PT Offset Prod Date = LCL.PT Prod Date YYYYMMDD
 LCL.PT_Offset_Prod_Date = LCL.PT_Prod_Date_YYYYMMDD;

 // LCL.CS Scale Offset Minutes = LCL.CS Scale Offset Minutes * CON.-1 *
 LCL.CS_Scale_Offset_Minutes = LCL.CS_Scale_Offset_Minutes * -1;

 // LCL.PT Offset Prod Time = LCL.PT Production Time + LCL.CS Scale Offset Minutes *MINUTES
 LCL.PT_Offset_Prod_Time = TIMEINCR(LCL.PT_Production_Time LCL.CS_Scale_Offset_Minutes
 'MN');

 CASE;

 // IF LCL.PT Offset Prod Time GT LCL.PT Production Time
 IF LCL.PT_Offset_Prod_Time > LCL.PT_Production_Time;

 // LCL.PT Offset Prod Date = LCL.PT Offset Prod Date + CON.-1 *DAYS
 LCL.PT_Offset_Prod_Date = DATEINCR(LCL.PT_Offset_Prod_Date '-1' 'DY' 1111110 'NONE' 'N'
 1);

 ENDIF;

 ENDDO;

 //?Validate fields if new product trace
 DO;

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // WRK.Text USR 5 = DB1.AS Net Weight
 WRK.Text_USR_5 = DB1.AS_Net_Weight;

 // Execute function RPG TESTN for 5 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 5 pos.  US) TYPE(EXCUSRSRC) ('POKGUFR');
 PARAMETER(WRK.Text_USR_5);
 {
  C                     TESTN          WUY7TX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // LCL.PT Net Weight = CON.*ZERO
 LCL.PT_Net_Weight = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Net_Weight);
 PARAMETER('NETNOTNUM');
 PARAMETER(PAR.AS_Notified_List);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Net Weight = CVTVAR(DB1.AS Net Weight)
 LCL.PT_Net_Weight = CVTVAR(DB1.AS_Net_Weight);

 ENDIF;

 // WRK.Text USR 5 = DB1.AS Gross Weight
 WRK.Text_USR_5 = DB1.AS_Gross_Weight;

 // Execute function RPG TESTN for 5 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 5 pos.  US) TYPE(EXCUSRSRC) ('POKGUFR');
 PARAMETER(WRK.Text_USR_5);
 {
  C                     TESTN          WUY7TX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 // LCL.PT Gross Weight = CON.*ZERO
 LCL.PT_Gross_Weight = *ZERO;

 // LCL.Error Flag            USR = CND.Yes
 LCL.Error_Flag_USR = 'Y';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Gross_Weight);
 PARAMETER('GRONOTNUM');
 PARAMETER(PAR.AS_Notified_List);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Gross Weight = CVTVAR(DB1.AS Gross Weight)
 LCL.PT_Gross_Weight = CVTVAR(DB1.AS_Gross_Weight);

 ENDIF;

 //?Error if no shift entered
 CASE;

 // IF DB1.AS Shift Number is Not Entered
 IF DB1.AS_Shift_Number = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Call program Zzz Upload Error Log  XF.
 CALL PROGRAM(Zzz Upload Error Log  XF) ('POMKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('CASDTL');
 PARAMETER(PAR.AS_Transaction_Date);
 PARAMETER(PAR.AS_Transaction_Time);
 PARAMETER(DB1.AS_Shift_Number);
 PARAMETER('SHIFT');
 PARAMETER(PAR.AS_Notified_List);

 ENDIF;

 ENDDO;

 //?Create new record if no errors
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 EXECUTE FUNCTION(RTV Item Labels        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1646323;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Product_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(LCL.PT_Item_Label_Line_1);
 PARAMETER(LCL.PT_Item_Label_Line_2);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Made_to_Order_Code);
 PARAMETER(LCL.Item_Category_Code_3);
 PARAMETER(LCL.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Picture Key .. added 1st case for LOINT 4/11/03
 CASE;

 // IF LCL.Item Category Code 3 is Loint
 IF LCL.Item_Category_Code_3 = 'L61';

 // LCL.PT Item Picture Key = CON.LOINT
 LCL.PT_Item_Picture_Key = 'LOINT';

 //?Item Picture Key .. added 1st case for LOINT 4/11/03
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Item Picture Key              11/08/02
 CASE;

 // IF LCL.MTO Code is Entered
 IF LCL.Made_to_Order_Code > *BLANK;

 //?PFN
 CASE;

 // IF LCL.Item Category Code 1 is PFN
 IF LCL.Made_to_Order_Code = 'PFN';

 // OR LCL.Item Category Code 1 is IWG
 OR LCL.Made_to_Order_Code = 'IWG';

 // LCL.PT Item Picture Key = CON.PFN
 LCL.PT_Item_Picture_Key = 'PFN';

 ENDIF;

 //?PFT
 CASE;

 // IF LCL.Item Category Code 1 is EHP
 IF LCL.Made_to_Order_Code = 'EHP';

 // OR LCL.Item Category Code 1 is KRG
 OR LCL.Made_to_Order_Code = 'KRG';

 // LCL.PT Item Picture Key = CON.PFT
 LCL.PT_Item_Picture_Key = 'PFT';

 ENDIF;

 //?Item Picture Key              11/08/02
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Primal Group Code is BUTT
 IF LCL.Primal_Group_Code = 'BUTT';

 // OR LCL.Primal Group Code is HAM
 OR LCL.Primal_Group_Code = 'HAM';

 // OR LCL.Primal Group Code is LOIN
 OR LCL.Primal_Group_Code = 'LOIN';

 // OR LCL.Primal Group Code is PICNIC
 OR LCL.Primal_Group_Code = 'PICNIC';

 // OR LCL.Primal Group Code is RIBS
 OR LCL.Primal_Group_Code = 'RIBS';

 // LCL.PT Item Picture Key = LCL.Primal Group Code
 LCL.PT_Item_Picture_Key = LCL.Primal_Group_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Primal Group Code is HAMC
 IF LCL.Primal_Group_Code = 'HAMC';

 // LCL.PT Item Picture Key = CON.HAM
 LCL.PT_Item_Picture_Key = 'HAM';

 // IF LCL.Primal Group Code is LOINC
 IF LCL.Primal_Group_Code = 'LOINC';

 // LCL.PT Item Picture Key = CON.LOIN
 LCL.PT_Item_Picture_Key = 'LOIN';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Item Picture Key = CON.LOGO
 LCL.PT_Item_Picture_Key = 'LOGO';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Serial_Number);
 PARAMETER(LCL.PT_Prod_Date_YYYYMMDD);
 PARAMETER(LCL.PT_Production_Time);
 PARAMETER(LCL.PT_Label_Date_YYYYMMDD);
 PARAMETER(LCL.PT_Offset_Prod_Date);
 PARAMETER(LCL.PT_Offset_Prod_Time);
 PARAMETER(DB1.AS_Inventory_Status);
 PARAMETER(LCL.PT_Net_Weight);
 PARAMETER(LCL.PT_Gross_Weight);
 PARAMETER(DB1.AS_Shift_Number);
 PARAMETER(LCL.PT_Warehouse_ID_Code);
 PARAMETER(LCL.PT_Order_Number);
 PARAMETER(DB1.AS_Pallet_Number);
 PARAMETER(LCL.PT_Product_Code);
 PARAMETER(LCL.PT_Item_Label_Line_1);
 PARAMETER(LCL.PT_Item_Label_Line_2);
 PARAMETER(LCL.PT_Fresh_Frozen_Code);
 PARAMETER(LCL.PT_Item_Picture_Key);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_6_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.CS_Include_in_PrdTr_Match);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create new record if no errors
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.AS Error Code = CND.Error
 PAR.AS_Error_Code = 'E';

 // LCL.Upload Error USR = CND.yes
 LCL.Upload_Error_USR = 'Y';

 // Call program Zzz Upd RTV AccPath   UP.
 CALL PROGRAM(Zzz Upd RTV AccPath   UP) ('POP3UPR');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(DB1.AS_Serial_Number);
 PARAMETER(DB1.AS_Label_Date_YYYYMMDD);
 PARAMETER(DB1.AS_Inventory_Status);
 PARAMETER(PAR.Error_Status);
 PARAMETER(DB1.AS_Order_Number);

 ENDIF;

 //?Gather the data for a new record / else update existing record
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Product Trc sts   CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1647483;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.PT_Serial_Number);
 PARAMETER(LCL.PT_Prod_Date_YYYYMMDD);
 PARAMETER(LCL.PT_Production_Time);
 PARAMETER(DB1.AS_Inventory_Status);
 PARAMETER(LCL.PT_Order_Number);
 ENDIF;

 //?-------------------------------------------
 // PAR.AS Error Code = CND.No
 PAR.AS_Error_Code = *BLANK;

 //?If no errors, process record
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.AS Error Code = CND.Error
 PAR.AS_Error_Code = 'E';

 // LCL.Upload Error USR = CND.yes
 LCL.Upload_Error_USR = 'Y';

 // Call program Zzz Upd RTV AccPath   UP.
 CALL PROGRAM(Zzz Upd RTV AccPath   UP) ('POP3UPR');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(DB1.AS_Serial_Number);
 PARAMETER(*MISSING);
 PARAMETER(DB1.AS_Inventory_Status);
 PARAMETER(PAR.Error_Status);
 PARAMETER(DB1.AS_Order_Number);

 ENDIF;

 ENDIF;

}


