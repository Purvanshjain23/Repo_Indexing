// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUN2E1R
// ?Date: 14.08.2025 Time: 03:50:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del EDI ASN Dtl V2    DL) TYPE(DLTOBJ) FILE(ECP140)            AC2175874;
PARAMETER(DTL.EDI_SURROGATE_NUMBER);
PARAMETER(DTL.REF02_Ref_ID_Load_ID);
PARAMETER(DTL.PRF01_Customer_PO);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.MAN02_Pallet_Nb_Container);
PARAMETER(DTL.Order_Sequence_Number);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt EDI ASN Dtl V2    CR) TYPE(CRTOBJ) FILE(ECP140)            AC2175872;
PARAMETER(DTL.EDI_SURROGATE_NUMBER);
PARAMETER(DTL.REF02_Ref_ID_Load_ID);
PARAMETER(DTL.PRF01_Customer_PO);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.MAN02_Pallet_Nb_Container);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.SN102_Quantity_Shipped);
PARAMETER(DTL.SN103_Shipped_UOM);
PARAMETER(DTL.PO406_Net_WT_Per_Pack);
PARAMETER(DTL.PO406_Gross_WT_Per_Pack);
PARAMETER(DTL.PO401_Pack);
PARAMETER(DTL.PID05_ITEM_DESCRIPTION);
PARAMETER(DTL.Product_ID_GTIN);
PARAMETER(DTL.Product_ID_Manuf_Item);
PARAMETER(DTL.Product_ID_UPC);
PARAMETER(DTL.Product_ID_UCC_12);
PARAMETER(DTL.Product_ID_Purchs_Item);
PARAMETER(DTL.LIN_UP_UPC_Consumer_Pckge);
PARAMETER(DTL.W1904_UPC_CASE_CODE);
PARAMETER(DTL.LIN13_Prod_ID_CountryOrig);
PARAMETER(DTL.LIN_Sub_Country_of_Origin);
PARAMETER(DTL.GTin_12_Lin02);
PARAMETER(DTL.SN101_Assigned_ID);
PARAMETER(DTL.SN105_Quantity_Ordered);
PARAMETER(DTL.SN106_Ordered_UOM);
PARAMETER(DTL.SLN06_Unit_Price);
PARAMETER(DTL.SLN07_Unit_Price_UOM);
PARAMETER(DTL.SLN06_Unit_Price_2);
PARAMETER(DTL.SLN07_Unit_Price_UOM_2);
PARAMETER(DTL.SLN10_Prod_ID_DV);
PARAMETER(DTL.SLN12_Prod_ID_LT);
PARAMETER(DTL.SLN14_Prod_ID_UR);
PARAMETER(DTL.PO402_Pack_Size);
PARAMETER(DTL.PO410_Length);
PARAMETER(DTL.PO411_Width);
PARAMETER(DTL.PO412_Heights);
PARAMETER(DTL.REF02_Batch_Lot);
PARAMETER(DTL.DTM02_Expiration_Date);
PARAMETER(DTL.DTM02_Shelf_Life_Date);
PARAMETER(DTL.DTM02_Manuf_Date);
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Manifest_Pallet_Number);
PARAMETER('N');
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
 CASE;

 // IF PAR.Set EDI 856 Pallet ID=1 U is Yes
 IF PAR.Set_EDI_856_Pallet_ID1_U = 'Y';

 // DB1.MAN02 Pallet Nb/Container = CON.1
 DB1.MAN02_Pallet_Nb_Container = 1;

 //?Set All Pallet ID=1 If Flag=Yes Else Use Check Digit.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Manifest Pallet Number is Not Entered
 IF PAR.Manifest_Pallet_Number = *ZERO;

 //?R17040 DN 05/17/21-Commented Out & Moved Below.
 //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
 CASE;

 // IF PAR.EDI Tare Level Req f/856 is Yes
 IF PAR.EDI_Tare_Level_Req_f_856 = 'Y';

 // DB1.MAN02 Pallet Nb/Container = CON.99000000000000000001
 DB1.MAN02_Pallet_Nb_Container = 99000000000000000001;

 //?R17040 DN 05/17/21-Set MAN02 Pallet Nb/Container based on EDI Tare Level.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // DB1.MAN02 Pallet Nb/Container = CON.1
 DB1.MAN02_Pallet_Nb_Container = 1;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calculate Check Digit Logic to Set Pallet ID #.
 EXECUTE FUNCTION(Get Calc Check Digit  IF) TYPE(EXCINTFUN)                      AC2149151;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Manifest_Pallet_Number);
 PARAMETER(LCL.W0407_Pallet_Number);
 {
  //?Execute internal function

  // PAR.W0407 Pallet Number = CON.*ZERO
  PAR.W0407_Pallet_Number = *ZERO;

  //?SUM Up Odd & Even # Positions for Federal Tax ID.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Substring Out Each Digit From Federal Tax ID.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Federal Tax ID    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC2149185;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Federal_Tax_Id);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Text 7 Alpha Usr = SUBSTRING(LCL.Federal Tax Id.,CON.1,CON.7)
  LCL.Text_7_Alpha_Usr = SUBSTRING(LCL.Federal_Tax_Id:1:7);

  // LCL.Federal Tax ID 8 Byte = CONCAT(CON.1,LCL.Text 7 Alpha Usr,CON.*ZERO)
  LCL.Federal_Tax_ID_8_Byte = '1' + LCL.Text_7_Alpha_Usr (*ZERO);

  //?Position 1 will always be 1.
  // LCL.Position 1 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.1,CON.1)
  LCL.Position_1_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:1:1);

  // LCL.Position 2 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.2,CON.1)
  LCL.Position_2_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:2:1);

  // LCL.Position 3 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.3,CON.1)
  LCL.Position_3_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:3:1);

  // LCL.Position 4 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.4,CON.1)
  LCL.Position_4_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:4:1);

  // LCL.Position 5 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.5,CON.1)
  LCL.Position_5_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:5:1);

  // LCL.Position 6 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.6,CON.1)
  LCL.Position_6_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:6:1);

  // LCL.Position 7 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.7,CON.1)
  LCL.Position_7_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:7:1);

  // LCL.Position 8 Text USR = SUBSTRING(LCL.Federal Tax ID 8 Byte,CON.8,CON.1)
  LCL.Position_8_Text_USR = SUBSTRING(LCL.Federal_Tax_ID_8_Byte:8:1);

  // LCL.Federal Tax ID-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
  LCL.Federal_Tax_ID_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

  // LCL.Federal Tax ID-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
  LCL.Federal_Tax_ID_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

  // LCL.Federal Tax ID-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
  LCL.Federal_Tax_ID_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

  // LCL.Federal Tax ID-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
  LCL.Federal_Tax_ID_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

  // LCL.Federal Tax ID-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
  LCL.Federal_Tax_ID_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

  // LCL.Federal Tax ID-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
  LCL.Federal_Tax_ID_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

  // LCL.Federal Tax ID-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
  LCL.Federal_Tax_ID_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

  // LCL.Federal Tax ID-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
  LCL.Federal_Tax_ID_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

  ENDIF;

  // SUM Val for Odd # Pos
  PAR.SUM_Val_for_Odd_#_Pos = ( ( LCL.Federal_Tax_ID_Pos1_Nbr
  + LCL.Federal_Tax_ID_Pos3_Nbr ) + LCL.Federal_Tax_ID_Pos5_Nbr )
  + LCL.Federal_Tax_ID_Pos7_Nbr;

  // SUM Val for Even # Pos
  PAR.SUM_Val_for_Even_#_Pos = ( ( LCL.Federal_Tax_ID_Pos2_Nbr
  + LCL.Federal_Tax_ID_Pos4_Nbr ) + LCL.Federal_Tax_ID_Pos6_Nbr )
  + LCL.Federal_Tax_ID_Pos8_Nbr;

  ENDIF;

  //?SUM Up Odd & Even # Positions for Pallet Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Substring Out Each Digit From Pallet Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Manifest Pallet# Txt = CVTVAR(PAR.Manifest Pallet Number)
  LCL.Manifest_Pallet#_Txt = CVTVAR(PAR.Manifest_Pallet_Number);

  // LCL.Position 1 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.1,CON.1)
  LCL.Position_1_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:1:1);

  // LCL.Position 2 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.2,CON.1)
  LCL.Position_2_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:2:1);

  // LCL.Position 3 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.3,CON.1)
  LCL.Position_3_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:3:1);

  // LCL.Position 4 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.4,CON.1)
  LCL.Position_4_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:4:1);

  // LCL.Position 5 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.5,CON.1)
  LCL.Position_5_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:5:1);

  // LCL.Position 6 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.6,CON.1)
  LCL.Position_6_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:6:1);

  // LCL.Position 7 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.7,CON.1)
  LCL.Position_7_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:7:1);

  // LCL.Position 8 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.8,CON.1)
  LCL.Position_8_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:8:1);

  // LCL.Position 9 Text USR = SUBSTRING(LCL.Manifest Pallet# Txt,CON.9,CON.1)
  LCL.Position_9_Text_USR = SUBSTRING(LCL.Manifest_Pallet#_Txt:9:1);

  // LCL.Manifest Pallet#-Pos1 Nbr = CVTVAR(LCL.Position 1 Text USR)
  LCL.Manifest_Pallet#_Pos1_Nbr = CVTVAR(LCL.Position_1_Text_USR);

  // LCL.Manifest Pallet#-Pos2 Nbr = CVTVAR(LCL.Position 2 Text USR)
  LCL.Manifest_Pallet#_Pos2_Nbr = CVTVAR(LCL.Position_2_Text_USR);

  // LCL.Manifest Pallet#-Pos3 Nbr = CVTVAR(LCL.Position 3 Text USR)
  LCL.Manifest_Pallet#_Pos3_Nbr = CVTVAR(LCL.Position_3_Text_USR);

  // LCL.Manifest Pallet#-Pos4 Nbr = CVTVAR(LCL.Position 4 Text USR)
  LCL.Manifest_Pallet#_Pos4_Nbr = CVTVAR(LCL.Position_4_Text_USR);

  // LCL.Manifest Pallet#-Pos5 Nbr = CVTVAR(LCL.Position 5 Text USR)
  LCL.Manifest_Pallet#_Pos5_Nbr = CVTVAR(LCL.Position_5_Text_USR);

  // LCL.Manifest Pallet#-Pos6 Nbr = CVTVAR(LCL.Position 6 Text USR)
  LCL.Manifest_Pallet#_Pos6_Nbr = CVTVAR(LCL.Position_6_Text_USR);

  // LCL.Manifest Pallet#-Pos7 Nbr = CVTVAR(LCL.Position 7 Text USR)
  LCL.Manifest_Pallet#_Pos7_Nbr = CVTVAR(LCL.Position_7_Text_USR);

  // LCL.Manifest Pallet#-Pos8 Nbr = CVTVAR(LCL.Position 8 Text USR)
  LCL.Manifest_Pallet#_Pos8_Nbr = CVTVAR(LCL.Position_8_Text_USR);

  // LCL.Manifest Pallet#-Pos9 Nbr = CVTVAR(LCL.Position 9 Text USR)
  LCL.Manifest_Pallet#_Pos9_Nbr = CVTVAR(LCL.Position_9_Text_USR);

  ENDIF;

  // SUM Val for Odd # Pos
  PAR.SUM_Val_for_Odd_#_Pos = ( ( ( ( PAR.SUM_Val_for_Odd_#_Pos
  + LCL.Manifest_Pallet#_Pos1_Nbr ) + LCL.Manifest_Pallet#_Pos3_Nbr )
  + LCL.Manifest_Pallet#_Pos5_Nbr ) + LCL.Manifest_Pallet#_Pos7_Nbr )
  + LCL.Manifest_Pallet#_Pos9_Nbr;

  // SUM Val for Even # Pos
  PAR.SUM_Val_for_Even_#_Pos = ( ( ( PAR.SUM_Val_for_Even_#_Pos
  + LCL.Manifest_Pallet#_Pos2_Nbr ) + LCL.Manifest_Pallet#_Pos4_Nbr )
  + LCL.Manifest_Pallet#_Pos6_Nbr ) + LCL.Manifest_Pallet#_Pos8_Nbr;

  ENDIF;

  //?Calculated Check Digit Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Calculated Value
  LCL.Calc_Value_USR = ( PAR.SUM_Val_for_Odd_#_Pos * 3 ) + PAR.SUM_Val_for_Even_#_Pos;

  // LCL.Calc Value Last Digit USR = LCL.Calc Value USR
  LCL.Calc_Value_Last_Digit_USR = LCL.Calc_Value_USR;

  // LCL.Calc Check Digit# USR = CON.10 - LCL.Calc Value Last Digit USR
  LCL.Calc_Check_Digit#_USR = 10 - LCL.Calc_Value_Last_Digit_USR;

  ENDIF;

  //?Format W0407 Pallet Number for Output.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Calc Check Digit# Txt USR = CVTVAR(LCL.Calc Check Digit# USR)
  LCL.Calc_Check_Digit#_Txt_USR = CVTVAR(LCL.Calc_Check_Digit#_USR);

  // LCL.W0407 Pallet Number Txt U = CONCAT(CON.00,LCL.Federal Tax ID 8 Byte,CON.*ZERO)
  LCL.W0407_Pallet_Number_Txt_U = '00' + LCL.Federal_Tax_ID_8_Byte (*ZERO);

  // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Manifest Pallet# Txt,C
  LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Manifest_Pallet#_Txt (*ZERO);

  // LCL.W0407 Pallet Number Txt U = CONCAT(LCL.W0407 Pallet Number Txt U,LCL.Calc Check Digit# Txt
  LCL.W0407_Pallet_Number_Txt_U = LCL.W0407_Pallet_Number_Txt_U + LCL.Calc_Check_Digit#_Txt_USR (*ZE

  // PAR.W0407 Pallet Number = CVTVAR(LCL.W0407 Pallet Number Txt U)
  PAR.W0407_Pallet_Number = CVTVAR(LCL.W0407_Pallet_Number_Txt_U);

  ENDIF;

 }

 // DB1.MAN02 Pallet Nb/Container = CVTVAR(LCL.W0407 Pallet Number)
 DB1.MAN02_Pallet_Nb_Container = CVTVAR(LCL.W0407_Pallet_Number);

 ENDIF;

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg EDI ASN Dtl V2    CH) TYPE(CHGOBJ) FILE(ECP140)            AC2175873;
PARAMETER(DTL.EDI_SURROGATE_NUMBER);
PARAMETER(DTL.REF02_Ref_ID_Load_ID);
PARAMETER(DTL.PRF01_Customer_PO);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.MAN02_Pallet_Nb_Container);
PARAMETER(DTL.Order_Sequence_Number);
PARAMETER(DTL.SN102_Quantity_Shipped);
PARAMETER(DTL.SN103_Shipped_UOM);
PARAMETER(DTL.PO406_Net_WT_Per_Pack);
PARAMETER(DTL.PO406_Gross_WT_Per_Pack);
PARAMETER(DTL.PO401_Pack);
PARAMETER(DTL.PID05_ITEM_DESCRIPTION);
PARAMETER(DTL.Product_ID_GTIN);
PARAMETER(DTL.Product_ID_Manuf_Item);
PARAMETER(DTL.Product_ID_UPC);
PARAMETER(DTL.Product_ID_UCC_12);
PARAMETER(DTL.Product_ID_Purchs_Item);
PARAMETER(DTL.LIN_UP_UPC_Consumer_Pckge);
PARAMETER(DTL.W1904_UPC_CASE_CODE);
PARAMETER(DTL.LIN13_Prod_ID_CountryOrig);
PARAMETER(DTL.LIN_Sub_Country_of_Origin);
PARAMETER(DTL.GTin_12_Lin02);
PARAMETER(DTL.SN101_Assigned_ID);
PARAMETER(DTL.SN105_Quantity_Ordered);
PARAMETER(DTL.SN106_Ordered_UOM);
PARAMETER(DTL.SLN06_Unit_Price);
PARAMETER(DTL.SLN07_Unit_Price_UOM);
PARAMETER(DTL.SLN06_Unit_Price_2);
PARAMETER(DTL.SLN07_Unit_Price_UOM_2);
PARAMETER(DTL.SLN10_Prod_ID_DV);
PARAMETER(DTL.SLN12_Prod_ID_LT);
PARAMETER(DTL.SLN14_Prod_ID_UR);
PARAMETER(DTL.PO402_Pack_Size);
PARAMETER(DTL.PO410_Length);
PARAMETER(DTL.PO411_Width);
PARAMETER(DTL.PO412_Heights);
PARAMETER(DTL.REF02_Batch_Lot);
PARAMETER(DTL.DTM02_Expiration_Date);
PARAMETER(DTL.DTM02_Shelf_Life_Date);
PARAMETER(DTL.DTM02_Manuf_Date);

