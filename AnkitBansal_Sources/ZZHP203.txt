      *****************  RPG PROGRAM HEADING  ************************
      *
      * NOTE!!!  In March 2001, user changes made this function obsolete.
      *          But, Alice felt that there was a high probablity that the users would
      *          change their minds again and request that these transfer functions
      *          be reinstalled.  So, we kept this code just in case!!!
      *
      *
      * SYSTEM:      HPS Data Mart
      * PROGRAM:     HP203 - Build DataMart Transferred Gilts/Sows
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     10/26/00
      *
      * FUNCTION:    This file in the Data Mart will be re-created with
      *              each load of the Data Mart.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
      *
     Fhsp090    if   e           k disk
      *  BGF Transferred Gilts/Sows
      *
      *
     Fhppb090   o    e             disk    rename(bgrec:bgrec1) prefix(p1)
      *  Datamart: BGF Transferred Gilts/Sows
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Workfields
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Process all records in the HPS Transferred Gilts/Sows file
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      hsp090                                 90
     C                   if        *in90 = *off                                 If not EOF
      *
      * Populate fields in Datamart file that are a direct map.
      *
     C                   exsr      $directmap
      *
      * Calculate 'serviced' head
      *
     C                   exsr      $services
      *
      * Calculate preg checked positive head
      *
     C                   exsr      $preg
      *
      * Format dates from CCYYMMDD to ISO date format field.
      *
     C                   move      bgsvwedt      p1bgsvwedt
     C                   move      bgtrwedt      p1bgtrwedt
      *
     C                   write     bgrec1
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------
      * Populate fields in the Datamart file that are a direct map
      *---------------------------------------------------------------
      *
     C     $directmap    begsr
      *
     C                   z-add     bgtryr        p1bgtryr
     C                   z-add     bgtrwk        p1bgtrwk
      *
     C                   z-add     bgsvyr        p1bgsvyr
     C                   z-add     bgsvwk        p1bgsvwk
      *
     C                   z-add     bgorfscd      p1bgorfscd
     C                   z-add     bgdnfscd      p1bgdnfscd
      *
     C                   z-add     bgtrglhd      p1bgtrglhd
     C                   z-add     bgfaglhd      p1bgfaglhd
     C                   z-add     bgglcrpr      p1bgglcrpr
     C                   z-add     bgtrsohd      p1bgtrsohd
     C                   z-add     bgfasohd      p1bgfasohd
     C                   z-add     bgsocrpr      p1bgsocrpr
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Calculate 'serviced' head
      *---------------------------------------------------------------
      *
     C     $services     begsr
      *
      * Gilts serviced
      *   If there is a conception rate, calculate services as
      *      (gilt transferred head / conception rate) * 100
      *   If conception rate is zero,
      *      make services equal to gilt transferred head
      *
     C                   if        p1bgglcrpr <> 0
     C                   eval(h)   p1bgglsv = (p1bgtrglhd / p1bgglcrpr) * 100
     C                   else
     C                   z-add     p1bgtrglhd    p1bgglsv
     C                   endif
      *
      * Sows serviced
      *   If there is a conception rate, calculate services as
      *      (sow transferred head / conception rate) * 100
      *   If conception rate is zero,
      *      make services equal to sow transferred head
      *
     C                   if        p1bgsocrpr <> 0
     C                   eval(h)   p1bgsosv = (p1bgtrsohd / p1bgsocrpr) * 100
     C                   else
     C                   z-add     p1bgtrsohd    p1bgsosv
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Calculate preg checked positive head
      *---------------------------------------------------------------
      *
     C     $preg         begsr
      *
      * Gilts preg checked positive head
      *   If there is a conception rate,
      *      set preg checked positive head equal to transferred head
      *   If conception rate is zero,
      *      set preg checked positive head to zero
      *
     C                   if        p1bgglcrpr <> 0
     C                   z-add     p1bgtrglhd    p1bgprglhd
     C                   else
     C                   z-add     0             p1bgprglhd
     C                   endif
      *
      *
      * Sows preg checked positive head
      *   If there is a conception rate,
      *      set preg checked positive head equal to transferred head
      *   If conception rate is zero,
      *      set preg checked positive head to zero
      *
     C                   if        p1bgsocrpr <> 0
     C                   z-add     p1bgtrsohd    p1bgprsohd
     C                   else
     C                   z-add     0             p1bgprsohd
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * *inzsr - initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C                   endsr
      /eject
