// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWH4XFR
// ?Date: 14.08.2025 Time: 02:56:32
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//? 1/08/2019 JBB E14281 - Print Payment Errors Report
//?- Function created.  This function first determines if the Company
//?  does Price Checking.  If yes, the program checks if there are any
//?  Tattoo Header records that are in the process of being paid (SC)
//?  where the Base Market Price Amt = 0, Gross Amount = 0, or the Net
//?  Payment Amount <= 0, or the Base Carcass Value <= 0. If any
//?  records are found, set the Pricing Error flag to Yes.
//?  the Company Value HPEPYPCERR = N.
//?11/04/2020 ISE H16853 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Rtv Price Err Comp Val IF) TYPE(EXCINTFUN)                     AB1349452;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.Co_Chks_for_Price_Errors);
PARAMETER(LCL.Error_Level_Warn_Hard);
PARAMETER(LCL.Error_Level_Pricing);
{
 //?Execute internal function

 //?Modification history
 DO;

 //? 2/07/2019 JBB E14281 - Zero Prices on BOL
 //?                        Function created.  This function retrieves
 //?                        the Company Value record for HPEPYPRCERR.
 //?                        Within the retrieved record, there are
 //?                        three fields.  This function passes back
 //?                        the three values.
 //?                        Position  7 - Does the Company print the
 //?                                      Price Errors report during
 //?                                      the Payment Edit process.
 //?                        Position 18 - What is the highest error
 //?                                      level that will be checked.
 //?                        Position 26 - What is the highest error
 //?                                      level found during the
 //?                                      Payment Edit process.
 ENDDO;

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPEPYPRERR');
 PARAMETER(LCL.System_Value_Alpha_USR);

 //?Break out individual values from the Company Value record
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Co Chks for Price Errors = SUBSTRING(LCL.System Value Alpha    USR,CON.7,CON.1)
 PAR.Co_Chks_for_Price_Errors = SUBSTRING(LCL.System_Value_Alpha_USR:7:1);

 // PAR.Error Level - Warn/Hard = SUBSTRING(LCL.System Value Alpha    USR,CON.18,CON.1)
 PAR.Error_Level_Warn_Hard = SUBSTRING(LCL.System_Value_Alpha_USR:18:1);

 // PAR.Error Level - Pricing = SUBSTRING(LCL.System Value Alpha    USR,CON.26,CON.1)
 PAR.Error_Level_Pricing = SUBSTRING(LCL.System_Value_Alpha_USR:26:1);

 ENDIF;

}


//?If Company checks for Pricing Errors
CASE;

// IF LCL.Co Chks for Price Errors is Yes
IF LCL.Co_Chks_for_Price_Errors = 'Y';

//?Initially, set the Company Value for Pricing Error to N
// LCL.Error Level - Pricing = CND.None
LCL.Error_Level_Pricing = 'N';

EXECUTE FUNCTION(Upd Price Err Comp Val IF) TYPE(EXCINTFUN)                     AB1349453;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.Co_Chks_for_Price_Errors);
PARAMETER(LCL.Error_Level_Warn_Hard);
PARAMETER(LCL.Error_Level_Pricing);
{
 //?Execute internal function

 //?Retrieve existing values.
 EXECUTE FUNCTION(Rtv Price Err Comp Val IF) TYPE(EXCINTFUN)                     AB1349452;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.Co_Chks_for_Price_Errors);
 PARAMETER(LCL.Error_Level_Warn_Hard);
 PARAMETER(LCL.Error_Level_Pricing);
 {
  //?Execute internal function

  //?Modification history
  DO;

  //? 2/07/2019 JBB E14281 - Zero Prices on BOL
  //?                        Function created.  This function retrieves
  //?                        the Company Value record for HPEPYPRCERR.
  //?                        Within the retrieved record, there are
  //?                        three fields.  This function passes back
  //?                        the three values.
  //?                        Position  7 - Does the Company print the
  //?                                      Price Errors report during
  //?                                      the Payment Edit process.
  //?                        Position 18 - What is the highest error
  //?                                      level that will be checked.
  //?                        Position 26 - What is the highest error
  //?                                      level found during the
  //?                                      Payment Edit process.
  ENDDO;

  // Call program Rtv Company Values    XF.
  CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER('HPEPYPRERR');
  PARAMETER(LCL.System_Value_Alpha_USR);

  //?Break out individual values from the Company Value record
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Co Chks for Price Errors = SUBSTRING(LCL.System Value Alpha    USR,CON.7,CON.1)
  PAR.Co_Chks_for_Price_Errors = SUBSTRING(LCL.System_Value_Alpha_USR:7:1);

  // PAR.Error Level - Warn/Hard = SUBSTRING(LCL.System Value Alpha    USR,CON.18,CON.1)
  PAR.Error_Level_Warn_Hard = SUBSTRING(LCL.System_Value_Alpha_USR:18:1);

  // PAR.Error Level - Pricing = SUBSTRING(LCL.System Value Alpha    USR,CON.26,CON.1)
  PAR.Error_Level_Pricing = SUBSTRING(LCL.System_Value_Alpha_USR:26:1);

  ENDIF;

 }

 //?Does company run Pricing Errors report
 CASE;

 // IF NOT PAR.Co Chks for Price Errors is Blank
 IF ! PAR.Co_Chks_for_Price_Errors = *BLANK;

 // LCL.Co Chks for Price Errors = PAR.Co Chks for Price Errors
 LCL.Co_Chks_for_Price_Errors = PAR.Co_Chks_for_Price_Errors;

 ENDIF;

 // LCL.System Value Alpha    USR = CONCAT(CON.CHECK=,LCL.Co Chks for Price Errors,CND.*None)
 LCL.System_Value_Alpha_USR = 'CHECK=' + LCL.Co_Chks_for_Price_Errors (*ZERO);

 //?What is the highest level of error allowed. W=Warning and H=Hard
 CASE;

 // IF PAR.Error Level - Warn/Hard is *ALL values
 IF PAR.Error_Level_Warn_Hard = 'N'/'H'/'W';

 // LCL.Error Level - Warn/Hard = PAR.Error Level - Warn/Hard
 LCL.Error_Level_Warn_Hard = PAR.Error_Level_Warn_Hard;

 ENDIF;

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,CON.HIERRLVL=,CND.*One)
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + 'HIERRLVL=' (1);

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,LCL.Error Level - Warn/Hard
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + LCL.Error_Level_Warn_Hard (*ZERO);

 //?What is the highest level of error detected
 CASE;

 // IF PAR.Error Level - Pricing is *ALL values
 IF PAR.Error_Level_Pricing = 'N'/'H'/'W';

 // LCL.Error Level - Pricing = PAR.Error Level - Pricing
 LCL.Error_Level_Pricing = PAR.Error_Level_Pricing;

 ENDIF;

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,CON.ERROR=,CND.*One)
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + 'ERROR=' (1);

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,LCL.Error Level - Pricing,C
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + LCL.Error_Level_Pricing (*ZERO);

 // Call program Upd Repayment Backup  XF.
 CALL PROGRAM(Upd Repayment Backup  XF) ('PUKMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPEPYPRERR');
 PARAMETER(LCL.System_Value_Alpha_USR);

}


EXECUTE FUNCTION(Chk for Pricing Error RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1348423;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Source_Type);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.Error_Level_Warn_Hard);
PARAMETER(LCL.Error_Level_Pricing);
{
 //?USER: Initialize routine

 // LCL.Error Level - Pricing = CND.None
 LCL.Error_Level_Pricing = 'N';

 //?USER: Process Data record

 //?If record Kill Date <= Current Payment Date (PAR.Kill Date)
 CASE;

 // IF DB1.TH Kill Date LE PAR.TH Kill Date
 IF DB1.TH_Kill_Date <= PAR.TH_Kill_Date;

 //?Check Held Overs
 CASE;

 // IF NOT DB1.TH Held Over is *Zeros
 IF ! DB1.TH_Held_Over = *ZERO;

 // AND DB1.TH Held/Ovr Completed Dte is EQ Zero
 AND DB1.TH_Held_Ovr_Completed_Dte = *ZERO;

 //?Check Held Overs
 // IF DB1.TH Head Killed is Not Zero
 IF DB1.TH_Head_Killed <> *ZERO;

 //?Check for Price errors if Payment Type = Carcass Merit
 CASE;

 // IF DB1.TH Payment Type is Carcass Merit
 IF DB1.TH_Payment_Type = 'C';

 //?Check Base Market Amt, Gross, Net Payment, & Base Carcass Val
 CASE;

 // IF DB1.TH CM Base Mkt Price Amt is Zeros
 IF DB1.TH_CM_Base_Mkt_Price_Amt = *ZERO;

 // OR DB1.TH CM Base Carcass Value is Zeros
 OR DB1.TH_CM_Base_Carcass_Value = *ZERO;

 //?If no Hard errors detected, set Error Level to Warning
 CASE;

 // IF NOT LCL.Error Level - Pricing is Hard
 IF ! LCL.Error_Level_Pricing = 'H';

 // LCL.Error Level - Pricing = CND.Warning
 LCL.Error_Level_Pricing = 'W';

 ENDIF;

 //?Check Base Market Amt, Gross, Net Payment, & Base Carcass Val
 // IF DB1.TH Payment Gross is Less/Equal Zeros
 IF DB1.TH_Payment_Gross <= *ZERO;

 //?If no Hard errors detected, set Error Level to Warning
 CASE;

 // IF NOT LCL.Error Level - Pricing is Hard
 IF ! LCL.Error_Level_Pricing = 'H';

 // LCL.Error Level - Pricing = CND.Warning
 LCL.Error_Level_Pricing = 'W';

 ENDIF;

 //?Check Base Market Amt, Gross, Net Payment, & Base Carcass Val
 // IF DB1.Th Payment Net Amt is Zeros
 IF DB1.Th_Payment_Net_Amt = *ZERO;

 //?If no Hard errors detected, set Error Level to Warning
 CASE;

 // IF NOT LCL.Error Level - Pricing is Hard
 IF ! LCL.Error_Level_Pricing = 'H';

 // LCL.Error Level - Pricing = CND.Warning
 LCL.Error_Level_Pricing = 'W';

 ENDIF;

 //?Check Base Market Amt, Gross, Net Payment, & Base Carcass Val
 // IF DB1.Th Payment Net Amt is Less Than Zeros
 IF DB1.Th_Payment_Net_Amt < *ZERO;

 // LCL.Error Level - Pricing = CND.Hard
 LCL.Error_Level_Pricing = 'H';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Determine Error Level - Pricing value
 CASE;

 // IF LCL.Error Level - Pricing is None
 IF LCL.Error_Level_Pricing = 'N';

 // PAR.Error Level - Pricing = CND.None
 PAR.Error_Level_Pricing = 'N';

 //?Determine Error Level - Pricing value
 // IF PAR.Error Level - Warn/Hard is Hard
 IF PAR.Error_Level_Warn_Hard = 'H';

 // PAR.Error Level - Pricing = LCL.Error Level - Pricing
 PAR.Error_Level_Pricing = LCL.Error_Level_Pricing;

 //?Determine Error Level - Pricing value
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Level - Pricing = CND.Warning
 PAR.Error_Level_Pricing = 'W';

 ENDIF;

}


//?Set Pricing Error parameter based on Error Level - Pricing value
CASE;

// IF LCL.Error Level - Pricing is None
IF LCL.Error_Level_Pricing = 'N';

// PAR.Pricing Error = CND.No
PAR.Pricing_Error = 'N';

//?Set Pricing Error parameter based on Error Level - Pricing value
// IF *OTHERWISE
IF *OTHERWISE;

//?Update the Company Value with the highest error level detected
EXECUTE FUNCTION(Upd Price Err Comp Val IF) TYPE(EXCINTFUN)                     AB1349453;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.Co_Chks_for_Price_Errors);
PARAMETER(LCL.Error_Level_Warn_Hard);
PARAMETER(LCL.Error_Level_Pricing);
{
 //?Execute internal function

 //?Retrieve existing values.
 EXECUTE FUNCTION(Rtv Price Err Comp Val IF) TYPE(EXCINTFUN)                     AB1349452;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.Co_Chks_for_Price_Errors);
 PARAMETER(LCL.Error_Level_Warn_Hard);
 PARAMETER(LCL.Error_Level_Pricing);
 {
  //?Execute internal function

  //?Modification history
  DO;

  //? 2/07/2019 JBB E14281 - Zero Prices on BOL
  //?                        Function created.  This function retrieves
  //?                        the Company Value record for HPEPYPRCERR.
  //?                        Within the retrieved record, there are
  //?                        three fields.  This function passes back
  //?                        the three values.
  //?                        Position  7 - Does the Company print the
  //?                                      Price Errors report during
  //?                                      the Payment Edit process.
  //?                        Position 18 - What is the highest error
  //?                                      level that will be checked.
  //?                        Position 26 - What is the highest error
  //?                                      level found during the
  //?                                      Payment Edit process.
  ENDDO;

  // Call program Rtv Company Values    XF.
  CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER('HPEPYPRERR');
  PARAMETER(LCL.System_Value_Alpha_USR);

  //?Break out individual values from the Company Value record
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Co Chks for Price Errors = SUBSTRING(LCL.System Value Alpha    USR,CON.7,CON.1)
  PAR.Co_Chks_for_Price_Errors = SUBSTRING(LCL.System_Value_Alpha_USR:7:1);

  // PAR.Error Level - Warn/Hard = SUBSTRING(LCL.System Value Alpha    USR,CON.18,CON.1)
  PAR.Error_Level_Warn_Hard = SUBSTRING(LCL.System_Value_Alpha_USR:18:1);

  // PAR.Error Level - Pricing = SUBSTRING(LCL.System Value Alpha    USR,CON.26,CON.1)
  PAR.Error_Level_Pricing = SUBSTRING(LCL.System_Value_Alpha_USR:26:1);

  ENDIF;

 }

 //?Does company run Pricing Errors report
 CASE;

 // IF NOT PAR.Co Chks for Price Errors is Blank
 IF ! PAR.Co_Chks_for_Price_Errors = *BLANK;

 // LCL.Co Chks for Price Errors = PAR.Co Chks for Price Errors
 LCL.Co_Chks_for_Price_Errors = PAR.Co_Chks_for_Price_Errors;

 ENDIF;

 // LCL.System Value Alpha    USR = CONCAT(CON.CHECK=,LCL.Co Chks for Price Errors,CND.*None)
 LCL.System_Value_Alpha_USR = 'CHECK=' + LCL.Co_Chks_for_Price_Errors (*ZERO);

 //?What is the highest level of error allowed. W=Warning and H=Hard
 CASE;

 // IF PAR.Error Level - Warn/Hard is *ALL values
 IF PAR.Error_Level_Warn_Hard = 'N'/'H'/'W';

 // LCL.Error Level - Warn/Hard = PAR.Error Level - Warn/Hard
 LCL.Error_Level_Warn_Hard = PAR.Error_Level_Warn_Hard;

 ENDIF;

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,CON.HIERRLVL=,CND.*One)
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + 'HIERRLVL=' (1);

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,LCL.Error Level - Warn/Hard
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + LCL.Error_Level_Warn_Hard (*ZERO);

 //?What is the highest level of error detected
 CASE;

 // IF PAR.Error Level - Pricing is *ALL values
 IF PAR.Error_Level_Pricing = 'N'/'H'/'W';

 // LCL.Error Level - Pricing = PAR.Error Level - Pricing
 LCL.Error_Level_Pricing = PAR.Error_Level_Pricing;

 ENDIF;

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,CON.ERROR=,CND.*One)
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + 'ERROR=' (1);

 // LCL.System Value Alpha    USR = CONCAT(LCL.System Value Alpha    USR,LCL.Error Level - Pricing,C
 LCL.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR + LCL.Error_Level_Pricing (*ZERO);

 // Call program Upd Repayment Backup  XF.
 CALL PROGRAM(Upd Repayment Backup  XF) ('PUKMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPEPYPRERR');
 PARAMETER(LCL.System_Value_Alpha_USR);

}


// PAR.Pricing Error = CND.Yes
PAR.Pricing_Error = 'Y';

ENDIF;

//?If Company checks for Pricing Errors
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Pricing Error = CND.No
PAR.Pricing_Error = 'N';

ENDIF;

