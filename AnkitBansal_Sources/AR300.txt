      *These two lines here to aid in debugging when needed***************
     H debug(*yes)
     H option(*srcstmt:*nodebugio)
      ********************************************************************
      *
      * SYSTEM:      ACCOUNT RECEIVABLE SYSTEM (PORK)
      * PROGRAM:     AR300
      * TITLE:       BUILD WORKFILES FOR DAILY AGING REPORTS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     01/09/97
      *
      *  FUNCTION:   THIS PROGRAM BUILDS FIVE WORKFILES THAT WILL BE
      *              USED BY VARIOUS PRINT PROGRAMS TO PRINT A/R AGING
      *              REPORTS. THE WORKFILES ARE:
      *
      *                  ARP300 - CUSTOMER HEADING INFO
      *                  ARP301 - INVOICE DETAIL
      *                  ARP302 - CUSTOMER TOTALS
      *                  ARP304 - SALES ROUTE TOTALS
      *                  ARP303 - REPORT TOTALS
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 01/31/97  LEANNE FEDOR
      *           MODIFY LOGIC TO OMIT 'DELETED/INACTIVE' CUSTOMERS--
      *           ONLY WHEN USER HAS SUBMITTED REPORT WITH 'YES' FOR
      *           'PRINT ZERO BALANCES'
      *
      * 06/24/97  SHEILA SCHERTZ
      *           GET PARENT CREDIT LIMIT FROM PARENT CUSTOMER RECORD
      *
      * 11/19/97  LEANNE FEDOR
      *           MOVED LOGIC TO OMIT 'DELETED/INACTIVE' CUSTOMERS--
      *           ONLY WHEN USER HAS SUBMITTED REPORT WITH 'YES' FOR
      *           'PRINT ZERO BALANCES'.
      *
      * 12/01/97  PEG LYONS
      *           CORRECTED LOGIC WHICH MOVES NEGATIVE BALANCE TO
      *           PRIOR AGING BALANCE AND CLEARED THE PRIOR AGING BAL.
      *           CHANGED SO CLEARS THE NEGATIVE BALANCE AGING.
      *
      * 03/16/98  LEANNE FEDOR
      *           REMOVED CUSTOMER TYPE/DESCRIPTION FROM ENTRY PARM LIST.
      *
      * 01/20/99  LEANNE FEDOR
      *           ADDED LOGIC TO OMIT THE PROCESSING OF A/R DETAIL
      *
      * 08/12/99  LEANNE FEDOR
      *           AS REQUESTED BY JUDY SCHAUB FOR DENNIS HUMMEL, CHANGE
      *           REPORT TO INCLUDE 'UNPOSTED' TRANSACTIONS.
      *
      * 03/12/02  LeAnne Fedor
      *           Added logic for the new selection option: Include chargebacks
      *           Added 'salesperson code' to Invoice Detail Workfile.
      *
      * 11/04/02  LeAnne Fedor
      *           Added 'statement frequency' to workfile of Customer Heading In
      *           Added additional extraction check on new Parent Customer restr
      *
      * 01/15/04  LeAnne Fedor
      *           The user can now limit the report to up to 5 different Invoice
      *           added logic for these new selectors.
      *
      * 07/20/05  Rose Centonze
      *           Recompile for Db change to A/R Detail ARBECPP
      *
      * 08/04/05  Barb Gutierrez
      *           Recompile for more Db change to A/R Detail ARBECPP.
      *
      * 08/23/05  Sharon Zurn
      *           Change program to allow printing of all companies for
      *           a customer.
      *
      * 12/20/05  LeAnne Fedor
      *           Made each DOU use a different indicator.
      *
      * 02/08/06  LeAnne Fedor
      *           Changed the "MTD/YTD Avg Days to Pay" logic to work for
      *           when the selection is for "all" companies.
      *
      * 05/19/06  LeAnne Fedor
      *           The "MTD/YTD Avg Days to Pay" logic was still NOT working.
      *           Changed it again to try to get it to work for "all" companies.
      *           AND, the users want the "customer header' values to include/be
      *           calculated without regard for their 'zero-balance' selection.
      *
      * 05/22/06  LeAnne Fedor
      *           The MTD/YTD change above introduced a bug with the extraction
      *           customer data when the user selected "ALL" companies. Found/fi
      *           the problem.
      *
      * 11/29/06  LeAnne Ramsey
      *           Added new parm of "age code". Changed logic to retrieve Aging
      *           Ranges from new file PMADCPP-AR Aging Control instead of the
      *           Company Control file.
      *           Also, replaced call to the generic program that formatted Syno
      *           into CCYYMMDD and MMDDYY formats with ILE date logic.
      *
      * 07/24/07  LeAnne Ramsey
      *           Fixed bug: We were truncating the "days" in the column heading
      *           Increased size of all the From/To Days fields from 2,0 to 3,0
      *           workfile ARP303.
      *
      * 05/16/08  Barb Gutierrez
      *           Recompile only due to new HPB environment.
      *
      * 08/13/08  Barb Gutierrez
      *           Fixed problem of comments not always printing on charge back r
      *           It was comparing the remaining balance due on the header recor
      *           transaction amount on the detail record.  It should compare to
      *           amount on the header record instead.
      *
      * 10/02/08  Sharon Zurn
      *           Fixed problem of PO # not always printing.  If the Accting
      *           company is different than the shipping company, it was not
      *           getting a match in the ord hdr file because it was searching
      *           by co, order#. changed logical from OPBFCPLW to OPBFCPLO.
      *
      * 10/26/11  LeAnne Ramsey (C1786)
      *           We were not retrieving/printing the correct chargeback comment
      *           when Transaction Amounts were the same. So, I added another
      *           workfile (ARP306) where I can hold the Company/Invoice/Sequenc
      *           of the comments I have already retrieved...I will use this to
      *           force the logic to go get a different Chargeback Comment.
      *           We were only having this problem when (in ARBECPL1-AR Detail):
      *            1) we had multiple invoices where the first 6 digits of the
      *               invoice number were the same and
      *            2) the transaction amounts on these chargebacks were the same
      *               value.
      *           Example:
      *
      *       Invoice  Sequence Adjustment Transaction   Explanation
      *       Number   Number   Type Code  Amount
      *        701824      1       CB            300.00  cl#30595/entered 01/12/
      *        701824      2       CB            300.00  cl#30596/entered 01/12/
      *        701824      3       CB            500.00  cl#30594/entered 01/12/
      *
      * 01/28/14  LeAnne Ramsey (E2991)
      *           Since the users have started using all 7 digits of the Invoice
      *           lopping off the last digit of the invoice number to get the Or
      *           Invoice Number that a Chargeback goes against no longer works.
      *           Centonze put the Original Invoice Number Associated with a Cha
      *           in the AR Header. The field is ce Number Associated with a Cha
      *
      * 05/15/14  LeAnne Ramsey (E2991)
      *           Tim Wood told Rose Centonze that he wasn't getting the comment
      *           Chargebacks. Rose told me to retrieve them (in $comment) with
      *           keylist (KEY4) that did not retrieve using a hardcoded suffix
      *           So, I dropped wkcest off of KEY4.
      *
      * 06/09/16  Brad Baden    (E5262)
      *           Modified for printing Rebills.  Added the Include Rebill flag
      *           parameter list, and added processing if the flag is 'Y', 'N' o
      *
      * 01/15/18  Danny Nguyen  (S12326)
      *           Prevented 'TBA' from printing on AR600 report on PO Number col
      *           the Order Number Ref is 0 in the A/R Header file do NOT get th
      *           Purchase Order #.
      *
      * 09/11/20  Brad Baden    (E16864)
      *           Recompile only for change in file ARP301.
      *
      * 06/29/23  Eric L        (3000027)
      *           Populate Type Code from CAEOREP (added to ARP300)
      *
      * 02/09/24  Santosh Patil-Service Request-3000252,CM Project-O300252
      *           1. Parameter "Include Negative Balance - xxinclcb"
      *              is received as parameter.
      *           2. Do not include CM/OA entries for field xxinclcb
      *              as 'N'.
      *           3. Populate Parent Customer $IBTC7 (added to ARP301)
      * 07/15/24  Eric L        (3015255)
      *           Add logic to populate the actual shipped date ($IGNDT)
      *               ADDING Actual Shipped Date ($IGNDT)
      *               ADDING Actual Shipped Date ($ISHDT)
      *               FORMAT MM/DD/YY ALPHA ($IALFA)
      *
      /EJECT
      *******************************************************************
      * FILE SPECIFICTIONS
      *******************************************************************
      *
     Farp300    o    e           k disk
      *  Workfile: Customer headings
      *
      *
     Farp301    o    e           k disk
      *  Workfile: Invoice detail
      *
      *
     Farp302    o    e           k disk
      *  Workfile: Customer totals
      *
      *
     Farl302a   if   e           k disk    rename($trec:$treca)
      *  Workfile: Customer totals
      *
      *
     Farp303    o    e           k disk
      *  Workfile: Report totals
      *
      *
     Farp304    o    e           k disk
      *  Workfile: Sales route totals
      *
      *
     Farp306    if a e           k disk
      *  Workfile: Chargeback sequence
      *
      *
     Farbcrel3  if   e           k disk
      *  A/R Summary
      *
      *
     Farbcrel6  if   e           k disk
      *  A/R Summary
      *
      *
sz   Farbdcpl6  if   e           k disk
 .    *  A/R Header
      *
      *
 .   Farbdcplz  if   e           k disk
sz    *  A/R Header
      *
      *
     Farbecpl1  if   e           k disk
      *  A/R Detail
      *
      *
     Farbecpl8  if   e           k disk
      *  A/R Detail
      *
      *
     Fcaabrel3  if   e           k disk
      *  Company Name and Address
      *
      *
     Fpmadcpl1  if   e           k disk
      *  A/R Aging control
      *
      *
     Fcabbreld  if   e           k disk
      *  Customer
      *
      *
     Fcabbrel1  if   e           k disk
      *  Customer
      *
      *
     Fcaeorel1  if   e           k disk
      *   Company/Customer
      *
      *
     Fcaeorel5  if   e           k disk
      *   Company/Customer
      *
      *
     Fopbfcplo  if   e           k disk
      *   PD Order Header
      *
      *
     Fpdjerel1  if   e           k disk
      *   PD Sales Route
      *
      *
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D only            c                   'O'
      *
     D t1desc          C                   'CUSTOMER TOTALS -
     D                                     BEFORE CREDIT -
     D                                     APPLIED'
      *
     D t2desc          C                   'CUSTOMER TOTALS -
     D                                     AFTER CREDIT -
     D                                     APPLIED'
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D procfl          s              1    inz('Y')
     D goonfl          s              1    inz('Y')
     D first           s              1    inz('Y')
     D firsts          s              1    inz('Y')
     D gotcu$$         s              1    inz('N')
     D gotcocu$$       s              1    inz('N')
     D cityfl          s              1    inz(' ')
     D stfl            s              1    inz(' ')
     D continue        s              1
      *
      * Save fields
      *
     d svanc7          s              7  0
     d svaic3          s                   like(abaic3)
     d svr4cd          s                   like(jer4cd)
      *
     d svcymd          s              8  0
      *
      *
      * Workfields
      *
     d wkdue           s             15  2
     d wkper           s             15  6
     d wkagdt          s              8  0
     d wkfld           s              1
      *
      *
      * Date ranges for aging columns
      *
     d wk2frdt         s                   like(wkagdt)
     d wk2todt         s                   like(wkagdt)
      *
     d wk3frdt         s                   like(wkagdt)
     d wk3todt         s                   like(wkagdt)
      *
     d wk4frdt         s                   like(wkagdt)
     d wk4todt         s                   like(wkagdt)
      *
     d wk5frdt         s                   like(wkagdt)
     d wk5todt         s                   like(wkagdt)
      *
      *
      *
      * Date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkisodate2      s               d   datfmt(*iso)
      *
      *
      * Parm fields
      *
     d xxaic3          s                   like(abaic3)
     d xxr4cd          s                   like(jer4cd)
     d xxdt            s              7  0
     d xxanc7          s              7  0
     d xxbtc7          s              7  0
     d xx0bal          s              1
     d xxrpt           s              1
     d xxinclcb        s              1
     d xxinclrb        s              1
     d xxsuffix1       s              2
     d xxsuffix2       s              2
     d xxsuffix3       s              2
     d xxsuffix4       s              2
     d xxsuffix5       s              2
     d xxagecode       s              6
      * Project-O300252-START
     d xxinclnb        s              1
      * Project-O300252-END
      *
     D xxcymd          s              7  0
     D xxmmddyy        s              6  0
     D xxccyymmdd      s              8  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
     D                 ds
     D   $ishdt                1      6  0
     D   wkmm                  1      2  0
     D   wkdd                  3      4  0
     D   wkyy                  5      6  0
      *
     D                 ds
     D   $IALFA                1      8
     D   wkmmA                 1      2
     D   wk001                 3      3
     D   wkddA                 4      5
     D   wk002                 6      6
     D   wkyyA                 7      8
      *
      /EJECT
      *******************************************************************
      * MAINLINE PROCESSING
      *******************************************************************
      *
      * If initial retrievals of Company aging data were successful, start
      * processing.
      *
     C                   if        procfl = yes
      *
      * Note: I know this logic does not read equal on Company. But, Company is
      * not in this Customer file. A later check on customer will retrieve/valid
      * using company.
      *
      * Also, only process records where Ship-to Customer equals A/R Customer
      *
     C     *loval        setll     cabbreld
      *
     C                   dou       *in80 = *on
     C                   read      cabbreld                               80
     C                   if        *in80 = *off and
     C                             bbbkc7 = bbanc7
      *
     C                   movel     yes           procfl
      *
      * A customer record will only be processed when:
      *   1) If the user has elected to run the report for a single customer,
      *      customer number must match.
      *   2) If the user has elected to run the report for a single Parent
      *      Customer, Parent Customer Number must match.
      *   3) Customer is an A/R Customer (He has an A/R Summary Record.)
      *   4) The customer's sales setup matches the user's selections.
      *      (NOTE: This logic is performed unconditionally since this check als
      *      eliminates all customers that do not belong to the company selected
      *      the user.)
      *       A) If Sales Route of the Customer matches the sales route specifie
      *          the user.
      *   5) If the user does not want to print zero balance accounts, then the
      *      customer has a balance due as of the Cut-Off Date.
      *
     C                   select
     C                   when      xxanc7 <> 0 and xxanc7 <> bbanc7
     C                   movel     no            procfl
      *
     C                   when      xxbtc7 <> 0 and xxbtc7 <> bbbtc7
     C                   movel     no            procfl
     C                   other
      *
     C                   z-add     bbanc7        svanc7
     C                   exsr      $compcust
      *
     C                   if        procfl = yes
     C                   exsr      $ardue
     C                   endif
     C                   endsl
      *
      *
     C                   if        procfl = yes
      *
     C                   if        first = yes
     C                   movel     no            first
     C                   endif
      *
      * Retrieve company/customer data for Customer Header.
      *
     C                   exsr      $cocust
      *
      * Retrieve customer data and customer invoices.
      *
     C                   exsr      $cust
     C                   exsr      $inv
      *
      * Calculate Total Lines for the Customer
      *
     C                   exsr      $totc
     C                   endif
      *
      * Initialize fields in the Customer Workfiles (Headings and Total)
      *
     C                   clear                   $crec
     C                   clear                   $trec
      *
     C                   endif
     C                   enddo
     C                   endif
      *
      *----------------
      * EOF PROCESSING
      *----------------
      *
      * If you processed any data, calculate totals.
      *
      * If the user is generating the report 'BY SALES ROUTE', calculate
      * Sales Route Totals.
      *
     C                   if        first = no
      *
     C                   if        xxrpt = '2'
     C                   exsr      $route
     C                   endif
      *
      * Always generate the Report Workfile record.
      *
     C                   exsr      $totr
     C                   endif
      *
      * Exit program
     C                   seton                                        lr
      /EJECT
      *-------------------------------------------------------------------------
      * Determine if this is an A/R Customer with a Balance Due
      *-------------------------------------------------------------------------
      *
      * This logic is used to determine whether to include a customer on the rep
      * To be included, the  customer must be an A/R Customer.
      * The user's selections determine whether zero balance customers are inclu
      *
      * This logic assumes that only A/R Customers will have a record in the
      * A/R Summary file.
      *
     C     $ardue        begsr
      *
      * Initialize workfields/control fields
      *
     C                   movel     no            gotcu$$
      *
      * Process the A/R Summary file for this customer.
      *
      * If Company equal to 0, we want all records for that customer.
      * Otherwise, just read the record for the Company/Customer.
      *
     C                   if        xxaic3 = 0
     C     svanc7        setll     arbcrel3
     C                   else
     C     key0          setll     arbcrel6
     C                   endif
      *
     C                   dou       *in81 = *on
      *
     C                   if        xxaic3 = 0
     C     svanc7        reade     arbcrel3                               81
     C                   else
     C     key0          reade     arbcrel6                               81
     C                   endif
      *
     C                   if        *in81 = *off
      *
      * Determine if the customer has any balance (Positive or Negative) as of
      * the Cut-off Date.
      *
     C                   exsr      $balance
      *
      * If this customer/company has a zero balance, we will only process
      * if the user has elected to see the zero balances. BUT, we will
      * use all the records for setting up the Customer Header fields---
      * REGARDLESS of the user's "zero-balance" selection.
      *
     C                   if        gotcocu$$ = no and xx0bal = no
     C                   else
     C                   move      yes           gotcu$$
     C                   endif
     C                   endif
     C                   enddo
      *
      *
     C                   if        gotcu$$ = no and xx0bal = no
     C                   move      no            procfl
     C                   endif
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------
      * Determine if the Customer has a Balance as of the Cut-off Date
      *-----------------------------------------------------------------
      *
     C     $balance      begsr
      *
     C                   z-add     0             wkdue
     C                   move      no            gotcocu$$
      *
      * Position in the A/R Header file on Company/Customer.
      *
     C     key1          setll     arbdcpl6
      *
      * Process each A/R Header record for this company/customer that:
      *   1) Does not have a Purge Status of 'H'istory
      *   2) Has a Transaction Date on/before the Cut-off Date
      *
     C                   dou       *in82 = *on or gotcocu$$ = yes
     C     key1          reade     arbdcpl6                               82
     C                   if        *in82 = *off and
     C                             bde3st <> 'H' and
     C                             bdb4dt <= xxdt
      *
      * COMMENT OUT OLD RULES PRIOR TO THE INCLUDE REBILLS FLAG  PROJECT: E5262
      * Conditionally include chargebacks. The user may elect to:
      *  1) include chargebacks with everything else
      *  2) omit charge backs
      *  3) only print chargebacks
      *
     C*                  if        xxinclcb = yes or
     C*                            (bdcest = 'CB' and xxinclcb = only) or
     C*                            (bdcest <> 'CB' and xxinclcb = no)
      *
      *
      * NEW RULES WITH THE ADDITION OF THE INCLUDE REBILLS FLAG  PROJECT: E5262
      * Conditionally include chargebacks and rebills. The user may elect to:
      *  1) include chargebacks and/or rebills with everything else
      *  2) omit charge backs and/or rebills
      *  3) only print chargebacks and/or rebills
      *  4) Include Credit Memo or/and On Account for xxinclnb Y - O300252
      *
     C                   eval      continue = no
     C                   select
     C                   when      bdcest = 'CB' and
     C                             (xxinclcb = yes or xxinclcb = only)
     C                   eval      continue = yes
      *
     C                   when      (bdcest = 'RB' and
     C                             (xxinclrb = yes or xxinclrb = only))
     C                   eval      continue = yes
      *
      * Project-O300252-START
     C                   when      (bdcest = 'CM' or bdcest = 'OA') and
     C                             (xxinclnb = 'Y' and BDBSVA > 0)
     C                   eval      continue = yes
      *
     C*                  when      (bdcest <> 'CB' and bdcest <> 'RB') and
     C*                            (xxinclcb <> only and xxinclrb <> only)
     C*                  eval      continue = yes
     C                   when      (bdcest <> 'CB' and bdcest <> 'RB' and
     C                              bdcest <> 'CM' and bdcest <> 'OA') and
     C                             (xxinclcb <> only and xxinclrb <> only)
     C                   eval      continue = yes
      * Project-O300252-END
      *
     C                   endsl
      *
      * The user can also limit the report to up to 5 different Invoice Suffixes
      * Check for the users choices.
      *
     C                   move      no            goonfl
      *
     C                   if        continue = yes
      *
     C                   select
     C                   when      xxsuffix1 = *blank and
     C                             xxsuffix2 = *blank and
     C                             xxsuffix3 = *blank and
     C                             xxsuffix4 = *blank and
     C                             xxsuffix5 = *blank
     C                   move      yes           goonfl
      *
     C                   when      bdcest = xxsuffix1 or
     C                             bdcest = xxsuffix2 or
     C                             bdcest = xxsuffix3 or
     C                             bdcest = xxsuffix4 or
     C                             bdcest = xxsuffix5
     C                   move      yes           goonfl
     C                   endsl
      *
     C                   endif
      *
      * If keep going
     C                   if        goonfl = yes
      *
      *
      * ADD RB selection just like CB   Project E5262     Brad Baden
      * Now, calculate the remaining balance for this A/R Header record as of
      * the Cut-Off Date.  Because there is no tie from the A/R Header to the
      * A/R Detail file for Credit Memos and 'On-Account' records, we had to
      * create separate logic to calculate the remaining balance due.
      *
     C                   z-add     0             wkdue
      *
     C                   select
     C                   when      bdcest = 'IN' or
     C                             bdcest = 'DM' or
     C                             bdcest = 'CB' or
     C                             bdcest = 'RB'
     C                   z-add     bdbsva        wkdue
     C                   exsr      $duein
      *
     C                   when      bdcest = 'CM' or
     C                             bdcest = 'OA'
     C                   exsr      $duecm
     C                   endsl
      *
     C                   if        wkdue <> 0
     C                   move      yes           gotcocu$$
     C                   endif
      *
     C                   endif
     C*                  endif
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Calculate the Remaining Balance for the A/R Header record as of the Cut-
      * Date (invoices and Debit Memos only)
      *-------------------------------------------------------------------------
      *
     C     $duein        begsr
      *
      * Process each A/R Detail Record for this Invoice Number/Invoice Suffix th
      *   1) Does NOT have an Adjustment Type Code of ARM or ARC
      *   2) Has a G/L Post Date that is on/before the Cut-off Date
      *
     C     key3          setll     arbecpl8
     C                   dou       *in83 = *on
     C     key3          reade     arbecpl8                               83
      *
     C                   if        *in83 = *off and
     C                             bfuhcd <> 'ARM' and
     C                             bfuhcd <> 'ARC' and
     C                             bfhydt <= xxdt
     C                   sub       bfbsva        wkdue
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Calculate the Amount Due for the A/R Header record as of the Cut-Off Dat
      * (credit memos and 'On-Account' records only)
      *-------------------------------------------------------------------------
      *
      * Calculate the remaining balance for this A/R Header record as of the Cut
      * Because there is no tie from the A/R Header to the A/R Detail file for C
      * Memos and On-Account records, we use values from the A/R Header records
      * the Remaining Balance Due.
      *
      * If the 'Paid In Full Date' is after the user's Cut-off Date
      *   set the Balance Due equal to the 'Transaction Amount'
      * If the 'Paid In Full Date' is on/before the user's Cut-off Date
      *   set the Balance Due equal to the 'Remaining Balance Due'
      *
     C     $duecm        begsr
      *
     C                   if        bdh4dt > xxdt
     C                   add       bdbsva        wkdue
     C                   else
     C                   add       bdbgva        wkdue
     C                   endif
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Retrieve Company/Customer info for Customer Header
      *-------------------------------------------------------------------------
      *
     C     $cocust       begsr
      *
      * If Company equal to 0, we want all records for that customer.
      * Otherwise, just read the record for the Company/Customer.
      * This retrieval is performed without regard for the user's "include zero
      * selection.
      *
     C                   if        xxaic3 = 0
     C     svanc7        setll     arbcrel3
     C                   else
     C     key0          setll     arbcrel6
     C                   endif
      *
     C                   dou       *in81 = *on
      *
     C                   if        xxaic3 = 0
     C     svanc7        reade     arbcrel3                               81
     C                   else
     C     key0          reade     arbcrel6                               81
     C                   endif
      *
     C                   if        *in81 = *off
      *
      * Amount and Date of highest A/R balance
      *
     C                   if        bcalva > $calva
     C                   z-add     bcalva        $calva
      *
     C                   z-add     bcaidt        $caidt
     C                   z-add     bcaidt        xxcymd
     C                   exsr      $synondt
     C                   z-add     xxmmddyy      $chbdt
     C                   endif
      *
      * YTD sales invoiced
     C                   add       bcvpva        $cvpva
      *
      * MTD invoices paid
      * MTD days paid
     C                   add       bcadpm        $cadpm
     C                   add       bcbtdy        $cbtdy
      *
      * YTD invoices paid
      * YTD days paid
     C                   add       bcvova        $cvova
     C                   add       bcbudy        $cbudy
      *
      * Keep the "latest" last payment date
      *
     C                   if        bcaldt > $caldt
     C                   z-add     bcaldt        $caldt
     C                   z-add     bcaldt        xxcymd
     C                   exsr      $synondt
     C                   z-add     xxmmddyy      $clpdt
     C                   endif
      *
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Retrieve Customer info
      *-------------------------------------------------------------------------
      *
     C     $cust         begsr
      *
      * Set up Company
      *
     C                   z-add     xxaic3        $caic3
      *
      * Set up fields fusing data from the Customer record that was read in the
      * Mainline routine.
      *
      * A/R customer number
      * Customer name
      * Parent customer number
      * Statement frequency
      * Order entry hold status
      *
     C                   z-add     svanc7        $canc7
     C                   movel     bbaytx        $caytx
     C                   z-add     bbbtC7        $cbtc7
     C                   move      bbuncs        $buncs
     C                   movel     bbqnst        $cqnst
      *
      * Concatenate City/State
      *
     C                   exsr      $city
      *
      * Calculate Customer's MTD Average Days to Pay as:
      *     MTD days paid / MTD invoices paid
      *     (But, we want this to match the value that the user sees on the Syno
      *      PDJDPVR-Display AR Summary. So, we calculate the field into a 9,6 w
      *      and then multiply it by 1 with a half-adjust into a 5,2 field.)
      *
     C                   if        $cadpm <> 0
     C     $cbtdy        div(h)    $cadpm        $cmadp
     C                   endif
      *
      *
      * Calculate Customer's YTD Average Days to Pay as:
      *     YTD days paid / YTD invocies paid
      *     (But, we want this to match the value that the user sees on the Syno
      *      PDJDPVR-Display AR Summary. So, we calculate the field into a 9,6 w
      *      and then multiply it by 1 with a half-adjust into a 5,2 field.)
      *
     C                   if        $cvova <> 0
     C     $cbudy        div(h)    $cvova        $cyadp
     C                   endif
      *
      *
      * Retrieve Parent Customer Name and  Credit Limit.
      * (Note: Be careful where you place this logic since the retrieval of the
      *  Parent Customer info will overlay your A/R Customer Record.)
      *
     C     bbbtc7        chain     cabbrel1                           92
     C                   if        *in92 = *off
     C                   movel     bbaytx        $cpnam
     C                   movel     bbs2nb        $cs2nb
     C                   endif
      * from CAEOREP
     C                   eval      $CBOCD = EOBOCD
      *
      * Write the Customer Headings workfile record
      *
     C                   write     $crec
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------
      * Concatenate City/State together
      *-----------------------------------------------------------------
      *
     C     $city         begsr
      *
      * Notes:
      *   1) Foreign customers do not have State. The State field will hold a '.
      *      so, do not concatenate when State is '.'.
      *   2) Sometimes City is also a '.'  Do not concatenate when City is '.'
      *
     C                   movel     bbajna        $cajna
     C                   movel     bbbgcd        $cbgcd
      *
      * Check for a State
      *
     C                   if        bbbgcd = '. ' or bbbgcd = *blank
     C                   movel     no            stfl
     C                   else
     C                   movel     yes           stfl
     C                   endif
      *
      * Check for a City
      *
     C                   movel     bbajna        wkfld
     C                   if        bbajna = *blank or wkfld = '.'
     C                   movel     no            cityfl
     C                   else
     C                   movel     yes           cityfl
     C                   endif
      *
      *
      * No City, no State
      *
     C                   select
     C                   when      cityfl = no and stfl = no
      * City and State
     C                   when      cityfl = yes and stfl = yes
     C     bbajna        cat(p)    ',':0         $caddr
     C                   cat       bbbgcd:1      $caddr
      *
      * City without State
      *
     C                   when      cityfl = yes and stfl = no
     C                   movel     bbajna        $caddr
      *
      * State without City
      *
     C                   when      cityfl = no and stfl = yes
     C                   movel     bbbgcd        $caddr
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Process Invoices for a Customer
      *-------------------------------------------------------------------------
      *
     C     $inv          begsr
      *
      * For each A/R Customer, process each AR Header (invoice) record that:
      *   1) Does not have a Purge Status of 'H'istory
      *   2) Has a Transaction Date on/before the Cut-off Date
      *   3) Has a Balance on the Cut-off Date
      *
 x    * Position on Customer Number when company is zero; otherwise use
      * company/customer in the AR Header file:
      *
     C                   if        xxaic3 = 0
 x   C     svanc7        setll     arbdcplz
     C                   else
     C     key0          setll     arbdcpl6
     C                   endif
      *
     C                   dou       *in84 = *on
     C                   if        xxaic3 = 0
     C     svanc7        reade     arbdcplz                               84
     C                   else
     C     key0          reade     arbdcpl6                               84
     C                   endif
      *
     C                   if        *in84 = *off and
     C                             bde3st <> 'H' and
     C                             bdb4dt <= xxdt
      *
      * COMMENT OUT OLD RULES PRIOR TO THE INCLUDE REBILLS FLAG  PROJECT: E5262
      * Conditionally include chargebacks. The user may elect to:
      *  1) include chargebacks with everything else
      *  2) omit charge backs
      *  3) only print chargebacks
      *
     C*                  if        xxinclcb = yes or
     C*                            (bdcest = 'CB' and xxinclcb = only) or
     C*                            (bdcest <> 'CB' and xxinclcb = no)
      * NEW RULES WITH THE ADDITION OF THE INCLUDE REBILLS FLAG  PROJECT: E5262
      * Conditionally include chargebacks and rebills. The user may elect to:
      *  1) include chargebacks and/or rebills with everything else
      *  2) omit charge backs and/or rebills
      *  3) only print chargebacks and/or rebills
      *  4) Include Credit Memo or/and On Account for xxinclnb Y - O300252
      *
     C                   eval      continue = no
     C                   select
     C                   when      bdcest = 'CB' and
     C                             (xxinclcb = yes or xxinclcb = only)
     C                   eval      continue = yes
      *
     C                   when      (bdcest = 'RB' and
     C                             (xxinclrb = yes or xxinclrb = only))
     C                   eval      continue = yes
      *
      * Project-O300252-START
     C                   when      (bdcest = 'CM' or bdcest = 'OA') and
     C                             (xxinclnb = 'Y' and BDBSVA > 0)
     C                   eval      continue = yes
      *
     C*                  when      (bdcest <> 'CB' and bdcest <> 'RB') and
     C*                            (xxinclcb <> only and xxinclrb <> only)
     C*                  eval      continue = yes
     C                   when      (bdcest <> 'CB' and bdcest <> 'RB' and
     C                              bdcest <> 'CM' and bdcest <> 'OA') and
     C                             (xxinclcb <> only and xxinclrb <> only)
     C                   eval      continue = yes
      * Project-O300252-END
      *
     C                   endsl
      *
      *
      * The user can also limit the report to up to 5 different Invoice Suffixes
      * Check for the users choices.
      *
     C                   move      no            goonfl
      *
     C                   if        continue = yes
      *
     C                   select
     C                   when      xxsuffix1 = *blank and
     C                             xxsuffix2 = *blank and
     C                             xxsuffix3 = *blank and
     C                             xxsuffix4 = *blank and
     C                             xxsuffix5 = *blank
     C                   move      yes           goonfl
      *
     C                   when      bdcest = xxsuffix1 or
     C                             bdcest = xxsuffix2 or
     C                             bdcest = xxsuffix3 or
     C                             bdcest = xxsuffix4 or
     C                             bdcest = xxsuffix5
     C                   move      yes           goonfl
     C                   endsl
      *
     C                   endif
      *
      * If keep going
     C                   if        goonfl = yes
      *
      *
      * Clear Invoice Workfile record
      *
     C                   clear                   $irec
      *
      * Calculate the Remaining Balance for this A/R Header record as of the
      * Cut-off Date.  Because there is no tie from the A/R Header to the
      * A/R Detail file for Credit Memos and 'On-Account' records, we had to
      * create separate logic to calculate the Remaining Balance Due.
      * DUE.
      *
     C                   z-add     0             wkdue
      *
     C                   select
     C                   when      bdcest = 'IN' or
     C                             bdcest = 'DM' or
     C                             bdcest = 'CB' or
     C                             bdcest = 'RB'
     C                   z-add     bdbsva        wkdue
     C                   exsr      $duein
      *
     C                   when      bdcest = 'CM' or
     C                             bdcest = 'OA'
     C                   exsr      $duecm
     C                   endsl
      *
      *
     C                   if        wkdue <> 0
      *
      * Set up Invoice fields:
      *   1) Invoice number
      *   2) Invoice suffix
      *   3) Order number reference
      *   4) Transaction date
      *   5) Company number
      *   5) Salesperson code
      *   6) Parent Customer - O300252
      *
     C                   z-add     bdanc7        $ianc7
     C                   z-add     bdconb        $iconb
     C                   movel     bdcest        $icest
     C                   z-add     bdcac7        $icac7
     C                   z-add     bdb4dt        $ib4dt
     C                   z-add     bdaic3        $iaic3
     C                   move      bdbccd        $ibccd
      * Project-O300252-START
     C                   z-add     xxbtc7        $ibtc7
     C                   if        xxbtc7 = 0
     C                   z-add     bbbtc7        $ibtc7
     C                   endif
      * Project-O300252-END
      *
      * Flip Due Date
      *
     C                   z-add     bdatdt        $iatdt
     C                   z-add     bdatdt        xxcymd
     C                   exsr      $synondt
     C                   z-add     xxmmddyy      $idudt
      *
      *
      * Retrieve Customer's Purchase Order Number using Order Number
      *
12326 ** S12326-Do not get PO# if Order Number Ref is 0.
     C                   if        bdcac7 <> 0
      *
     C     bdcac7        chain     opbfcplo                           92
     C                   if        *in92 = *off
     C                   movel     bebcna        $ibcna
     C                   z-add     begndt        $igndt                         3015255
      * Flip Shp Date                                                           3015255
     C                   z-add     begndt        xxcymd                         3015255
     C                   exsr      $synondt                                     3015255
     C                   z-add     xxmmddyy      $ishdt                         3015255
     C                   z-add     xxmmddyy      $ishdt                         3015255
     C                   move      wkmm          wkmmA                          3015255
     C                   eval      wk001    =    '/'                            3015255
     C                   move      wkdd          wkddA                          3015255
     C                   eval      wk002    =    '/'                            3015255
     C                   move      wkyy          wkyyA                          3015255
     C                   endif                                                  3015255
      *
12326C                   endif
      *
      * ADD RB selection just like CB   Project E5262     Brad Baden
      * For Invoices, Debit Memos, Chargebacks, and Rebills:
      *   1) Calculate aging ranges
      *   2) Plop Balance Due into the Appropriate Range
      *   3) For Chargebacks and Rebills, retrieve Comment
      *
     C                   select
     C                   when      bdcest = 'IN' or
     C                             bdcest = 'DM' or
     C                             bdcest = 'CB' or
     C                             bdcest = 'RB'
     C                   exsr      $range
     C                   exsr      $plop
      *
     C                   if        bdcest = 'CB' or bdcest = 'RB'
     C                   exsr      $commentnew
     C                   if        $ngna = *blanks
     C                   exsr      $comment
     C                   endif
     C                   endif
      *
      *
      * For Credit Memos and On-Account records,
      * dump dollars in Credit Memo/On Account column and reverse the sign
      * for print. (Force the values to be negative for printing.)
      *
     C                   when      bdcest = 'CM' or
     C                             bdcest = 'OA'
     C     0             sub       wkdue         $ioaam
     C                   endsl
      *
      *                                           a
      * Accumulate values for Customer Totals
      *
     C                   add       $ic1am        $tc1am
     C                   add       $ic2am        $tc2am
     C                   add       $ic3am        $tc3am
     C                   add       $ic4am        $tc4am
     C                   add       $ic5am        $tc5am
     C                   add       $ic6am        $tc6am
     C                   add       $ioaam        $toaam
      *
      * Write the Invoice Workfile record
      *
     C                   write     $irec
     C                   endif
      *
     C                   endif
     C*                  endif
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------
      * Calculate Aging Ranges for an Invoice
      *-----------------------------------------------------------------
      *
     C     $range        begsr
      *
      * Determine which date in the Invoice record to use for Aging and put that
      * into CCYYMMDD format.  You will age on the "due date" or the "transactio
      * depending on the A/R Control value that has been retrieved in the Initia
      * Routine.
      *
     C                   select
     C                   when      $reust = 'D'
     C                   z-add     bdatdt        xxcymd
     C                   other
     C                   z-add     bdb4dt        xxcymd
     C                   endsl
      * Flip the date.
     C                   exsr      $synondt
     C                   z-add     xxccyymmdd    svcymd
      *
      *
      * Set up the date ranges for the Aging Columns:
      *
     C                   movel     svcymd        wkisodate
      *
      * Column 1 is the 'current' column; no date range is required.
      *
      * Column 2 ranges:
      *
     C     wkisodate     adddur    $r2fr:*days   wkisodate2
     C                   move      wkisodate2    wk2frdt
      *
     C     wkisodate     adddur    $r2to:*days   wkisodate2
     C                   move      wkisodate2    wk2todt
      *
      * Column 3 ranges:
      *
     C     wkisodate     adddur    $r3fr:*days   wkisodate2
     C                   move      wkisodate2    wk3frdt
      *
     C     wkisodate     adddur    $r3to:*days   wkisodate2
     C                   move      wkisodate2    wk3todt
      *
      * Column 4 ranges:
      *
     C     wkisodate     adddur    $r4fr:*days   wkisodate2
     C                   move      wkisodate2    wk4frdt
      *
     C     wkisodate     adddur    $r4to:*days   wkisodate2
     C                   move      wkisodate2    wk4todt
      *
      * Column 5 ranges:
      *
     C     wkisodate     adddur    $r5fr:*days   wkisodate2
     C                   move      wkisodate2    wk5frdt
      *
     C     wkisodate     adddur    $r5to:*days   wkisodate2
     C                   move      wkisodate2    wk5todt
      *
      * No date range is required for the 'OVER' column. The logic will use the
      * Date from Column 5 for its comparisons.
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Plop the Balance Due into the appropriate column on the report
      *-------------------------------------------------------------------------
      *
     C     $plop         begsr
      *
      * The value in WKAGDT will be the date that is being used as the compariso
      * cut-off date for aging.  In this case, it is set up in the initializatio
      *
      * The value in SVCYMD is either:
      *    1) the Due Date or
      *    2) the Transaction Date of the invoice being processed
      *
      * Current column:
      *
     C                   select
     C                   when      svcymd >= wkagdt
     C                   z-add     wkdue         $ic1am
      *
      * Column 2:
     C                   when      wkagdt >= wk2frdt and
     C                             wkagdt <= wk2todt
     C                   z-add     wkdue         $ic2am
      *
      * Column 3:
     C                   when      wkagdt >= wk3frdt and
     C                             wkagdt <= wk3todt
     C                   z-add     wkdue         $ic3am
      *
      * Column 4:
     C                   when      wkagdt >= wk4frdt and
     C                             wkagdt <= wk4todt
     C                   z-add     wkdue         $ic4am
      *
      * Column 5:
     C                   when      wkagdt >= wk5frdt and
     C                             wkagdt <= wk5todt
     C                   z-add     wkdue         $ic5am
      *
      * The 'OVER' column:
      *
     C                   when      wkagdt > wk5todt
     C                   z-add     wkdue         $ic6am
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Retrieve Chargeback Comment - New version
      *----------------------------------------------------------------
      *
     C     $commentnew   begsr
      *
     C                   eval      $ngna = *blanks
      *
      * Read AR Detail records for the Original Invoice associated with a
      * Chargeback or a Rebill.
      *
     C     key4          setll     arbecpl1
      *
     C                   dou       *in85 = *on
     C     key4          reade     arbecpl1                               85
     C                   if        *in85 = *off and
     C                             (bfuhcd = 'CB ' or bfuhcd = 'ACB' or
     C                              bfuhcd = 'RB ')
      *
      * Read all records, checking the unused date 3 field for the Invoice#
      * from the A/R Header record being processed.
      *
     C                   if        bfqjdt = bdconb
     C                   eval      $ngna = bfngna
     C                   leave
     C                   endif
      *
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Retrieve Chargeback Comment
      *----------------------------------------------------------------
      *
     C     $comment      begsr
      *
      * Read AR Detail records for the Original Invoice associated with a
      * Chargeback or a Rebill.
      *
     C     key4          setll     arbecpl1
      *
     C                   dou       *in85 = *on or $ngna <> *blank
     C     key4          reade     arbecpl1                               85
     C                   if        *in85 = *off and
     C                             (bfuhcd = 'CB ' or bfuhcd = 'ACB' or
     C                              bfuhcd = 'RB ') and bdbsva = bfbsva
      *
      * Have you already retrieved this comment? If so, stay in the loop
      * and look for another Comment record.
      * If not, use this comment and write a record to the Sequence workfile
      * ...for checking on the next Chargeback.
      *
     C     key5          chain     arp306                             92
     C                   if        *in92 = *on
     C                   move      bfngna        $ngna
      *
     C                   z-add     bfaic3        $cbaic3
     C                   z-add     bfconb        $cbconb
     C                   z-add     bfdxnb        $cbdxnb
     C                   write     $cbrec
     C                   endif
      *
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Write Customer Total Lines
      *----------------------------------------------------------------
      *
     C     $totc         begsr
      *
     C                   z-add     $caic3        $taic3
     C                   z-add     $canc7        $tanc7
      *
      * Write the first Customer Total Line
      *
     C                   z-add     1             $tline
     C                   movel(p)  t1desc        $tdesc
     C                   write     $trec
      *
      * It is possible that an Aging Column may have a negative balance.
      * If any column (except the Current Column) has a negative balance,
      * dump the Negative Balance into the preceding column.
      *
     C                   if        $tc6am < 0
     C                   add       $tc6am        $tc5am
     C                   z-add     0             $tc6am
     C                   endif
      *
     C                   if        $tc5am < 0
     C                   add       $tc5am        $tc4am
     C                   z-add     0             $tc5am
     C                   endif
      *
     C                   if        $tc4am < 0
     C                   add       $tc4am        $tc3am
     C                   z-add     0             $tc4am
     C                   endif
      *
     C                   if        $tc3am < 0
     C                   add       $tc3am        $tc2am
     C                   z-add     0             $tc3am
     C                   endif
      *
      * Now, you must also dump the total Credit Memo Amount into the oldest
      * overdue column.  If there are no overdue values, dump it into the
      * "Current" column.
      *
      * Flip the sign of the Credit Memo Total value back to what it was
      * (It has already been flipped for printing; but, we need it unflipped for
      * this logic.)
      *
     C     0             sub       $toaam        wkdue
     C                   exsr      $apply
      *
      * Accumulate Customer Totals into Report Total Fields
      *
     C                   add       $tc1am        $rc1am
     C                   add       $tc2am        $rc2am
     C                   add       $tc3am        $rc3am
     C                   add       $tc4am        $rc4am
     C                   add       $tc5am        $rc5am
     C                   add       $tc6am        $rc6am
      *
      * Calculate Total Due for Customer
      *
     C                   eval      $tdam = $tc1am + $tc2am + $tc3am + $tc4am +
     C                                     $tc5am + $tc6am
      *
      * Write 'APPLIED CREDIT' record for Customer
      *
     C                   z-add     2             $tline
     C                   movel(p)  t2desc        $tdesc
     C                   write     $trec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Dump Credit Memos into columns with Overdue Balances
      *----------------------------------------------------------------
      *
     C     $apply        begsr
      *
      * Check Column 6 for Application of Credit
      *
     C                   if        wkdue > 0
     C                   if        wkdue > $tc6am
     C     wkdue         sub       $tc6am        wkdue
     C                   z-add     0             $tc6am
     C                   else
     C     $tc6am        sub       wkdue         $tc6am
     C                   z-add     0             wkdue
     C                   endif
     C                   endif
      *
      * Check Column 5 for Application of Credit
      *
     C                   if        wkdue > 0
     C                   if        wkdue > $tc5am
     C     wkdue         sub       $tc5am        wkdue
     C                   z-add     0             $tc5am
     C                   else
     C     $tc5am        sub       wkdue         $tc5am
     C                   z-add     0             wkdue
     C                   endif
     C                   endif
      *
      * Check Column 4 for Application of Credit
      *
     C                   if        wkdue > 0
     C                   if        wkdue > $tc4am
     C     wkdue         sub       $tc4am        wkdue
     C                   z-add     0             $tc4am
     C                   else
     C     $tc4am        sub       wkdue         $tc4am
     C                   z-add     0             wkdue
     C                   endif
     C                   endif
      *
      * Check Column 3 for Application of Credit
      *
     C                   if        wkdue > 0
     C                   if        wkdue > $tc3am
     C     wkdue         sub       $tc3am        wkdue
     C                   z-add     0             $tc3am
     C                   else
     C     $tc3am        sub       wkdue         $tc3am
     C                   z-add     0             wkdue
     C                   endif
     C                   endif
      *
      * Check Column 2 for Application of Credit
      *
     C                   if        wkdue > 0
     C                   if        wkdue > $tc2am
     C     wkdue         sub       $tc2am        wkdue
     C                   z-add     0             $tc2am
     C                   else
     C     $tc2am        sub       wkdue         $tc2am
     C                   z-add     0             wkdue
     C                   endif
     C                   endif
      *
      * If any credit is left to apply, dump it into Column 1
      *
     C                   if        wkdue > 0
     C     $tc1am        sub       wkdue         $tc1am
     C                   endif
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Process Customer Total records to get Sales Route Totals
      *-------------------------------------------------------------------------
      *
      * Process each Customer Total Line '2' which holds the total after credits
      * are applied.
      *
     C     $route        begsr
      *
     C     *loval        setll     arl302a
      *
     C                   dou       *in86 = *on
     C                   read      arl302a                                86
     C                   if        *in86 = *off and $tline = 2
      *
     C                   if        firsts = yes
     C                   movel     no            firsts
     C                   movel     $taic3        svaic3
     C                   movel     $tr4cd        svr4cd
     C                   endif
      *
      * Break logic:
      *    When you break on Company or Sales Route,
      *    Calcualte percents and write Sales Route Total record
      *
     C                   if        $taic3 <> svaic3 or
     C                             $tr4cd <> svr4cd
     C                   exsr      $tots
     C                   endif
      *
      * Detail processing:
      *   Accumulate Customer Totals into Sales Route Totals
      *
     C                   add       $tc1am        $sc1am
     C                   add       $tc2am        $sc2am
     C                   add       $tc3am        $sc3am
     C                   add       $tc4am        $sc4am
     C                   add       $tc5am        $sc5am
     C                   add       $tc6am        $sc6am
     C                   add       $tdam         $sdam
      *
     C                   endif
     C                   enddo
      *
      * Write out last Sales Route Total record.
      *
     C                   if        firsts = no
     C                   exsr      $tots
     C                   endif
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------
      * Calculate Percents for Sales Route Total Line
      *------------------------------------------------------------------
      *
     C     $tots         begsr
      *
     C                   z-add     svaic3        $saic3
     C                   movel     svr4cd        $sr4cd
      *
     C                   if        $sdam <> 0
      *
      * Percent of Total for "Current" Column
      *
     C     $sc1am        div(h)    $sdam         wkper
     C     wkper         mult(h)   100           $sc1pc
      *
      * Percent of Total for Aging Column 2
      *
     C     $sc2am        div(h)    $sdam         wkper
     C     wkper         mult(h)   100           $sc2pc
      *
      * Percent of Total for Aging Column 3
      *
     C     $sc3am        div(h)    $sdam         wkper
     C     wkper         mult(h)   100           $sc3pc
      *
      * Percent of Total for Aging Column 4
      *
     C     $sc4am        div(h)    $sdam         wkper
     C     wkper         mult(h)   100           $sc4pc
      *
      * Percent of Total for Aging Column 5
      *
     C     $sc5am        div(h)    $sdam         wkper
     C     wkper         mult(h)   100           $sc5pc
      *
      * Percent of Total for Aging Column 5
      *
     C     $sc6am        div(h)    $sdam         wkper
     C     wkper         mult(h)   100           $sc6pc
     C                   endif
      *
      * Write Sales Route Total record
      *
     C                   write     $srec
     C                   clear                   $srec
      *
      * Save control break values
      *
     C                   movel     $taic3        svaic3
     C                   movel     $tr4cd        svr4cd
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------
      * Calcualte Percents for Report Total Line
      *-------------------------------------------------------------------------
      *
     C     $totr         begsr
      *
      * Accumulate Column dollars into Total Dollars for the 'Credit Memo/On Acc
      *
     C                   eval      $rdam = $rc1am + $rc2am + $rc3am + $rc4am +
     C                                     $rc5am + $rc6am
      *
     C                   if        $rdam <> 0
      *
      * Percent of Total for Current Column 1
      *
     C     $rc1am        div(h)    $rdam         wkper
     C     wkper         mult(h)   100           $rc1pc
      *
      * Percent of Total for Column 2
      *
     C     $rc2am        div(h)    $rdam         wkper
     C     wkper         mult(h)   100           $rc2pc
      *
      * Percent of Total for Column 3
      *
     C     $rc3am        div(h)    $rdam         wkper
     C     wkper         mult(h)   100           $rc3pc
      *
      * Percent of Total for Column 3
      *
     C     $rc4am        div(h)    $rdam         wkper
     C     wkper         mult(h)   100           $rc4pc
      *
      * Percent of Total for Column 3
      *
     C     $rc5am        div(h)    $rdam         wkper
     C     wkper         mult(h)   100           $rc5pc
      *
      * Percent of Total for 'OVER' column
      *
     C     $rc6am        div(h)    $rdam         wkper
     C     wkper         mult(h)   100           $rc6pc
     C                   endif
      *
      * Write Report Total record
      *
     C                   write     $rrec
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------
      * Retrieve A/R Aging Control info for the "Age Code"
      *------------------------------------------------------------------
      *
     C     $arctl        begsr
      *
      * Retrieve the AR Aging record for the "age code" passed in.
      *
     C     xxagecode     chain     pmadcpl1                           92
     C                   if        *in92 = *on
     C                   movel     no            procfl
     C                   else
      *
      * Set up field indicating whether to age by Transaction Date or Due Date
      *
     C                   movel     adeust        $reust
      *
      * Set up the column heading values for the 'FROM-TO' aging days in the
      * Report Workfile record.
      *
      * Column 1 is the 'Current' column
      *
      * Column 2 From/To Days
      *
     C                   z-add     1             $r2fr
     C                   z-add     adaedy        $r2to
      *
      * Column 3 From/To Days
      *
     C     $r2to         add       1             $r3fr
     C                   z-add     adafdy        $r3to
      *
      * Column 4 From/To Days
      *
     C     $r3to         add       1             $r4fr
     C                   z-add     adagdy        $r4to
      *
      * Column 5 From/To Days
      *
     C     $r4to         add       1             $r5fr
     C                   z-add     adahdy        $r5to
     C                   endif
      *
      * Column 6 is the 'OVER' column. It is anthing over Column 5.
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------
      * Retrieve Company/Customer info
      *-----------------------------------------------------------------
      *
     C     $compcust     begsr
      *
      * Read company/customer file depending upon selection
      *
     C                   if        xxaic3 <> 0
     C     key0          chain     caeorel1                           92
     C                   else
     C     svanc7        chain     caeorel5                           92
     C                   endif
      *
     C                   if        *in92 = *on
     C                   movel     no            procfl
     C                   else
      *
      * Omit Deleted/Inactive Customers when the user has submitted the report
      * with 'Print Zero Balances' as Yes
      *
     C                   if        xx0bal = yes and
     C                             (eovsst = 'D' or eovsst = 'I')
     C                   movel     no            procfl
     C                   else
      *
      * Check Sales Route
      *
     C                   select
     C                   when      xxr4cd <> *blank and xxr4cd <> eor4cd
     C                   movel     no            procfl
     C                   other
      *
     C                   movel     eor4cd        $cr4cd
     C                   movel     eor4cd        $tr4cd
     C     eor4cd        chain     pdjerel1                           92
     C                   if        *in92 = *off
     C                   movel     jemzna        $cmzna
     C                   endif
      *
      *
      * Set up Customer Credit Contact info
      *     Credit contact name
      *     Credit contact telephone
      *     Credit contact FAX numberR
      *
     C                   movel     eonjna        $cnjna
     C                   movel     eoi0tx        $ci0tx
     C                   movel     eoi1tx        $ci1tx
     C                   endsl
      *
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Format Synon date into CCYYMMDD and MMDDYY formats
      *---------------------------------------------------------------
      *
     C     $synondt      begsr
      *
     C     *cymd         test(d)                 xxcymd                 92
     C                   if        *in92 = *off
     C     *cymd         move      xxcymd        wkisodate
     C     *iso          move      wkisodate     xxccyymmdd
     C     *mdy          move      wkisodate     xxmmddyy
     C                   else
     C                   z-add     0             xxccyymmdd
     C                   z-add     0             xxmmddyy
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C     *entry        plist
     C                   parm                    xxaic3
     C                   parm                    xxdt
     C                   parm                    xxanc7
     C                   parm                    xxbtc7
     C                   parm                    xxr4cd
     C                   parm                    xx0bal
     C                   parm                    xxrpt
     C                   parm                    xxinclcb
     C                   parm                    xxinclrb
     C                   parm                    xxsuffix1
     C                   parm                    xxsuffix2
     C                   parm                    xxsuffix3
     C                   parm                    xxsuffix4
     C                   parm                    xxsuffix5
     C                   parm                    xxagecode
      * Project-O300252-START
     C                   parm                    xxinclnb
      * Project-O300252-END
      *
      *
      * Key lists
      *
     C     key0          klist
     C                   kfld                    xxaic3
     C                   kfld                    svanc7
      *
     C     key1          klist
     C                   kfld                    bcaic3
     C                   kfld                    svanc7
      *
     C     key2          klist
     C                   kfld                    bdaic3
     C                   kfld                    bdcac7
      *
     C     key3          klist
     C                   kfld                    bdconb
     C                   kfld                    bdcest
      *
     C     key4          klist
     C                   kfld                    bdaic3
     C                   kfld                    bdh3dt
      *
     C     key5          klist
     C                   kfld                    bfaic3
     C                   kfld                    bfconb
     C                   kfld                    bfdxnb
      *
      *
      * The user's Cutoff Date (CCYYMMDD) will be used for aging.
      * You must:
      *   1) add century values to the 7,0 SYNON Date
      *   2) Flip the date to MMDDYY format for printing on reports
      *
     C                   z-add     xxdt          xxcymd
     C                   exsr      $synondt
     C                   z-add     xxccyymmdd    wkagdt
     C                   z-add     xxmmddyy      $rcmdy
      *
      *
      * If the user has selected a single company, retrieve company name/number.
      *
     C                   select
     C                   when      xxaic3 = 0
     C                   movel     *blank        $radtx
     C                   z-add     0             $raic3
     C                   other
      *
     C     xxaic3        chain     caabrel3                           92
     C                   if        *in92 = *on
     C                   move      no            procfl
     C                   else
     C                   movel     abadtx        $radtx
     C                   z-add     xxaic3        $raic3
     C                   endif
     C                   endsl
      *
      * Retrieve the A/R Aging Control data for the company
      *
     C                   exsr      $arctl
      *
     C                   endsr
      /EJECT
