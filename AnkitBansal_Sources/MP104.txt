      *****************  RPG PROGRAM HEADING  ***********************
      *
      * ENVIRONMENT:  PORK DIVISION
      * SYSTEM:       AS/400
      * PROGRAM:      MP104
      * DESCRIPTION:  MP2: Maintain Invoices
      * PROGRAMMER:   LeAnne Fedor
      * DATE:         04/01/02
      *
      *
      * FUNCTION: This function is used to maintain an invoice.
      *
      *           The field 'mode' contains the value passed into
      *           this program from the calling program.  The field
      *           'C1MODE' is the screen field that displays the
      *           value of 'mode'.  Mode will be CREATE, REVISE or
      *           DELETE.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/24/02  LeAnne Fedor
      *           Increased all amount fields from 7,2 to 9,2.
      *
      * 19/31/02  LeAnne Fedor
      *           Had to add an input capable 'invoice amount' field in the header.
      *           To make room, shortened the on-screen 'comment' field in the header
      *           from 40 to 30...left it at 40 in the invoice header file.
      *
      * 03/29/11  Barb Gutierrez
      *           Increased qty and rate.  Had to move unit cost down a line on screen
      *           to accomodate the larger field sizes.  Just recompiled rpgle.  E001398.
      *
      * 03/06/14  LeAnne Ramsey  (E2992)
      *           Added Purchaing Center and Accounting Company to P.O.
      *           Header.
      *
      * 03/26/19  Brad Baden     (E14631)
      *           Change "move" to "movel" to C1PCID field.
      *
      * 05/24/21  Danny Nguyen   (S17068)
      *           DBFC on MPP103 file. Unit Cost Per Item 'PDITEMRT' field length changed
      *           from 9.4 to 11.4.
      *           DBFC on MPP104 file. The following field lengths changed from 9.2 to 11.2:
      *             Invoiced Amount 'IHINAM'.
      *             Amount To Apply 'IHTAAM'.
      *             Applied Amount 'IHAPAM'.
      *             Sales Tax Amount 'IHSTAM'.
      *             Shipping/Handling Amount 'IHSHAM'.
      *           DBFC on MPP105 file. Applied Amount 'IDAPAM' field length changed from
      *           9.2 to 11.2.
      *           Recompile only.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fmpd104    cf   e             workstn
     F                                     sfile(mp104s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fmpp102    if   e           k disk
      *  MP2: Purchase order header
      *
      *
     Fmpp103    if   e           k disk
     F                                     infds(dbfeed)
      *  MP2: Purchase order detail
      *
      *
     Fmpp104    uf a e           k disk
      *  MP2: Invoice header
      *
      *
     Fmpj104a   if   e           k disk    rename(ihrec:ihreca)
      *  MP2: Invoice header + P.O. header
      *
      *
     Fmpl105a   if   e           k disk    rename(idrec:idreca) prefix(p1)
      *  MP2: Invoice detail
      *
      *
     Fmpp105    uf a e           k disk
      *  MP2: Invoice detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D revise          c                   'REVISE'
     D create          c                   'CREATE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D norecs          s              1    inz('N')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Parm fields
      *
     D xxposn          s                   like(ihposn)
     D xxinno          s                   like(c1inno)
      *
      *
      * Workfields
      *
     D wkinqt          s                   like(pdtrqt)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkccyymmdd      s              8  0
     D wkcrupdt        s              8  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   select
      * Create
     C                   when      mode = create
     C                   z-add     0             c1mdy
     C                   move      *blank        c1inno
     C                   z-add     0             c1taam
     C                   z-add     0             c1stam
     C                   z-add     0             c1sham
     C                   z-add     0             c1totinam
     C                   z-add     0             c1inam
     C                   z-add     0             c1apam
     C                   z-add     0             c1unam
     C                   move      *blank        c1com
      *
      * Revise
     C                   when      mode = revise
     C     key01         chain(n)  mpp104                             92
     C                   if        *in92 = *off                                 If found
     C                   move      ihinno        c1inno
     C                   z-add     ihinam        c1totinam
     C                   z-add     ihinam        c1inam
     C                   z-add     ihtaam        c1taam
     C                   z-add     ihstam        c1stam
     C                   z-add     ihsham        c1sham
     C                   movel     ihcom         c1com
      *
      * Flip date to mmddyy format
      *
     C     *iso          test(d)                 ihindt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihindt        wkisodate
     C     *mdy          move      wkisodate     c1mdy
     C                   endif                                                  If OK date
     C                   else
      *
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If found
     C                   endsl
      *
      *
     C                   if        mode = delete                                If delete
     C                   exsr      $delete
     C                   eval      routne = exit
     C                   else
     C                   exsr      $clr1
     C                   exsr      $frsh1
     C                   eval      routne = scrn1
     C                   endif                                                  If delete
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set indicators
     C                   exsr      $ind
      *
      * If no errors, subfile to redisplay on page 1.
      *
     C                   if        error = 0
     C                   z-add     1             hdpag1
     C                   endif
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the
      * keywords (SFLDROP, SFLFOLD) to determine whether the user is
      * folded or unfolded and to redisplay the screen in the same mode as
      * when he last saw it.  Indicators 88 and 89 are assigned to the DDS
      * keywords SFLDROP and SFLFOLD.
      *
     C                   setoff                                       8889
     C                   if        fold = '0'
     C                   seton                                        88
     C                   else
     C                   seton                                        89
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     mp104k1
     C                   write     mp104ec
     C                   exfmt     mp104c1
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-accepth
     C                   exsr      $edit1
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
     C                   movel     exit          routne
     C                   endif                                                  If no error
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   exsr      $delete
     C                   movel     exit          routne
      *
     C                   when      *in99 = *on                                  All invoiced
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09200'     mgid(e)
     C                   endif
     C                   movel     scrn1         routne
     C                   other
      *
      * User pressed ENTER
      *
     C                   exsr      $edit1
      *
      * If there are no errors, issue a message telling the user to accept
      * his changes.
      *
     C                   if        error = 0
     C                   add       1             error
     C                   movel     'HS09026'     mgid(e)
     C                   endif
      *
     C                   movel     scrn1         routne
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      *
      * Edit the control record
      *
     C                   exsr      $edc1
      *
      * Edit the subfile if there are no errors in the control record. If there
      * are errors in the control record, you must rewrite any subfile records
      * with the error indicators off.
      *
     C                   if        error = 0
     C                   exsr      $eds1
     C                   else
     C                   exsr      $offin
     C                   endif
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------------
      * Rewrite the subfile records with the indicators off
      *-------------------------------------------------------------------------------------
      *
      * This subroutine keeps the cursor from being in the subfile while the
      * displayed error message is for the Control Record.
      *
     C     $offin        begsr
      *
      * Read/process all changed subfile records.
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do off ind
     C                   readc     mp104s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Seton MDT
     C                   seton                                        85
      *
      * Set off the error indicators in the subfile and reset the
      * indicators.
      *
     C                   exsr      $setof
     C                   exsr      $ind
     C                   update    mp104s1
     C                   endif                                                  If rec read
     C                   enddo                                                  Do off ind
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   mp104s1
     C                   seton                                        83        sflclr
     C                   write     mp104c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Subroutine to refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
     C     xxposn        setll     mpp103
      *
     C                   exsr      $load1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Subroutine to load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Load the subfile with the receipt records for this p.o. that
      * have been posted to JDE.
      *
     C                   z-add     svrrn1        hdrrn1
     C                   setoff                                       82
     C                   dou       *in82 = *on                                  Do fil loop
     C     xxposn        reade     mpp103                                 82
     C                   if        *in82 = *off and pdpofl = yes                If not EOF
      *
     C                   move      no            d1apply
     C                   move      no            d1ovfl
     C                   z-add     0             d1inqt
     C                   z-add     0             d1apam
     C                   move      *blank        d1com
     C                   movel     pditemno      d1itemno
     C                   movel     pditemds      d1itemds
     C                   z-add     pdtrqt        d1trqt
     C                   z-add     pditemrt      d1itemrt
     C                   z-add     0             hdothqt
     C                   z-add     pdrcno        hdrcno
     C                   z-add     pdserno       hdserno
      *
      *  If you are in Create mode, determine if there is any quantity left
      *  to invoice for this transaction quantity.
      *
     C                   if        mode = create
     C                   exsr      $anyleft
     C                   endif
      *
     C                   if        mode = create and wkinqt >= pdtrqt           If don't load
     C                   else
      *
      *  Retrieve the balance quantity and any existing invoice detail quantity.
      *
     C                   exsr      $balqt
      *
     C                   exsr      $setof
     C                   seton                                        85
     C                   add       1             hdrrn1
     C                   write     mp104s1
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If don't load
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do fill loop
      *
     C                   z-add     hdrrn1        svrrn1
      *
      * Calculate the remaining amount to be applied (ie: unapplied amount)
      *
     C     c1taam        sub       c1apam        c1unam
      *
      *
      * If you had no records with any balances, issue a message and set on
      * an indicator to protect fields and force the user out of the function.
      *
     C                   if        hdrrn1 = 0
     C                   seton                                        99
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09200'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Edit the Control Record
      *---------------------------------------------------------------
      *
     C     $edc1         begsr
      *
      * Always validate invoice date
      * 1) invoice number
      * 2) invoice date
      *
     C                   exsr      $inno
     C                   exsr      $indt
      *
      * Calculate invoice amount field that is 'output only'
      *
     C                   z-add     c1taam        c1inam
     C                   add       c1stam        c1inam
     C                   add       c1sham        c1inam
      *
      * If it does not match what the user has keyed into the 'input' invoice amount
      * field, issue an error message.
      *
     C                   if        c1totinam <> c1inam
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09201'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate invoice number
      *---------------------------------------------------------------
      *
      * Validations:
      *  1) Required
      *  3) Cannot already exist for this Purchase Order.
      *
     C     $inno         begsr
      *
     C                   select
     C                   when      c1inno = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
      * Does this invoice already exist for this p.o.
      *
     C                   eval      c1inno = %triml(c1inno)
      *
     C                   if        c1inno <> xxinno                             If nbr changed
     C     key03         chain(n)  mpp104                             92
     C                   if        *in92 = *off
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09183'     mgid(e)
     C                   endif
     C                   else
      *
      * Does this invoice already exist for this vendor
      *
     C     c1inno        setll     mpj104a
     C                   dou       *in91 = *on or *in31 = *on                   Do loop
     C     c1inno        reade     mpj104a                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             c1jdvnno = phjdvnno and
     C                             xxposn   <> phposn
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09189'     mgid(e)
     C                   clear                   mgw
     C                   movea     phpono        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
     C                   endif                                                  If nbr changed
      *
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate invoice date
      *---------------------------------------------------------------
      *
      * Validations:
      *  1) Required
      *  2) Must be a valid date
      *
     C     $indt         begsr
      *
     C                   select
     C                   when      c1mdy = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
      *
     C                   when      c1mdy < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 c1mdy                  92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   endif                                                  If bad date
      *
     C                   endsl
      *
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Edit Changed Subfile Records on Screen 1
      *---------------------------------------------------------------
      *
     C     $eds1         begsr
      *
      * Initialize the following fields in the Control Record:
      * 1) total applied amount
      * 2) unapplied amount
      *
     C                   z-add     0             c1apam
     C                   z-add     0             c1unam
      *
      * Edit all changed subfile records.
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     mp104s1                                80
     C                   if        *in80 = *off                                 If record
      *
     C                   exsr      $setof
     C                   seton                                        85
      *
      * 'Apply flag' must be YES or NO.
      *
     C                   select
     C                   when      d1apply <> yes and d1apply <> no
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09106'     mgid(e)
     C                   exsr      $err1
     C                   endif
      *
      * When the 'Apply' flag is YES,
      *   1)  user must enter invoiced quantity
      *   2)  the 'invoiced quantity' cannot be greater than the balanced quantity
      *   3)  The 'override' flag must be yes/no
      *
     C                   when      d1apply = yes
      *
     C                   if        d1inqt  = 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09185'     mgid(e)
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   if        (hdothqt + d1inqt) > d1trqt
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09188'     mgid(e)
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Override flag
     C                   exsr      $ovfl
      *
      * APPLY flag is NO
     C                   when      d1apply = no
     C                   z-add     0             d1inqt
     C                   z-add     0             d1apam
     C                   move      no            d1ovfl
     C                   move      *blank        d1com
     C                   endsl
      *
      *
      * Add the Applied Amount into the control record total.
      *
     C                   add       d1apam        c1apam
      *
      * Calculate the remaining balance quantity.
      *
     C                   eval      d1balqt = d1trqt - hdothqt - d1inqt
      *
     C                   update    mp104s1
     C                   exsr      $setof
     C                   endif                                                  If record
     C                   enddo                                                  Do process
      *
      * The user must applied some dollars!
      *
     C                   if        c1apam = 0                                   If nothing
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09187'
     C                   endif
     C                   endif                                                  If nothing
      *
      *
      * Make a final comparison of the accumulated 'Total Applied' against
      * the invoiced header 'Amount to Apply'.
      *
     C                   if        c1apam > c1taam                              If over applied
     C                   seton                                        3037
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09184'
     C                   endif
     C                   endif                                                  If over applied
      *
      * Calculate the remaining amount to be applied (ie: unapplied amount)
      * The user's decided: unapplied amount must be zero or it is a terminal error.
      *
     C     c1taam        sub       c1apam        c1unam
      *
     C                   if        c1unam <> 0                                  If some left
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09195'
     C                   endif
     C                   endif                                                  If some left
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Edit Override Flag
      *---------------------------------------------------------------
      *
     C     $ovfl         begsr
      *
      * Override flag must be YES or NO.
      *
     C                   select
     C                   when      d1ovfl <> yes and d1ovfl <> no
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09106'     mgid(e)
     C                   exsr      $err1
     C                   endif
      *
      * When Override flag is YES
      * 1) comment is required
      *
     C                   when      d1ovfl = yes and d1com = *blank
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09196'     mgid(e)
     C                   exsr      $err1
     C                   endif
      *
      * Calculate the 'applied amount' when override is NO.
      *
     C                   when      d1ovfl = no
     C     d1itemrt      mult      d1inqt        d1apam
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Determine if there is any quantity left to invoice
      *---------------------------------------------------------------
      *
     C     $anyleft      begsr
      *
     C                   z-add     0             wkinqt
     C     key04         setll     mpl105a
      *
     C                   dou       *in93 = *on                                  Do loop
     C     key04         reade     mpl105a                                93
     C                   if        *in93 = *off                                 If not EOF
     C                   add       p1idinqt      wkinqt
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------
      * Determine the quantity invoices on a) other invoices and b) this invoice
      *---------------------------------------------------------------------------
      *
     C     $balqt        begsr
      *
     C     key04         setll     mpl105a
      *
     C                   dou       *in93 = *on                                  Do loop
     C     key04         reade     mpl105a                                93
     C                   if        *in93 = *on                                  If no invoices
     C                   else
      *
     C                   select
     C                   when      p1idinno <> xxinno
     C                   add       p1idinqt      hdothqt
      *
     C                   when      p1idinno = xxinno
     C                   move      yes           d1apply
     C                   move      p1idovfl      d1ovfl
     C                   z-add     p1idinqt      d1inqt
     C                   z-add     p1idapam      d1apam
     C                   add       p1idapam      c1apam
     C                   move      p1idcom       d1com
     C                   endsl
     C                   endif                                                  If no invoices
      *
     C                   enddo                                                  Do loop
      *
      * Calculate the remaining balance quantity.
      *
     C                   eval      d1balqt = d1trqt - hdothqt - d1inqt
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process subfile records on Screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Create/update the invoice header record.
      *
     C                   select
     C                   when      mode = create
     C                   exsr      $sethdr
     C                   write     ihrec
      *
     C                   when      mode = revise
     C     key01         chain     mpp104                             92
     C                   if        *in92 = *off
     C                   exsr      $sethdr
     C                   update    ihrec
     C                   endif
     C                   endsl
      *
      * Always delete all invoice detail records. Then, write new records
      * when 'Apply flag' is yes.
      *
     C                   if        error = 0                                    If go ahead
     C                   exsr      $dlt105
     C                   endif                                                  If go ahead
      *
      * Read changed subfile records
      *
     C                   dou       *in80 = *on                                  Do loop
     C                   readc     mp104s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        d1apply = yes
     C                   z-add     xxposn        idposn
     C                   z-add     hdrcno        idrcno
     C                   z-add     hdserno       idserno
     C                   move      c1inno        idinno
     C                   z-add     d1inqt        idinqt
     C                   z-add     d1apam        idapam
     C                   move      d1ovfl        idovfl
     C                   move      d1com         idcom
     C                   write     idrec
     C                   endif
      *
     C                   setoff                                       85
     C                   update    mp104s1
     C                   endif                                                  If rec read
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set up Invoice header fields
      *----------------------------------------------------------------
      *
     C     $sethdr       begsr
      *
     C                   select
     C                   when      mode = create
     C                   z-add     xxposn        ihposn
     C                   move      no            ihpofl
     C                   z-add     wkcrupdt      ihcrdt
     C                   time                    ihcrtm
     C                   move      sdusr         ihcruser
      *
     C                   when      mode = revise
     C                   z-add     wkcrupdt      ihupdt
     C                   time                    ihuptm
     C                   move      sdusr         ihupuser
     C                   endsl
      *
      * For create and revise modes
      *
     C                   move      c1inno        ihinno
     C                   z-add     c1taam        ihtaam
     C                   z-add     c1apam        ihapam
     C                   z-add     c1stam        ihstam
     C                   z-add     c1sham        ihsham
     C                   z-add     c1inam        ihinam
     C                   movel(p)  c1com         ihcom
      *
      * Flip the invoice date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      c1mdy         wkisodate
     C                   move      wkisodate     wkccyymmdd
     C                   z-add     wkccyymmdd    ihindt
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete Invoice Header and Detail records
      *----------------------------------------------------------------
      *
     C     $delete       begsr
      *
     C     key01         chain     mpp104                             92
     C                   if        *in92 = *off and ihpofl = no
     C                   delete    ihrec
     C                   exsr      $dlt105
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete invoice detail records
      *----------------------------------------------------------------
      *
     C     $dlt105       begsr
      *
     C     key01         setll     mpp105
     C                   dou       *in92 = *on
     C     key01         reade     mpp105                                 92
     C                   if        *in92 = *off
     C                   delete    idrec
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Subroutine to set off error indicators in the subfile
      *----------------------------------------------------------------
      *
     C     $setof        begsr
      *
     C                   setoff                                       303435
     C                   setoff                                       363739
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Reset indicators
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
      *  Set up for mode
      *
     C                   select
     C                   when      c1mode = create
     C                   seton                                        61
      *
     C                   when      c1mode = revise
     C                   seton                                        60
      *
     C                   when      c1mode = delete
     C                   seton                                        62
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on screen 1
      *-------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   z-add     hdrrn1        hdpag1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
     C     *entry        plist
     C     c1mode        parm                    mode
     C                   parm                    xxposn
     C     c1inno        parm                    xxinno
      *
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxposn
     C                   kfld                    xxinno
      *
     C     key02         klist
     C                   kfld                    xxposn
     C                   kfld                    xxinno
     C                   kfld                    pdrcno
     C                   kfld                    pdserno
      *
     C     key03         klist
     C                   kfld                    xxposn
     C                   kfld                    c1inno
      *
     C     key04         klist
     C                   kfld                    pdposn
     C                   kfld                    pdrcno
     C                   kfld                    pdserno
      *
      *
      * Retrieve the JDE vendor info and purchase order info associated with
      * the incoming id number.
      *
     C     xxposn        chain     mpp102                             92
     C                   if        *in92 = *off                                 If found
     C                   z-add     phjdvnno      c1jdvnno
     C                   move      phpono        c1pono
     C                   move      phjdvnnm      c1jdvnnm
     C***  E14631  JBB   move      phpcid        c1pcid
     C                   movel     phpcid        c1pcid
     C                   z-add     phacono       c1acono
     C                   endif                                                  If found
      *
      * Save date for record stamp
      *
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkcrupdt
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
