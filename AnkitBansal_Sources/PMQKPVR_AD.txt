// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMQKPVR
// ?Date: 14.08.2025 Time: 03:43:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?OM91553 - Eric L: get the default per the plant/company number and use for
//?                  the default instead of the B100 always. (per RMC)
EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Name);
PARAMETER(PAR.System_Value_Alpha);
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


//?USER: Load screen

EXECUTE FUNCTION(RTV Last HPB Batch #   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1853160;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Batch Number 5.0      USR = CON.*ZERO
 PAR.Batch_Number_5_0_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Batch Number 5.0      USR = DB1.Next HPB Batch Number
 PAR.Batch_Number_5_0_USR = DB1.Next_HPB_Batch_Number;

}


// LCL.Record Found USR = CND.Record Found
LCL.Record_Found_USR = 'Y';

//?Loop and increment until we find an available Batch #
// DOW LCL.Record Found USR is Record Found
DOW LCL.Record_Found_USR = 'Y';

// LCL.Count USR = CON.1 + LCL.Count USR
LCL.Count_USR = 1 + LCL.Count_USR;

EXECUTE FUNCTION(RTV Check for Batch #  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853166;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.COA_ULSD_Company_#);
PARAMETER(LCL.COA_Batch_Number);

CASE;

// IF PGM.*Return code is COA Batch Header       NF
IF PGM.*Return_code = 'USR3803';

// LCL.Record Found USR = CND.Record Not Found
LCL.Record_Found_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.COA Batch Number = LCL.COA Batch Number + CON.1
LCL.COA_Batch_Number = LCL.COA_Batch_Number + 1;

CASE;

// IF LCL.COA Batch Number is 99999
IF LCL.COA_Batch_Number = 99999;

// LCL.COA Batch Number = CON.1
LCL.COA_Batch_Number = 1;

ENDIF;

ENDIF;

//?Avoid looping by skipping out after 99999 reads
CASE;

// IF LCL.Count USR is 99999
IF LCL.Count_USR = 99999;

// LCL.Record Found USR = CND.Record Not Found
LCL.Record_Found_USR = 'N';

// Send error message - 'All batch numbers have been used for the COA Batch Header - call support.'
ERROR(USR3827);

ENDIF;

ENDDO;

// DTL.COA Batch Number = LCL.COA Batch Number
DTL.COA_Batch_Number = LCL.COA_Batch_Number;

//?default
EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2174025;
PARAMETER(DTL.Company_Number);
PARAMETER('DFTFUEL');
PARAMETER(NLL.Description);
PARAMETER(NLL.System_Value_Type);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(NLL.System_Value_Numeric);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

//?Prompt on warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank;

//?different select
// Call program SEL AcctCo/Whse w/prd  SR.
CALL PROGRAM(SEL AcctCo/Whse w/prd  SR) ('PUW3SRR');
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Validate warehouse
CASE;

// IF DTL.COA Active Whse/Tank is Warehouse Code not Blank
IF DTL.COA_Active_Whse_Tank <> *BLANK;

EXECUTE FUNCTION(RTV Bio-d Code for Whs RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1849761;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(LCL.Description_USR);
PARAMETER(DTL.COA_Active_Whse_Tank);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA Bio-diesel Fuel Code EQ PAR.COA Bio-diesel Fuel Code
 IF DB1.COA_Bio_diesel_Fuel_Code = PAR.COA_Bio_diesel_Fuel_Code;

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 CASE;

 // IF DB1.COA Active Whse/Tank 1 EQ PAR.COA Active Whse/Tank 1
 IF DB1.COA_Active_Whse_Tank_1 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 2 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_2 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 3 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_3 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 4 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_4 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 5 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_5 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 6 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_6 = PAR.COA_Active_Whse_Tank_1;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Error if Warehouse not on COA Prop Def Hdr
CASE;

// IF LCL.Description USR is equal to blank
IF LCL.Description_USR = *BLANK;

// Send error message - 'Whse/Tank not on a COA Property Header record.'
ERROR(USR3814);
MSGPARM(LCL.COA_Active_Whse_Tank);

ENDIF;

EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER('O');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


//?Error if Warehouse is 'Entered' or 'Open' on another batch
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'This Warehouse is already open for shipping on batch # &1.'
ERROR(USR3815);
MSGPARM(DTL.COA_Batch_Number);
MSGPARM(DTL.COA_Active_Whse_Tank);

//?Error if Warehouse is 'Entered' or 'Open' on another batch
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER('E');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'This Warehouse is already in an 'Entered' status on batch # &1.'
ERROR(USR3828);
MSGPARM(DTL.COA_Batch_Number);
MSGPARM(DTL.COA_Active_Whse_Tank);

ENDIF;

ENDIF;

ENDIF;

//?USER: User defined action

// Call program EDT COA Batch Header   E1.
CALL PROGRAM(EDT COA Batch Header   E1) ('PMN7E1R');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);

