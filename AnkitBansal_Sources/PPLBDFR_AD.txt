// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPLBDFR
// ?Date: 14.08.2025 Time: 03:41:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modificaitons and Comments
DO;

//?E3387 JJH 09/10/14 - Display Shipping Method
ENDDO;

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

//?USER: Initialize subfile control

//?E3387 JJH 09/10/14 - Display Shipping Method from A/R Claim
EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(PAR.Claim_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Claim Record       RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1535328;
PARAMETER(CTL.Claim_Number);
PARAMETER(WRK.Salesperson_to_Rvw_Claim);
PARAMETER(CTL.Claim_Company_Number);
PARAMETER(CTL.Claim_Order_Number);
PARAMETER(CTL.Claim_Ship_to_Customer);
PARAMETER(CTL.Claim_Customer_Name);
PARAMETER(WRK.Claim_Type);
PARAMETER(PAR.Claim_Status);
PARAMETER(WRK.Claim_Amount);
PARAMETER(WRK.Claim_Net_Loss);
PARAMETER(WRK.Claim_Approved_Amount);
PARAMETER(WRK.Claim_Contact_Name);
PARAMETER(WRK.Product_Inspection_Avail);
PARAMETER(WRK.Product_Inspection_Desc);
PARAMETER(WRK.Rep_Inspection_Required);
PARAMETER(WRK.Rep_Inspection_Req_Desc);
PARAMETER(WRK.Lab_Fee_Involved);
PARAMETER(WRK.Lab_Fee);
PARAMETER(WRK.Driver_Name);
PARAMETER(WRK.Lab_Name);
PARAMETER(WRK.Resolve_Claim_by_Date);
PARAMETER(WRK.Actual_Delivery_Date);
PARAMETER(WRK.Claim_Called_in_by);
PARAMETER(WRK.Claim_Called_in_by_Desc);
PARAMETER(WRK.Claim_Called_in_by_Date);
PARAMETER(WRK.Claim_Entry_Date);
PARAMETER(WRK.Claim_Entry_Time);
PARAMETER(WRK.Claim_Entry_User);
PARAMETER(WRK.Resale_Ship_to_Customer);
PARAMETER(WRK.Resale_Purchase_Order_Nbr);
PARAMETER(WRK.Sales_Approved_Date);
PARAMETER(WRK.Sales_Approved_Time);
PARAMETER(WRK.Sales_Approved_User);
PARAMETER(WRK.Approved_Denied_Date);
PARAMETER(WRK.Approved_Denied_Time);
PARAMETER(WRK.Approved_Denied_User);
PARAMETER(WRK.Memo_Created);
PARAMETER(WRK.Memo_Created_Date);
PARAMETER(WRK.Memo_Created_Time);
PARAMETER(WRK.Memo_Created_User);
PARAMETER(WRK.Claim_Resolution_Explan);
PARAMETER(CTL.AC_Shipping_Method);
PARAMETER(WRK.Record_Status);
PARAMETER(WRK.Create_Date);
PARAMETER(WRK.Create_Time);
PARAMETER(WRK.Create_User);
PARAMETER(WRK.Create_Program);
PARAMETER(WRK.Change_Date);
PARAMETER(WRK.Change_Time);
PARAMETER(WRK.Change_User);
PARAMETER(WRK.Change_Program);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Expense Desc      RT) TYPE(RTVOBJ) FILE(PPA0REP)           AC1728306;
PARAMETER(RCD.Expense_Code);
PARAMETER(RCD.Expense_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?CALC: Subfile control function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(PAR.Claim_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// PAR.Expense Code = CTL.Expense Code
PAR.Expense_Code = CTL.Expense_Code;

// PAR.Sequence Number = CON.*ZERO
PAR.Sequence_Number = *ZERO;

// PAR.Clm Program USR = CND.Edit Expense
PAR.Clm_Program_USR = 'EEX';

RETURN;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Expense Code
AND PGM.*Cursor_field = CTL.Expense_Code;

// Call program Sel A/R Expense        SR.
CALL PROGRAM(Sel A/R Expense        SR) ('PPKTSRR');
PARAMETER(CTL.Expense_Code);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.TFS Process Status is Processed
IF RCD.TFS_Process_Status = 'P';

CASE;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

// PAR.Clm Program USR = CND.Edit Exp/Comment
PAR.Clm_Program_USR = 'EEC';

// PAR.Claim Number = CTL.Claim Number
PAR.Claim_Number = CTL.Claim_Number;

// PAR.Sequence Number = RCD.Sequence Number
PAR.Sequence_Number = RCD.Sequence_Number;

// PAR.Expense Code = RCD.Expense Code
PAR.Expense_Code = RCD.Expense_Code;

RETURN;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// OR RCD.*SFLSEL is *Delete
OR RCD.*SFLSEL = '4'/'4';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// PAR.Clm Program USR = CND.Edit Expense
PAR.Clm_Program_USR = 'EEX';

// PAR.Claim Number = CTL.Claim Number
PAR.Claim_Number = CTL.Claim_Number;

// PAR.Sequence Number = RCD.Sequence Number
PAR.Sequence_Number = RCD.Sequence_Number;

// PAR.Expense Code = RCD.Expense Code
PAR.Expense_Code = RCD.Expense_Code;

RETURN;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

// PAR.Clm Program USR = CND.Edit Exp/Comment
PAR.Clm_Program_USR = 'EEC';

// PAR.Claim Number = CTL.Claim Number
PAR.Claim_Number = CTL.Claim_Number;

// PAR.Sequence Number = RCD.Sequence Number
PAR.Sequence_Number = RCD.Sequence_Number;

// PAR.Expense Code = RCD.Expense Code
PAR.Expense_Code = RCD.Expense_Code;

RETURN;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Vry Expense Comment   RT) TYPE(RTVOBJ) FILE(PPA2CPP)           AC1728502;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Expense_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(Del A/R Claims ExpSA  DO) TYPE(DLTOBJ) FILE(PPA1CPP)           AC1877456;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Expense_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Expense Deleted
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Expense Deleted');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Exp Cmmnts SB Deleted 1st'
ERROR(USR3464);

ENDIF;

ENDIF;

//?USER: Process command keys

//?F7=BACK
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

// PAR.Clm Program USR = CND.Work With Resale
PAR.Clm_Program_USR = 'WWR';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

