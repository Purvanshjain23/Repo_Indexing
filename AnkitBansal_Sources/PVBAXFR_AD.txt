// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVBAXFR
// ?Date: 14.08.2025 Time: 03:51:50
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?NOTE: The following JS calls this process every 1 hr interval.
//?      From 5AM to 11:59PM.
//?      TEST: WIMUPIVTST
//?      PROD: WIMUPIVRET
//?      12AM - 4AM will allow JS 'WIMEDIRST' to process any records
//?      within that time frame hence we will cancel those records
//?      here.
//?      Carlisle WIM Restoration runs daily @2:45PM via Stored
//?      Procedure. (Bruce P. team)
//?Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

//?Selects Only 'Not Processed' Records.
EXECUTE FUNCTION(Exc Retry Upd WIM Inv  RT) TYPE(RTVOBJ) FILE(PVADCPP)          AC2217868;
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
 PARAMETER('WIMAPIFLBS');
 PARAMETER(LCL.Email_Address_f_Bus_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Data Libraries     RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1165753;
 PARAMETER('DTALIB');
 PARAMETER(LCL.Library_List_Code);
 PARAMETER(NLL.@Library_List_Code);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.System Value Code is Data File Library
  IF DB1.System_Value_Code = 'DTALIB';

  // PAR.Library List Code = DB1.System Value Alpha
  PAR.Library_List_Code = DB1.System_Value_Alpha;

  // IF DB1.System Value Code is History File Library
  IF DB1.System_Value_Code = 'HISLIB';

  // PAR.@Library List Code = DB1.System Value Alpha
  PAR.@Library_List_Code = DB1.System_Value_Alpha;

  QUIT;

  ENDIF;

 }

 //?1/10/24 DN SR08283-Changed to use System Values 'APIWAITTM2' instead.
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
 PARAMETER('APIWAITTM2');
 PARAMETER(LCL.API_Wait_Time_U);
 {
  //?USER: Process Data record

  // PAR.System Value Numeric = DB1.System Value Numeric
  PAR.System_Value_Numeric = DB1.System_Value_Numeric;

  QUIT;

 }

 // LCL.Successful Completion USR = CND.Blank
 LCL.Successful_Completion_USR = *BLANK;

 // LCL.API Call Failed USR = CND.Not Entered
 LCL.API_Call_Failed_USR = *BLANK;

 //?Format Email Subject Line.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Email Subject 2 USR = CONCAT(CON.WIM API Call was Reran fo,CON.r Failed Inv Trans,CON.*ZERO)
 LCL.Email_Subject_2_USR = 'WIM API Call was Reran fo' + 'r Failed Inv Trans' (*ZERO);

 //?If Not PROD Then Append 'TEST' to Email Subject Line.
 CASE;

 // IF LCL.Library List Code is Not PRKFLIB
 IF LCL.Library_List_Code <> 'PRKFLIB';

 // LCL.Email Subject 2 USR = CONCAT(LCL.Email Subject 2 USR,CON.- TEST,CON.1)
 LCL.Email_Subject_2_USR = LCL.Email_Subject_2_USR + '- TEST' (1);

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 // LCL.Cancelled Flag USR = CND.No
 LCL.Cancelled_Flag_USR = 'N';

 //?Cancel Transactions Between Midnight thru 4AM for Restoration Whse.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Format Time.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date Timestamp Txt U = CVTVAR(DB1.Create Date Timestamp)
 LCL.Date_Timestamp_Txt_U = CVTVAR(DB1.Create_Date_Timestamp);

 // LCL.Hour 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.12,CON.2)
 LCL.Hour_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:12:2);

 // LCL.Minute 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.15,CON.2)
 LCL.Minute_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:15:2);

 // LCL.Second 2A USR = SUBSTRING(LCL.Date Timestamp Txt U,CON.18,CON.2)
 LCL.Second_2A_USR = SUBSTRING(LCL.Date_Timestamp_Txt_U:18:2);

 // LCL.Time Alpha usr 6 = CONCAT(LCL.Hour 2A USR,LCL.Minute 2A USR,CON.*ZERO)
 LCL.Time_Alpha_usr_6 = LCL.Hour_2A_USR + LCL.Minute_2A_USR (*ZERO);

 // LCL.Time Alpha usr 6 = CONCAT(LCL.Time Alpha usr 6,LCL.Second 2A USR,CON.*ZERO)
 LCL.Time_Alpha_usr_6 = LCL.Time_Alpha_usr_6 + LCL.Second_2A_USR (*ZERO);

 // LCL.USR From Time 6.0 = CVTVAR(LCL.Time Alpha usr 6)
 LCL.USR_From_Time_6_0 = CVTVAR(LCL.Time_Alpha_usr_6);

 ENDIF;

 //?Make sure Warehouse is 'Restoration' Enabled.
 CASE;

 // IF LCL.USR From Time 6.0 is Between Midnight & 4AM
 IF LCL.USR_From_Time_6_0 >= 000000;
 AND LCL.USR_From_Time_6_0 <= 040000;

 //?If Carlisle or EDI Warehouse is setup for Restoration then
 //?we want to cancel this transaction since the WIM Restoration
 //?job will process it at 3:30AM daily.
 //?Verify if Carlisle Warehouse is Setup for 846 Restoration.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Live w/Carl,AutoRstRT) TYPE(RTVOBJ) FILE(CAADREP)          AC2219086;
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_Auto_Inv_Restoration);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check Carlisle Whse Else EDI Whse.
 CASE;

 // IF LCL.WHS Live with Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS Auto Inv Restoration is Yes
 AND LCL.WHS_Auto_Inv_Restoration = 'Y';

 //?Verify Ship To Warehouse if 'Transfer' Inventory Transaction.
 CASE;

 // IF DB1.WIM Inventory Trans ID is Transfer
 IF DB1.WIM_Inventory_Trans_ID = 'T';

 EXECUTE FUNCTION(Rtv Live w/Carl,AutoRstRT) TYPE(RTVOBJ) FILE(CAADREP)          AC2219086;
 PARAMETER(DB1.Ship_To_Warehouse);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_Auto_Inv_Restoration);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Live with Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.WHS Auto Inv Restoration is Yes
 AND LCL.WHS_Auto_Inv_Restoration = 'Y';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('X');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 // LCL.Cancelled Flag USR = CND.Yes
 LCL.Cancelled_Flag_USR = 'Y';

 ENDIF;

 //?Verify Ship To Warehouse if 'Transfer' Inventory Transaction.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('X');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 // LCL.Cancelled Flag USR = CND.Yes
 LCL.Cancelled_Flag_USR = 'Y';

 ENDIF;

 //?Check Carlisle Whse Else EDI Whse.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?ELSE Verify if EDI Warehouse is Setup for 846 Restoration.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Whs 846 Active    RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2160742;
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER('WHSRST');
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Record Status is Active
 IF LCL.Record_Status = 'A';

 //?Verify Ship To Warehouse if 'Transfer' Inventory Transaction.
 CASE;

 // IF DB1.WIM Inventory Trans ID is Transfer
 IF DB1.WIM_Inventory_Trans_ID = 'T';

 EXECUTE FUNCTION(Rtv Whs 846 Active    RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2160742;
 PARAMETER(DB1.Ship_To_Warehouse);
 PARAMETER('WHSRST');
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Record Status is Active
 IF LCL.Record_Status = 'A';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('X');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 // LCL.Cancelled Flag USR = CND.Yes
 LCL.Cancelled_Flag_USR = 'Y';

 ENDIF;

 //?Verify Ship To Warehouse if 'Transfer' Inventory Transaction.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('X');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 // LCL.Cancelled Flag USR = CND.Yes
 LCL.Cancelled_Flag_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If Transaction Not Cancelled Then Continue.
 CASE;

 // IF LCL.Cancelled Flag USR is No
 IF LCL.Cancelled_Flag_USR = 'N';

 // LCL.API EccResult-MsgId U = CON.*BLANK
 LCL.API_EccResult_MsgId_U = *BLANK;

 // LCL.API Request Key U = CON.*BLANK
 LCL.API_Request_Key_U = *BLANK;

 //?Retry to Update WIM Inventory Transaction Tables.
 //?**************************************************************************
 //?Call API Wrapper Program for wim.ordershipping.inventory API.
 //?1/6/24 DN SR08283-Added 'API Request Key U' & 'API Mode U' Parms.
 // Call program API WIM Inv Shipping   UP.
 CALL PROGRAM(API WIM Inv Shipping   UP) ('PVAYUPR');
 PARAMETER(LCL.API_Wait_Time_U);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(DB1.WIM_Inventory_Trans_ID);
 PARAMETER(DB1.WIM_Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Transaction_Source);
 PARAMETER(DB1.Transaction_Description);
 PARAMETER(DB1.Transaction_Reason_Code);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Shift_Number);
 PARAMETER(DB1.Ship_To_Warehouse);
 PARAMETER(DB1.Transaction_Weight);
 PARAMETER(DB1.Transaction_Quantity);
 PARAMETER(DB1.Unship_Flag);
 PARAMETER(DB1.Inter_Plant_Transfer);
 PARAMETER(LCL.API_EccResult_MsgId_U);
 PARAMETER(NLL.API_EccResult_MsgDesc_U);
 PARAMETER(LCL.API_Request_Key_U);
 PARAMETER(*SNDRCV);

 //?**************************************************************************
 //?API Call Successful? Yes, Update Record Processed.
 CASE;

 // IF LCL.API EccResult-MsgId U is Success
 IF LCL.API_EccResult_MsgId_U = 'ECC0000';

 // LCL.Successful Completion USR = CND.Yes
 LCL.Successful_Completion_USR = 'Y';

 EXECUTE FUNCTION(Chg Record Processed  CH) TYPE(CHGOBJ) FILE(PVADCPP)           AC2219094;
 PARAMETER(DB1.Surrogate_Nbr);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

 //?API Call Successful? Yes, Update Record Processed.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?12/22/23 DN SR07943-Added 'API EccResult-MsgId U is Entered' Cond.
 CASE;

 // IF LCL.API EccResult-MsgId U is Entered
 IF LCL.API_EccResult_MsgId_U <> *BLANK;

 // LCL.API Call Failed USR = CND.Yes
 LCL.API_Call_Failed_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?12/21/23 DN SR07943-Added 'Partial Completion USR is Yes' c3 Cond.
 //?Send Email to Business Based on Completion.
 CASE;

 // IF LCL.API Call Failed USR is Yes
 IF ( LCL.API_Call_Failed_USR = 'Y';

 // AND LCL.Successful Completion USR is Yes
 AND LCL.Successful_Completion_USR = 'Y' );

 // OR LCL.API Call Failed USR is Yes
 OR LCL.API_Call_Failed_USR = 'Y';

 //?Format/Send Email Message.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Email Message 2 USR = CONCAT(CON.The Job Schedule for the,CON.WIM Outbound API (wim.ord,CON.
 LCL.Email_Message_2_USR = 'The Job Schedule for the' + 'WIM Outbound API (wim.ord' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.ershipping.inventory),CON.*ZERO)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'ershipping.inventory)' (*ZERO);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.call was reran and,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'call was reran and' (1);

 //?Both Failed & Completed Transactions ELSE Failed API.
 CASE;

 // IF LCL.API Call Failed USR is Yes
 IF LCL.API_Call_Failed_USR = 'Y';

 // AND LCL.Successful Completion USR is Yes
 AND LCL.Successful_Completion_USR = 'Y';

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.was partially successful,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'was partially successful' (1);

 //?Both Failed & Completed Transactions ELSE Failed API.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.was not successful,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'was not successful' (1);

 ENDIF;

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.due to JS application,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'due to JS application' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.connectivity issue. It,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'connectivity issue. It' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.will retry to run again,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'will retry to run again' (1);

 // LCL.Email Message 2 USR = CONCAT(LCL.Email Message 2 USR,CON.in the next hour.,CON.1)
 LCL.Email_Message_2_USR = LCL.Email_Message_2_USR + 'in the next hour.' (1);

 // Call program Exc ESNDMAIL Generic2 CL.
 CALL PROGRAM(Exc ESNDMAIL Generic2 CL) ('PUX2UPC');
 PARAMETER(LCL.Email_Address_f_Bus_USR);
 PARAMETER(LCL.Email_Subject_2_USR);
 PARAMETER(LCL.Email_Message_2_USR);

 ENDIF;

 //?Send Email to Business Based on Completion.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?12/21/23 DN SR07943-Commented Out, Not Needed. Per Lee C.
 ENDIF;

}


