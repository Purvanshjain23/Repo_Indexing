// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVZPVR
// ?Date: 14.08.2025 Time: 02:53:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

//?USER: Load screen

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

// DTL.SR Type = CND.External
DTL.SR_Type = 'E';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_Name);
PARAMETER(LCL.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// DTL.SR Description = Condition name of DTL.SR Type
DTL.SR_Description = RTVCND(DTL.SR_Type);

//?USER: Validate fields

// DTL.SR Description = Condition name of DTL.SR Type
DTL.SR_Description = RTVCND(DTL.SR_Type);

//?VAL:  Producer Code
CASE;

// IF DTL.PD Producer Code is Entered
IF DTL.PD_Producer_Code <> *BLANK;

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.Producer Name         DRV is Blank
IF DTL.Producer_Name_DRV = *BLANK;

// Send error message - 'Producer not found.'
ERROR(PRK1045);
MSGPARM(DTL.PD_Producer_Code);

ENDIF;

ENDIF;

//?VAL:  Scale Weight Date
CASE;

// IF DTL.BOLW Scale Weight Date GT JOB.*Job date
IF DTL.BOLW_Scale_Weight_Date > JOB.*Job_date;

// Send error message - '&1 must be less than or equal to &2'
ERROR(PRK0635);
MSGPARM(DTL.BOLW_Scale_Weight_Date);
MSGPARM(JOB.*Job_date);

ENDIF;

//?DFT:  Date To
CASE;

// IF DTL.Date To   USR is Not Entered
IF DTL.Date_To_USR = *ZERO;

// OR DTL.Date To   USR LT DTL.BOLW Scale Weight Date
OR DTL.Date_To_USR < DTL.BOLW_Scale_Weight_Date;

// DTL.Date To   USR = DTL.BOLW Scale Weight Date
DTL.Date_To_USR = DTL.BOLW_Scale_Weight_Date;

ENDIF;

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Print Int Truckscale Log');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_Application_Code);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(PRK0812);
PARAMETER('PRTTRKLOG');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD *JOBD *JOBD);
PARAMETER(*NO);

// Call program Prt Truck Scale Wgts  UP.
SBMJOB;
CALL PROGRAM(Prt Truck Scale Wgts  UP) ('PKV0UPC');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.BOLW_Scale_Weight_Date);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.SR_Type);
PARAMETER(DTL.EMail_Address);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
SBMJOBEND;

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(PRK0813 *INFO);
MSGPARM('PRTTRKLOG');
MSGPARM(PAR.PRT_Night_Queue);

ENDIF;

