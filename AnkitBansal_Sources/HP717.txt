      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP717
      * TITLE:       VIEW LAST UPDATE INFORMATION FOR MOVEMENTS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     11/04/99
      *
      * FUNCTION: THIS VIEW PROGRAM DISPLAYS RECORDS FROM THE MOVEMENT
      *           EVENTS FILE.
      *           IT IS CALLED FROM A MENU.
      *
      *           POSITIONERS:  MOVEMENT NUMBER
      *           SELECTORS:    MOVEMENT TYPE
      *                         UPDATE DATE
      *                         UPDATE USER
      *
      *           IT DOES HAVE F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD717    CF   E             WORKSTN
     F                                     SFILE(HP717S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
      *
     Fhsp001    if   e           k disk
      *    Users
      *
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
      *
     FHSL058F   IF   E           K DISK
     F                                     INFDS(DBFEED)
      *  MOVEMENT EVENTS
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
      *
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
     D                 DS
     D  DUMMYD                 1      1
      *  THE PRECEDING DUMMY DATA STRUCTURE IS ONLY TO KEEP THE I-SPEC
      *  INFO FROM RUNNING OVER INTO THE 'CALC SPECS' ON THE COMPILE
      *  LISTING.  IT SERVES NO OTHER PURPOSE AND CAN BE DELETED
      *  AT ANY TIME!!!
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
     C     TERMFL        IFEQ      NO
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
     C                   ENDIF
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * IF THE USER FAILED THE INITIAL SECURITY CHECKS, SETON 99
      * TO PROTECT INPUT FIELDS AND INVALIDATE FUNCTION KEYS.
      *
     C     TERMFL        IFEQ      YES
     C                   SETON                                        99
     C                   ENDIF
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * THIS SUBFILE HAS FOLD/UNFOLD CAPABILITIES.  THE DDS USES THE
      * KEYWORDS (SFLDROP, SFLFOLD) TO DETERMINE WHETHER THE
      * USER IS FOLDED OR UNFOLDED AND TO REDISPLAY THE SCREEN IN THE
      * SAME MODE AS WHEN HE LAST SAW IT.  INDICATORS 88 AND 89 ARE
      * ASSIGNED IN THE DDS TO SFLDROP AND SFLFOLD.
      *
     C                   SETOFF                                       8889
     C     FOLD          IFEQ      '0'
     C                   SETON                                        88             SFLDROP
     C                   ELSE
     C                   SETON                                        89             SFLFOLD
     C                   ENDIF
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP717K1
     C                   WRITE     HP717EC
     C                   EXFMT     HP717C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * SAVE THE VALUE OF THE LOWEST SUBFILE RRN ON THE SCREEN FOR
      * LATER REPOSITIONING THE SUBFILE
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES
      * AND PROGRAM MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY, SET THE RETURN CODE ACCORDING TO THE FUNCTION
      * KEY TAKEN BY THE USER, SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C     TERMFL        OREQ      YES
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
      *
     C     SVMVSN        IFNE      C1MVSN
     C     SVMTCD        ORNE      C1MTCD
     C     SVUPDTMDY     ORNE      C1UPDTMDY
     C     SVUSCD        ORNE      C1USCD
     C                   EXSR      $CHKSV
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     EXIT          ROUTNE
      *
      * REPOSITION THE SUBFILE IF THE USER HAS CHANGED ANY OF THE
      * POSITIONERS OR SELECTORS IN THE CONTROL RECORD.
      *
     C     SVMVSN        WHENNE    C1MVSN                                       WH POSITION
     C     SVMTCD        ORNE      C1MTCD
     C     SVUPDTMDY     ORNE      C1UPDTMDY
     C     SVUSCD        ORNE      C1USCD
     C                   EXSR      $CHKSV
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER. (NOTE: WE TYPICALLY EXIT
      * FROM A 'VIEW' PROGRAM WHEN THE USER PRESSES ENTER. BUT,
      * IN THIS VIEW THERE ARE SELECTORS. SO, LEAVE THE USER ON
      * THE SCREEN SO THAT HE CAN ENTER SELECTORS.)
      *
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      *----------------------------------------------------------------
      * $CHKSV - SAVE THE CONTROL RECORD POSITIONERS/SELECTORS
      *----------------------------------------------------------------
      *
     C     $CHKSV        BEGSR
      *
     C                   MOVEL     NO            RESET
     C                   MOVEL     SET1          ROUTNE
      *
      *
      * IF THE 'DELETED DATE' SELECTOR HAS CHANGED,
      * FLIP IT TO THE CCYYMMDD FORMAT NEEDED FOR DATA
      * COMPARISON FOR RETRIEVAL.
      *
     C     SVUPDTMDY     IFNE      C1UPDTMDY
     C                   z-add     c1UPDTMDY     pfrm8
     C                   exsr      $date
     C                   if        prtrn = *blank
     C                   z-add     pto8          wkuymd
     C                   else
     C                   z-add     0             wkuymd
     C                   endif
     C                   ENDIF
      *
     C                   Z-ADD     C1MVSN        SVMVSN
     C                   MOVEL     C1MTCD        SVMTCD
     C                   Z-ADD     C1UPDTMDY     SVUPDTMDY
     C                   MOVEL     C1USCD        SVUSCD
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP717S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP717C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
     C                   if        c1mvsn = 0
     C     *hival        setll     hsl058f
     C                   else
     C     c1mvsn        setll     hsl058f
     C                   endif
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS.
      * THE NUMBER WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      *
     C                   Z-ADD     0             COUNT             2 0
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
     C                   READ      hsl058f                                82
     C                   if        *in82 = *off and memvsn <> dfmvsn            IF READ
      *
      * ONLY INCLUDE RECORDS THAT MATCH THE USER'S SELECTORS
      *
     C     C1MTCD        IFNE      *BLANK                                        IF TYPE
     C     C1MTCD        ANDNE     MEMTCD
     C                   ELSE
      *
     C     C1UPDTMDY     IFNE      0                                            IF DATE
     C     WKUYMD        ANDNE     MEUPDT
     C                   ELSE
      *
     C     C1USCD        IFNE      *BLANK                                       IF USER
     C     C1USCD        ANDNE     MEUSCD
     C                   ELSE
      *
     C                   Z-ADD     MEMVSN        DFMVSN
     C                   MOVEL     MEMTCD        DFMTCD
     C                   MOVEL     MEUPTM        DFUPTM
     C                   MOVEL     MEUSCD        DFUSCD
     C                   MOVEL     MEPGM         DFPGM
      *
      *
      * FLIP UPDATE DATE TO MMDDYY FORMAT
      *
     C                   Z-ADD     MEUPDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFUPDTMDY
      *
      * Retrieve user name
      *
     C     dfuscd        chain     hsp001                             92
     C                   if        *in92 = *off                                 If not found
     C                   movel(p)  auusnm        dfusnm
     C                   else
     C                   movel(p)  'Unknown'     dfusnm
     C                   endif
      *
      * Retrieve update function description
      *
     C     dfpgm         chain     hsp002                             92
     C                   if        *in92 = *off                                 If not found
     C                   movel(p)  fnfnds        dffnds
     C                   else
     C                   movel(p)  'Unknown'     dffnds
     C                   endif
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   WRITE     HP717S1
     C                   SETON                                        81
      *
      * FOR POSITIONING, PLACE THE SUBFILE RELATIVE RECORD NUMBER INTO
      * THE SFLRCDNBR FIELD (HDPAG1)
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDIF                                                  IF USER
     C                   ENDIF                                                  IF DATE
     C                   ENDIF                                                  IF TYPE
     C                   ENDIF                                                  IF READ
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD MESSAGE 'NO DATA TO DISPLAY'.
      *
     C     HDRRN1        IFEQ      0
     C                   MOVEL     YES           NORECS
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
     C                   MOVEL     NO            NORECS
     C                   ENDIF
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $F4S1 - F4 PROMPT ON SCREEN 1                                    *
      *---------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * IF MOVEMENT TYPE
      *
     C     FLD           WHENEQ    'C1MTCD'
     C                   CALL      'HP561'
     C                   PARM      *BLANK        XXMTCD
     C                   PARM      *BLANK        XXMTDS
     C                   SETON                                        51
     C     XXMTCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXMTCD        C1MTCD
     C                   ENDIF                                                  IF SELECTED
      *
      *
      * IF USER CODE
      *
     C     FLD           WHENEQ    'C1USCD'
     C                   CALL      'HP589'
     C                   PARM      *BLANK        XXUSCD
     C                   PARM      *BLANK        XXUSNM
     C                   SETON                                        55
     C     XXUSCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXUSCD        C1USCD
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR                                        013
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $TOMDY - FLIP DATE FROM CCYYMMDD TO MMDDYY
      *---------------------------------------------------------------
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      *----------------------------------------------------------------
      *
     C     $DATE         BEGSR
      *
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'MDY '        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
      *
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $SEC   - CALL SECURITY PROGRAM
      *---------------------------------------------------------------
      *
     C     $SEC          BEGSR
      *
      * SETUP THE FIELDS TO SEND INTO THE SECURITY PROGRAM
      *
     C                   MOVEL     WKFNCD        INFNCD                         PGM NAME
     C                   MOVEL     NO            TERMFL            1            TERMINAL FLG
      *
     C                   CALL      'HPSEC  '
      **** IN
     C                   PARM                    MGID                           MSGID ARRAY
     C                   PARM                    MGDT                           MSGDTA DATA
     C                   PARM                    ERROR                          # OF ERRORS
     C                   PARM                    INFNCD           10            FUNC CODE
     C                   PARM                    INBOBO            5            BO CODE
     C                   PARM                    INDVFL            1            CHECK DIV?
     C                   PARM                    INBOFL            1            CHECK B.O.?
      **** OUT
     C                   PARM                    OUBOBO            5            BO CODE
     C                   PARM                    OUBODS           30            BO DESC.
     C                   PARM                    OUDVCD            5            DIV CODE
     C                   PARM                    SECFL             1            SEC FLAG
     C                   PARM                    OUBOFL            1            B.O. ERR FLG
     C                   PARM                    OURMFL            1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      *
      * GLOBAL DEFINES
     C                   MOVE      *BLANK        MODE              6            PARM
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            NORECS            1            NO RECORDS
      *
     C     *LIKE         DEFINE    IDFLOW        WKFLOW
     C     *LIKE         DEFINE    HDRRN1        SVRRN1
      *
      *
      * PARMS FOR F4-PROMPT
      *
     C     *LIKE         DEFINE    C1USCD        XXUSCD
     C                   MOVE      *BLANK        XXUSNM           50
     C     *LIKE         DEFINE    C1MTCD        XXMTCD
     C                   MOVE      *BLANK        XXMTDS           20
      *
      * CONTROL FIELDS
      *
     C     *LIKE         DEFINE    C1MVSN        SVMVSN
     C     *LIKE         DEFINE    C1MTCD        SVMTCD
     C     *LIKE         DEFINE    C1UPDTMDY     SVUPDTMDY
     C     *LIKE         DEFINE    C1USCD        SVUSCD
     C     *LIKE         DEFINE    MEUPDT        WKUYMD
      *
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS. SINCE THIS
      * DISPLAY AS FOLD/DROP LOGIC, DOUBLE THE SUBFILE PAGE VALUE.
      *
     C                   Z-ADD     12            WKPLIN            2 0          SFLPAG(0006)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
      *
      * EXECUTE THE SECURITY SUBROUTINE TO DETERMINE USER
      * AUTHORIZATIONS.
      *
     C                   MOVEL(P)  SDPGM         WKFNCD           10
     C                   MOVEL     NO            INBOFL
     C                   EXSR      $SEC
      *
      * IF ERRORS ON INITIAL CALL, SET TERMINAL FLAG TO YES.
      *
     C     SECFL         IFEQ      YES
     C                   MOVEL     YES           TERMFL
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
