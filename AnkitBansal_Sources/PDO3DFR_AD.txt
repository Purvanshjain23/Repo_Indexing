// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDO3DFR
// ?Date: 14.08.2025 Time: 03:32:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

EXECUTE FUNCTION(RTV Sls Route by Slsp  RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1315679;
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?***** Change Log and Comments
DO;

//?05/23/16 RMC E4119 remove live with tpm check
//?*****
//?** 01/29/2016 LJB E004119
//?**   Remove F6=Sweep Orders to Load Planning
//?*****
//?** 04/07/2015 LJB E004019
//?**   If Live w/TPM then disable Dspl Dsptch & dsp exports by load id
//?*****
//?** 10/03/2006 LJB L61002C
//?** Added Print Yes/No flag to control display of pricing
//?** information on the printed report. This will be controlled
//?** from the menu.
//?*****
//?** 08/30/2007 LJB DLY29SP
//?** Changed the display of export to call the export order select
//?** program first.
//?*****
ENDDO;

//?USER: Initialize subfile control

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Sales Route Code = PAR.Sales Route Code
CTL.Sales_Route_Code = PAR.Sales_Route_Code;

SET CURSOR;

//?Default '*' for 'S' status
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Modified Flag = CND.Modified or Blank
CTL.Modified_Flag = *;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Set modified flag to shipped if order is shipped and not modified
CASE;

// IF DB1.Header Status is Confirmed
IF DB1.Header_Status = 'R';

// AND DB1.Modified Flag is Not Shipped
AND DB1.Modified_Flag = *BLANK;

// RCD.Modified Flag = CND.Shipped Not Modified
RCD.Modified_Flag = 'S';

ENDIF;

//?Modified flag: S=Shipped  M=Modified  ' '=Not Shipped
CASE;

// IF CTL.Modified Flag is Modified or Blank (*)
IF CTL.Modified_Flag = *;

CASE;

// IF DB1.Modified Flag is Shipped & Modified
IF DB1.Modified_Flag = 'M';

// RCD.Modified Flag = DB1.Modified Flag
RCD.Modified_Flag = DB1.Modified_Flag;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Actual Shipped Date is not entered
IF DB1.Actual_Shipped_Date = *ZERO;

// AND DB1.Scheduled Ship Date LT JOB.*Job date
AND DB1.Scheduled_Ship_Date < JOB.*Job_date;

// RCD.Modified Flag = DB1.Modified Flag
RCD.Modified_Flag = DB1.Modified_Flag;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Modified flag: S=Shipped  M=Modified  ' '=Not Shipped
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Modified Flag is Shipped or Modified
IF CTL.Modified_Flag = 'M'/'S';

//?Control field is not an asterisk
CASE;

// IF CTL.Modified Flag NE RCD.Modified Flag
IF CTL.Modified_Flag <> RCD.Modified_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Company match
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sales Route match
CASE;

// IF CTL.Sales Route Code is entered
IF CTL.Sales_Route_Code <> *BLANK;

// AND CTL.Sales Route Code NE DB1.Sales Route Code
AND CTL.Sales_Route_Code <> DB1.Sales_Route_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select only orders to be invoiced
CASE;

// IF DB1.Billing Activity Type is Invoice
IF DB1.Billing_Activity_Type = '1';

//?Select only orders to be invoiced
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Select by load status
CASE;

// IF CTL.Load Status is *Blank
IF CTL.Load_Status = *BLANK;

//?Select by load status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Load Status NE RCD.Load Status
IF CTL.Load_Status <> RCD.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Display shipped weight if order has been shipped else weight ordered
CASE;

// IF RCD.Event Code is Entered Thru 03 Picked
IF RCD.Event_Code >= '01';
AND RCD.Event_Code <= '03';

// RCD.USR Total Weight = DB1.Order Weight Total
RCD.USR_Total_Weight = DB1.Order_Weight_Total;

//?Display shipped weight if order has been shipped else weight ordered
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Actual Wgt Shipped RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1418098;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.USR_Total_Weight);
{
 //?USER: Process Data record

 // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
 PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

}


ENDIF;

//?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Select by warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

//?Select by warehouse
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Warehouse Code NE RCD.Warehouse Code
IF CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by Scheduled Ship Date
CASE;

// IF CTL.USR Date - ATR is Entered
IF CTL.USR_Date_ATR <> *ZERO;

CASE;

// IF DB1.Scheduled Ship Date LE CTL.USR Date - ATR
IF DB1.Scheduled_Ship_Date <= CTL.USR_Date_ATR;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by Actual Shipped Date
CASE;

// IF CTL.Actual Shipped Date is entered
IF CTL.Actual_Shipped_Date <> *ZERO;

//?If CTL.Shipped status is not '*' then select only shipped records
CASE;

// IF CTL.Modified Flag is Modified or Blank (*)
IF CTL.Modified_Flag = *;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Actual Shipped Date is not entered
IF DB1.Actual_Shipped_Date = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

//?Prompt for Company
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(PAR.Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

//?Prompt for Customer
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

//?4/01/04 slm Add Select for Ship to customers with correct name search
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PAR.Sales Route Code = CTL.Sales Route Code
PAR.Sales_Route_Code = CTL.Sales_Route_Code;

//?Co# cannot be zeros
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Sales Route Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Route Code
AND PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(PAR.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Warehouse Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Warehouse Code
AND PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print Request
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number required.'
ERROR(USR1744);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// PAR.Customer Number Pass  USR = CTL.Ship To Customer
PAR.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// PAR.Order Number 1  PASS  USR = CTL.Order Number
PAR.Order_Number_1_PASS_USR = CTL.Order_Number;

// PAR.Order Number 2  PASS  USR = CTL.Load ID
PAR.Order_Number_2_PASS_USR = CTL.Load_ID;

// PAR.Date 1          PASS  USR = CTL.USR Date - ATR
PAR.Date_1_PASS_USR = CTL.USR_Date_ATR;

// PAR.Date 2          PASS  USR = CTL.Actual Shipped Date
PAR.Date_2_PASS_USR = CTL.Actual_Shipped_Date;

// PAR.USR Summary/Detail or Tot = CND.Summary
PAR.USR_Summary_Detail_or_Tot = 'S';

// PAR.USR Detail or Summary = CND.Report Selection 1
PAR.USR_Detail_or_Summary = 1;

//?** Added Print Yes/No flag to control display of pricing
//?** information on the printed report.  10/03/2006 LJB L61002C
// Call program PRT Order Status Inq   UP.
CALL PROGRAM(PRT Order Status Inq   UP) ('PDPFUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('PDPDCLP');
PARAMETER('Order Status Inq. Print');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.USR_Summary_Detail_or_Tot);
PARAMETER(PAR.USR_Detail_or_Summary);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Price_Audit);
PARAMETER(CTL.Price_Status);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Modified_Flag);
PARAMETER(CTL.Block_Order_Flag);
PARAMETER(CTL.Load_Status);
PARAMETER(PAR.Print_Yes_No_USR);
PARAMETER(WRK.Price_Method_Code);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Process request for detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// WRK.Application Code = CND.Order Management
WRK.Application_Code = 'O/M';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

//?7=Process request for Ord vs. Shipped-Order Detail
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

//?** 16 = Process request for Display Dispatch/Tracer
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

ENDIF;

//?** 17 = Process Display Export
CASE;

// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_ID);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

//?** Select the order and pass to the dsprcd     FP1101 LJB 04/09/2007
// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

//?Repeat while
// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// OR CTL.*CMD key is CF03
OR CTL.*CMD_key = '03';

// Call program SEL Order/Load/Exp Sts SR.
CALL PROGRAM(SEL Order/Load/Exp Sts SR) ('PMFXSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);

//?** Dsp order until exit is requested
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

// Call program DSP Cust Ord Export    D1.
CALL PROGRAM(DSP Cust Ord Export    D1) ('PMFWD1R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

// WRK.Exit Selection USR = CND.Yes
WRK.Exit_Selection_USR = 'Y';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Final processing (Pre-confirm)

SET CURSOR;

