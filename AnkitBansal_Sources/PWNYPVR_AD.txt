// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWNYPVR
// ?Date: 14.08.2025 Time: 02:57:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifiecation history
DO;

//? 7/23/2021 JBB WHD72337 - [ME] Copy Function for Site Information
//?                          Function created. Copy a Producer Site
//?                          from one Producer/Site to another
//?                          Producer.
ENDDO;

//?Retrieve Producer Site values from record being copied
EXECUTE FUNCTION(Rtv PrdSite Inform    RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273272;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PS_Site_ID);
PARAMETER(PAR.PS_Site_Name);
PARAMETER(PAR.PS_Manager);
PARAMETER(PAR.PS_Address);
PARAMETER(PAR.PS_City);
PARAMETER(PAR.PS_State);
PARAMETER(PAR.PS_Zip_Code);
PARAMETER(PAR.PS_Latitude);
PARAMETER(PAR.PS_Longitude);
PARAMETER(PAR.PS_User_Mileage_1);
PARAMETER(PAR.PS_User_Mileage_2);
PARAMETER(PAR.PS_Facility_Type_County);
PARAMETER(PAR.PS_Status_1);
PARAMETER(PAR.PS_Status_2);
PARAMETER(PAR.PS_Status_3);
PARAMETER(PAR.PS_Trace_Sequence_#);
PARAMETER(PAR.PS_Veterinarian);
PARAMETER(PAR.PS_Nutritionist);
PARAMETER(PAR.PS_Premises_ID);
PARAMETER(LCL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

//?USER: Process command keys

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Prompt on new Producer Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Producer Code New
IF PGM.*Cursor_field = DTL.Producer_Code_New;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.Producer_Code_New);

ENDIF;

ENDIF;

//?USER: Validate fields

EXECUTE FUNCTION(Rtv Producer Record   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1119700;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(NLL.PD_Name);
PARAMETER(NLL.PD_Production_Capacity);
PARAMETER(NLL.PD_Std_Delv_Time);
PARAMETER(NLL.PD_Std_Truck_Size);
PARAMETER(NLL.PD_Freight_Exp_Paid_By);
PARAMETER(NLL.PD_Fax_Status);
PARAMETER(NLL.PD_VND_Address_Number);
PARAMETER(NLL.PD_EDI_Trading_Partner_#);
PARAMETER(NLL.PD_VND_Category);
PARAMETER(NLL.SR_Source_Code);
PARAMETER(NLL.HB_Buyer_Code);
PARAMETER(NLL.Commission_Producer_Payee);
PARAMETER(NLL.RS_User_Changed);
PARAMETER(NLL.RS_Date_Changed);
PARAMETER(NLL.RS_Time_Changed);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.RS_Job);
PARAMETER(NLL.RS_Program);
PARAMETER(NLL.RS_User_Added);
PARAMETER(NLL.RS_Date_Added);
PARAMETER(NLL.RS_Time_Added);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If record not found, send error message
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Producer not found.'
ERROR(PRK1045);
MSGPARM(DTL.Producer_Code_New);

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Site Name DRV) TYPE(DRVFLD)                                    AB1267704;
PARAMETER(DTL.Site_Name_DRV);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PS_Site_ID);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Site Name ActOnly RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1267705;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.Site_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  // PAR.PS Site Name = DB1.PS Site Name
  PAR.PS_Site_Name = DB1.PS_Site_Name;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.PS Site Name = CON.*BLANK
  PAR.PS_Site_Name = *BLANK;

  ENDIF;

 }

}


EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(PAR.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Producer Name New     DRV) TYPE(DRVFLD)                        AB1370129;
PARAMETER(DTL.Producer_Name_New_DRV);
PARAMETER(DTL.Producer_Code_New);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_New_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

EXECUTE FUNCTION(Chk Site Exists       RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1370177;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);

//?If New Producer Site already exists, send error message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Producer Site already exists.'
ERROR(PRK1610);
MSGPARM(DTL.Producer_Code_New);
MSGPARM(DTL.Site_Id_New);

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Crt Producer Site     IF) TYPE(EXCINTFUN)                      AB1273122;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(DTL.PS_Site_Name);
PARAMETER(DTL.PS_Manager);
PARAMETER(DTL.PS_Address);
PARAMETER(DTL.PS_City);
PARAMETER(DTL.PS_State);
PARAMETER(DTL.PS_Zip_Code);
PARAMETER(DTL.PS_Latitude);
PARAMETER(DTL.PS_Longitude);
PARAMETER(DTL.PS_User_Mileage_1);
PARAMETER(DTL.PS_User_Mileage_2);
PARAMETER(DTL.PS_Facility_Type_County);
PARAMETER(DTL.PS_Status_1);
PARAMETER(DTL.PS_Status_2);
PARAMETER(DTL.PS_Status_3);
PARAMETER(LCL.PS_Trace_Sequence_#);
PARAMETER(DTL.PS_Veterinarian);
PARAMETER(DTL.PS_Nutritionist);
PARAMETER(DTL.PS_Premises_ID);
PARAMETER('Y');
{
 //?Execute internal function

 //?R10369 JJH 05/22/17 - Producer Site Sync 960 with 440
 EXECUTE FUNCTION(Rtv Producer To-1stRcdRT) TYPE(RTVOBJ) FILE(PWADCPP)           AB1334739;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(LCL.Producer_To);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF LCL.Producer To is Blank
 IF LCL.Producer_To = *BLANK;

 //?Producer is not in the Producer Location From/To file.
 // LCL.Copy Producer Site to STP = CND.No
 LCL.Copy_Producer_Site_to_STP = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(960);
 PARAMETER('PRDSTFMLIB');
 PARAMETER(LCL.Producer_Site_From_Lib);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(960);
 PARAMETER('PRDSTTOLIB');
 PARAMETER(LCL.Producer_Site_To_Lib);

 CASE;

 // IF LCL.Producer Site From Lib is Blank
 IF LCL.Producer_Site_From_Lib = *BLANK;

 // OR LCL.Producer Site To Lib is Blank
 OR LCL.Producer_Site_To_Lib = *BLANK;

 // Send error message - 'Contact IT, Producer Site From/To libraries are not set up.'
 ERROR(PRK1435);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Copy Producer Site to STP = CND.Yes
 LCL.Copy_Producer_Site_to_STP = 'Y';

 ENDIF;

 ENDIF;

 // LCL.PS Trace Sequence # = CON.999999
 LCL.PS_Trace_Sequence_# = 999999;

 EXECUTE FUNCTION(Rtv Last Seq#         RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273118;
 PARAMETER(LCL.PS_Trace_Sequence_#);
 {
  //?USER: Processing if Data record not found

  //?The trace sequence number will start at 900000
  // PAR.PS Trace Sequence # = CON.900000
  PAR.PS_Trace_Sequence_# = 900000;

  //?USER: Process Data record

  // PAR.PS Trace Sequence # = DB1.PS Trace Sequence # + CON.1
  PAR.PS_Trace_Sequence_# = DB1.PS_Trace_Sequence_# + 1;

  QUIT;

 }

 //?E3814 JJH 10/05/15 - Add PS Premises ID
 EXECUTE FUNCTION(Crt Producer Site     CR) TYPE(CRTOBJ) FILE(PLATREP)           AB1267655;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.PS_Site_Name);
 PARAMETER(PAR.PS_Manager);
 PARAMETER(PAR.PS_Address);
 PARAMETER(PAR.PS_City);
 PARAMETER(PAR.PS_State);
 PARAMETER(PAR.PS_Zip_Code);
 PARAMETER(PAR.PS_Latitude);
 PARAMETER(PAR.PS_Longitude);
 PARAMETER(PAR.PS_User_Mileage_1);
 PARAMETER(PAR.PS_User_Mileage_2);
 PARAMETER(PAR.PS_Facility_Type_County);
 PARAMETER(PAR.PS_Status_1);
 PARAMETER(PAR.PS_Status_2);
 PARAMETER(PAR.PS_Status_3);
 PARAMETER(LCL.PS_Trace_Sequence_#);
 PARAMETER(PAR.PS_Veterinarian);
 PARAMETER(PAR.PS_Nutritionist);
 PARAMETER(PAR.PS_Premises_ID);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?R10369 JJH 05/22/17 - Producer Site Sync 960 with 440
 CASE;

 // IF LCL.Copy Producer Site to STP is Yes
 IF LCL.Copy_Producer_Site_to_STP = 'Y';

 // Call program Cpy PrdcrSite FmToLib CL.
 CALL PROGRAM(Cpy PrdcrSite FmToLib CL) ('PWB9UPC');
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(LCL.Producer_Site_From_Lib);
 PARAMETER(LCL.Producer_Site_To_Lib);

 CASE;

 // IF NOT PAR.Action Type is Copy
 IF ! PAR.Action_Type = 'Y';

 // Send completion message - 'Producer Site &1 updated into Company 440 (Sioux City, IA).'
 MESSAGE(PRK1436 *COMPLETION);
 MSGPARM(PAR.PS_Site_ID);

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Site Milg for Cpy RT) TYPE(RTVOBJ) FILE(PLASREP)           AB1370136;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Crt Prod Site Mlg Cpy CR) TYPE(CRTOBJ) FILE(PLASREP)           AB1370204;
 PARAMETER(PAR.Producer_Code_New);
 PARAMETER(PAR.Site_Id_New);
 PARAMETER(DB1.PSM_Company_Number);
 PARAMETER(DB1.PSM_Miles_to_Company);
 PARAMETER(DB1.PSM_User_Status_1);
 PARAMETER(DB1.PSM_User_Status_2);
 PARAMETER(DB1.PSM_User_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  // DB1.RS Record Status = CND.InActive
  DB1.RS_Record_Status = 'I';

 }

}


// Call program Edt Site Information  ET.
CALL PROGRAM(Edt Site Information  ET) ('PLGMETR');
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?If F3 pressed from edit screen, delete temporary records
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

EXECUTE FUNCTION(Dlt Producer Site     IF) TYPE(EXCINTFUN)                      AB1370212;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
{
 //?Execute internal function

 //?Modification history
 DO;

 //?WHD72337 JBB  7/26/21 - Copy Producer Site
 //?- Function created.  Delete all records created from a copy
 //?  Producer Site action.
 ENDDO;

 EXECUTE FUNCTION(Rtv Producer To-1stRcdRT) TYPE(RTVOBJ) FILE(PWADCPP)           AB1334739;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(LCL.Producer_To);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?If Producer To is not blank, set up From and To libraries
 CASE;

 // IF LCL.Producer To is Blank
 IF LCL.Producer_To = *BLANK;

 // LCL.Copy Producer Site to STP = CND.No
 LCL.Copy_Producer_Site_to_STP = 'N';

 //?If Producer To is not blank, set up From and To libraries
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(960);
 PARAMETER('PRDSTFMLIB');
 PARAMETER(LCL.Producer_Site_From_Lib);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(960);
 PARAMETER('PRDSTTOLIB');
 PARAMETER(LCL.Producer_Site_To_Lib);

 //?If either Producer From Lib or Producer To Lib are blank. SNDERRMSG
 CASE;

 // IF LCL.Producer Site From Lib is Blank
 IF LCL.Producer_Site_From_Lib = *BLANK;

 // OR LCL.Producer Site To Lib is Blank
 OR LCL.Producer_Site_To_Lib = *BLANK;

 // Send error message - 'Contact IT, Producer Site From/To libraries are not set up.'
 ERROR(PRK1435);

 //?If either Producer From Lib or Producer To Lib are blank. SNDERRMSG
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Copy Producer Site to STP = CND.Yes
 LCL.Copy_Producer_Site_to_STP = 'Y';

 ENDIF;

 ENDIF;

 //?Delete Producer Site
 EXECUTE FUNCTION(Del Producer Site     DL) TYPE(DLTOBJ) FILE(PLATREP)           AB1267657;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 //?Delete Producer Site Mileage
 EXECUTE FUNCTION(Dlt Site Milg for Cpy RT) TYPE(RTVOBJ) FILE(PLASREP)           AB1370211;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Prod Loc Dlv Co   DO) TYPE(DLTOBJ) FILE(PLASREP)           AB1263911;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PS_Site_ID);
  PARAMETER(DB1.PSM_Company_Number);
 }

 //?Producer Site Sync 960 with 440: Delete 440 Producer Site
 CASE;

 // IF LCL.Copy Producer Site to STP is Yes
 IF LCL.Copy_Producer_Site_to_STP = 'Y';

 // Call program Dlt PrdcrSite FmToLib CL.
 CALL PROGRAM(Dlt PrdcrSite FmToLib CL) ('PWNZUPC');
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(LCL.Producer_Site_From_Lib);
 PARAMETER(LCL.Producer_Site_To_Lib);

 ENDIF;

}


ENDIF;

