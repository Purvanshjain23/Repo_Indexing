// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKX3XFR
// ?Date: 14.08.2025 Time: 02:50:48
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Rtv CM Competitor-Dte Rt) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1167195;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.CT_Source_Type);
PARAMETER(PAR.SR_Source_Code);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.FZ_Code);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 //?Selection
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.TH Kill Date
 IF DB1.TH_Kill_Date < PAR.TH_Kill_Date;

 // OR DB1.TH Kill Date GT PAR.Kill Date Usr
 OR DB1.TH_Kill_Date > PAR.Kill_Date_Usr;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Kill Date GT PAR.Kill Date Usr
 IF DB1.TH_Kill_Date > PAR.Kill_Date_Usr;

 QUIT;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.CT Source Type EQ WRK.Blank USR
 IF PAR.CT_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.CT Source Type
 IF DB1.TH_Source_Type = PAR.CT_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.TH Tattoo Number EQ WRK.Zero USR
 IF PAR.TH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.TH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.TH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(Chg Flg/Un Compet Tto  Rt) TYPE(RTVOBJ) FILE(PKDGCPP)          AB1167221;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Flg/Un Compet Tto CH) TYPE(CHGOBJ) FILE(PKDGCPP)           AB1167060;
  PARAMETER(DB1.CMP_Program_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER('Y');
  PARAMETER(DB1.CCT_Std_Yield);
  PARAMETER(DB1.CCT_Base_Carc_CWT);
  PARAMETER(DB1.CCT_Lean_Prem_Carc_CWT);
  PARAMETER(DB1.CCT_Yield_G_L_Carc_CWT);
  PARAMETER(DB1.CCT_Carc_Val_Live_CWT);
  PARAMETER(DB1.CCT_Carc_Val_Carc_CWT);
  PARAMETER(DB1.CCT_Sort_Dsc_Carc_CWT);
  PARAMETER(DB1.CCT_Gross_Carc_CWT);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


EXECUTE FUNCTION(Rtv Selected Compt Tat RT) TYPE(RTVOBJ) FILE(PKDGCPP)          AB1166987;
PARAMETER(PAR.Price_Type_USR);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Rtv Cmp Competitors   RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1166528;
 PARAMETER(WRK.Competitors_Code_1_Usr);
 PARAMETER(WRK.Competitors_Code_2_Usr);
 PARAMETER(WRK.Competitors_Code_3_Usr);
 {
  //?USER: Initialize routine

  // *MO.VE             1183529*Bu = ilt. in functions
  WRK.Count_USR = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Competitors_Code_1_Usr = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Competitors_Code_2_Usr = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Competitors_Code_3_Usr = *BLANK;

  //?USER: Process Data record

  // WRK.Count USR = WRK.Count USR + CON.001
  WRK.Count_USR = WRK.Count_USR + 001;

  CASE;

  // IF WRK.Count USR is One
  IF WRK.Count_USR = 1;

  // PAR.Competitors Code 1 Usr = DB1.CMP Program Code
  PAR.Competitors_Code_1_Usr = DB1.CMP_Program_Code;

  // IF WRK.Count USR is Two
  IF WRK.Count_USR = 2;

  // PAR.Competitors Code 2 Usr = DB1.CMP Program Code
  PAR.Competitors_Code_2_Usr = DB1.CMP_Program_Code;

  // IF WRK.Count USR is Three
  IF WRK.Count_USR = 3;

  // PAR.Competitors Code 3 Usr = DB1.CMP Program Code
  PAR.Competitors_Code_3_Usr = DB1.CMP_Program_Code;

  QUIT;

  ENDIF;

 }

 // WRK.Cmp Base Live = CON.*ZERO
 WRK.Cmp_Base_Live = *ZERO;

 // WRK.Cmp Lean Premium Live = CON.*ZERO
 WRK.Cmp_Lean_Premium_Live = *ZERO;

 // WRK.Cmp Sort Dsc Live = CON.*ZERO
 WRK.Cmp_Sort_Dsc_Live = *ZERO;

 // WRK.Cmp Yield Gain/Loss Live = CON.*ZERO
 WRK.Cmp_Yield_Gain_Loss_Live = *ZERO;

 // WRK.CMP Gross Live = CON.*ZERO
 WRK.CMP_Gross_Live = *ZERO;

 //?USER: Process Data record

 //?Tattoo/BOL Break
 CASE;

 // IF LCL.TH Tattoo Number NE DB1.TH Tattoo Number
 IF LCL.TH_Tattoo_Number <> DB1.TH_Tattoo_Number;

 // OR LCL.BOH Buy Order Number NE DB1.BOH Buy Order Number
 OR LCL.BOH_Buy_Order_Number <> DB1.BOH_Buy_Order_Number;

 // WRK.Cmp Base Live = CON.*ZERO
 WRK.Cmp_Base_Live = *ZERO;

 // WRK.Cmp Lean Premium Live = CON.*ZERO
 WRK.Cmp_Lean_Premium_Live = *ZERO;

 // WRK.Cmp Sort Dsc Live = CON.*ZERO
 WRK.Cmp_Sort_Dsc_Live = *ZERO;

 // WRK.Cmp Yield Gain/Loss Live = CON.*ZERO
 WRK.Cmp_Yield_Gain_Loss_Live = *ZERO;

 // WRK.CMP Gross Live = CON.*ZERO
 WRK.CMP_Gross_Live = *ZERO;

 // LCL.BOH Buy Order Number = DB1.BOH Buy Order Number
 LCL.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // LCL.TH Tattoo Number = DB1.TH Tattoo Number
 LCL.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

 ENDIF;

 CASE;

 // IF DB1.CMP Program Code EQ WRK.Competitors Code 1 Usr
 IF DB1.CMP_Program_Code = WRK.Competitors_Code_1_Usr;

 //?Competitor 1
 DO;

 CASE;

 // IF PAR.Price Type USR is Live Hundred Weight
 IF PAR.Price_Type_USR = 'L';

 // WRK.CT Base 1 = DB1.CCT Base /Live CWT
 WRK.CT_Base_1 = DB1.CCT_Base_Live_CWT;

 // WRK.CT Lean Prem 1 = DB1.CCT Lean Prem /Live CWT
 WRK.CT_Lean_Prem_1 = DB1.CCT_Lean_Prem_Live_CWT;

 // WRK.CT Sort Dsc 1 = DB1.CCT Sort Dsc /Live CWT
 WRK.CT_Sort_Dsc_1 = DB1.CCT_Sort_Dsc_Live_CWT;

 // WRK.CT Yield Gain/Loss 1 = DB1.CCT Yield G/L /Live CWT
 WRK.CT_Yield_Gain_Loss_1 = DB1.CCT_Yield_G_L_Live_CWT;

 // WRK.CT Total 1 = DB1.CCT Gross /Live CWT
 WRK.CT_Total_1 = DB1.CCT_Gross_Live_CWT;

 // IF PAR.Price Type USR is Carcass Hundred Weight
 IF PAR.Price_Type_USR = 'C';

 // WRK.CT Base 1 = DB1.CCT Base /Carc CWT
 WRK.CT_Base_1 = DB1.CCT_Base_Carc_CWT;

 // WRK.CT Lean Prem 1 = DB1.CCT Lean Prem /Carc CWT
 WRK.CT_Lean_Prem_1 = DB1.CCT_Lean_Prem_Carc_CWT;

 // WRK.CT Sort Dsc 1 = DB1.CCT Sort Dsc /Carc CWT
 WRK.CT_Sort_Dsc_1 = DB1.CCT_Sort_Dsc_Carc_CWT;

 // WRK.CT Yield Gain/Loss 1 = DB1.CCT Yield G/L /Carc CWT
 WRK.CT_Yield_Gain_Loss_1 = DB1.CCT_Yield_G_L_Carc_CWT;

 // WRK.CT Total 1 = DB1.CCT Gross /Carc CWT
 WRK.CT_Total_1 = DB1.CCT_Gross_Carc_CWT;

 ENDIF;

 //?Accumulate totals for averages
 // WRK.Cmp Base Live = WRK.Cmp Base Live + WRK.CT Base 1
 WRK.Cmp_Base_Live = WRK.Cmp_Base_Live + WRK.CT_Base_1;

 // WRK.Cmp Lean Premium Live = WRK.Cmp Lean Premium Live + WRK.CT Lean Prem 1
 WRK.Cmp_Lean_Premium_Live = WRK.Cmp_Lean_Premium_Live + WRK.CT_Lean_Prem_1;

 // WRK.Cmp Sort Dsc Live = WRK.Cmp Sort Dsc Live + WRK.CT Sort Dsc 1
 WRK.Cmp_Sort_Dsc_Live = WRK.Cmp_Sort_Dsc_Live + WRK.CT_Sort_Dsc_1;

 // WRK.CMP Gross Live = WRK.CMP Gross Live + WRK.CT Total 1
 WRK.CMP_Gross_Live = WRK.CMP_Gross_Live + WRK.CT_Total_1;

 // WRK.Cmp Yield Gain/Loss Live = WRK.Cmp Yield Gain/Loss Live + WRK.CT Yield Gain/Loss 1
 WRK.Cmp_Yield_Gain_Loss_Live = WRK.Cmp_Yield_Gain_Loss_Live + WRK.CT_Yield_Gain_Loss_1;

 EXECUTE FUNCTION(Chg Flg/Un Compet Tto CH) TYPE(CHGOBJ) FILE(PKDGCPP)           AB1167060;
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*BLANK);
 PARAMETER(DB1.CCT_Std_Yield);
 PARAMETER(DB1.CCT_Base_Carc_CWT);
 PARAMETER(DB1.CCT_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.CCT_Yield_G_L_Carc_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Live_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Carc_CWT);
 PARAMETER(DB1.CCT_Sort_Dsc_Carc_CWT);
 PARAMETER(DB1.CCT_Gross_Carc_CWT);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDDO;

 // IF DB1.CMP Program Code EQ WRK.Competitors Code 2 Usr
 IF DB1.CMP_Program_Code = WRK.Competitors_Code_2_Usr;

 //?Competitor 2
 DO;

 CASE;

 // IF PAR.Price Type USR is Live Hundred Weight
 IF PAR.Price_Type_USR = 'L';

 // WRK.CT Base 2 = DB1.CCT Base /Live CWT
 WRK.CT_Base_2 = DB1.CCT_Base_Live_CWT;

 // WRK.CT Lean Prem 2 = DB1.CCT Lean Prem /Live CWT
 WRK.CT_Lean_Prem_2 = DB1.CCT_Lean_Prem_Live_CWT;

 // WRK.CT Sort Dsc 2 = DB1.CCT Sort Dsc /Live CWT
 WRK.CT_Sort_Dsc_2 = DB1.CCT_Sort_Dsc_Live_CWT;

 // WRK.CT Yield Gain/Loss 2 = DB1.CCT Yield G/L /Live CWT
 WRK.CT_Yield_Gain_Loss_2 = DB1.CCT_Yield_G_L_Live_CWT;

 // WRK.CT Total 2 = DB1.CCT Gross /Live CWT
 WRK.CT_Total_2 = DB1.CCT_Gross_Live_CWT;

 // IF PAR.Price Type USR is Carcass Hundred Weight
 IF PAR.Price_Type_USR = 'C';

 // WRK.CT Base 2 = DB1.CCT Base /Carc CWT
 WRK.CT_Base_2 = DB1.CCT_Base_Carc_CWT;

 // WRK.CT Lean Prem 2 = DB1.CCT Lean Prem /Carc CWT
 WRK.CT_Lean_Prem_2 = DB1.CCT_Lean_Prem_Carc_CWT;

 // WRK.CT Sort Dsc 2 = DB1.CCT Sort Dsc /Carc CWT
 WRK.CT_Sort_Dsc_2 = DB1.CCT_Sort_Dsc_Carc_CWT;

 // WRK.CT Yield Gain/Loss 2 = DB1.CCT Yield G/L /Carc CWT
 WRK.CT_Yield_Gain_Loss_2 = DB1.CCT_Yield_G_L_Carc_CWT;

 // WRK.CT Total 2 = DB1.CCT Gross /Carc CWT
 WRK.CT_Total_2 = DB1.CCT_Gross_Carc_CWT;

 ENDIF;

 //?Accumulate totals for averages
 // WRK.Cmp Base Live = WRK.Cmp Base Live + WRK.CT Base 2
 WRK.Cmp_Base_Live = WRK.Cmp_Base_Live + WRK.CT_Base_2;

 // WRK.Cmp Lean Premium Live = WRK.Cmp Lean Premium Live + WRK.CT Lean Prem 2
 WRK.Cmp_Lean_Premium_Live = WRK.Cmp_Lean_Premium_Live + WRK.CT_Lean_Prem_2;

 // WRK.Cmp Sort Dsc Live = WRK.Cmp Sort Dsc Live + WRK.CT Sort Dsc 2
 WRK.Cmp_Sort_Dsc_Live = WRK.Cmp_Sort_Dsc_Live + WRK.CT_Sort_Dsc_2;

 // WRK.CMP Gross Live = WRK.CMP Gross Live + WRK.CT Total 2
 WRK.CMP_Gross_Live = WRK.CMP_Gross_Live + WRK.CT_Total_2;

 // WRK.Cmp Yield Gain/Loss Live = WRK.Cmp Yield Gain/Loss Live + WRK.CT Yield Gain/Loss 2
 WRK.Cmp_Yield_Gain_Loss_Live = WRK.Cmp_Yield_Gain_Loss_Live + WRK.CT_Yield_Gain_Loss_2;

 EXECUTE FUNCTION(Chg Flg/Un Compet Tto CH) TYPE(CHGOBJ) FILE(PKDGCPP)           AB1167060;
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*BLANK);
 PARAMETER(DB1.CCT_Std_Yield);
 PARAMETER(DB1.CCT_Base_Carc_CWT);
 PARAMETER(DB1.CCT_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.CCT_Yield_G_L_Carc_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Live_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Carc_CWT);
 PARAMETER(DB1.CCT_Sort_Dsc_Carc_CWT);
 PARAMETER(DB1.CCT_Gross_Carc_CWT);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDDO;

 // IF DB1.CMP Program Code EQ WRK.Competitors Code 3 Usr
 IF DB1.CMP_Program_Code = WRK.Competitors_Code_3_Usr;

 //?Competitor 3
 DO;

 CASE;

 // IF PAR.Price Type USR is Live Hundred Weight
 IF PAR.Price_Type_USR = 'L';

 // WRK.CT Base 3 = DB1.CCT Base /Live CWT
 WRK.CT_Base_3 = DB1.CCT_Base_Live_CWT;

 // WRK.CT Lean Prem 3 = DB1.CCT Lean Prem /Live CWT
 WRK.CT_Lean_Prem_3 = DB1.CCT_Lean_Prem_Live_CWT;

 // WRK.CT Sort Dsc 3 = DB1.CCT Sort Dsc /Live CWT
 WRK.CT_Sort_Dsc_3 = DB1.CCT_Sort_Dsc_Live_CWT;

 // WRK.CT Yield Gain/Loss 3 = DB1.CCT Yield G/L /Live CWT
 WRK.CT_Yield_Gain_Loss_3 = DB1.CCT_Yield_G_L_Live_CWT;

 // WRK.CT Total 3 = DB1.CCT Gross /Live CWT
 WRK.CT_Total_3 = DB1.CCT_Gross_Live_CWT;

 // IF PAR.Price Type USR is Carcass Hundred Weight
 IF PAR.Price_Type_USR = 'C';

 // WRK.CT Base 3 = DB1.CCT Base /Carc CWT
 WRK.CT_Base_3 = DB1.CCT_Base_Carc_CWT;

 // WRK.CT Lean Prem 3 = DB1.CCT Lean Prem /Carc CWT
 WRK.CT_Lean_Prem_3 = DB1.CCT_Lean_Prem_Carc_CWT;

 // WRK.CT Sort Dsc 3 = DB1.CCT Sort Dsc /Carc CWT
 WRK.CT_Sort_Dsc_3 = DB1.CCT_Sort_Dsc_Carc_CWT;

 // WRK.CT Yield Gain/Loss 3 = DB1.CCT Yield G/L /Carc CWT
 WRK.CT_Yield_Gain_Loss_3 = DB1.CCT_Yield_G_L_Carc_CWT;

 // WRK.CT Total 3 = DB1.CCT Gross /Carc CWT
 WRK.CT_Total_3 = DB1.CCT_Gross_Carc_CWT;

 ENDIF;

 //?Accumulate totals for averages
 // WRK.Cmp Base Live = WRK.Cmp Base Live + WRK.CT Base 3
 WRK.Cmp_Base_Live = WRK.Cmp_Base_Live + WRK.CT_Base_3;

 // WRK.Cmp Lean Premium = WRK.Cmp Lean Premium + WRK.CT Lean Prem 3
 WRK.Cmp_Lean_Premium_Live = WRK.Cmp_Lean_Premium_Live + WRK.CT_Lean_Prem_3;

 // WRK.Cmp Sort Dsc = WRK.Cmp Sort Dsc + WRK.CT Sort Dsc 3
 WRK.Cmp_Sort_Dsc_Live = WRK.Cmp_Sort_Dsc_Live + WRK.CT_Sort_Dsc_3;

 // WRK.Cmp Yield Gain/Loss = WRK.Cmp Yield Gain/Loss + WRK.CT Yield Gain/Loss 3
 WRK.Cmp_Yield_Gain_Loss_Live = WRK.Cmp_Yield_Gain_Loss_Live + WRK.CT_Yield_Gain_Loss_3;

 // WRK.CMP Total = WRK.CMP Total + WRK.CT Total 3
 WRK.CMP_Gross_Live = WRK.CMP_Gross_Live + WRK.CT_Total_3;

 EXECUTE FUNCTION(Chg Flg/Un Compet Tto CH) TYPE(CHGOBJ) FILE(PKDGCPP)           AB1167060;
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*BLANK);
 PARAMETER(DB1.CCT_Std_Yield);
 PARAMETER(DB1.CCT_Base_Carc_CWT);
 PARAMETER(DB1.CCT_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.CCT_Yield_G_L_Carc_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Live_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Carc_CWT);
 PARAMETER(DB1.CCT_Sort_Dsc_Carc_CWT);
 PARAMETER(DB1.CCT_Gross_Carc_CWT);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Create competitor totals
 // WRK.Competitor or Totals Usr = CND.Totals
 WRK.Competitor_or_Totals_Usr = 4;

 EXECUTE FUNCTION(Crt/Ext Competitors Ttl) TYPE(EXCINTFUN)                       AB1167041;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.CT_Base_1);
 PARAMETER(WRK.CT_Lean_Prem_1);
 PARAMETER(WRK.CT_Yield_Gain_Loss_1);
 PARAMETER(WRK.CT_Sort_Dsc_1);
 PARAMETER(WRK.CT_Total_1);
 PARAMETER(WRK.CT_Base_2);
 PARAMETER(WRK.CT_Lean_Prem_2);
 PARAMETER(WRK.CT_Yield_Gain_Loss_2);
 PARAMETER(WRK.CT_Sort_Dsc_2);
 PARAMETER(WRK.CT_Total_2);
 PARAMETER(WRK.CT_Base_3);
 PARAMETER(WRK.CT_Lean_Prem_3);
 PARAMETER(WRK.CT_Yield_Gain_Loss_3);
 PARAMETER(WRK.CT_Sort_Dsc_3);
 PARAMETER(WRK.CT_Total_3);
 PARAMETER(WRK.Cmp_Base_Live);
 PARAMETER(WRK.Cmp_Lean_Premium_Live);
 PARAMETER(WRK.Cmp_Yield_Gain_Loss_Live);
 PARAMETER(WRK.Cmp_Sort_Dsc_Live);
 PARAMETER(WRK.CMP_Gross_Live);
 PARAMETER(PAR.Price_Type_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Competitor Actual) TYPE(RTVOBJ) FILE(PKA1CPP)              AB1167049;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(WRK.TH_Head_Killed);
  PARAMETER(WRK.TH_Live_Wgt);
  PARAMETER(WRK.TH_Hot_Wgt);
  PARAMETER(WRK.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(WRK.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(WRK.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(WRK.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(WRK.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(WRK.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(WRK.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(WRK.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(WRK.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(WRK.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(WRK.TH_CM_Gross_Live_CWT);
  PARAMETER(WRK.TH_CM_Gross_Carc_CWT);
  PARAMETER(WRK.TH_Source_Type);
  PARAMETER(WRK.TH_Source_Code);
  PARAMETER(WRK.PD_Producer_Code);
  PARAMETER(WRK.PL_Location_Code);
  PARAMETER(PAR.Price_Type_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   CASE;

   // IF DB1.TH Payment Sts is Live anything
   IF DB1.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   CASE;

   // IF PAR.Price Type USR is Live Hundred Weight
   IF PAR.Price_Type_USR = 'L';

   //?Per Carl T. in Guymon  -- If paid Live show live
   // PAR.TH CM Bse Mkt Live /CWT = DB1.TH Live Purchase Price
   PAR.TH_CM_Bse_Mkt_Live_CWT = DB1.TH_Live_Purchase_Price;

   // PAR.TH CM Gross Live /CWT = DB1.TH Live Purchase Price
   PAR.TH_CM_Gross_Live_CWT = DB1.TH_Live_Purchase_Price;

   // PAR.TH CM Srt Dsc Live /CWT = CON.*ZERO
   PAR.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

   // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
   PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

   // PAR.TH CM Crc Val Live /CWT = CON.*ZERO
   PAR.TH_CM_Crc_Val_Live_CWT = *ZERO;

   // PAR.TH CM Lean Prem Live /CWT = CON.*ZERO
   PAR.TH_CM_Lean_Prem_Live_CWT = *ZERO;

   // IF PAR.Price Type USR is Carcass Hundred Weight
   IF PAR.Price_Type_USR = 'C';

   // TH CM Base Mkt Carc /CWT
   PAR.TH_CM_Bse_Mkt_Carc_CWT = DB1.TH_Payment_Gross / ( DB1.TH_Hot_Wgt / 100 'H' ) 'H';

   // TH CM Gross Carc /CWT
   PAR.TH_CM_Gross_Carc_CWT = DB1.TH_Payment_Gross / ( DB1.TH_Hot_Wgt / 100 'H' ) 'H';

   // PAR.TH CM Srt Dsc Carc /CWT = CON.*ZERO
   PAR.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

   // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
   PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

   // PAR.TH CM Crc Val Carc /CWT = CON.*ZERO
   PAR.TH_CM_Crc_Val_Carc_CWT = *ZERO;

   // PAR.TH CM Lean Prem Carc /CWT = CON.*ZERO
   PAR.TH_CM_Lean_Prem_Carc_CWT = *ZERO;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Pdctn Loc FrghtZn RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1179373;
  PARAMETER(WRK.PD_Producer_Code);
  PARAMETER(WRK.PL_Location_Code);
  PARAMETER(WRK.FZ_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calculate actual
  //?Actual
  CASE;

  // IF PAR.Price Type USR is Live Hundred Weight
  IF PAR.Price_Type_USR = 'L';

  // WRK.CT Base Actual = WRK.TH CM Bse Mkt Live /CWT
  WRK.CT_Base_Actual = WRK.TH_CM_Bse_Mkt_Live_CWT;

  // WRK.CT Lean Prem Actual = WRK.TH CM Lean Prem Live /CWT
  WRK.CT_Lean_Prem_Actual = WRK.TH_CM_Lean_Prem_Live_CWT;

  // WRK.CT Yield Gain/Loss Actual = WRK.TH CM Yld G/L Live /CWT
  WRK.CT_Yield_Gain_Loss_Actual = WRK.TH_CM_Yld_G_L_Live_CWT;

  // WRK.CT Sort Dsc Actual = WRK.TH CM Srt Dsc Live /CWT
  WRK.CT_Sort_Dsc_Actual = WRK.TH_CM_Srt_Dsc_Live_CWT;

  // WRK.CT Total Actual = WRK.TH CM Gross Live /CWT
  WRK.CT_Total_Actual = WRK.TH_CM_Gross_Live_CWT;

  //?Actual
  // IF PAR.Price Type USR is Carcass Hundred Weight
  IF PAR.Price_Type_USR = 'C';

  // WRK.CT Base Actual = WRK.TH CM Bse Mkt Carc /CWT
  WRK.CT_Base_Actual = WRK.TH_CM_Bse_Mkt_Carc_CWT;

  // WRK.CT Lean Prem Actual = WRK.TH CM Lean Prem Carc /CWT
  WRK.CT_Lean_Prem_Actual = WRK.TH_CM_Lean_Prem_Carc_CWT;

  // WRK.CT Yield Gain/Loss Actual = WRK.TH CM Yld G/L Carc /CWT
  WRK.CT_Yield_Gain_Loss_Actual = WRK.TH_CM_Yld_G_L_Carc_CWT;

  // WRK.CT Sort Dsc Actual = WRK.TH CM Srt Dsc Carc /CWT
  WRK.CT_Sort_Dsc_Actual = WRK.TH_CM_Srt_Dsc_Carc_CWT;

  // WRK.CT Total Actual = WRK.TH CM Gross Carc /CWT
  WRK.CT_Total_Actual = WRK.TH_CM_Gross_Carc_CWT;

  ENDIF;

  //?Calculate average from Count Usr number of competitors found for tattoo
  // WRK.CT Base Average = PAR.Cmp Base Live / CON.3 *Rounded
  WRK.CT_Base_Average = PAR.Cmp_Base_Live / 3 'H';

  // WRK.CT Lean Prem Average = PAR.Cmp Lean Premium Live / CON.3 *Rounded
  WRK.CT_Lean_Prem_Average = PAR.Cmp_Lean_Premium_Live / 3 'H';

  // WRK.CT Yield Gain/Loss Avg = PAR.Cmp Yield Gain/Loss Live / CON.3 *Rounded
  WRK.CT_Yield_Gain_Loss_Avg = PAR.Cmp_Yield_Gain_Loss_Live / 3 'H';

  // WRK.CT Sort Dsc Average = PAR.Cmp Sort Dsc Live / CON.3 *Rounded
  WRK.CT_Sort_Dsc_Average = PAR.Cmp_Sort_Dsc_Live / 3 'H';

  // WRK.CT Total Avg = WRK.CT Base Average + WRK.CT Lean Prem Average
  WRK.CT_Total_Avg = WRK.CT_Base_Average + WRK.CT_Lean_Prem_Average;

  // WRK.CT Total Avg = WRK.CT Total Avg + WRK.CT Yield Gain/Loss Avg
  WRK.CT_Total_Avg = WRK.CT_Total_Avg + WRK.CT_Yield_Gain_Loss_Avg;

  // WRK.CT Total Avg = WRK.CT Total Avg + WRK.CT Sort Dsc Average
  WRK.CT_Total_Avg = WRK.CT_Total_Avg + WRK.CT_Sort_Dsc_Average;

  //?Calculate variance
  // WRK.CT Base Variance = WRK.CT Base Actual - WRK.CT Base Average
  WRK.CT_Base_Variance = WRK.CT_Base_Actual - WRK.CT_Base_Average;

  // WRK.CT Lean Prem Variance = WRK.CT Lean Prem Actual - WRK.CT Lean Prem Average
  WRK.CT_Lean_Prem_Variance = WRK.CT_Lean_Prem_Actual - WRK.CT_Lean_Prem_Average;

  // WRK.CT Yield Gain/Loss Var = WRK.CT Yield Gain/Loss Actual - WRK.CT Yield Gain/L
  WRK.CT_Yield_Gain_Loss_Var = WRK.CT_Yield_Gain_Loss_Actual - WRK.CT_Yield_Gain_Loss_Avg;

  // WRK.CT Sort Dsc Var = WRK.CT Sort Dsc Actual - WRK.CT Sort Dsc Average
  WRK.CT_Sort_Dsc_Var = WRK.CT_Sort_Dsc_Actual - WRK.CT_Sort_Dsc_Average;

  // WRK.CT Total Variance = WRK.CT Total Actual - WRK.CT Total Avg
  WRK.CT_Total_Variance = WRK.CT_Total_Actual - WRK.CT_Total_Avg;

  //?Create record
  EXECUTE FUNCTION(Create Competitors Total) TYPE(CRTOBJ) FILE(PKDFREP)           AB1166440;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(WRK.TH_Source_Type);
  PARAMETER(WRK.CT_Base_Actual);
  PARAMETER(WRK.CT_Lean_Prem_Actual);
  PARAMETER(WRK.CT_Yield_Gain_Loss_Actual);
  PARAMETER(WRK.CT_Sort_Dsc_Actual);
  PARAMETER(WRK.CT_Total_Actual);
  PARAMETER(PAR.CT_Base_1);
  PARAMETER(PAR.CT_Lean_Prem_1);
  PARAMETER(PAR.CT_Yield_Gain_Loss_1);
  PARAMETER(PAR.CT_Sort_Dsc_1);
  PARAMETER(PAR.CT_Total_1);
  PARAMETER(PAR.CT_Base_2);
  PARAMETER(PAR.CT_Lean_Prem_2);
  PARAMETER(PAR.CT_Yield_Gain_Loss_2);
  PARAMETER(PAR.CT_Sort_Dsc_2);
  PARAMETER(PAR.CT_Total_2);
  PARAMETER(PAR.CT_Base_3);
  PARAMETER(PAR.CT_Lean_Prem_3);
  PARAMETER(PAR.CT_Yield_Gain_Loss_3);
  PARAMETER(PAR.CT_Sort_Dsc_3);
  PARAMETER(PAR.CT_Total_3);
  PARAMETER(WRK.CT_Base_Average);
  PARAMETER(WRK.CT_Lean_Prem_Average);
  PARAMETER(WRK.CT_Yield_Gain_Loss_Avg);
  PARAMETER(WRK.CT_Sort_Dsc_Average);
  PARAMETER(WRK.CT_Total_Avg);
  PARAMETER(WRK.CT_Base_Variance);
  PARAMETER(WRK.CT_Lean_Prem_Variance);
  PARAMETER(WRK.CT_Yield_Gain_Loss_Var);
  PARAMETER(WRK.CT_Sort_Dsc_Var);
  PARAMETER(WRK.CT_Total_Variance);
  PARAMETER(WRK.TH_Hot_Wgt);
  PARAMETER(WRK.TH_Live_Wgt);
  PARAMETER(WRK.TH_Head_Killed);
  PARAMETER(WRK.TH_Source_Code);
  PARAMETER(WRK.PD_Producer_Code);
  PARAMETER(WRK.PL_Location_Code);
  PARAMETER(WRK.FZ_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
 }

 // WRK.Cmp Base Live = CON.*ZERO
 WRK.Cmp_Base_Live = *ZERO;

 // WRK.Cmp Lean Premium Live = CON.*ZERO
 WRK.Cmp_Lean_Premium_Live = *ZERO;

 // WRK.Cmp Sort Dsc Live = CON.*ZERO
 WRK.Cmp_Sort_Dsc_Live = *ZERO;

 // WRK.Cmp Yield Gain/Loss Live = CON.*ZERO
 WRK.Cmp_Yield_Gain_Loss_Live = *ZERO;

 // WRK.CMP Gross Live = CON.*ZERO
 WRK.CMP_Gross_Live = *ZERO;

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Flg/Un Compet Tto CH) TYPE(CHGOBJ) FILE(PKDGCPP)           AB1167060;
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*BLANK);
 PARAMETER(DB1.CCT_Std_Yield);
 PARAMETER(DB1.CCT_Base_Carc_CWT);
 PARAMETER(DB1.CCT_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.CCT_Yield_G_L_Carc_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Live_CWT);
 PARAMETER(DB1.CCT_Carc_Val_Carc_CWT);
 PARAMETER(DB1.CCT_Sort_Dsc_Carc_CWT);
 PARAMETER(DB1.CCT_Gross_Carc_CWT);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


