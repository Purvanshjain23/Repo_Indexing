      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF4500
      * TITLE:       Cash: Specify Kill/Cut Data Listing Options
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     03/27/07
      *
      * FUNCTION: Allows user to enter listing options and submit job.
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 12/01/08  LeAnne Ramsey
      *           File TFP050 was renamed from Cold Carcass Pounds to Kill/Cut Data.
      *           Fields were added to the file and the 2-letter prefix was changed
      *           from "CP" to "KC".
      *
      * 05/06/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 11/09/17  Danny Nguyen    - R12011-Kill Cut Data for STF
      *           File TFP050 was changed. Recompile only. No logic change.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd4500   cf   e             workstn infds(iofeed)
      *
      *
     Ftfp050    if   e           k disk
      *   Kill/cut data
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
     D wkdt            s              8  0
     D wkmdy           s              6  0
      *
      *
      * Parms
      *
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
      *
     D xxfmdy          s              6  0
     D xxfcymd         s              8  0
      *
     D xxtmdy          s              6  0
     D xxtcymd         s              8  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfwedt                1      8  0
     D  ldfwemdy               9     14  0
      *
     D  ldtwedt               15     22  0
     D  ldtwemdy              23     28  0
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   move      scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf4500ec
     C                   write     tf4500k1
     C                   exfmt     tf4500r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   endif
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
      * Validate:
      *  1) From date
      *  2) To date
      *
     C     $edit1        begsr
      *
     C                   exsr      $fmdy
     C                   exsr      $tmdy
      *
      * If the user did not enter From/To dates, go retrieve the First/Last
      * records in the Product Exception file so we can "plop" week-ending
      * dates up on the screen and into the LDA.
      *
     C                   if        d1fmdy = 0 and d1tmdy = 0
     C                   exsr      $alldates
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate From Week-Ending Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             xxfcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1tmdy <> 0 and d1fmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09088'     mgid(e)
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   z-add     wkdt          xxfcymd
     C                   exsr      $wedt
     C                   if        *in92 = *on                                  If bad Saturday
     C                   seton                                        30
     C                   else
     C                   z-add     wkmdy         d1fwemdy
     C                   z-add     xxsatdt       ldfwedt
     C                   endif                                                  If bad Saturday
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate To Week-ending Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             xxtcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1fmdy <> 0 and d1tmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09089'     mgid(e)
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   z-add     wkdt          xxtcymd
     C                   exsr      $wedt
     C                   if        *in92 = *on                                  If bad Saturday
     C                   seton                                        31
     C                   else
     C                   z-add     wkmdy         d1twemdy
     C                   z-add     xxsatdt       ldtwedt
     C                   endif                                                  If bad Saturday
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in30 = *off and
     C                             *in31 = *off and
     C                             xxtcymd < xxfcymd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------
      * Retrieve Week-ending dates when the user has elected "all" dates
      *-------------------------------------------------------------------------------
      *
     C     $alldates     begsr
      *
      * Retrieve oldest Kill/Cut Data record
      *
     C     *end          setll     tfp050
     C                   readp     tfp050                                 92
     C                   if        *in92 = *off
     C                   z-add     kcwedt        wkdt
     C                   else
     C                   z-add     20070101      wkdt
     C                   endif
      *
     C                   exsr      $wedt
     C                   z-add     xxsatdt       ldfwedt
      *
      * Flip to MMDDYY
      *
     C     *iso          test(d)                 wkdt                   92
     C                   if        *in92 = *off                                 If OK date
     C                   move      wkdt          wkcymdiso
     C     *mdy          move      wkcymdiso     d1fwemdy
     C                   else
     C                   z-add     0             d1fwemdy
     C                   endif                                                  If OK date
      *
      *
      * Retrieve the most recent Kill/Cut Data record
      *
     C     *start        setll     tfp050
     C                   read      tfp050                                 92
     C                   if        *in92 = *off
     C                   z-add     kcwedt        wkdt
     C                   else
     C                   z-add     20070101      wkdt
     C                   endif
      *
     C                   exsr      $wedt
     C                   z-add     xxsatdt       ldtwedt
      *
      * Flip to MMDDYY
      *
     C     *iso          test(d)                 wkdt                   92
     C                   if        *in92 = *off                                 If OK date
     C                   move      wkdt          wkcymdiso
     C     *mdy          move      wkcymdiso     d1twemdy
     C                   else
     C                   z-add     0             d1twemdy
     C                   endif                                                  If OK date
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad Saturday
     C                   z-add     0             wkmdy
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   endif                                                  If bad Saturday
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Populate LDA fields.
      *
      *
     C                   z-add     d1fwemdy      ldfwemdy
     C                   z-add     d1twemdy      ldtwemdy
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1fmdy        parm                    xxfmdy
     C     d1tmdy        parm                    xxtmdy
     C                   parm                    rtncd
      *
      * Key lists
      *   None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
     C                   z-add     0             ldfwedt
     C                   z-add     0             ldfwemdy
     C                   z-add     0             ldtwedt
     C                   z-add     0             ldtwemdy
     C                   out       lda
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(TF4500CL)) JOB(KILLCUTLST) JOBQ(*JOBD)
