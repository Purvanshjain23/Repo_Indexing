// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDNMDFR
// ?Date: 14.08.2025 Time: 03:28:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?WHD 89095 RMC 6/24/2022 remove gate price check below
//?WHD 89095 RMC 1/12/2022 added on option 7 a call to
//?  make sure JPN shipped orders have the gate price adj price calculated
//?          if they were Gate priced before ship, they wont
//?** 06/25/2020 E216653 JBB Add option 6 to print/fax/email Ack
//?** 06/05/2013 E2622 RMC display credit hold
//?** 04/08/2013 E2540 RMC display od price type - dsp neg if on any dtl
//?** 01/09/2013 E22247 RMC display mpr sts
//?** 02/10/2012 RMC
//?** For Opt 10 -- chg price audit sts to "N"eeds it so entering mkt prices
//?   wont chg it to priced and ready for invoicing.Also chg OD
//?** 02/13/2006 LJB
//?** If this program is an "IC" selection from the menu then
//?** skip the check for authorized salesperson. This request is
//?** from the accounting dept and they are authorized to all records.
//?*****
//?** 05/30/2006 LJB OMS047
//?** PDNEDFR is no longer being used. Change to use the new Work With
//?**    Price Maintenance program (POH8DFR).
//?*****
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?USER: Initialize subfile control

//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Salesperson Code = PAR.Salesperson Code
CTL.Salesperson_Code = PAR.Salesperson_Code;

// PAR.Salesperson Code 1 = PAR.Salesperson Code
PAR.Salesperson_Code_1 = PAR.Salesperson_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?Last part of title
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// CTL.Description Usr - 50 = CONCAT(CTL.Description Usr - 50,CON.** Inter-Co Customers,CON.1)
CTL.Description_Usr_50 = CTL.Description_Usr_50 + '** Inter-Co Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is 3rd Party Customer(s)
IF PAR.Process_Cust_Types_Usr = 'TP';

// CTL.Description Usr - 50 = CONCAT(CTL.Description Usr - 50,CON.** 3rd Party Customers,CON.1)
CTL.Description_Usr_50 = CTL.Description_Usr_50 + '** 3rd Party Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is All Customers
IF PAR.Process_Cust_Types_Usr = 'BT';

// CTL.Description Usr - 50 = CONCAT(CTL.Description Usr - 50,CON.** *All Customers,CON.1)
CTL.Description_Usr_50 = CTL.Description_Usr_50 + '** *All Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is Selection by Order/Load
IF PAR.Process_Cust_Types_Usr = 'OR';

// CTL.Description Usr - 50 = CONCAT(CTL.Description Usr - 50,CON.**Selection by Order/,CON.1)
CTL.Description_Usr_50 = CTL.Description_Usr_50 + '**Selection by Order/' (1);

// CTL.Description Usr - 50 = CONCAT(CTL.Description Usr - 50,CON.Load,CON.*ZERO)
CTL.Description_Usr_50 = CTL.Description_Usr_50 + 'Load' (0);

ENDIF;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('ODPRCTYPRQ');
PARAMETER(LCL.OD_Price_Type_Req_STS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Warehouse Code = CTL.Warehouse Code
LCL.Warehouse_Code = CTL.Warehouse_Code;

//?USER: Initialize subfile record from DBF record

//?Select company if entered.
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select salesperson if entered.
CASE;

// IF CTL.Salesperson Code is entered
IF CTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(WRK.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.Salesperson Code NE WRK.Salesperson Code
IF CTL.Salesperson_Code <> WRK.Salesperson_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Price Type-overallRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2064431;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.OD_Price_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?price type - return NEG if more than NEG on the order
 CASE;

 // IF DB1.OD Price Type NE PAR.OD Price Type
 IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

 CASE;

 // IF PAR.OD Price Type is Negotiated
 IF PAR.OD_Price_Type = 'NEG';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.OD Price Type = DB1.OD Price Type
 PAR.OD_Price_Type = DB1.OD_Price_Type;

 ENDIF;

 ENDIF;

 //?price mthd - return MAN if more than MAN on the order
 CASE;

 // IF DB1.Price Method Code NE PAR.Price Method Code
 IF DB1.Price_Method_Code <> PAR.Price_Method_Code;

 CASE;

 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Price Method Code = DB1.Price Method Code
 PAR.Price_Method_Code = DB1.Price_Method_Code;

 ENDIF;

 ENDIF;

}


//?SEL: NEG price type order
CASE;

// IF CTL.OD Price Type is *NONE
IF CTL.OD_Price_Type = *BLANK;

//?SEL: NEG price type order
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Price Type-sel    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2064432;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.OD_Price_Type);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Initialize routine

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?quit if any matches par.od price type
 CASE;

 // IF DB1.OD Price Type EQ PAR.OD Price Type
 IF DB1.OD_Price_Type = PAR.OD_Price_Type;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Selected       USR is yes
IF LCL.Record_Selected_USR = 'Y';

// RCD.OD Price Type = CTL.OD Price Type
RCD.OD_Price_Type = CTL.OD_Price_Type;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: price method order
CASE;

// IF CTL.Price Method Code is Blank
IF CTL.Price_Method_Code = *BLANK;

//?SEL: price method order
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Price Meth-sel    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2073275;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Initialize routine

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?quit if any matches par.price method code
 CASE;

 // IF DB1.Price Method Code EQ PAR.Price Method Code
 IF DB1.Price_Method_Code = PAR.Price_Method_Code;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Selected       USR is yes
IF LCL.Record_Selected_USR = 'Y';

// RCD.Price Method Code = CTL.Price Method Code
RCD.Price_Method_Code = CTL.Price_Method_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

EXECUTE FUNCTION(RTV MPR Sts           RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2059531;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SEL: MPR Sts
CASE;

// IF CTL.OD MPR Sent to USDA Sts is Not Blank
IF CTL.OD_MPR_Sent_to_USDA_Sts = 'N'/'Y';

CASE;

// IF CTL.OD MPR Sent to USDA Sts NE RCD.OD MPR Sent to USDA Sts
IF CTL.OD_MPR_Sent_to_USDA_Sts <> RCD.OD_MPR_Sent_to_USDA_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?SEL: Warehouse Code
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

CASE;

// IF CTL.Warehouse Code NE RCD.Warehouse Code
IF CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude all but invoice types
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Billing Activity Type is Not Invoice
IF DB1.Billing_Activity_Type = '2'/'3'/'4';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select on the Customer Type for this Order
DO;

//?** Add Inter-Co Customer's code                      2/13/06 LJB
EXECUTE FUNCTION(Rtv Co/Customer Type) TYPE(RTVOBJ) FILE(CAEOREP)               AC1758338;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Type Code = CON.*BLANK
 PAR.Type_Code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF WRK.Type Code EQ PAR.Process Cust Types Usr
IF WRK.Type_Code = PAR.Process_Cust_Types_Usr;

// IF PAR.Process Cust Types Usr is Both Selection
IF PAR.Process_Cust_Types_Usr = 'BT';

// IF PAR.Process Cust Types Usr is Selection by Order/Load
IF PAR.Process_Cust_Types_Usr = 'OR';

// IF PAR.Process Cust Types Usr is 3rd Party Customer
IF PAR.Process_Cust_Types_Usr = 'TP';

CASE;

// IF WRK.Type Code is 3rd Party Customer
IF WRK.Type_Code <> 'IC';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDDO;

//?CALC: Subfile control function fields

//?F4=Prompt - Warehouse Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('O/P');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.Salesperson Code 1 NE CTL.Salesperson Code
IF PAR.Salesperson_Code_1 <> CTL.Salesperson_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Salesperson Code 1 = CTL.Salesperson Code
PAR.Salesperson_Code_1 = CTL.Salesperson_Code;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// CTL.Name = CON.*BLANK
CTL.Name = *BLANK;

// CTL.Salesperson Name = CON.*BLANK
CTL.Salesperson_Name = *BLANK;

//?F4 Select company and salesperson
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// IF PGM.*Cursor field <IS> CTL.Salesperson Code
IF PGM.*Cursor_field = CTL.Salesperson_Code;

// Call program SEL Salesperson All    SR.
CALL PROGRAM(SEL Salesperson All    SR) ('PDFASRR');
PARAMETER(CTL.Salesperson_Code);

ENDIF;

ENDIF;

//?Validate Company if entered
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number &1 not found'
ERROR(USR2008);
MSGPARM(CTL.Company_Number);

ENDIF;

ENDIF;

//?Validate salesperson if entered
CASE;

// IF CTL.Salesperson Code is entered
IF CTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(CTL.Salesperson_Code);

ENDIF;

ENDIF;

//?ctl  Warehouse
CASE;

// IF LCL.Warehouse Code NE CTL.Warehouse Code
IF LCL.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?ctl  ship to city
CASE;

// IF LCL.City 11 USR NE CTL.City 11 USR
IF LCL.City_11_USR <> CTL.City_11_USR;

// LCL.City 11 USR = CTL.City 11 USR
LCL.City_11_USR = CTL.City_11_USR;

// CTL.Ship To City = CTL.City 11 USR
CTL.Ship_To_City = CTL.City_11_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?ctl price type
CASE;

// IF LCL.OD Price Type NE CTL.OD Price Type
IF LCL.OD_Price_Type <> CTL.OD_Price_Type;

// LCL.OD Price Type = CTL.OD Price Type
LCL.OD_Price_Type = CTL.OD_Price_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?ctl MPR Sts
CASE;

// IF LCL.OD MPR Sent to USDA Sts NE CTL.OD MPR Sent to USDA Sts
IF LCL.OD_MPR_Sent_to_USDA_Sts <> CTL.OD_MPR_Sent_to_USDA_Sts;

// LCL.OD MPR Sent to USDA Sts = CTL.OD MPR Sent to USDA Sts
LCL.OD_MPR_Sent_to_USDA_Sts = CTL.OD_MPR_Sent_to_USDA_Sts;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?ctl price method
CASE;

// IF LCL.Price Method Code NE CTL.Price Method Code
IF LCL.Price_Method_Code <> CTL.Price_Method_Code;

// LCL.Price Method Code = CTL.Price Method Code
LCL.Price_Method_Code = CTL.Price_Method_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_Address_Line_1);
PARAMETER(RCD.Ship_To_Address_Line_2);
PARAMETER(RCD.Ship_To_Address_Line_3);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Ship_To_Zip_Postal_Code);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Bill_to_Address_Line_1);
PARAMETER(RCD.Bill_to_Address_Line_2);
PARAMETER(RCD.Bill_to_Address_Line_3);
PARAMETER(RCD.Bill_to_City);
PARAMETER(RCD.Bill_to_State_Code);
PARAMETER(RCD.Bill_to_Zip_Postal_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Cancel_Date);
PARAMETER(RCD.Terms_Code);
PARAMETER(RCD.Special_Instructions);
PARAMETER(RCD.Special_Instructions_2);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(RCD.Order_Type_Print_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.User_Original_Entry);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Accounts_Receiv_Ent_1);
PARAMETER(RCD.Accounts_Receiv_Ent_2);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Absorbed_Freight_Rate_CWT);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.LTL_Flag);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Shrink_Wrap);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Attach_to_Invoice_Number);
PARAMETER(RCD.Load_Plan_Order);
PARAMETER(RCD.Print_Pick_Slip);
PARAMETER(RCD.Resell_Reference_Number);
PARAMETER(RCD.Special_Comment_1);
PARAMETER(RCD.Special_Comment_2);
PARAMETER(RCD.Affect_Auto_Accruals);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Manager_Level_Code);
PARAMETER(RCD.VP_Level_Code);
PARAMETER(RCD.Attach_to_Order_Number);
PARAMETER(RCD.Reason_for_Price_Audit);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Invoice_Date);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.A_R_order_Value_Total);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(RCD.Order_Certification_Flag);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV Salesprsn Author.  XF.
CALL PROGRAM(RTV Salesprsn Author.  XF) ('PDNQXFR');
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Access_Denied_Y_N);
PARAMETER(PAR.Salesperson_Code);
PARAMETER('PA');

//?5=Display Order, 6=Order Ackn, 7=Price Audit, 10=Price Maintenance
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Pricing Info-Ship  DF.
CALL PROGRAM(DSP Pricing Info-Ship  DF) ('PDNVDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Sales_Route_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

//?** 06/25/2020 E216653 JBB Add option 6 to print/fax/email Ack
// Call program PMT Order Acknowledge PV.
CALL PROGRAM(PMT Order Acknowledge PV) ('PURKPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(RCD.OH_Load_Plan_Ready);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Salesperson_Name);

// IF RCD.*SFLSEL is *Price Audit
IF RCD.*SFLSEL = '7'/'7';

//?** Process "Access Denied" if not Inter-Co Customer (accounting)
CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// AND PAR.Process Cust Types Usr is Not Inter-Co Customer's
AND PAR.Process_Cust_Types_Usr = 'BT'/'OR'/'TP';

// Send error message - 'Price Audit Access Denied. Not authorized to audit this salesperson's order
ERROR(USR1946);
MSGPARM(RCD.*SFLSEL);

//?** Process "Access Denied" if not Inter-Co Customer (accounting)
// IF *OTHERWISE
IF *OTHERWISE;

//?VAL: Price Type
CASE;

// IF LCL.OD Price Type Req STS USR is yes
IF LCL.OD_Price_Type_Req_STS_USR = 'Y';

EXECUTE FUNCTION(Val Price Type Entry  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1888439;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF DB1.OD Price Type is *NONE
 IF DB1.OD_Price_Type = *BLANK;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?VAL: Price Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Record Found -OrdDtlUSR = CND.Record Not Found
LCL.Record_Found_OrdDtlUSR = 'N';

ENDIF;

//?Only allow price audit if order has Flagged records
CASE;

// IF RCD.Price Audit is Needs Price Audit
IF RCD.Price_Audit = 'N';

// AND RCD.Price Status is Priced
AND RCD.Price_Status = 'P';

// AND LCL.Record Found -OrdDtlUSR is Record Not Found
AND LCL.Record_Found_OrdDtlUSR = 'N';

// Call program DSP Price Audit       DF.
CALL PROGRAM(DSP Price Audit       DF) ('PDNZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Sales_Route_Code);

//?Return message
CASE;

// IF PGM.*Return code is Price Audit Completed
IF PGM.*Return_code = 'PAC';

EXECUTE FUNCTION(CRT Price Audit Log    CR) TYPE(CRTOBJ) FILE(PDKXCPP)          AC1409016;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('MSG');
PARAMETER(RCD.Price_Audit);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

}


// Send information message - 'Price Audit Completed for Order &1'
MESSAGE(USR1947 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Only allow price audit if order has Flagged records
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Audit Not Allowed:Audit Not Required, Not Priced, or Price Type Not Entered
ERROR(USR1949);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

//?** Process "Access Denied" if not Inter-Co Customer (accounting)
CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// AND PAR.Process Cust Types Usr is Not Inter-Co Customer's
AND PAR.Process_Cust_Types_Usr = 'BT'/'OR'/'TP';

// Send error message - 'Price Audit Access Denied. Not authorized to audit this salesperson's order
ERROR(USR1946);
MSGPARM(RCD.*SFLSEL);

//?** Process "Access Denied" if not Inter-Co Customer (accounting)
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Price Audit is Manually/Auto Price Audit
IF RCD.Price_Audit = 'A'/'M';

// OR RCD.Price Status is Priced
OR RCD.Price_Status = 'P';

EXECUTE FUNCTION(CHG Price Audit/Status CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1808535;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


EXECUTE FUNCTION(UPD UnAccp Price Audit RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2035626;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(CHG Price Audit        CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1307906;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


EXECUTE FUNCTION(CRT Price Audit Log    CR) TYPE(CRTOBJ) FILE(PDKXCPP)          AC1409016;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('UPA');
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

}


ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

//?Only allow price maintenance for entered - shipped orders
CASE;

// IF RCD.Header Status is Not closed or cancelled
IF RCD.Header_Status = 'L'/'A'/'R'/'E'/'H';

// AND RCD.Event Code is Entered Thru 04 Ship
AND RCD.Event_Code >= '01';
AND RCD.Event_Code <= '04';

// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER('PM');

// Call program WW Details f/Maint     DF.
CALL PROGRAM(WW Details f/Maint     DF) ('POH8DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Billing_Activity_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Only allow price maintenance for entered - shipped orders
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order must be shipped but not invoiced to perform price maintenance.'
ERROR(USR2356);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

