// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBUCE1R
// ?Date: 14.08.2025 Time: 03:49:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('SS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.F-Key Selected USR = CND.No
PAR.F_Key_Selected_USR = 'N';

// LCL.Sales Sold To Code = PAR.Sales Sold To Code
LCL.Sales_Sold_To_Code = PAR.Sales_Sold_To_Code;

//?S16143 DN 02/10/20-Added Update Flag.
// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?USER: Initialize detail screen (existing record)

//?Get Name of Parent Customer
// Call program RTV Customer Name     XF.
CALL PROGRAM(RTV Customer Name     XF) ('PPH6XFR');
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.USR_Bill_To_Customer_Name);

CASE;

// IF PAR.Sales Sold To Code is NE Zero
IF PAR.Sales_Sold_To_Code <> *ZERO;

// DTL.Sales Sold To Code = PAR.Sales Sold To Code
DTL.Sales_Sold_To_Code = PAR.Sales_Sold_To_Code;

// DTL.Sales Sold To Code USR = PAR.Sales Sold To Code
DTL.Sales_Sold_To_Code_USR = PAR.Sales_Sold_To_Code;

//?R14719 DN 03/28/19-Added Sales Sold To Sub Class.
EXECUTE FUNCTION(Rtv Sales Sold To     RT) TYPE(RTVOBJ) FILE(PBB5REP)           AC2116214;
PARAMETER(DTL.Sales_Sold_To_Code);
PARAMETER(DTL.Sales_Sold_To_Desc);
PARAMETER(DTL.Sales_Sold_To_DP_Class);
PARAMETER(DTL.Sales_Sold_To_Sub_Class);
PARAMETER(DTL.Sales_Sold_To_Salesperson);
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sales Chnl Mkt    RT) TYPE(RTVOBJ) FILE(PBCAREP)           AC2114822;
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(DTL.SC_Market_Description);
PARAMETER(DTL.Field_Representative);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.SC_Territory_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sales Chnl Terr   RT) TYPE(RTVOBJ) FILE(PBB9REP)           AC2113996;
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Territory_Code);
PARAMETER(DTL.SC_Territory_Description);
PARAMETER(DTL.SC_Territory_Manager);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(DP Class Desc DRV) TYPE(DRVFLD)                                AC2114254;
PARAMETER(DTL.DP_Class_Desc_DRV);
PARAMETER(DTL.Sales_Sold_To_DP_Class);
{
 //?Calculate derived field

 // PAR.DP Class Desc DRV = Condition name of PAR.Sales Sold To DP Class
 PAR.DP_Class_Desc_DRV = RTVCND(PAR.Sales_Sold_To_DP_Class);

}


EXECUTE FUNCTION(Sales Channel Desc DRV) TYPE(DRVFLD)                           AC2113803;
PARAMETER(DTL.Sales_Channel_Desc_DRV);
PARAMETER(DTL.Sales_Channel_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Sales Chnl ALL    RT) TYPE(RTVOBJ) FILE(PBB4REP)           AC2113885;
 PARAMETER(PAR.Sales_Channel_Code);
 PARAMETER(PAR.Sales_Channel_Desc_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(DTL.Salesperson_Name_DRV);
PARAMETER(DTL.Sales_Sold_To_Salesperson);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV 2) TYPE(DRVFLD)                           AC2114843;
PARAMETER(DTL.Salesperson_Name_DRV_2);
PARAMETER(DTL.Field_Representative);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV_2);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Broker Name DRV) TYPE(DRVFLD)                                  AC1675815;
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(DTL.Broker_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Broker_Name_DRV);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(NLL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV 3) TYPE(DRVFLD)                           AC2114844;
PARAMETER(DTL.Salesperson_Name_DRV_3);
PARAMETER(DTL.SC_Territory_Manager);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(SST Sub Class Desc DRV) TYPE(DRVFLD)                           AC2169318;
PARAMETER(DTL.SST_Sub_Class_Desc_DRV);
PARAMETER(DTL.Sales_Sold_To_Sub_Class);
{
 //?Calculate derived field

 // PAR.SST Sub Class Desc DRV = Condition name of PAR.Sales Sold To Sub Class
 PAR.SST_Sub_Class_Desc_DRV = RTVCND(PAR.Sales_Sold_To_Sub_Class);

}


ENDIF;

//?USER: Validate detail screen fields

//?F4=Prompt Sales To Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Sales Sold To Code USR
IF PGM.*Cursor_field = DTL.Sales_Sold_To_Code_USR;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Sel Sales Sold To     DF.
CALL PROGRAM(Sel Sales Sold To     DF) ('PBUEDFR');
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(DTL.Sales_Sold_To_Code_USR);

// DTL.Sales Sold To Code = DTL.Sales Sold To Code USR
DTL.Sales_Sold_To_Code = DTL.Sales_Sold_To_Code_USR;

ENDIF;

//?R14719 DN 03/29/19-Moved Function Keys Here to Defer Confirm Prompt.
//?F7=Edit Sales Sold To
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?S16143 DN 02/11/20-Added Ship To Customer # & USR Update Flag &
//?  Create Sales Cust Sold To Log.
// Call program Edt Sales Sold To     E1.
CALL PROGRAM(Edt Sales Sold To     E1) ('PBT6E1R');
PARAMETER(DTL.Sales_Sold_To_Code);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Sales_Sold_To_Desc);
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(PAR.USR_Update_Flag);

//?S16143 DN 02/11/20-Commented Out & Moved Below.
//?S16143 DN 02/11/20-Send Completion Msg If Indeed Update was Done.
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

// Send information message - 'Sales Sold To '&1' changed.'
MESSAGE(USR4874 *INFO);
MSGPARM(DTL.Sales_Sold_To_Code);

ENDIF;

// PAR.F-Key Selected USR = CND.Yes
PAR.F_Key_Selected_USR = 'Y';

ENDIF;

//?F8=Edit Sales Chanell Territory
CASE;

// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?S16143 DN 02/12/20-Added Ship To Customer, USR Update Flag &
//?  Sales Sold To Code to Create Sales Cust Sold To Log.
// Call program Edt Sales Chnl Terr   E1.
CALL PROGRAM(Edt Sales Chnl Terr   E1) ('PBT1E1R');
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Territory_Code);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Sales_Sold_To_Code);
PARAMETER(PAR.USR_Update_Flag);

//?S16143 DN 02/12/20-Commented Out.
// PAR.F-Key Selected USR = CND.Yes
PAR.F_Key_Selected_USR = 'Y';

ENDIF;

//?F9=Edit Sales Channel Market
CASE;

// IF DTL.*CMD key is CF09
IF DTL.*CMD_key = '09';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?S16143 DN 02/12/20-Added Ship To Customer, USR Update Flag &
//?  Sales Sold To Code to Create Sales Cust Sold To Log.
// Call program Edt Sales Chnl Mkt    E1.
CALL PROGRAM(Edt Sales Chnl Mkt    E1) ('PBT4E1R');
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(DTL.SC_Market_Description);
PARAMETER(DTL.SC_Territory_Code);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Sales_Sold_To_Code);
PARAMETER(PAR.USR_Update_Flag);

//?S16143 DN 02/12/20-Commented Out & Moved Below.
//?S16143 DN 02/12/20-Send Completion Msg If Indeed Update was Done.
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

// Send information message - 'Sales Channel Market '&1' changed.'
MESSAGE(USR4876 *INFO);
MSGPARM(DTL.SC_Market_Code);

ENDIF;

// PAR.F-Key Selected USR = CND.Yes
PAR.F_Key_Selected_USR = 'Y';

ENDIF;

// DTL.Sales Sold To Code = DTL.Sales Sold To Code USR
DTL.Sales_Sold_To_Code = DTL.Sales_Sold_To_Code_USR;

//?CALC: Detail screen function fields

CASE;

// IF DTL.Sales Sold To Code USR is NE Zero
IF DTL.Sales_Sold_To_Code_USR <> *ZERO;

//?R14719 DN 03/28/19-Added Sales Sold To Sub Class.
EXECUTE FUNCTION(Rtv Sales Sold To     RT) TYPE(RTVOBJ) FILE(PBB5REP)           AC2116214;
PARAMETER(DTL.Sales_Sold_To_Code);
PARAMETER(DTL.Sales_Sold_To_Desc);
PARAMETER(DTL.Sales_Sold_To_DP_Class);
PARAMETER(DTL.Sales_Sold_To_Sub_Class);
PARAMETER(DTL.Sales_Sold_To_Salesperson);
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sales Chnl Mkt    RT) TYPE(RTVOBJ) FILE(PBCAREP)           AC2114822;
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(DTL.SC_Market_Description);
PARAMETER(DTL.Field_Representative);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.SC_Territory_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Sales Chnl Terr   RT) TYPE(RTVOBJ) FILE(PBB9REP)           AC2113996;
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Territory_Code);
PARAMETER(DTL.SC_Territory_Description);
PARAMETER(DTL.SC_Territory_Manager);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(DP Class Desc DRV) TYPE(DRVFLD)                                AC2114254;
PARAMETER(DTL.DP_Class_Desc_DRV);
PARAMETER(DTL.Sales_Sold_To_DP_Class);
{
 //?Calculate derived field

 // PAR.DP Class Desc DRV = Condition name of PAR.Sales Sold To DP Class
 PAR.DP_Class_Desc_DRV = RTVCND(PAR.Sales_Sold_To_DP_Class);

}


EXECUTE FUNCTION(Sales Channel Desc DRV) TYPE(DRVFLD)                           AC2113803;
PARAMETER(DTL.Sales_Channel_Desc_DRV);
PARAMETER(DTL.Sales_Channel_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Sales Chnl ALL    RT) TYPE(RTVOBJ) FILE(PBB4REP)           AC2113885;
 PARAMETER(PAR.Sales_Channel_Code);
 PARAMETER(PAR.Sales_Channel_Desc_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(DTL.Salesperson_Name_DRV);
PARAMETER(DTL.Sales_Sold_To_Salesperson);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV 2) TYPE(DRVFLD)                           AC2114843;
PARAMETER(DTL.Salesperson_Name_DRV_2);
PARAMETER(DTL.Field_Representative);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV_2);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Broker Name DRV) TYPE(DRVFLD)                                  AC1675815;
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(DTL.Broker_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Broker_Name_DRV);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(NLL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV 3) TYPE(DRVFLD)                           AC2114844;
PARAMETER(DTL.Salesperson_Name_DRV_3);
PARAMETER(DTL.SC_Territory_Manager);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(SST Sub Class Desc DRV) TYPE(DRVFLD)                           AC2169318;
PARAMETER(DTL.SST_Sub_Class_Desc_DRV);
PARAMETER(DTL.Sales_Sold_To_Sub_Class);
{
 //?Calculate derived field

 // PAR.SST Sub Class Desc DRV = Condition name of PAR.Sales Sold To Sub Class
 PAR.SST_Sub_Class_Desc_DRV = RTVCND(PAR.Sales_Sold_To_Sub_Class);

}


ENDIF;

EXECUTE FUNCTION(Record Status Desc DRV) TYPE(DRVFLD)                           AC1880188;
PARAMETER(DTL.Record_Status_Desc_DRV);
PARAMETER(DTL.Record_Status);
{
 //?Calculate derived field

 // PAR.Record Status Desc DRV = Condition name of PAR.Record Status
 PAR.Record_Status_Desc_DRV = RTVCND(PAR.Record_Status);

}


//?USER: Validate detail screen relations

//?E14347 JJH 01/10/18 - Validation for Sales Sold To Code
//?Validation for Sales Sold To Code
CASE;

// IF LCL.Sales Sold To Code NE DTL.Sales Sold To Code USR
IF LCL.Sales_Sold_To_Code <> DTL.Sales_Sold_To_Code_USR;

EXECUTE FUNCTION(Rtv ShpToCust Parent  RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2119908;
PARAMETER(DTL.Sales_Sold_To_Code_USR);
PARAMETER(LCL.Parent_Customer);
{
 //?USER: Initialize routine

 //?Modifications and Comments
 DO;

 //?E14347 JJH 01/10/19 - Verify Ship-to-Customer is Active
 ENDDO;

 //?USER: Processing if Data record not found

 // PAR.Parent Customer = CND.Not Entered
 PAR.Parent_Customer = *ZERO;

 //?USER: Process Data record

 //?E14347 JJH 01/10/19 - Verify Ship-to-Customer is Active
 EXECUTE FUNCTION(RTV Customer Info     RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1745979;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(NLL.Country_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Parent Customer is Not Entered
IF LCL.Parent_Customer = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Parent Customer NE LCL.Parent Customer
IF DTL.Parent_Customer <> LCL.Parent_Customer;

// Send error message - 'Sales Sold To &1 NOT allowed because it has a different Parent.'
ERROR(USR4903);
MSGPARM(DTL.Sales_Sold_To_Code);

// DTL.Sales Sold To Code USR = LCL.Sales Sold To Code
DTL.Sales_Sold_To_Code_USR = LCL.Sales_Sold_To_Code;

//?R14719 DN 03/28/19-Added Sales Sold To Sub Class.
EXECUTE FUNCTION(Rtv Sales Sold To     RT) TYPE(RTVOBJ) FILE(PBB5REP)           AC2116214;
PARAMETER(LCL.Sales_Sold_To_Code);
PARAMETER(DTL.Sales_Sold_To_Desc);
PARAMETER(DTL.Sales_Sold_To_DP_Class);
PARAMETER(DTL.Sales_Sold_To_Sub_Class);
PARAMETER(DTL.Sales_Sold_To_Salesperson);
PARAMETER(DTL.Sales_Channel_Code);
PARAMETER(DTL.SC_Market_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Sales Cst Sold To CH) TYPE(CHGOBJ) FILE(PBB6REP)           AC2113554;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Sales_Sold_To_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Sales_Sold_To_Salesperson);
PARAMETER(PAR.USR_Update_Flag);
{
 //?USER: Processing before Data read

 //?S16143 DN 02/10/20-Added Update Flag.
 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 //?USER: Processing after Data read

 //?S16143 DN 02/10/20-Save Before Sales Sold To Code.
 // PAR.Sales Sold To Code Before = DB1.Sales Sold To Code
 PAR.Sales_Sold_To_Code_Before = DB1.Sales_Sold_To_Code;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2118385;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Sales_Sold_To_Salesperson);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg SoldTo SalesRoute CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2118406;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Sales_Route_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?S16143 DN 02/10/20-Create Sales Cust Sold To Log Record.
 CASE;

 // IF PAR.Sales Sold To Code Before NE DB1.Sales Sold To Code
 IF PAR.Sales_Sold_To_Code_Before <> DB1.Sales_Sold_To_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 EXECUTE FUNCTION(Crt Sales Cust Sold To CR) TYPE(CRTOBJ) FILE(PUBTCPP)          AC2180649;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Sales_Sold_To_Code);
 PARAMETER(PAR.Sales_Sold_To_Code_Before);
 PARAMETER(DB1.Sales_Sold_To_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  // Execute function Get System Date/Time  US.
  EXECUTE FUNCTION(Get System Date/Time  US) TYPE(EXCUSRSRC) ('PUPFUFR');
  PARAMETER(LCL.System_Date_Nbr_USR);
  PARAMETER(LCL.System_Time_USR);
  {
   * Get System Date & Time
   C                     MOVE *DATE     #OC0NZ           CCYYMMDD
   C                     TIME           #OENTM           HHMMSS
  }

  // LCL.System Date D8# USR = LCL.System Date Nbr USR
  LCL.System_Date_D8#_USR = LCL.System_Date_Nbr_USR;

  // DB1.SCSTL Created Date = LCL.System Date D8# USR
  DB1.SCSTL_Created_Date = LCL.System_Date_D8#_USR;

  // DB1.SCSTL Created Time = LCL.System Time USR
  DB1.SCSTL_Created_Time = LCL.System_Time_USR;

  // DB1.SCSTL Created User = JOB.*USER
  DB1.SCSTL_Created_User = JOB.*USER;

  // DB1.SCSTL Created Program = JOB.*PROGRAM
  DB1.SCSTL_Created_Program = JOB.*PROGRAM;

 }

 ENDIF;

}


//?USER: Exit program processing

//?R14719 DN 03/29/19-Force Exit & Break Loop Cycle.
// PAR.F-Key Selected USR = CND.No
PAR.F_Key_Selected_USR = 'N';

//?S16143 DN 02/10/20-Commented Out & Moved Below.
//?S16143 DN 02/10/20-Send Completion Msg If Indeed Update was Done.
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

// Send completion message - 'Ship To Customer '&1' changed.'
MESSAGE(USR4871 *COMPLETION);
MSGPARM(KEY.Ship_To_Customer);

ENDIF;

