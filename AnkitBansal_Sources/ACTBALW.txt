     Z* CRTBNDRPG
     Z* DFTACTGRP(*NO) BNDDIR(YBNDDIR) DBGVIEW(*SOURCE)
     Z* CVTOPT(*DATETIME) ACTGRP(*CALLER) OPTIMIZE(*BASIC)
      *****************  RPG PROGRAM HEADING  ************************
      *
      * ENVIRONMENT:  J.D. Edwards
      * PROGRAM:      ACTBALW
      * TITLE:        Retrieve Balance for Account ID from JDE World
      * AUTHOR:       Brad Baden
      * CREATED:       3/13/2020
      *
      * FUNCTION: This program retrieves the balance for an account id
      *           by summing the values for the specified periods in a
      *           single year.
      *
      *           This is the JDE World version of ACTBAL.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 02/02/06  Alice Brownfield
      *           Changed the logic to always add in the Balance Forward
      *           amount and then add in the appropriate period amounts.
      *           the program was not adding in the Balance Forward.
      *
      *  3/11/20  Brad Baden   SDN465   TFS# 16169
      *           This source was copied from source ACTBAL in library
      *           JFOODCUST and renamed to ACTBALW.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ff0902le   if   e           k disk
      *    account balances
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *
      * Parm fields
      *
     D xxaid           s                   like(gbaid)
     D xxam            s             15  2
     D xxyear          s              4  0
     D xxfrper         s              2  0
     D xxthper         s              2  0
      *
      *
      * Workfields
      *
     D wkam            s                   like(gban01)
      *
      *
      *---------------------------------------------------------------
      * Data structure for breaking year into CC and YY components
      *---------------------------------------------------------------
      *
     D wkyear          ds
     D   wkccyy                       4  0
     D   wkcc                         2  0 overlay(wkccyy:1)
     D   wkyy                         2  0 overlay(wkyear:3)
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        xxaid = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Retrieve the account balance record
      *
     C     key01         chain     f0902le                            92
     C                   if        *in92 = *off                                 If hit
      * temporary
     C                   z-add     1             xxfrper
      *
      * Always add in the Balance Forward amount first
      *
     C                   add       gbapyc        wkam
      *
      * Check all periods in the record. If a period falls into the
      * selected period range, then accumulate its value.
      *
     C                   if        1 >= xxfrper and 1 <= xxthper
     C                   add       gban01        wkam
     C                   endif
      *
     C                   if        2 >= xxfrper and 2 <= xxthper
     C                   add       gban02        wkam
     C                   endif
      *
     C                   if        3 >= xxfrper and 3 <= xxthper
     C                   add       gban03        wkam
     C                   endif
      *
     C                   if        4 >= xxfrper and 4 <= xxthper
     C                   add       gban04        wkam
     C                   endif
      *
     C                   if        5 >= xxfrper and 5 <= xxthper
     C                   add       gban05        wkam
     C                   endif
      *
     C                   if        6 >= xxfrper and 6 <= xxthper
     C                   add       gban06        wkam
     C                   endif
      *
     C                   if        7 >= xxfrper and 7 <= xxthper
     C                   add       gban07        wkam
     C                   endif
      *
     C                   if        8 >= xxfrper and 8 <= xxthper
     C                   add       gban08        wkam
     C                   endif
      *
     C                   if        9 >= xxfrper and 9 <= xxthper
     C                   add       gban09        wkam
     C                   endif
      *
     C                   if        10 >= xxfrper and 10 <= xxthper
     C                   add       gban10        wkam
     C                   endif
      *
     C                   if        11 >= xxfrper and 11 <= xxthper
     C                   add       gban11        wkam
     C                   endif
      *
     C                   if        12 >= xxfrper and 12 <= xxthper
     C                   add       gban12        wkam
     C                   endif
      *
     C                   if        13 >= xxfrper and 13 <= xxthper
     C                   add       gban13        wkam
     C                   endif
      *
      * Now, divide the accumulated amount by 100.  JDE holds amount in
      * a 15,0 field---but it really represents two decimal places.
      *
     C     wkam          div       100           xxam
      *
     C                   endif                                                  If hit
      *
     C                   seton                                        lr
      /EJECT
      *---------------------------------------------------------------
      * *inzsr - initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxaid
     C                   kfld                    wkcc
     C                   kfld                    wkyy
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    xxaid
     C     wkccyy        parm                    xxyear
     C                   parm                    xxfrper
     C                   parm                    xxthper
     C                   parm                    xxam
      *
      *
     C                   endsr
      /EJECT
