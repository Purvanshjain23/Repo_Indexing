// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBLJDFR
// ?Date: 14.08.2025 Time: 03:48:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Download Type = PAR.Download Type
WRK.Download_Type = PAR.Download_Type;

// WRK.USR Customer PO # = PAR.Customer Purchase Order #
WRK.USR_Customer_PO_# = PAR.Customer_Purchase_Order_#;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

//?USER: Initialize subfile control

// CTL.A/R Customer Number = PAR.A/R Customer Number
CTL.AR_Customer_Number = PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Bill To Cust Name  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2066378;
PARAMETER(CTL.Customer_Name_DRV);
PARAMETER(CTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.A/R Customer Number EQ DB1.A/R Customer Number
 IF PAR.AR_Customer_Number = DB1.AR_Customer_Number;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Load ID = PAR.Load ID
CTL.Load_ID = PAR.Load_ID;

//?From and Thru dates
// CTL.Actual Shipped Date = PAR.Actual Shipped Date
CTL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

// CTL.Actual Ship Date = PAR.Actual Ship Date
CTL.Actual_Ship_Date = PAR.Actual_Ship_Date;

//?Customer Purchase Order# contains either a full or partial PO#
// CTL.USR Customer PO # = PAR.Customer Purchase Order #
CTL.USR_Customer_PO_# = PAR.Customer_Purchase_Order_#;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

SET CURSOR;

//?** See if Cust PO# begins with the po# that was passed in.
//?** Change cust po# to a HIGH VALUE by filling it with 9's
//?** this will create a range for the program to test
CASE;

// IF PAR.Download Type is Partial PO#
IF PAR.Download_Type = 'P';

// WRK.USR Customer PO # = PAR.Customer Purchase Order #
WRK.USR_Customer_PO_# = PAR.Customer_Purchase_Order_#;

// Call program CLC Fill Str with Char UP.
CALL PROGRAM(CLC Fill Str with Char UP) ('PBI2UPC');
PARAMETER(WRK.USR_Customer_PO_#);
PARAMETER(15);
PARAMETER(9);

ENDIF;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// WRK.*Record selected = CND.*YES
WRK.*Record_selected = 'Y';

// LCL.Purchase Order # 1 usr = CON.*BLANK
LCL.Purchase_Order_#_1_usr = *BLANK;

// LCL.Purchase Order # 2 usr = CON.*BLANK
LCL.Purchase_Order_#_2_usr = *BLANK;

//?** Test for order type = 'OR' only
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Order Type - Sales is Not Regular Order
IF DB1.Order_Type_Sales <> 'OR';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test date range
CASE;

// IF CTL.Actual Shipped Date is entered
IF CTL.Actual_Shipped_Date <> *ZERO;

//?** Select only within date range
CASE;

// IF DB1.Actual Shipped Date LT CTL.Actual Shipped Date
IF DB1.Actual_Shipped_Date < CTL.Actual_Shipped_Date;

// OR DB1.Actual Shipped Date GT CTL.Actual Ship Date
OR DB1.Actual_Shipped_Date > CTL.Actual_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching a/r customer
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Customer# passed in, only select matching
CASE;

// IF PAR.A/R Customer Number is not equal to zero
IF PAR.AR_Customer_Number <> *ZERO;

// AND DB1.A/R Customer Number NE PAR.A/R Customer Number
AND DB1.AR_Customer_Number <> PAR.AR_Customer_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching company #
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Company # passed in, only select matching
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND DB1.Company Number NE PAR.Company Number
AND DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching Load ID
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Load ID passed in, only select matching
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

// AND DB1.Load ID NE PAR.Load ID
AND DB1.Load_ID <> PAR.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching order#
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** If Order# passed in, only select matching
CASE;

// IF PAR.Order Number is Greater then zero
IF PAR.Order_Number > *ZERO;

// AND DB1.Order Number NE PAR.Order Number
AND DB1.Order_Number <> PAR.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Test for matching PO# or partial PO#
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Select matching PO# or "Begins With"
CASE;

// IF PAR.Customer Purchase Order # is NE Blank
IF PAR.Customer_Purchase_Order_# <> *BLANK;

//?* Select if PO# matches exactly
CASE;

// IF PAR.Customer Purchase Order # EQ DB1.Customer Purchase Order #
IF PAR.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

// WRK.*Record selected = CND.*YES
WRK.*Record_selected = 'Y';

//?* Select if PO# matches exactly
// IF *OTHERWISE
IF *OTHERWISE;

//?** Select PO# if it begins with the passed in string
CASE;

// IF DB1.A/R Customer Number EQ PAR.A/R Customer Number
IF DB1.AR_Customer_Number = PAR.AR_Customer_Number;

// AND DB1.Customer Purchase Order # GE PAR.Customer Purchase Order #
AND ( DB1.Customer_Purchase_Order_# >= PAR.Customer_Purchase_Order_#;

// AND DB1.Customer Purchase Order # LE WRK.USR Customer PO #
AND DB1.Customer_Purchase_Order_# <= WRK.USR_Customer_PO_# );

// WRK.*Record selected = CND.*YES
WRK.*Record_selected = 'Y';

//?** populate the Lo & Hi parms that will be passed to SQLs
// PAR.Purchase Order # 1 usr = PAR.Customer Purchase Order #
PAR.Purchase_Order_#_1_usr = PAR.Customer_Purchase_Order_#;

// PAR.Purchase Order # 2 usr = WRK.USR Customer PO #
PAR.Purchase_Order_#_2_usr = WRK.USR_Customer_PO_#;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Purchase Order # 1 usr = CON.*BLANK
LCL.Purchase_Order_#_1_usr = *BLANK;

// WRK.*Record selected = CND.*NO
WRK.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?**    If PO# passed in and no exact or "begins with" match, skip
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// AND WRK.*Record selected is *NO
AND WRK.*Record_selected = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Retrieve order gate price
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Order Gate Price  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1900008;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(RCD.Order_Gate_Final_Price);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Price Method Code = DB1.Price Method Code
 PAR.Price_Method_Code = DB1.Price_Method_Code;

 //?** Gate price is the same for all. Quit after non-zero price found.
 CASE;

 // IF DB1.Order Gate Price is Greater than zero
 IF DB1.Order_Gate_Final_Price > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// RCD.JPN Invoice Issuance Date = DB1.JPN Invoice Issuance Date
RCD.JPN_Invoice_Issuance_Date = DB1.JPN_Invoice_Issuance_Date;

// RCD.A/R Customer Number = DB1.A/R Customer Number
RCD.AR_Customer_Number = DB1.AR_Customer_Number;

//?If JPN issuance date is blank default with Invoice date
CASE;

// IF RCD.JPN Invoice Issuance Date is Not Entered
IF RCD.JPN_Invoice_Issuance_Date = *ZERO;

// RCD.JPN Invoice Issuance Date = DB1.Invoice Date
RCD.JPN_Invoice_Issuance_Date = DB1.Invoice_Date;

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(RTV Bill To Cust Name  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2066378;
PARAMETER(CTL.Customer_Name_DRV);
PARAMETER(CTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF PAR.A/R Customer Number EQ DB1.A/R Customer Number
 IF PAR.AR_Customer_Number = DB1.AR_Customer_Number;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?USER: Process subfile control (Pre-confirm)

//?* F6 to download to spreadsheet
CASE;

// IF CTL.*CMD key is Select Dwnload & Email
IF CTL.*CMD_key = '06';

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// PAR.Customer Number Pass  USR = CTL.A/R Customer Number
PAR.Customer_Number_Pass_USR = CTL.AR_Customer_Number;

// PAR.Order Number 1  PASS  USR = CTL.Order Number
PAR.Order_Number_1_PASS_USR = CTL.Order_Number;

// PAR.Order Number 2  PASS  USR = CTL.Load ID
PAR.Order_Number_2_PASS_USR = CTL.Load_ID;

// PAR.From Date Pass        USR = CTL.Actual Shipped Date
PAR.From_Date_Pass_USR = CTL.Actual_Shipped_Date;

// PAR.Thru Date Pass        USR = CTL.Actual Ship Date
PAR.Thru_Date_Pass_USR = CTL.Actual_Ship_Date;

// PAR.Date 1          PASS  USR = CTL.USR Date - ATR
PAR.Date_1_PASS_USR = CTL.USR_Date_ATR;

// PAR.System Value Numeric = CTL.Order Gate/Final Price
PAR.System_Value_Numeric = CTL.Order_Gate_Final_Price;

// Call program SBM Gate Downld        CL.
CALL PROGRAM(SBM Gate Downld        CL) ('PBK8UPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Purchase_Order_#_1_usr);
PARAMETER(PAR.Purchase_Order_#_2_usr);
PARAMETER(PAR.Download_Type);
PARAMETER(PAR.Email_Address);

CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// Send information message - 'Download has been submitted and will be emailed'
MESSAGE(USR4674 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?* F6 to download to spreadsheet
// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

RETURN;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=dsp ord inq
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER('OMS');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?1=Select to download
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

// LCL.Return Code Usr = CND.*Blank
LCL.Return_Code_Usr = *BLANK;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Customer Number Pass  USR = RCD.A/R Customer Number
PAR.Customer_Number_Pass_USR = RCD.AR_Customer_Number;

// PAR.Order Number 1  PASS  USR = RCD.Order Number
PAR.Order_Number_1_PASS_USR = RCD.Order_Number;

// PAR.Order Number 2  PASS  USR = RCD.Load ID
PAR.Order_Number_2_PASS_USR = RCD.Load_ID;

// PAR.Date 1          PASS  USR = CTL.USR Date - ATR
PAR.Date_1_PASS_USR = CTL.USR_Date_ATR;

// PAR.From Date Pass        USR = CTL.Actual Shipped Date
PAR.From_Date_Pass_USR = CTL.Actual_Shipped_Date;

// PAR.Thru Date Pass        USR = CTL.Actual Ship Date
PAR.Thru_Date_Pass_USR = CTL.Actual_Ship_Date;

// PAR.System Value Numeric = CTL.Order Gate/Final Price
PAR.System_Value_Numeric = CTL.Order_Gate_Final_Price;

// WRK.Download Type = CND.Full PO#
WRK.Download_Type = 'F';

// PAR.Purchase Order # 1 usr = CND.Blank
PAR.Purchase_Order_#_1_usr = *BLANK;

// PAR.Purchase Order # 2 usr = CND.Blank
PAR.Purchase_Order_#_2_usr = *BLANK;

// Call program SBM Gate Downld        CL.
CALL PROGRAM(SBM Gate Downld        CL) ('PBK8UPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(PAR.Purchase_Order_#_1_usr);
PARAMETER(PAR.Purchase_Order_#_2_usr);
PARAMETER(WRK.Download_Type);
PARAMETER(PAR.Email_Address);

// Send information message - 'Download has been submitted and will be emailed'
MESSAGE(USR4674 *INFO);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Exit program processing

RETURN;

