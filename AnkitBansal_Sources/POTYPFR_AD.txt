// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POTYPFR
// ?Date: 14.08.2025 Time: 12:06:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

//?EOF:  Scheduled Ship Date > Job Date
CASE;

// IF DB1.Scheduled Ship Date GT JOB.*Job date
IF DB1.Scheduled_Ship_Date > JOB.*Job_date;

// Execute function SET End of File 'A'    US.
EXECUTE FUNCTION(SET End of File 'A'    US) TYPE(EXCUSRSRC) ('PDGOUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE 'B'
}


ENDIF;

//?OMT:  Warehouse = Not Guymon Fresh
CASE;

// IF DB1.Warehouse Code is Not Guymon Fresh
IF DB1.Warehouse_Code <> 'GP1';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?OMT:  Order Type = Not Regular Order
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
{
 //?USER: Process Data record

 // PAR.Order Type - Sales = DB1.Order Type - Sales
 PAR.Order_Type_Sales = DB1.Order_Type_Sales;

 QUIT;

}


//?OMT:  Order Type = Not Regular Order
CASE;

// IF LCL.Order Type - Sales is Not Regular Order
IF LCL.Order_Type_Sales <> 'OR';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?OMT:  No Chill Items (Combos)
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?OMT:  No Chill Items (Combos)
CASE;

// IF LCL.Fresh Chilling Time is Not Entered
IF LCL.Fresh_Chilling_Time = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Scheduled Ship Date header format

// SUPPRESSED PRINT Deadline Depart Date LH header format

// SUPPRESSED PRINT Deadline Depart Time LH header format

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT Order Sequence Number header format

// SUPPRESSED PRINT Order Secondary Line Seq header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Shortage Qty      RT) TYPE(RTVOBJ) FILE(POB6CPP)           AC1660020;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(CUR.ODS_Quantity_Short);
PARAMETER(CUR.ODS_Weight_Short);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.ODS Quantity Short = PAR.ODS Quantity Short + DB1.ODS Quantity Short
 PAR.ODS_Quantity_Short = PAR.ODS_Quantity_Short + DB1.ODS_Quantity_Short;

 // PAR.ODS Weight Short = PAR.ODS Weight Short + DB1.ODS Weight Short
 PAR.ODS_Weight_Short = PAR.ODS_Weight_Short + DB1.ODS_Weight_Short;

}


CASE;

// IF CUR.ODS Quantity Short is EQ Zero
IF CUR.ODS_Quantity_Short = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(CUR.Ship_To_Name_DRV);
PARAMETER(CUR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// CUR.Quantity Scheduled = DB1.Quantity Scheduled - CUR.ODS Quantity Short
CUR.Quantity_Scheduled = DB1.Quantity_Scheduled - CUR.ODS_Quantity_Short;

// CUR.Weight Scheduled = DB1.Weight Scheduled - CUR.ODS Weight Short
CUR.Weight_Scheduled = DB1.Weight_Scheduled - CUR.ODS_Weight_Short;

// LCL.Quantity Scheduled = CUR.Quantity Scheduled
LCL.Quantity_Scheduled = CUR.Quantity_Scheduled;

// LCL.Weight Scheduled = CUR.Weight Scheduled
LCL.Weight_Scheduled = CUR.Weight_Scheduled;

// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Order_Sequence_Number);
PARAMETER(CUR.Order_Secondary_Line_Seq);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(CUR.Quantity_Ordered);
PARAMETER(CUR.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER('SC');
PARAMETER('SHPOFFCUT');

// CUR.Quantity Schedule Tot USR = LCL.Quantity Scheduled - CUR.Quantity Scheduled
CUR.Quantity_Schedule_Tot_USR = LCL.Quantity_Scheduled - CUR.Quantity_Scheduled;

CASE;

// IF DB1.Quantity Scheduled NE LCL.Quantity Scheduled
IF DB1.Quantity_Scheduled <> LCL.Quantity_Scheduled;

// LCL.ODS Quantity Short = DB1.Quantity Scheduled - LCL.Quantity Scheduled
LCL.ODS_Quantity_Short = DB1.Quantity_Scheduled - LCL.Quantity_Scheduled;

// LCL.ODS Weight Short = DB1.Weight Scheduled - LCL.Weight Scheduled
LCL.ODS_Weight_Short = DB1.Weight_Scheduled - LCL.Weight_Scheduled;

EXECUTE FUNCTION(Chg OrdDtl Sch-Consmd CH) TYPE(CHGOBJ) FILE(POB6CPP)           AC1647984;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Order_Sequence_Number);
PARAMETER(CUR.Order_Secondary_Line_Seq);
PARAMETER(*ZERO);
PARAMETER(*MISSING);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Consumed_Item_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER(CUR.ODS_Quantity_Short);
PARAMETER(CUR.ODS_Weight_Short);
PARAMETER(CUR.Deadline_Depart_Date_LH);
PARAMETER(CUR.Deadline_Depart_Time_LH);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Del OrdDtl Sch-Consmd DL) TYPE(DLTOBJ) FILE(POB6CPP)           AC1647985;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Order_Sequence_Number);
PARAMETER(CUR.Order_Secondary_Line_Seq);
PARAMETER(*ZERO);

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Order Secondary Line Seq totals format

// SUPPRESSED PRINT Order Sequence Number totals format

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Deadline Depart Time LH totals format

// SUPPRESSED PRINT Deadline Depart Date LH totals format

// SUPPRESSED PRINT Scheduled Ship Date totals format

// SUPPRESSED PRINT Company Number totals format

