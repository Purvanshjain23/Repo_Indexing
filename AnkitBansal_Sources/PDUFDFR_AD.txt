// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUFDFR
// ?Date: 14.08.2025 Time: 03:48:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(12);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile control

//?First Time
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

SET CURSOR;

//?select on order number
CASE;

// IF CTL.Order Number is Not equal to zeros
IF CTL.Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Cust Name Inv Date RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1467556;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Bill_to_Name);
PARAMETER(CTL.Invoice_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Bill to Name = DB1.Bill to Name
 PAR.Bill_to_Name = DB1.Bill_to_Name;

 // PAR.Invoice Date = DB1.Invoice Date
 PAR.Invoice_Date = DB1.Invoice_Date;

}


ENDIF;

//?select on name
CASE;

// IF CTL.Name 25A USR NE WRK.Blank for 30          USR
IF CTL.Name_25A_USR <> WRK.Blank_for_30_USR;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Name_25A_USR);
PARAMETER(CTL.Name_25A_USR);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// LCL.Name 25A USR = CTL.Name 25A USR
LCL.Name_25A_USR = CTL.Name_25A_USR;

ENDIF;

// LCL.EDI Invoice Sts = CTL.EDI Invoice Sts
LCL.EDI_Invoice_Sts = CTL.EDI_Invoice_Sts;

// LCL.Email Selection usr = CTL.Email Selection usr
LCL.Email_Selection_usr = CTL.Email_Selection_usr;

// LCL.Fax Invoice Flag = CTL.Fax Invoice Flag
LCL.Fax_Invoice_Flag = CTL.Fax_Invoice_Flag;

//?USER: Initialize subfile record from DBF record

//?Match company number
CASE;

// IF CTL.Company Number NE WRK.ZERO
IF CTL.Company_Number <> WRK.ZERO;

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Name 25A USR NE WRK.BLANK
IF CTL.Name_25A_USR <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Bill_to_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Exclude non-invoiced orders
CASE;

// IF DB1.Invoice Number EQ WRK.ZERO
IF DB1.Invoice_Number = WRK.ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude Credit/Debit Memos
CASE;

// IF DB1.Billing Activity Type is Credit Memo
IF DB1.Billing_Activity_Type = '2';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// PAR.Status - Y or N = CND.blank
PAR.Status_Y_or_N = *BLANK;

//?** Set Fax to Yes if it exists
// LCL.CDE Destination = CND.Blanks
LCL.CDE_Destination = *BLANK;

// LCL.CDE Name = CND.blanks
LCL.CDE_Name = *BLANK;

EXECUTE FUNCTION(RTV CDE Fax-1 only    RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC2056286;
PARAMETER(RCD.AR_Customer_Number);
PARAMETER('AR-INVOICE');
PARAMETER(*ZERO);
PARAMETER(LCL.CDE_Name);
PARAMETER('F');
PARAMETER(LCL.CDE_Destination);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Return 1st active record with a fax number
 CASE;

 // IF DB1.CDE Destination Type is Fax
 IF DB1.CDE_Destination_Type = 'F';

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

}


//?Set Fax Invoice Flag                                  P000198
CASE;

// IF LCL.CDE Destination is Entered
IF LCL.CDE_Destination <> *BLANK;

// RCD.Fax Invoice Flag = CND.Automatically Fax Invoice
RCD.Fax_Invoice_Flag = 'Y';

// RCD.Fax Invoice Contact Name = LCL.CDE Name
RCD.Fax_Invoice_Contact_Name = LCL.CDE_Name;

// RCD.Fax Invoice Fax Number = LCL.CDE Destination
RCD.Fax_Invoice_Fax_Number = LCL.CDE_Destination;

//?Set Fax Invoice Flag                                  P000198
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Fax Invoice Flag = CND.No Automatic Fax Invoice
RCD.Fax_Invoice_Flag = 'N';

ENDIF;

//?** Set Email to Yes if it exists
// LCL.CDE Destination = CND.Blanks
LCL.CDE_Destination = *BLANK;

// LCL.CDE Name = CND.blanks
LCL.CDE_Name = *BLANK;

//?04/16/19 DN R14851-Get Destination Type for Email or One Email/Invoice.
EXECUTE FUNCTION(RTV CDE 1st Eml only2 RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC2170556;
PARAMETER(RCD.AR_Customer_Number);
PARAMETER('AR-INVOICE');
PARAMETER(*ZERO);
PARAMETER(LCL.CDE_Name);
PARAMETER(LCL.CDE_Destination_Type);
PARAMETER(LCL.CDE_Destination);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Return 1st active record with an email address
 CASE;

 // IF DB1.CDE Destination Type is Email
 IF DB1.CDE_Destination_Type = 'E';

 // OR DB1.CDE Destination Type is One Email/Invoice
 OR DB1.CDE_Destination_Type = 'O';

 //?R14851 4/15/19  RMC ADDED Type = O
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

}


//?Set Email Invoice Flag                                P000198
CASE;

// IF LCL.CDE Destination is Entered
IF LCL.CDE_Destination <> *BLANK;

// RCD.Fax Invoice Contact Name = LCL.CDE Name
RCD.Fax_Invoice_Contact_Name = LCL.CDE_Name;

// RCD.Fax Invoice Fax Number = LCL.CDE Destination
RCD.Fax_Invoice_Fax_Number = LCL.CDE_Destination;

// RCD.Email Selection usr = CND.Yes
RCD.Email_Selection_usr = 'Y';

//?04/16/19 DN R14851-Set Email Selection usr='O' if Destination Type='O'.
CASE;

// IF LCL.CDE Destination Type is One Email/Invoice
IF LCL.CDE_Destination_Type = 'O';

// RCD.Email Selection usr = CND.One Email/Invoice
RCD.Email_Selection_usr = 'O';

ENDIF;

//?Set Email Invoice Flag                                P000198
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Email Selection usr = CND.No
RCD.Email_Selection_usr = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.EDI_Invoice_Sts);
PARAMETER(NLL.Print_Invoice_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?SEL: EDI Invoice Sts
CASE;

// IF CTL.EDI Invoice Sts is Y/N Values
IF CTL.EDI_Invoice_Sts = 'N'/'Y';

CASE;

// IF CTL.EDI Invoice Sts NE RCD.EDI Invoice Sts
IF CTL.EDI_Invoice_Sts <> RCD.EDI_Invoice_Sts;

//?04/17/19 DN R14851-Added Record Selected=*NO.
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Fax Invoice Sts
CASE;

// IF CTL.Fax Invoice Flag is *ALL values
IF CTL.Fax_Invoice_Flag = 'Y'/'N';

CASE;

// IF CTL.Fax Invoice Flag NE RCD.Fax Invoice Flag
IF CTL.Fax_Invoice_Flag <> RCD.Fax_Invoice_Flag;

//?04/17/19 DN R14851-Added Record Selected=*NO.
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?04/17/19 DN R14851-Replace 'SEL: Email Invoice Sts' to not use LST Value.
//?SEL: Email Invoice Sts                        04/17/19 DN R14851
CASE;

// IF CTL.Email Selection usr is Not Selected
IF CTL.Email_Selection_usr = *BLANK;

// OR CTL.Email Selection usr EQ RCD.Email Selection usr
OR CTL.Email_Selection_usr = RCD.Email_Selection_usr;

//?SEL: Email Invoice Sts                        04/17/19 DN R14851
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?USER: Process subfile control (Pre-confirm)

//?Reload sfl if select by name changes
CASE;

// IF CTL.Name 25A USR NE LCL.Name 25A USR
IF CTL.Name_25A_USR <> LCL.Name_25A_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload sfl if reload for EDI changes
CASE;

// IF CTL.EDI Invoice Sts NE LCL.EDI Invoice Sts
IF CTL.EDI_Invoice_Sts <> LCL.EDI_Invoice_Sts;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload sfl if Email Inv Sts Changes           04/17/19 DN R14851
CASE;

// IF CTL.Email Selection usr NE LCL.Email Selection usr
IF CTL.Email_Selection_usr <> LCL.Email_Selection_usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 2  PASS  USR = RCD.Order Number
PAR.Order_Number_2_PASS_USR = RCD.Order_Number;

// PAR.Customer Number Pass  USR = RCD.A/R Customer Number
PAR.Customer_Number_Pass_USR = RCD.AR_Customer_Number;

// LCL.A/R Customer Num Pass USR = RCD.Bill to Customer
LCL.A_R_Customer_Num_Pass_USR = RCD.Bill_to_Customer;

// LCL.Program name USR = CON.PDR4PCLP
LCL.Program_name_USR = 'PDR4PCLP';

// LCL.Reprint Status USR = CND.Reprint
LCL.Reprint_Status_USR = 'R';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

//?Set flag = Invoice Reprint
//?5=Order Inquiry Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Call program DSP Credit/Debit Memo  D1.
CALL PROGRAM(DSP Credit/Debit Memo  D1) ('PDIXD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Date);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

ENDIF;

//?6=Reprint/EDI
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(LCL.EDI_Invoice_Sts);
PARAMETER(LCL.Print_Invoice_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?RMC added this check - dont create edi files if cust isnt set for edi
CASE;

// IF LCL.EDI Invoice Sts is yes
IF LCL.EDI_Invoice_Sts = 'Y';

//? 7/13/2021 JBB SDD657 - Get Send EDI Document flag
// Call program Rtv EDI Manual PO Sts XF.
CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('IN');
PARAMETER(LCL.Send_EDI_Document_Y_N);

//?If Send EDI Document flag is Y, set EDI Invoice Status = Y
CASE;

// IF LCL.Send EDI Document Y/N is Yes
IF LCL.Send_EDI_Document_Y_N = 'Y';

// LCL.EDI Invoice Sts = CND.yes
LCL.EDI_Invoice_Sts = 'Y';

//?If Send EDI Document flag is Y, set EDI Invoice Status = Y
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.EDI Invoice Sts = CND.no
LCL.EDI_Invoice_Sts = 'N';

ENDIF;

ENDIF;

CASE;

// IF LCL.EDI Invoice Sts is yes
IF LCL.EDI_Invoice_Sts = 'Y';

EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

 ENDIF;

}


// Call program Del ECP001/002/003    UP.
CALL PROGRAM(Del ECP001/002/003    UP) ('EC201');
PARAMETER(LCL.Accounting_Company);
PARAMETER(RCD.Invoice_Number);

// Call program Crt ECP001/002/003    UP.
CALL PROGRAM(Crt ECP001/002/003    UP) ('EC200');
PARAMETER(LCL.Accounting_Company);
PARAMETER(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 2  PASS  USR = RCD.Order Number
PAR.Order_Number_2_PASS_USR = RCD.Order_Number;

// LCL.Reprint Status USR = CND.Reprint(Form)
LCL.Reprint_Status_USR = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.A/R Customer Num Pass USR = RCD.Bill to Customer
LCL.A_R_Customer_Num_Pass_USR = RCD.Bill_to_Customer;

// Call program PRT Invc/Pre-Invc Reg  UP.
CALL PROGRAM(PRT Invc/Pre-Invc Reg  UP) ('PDTLUPR');
PARAMETER(PGM.*Return_code);
PARAMETER('PDR4PCLP');
PARAMETER(JOB.*JOB);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Job_Number_USR);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER('Reprint Invoice');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(LCL.Reprint_Status_USR);
PARAMETER('N');
PARAMETER('N');
PARAMETER('I');
PARAMETER(LCL.A_R_Customer_Num_Pass_USR);
PARAMETER('OR');

//?Message if printed
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

ENDIF;

//?7=Select for Fax or Email
CASE;

// IF RCD.*SFLSEL is Fax
IF RCD.*SFLSEL = '7'/'7';

//?** Set fax flag=Yes so wf rec isn't deleted before invoice is faxed/emld
// WRK.Fax Invoice Flag = CND.Automatically Fax Invoice
WRK.Fax_Invoice_Flag = 'Y';

//?Fax if Fax Invoice flag is Yes
CASE;

// IF WRK.Fax Invoice Flag is No Automatic Fax Invoice
IF WRK.Fax_Invoice_Flag = 'N';

// Send error message - 'Fax Invoice Flag is set to NO for A/R Customer &1'
ERROR(USR2898);
MSGPARM(RCD.AR_Customer_Number);

//?Fax if Fax Invoice flag is Yes
// IF *OTHERWISE
IF *OTHERWISE;

//?First time only:  prompt for night run
CASE;

// IF PAR.PRT Night Queue  USR is Not entered
IF PAR.PRT_Night_Queue_USR = *BLANK;

// AND PAR.Status - Y or N is blank
AND PAR.Status_Y_or_N = *BLANK;

// Call program PMT Print Opts Nightq  PV.
CALL PROGRAM(PMT Print Opts Nightq  PV) ('PDXOPVR');
PARAMETER('Fax/Email Invoice');
PARAMETER(PAR.PRT_Night_Queue_USR);
PARAMETER('OMS');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

ENDIF;

ENDIF;

//?Set night queue
CASE;

// IF PAR.PRT Night Queue  USR is JOBD
IF PAR.PRT_Night_Queue_USR = *JOBD;

// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

//?Set night queue
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Job Name CDE = CON.NIGHTFAX
PAR.Job_Name_CDE = 'NIGHTFAX';

ENDIF;

//?Fax or Email Invoice
CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

//?     don't do anything; this means they're not going to do this.
//?Fax or Email Invoice
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(WRK.Fax_Invoice_Flag);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Invoice &1 already waiting to Fax'
MESSAGE(USR2509 *INFO);
MSGPARM(RCD.Invoice_Number);

ENDIF;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=Reprint
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.One_Invoice_Per_PO);
{
 //?USER: Processing if Data record not found

 // PAR.One Invoice Per PO = CND.No
 PAR.One_Invoice_Per_PO = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Crt Combo or Standard invoice work file record
CASE;

// IF LCL.One Invoice Per PO is Yes
IF LCL.One_Invoice_Per_PO = 'Y';

// PAR.Job Number USR = CVTVAR(JOB.*Job number)
PAR.Job_Number_USR = CVTVAR(JOB.*Job_number);

EXECUTE FUNCTION(Crt WF Invoice/Combine CR) TYPE(CRTOBJ) FILE(PMAFCPP)          AC1802039;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Job_Number_USR);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Ship_To_Name);
PARAMETER('N');
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER('N');
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?Crt Combo or Standard invoice work file record
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Bill_to_Name);
PARAMETER('N');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDIF;

//?** Call PDTLUPR PRT Invc/Pre-Invc Reg UP to submit reprint pgm
// Call program PRT Invc/Pre-Invc Reg  UP.
CALL PROGRAM(PRT Invc/Pre-Invc Reg  UP) ('PDTLUPR');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.Program_name_USR);
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Job_Number_USR);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER('Reprint Invoices');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(LCL.Reprint_Status_USR);
PARAMETER('N');
PARAMETER('N');
PARAMETER('I');
PARAMETER(LCL.A_R_Customer_Num_Pass_USR);
PARAMETER('OR');

//?Printed message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?9=Reprint (Form)
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// LCL.Reprint Status USR = CND.Reprint(Form)
LCL.Reprint_Status_USR = 'Y';

EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.One_Invoice_Per_PO);
{
 //?USER: Processing if Data record not found

 // PAR.One Invoice Per PO = CND.No
 PAR.One_Invoice_Per_PO = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.One Invoice Per PO is Yes
IF LCL.One_Invoice_Per_PO = 'Y';

// PAR.Job Number USR = CVTVAR(JOB.*Job number)
PAR.Job_Number_USR = CVTVAR(JOB.*Job_number);

EXECUTE FUNCTION(Crt WF Invoice/Combine CR) TYPE(CRTOBJ) FILE(PMAFCPP)          AC1802039;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Job_Number_USR);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Ship_To_Name);
PARAMETER('N');
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER('N');
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


ENDIF;

ENDIF;

//?11=Ordered vs. Shipped Detail
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Send information message - 'No Shipping Detail for CM/DM'
MESSAGE(USR2328 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

//?13=Chg customer po# in Sales History and Order Header
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

// Call program PMT Chg Cust Po#      PV.
CALL PROGRAM(PMT Chg Cust Po#      PV) ('PMD2PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E4057 JJH 06/16/15 - Display Option 15
//?15=Dsp Acrl Hist
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

// Call program Dsp Hist Dtl Accrual  DF.
CALL PROGRAM(Dsp Hist Dtl Accrual  DF) ('PBRODFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?90=Create 855/865 (IT Only)
CASE;

// IF RCD.*SFLSEL is Option 90
IF RCD.*SFLSEL = '90';

//?2014/09/10 PKD/SAZ Create 855 or 865 if needed -- Option for IT
//?Parm added to IF. Not used here so pass lcl context   E004140
EXECUTE FUNCTION(Val for PO Ack        IF) TYPE(EXCINTFUN)                      AC2041958;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('PA');
PARAMETER(LCL.Trans_Type_1_PASS_USR);
{
 //?Execute internal function

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 //?Retrieve the BT Customer
 EXECUTE FUNCTION(Rtv Order Info ALL    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1745072;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(NLL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Ship_To_Customer);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_Address_Line_1);
 PARAMETER(NLL.Ship_To_Address_Line_2);
 PARAMETER(NLL.Ship_To_Address_Line_3);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 PARAMETER(NLL.Ship_To_Zip_Postal_Code);
 PARAMETER(NLL.Bill_to_Customer);
 PARAMETER(NLL.Bill_to_Name);
 PARAMETER(NLL.Bill_to_Address_Line_1);
 PARAMETER(NLL.Bill_to_Address_Line_2);
 PARAMETER(NLL.Bill_to_Address_Line_3);
 PARAMETER(NLL.Bill_to_City);
 PARAMETER(NLL.Bill_to_State_Code);
 PARAMETER(NLL.Bill_to_Zip_Postal_Code);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(NLL.Order_Date);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Actual_Shipped_Date);
 PARAMETER(NLL.Cancel_Date);
 PARAMETER(NLL.Terms_Code);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(NLL.Comment_Print_Acknowledge);
 PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(NLL.Comment_Print_Pick_Slip);
 PARAMETER(NLL.Comment_Print_Ship_Doc);
 PARAMETER(NLL.Reason_Code);
 PARAMETER(NLL.Order_in_Use);
 PARAMETER(NLL.Header_Status);
 PARAMETER(NLL.Header_Status_Last);
 PARAMETER(NLL.Order_Type_Print_Status);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(NLL.User_Original_Entry);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(NLL.Order_Value_Total);
 PARAMETER(NLL.Order_Weight_Total);
 PARAMETER(NLL.Credit_Hold);
 PARAMETER(NLL.Production_Hold);
 PARAMETER(NLL.New_Customer_Hold);
 PARAMETER(NLL.Requested_Delivery_Date);
 PARAMETER(NLL.Requested_Delivery_Time);
 PARAMETER(NLL.Accounts_Receiv_Ent_1);
 PARAMETER(NLL.Accounts_Receiv_Ent_2);
 PARAMETER(NLL.Load_ID);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 PARAMETER(NLL.Rated_Freight);
 PARAMETER(NLL.LTL_Flag);
 PARAMETER(NLL.Price_Audit);
 PARAMETER(LCL.Price_Status);
 PARAMETER(NLL.Shipping_Method);
 PARAMETER(NLL.Export_Status);
 PARAMETER(NLL.Palletize);
 PARAMETER(NLL.Shrink_Wrap);
 PARAMETER(NLL.Slip_Sheet);
 PARAMETER(NLL.Age_Code);
 PARAMETER(NLL.Reefer_Temperature);
 PARAMETER(NLL.Load_Type);
 PARAMETER(NLL.Attach_to_Invoice_Number);
 PARAMETER(NLL.Load_Plan_Order);
 PARAMETER(NLL.Print_Pick_Slip);
 PARAMETER(NLL.Resell_Reference_Number);
 PARAMETER(NLL.Special_Comment_1);
 PARAMETER(NLL.Special_Comment_2);
 PARAMETER(NLL.Affect_Auto_Accruals);
 PARAMETER(NLL.Sales_Route_Code);
 PARAMETER(NLL.Manager_Level_Code);
 PARAMETER(NLL.VP_Level_Code);
 PARAMETER(NLL.Attach_to_Order_Number);
 PARAMETER(NLL.Reason_for_Price_Audit);
 PARAMETER(NLL.Invoice_Number);
 PARAMETER(NLL.Invoice_Suffix);
 PARAMETER(NLL.Invoice_Date);
 PARAMETER(NLL.Event_Code);
 PARAMETER(NLL.Trans_Contol_AS400_Plant);
 PARAMETER(NLL.Modified_Flag);
 PARAMETER(NLL.A_R_order_Value_Total);
 PARAMETER(NLL.Billing_Activity_Type);
 PARAMETER(NLL.Block_Order_Flag);
 PARAMETER(NLL.Order_Certification_Flag);
 PARAMETER(NLL.Invoice_Order_Value_Tot);
 PARAMETER(NLL.Process_Sts_for_3C);
 PARAMETER(NLL.Order_Conf_Fax_Sts);
 PARAMETER(NLL.Manifest_Fax_Sts);
 PARAMETER(NLL.Invoice_Fax_Sts);
 PARAMETER(NLL.Transfer_in_Storage_Ind);
 PARAMETER(NLL.Email_Cust_On_Order_Ship);
 PARAMETER(NLL.Order_Emailed);
 PARAMETER(NLL.Export_Docs_Go_w_Driver);
 PARAMETER(NLL.Shipping_Temp_Code_C_F);
 PARAMETER(NLL.Broker_Order_Status);
 PARAMETER(NLL.Air_Freight_Order);
 PARAMETER(NLL.Order_Requires_Review);
 PARAMETER(NLL.OH_Load_Plan_Ready);
 PARAMETER(NLL.Export_USDA_Approved);
 PARAMETER(NLL.HPB_Ship_to_Warehouse);
 PARAMETER(NLL.OH_TF_Exempt_Code);
 PARAMETER(NLL.OH_Appt_Confirmation_Dt);
 PARAMETER(NLL.JPN_Invoice_Issuance_Date);
 PARAMETER(NLL.Load_Actual_Shipped_Date);
 PARAMETER(NLL.Load_BOL_Complete_Date);
 PARAMETER(NLL.Load_Truck_Departure_Date);
 PARAMETER(NLL.Maximum_Gross_Weight);
 PARAMETER(NLL.Time_of_Original_Entry);
 PARAMETER(NLL.OH_Appt_Confirmation_Tm);
 PARAMETER(NLL.Load_BOL_Complete_Time);
 PARAMETER(NLL.Load_Truck_Departure_Time);
 PARAMETER(NLL.Act_Frt_Reference_Amount);
 PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
 PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
 PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
 PARAMETER(NLL.Claim_Number);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(NLL.Job_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(NLL.Job_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check to see it the BT Cust should get a POA/POAC (ack or chgd ack)
 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POA Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Ack
 IF LCL.POC_POCA = 'POACK';

 // LCL.EDI POA = CND.Yes
 LCL.EDI_POA = 'Y';

 //?Chk to see if BT cust requires a EDI PO ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POA = CND.No
 LCL.EDI_POA = 'N';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV BT Intrchg BT custRT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2023144;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER('POCACK');
 PARAMETER(LCL.POC_POCA);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?01/24/23 DN W95589-Check Record Status is Active for both 855 & 865.
  CASE;

  // IF DB1.Interchange Code is PO Acknowledgement  855
  IF DB1.Interchange_Code = 'POACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Ack
  PAR.POC_POCA = 'POACK';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.Interchange Code is PO Change Ack       865
  IF DB1.Interchange_Code = 'POCACK';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // PAR.POC/POCA ?? = CND.PO Change Ack
  PAR.POC_POCA = 'POCACK';

  ENDIF;

  ENDIF;

 }

 //?W95589 DN 01/24/23-Commented Out & Moved Below.
 //?W95589 DN 01/24/23-Only Check if Record Exist to Set EDI POAC Flag.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 CASE;

 // IF LCL.POC/POCA ?? is PO Change Ack
 IF LCL.POC_POCA = 'POCACK';

 // LCL.EDI POAC = CND.Yes
 LCL.EDI_POAC = 'Y';

 //?Chk to see if BT cust requires a EDI PO Chg ACK
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDI POAC = CND.NO
 LCL.EDI_POAC = 'N';

 ENDIF;

 ENDIF;

 //?See if a rcd has been written to OH ext.
 EXECUTE FUNCTION(RTV EDI PO Flag       RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2023170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OHE_PO_ACK_Flag);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  //?3/11/14 SAZ If OHE PO ack flag = Blank, initialize to *NO
  //?3/11/14 SAZ If Record not found, initialize  OHE PO Ack Flag to *NO
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  //?USER: Process Data record

  // PAR.OHE PO ACK Flag = DB1.OHE PO ACK Flag
  PAR.OHE_PO_ACK_Flag = DB1.OHE_PO_ACK_Flag;

  CASE;

  // IF DB1.OHE PO ACK Flag is *Blank
  IF DB1.OHE_PO_ACK_Flag = *BLANK;

  // PAR.OHE PO ACK Flag = CND.*NO
  PAR.OHE_PO_ACK_Flag = *NO;

  ENDIF;

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?Record found in Order header ext
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 //?If flag blank, No ack has been sent for this PO yet.
 CASE;

 // IF LCL.OHE PO ACK Flag is *Blank
 IF LCL.OHE_PO_ACK_Flag = *BLANK;

 // OR LCL.OHE PO ACK Flag is *NO
 OR LCL.OHE_PO_ACK_Flag = *NO;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 //?If flag blank, No ack has been sent for this PO yet.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If flag not blank, 855 ack has been sent for this PO. Need to send
 //?another 855(865) if the customer is set up for it.
 CASE;

 // IF LCL.EDI POAC is Yes
 IF LCL.EDI_POAC = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?If record not found and POA is yes, send
 //?Record found in Order header ext
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.EDI POA is Yes
 IF LCL.EDI_POA = 'Y';

 // LCL.EDI Process Flag = CND.Process
 LCL.EDI_Process_Flag = 'Y';

 ENDIF;

 ENDIF;

 //?When all chks are done, need to check to see if the Cust PO
 //?has been entered. If not,do not send to customer.
 //?If Cust PO# not entered
 CASE;

 // IF LCL.Customer Purchase Order # is tba
 IF LCL.Customer_Purchase_Order_# = 'tba';

 // OR LCL.Customer Purchase Order # is TBA(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBA';

 // OR LCL.Customer Purchase Order # is TBD(cap)
 OR LCL.Customer_Purchase_Order_# = 'TBD';

 // OR LCL.Customer Purchase Order # is tbd
 OR LCL.Customer_Purchase_Order_# = 'tbd';

 // OR LCL.Customer Purchase Order # is BLOCK(cap)
 OR LCL.Customer_Purchase_Order_# = 'BLOCK';

 // OR LCL.Customer Purchase Order # is Block
 OR LCL.Customer_Purchase_Order_# = 'Block';

 //?S13599 DN 08/16/18-Added check for 'TBD, tbd, BLOCK & Block'.
 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.EDI PO does not exist
 PAR.Trans_Type_1_PASS_USR = 'NP';

 ENDIF;

 //?2014/09/10 PKD/SAZ Check if PO was sent via EDI for SYSCO.  If yes, then
 //?                   Create an 855; otherwise don't do it.
 //?E003964 SLM  02/24/2015 logic for SYSCO & DSYSCO Work the same
 CASE;

 // IF LCL.EDI Trading Partner No. is SYSCO Dailys
 IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

 // OR LCL.EDI Trading Partner No. is SYSCO Foods
 OR LCL.EDI_Trading_Partner_No = 'SYSCO';

 EXECUTE FUNCTION(VAL PO Exists         RT) TYPE(RTVOBJ) FILE(ECP004)            AC2099993;
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.Customer_Purchase_Order_#);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?VAL: Return Code
 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 // PAR.Trans Type 1 PASS     USR = CND.NO Trade Partner PO
 PAR.Trans_Type_1_PASS_USR = 'TP';

 ENDIF;

 ENDIF;

 //? 7/13/2021 JBB SDD657 - Trading Partner Control
 // Call program Rtv EDI Manual PO Sts XF.
 CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('POACK');
 PARAMETER(LCL.Send_EDI_Document_Y_N);

 //?If Send EDI Invoice = N, set EDI Process Flag = N
 CASE;

 // IF LCL.Send EDI Document Y/N is No
 IF LCL.Send_EDI_Document_Y_N = 'N';

 // LCL.EDI Process Flag = CND.Do not process
 LCL.EDI_Process_Flag = 'N';

 ENDIF;

 CASE;

 // IF LCL.EDI Process Flag is Process
 IF LCL.EDI_Process_Flag = 'Y';

 //?2014/09/09 PKD Added Price Audit condition
 //?Do we need to EDI 855/865?
 CASE;

 // IF PAR.Pricing Event Called From is Market Price Change
 IF PAR.Pricing_Event_Called_From = 'MPC';

 // OR PAR.Pricing Event Called From is Order Entry
 OR PAR.Pricing_Event_Called_From = 'OE';

 // OR PAR.Pricing Event Called From is Price Maintenance
 OR PAR.Pricing_Event_Called_From = 'PM';

 // OR PAR.Pricing Event Called From is Price Audit
 OR PAR.Pricing_Event_Called_From = 'PA';

 CASE;

 // IF LCL.Price Status is Priced
 IF LCL.Price_Status = 'P';

 // Call program Rtv/Crt EDI PO Ack    XF.
 CALL PROGRAM(Rtv/Crt EDI PO Ack    XF) ('PNYLXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Trans_Type_1_PASS_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Trans Type 1 PASS     USR = CND.EDI Order is not Priced
 PAR.Trans_Type_1_PASS_USR = 'OP';

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Final processing (Pre-confirm)

//?Fax or Email Invoice
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// PAR.Use Credit Contact Info = CND.no
PAR.Use_Credit_Contact_Info = 'N';

// PAR.Cover Sheet Name = CON.SI
PAR.Cover_Sheet_Name = 'SI';

// Call program PRC Fax Invoice        UP.
CALL PROGRAM(PRC Fax Invoice        UP) ('PDVMUPC');
PARAMETER(PGM.*Return_code);
PARAMETER('PDVMPCLP');
PARAMETER('OMS');
PARAMETER('Fax/Email Invoice');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(WRK.Order_Number_2_PASS_USR);
PARAMETER(LCL.Reprint_Status_USR);
PARAMETER(PAR.PRT_Night_Queue_USR);
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Cover_Sheet_Name);
PARAMETER(PAR.Use_Credit_Contact_Info);

//?Message if printed
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Fax invoices have been submitted to print.'
MESSAGE(USR2446 *INFO);

ENDIF;

ENDIF;

