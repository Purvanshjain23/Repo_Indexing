      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP773
      * TITLE:       View Farm Costs
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     07/25/01
      *
      *
      * FUNCTION: This is a View that displays the records in the Farm Costs File
      *
      *           Restrictors:
      *               Business office code
      *
      *           Positioners:
      *               Date        (descending)
      *
      *           Selectors:
      *               Cell
      *               Farm site
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 11/11/04  LeAnne Fedor
      *           The Prompt program called for Farm Site was a select program that omitted
      *           BGF farms. We changed it to one that included BGF farms. As of this date
      *           forward, in reality, only BGF farms will be valid for Farm Costs. But,
      *           since, prior to this date, all phases of farms were valid, we are changing
      *           to a selection program of all farms.
      *
      * 03/21/05  LeAnne Fedor
      *           Field "Cost per Head" was changed from 5,2 to 7,2.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd773    cf   e             workstn
     F                                     sfile(hp773s1:hdrrn1)
     F                                     infds(iofeed)
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl028a   if   e           k disk
     F                                     infds(dbfeed)
      *  Farm Cost
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D termfl          s              1
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svfsbo          s                   like(c1fsbo)
     D svbods          s                   like(c1bods)
     D svfscd          s                   like(c1fscd)
     D svcell          s                   like(c1cell)
     D svdvcd          s                   like(oudvcd)
     D svmdy           s                   like(c1mdy)
      *
      *
      * Parm fields
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
      *
     D xxaist          s              1
     D xxfscd          s                   like(fsfscd)
     D xxfsbo          s                   like(c1fsbo)
     D xxfsnm          s                   like(fsfsnm)
     D xxbods          s                   like(c1bods)
     D xxptcd          s                   like(fsptcd)
     D xxppcd          s                   like(fsppcd)
      *
      *
      * Workfields
      *
     D wkfncd          s                   like(sdpgm)
     D wkefdt          s                   like(fcefdt)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Work fields for standard security checks that involve business office.
      *
     D wkbobo          s                   like(c1fsbo)
     D wkbods          s                   like(c1bods)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   if        termfl = no
     C                   exsr      $clr1
     C                   exsr      $frsh1
     C                   endif
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If the user failed the initial security checks, set on indicator to
      * protect input fields and invalidate function keys.
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Force cursor to the date positioner if no other indicators are on.
      *
     C                   if        *in31 = *off and
     C                             *in51 = *off and
     C                             *in52 = *off
     C                   seton                                        53
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     hp773k1
     C                   write     hp773ec
     C                   exfmt     hp773c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on or termfl = yes                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-PROMPT
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1FSBO' and c1fsbo <> svfsbo
     C                   movel(p)  'HP773'       wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   movel     svfsbo        c1fsbo
     C                   movel     svbods        c1bods
     C                   eval      routne = set1
      *
     C                   when      *in20 = *on                                  F20-WRKSPLF
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svfsbo <> c1fsbo or
     C                             svmdy  <> c1mdy or
     C                             svfscd <> c1fscd or
     C                             svcell <> c1cell
      *
     C                   if        svfsbo <> c1fsbo
     C                   move      *blank        c1bods
     C                   movel(P)  'HP773'       wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
     C                   if        error = 0                                    If authority error
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If authority error
      *
     C                   when      *in25 = *on                                  F25-ROLLUP
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chksv - Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
      * Flip the date from MMDDYY to CCYYMMDD for keying purposes
      *
     C     *mdy          test(d)                 c1mdy                  92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkefdt
     C                   else
     C     *mdy          move      c1mdy         wkisodate
     C                   move      wkisodate     wkefdt
     C                   endif                                                  If bad date
      *
      *
     C                   movel     c1fsbo        svfsbo
     C                   movel     c1bods        svbods
     C                   movel     c1cell        svcell
     C                   z-add     c1fscd        svfscd
     C                   z-add     c1mdy         svmdy
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clr1  - clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp773s1
     C                   seton                                        83        sflclr
     C                   write     hp773c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $frsh1 - refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   select
     C                   when      c1mdy  = 0
     C     c1fsbo        setll     hsl028a
     C                   other
     C     key01         setll     hsl028a
     C                   endsl
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $load1- load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     c1fsbo        reade     hsl028a                                82
     C                   if        *in82 = *off                                 If
      *
      * Retrieve cell associated with farm.
      *
     C     fcfscd        chain     hsp018                             92
     C                   if        *in92 = *off                                 If found
     C                   z-add     fscell        d1cell
     C                   else
     C                   z-add     0             d1cell
     C                   endif                                                  If found
      *
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1fscd <> 0 and                               If farm
     C                             c1fscd <> fcfscd
     C                   else
      *
     C                   if        c1cell <> 0 and                               If cell
     C                             c1cell <> d1cell
     C                   else
      *
      *
      * Flip date from CCYYMMDD to MMDDYY
      *
     C     *iso          test(d)                 fcefdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      fcefdt        wkisodate
     C     *mdy          move      wkisodate     d1mdy
     C                   endif                                                  If OK date
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   z-add     fcfscd        d1fscd
     C                   z-add     fchdrt        d1hdrt
     C                   z-add     fclbrt        d1lbrt
      *
     C                   write     hp773s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If cell
     C                   endif                                                  If farm
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $chkbo - Check the business office entered as a restrictor
      *----------------------------------------------------------------
      *
      * The business office entered must:
      * 1) be valid in the business office master
      * 2) be a 'live production' division office
      * 3) have a security location to which the user is authorized
      *
     C     $chkbo        begsr
      *
      * Clear subfile
      *
     C                   exsr      $clr1
      *
      * Check the user's security to this business office.
      * Set INDVFL to yes to tell the security program to compare the function
      * division code to the B.O. division code.
      *
     C                   movel     yes           indvfl
     C                   exsr      $sec
     C                   if        oubofl = yes
     C                   seton                                        31
     C                   endif
      *
     C                   movel     no            indvfl
     C                   movel     oubods        c1bods
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Business office
      *
     C                   select
     C                   when      fld = 'C1FSBO'
     C                   call      'HP503'
     C                   parm      *blank        XXFSBO
     C                   parm      *blank        XXBODS
     C                   parm                    svdvcd
     C                   seton                                        51
     C                   if        xxfsbo <> *blank
     C                   movel     xxfsbo        c1fsbo
     C                   movel     xxbods        c1bods
     C                   endif
      *
      * Farm site
     C                   when      fld = 'C1FSCD'
     C                   call      'HP505'
     C                   parm      c1fsbo        xxfsbo
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   parm      *blank        xxppcd
     C                   parm      *blank        xxptcd
     C                   seton                                        52
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $sec - Security Program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Set up the fields to send into the security program
      *
     C                   movel     wkfncd        infncd                         PGM NAME
     C                   movel     c1fsbo        inbobo                         SCREEN BO
      *
     C                   move      *blank        oubobo                         BO CODE
     C                   move      *blank        oubods                         BO DESC
     C                   move      *blank        oudvcd                         FUNCTION DIV
     C                   movel     no            termfl                         TERMINAL FLG
      *
     C                   call      'HPSEC  '
      **** IN
     C                   parm                    mgid                           MSGID ARRAY
     C                   parm                    mgdt                           MSGDTA DATA
     C                   parm                    error                          # OF errorS
     C                   parm                    infncd                         FUNC CODE
     C                   parm                    inbobo                         BO CODE
     C                   parm                    indvfl                         CHECK DIV?
     C                   parm                    inbofl                         CHECK B.O.?
      **** OUT
     C     wkbobo        parm                    oubobo                         BO CODE
     C     wkbods        parm                    oubods                         BO DESC.
     C                   parm                    oudvcd                         DIV CODE
     C                   parm                    secfl                          SEC ERR FLAG
     C                   parm                    oubofl                         B.O. ERR FLG
     C                   parm                    ourmfl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    c1fsbo
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    c1fsbo
     C                   kfld                    wkefdt
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     13            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Execute the security routine to determine the user's authorizations.
      *
     C                   movel(p)  sdpgm         wkfncd
      *
      * If incoming business office is blank, then:
      * set INBOFL flag to NO to tell HPSEC not to validate the IN_B.O.
      * sent, but to send back the default B.O. for this user.
      *
     C                   if        c1fsbo = *blank
     C                   movel     no            inbofl
     C                   else
     C                   movel     yes           inbofl
     C                   endif
      *
     C                   exsr      $sec
     C                   movel     yes           inbofl
      *
      * If errors on the initial call, set the terminal flag to yes.
      *
     C                   if        secfl = yes
     C                   movel     yes           termfl
     C                   endif
      *
      * Move returned fields to control record
      *
     C                   movel     wkbobo        c1fsbo
     C                   movel     wkbobo        svfsbo
     C                   movel     wkbods        c1bods
     C                   movel     wkbods        svbods
      *
      * Save this function's division code
      *
     C                   movel     oudvcd        svdvcd
      *
     C                   endsr
      /EJECT
