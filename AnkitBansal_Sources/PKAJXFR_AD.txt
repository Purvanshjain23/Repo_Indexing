// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKAJXFR
// ?Date: 14.08.2025 Time: 02:51:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//? length from 5 to 7.
ENDDO;

//?Read each Tattoo that are unpaid, and Recalc Net
//?and Process Carcass Merit Program, Freight Allocation, D/A's
//?and Calculate Net.
EXECUTE FUNCTION(Mel CrMrt/Frt/Da's/Net Rt) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1175923;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.TH Kill Date GT PAR.Date To   USR
 IF DB1.TH_Kill_Date > PAR.Date_To_USR;

 QUIT;

 ENDIF;

 EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(WRK.HC_Description);
 PARAMETER(WRK.HC_Defect_Required);
 PARAMETER(WRK.HC_Price_Required);
 PARAMETER(WRK.HC_Resolution);
 PARAMETER(WRK.HC_Qualification);
 PARAMETER(WRK.HC_Class_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Market and head kill greater then zero
 //?Carcass Merit processing
 CASE;

 // IF WRK.HC Class Type is Market
 IF WRK.HC_Class_Type = 'M';

 CASE;

 // IF DB1.TH Payment Sts is Live anything
 IF DB1.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Carcass/Market only
 //?*Retrieve Purchase Price calculation information.
 EXECUTE FUNCTION(Rtv PrchPrc Clc Info  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1116661;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(WRK.BOH_Market_Add_Deduct);
 PARAMETER(WRK.BOH_Quote_Price_Type);
 PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(WRK.BOH_Commodity_Market_Code);
 PARAMETER(WRK.BOH_Commodity_Price_Group);
 PARAMETER(WRK.BOH_Market_Date_Method);
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PO_Option_Code);
 PARAMETER(WRK.CMP_Program_Code);
 {
  //?USER: Processing if Data record not found

  //?1/28/08 SLM LEFT OVER INFORMATION MAY HAVE CAUSED ISSUES
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve Sub-Contract information.
 EXECUTE FUNCTION(Rtv PurchPrc Clc Info RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1116645;
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PSC_Floor_Price);
 PARAMETER(WRK.PSC_Ceiling_Price);
 PARAMETER(WRK.PSC_Market_Percent_NU);
 PARAMETER(WRK.PSC_Break_Even_Percent);
 PARAMETER(WRK.PSC_FLoor_Price_+);
 PARAMETER(WRK.PSC_Sub_Contract_Type);
 PARAMETER(WRK.PSC_Mkt_Percent);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Carcass Merit Processing
 CASE;

 // IF DB1.TH Head Killed is Not Zero
 IF DB1.TH_Head_Killed <> *ZERO;

 EXECUTE FUNCTION(Mel ReCalc Lean%      RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1176000;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.CD Record Add/Del Sts is Valid Records for Totals
  IF DB1.CD_Record_Add_Del_Sts = 'A'/*BLANK;

  //?COMPUTE LEAN % Morrison Hot Scale NPPC
  DO;

  //?Calculate Lean % per Pork Rules
  //?Backfat/loin are in inches
  //?2.827
  //?+ (0.469 * Carcass Weight)
  //?- (0.7271657 * Backfat MM)
  //?+ (0.3867718 * Loin Eye MM)
  //?-----------------------------
  //?/ Carcass Weight
  //?* 100
  // WRK.Lean % Fld 1 Usr = CON.1 * CON.2.827 *
  WRK.Lean_Fld_1_Usr = 1 * 2.827;

  // WRK.Lean % Fld 2 Usr = CON.1 * CON.0.469 *
  WRK.Lean_Fld_2_Usr = 1 * 0.469;

  // *MO.VE             1183529*Bu = ilt. in functions
  WRK.Lean_Fld_3_Usr = 0.7271657;

  // *MO.VE             1183529*Bu = ilt. in functions
  WRK.Lean_Fld_4_Usr = 0.3867718;

  // LEAN % COMPUTE
  WRK.Lean_Fld_5_Usr = ( ( ( ( WRK.Lean_Fld_1_Usr + ( WRK.Lean_Fld_2_Usr
  * DB1.CD_Carcass_Hot_Weight ) ) - ( WRK.Lean_Fld_3_Usr * DB1.CD_Backfat_Thickness_MM ) ) +
  ( WRK.Lean_Fld_4_Usr * DB1.CD_Loin_Eye_Depth_MM ) ) / DB1.CD_Carcass_Hot_Weight ) * 100;

  // WRK.CD Lean Percent = WRK.Lean % Fld 5 Usr * CON.1 *Rounded
  WRK.CD_Lean_Percent = WRK.Lean_Fld_5_Usr * 1 'H';

  ENDDO;

  // Wgt USR =       * Lean % * Weight
  PAR.Lean_Wgt_USR = PAR.Lean_Wgt_USR + ( WRK.CD_Lean_Percent * DB1.CD_Carcass_Hot_Weight
  'H' );

  // PAR.Hot Weight  SUM = PAR.Hot Weight  SUM + DB1.CD Carcass/Hot Weight
  PAR.Hot_Weight_SUM = PAR.Hot_Weight_SUM + DB1.CD_Carcass_Hot_Weight;

  EXECUTE FUNCTION(Mel Chg Lean % NPPC   CH) TYPE(CHGOBJ) FILE(PKB1CPP)           AB1176002;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.CD_Scale_Sequence_Number);
  PARAMETER(DB1.CD_Carcass_Number);
  PARAMETER(DB1.CD_Carcass_Number_Insert);
  PARAMETER(WRK.CD_Lean_Percent);
  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Hot Weight  SUM is Not Zero
  IF PAR.Hot_Weight_SUM > *ZERO;

  // WRK.TH Avg Lean Percent = PAR.Lean % * Wgt USR / PAR.Hot Weight  SUM *Rounded
  WRK.TH_Avg_Lean_Percent = PAR.Lean_Wgt_USR / PAR.Hot_Weight_SUM 'H';

  EXECUTE FUNCTION(Mel Chg Avg Lean %    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1176334;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_Avg_Lean_Percent);
  ENDIF;

 }

 // Call program Carcass Merit Process  XF.
 CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
 PARAMETER(WRK.BOH_Market_Add_Deduct);
 PARAMETER(WRK.BOH_Quote_Price_Type);
 PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(WRK.BOH_Commodity_Market_Code);
 PARAMETER(WRK.BOH_Commodity_Price_Group);
 PARAMETER(WRK.BOH_Market_Date_Method);
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PO_Option_Code);
 PARAMETER(WRK.CMP_Program_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price);
 PARAMETER(WRK.PSC_Floor_Price);
 PARAMETER(WRK.PSC_Ceiling_Price);
 PARAMETER(WRK.PSC_Market_Percent_NU);
 PARAMETER(WRK.PSC_Mkt_Percent);
 PARAMETER(WRK.TH_CM_Market_Price);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER('N');
 PARAMETER('P');

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Mel Chg net pay       ch) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1176147;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Processing before Data update

  // Payment Net
  DB1.Th_Payment_Net_Amt = ( DB1.TH_CM_Carcass_Gross_Amt + DB1.TH_Additions_Amt )
  - DB1.TH_Deduction_Amt;

 }

}


