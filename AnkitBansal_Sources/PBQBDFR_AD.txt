// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBQBDFR
// ?Date: 14.08.2025 Time: 03:48:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E3014 - RMC 10/07 BJ/Damon dont remember the rework sts need, so ** it
//?E3014 - Added PFS Download, Rework Req sts for items that HAVE to be
//?   reworked, and not just relabeled. (ie. dates on the bags, or branded)
EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('IDS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile record from DBF record

//?Sel FZ Item Code
CASE;

// IF CTL.Frozen Item Code is Entered
IF CTL.Frozen_Item_Code <> *ZERO;

// AND CTL.Frozen Item Code NE RCD.Frozen Item Code
AND CTL.Frozen_Item_Code <> RCD.Frozen_Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Key Sold 100% FZ
CASE;

// IF CTL.Key Sold 100% Frozen is Not Blank
IF CTL.Key_Sold_100_Pct_Frozen = 'N'/'Y';

// AND CTL.Key Sold 100% Frozen NE RCD.Key Sold 100% Frozen
AND CTL.Key_Sold_100_Pct_Frozen <> RCD.Key_Sold_100_Pct_Frozen;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Sold 100% FZ
CASE;

// IF CTL.Frozen Sold 100% Frozen is Not Blank
IF CTL.Frozen_Sold_100_Pct_Froze = 'N'/'Y';

// AND CTL.Frozen Sold 100% Frozen NE RCD.Frozen Sold 100% Frozen
AND CTL.Frozen_Sold_100_Pct_Froze <> RCD.Frozen_Sold_100_Pct_Froze;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Item GS1 flds     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2083978;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description_Line_1);
PARAMETER(NLL.Sold_100_Percent_Frozen);
PARAMETER(RCD.Record_Status_1_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Item GS1 flds     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2083978;
PARAMETER(RCD.Frozen_Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(NLL.Sold_100_Percent_Frozen);
PARAMETER(RCD.Record_Status_2_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FR Rcd sts 1
CASE;

// IF CTL.Record Status 1 Usr is Not Blanks
IF CTL.Record_Status_1_Usr = 'A'/'D'/'I';

// AND RCD.Record Status 1 Usr NE CTL.Record Status 1 Usr
AND RCD.Record_Status_1_Usr <> CTL.Record_Status_1_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?FZ Rcd sts 2
CASE;

// IF CTL.Record Status 2 Usr is Not Blanks
IF CTL.Record_Status_2_Usr = 'A'/'D'/'I';

// AND RCD.Record Status 2 Usr NE CTL.Record Status 2 Usr
AND RCD.Record_Status_2_Usr <> CTL.Record_Status_2_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Item Code USR = RCD.Frozen Item Code
RCD.Item_Code_USR = RCD.Frozen_Item_Code;

//?USER: Process subfile control (Pre-confirm)

//?F4 = prompt item codes
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program Sel Item Fr-Fz        SL.
CALL PROGRAM(Sel Item Fr-Fz        SL) ('PBLVSRR');
PARAMETER(CTL.Item_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Frozen Item Code
IF PGM.*Cursor_field = CTL.Frozen_Item_Code;

// Call program Zzz Item Fr-Fz per FZ SL.
CALL PROGRAM(Zzz Item Fr-Fz per FZ SL) ('PBLWSRR');
PARAMETER(CTL.Frozen_Item_Code);

ENDIF;

ENDIF;

CASE;

// IF CTL.Frozen Item Code NE LCL.Frozen Item Code
IF CTL.Frozen_Item_Code <> LCL.Frozen_Item_Code;

// LCL.Frozen Item Code = CTL.Frozen Item Code
LCL.Frozen_Item_Code = CTL.Frozen_Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Key Sold 100% Frozen NE LCL.Key Sold 100% Frozen
IF CTL.Key_Sold_100_Pct_Frozen <> LCL.Key_Sold_100_Pct_Frozen;

// LCL.Key Sold 100% Frozen = CTL.Key Sold 100% Frozen
LCL.Key_Sold_100_Pct_Frozen = CTL.Key_Sold_100_Pct_Frozen;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Frozen Sold 100% Frozen NE LCL.Frozen Sold 100% Frozen
IF CTL.Frozen_Sold_100_Pct_Froze <> LCL.Frozen_Sold_100_Pct_Froze;

// LCL.Frozen Sold 100% Frozen = CTL.Frozen Sold 100% Frozen
LCL.Frozen_Sold_100_Pct_Froze = CTL.Frozen_Sold_100_Pct_Froze;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Record Status 1 Usr NE LCL.Record Status 1 Usr
IF CTL.Record_Status_1_Usr <> LCL.Record_Status_1_Usr;

// LCL.Record Status 1 Usr = CTL.Record Status 1 Usr
LCL.Record_Status_1_Usr = CTL.Record_Status_1_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Record Status 2 Usr NE LCL.Record Status 2 Usr
IF CTL.Record_Status_2_Usr <> LCL.Record_Status_2_Usr;

// LCL.Record Status 2 Usr = CTL.Record Status 2 Usr
LCL.Record_Status_2_Usr = CTL.Record_Status_2_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

