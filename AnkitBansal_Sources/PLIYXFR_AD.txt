// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLIYXFR
// ?Date: 14.08.2025 Time: 02:54:25
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/05/2020 - Recompiled due to change in Buy Order Number
ENDDO;

//?This is the process to create the work file for the
//?that will be use to create the print report for VCO Nppc Strategic
EXECUTE FUNCTION(Prt VCO Nppc StrategicRT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1276828;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(HPE0482) TYPE(EXCINTFUN)                                       AB1194697;
 {
  //?Execute internal function

  //?Nppc by Origin State Report
 }

 //?** Retrieve Site ID - 1/6/06 LJB HPE011D
 //?** Retrieve the PS Site ID from Tattoo Header EXT to pass to the
 //?**    routine to retrive the production location delivery
 //?**    company miles.
 //?USER: Process Data record

 //?Check kill date range
 CASE;

 // IF DB1.TH Kill Date GE PAR.Date From USR
 IF DB1.TH_Kill_Date >= PAR.Date_From_USR;

 // AND DB1.TH Kill Date LE PAR.Date To   USR
 AND DB1.TH_Kill_Date <= PAR.Date_To_USR;

 // WRK.PD Name = WRK.Blank USR
 WRK.PD_Name = WRK.Blank_USR;

 // WRK.PL Name = WRK.Blank USR
 WRK.PL_Name = WRK.Blank_USR;

 // WRK.TH State = WRK.Blank USR
 WRK.TH_State = WRK.Blank_USR;

 EXECUTE FUNCTION(RTV Tattoo Rec w/new  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1206992;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Purchase_Date);
 PARAMETER(WRK.TH_Group_Reference);
 PARAMETER(WRK.TH_Live_Purchase_UOM);
 PARAMETER(WRK.TH_Live_Purchase_Price);
 PARAMETER(WRK.TH_Resale_UOM);
 PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(WRK.TH_Pricing_Date);
 PARAMETER(WRK.TH_Resale_Spread_Sts);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Head_Killed);
 PARAMETER(WRK.TH_Head_Adds);
 PARAMETER(WRK.TH_Head_Accepted);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(WRK.TH_Hot_Wgt);
 PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
 PARAMETER(WRK.TH_Tot_Backfat_Inches);
 PARAMETER(WRK.TH_Tot_Light_Reflectance);
 PARAMETER(WRK.TH_Avg_Live_Wgt);
 PARAMETER(WRK.TH_Avg_Hot_Wgt);
 PARAMETER(WRK.TH_Avg_Light_Reflectance);
 PARAMETER(WRK.TH_Avg_Lean_Percent);
 PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
 PARAMETER(WRK.TH_Avg_Backfat);
 PARAMETER(WRK.TH_Std_Yield_Percent);
 PARAMETER(WRK.TH_Actual_Yield);
 PARAMETER(WRK.TH_Yield_Difference);
 PARAMETER(WRK.TH_Recalc_Live_Wgt);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
 PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(WRK.TH_CM_Base_Carcass_Value);
 PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Carcass_Net_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(WRK.TH_Fixed_Cost_Amount);
 PARAMETER(WRK.TH_Payment_Sts);
 PARAMETER(WRK.TH_Header_Error_Sts);
 PARAMETER(WRK.TH_Detail_Error_Sts);
 PARAMETER(WRK.TH_Kill_Balancing_Sts);
 PARAMETER(WRK.TH_Bal_to_Kill_Gen);
 PARAMETER(WRK.TH_Commission_A_P_Voucher);
 PARAMETER(WRK.TH_Voucher_Payment_Date);
 PARAMETER(WRK.TH_User_Error_Override);
 PARAMETER(WRK.TH_Held_Over_Record);
 PARAMETER(WRK.TH_Sex);
 PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
 PARAMETER(WRK.TH_Commission_Paid_Date);
 PARAMETER(WRK.TH_Actual_Check_Date);
 PARAMETER(WRK.TH_Shipped_Weight);
 PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(WRK.TH_FFLI);
 PARAMETER(WRK.TH_Kill_Product_Value);
 PARAMETER(WRK.TH_Cut_Product_Value);
 PARAMETER(WRK.TH_Render_Product_Value);
 PARAMETER(WRK.TH_State);
 PARAMETER(WRK.TH_Unused_Code);
 PARAMETER(WRK.TH_Unused_Sts_2_Pos);
 PARAMETER(WRK.TH_Commission_Status);
 PARAMETER(WRK.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(WRK.TH_Unused_Sts_1_Pos_3);
 PARAMETER(WRK.TH_DOA_Weight);
 PARAMETER(WRK.TH_Avg_Lean_EXC_ADD);
 PARAMETER(WRK.TH_HPS_Farm_Site);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 PARAMETER(WRK.TH_Sorting_Amount);
 PARAMETER(WRK.DF_Defect_Code);
 PARAMETER(WRK.THP_Process_Code);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(WRK.HB_Buyer_Code);
 PARAMETER(WRK.GN_Genetic_Code);
 PARAMETER(WRK.HC_Class_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv PrdcrName,Sts,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1264668;
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PD_Name);
 PARAMETER(WRK.SR_Source_Code);
 PARAMETER(WRK.RS_Record_Status);
 PARAMETER(WRK.SR_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(PAR.SR_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 EXECUTE FUNCTION(Rtv Pdctn Loc Vnd Nbr RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1190122;
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(WRK.PL_Name);
 PARAMETER(WRK.Pl_VND_Address_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Site ID            RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1268433;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(NLL.PD_Producer_Code);
 PARAMETER(WRK.PS_Site_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Prod Loc Dlv CoMilRT) TYPE(RTVOBJ) FILE(PLASREP)           AB1264192;
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PS_Site_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(WRK.PSM_Miles_to_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Tattoo D/A Work   CR) TYPE(CRTOBJ) FILE(PKDSCPP)           AB1190097;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(DB1.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(WRK.TH_State);
 PARAMETER(WRK.PD_Name);
 PARAMETER(WRK.PL_Name);
 PARAMETER(WRK.TH_Dead_On_Arrival);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Yard_Deads);
 PARAMETER(WRK.TH_Held_Over);
 PARAMETER(WRK.TH_Head_Condemned);
 PARAMETER(WRK.TH_Head_Killed);
 PARAMETER(WRK.SR_Source_Code);
 PARAMETER(WRK.SR_Type);
 PARAMETER(WRK.PSM_Miles_to_Company);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Check kill date range
 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


