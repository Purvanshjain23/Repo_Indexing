// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBRDE1R
// ?Date: 14.08.2025 Time: 03:49:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Item Definition System
PAR.Application_Code = 'IDS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Default Printer = CND.Not entered
PAR.Default_Printer = *BLANK;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

//?USER: Initialize key screen

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

//?USER: Validate key screen

CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.Item Code
IF PGM.*Cursor_field = KEY.Item_Code;

// Call program SEL Item Default FG    SR.
CALL PROGRAM(SEL Item Default FG    SR) ('POMYSRR');
PARAMETER(KEY.Item_Code);

ENDIF;

ENDIF;

//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: DTL From: DB1);

//?Get item description and catch weight status
EXECUTE FUNCTION(RTV All                RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1505334;
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Description_1_usr);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.Item_Label_Line_1);
PARAMETER(NLL.Item_Label_Line_2);
PARAMETER(NLL.Item_Label_Line_3);
PARAMETER(NLL.Item_Label_Line_4);
PARAMETER(NLL.UOM_Primary_Dft);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second_Dft);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third_Dft);
PARAMETER(NLL.UOM_Pricing_Dft);
PARAMETER(NLL.Unit_Weight);
PARAMETER(NLL.Quality_Level);
PARAMETER(NLL.Item_Level);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(NLL.Minimum_Weight_Per_Case);
PARAMETER(NLL.Maximum_Weight_Per_Case);
PARAMETER(NLL.Number_Cases_On_A_Pallet);
PARAMETER(NLL.Vendor_item_Default_Dft);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Default_Commod_Mark_basis);
PARAMETER(NLL.Transportation_Temp);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(NLL.Package_Type_Code);
PARAMETER(NLL.Fresh_Chilling_Time);
PARAMETER(NLL.Base_Conv_Loss_Item);
PARAMETER(NLL.Variety_Rendered_Cut);
PARAMETER(NLL.Frozen_Make_to_Order_Sts);
PARAMETER(NLL.Credit_Item_Status);
PARAMETER(NLL.Std_Weight_Head_Var_Ren);
PARAMETER(NLL.Pieces_Per_Head);
PARAMETER(NLL.Commodity_Price_Group);
PARAMETER(NLL.Pallet_Tare_Weight);
PARAMETER(NLL.Misc_Tare_Weight);
PARAMETER(NLL.Production_Lead_Days);
PARAMETER(NLL.Packaging_Code);
PARAMETER(NLL.Item_Market_Code);
PARAMETER(NLL.TF_Co_Ownership_Sts);
PARAMETER(NLL.Agrimetrics_group);
PARAMETER(NLL.Agrimetrics_pack);
PARAMETER(NLL.Agrimetrics_grade);
PARAMETER(NLL.PA_Base_Avail_Rpt_Include);
PARAMETER(NLL.PM_Pounds_per_Hour);
PARAMETER(NLL.Item_Frt_Overage_Prc_UOM);
PARAMETER(NLL.Packages_per_case);
PARAMETER(NLL.Use_Freeze_Sell_By_Days);
PARAMETER(NLL.PM_Batch_Size);
PARAMETER(NLL.Package_Level_size);
PARAMETER(NLL.Partial_Item_Code);
PARAMETER(NLL.WIP_Item_Code);
PARAMETER(NLL.WIP_Reject_Code);
PARAMETER(NLL.Std_Costing_Unit_Weight);
PARAMETER(NLL.FP_Std_Green_Weight);
PARAMETER(NLL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(NLL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(NLL.PM_Formula_LBS_Per_Hour);
PARAMETER(NLL.PM_Finished_LBS_Per_Hour);
PARAMETER(NLL.SH_Unused_was_broker);
PARAMETER(NLL.PM_Raw_Material_Type_Code);
PARAMETER(NLL.Seconds_Item);
PARAMETER(NLL.Print_on_Realization_Rpt);
PARAMETER(NLL.Unit_Weight_Change_Sts);
PARAMETER(NLL.Maximum_Audit_Value);
PARAMETER(NLL.Minimum_Audit_Value);
PARAMETER(NLL.Market_Overage);
PARAMETER(NLL.Standard_Overage_Underage);
PARAMETER(NLL.Item_Pricing_Operation);
PARAMETER(NLL.Item_Pricing_Constant);
PARAMETER(NLL.Default_Warehouse);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Price_Method_Default);
PARAMETER(NLL.Department_Code);
PARAMETER(NLL.Group_for_Packaging);
PARAMETER(NLL.Item_Category_Number_1);
PARAMETER(NLL.Made_to_Order_Code);
PARAMETER(NLL.Item_Category_Number_2);
PARAMETER(NLL.Transportation_Equip_Type);
PARAMETER(NLL.Item_Category_Number_3);
PARAMETER(NLL.Item_Category_Code_3);
PARAMETER(NLL.Item_Category_Number_4);
PARAMETER(NLL.GL_Sub_Code);
PARAMETER(NLL.Item_Category_Number_5);
PARAMETER(NLL.Item_Structure_Sub_Class);
PARAMETER(NLL.Item_Category_Number_6);
PARAMETER(NLL.Item_Primal_Sched_Report);
PARAMETER(NLL.Item_Category_Number_7);
PARAMETER(NLL.Item_Exc_Man_Prc_Excp);
PARAMETER(NLL.Item_Category_Number_8);
PARAMETER(NLL.Item_Prod_Sched_Send_PFS);
PARAMETER(NLL.Item_Category_Number_9);
PARAMETER(NLL.Item_Category_Code_9);
PARAMETER(NLL.Item_Category_Number_10);
PARAMETER(NLL.Item_Category_Code_10);
PARAMETER(NLL.PM_Line_Number);
PARAMETER(NLL.Primal_Group_Code);
PARAMETER(NLL.Piece_Count_Item);
PARAMETER(NLL.Pieces_Per_Bag);
PARAMETER(NLL.Bags_Per_Unit);
PARAMETER(NLL.Export_Domestic);
PARAMETER(NLL.Print_On_Schedule);
PARAMETER(NLL.Fresh_Inv_Allocation_Seq);
PARAMETER(NLL.Fresh_Sched_As_Ordered);
PARAMETER(NLL.Frozen_Inv_Allocation_Seq);
PARAMETER(NLL.Item_Meat_Cost_Group_Code);
PARAMETER(NLL.UPC_Code_2);
PARAMETER(NLL.Item_Target_Price);
PARAMETER(NLL.Minimum_Piece_Weight);
PARAMETER(NLL.Maximum_Piece_Weight);
PARAMETER(NLL.Seaboard_Equivalent_Item);
PARAMETER(NLL.Production_Qty_Per_Shift);
PARAMETER(NLL.Scheduling_Position_Grade);
PARAMETER(NLL.Sold_100_Percent_Frozen);
PARAMETER(NLL.Maximum_Shifts);
PARAMETER(NLL.Value_Added_Sts);
PARAMETER(NLL.Label_Type);
PARAMETER(NLL.Item_TF_Exempt_Code);
PARAMETER(NLL.Item_TF_Classification);
PARAMETER(NLL.Default_Workcenter);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(NLL.Job_Time_1);
PARAMETER(NLL.User_Id_1);
PARAMETER(NLL.Job_Name_1);
PARAMETER(NLL.Job_Date_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Validate detail screen fields

//?Only test GTIN if organization is Seaboard
CASE;

// IF WRK.Company Organization is Seaboard
IF WRK.Company_Organization = 'S';

//?Test 1st character of GTIN
CASE;

// IF DTL.IDE GTIN is Entered
IF DTL.IDE_GTIN <> *BLANK;

// LCL.IDE GTIN Postion-1 = SUBSTRING(DTL.IDE GTIN,CON.1,CON.1)
LCL.IDE_GTIN_Postion_1 = SUBSTRING(DTL.IDE_GTIN:1:1);

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?Catch weight starts with 9
CASE;

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

// LCL.First Letter 1 USR = CON.9
LCL.First_Letter_1_USR = 9;

CASE;

// IF LCL.IDE GTIN Postion-1 NE LCL.First Letter 1 USR
IF LCL.IDE_GTIN_Postion_1 <> LCL.First_Letter_1_USR;

// DTL.Text USR 15 = CON.Start CW w/ 9
DTL.Text_USR_15 = 'Start CW w/ 9';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

ENDIF;

//?Fixed starts with 1
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

// LCL.First Letter 1 USR = CON.1
LCL.First_Letter_1_USR = 1;

CASE;

// IF LCL.IDE GTIN Postion-1 NE LCL.First Letter 1 USR
IF LCL.IDE_GTIN_Postion_1 <> LCL.First_Letter_1_USR;

// DTL.Text USR 15 = CON.Start Fixed w/1
DTL.Text_USR_15 = 'Start Fixed w/1';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Status - Y or N Desc DRV) TYPE(DRVFLD)                         AC1714621;
PARAMETER(DTL.Status_Y_or_N_Desc_DRV);
PARAMETER(DTL.Record_Status);
{
 //?Calculate derived field

 // PAR.Status - Y or N Desc DRV = Condition name of PAR.Status - Y or N
 PAR.Status_Y_or_N_Desc_DRV = RTVCND(PAR.Status_Y_or_N);

}


// LCL.Change Flag USR = CND.No
LCL.Change_Flag_USR = 'N';

//?Validate GTIN - All 14 characters must be in 0-9 range.
CASE;

// IF DTL.IDE GTIN is Blank
IF DTL.IDE_GTIN = *BLANK;

//?Do Nothing
//?Validate GTIN - All 14 characters must be in 0-9 range.
// IF *OTHERWISE
IF *OTHERWISE;

//?Test character of the GTIN
// LCL.IDE GTIN Postion-1 = SUBSTRING(DTL.IDE GTIN,CON.1,CON.1)
LCL.IDE_GTIN_Postion_1 = SUBSTRING(DTL.IDE_GTIN:1:1);

// LCL.IDE GTIN Postion-2 = SUBSTRING(DTL.IDE GTIN,CON.2,CON.1)
LCL.IDE_GTIN_Postion_2 = SUBSTRING(DTL.IDE_GTIN:2:1);

// LCL.IDE GTIN Postion-3 = SUBSTRING(DTL.IDE GTIN,CON.3,CON.1)
LCL.IDE_GTIN_Postion_3 = SUBSTRING(DTL.IDE_GTIN:3:1);

// LCL.IDE GTIN Postion-4 = SUBSTRING(DTL.IDE GTIN,CON.4,CON.1)
LCL.IDE_GTIN_Postion_4 = SUBSTRING(DTL.IDE_GTIN:4:1);

// LCL.IDE GTIN Postion-5 = SUBSTRING(DTL.IDE GTIN,CON.5,CON.1)
LCL.IDE_GTIN_Postion_5 = SUBSTRING(DTL.IDE_GTIN:5:1);

// LCL.IDE GTIN Postion-6 = SUBSTRING(DTL.IDE GTIN,CON.6,CON.1)
LCL.IDE_GTIN_Postion_6 = SUBSTRING(DTL.IDE_GTIN:6:1);

// LCL.IDE GTIN Postion-7 = SUBSTRING(DTL.IDE GTIN,CON.7,CON.1)
LCL.IDE_GTIN_Postion_7 = SUBSTRING(DTL.IDE_GTIN:7:1);

// LCL.IDE GTIN Postion-8 = SUBSTRING(DTL.IDE GTIN,CON.8,CON.1)
LCL.IDE_GTIN_Postion_8 = SUBSTRING(DTL.IDE_GTIN:8:1);

// LCL.IDE GTIN Postion-9 = SUBSTRING(DTL.IDE GTIN,CON.9,CON.1)
LCL.IDE_GTIN_Postion_9 = SUBSTRING(DTL.IDE_GTIN:9:1);

// LCL.IDE GTIN Postion-10 = SUBSTRING(DTL.IDE GTIN,CON.10,CON.1)
LCL.IDE_GTIN_Postion_10 = SUBSTRING(DTL.IDE_GTIN:10:1);

// LCL.IDE GTIN Postion-11 = SUBSTRING(DTL.IDE GTIN,CON.11,CON.1)
LCL.IDE_GTIN_Postion_11 = SUBSTRING(DTL.IDE_GTIN:11:1);

// LCL.IDE GTIN Postion-12 = SUBSTRING(DTL.IDE GTIN,CON.12,CON.1)
LCL.IDE_GTIN_Postion_12 = SUBSTRING(DTL.IDE_GTIN:12:1);

// LCL.IDE GTIN Postion-13 = SUBSTRING(DTL.IDE GTIN,CON.13,CON.1)
LCL.IDE_GTIN_Postion_13 = SUBSTRING(DTL.IDE_GTIN:13:1);

// LCL.IDE GTIN Postion-14 = SUBSTRING(DTL.IDE GTIN,CON.14,CON.1)
LCL.IDE_GTIN_Postion_14 = SUBSTRING(DTL.IDE_GTIN:14:1);

//?Each character of the GTIN must be numeric, else it is an error
CASE;

// IF LCL.IDE GTIN Postion-1 is Range 0-9
IF LCL.IDE_GTIN_Postion_1 >= '0';
AND LCL.IDE_GTIN_Postion_1 <= '9';

// AND LCL.IDE GTIN Postion-2 is Range 0-9
AND LCL.IDE_GTIN_Postion_2 >= '0';
AND LCL.IDE_GTIN_Postion_2 <= '9';

// AND LCL.IDE GTIN Postion-3 is Range 0-9
AND LCL.IDE_GTIN_Postion_3 >= '0';
AND LCL.IDE_GTIN_Postion_3 <= '9';

// AND LCL.IDE GTIN Postion-4 is Range 0-9
AND LCL.IDE_GTIN_Postion_4 >= '0';
AND LCL.IDE_GTIN_Postion_4 <= '9';

// AND LCL.IDE GTIN Postion-5 is Range 0-9
AND LCL.IDE_GTIN_Postion_5 >= '0';
AND LCL.IDE_GTIN_Postion_5 <= '9';

// AND LCL.IDE GTIN Postion-6 is Range 0-9
AND LCL.IDE_GTIN_Postion_6 >= '0';
AND LCL.IDE_GTIN_Postion_6 <= '9';

// AND LCL.IDE GTIN Postion-7 is Range 0-9
AND LCL.IDE_GTIN_Postion_7 >= '0';
AND LCL.IDE_GTIN_Postion_7 <= '9';

// AND LCL.IDE GTIN Postion-7 is Range 0-9
AND LCL.IDE_GTIN_Postion_7 >= '0';
AND LCL.IDE_GTIN_Postion_7 <= '9';

// AND LCL.IDE GTIN Postion-9 is Range 0-9
AND LCL.IDE_GTIN_Postion_9 >= '0';
AND LCL.IDE_GTIN_Postion_9 <= '9';

// AND LCL.IDE GTIN Postion-10 is Range 0-9
AND LCL.IDE_GTIN_Postion_10 >= '0';
AND LCL.IDE_GTIN_Postion_10 <= '9';

// AND LCL.IDE GTIN Postion-11 is Range 0-9
AND LCL.IDE_GTIN_Postion_11 >= '0';
AND LCL.IDE_GTIN_Postion_11 <= '9';

// AND LCL.IDE GTIN Postion-12 is Range 0-9
AND LCL.IDE_GTIN_Postion_12 >= '0';
AND LCL.IDE_GTIN_Postion_12 <= '9';

// AND LCL.IDE GTIN Postion-13 is Range 0-9
AND LCL.IDE_GTIN_Postion_13 >= '0';
AND LCL.IDE_GTIN_Postion_13 <= '9';

// AND LCL.IDE GTIN Postion-14 is Range 0-9
AND LCL.IDE_GTIN_Postion_14 >= '0';
AND LCL.IDE_GTIN_Postion_14 <= '9';

//?Each character of the GTIN must be numeric, else it is an error
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Change Flag USR = CND.Yes
LCL.Change_Flag_USR = 'Y';

ENDIF;

ENDIF;

CASE;

// IF LCL.Change Flag USR is Yes
IF LCL.Change_Flag_USR = 'Y';

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(DTL.IDE_GTIN);

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item Default Ext  CH) TYPE(CHGOBJ) FILE(PBBTREP)           AC2094782;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.IDE_GTIN);
PARAMETER(DTL.IDE_Forecast_in_DP);
PARAMETER(DTL.IDE_Unused_Sts_1_2);
PARAMETER(DTL.IDE_Report_to_USDA_MPR);
PARAMETER(DTL.IDE_Regulation_Code_ID);
PARAMETER(DTL.IDE_Unused_Sts_2_3);
PARAMETER(DTL.IDE_Unused_Sts_2_4);
PARAMETER(DTL.IDE_Pallet_Tiers);
PARAMETER(DTL.IDE_Pallet_Blocks);
PARAMETER(DTL.Spanish_Description);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 // DB1.Change Date = JOB.*Job date
 DB1.Change_Date = JOB.*Job_date;

 // DB1.Change Time = JOB.*Job time
 DB1.Change_Time = JOB.*Job_time;

 // DB1.Change User = JOB.*USER
 DB1.Change_User = JOB.*USER;

 // DB1.Change Program = JOB.*PROGRAM
 DB1.Change_Program = JOB.*PROGRAM;

}


//?USER: Exit program processing

RETURN;

