// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POIRXFR
// ?Date: 14.08.2025 Time: 03:37:29
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.Next Program Name = CND.Export Document Data
PAR.Next_Program_Name = 'POIRXFR';

EXECUTE FUNCTION(RTV Status,Event       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1464724;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Event_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Event Code is Not Updated
IF LCL.Event_Code = *BLANK;

// LCL.Event Code = CND.01 Order Entry
LCL.Event_Code = '01';

ENDIF;

EXECUTE FUNCTION(Rtv/Crt Dflt f/NwORdr  RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC1611506;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Event_Code);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.USR Blank Field = CND.Blank
 LCL.USR_Blank_Field = *BLANK;

 //?DO2642 DN 11/15/22-Initialize.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // LCL.ED Live with PHIS = DB1.ED Live with PHIS
 LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

 ENDIF;

 //?12/27/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND NOT DB1.ED Xlate Desc to Country is Not Entered
 AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

 // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
 PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

 ENDIF;

 EXECUTE FUNCTION(Val Exp Doc Ordr Exsts RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1528806;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PGM.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?Create the Exp Doc for the order if it doesnt exist
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.Bill_to_Customer);
 PARAMETER(WRK.Bill_to_Name);
 PARAMETER(WRK.Bill_to_Address_Line_1);
 PARAMETER(WRK.Bill_to_Address_Line_2);
 PARAMETER(WRK.Bill_to_Address_Line_3);
 PARAMETER(WRK.Bill_to_City);
 PARAMETER(WRK.Bill_to_State_Code);
 PARAMETER(WRK.Bill_to_Zip_Postal_Code);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(WRK.Order_Date);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(WRK.Actual_Shipped_Date);
 PARAMETER(WRK.Cancel_Date);
 PARAMETER(WRK.Terms_Code);
 PARAMETER(WRK.Special_Instructions);
 PARAMETER(WRK.Special_Instructions_2);
 PARAMETER(WRK.Carrier_Code);
 PARAMETER(WRK.Comment_Print_Acknowledge);
 PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
 PARAMETER(WRK.Comment_Print_Pick_Slip);
 PARAMETER(WRK.Comment_Print_Ship_Doc);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(WRK.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(WRK.Order_Type_Print_Status);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.User_Original_Entry);
 PARAMETER(WRK.Date_of_Original_Entry);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(WRK.Credit_Hold);
 PARAMETER(WRK.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(WRK.Accounts_Receiv_Ent_1);
 PARAMETER(WRK.Accounts_Receiv_Ent_2);
 PARAMETER(WRK.Load_ID);
 PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.LTL_Flag);
 PARAMETER(WRK.Price_Audit);
 PARAMETER(WRK.Price_Status);
 PARAMETER(WRK.Shipping_Method);
 PARAMETER(WRK.Export_Status);
 PARAMETER(WRK.Palletize);
 PARAMETER(WRK.Shrink_Wrap);
 PARAMETER(WRK.Slip_Sheet);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Attach_to_Invoice_Number);
 PARAMETER(WRK.Load_Plan_Order);
 PARAMETER(WRK.Print_Pick_Slip);
 PARAMETER(WRK.Resell_Reference_Number);
 PARAMETER(WRK.Special_Comment_1);
 PARAMETER(WRK.Special_Comment_2);
 PARAMETER(WRK.Affect_Auto_Accruals);
 PARAMETER(WRK.Sales_Route_Code);
 PARAMETER(WRK.Manager_Level_Code);
 PARAMETER(WRK.VP_Level_Code);
 PARAMETER(WRK.Attach_to_Order_Number);
 PARAMETER(WRK.Reason_for_Price_Audit);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER(WRK.Invoice_Suffix);
 PARAMETER(WRK.Invoice_Date);
 PARAMETER(WRK.Event_Code);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(WRK.Billing_Activity_Type);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(WRK.Order_Certification_Flag);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Format Ship to into Consignee
 //?S12518 DN 02/09/18-Comment out automatically populating Consignee Info.
 // PAR.ED Customer PO # = PAR.Customer Purchase Order #
 PAR.ED_Customer_PO_# = PAR.Customer_Purchase_Order_#;

 // PAR.ED Total Net Weight lbs = PAR.Order Weight Total
 PAR.ED_Total_Net_Weight_lbs = PAR.Order_Weight_Total;

 CASE;

 // IF PAR.Order Weight Total is Not equal zero
 IF PAR.Order_Weight_Total <> *ZERO;

 // PAR.ED Total Unit Price = PAR.A/R order Value Total / PAR.Order Weight Total *
 PAR.ED_Total_Unit_Price = PAR.A_R_order_Value_Total / PAR.Order_Weight_Total;

 ENDIF;

 //?Read the Order Detail and calc/output required fields
 // PAR.ED Nbr of Packages = CON.*ZERO
 PAR.ED_Nbr_of_Packages = *ZERO;

 // PAR.ED Invoice Total = CON.*ZERO
 PAR.ED_Invoice_Total = *ZERO;

 //?12/27/18 DN R13944-Pass in ED Xlate Desc to Country.
 //?11/15/22 DN DO2642-Pass in ED Live with PHIS.
 EXECUTE FUNCTION(Rtv/Crt Exp Doc        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1529224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(LCL.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Initialize routine

  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  // PAR.ED Total Net Weight MT = CON.*ZERO
  PAR.ED_Total_Net_Weight_MT = *ZERO;

  // PAR.ED Total Net Weight lbs = CON.*ZERO
  PAR.ED_Total_Net_Weight_lbs = *ZERO;

  // PAR.Gross Weight USR 9.1 = CON.*ZERO
  PAR.Gross_Weight_USR_9_1 = *ZERO;

  //?Print max std qty and weight if not shipped, and comp value=Y
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Print max std qty and weight if not shipped, and comp value=Y
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('EXPPRTOQT');
  PARAMETER(LCL.Status_Flag_13_Y_N);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Status Flag 13 Y/N is Yes
  IF LCL.Status_Flag_13_Y_N = 'Y';

  // LCL.Status Flag 14 Y/N = CND.Yes
  LCL.Status_Flag_14_Y_N = 'Y';

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  //?DN 03/18/22 DO2416-Added Country Codes ISO 3 Standard.
  //?Create Detail if required for the document.
  CASE;

  // IF PAR.ED Export Document Type is Health Certificate 9060-5
  IF PAR.ED_Export_Document_Type = 'H';

  // OR PAR.ED Export Document Type is Customs Invoice
  OR PAR.ED_Export_Document_Type = 'C';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // OR DB1.Country Code is Hong Kong
  OR DB1.Country_Code = 'HKG';

  // OR DB1.Country Code is Taiwan
  OR DB1.Country_Code = 'TAI';

  // OR DB1.Country Code is Australia
  OR DB1.Country_Code = 'AUS';

  // OR DB1.Country Code is Honduras
  OR DB1.Country_Code = 'HON';

  // OR DB1.Country Code is Romania
  OR DB1.Country_Code = 'ROM';

  // OR DB1.Country Code is Russia
  OR DB1.Country_Code = 'RUS';

  // OR PAR.ED Export Document Type is Customs Invoice-Willson
  OR PAR.ED_Export_Document_Type = 'W';

  // OR PAR.ED Export Document Type is Form 9060-7 (Casings)
  OR PAR.ED_Export_Document_Type = 'G';

  // OR DB1.Country Code is Chile
  OR ( DB1.Country_Code = 'CHI';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  // OR PAR.ED Export Document Type is Application for Export
  OR PAR.ED_Export_Document_Type = 'A';

  // OR DB1.Country Code is Taiwan - ISO 3
  OR DB1.Country_Code = 'TWN';

  // OR DB1.Country Code is Honduras - ISO 3
  OR DB1.Country_Code = 'HND';

  // OR DB1.Country Code is Romania - ISO 3
  OR DB1.Country_Code = 'ROU';

  // OR DB1.Country Code is Chile - ISO 3
  OR ( DB1.Country_Code = 'CHL';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 06/22/22-Commented Out Old Method of Item Label Formatting.
  //?DO2642 DN 06/22/22-New Method of Item Label Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  // PAR.ED Product Pkg Type = CON.BOXES
  PAR.ED_Product_Pkg_Type = 'BOXES';

  // PAR.ED Product Net Weight lbs = DB1.Weight Shipped Total
  PAR.ED_Product_Net_Weight_lbs = DB1.Weight_Shipped_Total;

  // PAR.ED Product Net Weight MT = DB1.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = DB1.Weight_Shipped_Total / 2204.6;

  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Product Nbr of Pkgs = DB1.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = DB1.Quantity_Shipped_Total;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + DB1.Quantity Shipped Total
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + DB1.Quantity_Shipped_Total;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = DB1.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = DB1.Unit Price
  PAR.ED_Product_Unit_Price = DB1.Unit_Price;

  // PAR.ED Producet Extended Amt = DB1.Extended Amount
  PAR.ED_Producet_Extended_Amt = DB1.Extended_Amount;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?4/30/03 changed Item Str Class validation from 420 to 755-use group insted
  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF PAR.Warehouse Type is Fresh
  IF PAR.Warehouse_Type = 'FR';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  //?do for all plants 2/6/17            R9126
  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  // PAR.ED Product Pkg Type = CON.Boxes
  PAR.ED_Product_Pkg_Type = 'Boxes';

  //? Load default MAX qty and weight if  NOT shipped
  CASE;

  // IF LCL.Status Flag 14 Y/N is Yes
  IF LCL.Status_Flag_14_Y_N = 'Y';

  // AND PAR.ED Export Document Type is Application for Export
  AND PAR.ED_Export_Document_Type = 'A';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  //?S14759 DN 04/08/19-Externalize Combos Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14759 DN 04/08/19-Externalize Box Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  CASE;

  // IF DB1.Weight Shipped Total is Greater than zero
  IF DB1.Weight_Shipped_Total > *ZERO;

  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(PAR.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Misc Tare Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Shipped Total *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Shipped_Total;

  //?Misc Tare Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Scheduled *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Scheduled;

  ENDIF;

  //?Find Box weight for the Item and Subtract for final tare weight
  // PAR.Unit Weight = CON.*ZERO
  PAR.Unit_Weight = *ZERO;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Shipped Total NE WRK.ZERO
  IF DB1.Weight_Shipped_Total <> WRK.ZERO;

  //?S00714 get from manifest dtl.. calc as a back up
  EXECUTE FUNCTION(RTV Sum Gross Wt      RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1927373;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Gross_Weight_USR_9_1);
  {
   //?USER: Initialize routine

   //?RMC 3/17/09  new for exp docs
   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Manifest Gross Weight
   PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Manifest_Gross_Weight;

  }

  CASE;

  // IF PAR.Gross Weight USR 9.1 is not entered
  IF PAR.Gross_Weight_USR_9_1 = *ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Shipped Total * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Shipped_Total * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Scheduled NE WRK.ZERO
  IF DB1.Weight_Scheduled <> WRK.ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Scheduled * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Scheduled * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.ED Product Net Weight lbs
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.ED_Product_Net_Weight_lbs;

  ENDIF;

  //?***  ACCUM PACKAGES AND WEIGHT HERE - SO IT GETS THE DEFAULT MAX
  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.ED Product Nbr of Pkgs
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.ED_Product_Nbr_of_Pkgs;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // PAR.ED Total Net Weight lbs = PAR.ED Total Net Weight lbs + PAR.ED Product Net Weight lbs
  PAR.ED_Total_Net_Weight_lbs = PAR.ED_Total_Net_Weight_lbs
  + PAR.ED_Product_Net_Weight_lbs;

  //?***
  //?Date of Slaughter from processing date
  DO;

  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  // PAR.ED Date of Slaughter Dtl = LCL.Text USR 40
  PAR.ED_Date_of_Slaughter_Dtl = LCL.Text_USR_40;

  //?new for AUS form 9115-2
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // PAR.ED Slaughter Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Slaughter_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Slaughter Date Range = WRK.Date From Alpha       USR
  PAR.ED_Slaughter_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?Date of Production from processing date   RMC 5/3/6 added for russia
  DO;

  //?RMC OMS026 update prod date range for russian 9450
  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('N');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  //?new for RUS form 9450-3
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Production Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Production_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Production Date Range = WRK.Date From Alpha       USR
  PAR.ED_Production_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?12/27/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 06/22/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?06/22/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER('N');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(PAR.ED_Slaughter_Date_Range);
  PARAMETER(PAR.ED_Production_Date_Range);
  PARAMETER(LCL.ED_Product_UID);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(LCL.ED_Unused_Status_1);
  PARAMETER(LCL.ED_Unused_Status_2);
  PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
  PARAMETER(LCL.ED_Nbr_of_Packing_Units);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   //?USER: Processing after Data update

   // Call program Rtv/Chg Hdr Shpd Amts XF.
   CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);

  }

  ENDIF;

 }

 CASE;

 // IF WRK.Warehouse Type is Equal blank
 IF WRK.Warehouse_Type = *BLANK;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // PAR.ED Modified Text = DB1.ED Modified Text
 PAR.ED_Modified_Text = DB1.ED_Modified_Text;

 CASE;

 // IF WRK.Warehouse Type is Fresh
 IF WRK.Warehouse_Type = 'FR';

 // PAR.ED Description of Item = CON.Chilled Pork
 PAR.ED_Language_Xlate_Desc_2 = 'Chilled Pork';

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PLTESTNO');
 PARAMETER(PAR.ED_Plant_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Country Code is Canada
 IF DB1.Country_Code = 'CAN';

 // PAR.ED Modified Text = CON.C
 PAR.ED_Modified_Text = 'C';

 // WRK.Year Code = JOB.*Job date *YEAR
 WRK.Year_Code = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

 // Execute function *Move-Right.
 EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US);
 PARAMETER(WRK.Year_Code);
 {
  C                     MOVE #IPANA    #OO9NA
 }

 ENDIF;

 // IF WRK.Warehouse Type is Frozen
 IF WRK.Warehouse_Type = 'FZ';

 // PAR.ED Description of Item = CON.Frozen Pork
 PAR.ED_Language_Xlate_Desc_2 = 'Frozen Pork';

 //?DN 03/23/22 DO2416-Added Country Codes ISO 3 Standard.
 CASE;

 // IF DB1.Country Code is Korea
 IF ( DB1.Country_Code = 'KOR';

 // OR DB1.Country Code is Taiwan
 OR DB1.Country_Code = 'TAI';

 // OR DB1.Country Code is Taiwan - ISO 3
 OR DB1.Country_Code = 'TWN' );

 // AND DB1.ED Export Document Type is Form 9290/9285/9295
 AND DB1.ED_Export_Document_Type = 'E';

 // PAR.ED Plant Number = DB1.ED Plant Number
 PAR.ED_Plant_Number = DB1.ED_Plant_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Country Code is Australia
 IF DB1.Country_Code = 'AUS';

 // OR DB1.Country Code is Mexico
 OR DB1.Country_Code = 'MEX';

 //?S00922 RMC 8/26/09 for 360 use 20343 instead of 20343,I;all 'cept aus/mex
 //?S00795 RMC 5/08/09 for 360 use 20343 instead of 20343,I;no chg for 960
 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('FZESTNO');
 PARAMETER(PAR.ED_Plant_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('FZESTNOI');
 PARAMETER(PAR.ED_Plant_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF DB1.Country Code is Canada
 IF DB1.Country_Code = 'CAN';

 // PAR.ED Modified Text = CON.F
 PAR.ED_Modified_Text = 'F';

 // WRK.Year Code = JOB.*Job date *YEAR
 WRK.Year_Code = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

 // Execute function *Move-Right.
 EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US);
 PARAMETER(WRK.Year_Code);
 {
  C                     MOVE #IPANA    #OO9NA
 }

 ENDIF;

 ENDIF;

 //?Date of Processing --  02/26/04 now Date Of Packing per Dewey
 DO;

 //?Get oldest and most recent production dates for the order's items
 EXECUTE FUNCTION(Rtv Prod Dt Range f/Or RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1529262;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  //?C4086 RMC 5.5.15 check for zero date
  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.Date To               USR = CON.*ZERO
  PAR.Date_To_USR = *ZERO;

  //?USER: Process Data record

  // LCL.Production Date = CND.not entered
  LCL.Production_Date = *ZERO;

  CASE;

  // IF DB1.Production Date is entered
  IF DB1.Production_Date <> *ZERO;

  //?Dont adjust if getting Processing Date Range
  CASE;

  // IF PAR.Status Flag 4  Y/N is no
  IF PAR.Status_Flag_4_Y_N = 'N';

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  //?Dont adjust if getting Processing Date Range
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Adjust if getting slaughter date range
  EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Variety_Rendered_Cut);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Variety/Rendered/Cut is Cut
  IF LCL.Variety_Rendered_Cut = 'C';

  EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Process Data record

   CASE;

   // IF WRK.First Time Flag is Yes
   IF WRK.First_Time_Flag = 'Y';

   // WRK.First Time Flag = CND.NO
   WRK.First_Time_Flag = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Kill Day Status is yes
   IF DB1.Kill_Day_Status = 'Y';

   // PAR.Kill Date = DB1.Plant Date of Last Order
   PAR.Kill_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Save earliest date   - thats not zero 5.5.15
  CASE;

  // IF PAR.Date From             USR EQ WRK.ZERO
  IF PAR.Date_From_USR = WRK.ZERO;

  // OR LCL.Production Date LT PAR.Date From             USR
  OR ( LCL.Production_Date < PAR.Date_From_USR;

  // AND LCL.Production Date is entered
  AND LCL.Production_Date <> *ZERO );

  // PAR.Date From             USR = LCL.Production Date
  PAR.Date_From_USR = LCL.Production_Date;

  ENDIF;

  //?Save latest date
  CASE;

  // IF LCL.Production Date GT PAR.Date To               USR
  IF LCL.Production_Date > PAR.Date_To_USR;

  // PAR.Date To               USR = LCL.Production Date
  PAR.Date_To_USR = LCL.Production_Date;

  ENDIF;

 }

 // WRK.Year Code = PAR.Date From             USR *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_From_USR 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Month                 USR = PAR.Date From             USR *MONTH
 WRK.Month_USR = DATEDTLS(PAR.Date_From_USR 'MO' 1111111 'NONE' 'N' 1);

 EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
 PARAMETER(WRK.Month_USR);
 PARAMETER(WRK.Month_Description_USR);
 {
  //?Execute internal function

  // PAR.Month Description     USR = CND.NOT ENTERED
  PAR.Month_Description_USR = *BLANK;

  CASE;

  // IF PAR.Month                 USR is January
  IF PAR.Month_USR = 01;

  // PAR.Month Description     USR = CON.January
  PAR.Month_Description_USR = 'January';

  // IF PAR.Month                 USR is February
  IF PAR.Month_USR = 02;

  // PAR.Month Description     USR = CON.February
  PAR.Month_Description_USR = 'February';

  // IF PAR.Month                 USR is March
  IF PAR.Month_USR = 03;

  // PAR.Month Description     USR = CON.March
  PAR.Month_Description_USR = 'March';

  // IF PAR.Month                 USR is April
  IF PAR.Month_USR = 04;

  // PAR.Month Description     USR = CON.April
  PAR.Month_Description_USR = 'April';

  // IF PAR.Month                 USR is May
  IF PAR.Month_USR = 05;

  // PAR.Month Description     USR = CON.May
  PAR.Month_Description_USR = 'May';

  // IF PAR.Month                 USR is June
  IF PAR.Month_USR = 06;

  // PAR.Month Description     USR = CON.June
  PAR.Month_Description_USR = 'June';

  // IF PAR.Month                 USR is July
  IF PAR.Month_USR = 07;

  // PAR.Month Description     USR = CON.July
  PAR.Month_Description_USR = 'July';

  // IF PAR.Month                 USR is August
  IF PAR.Month_USR = 08;

  // PAR.Month Description     USR = CON.August
  PAR.Month_Description_USR = 'August';

  // IF PAR.Month                 USR is September
  IF PAR.Month_USR = 09;

  // PAR.Month Description     USR = CON.September
  PAR.Month_Description_USR = 'September';

  // IF PAR.Month                 USR is October
  IF PAR.Month_USR = 10;

  // PAR.Month Description     USR = CON.October
  PAR.Month_Description_USR = 'October';

  // IF PAR.Month                 USR is November
  IF PAR.Month_USR = 11;

  // PAR.Month Description     USR = CON.November
  PAR.Month_Description_USR = 'November';

  // IF PAR.Month                 USR is December
  IF PAR.Month_USR = 12;

  // PAR.Month Description     USR = CON.December
  PAR.Month_Description_USR = 'December';

  ENDIF;

 }

 //?Format production mo/yr From
 CASE;

 // IF WRK.Year Code is not equal to zero
 IF WRK.Year_Code <> *ZERO;

 // AND WRK.Month Description     USR NE WRK.BLANK
 AND WRK.Month_Description_USR <> WRK.BLANK;

 // Call program CLC Format Month,yr    XF.
 CALL PROGRAM(CLC Format Month,yr    XF) ('PDP2XFR');
 PARAMETER(WRK.Year_Code);
 PARAMETER(WRK.Month_Description_USR);
 PARAMETER(WRK.Text_USR_20);

 // PAR.ED Production mo/yr ln 1 = WRK.Text USR 20
 PAR.ED_Production_mo_yr_ln_1 = WRK.Text_USR_20;

 ENDIF;

 // WRK.Year Code = PAR.Date To               USR *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_To_USR 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Month XX USR = PAR.Date To               USR *MONTH
 WRK.Month_XX_USR = DATEDTLS(PAR.Date_To_USR 'MO' 1111111 'NONE' 'N' 1);

 //?Format production mo/yr TO if diff than from
 CASE;

 // IF WRK.Month XX USR NE WRK.Month                 USR
 IF WRK.Month_XX_USR <> WRK.Month_USR;

 EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
 PARAMETER(WRK.Month_XX_USR);
 PARAMETER(WRK.Month_Description_USR);
 {
  //?Execute internal function

  // PAR.Month Description     USR = CND.NOT ENTERED
  PAR.Month_Description_USR = *BLANK;

  CASE;

  // IF PAR.Month                 USR is January
  IF PAR.Month_USR = 01;

  // PAR.Month Description     USR = CON.January
  PAR.Month_Description_USR = 'January';

  // IF PAR.Month                 USR is February
  IF PAR.Month_USR = 02;

  // PAR.Month Description     USR = CON.February
  PAR.Month_Description_USR = 'February';

  // IF PAR.Month                 USR is March
  IF PAR.Month_USR = 03;

  // PAR.Month Description     USR = CON.March
  PAR.Month_Description_USR = 'March';

  // IF PAR.Month                 USR is April
  IF PAR.Month_USR = 04;

  // PAR.Month Description     USR = CON.April
  PAR.Month_Description_USR = 'April';

  // IF PAR.Month                 USR is May
  IF PAR.Month_USR = 05;

  // PAR.Month Description     USR = CON.May
  PAR.Month_Description_USR = 'May';

  // IF PAR.Month                 USR is June
  IF PAR.Month_USR = 06;

  // PAR.Month Description     USR = CON.June
  PAR.Month_Description_USR = 'June';

  // IF PAR.Month                 USR is July
  IF PAR.Month_USR = 07;

  // PAR.Month Description     USR = CON.July
  PAR.Month_Description_USR = 'July';

  // IF PAR.Month                 USR is August
  IF PAR.Month_USR = 08;

  // PAR.Month Description     USR = CON.August
  PAR.Month_Description_USR = 'August';

  // IF PAR.Month                 USR is September
  IF PAR.Month_USR = 09;

  // PAR.Month Description     USR = CON.September
  PAR.Month_Description_USR = 'September';

  // IF PAR.Month                 USR is October
  IF PAR.Month_USR = 10;

  // PAR.Month Description     USR = CON.October
  PAR.Month_Description_USR = 'October';

  // IF PAR.Month                 USR is November
  IF PAR.Month_USR = 11;

  // PAR.Month Description     USR = CON.November
  PAR.Month_Description_USR = 'November';

  // IF PAR.Month                 USR is December
  IF PAR.Month_USR = 12;

  // PAR.Month Description     USR = CON.December
  PAR.Month_Description_USR = 'December';

  ENDIF;

 }

 //?Format production mo/yr to    11/9/05 new. print on jpn cert of exp
 CASE;

 // IF WRK.Year Code is not equal to zero
 IF WRK.Year_Code <> *ZERO;

 // AND WRK.Month Description     USR NE WRK.BLANK
 AND WRK.Month_Description_USR <> WRK.BLANK;

 // Call program CLC Format Month,yr    XF.
 CALL PROGRAM(CLC Format Month,yr    XF) ('PDP2XFR');
 PARAMETER(WRK.Year_Code);
 PARAMETER(WRK.Month_Description_USR);
 PARAMETER(WRK.Text_USR_20);

 // PAR.ED Production mo/yr ln 2 = WRK.Text USR 20
 PAR.ED_Production_mo_yr_ln_2 = WRK.Text_USR_20;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Date From             USR is Entered
 IF PAR.Date_From_USR <> *ZERO;

 // Call program CLC Format Date Range  XF.
 CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Text_USR_40);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Text USR 40 = CON.*BLANK
 PAR.Text_USR_40 = *BLANK;

 ENDIF;

 CASE;

 // IF DB1.Country Code is Mexico
 IF DB1.Country_Code = 'MEX';

 // OR DB1.Country Code is Australia
 OR DB1.Country_Code = 'AUS';

 //?RMC 11/16/05 get plant from company
 // Call program Rtv Alpha Value       XF.
 CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('PLTESTNO');
 PARAMETER(WRK.Text_USR_5);

 // WRK.Description 21A Usr = CONCAT(CON.Packing   Est. #,WRK.Text USR 5,CON.*ZERO)
 WRK.Description_21A_Usr = 'Packing   Est. #' + WRK.Text_USR_5 (*ZERO);

 // LCL.Text Usr 50 = CONCAT(WRK.Description 21A Usr,DB1.ED Date of Processing Txt,CON.4)
 LCL.Text_Usr_50 = WRK.Description_21A_Usr + DB1.ED_Date_of_Processing_Txt (4);

 // PAR.ED Date of Processing = CONCAT(LCL.Text Usr 50,PAR.Text USR 40,CON.3)
 PAR.ED_Date_of_Processing = LCL.Text_Usr_50 + PAR.Text_USR_40 (3);

 // PAR.ED Packing Date = PAR.Date From             USR
 PAR.ED_Packing_Date = PAR.Date_From_USR;

 // PAR.ED Unused Date = PAR.Date To               USR
 PAR.ED_Packing_Date_To = PAR.Date_To_USR;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Date of Processing = CONCAT(DB1.ED Date of Processing Txt,PAR.Text USR 40
 PAR.ED_Date_of_Processing = DB1.ED_Date_of_Processing_Txt + PAR.Text_USR_40 (1);

 ENDIF;

 ENDDO;

 //?Date of Slaughter --
 DO;

 EXECUTE FUNCTION(Rtv Prod Dt Range f/Or RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1529262;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  //?C4086 RMC 5.5.15 check for zero date
  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.Date To               USR = CON.*ZERO
  PAR.Date_To_USR = *ZERO;

  //?USER: Process Data record

  // LCL.Production Date = CND.not entered
  LCL.Production_Date = *ZERO;

  CASE;

  // IF DB1.Production Date is entered
  IF DB1.Production_Date <> *ZERO;

  //?Dont adjust if getting Processing Date Range
  CASE;

  // IF PAR.Status Flag 4  Y/N is no
  IF PAR.Status_Flag_4_Y_N = 'N';

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  //?Dont adjust if getting Processing Date Range
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Adjust if getting slaughter date range
  EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Variety_Rendered_Cut);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Variety/Rendered/Cut is Cut
  IF LCL.Variety_Rendered_Cut = 'C';

  EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Process Data record

   CASE;

   // IF WRK.First Time Flag is Yes
   IF WRK.First_Time_Flag = 'Y';

   // WRK.First Time Flag = CND.NO
   WRK.First_Time_Flag = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Kill Day Status is yes
   IF DB1.Kill_Day_Status = 'Y';

   // PAR.Kill Date = DB1.Plant Date of Last Order
   PAR.Kill_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Save earliest date   - thats not zero 5.5.15
  CASE;

  // IF PAR.Date From             USR EQ WRK.ZERO
  IF PAR.Date_From_USR = WRK.ZERO;

  // OR LCL.Production Date LT PAR.Date From             USR
  OR ( LCL.Production_Date < PAR.Date_From_USR;

  // AND LCL.Production Date is entered
  AND LCL.Production_Date <> *ZERO );

  // PAR.Date From             USR = LCL.Production Date
  PAR.Date_From_USR = LCL.Production_Date;

  ENDIF;

  //?Save latest date
  CASE;

  // IF LCL.Production Date GT PAR.Date To               USR
  IF LCL.Production_Date > PAR.Date_To_USR;

  // PAR.Date To               USR = LCL.Production Date
  PAR.Date_To_USR = LCL.Production_Date;

  ENDIF;

 }

 // WRK.Year Code = PAR.Date From             USR *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_From_USR 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Month                 USR = PAR.Date From             USR *MONTH
 WRK.Month_USR = DATEDTLS(PAR.Date_From_USR 'MO' 1111111 'NONE' 'N' 1);

 EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
 PARAMETER(WRK.Month_USR);
 PARAMETER(WRK.Month_Description_USR);
 {
  //?Execute internal function

  // PAR.Month Description     USR = CND.NOT ENTERED
  PAR.Month_Description_USR = *BLANK;

  CASE;

  // IF PAR.Month                 USR is January
  IF PAR.Month_USR = 01;

  // PAR.Month Description     USR = CON.January
  PAR.Month_Description_USR = 'January';

  // IF PAR.Month                 USR is February
  IF PAR.Month_USR = 02;

  // PAR.Month Description     USR = CON.February
  PAR.Month_Description_USR = 'February';

  // IF PAR.Month                 USR is March
  IF PAR.Month_USR = 03;

  // PAR.Month Description     USR = CON.March
  PAR.Month_Description_USR = 'March';

  // IF PAR.Month                 USR is April
  IF PAR.Month_USR = 04;

  // PAR.Month Description     USR = CON.April
  PAR.Month_Description_USR = 'April';

  // IF PAR.Month                 USR is May
  IF PAR.Month_USR = 05;

  // PAR.Month Description     USR = CON.May
  PAR.Month_Description_USR = 'May';

  // IF PAR.Month                 USR is June
  IF PAR.Month_USR = 06;

  // PAR.Month Description     USR = CON.June
  PAR.Month_Description_USR = 'June';

  // IF PAR.Month                 USR is July
  IF PAR.Month_USR = 07;

  // PAR.Month Description     USR = CON.July
  PAR.Month_Description_USR = 'July';

  // IF PAR.Month                 USR is August
  IF PAR.Month_USR = 08;

  // PAR.Month Description     USR = CON.August
  PAR.Month_Description_USR = 'August';

  // IF PAR.Month                 USR is September
  IF PAR.Month_USR = 09;

  // PAR.Month Description     USR = CON.September
  PAR.Month_Description_USR = 'September';

  // IF PAR.Month                 USR is October
  IF PAR.Month_USR = 10;

  // PAR.Month Description     USR = CON.October
  PAR.Month_Description_USR = 'October';

  // IF PAR.Month                 USR is November
  IF PAR.Month_USR = 11;

  // PAR.Month Description     USR = CON.November
  PAR.Month_Description_USR = 'November';

  // IF PAR.Month                 USR is December
  IF PAR.Month_USR = 12;

  // PAR.Month Description     USR = CON.December
  PAR.Month_Description_USR = 'December';

  ENDIF;

 }

 CASE;

 // IF PAR.Date From             USR is Entered
 IF PAR.Date_From_USR <> *ZERO;

 // Call program CLC Format Date Range  XF.
 CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Text_USR_40);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Text USR 40 = CON.*BLANK
 PAR.Text_USR_40 = *BLANK;

 ENDIF;

 CASE;

 // IF DB1.Country Code is Mexico
 IF DB1.Country_Code = 'MEX';

 // OR DB1.Country Code is Australia
 OR DB1.Country_Code = 'AUS';

 //?RMC 11/16/05 get plant from company
 // Call program Rtv Alpha Value       XF.
 CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('PLTESTNO');
 PARAMETER(WRK.Text_USR_5);

 // WRK.Description 21A Usr = CONCAT(CON.Slaughter Est. #,WRK.Text USR 5,CON.*ZERO)
 WRK.Description_21A_Usr = 'Slaughter Est. #' + WRK.Text_USR_5 (*ZERO);

 // LCL.Text Usr 50 = CONCAT(WRK.Description 21A Usr,DB1.ED Date of Slaughter Txt,CON.4)
 LCL.Text_Usr_50 = WRK.Description_21A_Usr + DB1.ED_Date_of_Slaughter_Txt (4);

 // PAR.ED Date of Slaughter = CONCAT(LCL.Text Usr 50,PAR.Text USR 40,CON.1)
 PAR.ED_Date_of_Slaughter = LCL.Text_Usr_50 + PAR.Text_USR_40 (1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Date of Slaughter = CONCAT(DB1.ED Date of Slaughter Txt,PAR.Text USR 40,CON.2)
 PAR.ED_Date_of_Slaughter = DB1.ED_Date_of_Slaughter_Txt + PAR.Text_USR_40 (2);

 ENDIF;

 ENDDO;

 // LCL.ED Remark Constant 5 = DB1.ED Remark Constant 5
 LCL.ED_Remark_Constant_5 = DB1.ED_Remark_Constant_5;

 // LCL.ED Remark Constant 6 = DB1.ED Remark Constant 6
 LCL.ED_Remark_Constant_6 = DB1.ED_Remark_Constant_6;

 // LCL.ED Remark Constant 7 = DB1.ED Remark Constant 7
 LCL.ED_Remark_Constant_7 = DB1.ED_Remark_Constant_7;

 // LCL.ED Remark Constant 8 = DB1.ED Remark Constant 8
 LCL.ED_Remark_Constant_8 = DB1.ED_Remark_Constant_8;

 // PAR.ED Total Gross Weight MT = PAR.ED Total Gross Weight lbs / CON.2204.6 *
 PAR.ED_Total_Gross_Weight_MT = PAR.ED_Total_Gross_Weight_lbs / 2204.6;

 ENDIF;

 CASE;

 // IF DB1.Country Code is Hong Kong
 IF DB1.Country_Code = 'HKG';

 // WRK.ED Destination = CON.Hong Kong
 WRK.ED_Destination = 'Hong Kong';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.ED Destination = DB1.ED Destination
 WRK.ED_Destination = DB1.ED_Destination;

 ENDIF;

 //?RMC 8/8/6 this was missing from here.
 // LCL.ED Remark Constant 2 = DB1.ED Remark Constant 2
 LCL.ED_Remark_Constant_2 = DB1.ED_Remark_Constant_2;

 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // LCL.Order Alpha = CVTVAR(PAR.Order Number)
 LCL.Order_Alpha = CVTVAR(PAR.Order_Number);

 // LCL.Text-17               USR = CONCAT(CON.Order No.,LCL.Order Alpha,CON.1)
 LCL.Text_17_USR = 'Order No.' + LCL.Order_Alpha (1);

 // Execute function *Move-Right.
 EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
 PARAMETER(LCL.ED_Remark_Constant_2);
 PARAMETER(LCL.Text_17_USR);
 {
  C                     MOVE #IPANA    #OO9NA
 }

 ENDIF;

 //?R13944 DN 12/10/18-Get Seal 1 & 2 to Update Export Doc Order Hdr file.
 CASE;

 // IF DB1.Country Code is Not Canada
 IF DB1.Country_Code <> 'CAN';

 //?NOT FOR CANADA  11.25.19
 EXECUTE FUNCTION(RTV Info 4/Export Doc RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2161323;
 PARAMETER(WRK.Load_ID);
 PARAMETER(LCL.Seal_1);
 PARAMETER(LCL.Seal_2);
 PARAMETER(NLL.Container_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.EDE Seal Nos = CONCAT(LCL.Seal 1,LCL.Seal 2,CON.1)
 LCL.EDE_Seal_Nos = LCL.Seal_1 + LCL.Seal_2 (1);

 ENDIF;

 //?DO2642 DN 06/29/22-Override Consignor Info w/ H Record to Create A Record.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 //?Consignor Address info should always match what's printed on the
 //?Health Certificate & the Application Export documents.
 EXECUTE FUNCTION(Rtv Consignor fm H Doc RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC2206414;
 PARAMETER(PAR.Company_Number);
 PARAMETER('H');
 PARAMETER(PAR.Country_Code);
 PARAMETER(LCL.ED_Consignor_Name);
 PARAMETER(LCL.ED_Consignor_Addr_1);
 PARAMETER(LCL.ED_Consignor_Addr_2);
 PARAMETER(LCL.ED_Consignor_Addr_3);
 PARAMETER(LCL.ED_Consignor_Addr_4);
 PARAMETER(LCL.ED_Consignor_State);
 PARAMETER(LCL.ED_Consignor_Postal);
 PARAMETER(LCL.ED_Consignor_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check Return Code. Some Countries may not have a 'H' Record.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Check Return Code. Some Countries may not have a 'H' Record.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignor Name = DB1.ED Consignor Name
 LCL.ED_Consignor_Name = DB1.ED_Consignor_Name;

 // LCL.ED Consignor Addr 1 = DB1.ED Consignor Addr 1
 LCL.ED_Consignor_Addr_1 = DB1.ED_Consignor_Addr_1;

 // LCL.ED Consignor Addr 2 = DB1.ED Consignor Addr 2
 LCL.ED_Consignor_Addr_2 = DB1.ED_Consignor_Addr_2;

 // LCL.ED Consignor Addr 3 = DB1.ED Consignor Addr 3
 LCL.ED_Consignor_Addr_3 = DB1.ED_Consignor_Addr_3;

 // LCL.ED Consignor Addr 4 = DB1.ED Consignor Addr 4
 LCL.ED_Consignor_Addr_4 = DB1.ED_Consignor_Addr_4;

 // LCL.ED Consignor State = DB1.ED Consignor State
 LCL.ED_Consignor_State = DB1.ED_Consignor_State;

 // LCL.ED Consignor Postal = DB1.ED Consignor Postal
 LCL.ED_Consignor_Postal = DB1.ED_Consignor_Postal;

 // LCL.ED Consignor Country Code = DB1.ED Consignor Country Code
 LCL.ED_Consignor_Country_Code = DB1.ED_Consignor_Country_Code;

 ENDIF;

 //?DO2642 DN 06/29/22-Override Consignor Info w/ H Record to Create A Record.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignor Name = DB1.ED Consignor Name
 LCL.ED_Consignor_Name = DB1.ED_Consignor_Name;

 // LCL.ED Consignor Addr 1 = DB1.ED Consignor Addr 1
 LCL.ED_Consignor_Addr_1 = DB1.ED_Consignor_Addr_1;

 // LCL.ED Consignor Addr 2 = DB1.ED Consignor Addr 2
 LCL.ED_Consignor_Addr_2 = DB1.ED_Consignor_Addr_2;

 // LCL.ED Consignor Addr 3 = DB1.ED Consignor Addr 3
 LCL.ED_Consignor_Addr_3 = DB1.ED_Consignor_Addr_3;

 // LCL.ED Consignor Addr 4 = DB1.ED Consignor Addr 4
 LCL.ED_Consignor_Addr_4 = DB1.ED_Consignor_Addr_4;

 // LCL.ED Consignor State = DB1.ED Consignor State
 LCL.ED_Consignor_State = DB1.ED_Consignor_State;

 // LCL.ED Consignor Postal = DB1.ED Consignor Postal
 LCL.ED_Consignor_Postal = DB1.ED_Consignor_Postal;

 // LCL.ED Consignor Country Code = DB1.ED Consignor Country Code
 LCL.ED_Consignor_Country_Code = DB1.ED_Consignor_Country_Code;

 ENDIF;

 //?R16637 DN 09/24/20-Populate New Consignor/Consignee Fields.
 //?DO2642 DN 06/29/22-Use Consignor 'H' Rcd to Create Consignor 'A' Rcd.
 EXECUTE FUNCTION(Crt Exp Doc Order Hdr  CR) TYPE(CRTOBJ) FILE(PDMRREP)          AC1523842;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.ED_Area_Office);
 PARAMETER(WRK.ED_Destination);
 PARAMETER(LCL.ED_Consignor_Name);
 PARAMETER(LCL.ED_Consignor_Addr_1);
 PARAMETER(LCL.ED_Consignor_Addr_2);
 PARAMETER(LCL.ED_Consignor_Addr_3);
 PARAMETER(LCL.ED_Consignor_Addr_4);
 PARAMETER(LCL.ED_Consignor_State);
 PARAMETER(LCL.ED_Consignor_Postal);
 PARAMETER(LCL.ED_Consignor_Country_Code);
 PARAMETER(PAR.ED_Consignee_Name);
 PARAMETER(PAR.ED_Consignee_Addr_1);
 PARAMETER(PAR.ED_Consignee_Addr_2);
 PARAMETER(PAR.ED_Consignee_Addr_3);
 PARAMETER(PAR.ED_Consignee_Addr_4);
 PARAMETER(PAR.ED_Consignee_State);
 PARAMETER(PAR.ED_Consignee_Postal);
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(DB1.ED_Plant_Location_City);
 PARAMETER(DB1.ED_Plant_Location_State);
 PARAMETER(PAR.ED_Plant_Number);
 PARAMETER(DB1.ED_Processing_Plant_Sts);
 PARAMETER(DB1.ED_Attachment_Subtype);
 PARAMETER(DB1.ED_Attachment_Type_Sts);
 PARAMETER(DB1.ED_Xlate_Desc_to_Country);
 PARAMETER(DB1.ED_Unmarked_Txt);
 PARAMETER(DB1.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Date_of_Slaughter);
 PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
 PARAMETER(PAR.ED_Date_of_Processing);
 PARAMETER(DB1.ED_Place_of_processing_Tx);
 PARAMETER(DB1.ED_Continue_Comment_Txt);
 PARAMETER(DB1.ED_Remark_Constant_1);
 PARAMETER(LCL.ED_Remark_Constant_2);
 PARAMETER(DB1.ED_Remark_Constant_3);
 PARAMETER(DB1.ED_Remark_Constant_4);
 PARAMETER(LCL.ED_Remark_Constant_5);
 PARAMETER(LCL.ED_Remark_Constant_7);
 PARAMETER(LCL.ED_Remark_Constant_8);
 PARAMETER(DB1.ED_Certify_that_the_meat);
 PARAMETER(DB1.ED_Inspector_Name);
 PARAMETER(DB1.ED_Origin_Country);
 PARAMETER(DB1.ED_Port_of_Loading);
 PARAMETER(DB1.ED_Transportion);
 PARAMETER(LCL.Seal_1);
 PARAMETER(LCL.Seal_2);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
 PARAMETER(DB1.ED_Seaboard_Plant_Fax);
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US);
 PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
 PARAMETER(DB1.ED_Can_Port_of_Entry);
 PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
 PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
 PARAMETER(DB1.ED_Can_Reinsp_Est_City);
 PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
 PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
 PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
 PARAMETER(DB1.ED_Whole_Bird_Sts);
 PARAMETER(DB1.ED_Marked_Sts);
 PARAMETER(DB1.ED_Tamper_Evident_Sts);
 PARAMETER(DB1.ED_Plant_Contact_Name);
 PARAMETER(DB1.ED_Plant_Contact_Phone);
 PARAMETER(PAR.ED_Modified_Text);
 PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
 PARAMETER(DB1.ED_Species);
 PARAMETER(DB1.ED_Slaughter_Plant_Name);
 PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
 PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
 PARAMETER(DB1.ED_Packaging_Plant_Name);
 PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
 PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
 PARAMETER(DB1.ED_Manufact_Plant_Name);
 PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
 PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
 PARAMETER(DB1.ED_USDA_Name_1);
 PARAMETER(DB1.ED_USDA_Name_2);
 PARAMETER(DB1.ED_USDA_Name_3);
 PARAMETER(DB1.ED_Title_of_Official);
 PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
 PARAMETER(PAR.ED_Unused_prd_mo_yr);
 PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
 PARAMETER(DB1.ED_Importer_Name);
 PARAMETER(DB1.ED_Importer_Addr_1);
 PARAMETER(DB1.ED_Importer_Addr_2);
 PARAMETER(DB1.ED_Purchaser_Name);
 PARAMETER(DB1.ED_Purchaser_Addr_1);
 PARAMETER(DB1.ED_Purchaser_Addr_2);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.ED_Currency);
 PARAMETER(DB1.ED_Conditions_of_Sale);
 PARAMETER(PAR.ED_Total_Unit_Price);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(DB1.ED_Live_with_PHIS);
 PARAMETER('N');
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.ED_Total_Gross_Weight_MT);
 PARAMETER(DB1.ED_Plant_Number_Dtl);
 PARAMETER(PAR.ED_Language_Xlate_Desc_2);
 PARAMETER(DB1.ED_Slaughter_Date_CofE_3);
 PARAMETER(DB1.ED_Production_mo_yr_ln_3);
 PARAMETER(LCL.ED_Remark_Constant_6);
 PARAMETER(DB1.ED_Allow_Print_bef_Ship);
 PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
 PARAMETER(DB1.ED_Use_item_label_1_2);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(DB1.ED_Total_Package_UOM);
 PARAMETER(DB1.ED_Export_Certificate_Nbr);
 PARAMETER(DB1.ED_Sail_Date);
 PARAMETER(DB1.ED_Sworn_on_Date);
 PARAMETER(DB1.ED_Consignee_Address_Nbr);
 PARAMETER(DB1.ED_Form_Identification_Tx);
 PARAMETER(DB1.ED_Cold_Storage_Name);
 PARAMETER(DB1.ED_Cold_Storage_Addr_1);
 PARAMETER(DB1.ED_Cold_Storage_Addr_2);
 PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
 PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_2);
 PARAMETER(DB1.ED_Booking_Nbr);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ED_Packing_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ED_Packing_Date_To);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_2);
 PARAMETER(PAR.ED_Submit_Status);
 PARAMETER(PAR.EDOH_Unused_Sts_2);
 PARAMETER(PAR.EDOH_Unused_Text_1);
 PARAMETER(PAR.EDOH_Unused_Text_2);
 PARAMETER(PAR.EDOH_Unused_Number_1);
 PARAMETER(PAR.EDOH_Unused_Date_1);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?R13944 DN 12/10/18-Rtv/Set Info to Update Export Doc Order Hdr Ext.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Attachment Type Text.
 CASE;

 // IF DB1.ED Attachment Type Sts is Not Selected
 IF DB1.ED_Attachment_Type_Sts = *BLANK;

 // LCL.EDE Attachment Type Txt = CND.Not Entered
 LCL.EDE_Attachment_Type_Txt = *BLANK;

 //?Set Attachment Type Text.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE Attachment Type Txt = Condition name of DB1.ED Attachment Type Sts
 LCL.EDE_Attachment_Type_Txt = RTVCND(DB1.ED_Attachment_Type_Sts);

 ENDIF;

 //?Set Attachment Sub Type Text.
 CASE;

 // IF DB1.ED Attachment Subtype is Not Selected
 IF DB1.ED_Attachment_Subtype = *BLANK;

 // LCL.EDE Attachment Sub Type = CND.Not Entered
 LCL.EDE_Attachment_Sub_Type = *BLANK;

 //?Set Attachment Sub Type Text.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE Attachment Sub Type = Condition name of DB1.ED Attachment Subtype
 LCL.EDE_Attachment_Sub_Type = RTVCND(DB1.ED_Attachment_Subtype);

 ENDIF;

 //?Set EDE PHIS Action.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // LCL.EDE PHIS Action = CND.New
 LCL.EDE_PHIS_Action = 'N';

 //?Set EDE PHIS Action.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE PHIS Action = LCL.USR Blank Field
 LCL.EDE_PHIS_Action = LCL.USR_Blank_Field;

 ENDIF;

 //?Process One Time Since Info will be the Same for Order.
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // LCL.EDE I Certify Stmt = CND.Meat
 LCL.EDE_I_Certify_Stmt = 'MEAT';

 // LCL.EDE USDA Export Mark Sts = CND.USDA Export Mark
 LCL.EDE_USDA_Export_Mark_Sts = 1;

 //?Set Frozen/Shelf Life Sts.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Warehouse Type is Fresh
 IF WRK.Warehouse_Type = 'FR';

 // LCL.EDE Frozen/Shelf Life Sts = CND.No
 LCL.EDE_Frozen_Shelf_Life_Sts = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE Frozen/Shelf Life Sts = CND.Yes
 LCL.EDE_Frozen_Shelf_Life_Sts = 'Y';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Country ISO Code  RT) TYPE(RTVOBJ) FILE(PNHAREP)           AC2151542;
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.EDE_ISO_Alpha_2_code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?R15161 DN 07/29/19-Changed to Get Booking #.
 EXECUTE FUNCTION(RTV for Exp Doc Dflts RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2161322;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OHE_Booking_Number);
 PARAMETER(LCL.OHE_Discharge_Port_Airprt);
 PARAMETER(NLL.OHE_Sail_Flight_Date);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Info 4/Export Doc RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2161323;
 PARAMETER(WRK.Load_ID);
 PARAMETER(NLL.Seal_1);
 PARAMETER(NLL.Seal_2);
 PARAMETER(LCL.Container_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Will not populate City/St/Zip/Phone.
 ENDIF;

 ENDIF;

 //?S14766 DN 04/02/19-Send in Seal Nos.
 //?R16637 DN 09/24/20-Remove Update of PHIS Fields Except PHIS Telephone.
 EXECUTE FUNCTION(Rtv/Crt from OE       RT) TYPE(RTVOBJ) FILE(PUA6CPP)           AC2151537;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(*BLANK);
 PARAMETER(1);
 PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
 PARAMETER(LCL.EDE_ISO_Alpha_2_code);
 PARAMETER(LCL.EDE_USDA_Export_Mark_Sts);
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.EDE_I_Certify_Stmt);
 PARAMETER(LCL.EDE_Attachment_Type_Txt);
 PARAMETER(LCL.EDE_Attachment_Sub_Type);
 PARAMETER(LCL.Container_Number);
 PARAMETER(LCL.OHE_Discharge_Port_Airprt);
 PARAMETER(0);
 PARAMETER(LCL.EDE_Seal_Nos);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.EDE_PHIS_Action);
 {
  //?USER: Processing if Data record not found

  //?DO2416 DN 04/15/22-Undo Unused Consignee PHIS Fields. Set to Blank.
  EXECUTE FUNCTION(Crt Exp Doc Order Ext CR) TYPE(CRTOBJ) FILE(PUA6CPP)           AC2150707;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.EDE_Reason_f_Replcmnt_Sts);
  PARAMETER(PAR.EDE_Shipment_Type_Sts);
  PARAMETER(PAR.EDE_Frozen_Shelf_Life_Sts);
  PARAMETER(PAR.EDE_ISO_Alpha_2_code);
  PARAMETER(PAR.EDE_USDA_Export_Mark_Sts);
  PARAMETER(LCL.EDE_Special_Printing_Ctl);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDE_Country_of_Final_Dest);
  PARAMETER(PAR.EDE_I_Certify_Stmt);
  PARAMETER(PAR.EDE_Attachment_Type_Txt);
  PARAMETER(PAR.EDE_Attachment_Sub_Type);
  PARAMETER(LCL.EDE_Transit_Country);
  PARAMETER(PAR.EDE_Container_Number);
  PARAMETER(LCL.EDE_Unused_Text_25);
  PARAMETER(LCL.EDE_Additional_Stmt);
  PARAMETER(PAR.EDE_Maturity_lt_30_Months);
  PARAMETER(PAR.EDE_Seal_Nos);
  PARAMETER(PAR.EDE_IFS_PHIS_Doc_Filename);
  PARAMETER(PAR.EDE_Port_of_Entry);
  PARAMETER(PAR.EDE_Unused_2);
  PARAMETER(PAR.EDE_Unused_3);
  PARAMETER(LCL.EDE_Unused_4);
  PARAMETER(LCL.EDE_Unused_5);
  PARAMETER(LCL.EDE_Consignee_Tele_PHIS);
  PARAMETER(PAR.EDE_Unused_6);
  PARAMETER(PAR.EDE_Unused_7);
  PARAMETER(LCL.EDE_Unused_8);
  PARAMETER(PAR.EDE_Unused_9);
  PARAMETER(PAR.EDE_Unused_10);
  PARAMETER(PAR.EDE_Unused_11);
  PARAMETER(PAR.EDE_Consignor_Tele_PHIS);
  PARAMETER(LCL.EDE_PHIS_Process_Status);
  PARAMETER(LCL.EDE_ETL_Process_Timestamp);
  PARAMETER(PAR.EDE_PHIS_Action);
  PARAMETER(LCL.EDE_Return_Cde_Error);
  PARAMETER(LCL.EDE_Application_UID);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  //?shipment type
  CASE;

  // IF DB1.EDE Shipment Type Sts NE WRK.Blank for 3          USR
  IF DB1.EDE_Shipment_Type_Sts <> WRK.Blank_for_3_USR;

  // LCL.EDE Shipment Type Sts = DB1.EDE Shipment Type Sts
  LCL.EDE_Shipment_Type_Sts = DB1.EDE_Shipment_Type_Sts;

  //?shipment type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Shipment Type Sts = PAR.EDE Shipment Type Sts
  LCL.EDE_Shipment_Type_Sts = PAR.EDE_Shipment_Type_Sts;

  ENDIF;

  //?replacement reason
  CASE;

  // IF DB1.EDE Reason f/Replcmnt Sts NE WRK.Blank for 3          USR
  IF DB1.EDE_Reason_f_Replcmnt_Sts <> WRK.Blank_for_3_USR;

  // LCL.EDE Reason f/Replcmnt Sts = DB1.EDE Reason f/Replcmnt Sts
  LCL.EDE_Reason_f_Replcmnt_Sts = DB1.EDE_Reason_f_Replcmnt_Sts;

  //?replacement reason
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Reason f/Replcmnt Sts = PAR.EDE Reason f/Replcmnt Sts
  LCL.EDE_Reason_f_Replcmnt_Sts = PAR.EDE_Reason_f_Replcmnt_Sts;

  ENDIF;

  //?shelf life
  CASE;

  // IF DB1.EDE Frozen/Shelf Life Sts NE WRK.Blank for 3          USR
  IF DB1.EDE_Frozen_Shelf_Life_Sts <> WRK.Blank_for_3_USR;

  // LCL.EDE Frozen/Shelf Life Sts = DB1.EDE Frozen/Shelf Life Sts
  LCL.EDE_Frozen_Shelf_Life_Sts = DB1.EDE_Frozen_Shelf_Life_Sts;

  //?shelf life
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Frozen/Shelf Life Sts = PAR.EDE Frozen/Shelf Life Sts
  LCL.EDE_Frozen_Shelf_Life_Sts = PAR.EDE_Frozen_Shelf_Life_Sts;

  ENDIF;

  //?Container Number.                             S14766 DN 04/02/19
  CASE;

  // IF DB1.EDE Container Number is Not Entered
  IF DB1.EDE_Container_Number = *BLANK;

  // LCL.EDE Container Number = PAR.EDE Container Number
  LCL.EDE_Container_Number = PAR.EDE_Container_Number;

  //?Container Number.                             S14766 DN 04/02/19
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Container Number = DB1.EDE Container Number
  LCL.EDE_Container_Number = DB1.EDE_Container_Number;

  ENDIF;

  //?Seal Nos.                                     S14766 DN 04/02/19
  CASE;

  // IF DB1.EDE Seal Nos is Not Entered
  IF DB1.EDE_Seal_Nos = *BLANK;

  // LCL.EDE Seal Nos = PAR.EDE Seal Nos
  LCL.EDE_Seal_Nos = PAR.EDE_Seal_Nos;

  //?Seal Nos.                                     S14766 DN 04/02/19
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Seal Nos = DB1.EDE Seal Nos
  LCL.EDE_Seal_Nos = DB1.EDE_Seal_Nos;

  ENDIF;

  //?IFS PHIS Doc Filename                         DO2416 DN 04/15/22
  CASE;

  // IF DB1.EDE IFS PHIS Doc Filename is Not entered
  IF DB1.EDE_IFS_PHIS_Doc_Filename = *BLANK;

  // LCL.EDE IFS PHIS Doc Filename = PAR.EDE IFS PHIS Doc Filename
  LCL.EDE_IFS_PHIS_Doc_Filename = PAR.EDE_IFS_PHIS_Doc_Filename;

  //?IFS PHIS Doc Filename                         DO2416 DN 04/15/22
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE IFS PHIS Doc Filename = DB1.EDE IFS PHIS Doc Filename
  LCL.EDE_IFS_PHIS_Doc_Filename = DB1.EDE_IFS_PHIS_Doc_Filename;

  ENDIF;

  //?Port of Entry                                 DO2416 DN 04/15/22
  CASE;

  // IF DB1.EDE Port of Entry is Not entered
  IF DB1.EDE_Port_of_Entry = *BLANK;

  // LCL.EDE Port of Entry = PAR.EDE Port of Entry
  LCL.EDE_Port_of_Entry = PAR.EDE_Port_of_Entry;

  //?Port of Entry                                 DO2416 DN 04/15/22
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Port of Entry = DB1.EDE Port of Entry
  LCL.EDE_Port_of_Entry = DB1.EDE_Port_of_Entry;

  ENDIF;

  EXECUTE FUNCTION(Chg Exp Doc Order Ext CH) TYPE(CHGOBJ) FILE(PUA6CPP)           AC2150708;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(LCL.EDE_Reason_f_Replcmnt_Sts);
  PARAMETER(LCL.EDE_Shipment_Type_Sts);
  PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
  PARAMETER(DB1.EDE_ISO_Alpha_2_code);
  PARAMETER(DB1.EDE_USDA_Export_Mark_Sts);
  PARAMETER(DB1.EDE_Special_Printing_Ctl);
  PARAMETER(DB1.EDE_Appl_Billing_First_Nm);
  PARAMETER(DB1.EDE_Appl_Billing_Last_Nm);
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDE_Country_of_Final_Dest);
  PARAMETER(DB1.EDE_I_Certify_Stmt);
  PARAMETER(DB1.EDE_Attachment_Type_Txt);
  PARAMETER(DB1.EDE_Attachment_Sub_Type);
  PARAMETER(DB1.EDE_Transit_Country);
  PARAMETER(LCL.EDE_Container_Number);
  PARAMETER(DB1.EDE_Unused_Text_25);
  PARAMETER(DB1.EDE_Additional_Stmt);
  PARAMETER(DB1.EDE_Maturity_lt_30_Months);
  PARAMETER(LCL.EDE_Seal_Nos);
  PARAMETER(LCL.EDE_IFS_PHIS_Doc_Filename);
  PARAMETER(LCL.EDE_Port_of_Entry);
  PARAMETER(DB1.EDE_Unused_2);
  PARAMETER(DB1.EDE_Unused_3);
  PARAMETER(DB1.EDE_Unused_4);
  PARAMETER(DB1.EDE_Unused_5);
  PARAMETER(DB1.EDE_Consignee_Tele_PHIS);
  PARAMETER(DB1.EDE_Unused_6);
  PARAMETER(DB1.EDE_Unused_7);
  PARAMETER(DB1.EDE_Unused_8);
  PARAMETER(DB1.EDE_Unused_9);
  PARAMETER(DB1.EDE_Unused_10);
  PARAMETER(DB1.EDE_Unused_11);
  PARAMETER(DB1.EDE_Consignor_Tele_PHIS);
  PARAMETER(DB1.EDE_PHIS_Process_Status);
  PARAMETER(DB1.EDE_ETL_Process_Timestamp);
  PARAMETER(DB1.EDE_PHIS_Action);
  PARAMETER(DB1.EDE_Return_Cde_Error);
  PARAMETER(DB1.EDE_Application_UID);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?R15161 DN 07/29/19-Update Export Doc Order Hdr Ext2 for Booking #.
 EXECUTE FUNCTION(Upd Crt/Chg for Order  IF) TYPE(EXCINTFUN)                     AC2173632;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.OHE_Booking_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Upd Crt/Chg for Order  RT) TYPE(RTVOBJ) FILE(PUBICPP)          AC2173628;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.EDE2_Booking_Number);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Exp Doc Ord Hdr E2 CR) TYPE(CRTOBJ) FILE(PUBICPP)          AC2172399;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(PAR.EDE2_Booking_Number);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   //?USER: Process Data record

   CASE;

   // IF DB1.EDE2 Booking Number is Not Entered
   IF DB1.EDE2_Booking_Number = *BLANK;

   // LCL.EDE2 Booking Number = PAR.EDE2 Booking Number
   LCL.EDE2_Booking_Number = PAR.EDE2_Booking_Number;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.EDE2 Booking Number = DB1.EDE2 Booking Number
   LCL.EDE2_Booking_Number = DB1.EDE2_Booking_Number;

   ENDIF;

   EXECUTE FUNCTION(Chg Exp Doc Ord Hdr E2 CH) TYPE(CHGOBJ) FILE(PUBICPP)          AC2172400;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);
   PARAMETER(DB1.EDE2_Container_Nbrs);
   PARAMETER(DB1.EDE2_Actual_Shipped_Date);
   PARAMETER(DB1.EDE2_Seal_Nos);
   PARAMETER(DB1.EDE2_Export_Shipper_Name);
   PARAMETER(DB1.EDE2_Unused_Status_1);
   PARAMETER(DB1.EDE2_Unused_Status_2);
   PARAMETER(LCL.EDE2_Booking_Number);
   PARAMETER(DB1.EDE2_Unused_Text_2);
   PARAMETER(DB1.EDE2_Unused_Text_3);
   PARAMETER(DB1.EDE2_Unused_Nbr_1);
   PARAMETER(DB1.EDE2_Unused_Nbr_2);
   PARAMETER(DB1.EDE2_Unused_Date_1);
   PARAMETER(DB1.EDE2_Unused_Date_2);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?Set Doc Type.
CASE;

// IF PAR.Country Code is Russia
IF PAR.Country_Code = 'RUS';

// WRK.ED Export Document Type = CND.9290/9285/9295/9115/9450
WRK.ED_Export_Document_Type = 'E';

//?Set Doc Type.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.ED Export Document Type = CND.Health Certificate 9060-5
WRK.ED_Export_Document_Type = 'H';

ENDIF;

//?Call The Edit Export Document Data
// Call program Edt Export Document   ER.
CALL PROGRAM(Edt Export Document   ER) ('POIQE1R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.ED_Export_Document_Type);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Next_Program_Name);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

