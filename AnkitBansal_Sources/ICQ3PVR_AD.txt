// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICQ3PVR
// ?Date: 14.08.2025 Time: 03:26:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

// DTL.Condition Desc. 1  USR = Condition name of PAR.Inventory Trans. ID
DTL.Condition_Desc_1_USR = RTVCND(PAR.Inventory_Trans_ID);

// DTL.Description = PAR.USR Hold Description
DTL.Description = PAR.USR_Hold_Description;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// DTL.Shift Number = CON.1
DTL.Shift_Number = 1;

//?USER: Validate fields

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(DTL.Warehouse_Code);
PARAMETER('I');
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Validate fields will check the major relational entries
//?Select Item or Warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Select Item
CASE;

// IF PGM.*Cursor field <IS> DTL.Item Code
IF PGM.*Cursor_field = DTL.Item_Code;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

ENDIF;

//?Select warehouse
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

CASE;

// IF PAR.Inventory Trans. Type is Special AccuSort Adjust
IF PAR.Inventory_Trans_Type = 'SA';

// Call program SEL Prod Whse          SR.
CALL PROGRAM(SEL Prod Whse          SR) ('PDLISRR');
PARAMETER(DTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Non-Prod Whse      SR.
CALL PROGRAM(SEL Non-Prod Whse      SR) ('PDL4SRR');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate From Warehouse/Plant/Carlisle flag for validation  FP1127
EXECUTE FUNCTION(Rtv Dsc/TrCtl/PFS flgs RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1913688;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.WHS_Live_with_Carlisle);
PARAMETER(PAR.WHS_PFS_Interface);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return code/Carlisle/Plant and process accordingly  FP1127
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF PAR.WHS Live w/Carlisle is Yes
IF PAR.WHS_Live_with_Carlisle = 'Y';

// OR PAR.Trans Contol AS400/Plant is Plant
OR PAR.Trans_Contol_AS400_Plant = 'P';

// Send error message - 'Carlisle or Plant controlled whse not allowed in manual transaction.'
ERROR(USR4098);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Check return code/Carlisle/Plant and process accordingly  FP1127
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return code and process accordingly
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If no production date controlled item, date can't be entered
CASE;

// IF PAR.Production Date Control is no
IF PAR.Production_Date_Control = 'N';

CASE;

// IF DTL.Production Date is entered
IF DTL.Production_Date <> *ZERO;

// Send error message - 'Production date must be blank for non production date controlled item.'
ERROR(USR1917);
MSGPARM(DTL.Production_Date);

ENDIF;

//?If no production date controlled item, date can't be entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Production Date is entered
IF DTL.Production_Date <> *ZERO;

EXECUTE FUNCTION(Val Item Balance Dtl   RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1311985;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item balance detail not found.'
ERROR(USR0426);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

//?S13514 DN 08/06/18-Prod Dte must be >= Jan 1 (2yrs ago) & <= Current Dte.
CASE;

// IF DTL.Production Date is entered
IF DTL.Production_Date <> *ZERO;

EXECUTE FUNCTION(Val Date In Not < 2yrs IF) TYPE(EXCINTFUN)                     AC2157322;
PARAMETER(DTL.Production_Date);
PARAMETER('P');
PARAMETER(LCL.Generic_Message_80_USR);
{
 //?Execute internal function

 //?Date In must be >= Jan 1 (2 yrs ago) and <= Current Date.
 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Generic Message 80 USR = CON.*BLANK
 PAR.Generic_Message_80_USR = *BLANK;

 //?Set 'Date In' Text.
 CASE;

 // IF PAR.Date In Type USR is Transaction Date
 IF PAR.Date_In_Type_USR = 'T';

 // LCL.Text USR 15 = CON.Transaction
 LCL.Text_USR_15 = 'Transaction';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Production Date
 IF PAR.Date_In_Type_USR = 'P';

 // LCL.Text USR 15 = CON.Production
 LCL.Text_USR_15 = 'Production';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Label Date
 IF PAR.Date_In_Type_USR = 'L';

 // LCL.Text USR 15 = CON.Label
 LCL.Text_USR_15 = 'Label';

 ENDIF;

 ENDIF;

 //?Get System Date & Set Date 2 Years Back on Jan 1.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 // LCL.Transaction Date D8# USR = LCL.System Date USR
 LCL.Transaction_Date_D8#_USR = LCL.System_Date_USR;

 //?** YEAR ** (Go Back 2 Years)
 // LCL.Year Code = LCL.Transaction Date D8# USR / CON.10000 *
 LCL.Year_Code = LCL.Transaction_Date_D8#_USR / 10000;

 // LCL.Year Code = LCL.Year Code - CON.2
 LCL.Year_Code = LCL.Year_Code - 2;

 // LCL.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 LCL.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // LCL.Year  NBR USR = LCL.Year Code
 LCL.Year_NBR_USR = LCL.Year_Code;

 // LCL.Year  (Char) USR = CVTVAR(LCL.Year  NBR USR)
 LCL.Year_Char_USR = CVTVAR(LCL.Year_NBR_USR);

 //?** MONTH ** (Default to Jan)
 // LCL.Month (Char) USR = CON.01
 LCL.Month_Char_USR = 01;

 //?** DAY ** (Default to 01)
 // LCL.Day   (Char) USR = CON.01
 LCL.Day_Char_USR = 01;

 //?** Convert Date to CYYMMDD Format **
 // LCL.Date (Char-8) USR = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_Alpha_YYYY_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_Char_USR (*ZERO);

 //?** Convert Date to CYYMMDD Format **
 //?CENTURY+YEAR
 CASE;

 // IF LCL.Year Code is Twentieth Century
 IF LCL.Year_Code <= 1999;

 // LCL.Date (Alpha) USR = CONCAT(CON.0,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '0' + LCL.Year_Char_USR (*ZERO);

 //?CENTURY+YEAR
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date (Alpha) USR = CONCAT(CON.1,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '1' + LCL.Year_Char_USR (*ZERO);

 ENDIF;

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Day_Char_USR (*ZERO);

 // LCL.Date                  USR = CVTVAR(LCL.Date (Alpha) USR)
 LCL.Date_USR = CVTVAR(LCL.Date_Alpha_USR);

 ENDIF;

 //?Send Error Message.
 CASE;

 // IF PAR.Date In  (7,0) USR GT LCL.System Date USR
 IF PAR.Date_In_70_USR > LCL.System_Date_USR;

 //?Cannot be a future date.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be a future,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be a future' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON.date.,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + 'date.' (1);

 //?Send Error Message.
 // IF PAR.Date In  (7,0) USR LT LCL.Date                  USR
 IF PAR.Date_In_70_USR < LCL.Date_USR;

 //?Cannot be older than last 2 years ago.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be prior to,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be prior to' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,LCL.Date (Char-8) USR,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + LCL.Date_Char_8_USR (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON..,CON.*ZERO)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + '.' (*ZERO);

 ENDIF;

}


CASE;

// IF LCL.Generic Message 80 USR is Entered
IF LCL.Generic_Message_80_USR <> *BLANK;

// Send error message - '&1'
ERROR(USR5086);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Production_Date);

ENDIF;

ENDIF;

ENDIF;

//?Check return code and process accordingly
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(DTL.Item_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Reason Code Desc.  RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1148526;
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Reason_Description);
{
 //?USER: Processing if Data record not found

 // PAR.Description = CON.*BLANK
 PAR.Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Status/Default     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152524;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Cost_Update_Pending);
PARAMETER(PAR.Post_GL_Status);
PARAMETER(PAR.Vendor_Item_Whse_Default);
PARAMETER(PAR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check return code and process accordingly
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Send error message if item is not active
CASE;

// IF PAR.Record Status is Deleted & Inactive
IF PAR.Record_Status = 'D'/'I';

// Send error message - 'Item balance is not active for item & warehouse.'
ERROR(USR1918);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

//?Send error message if item is not active
// IF *OTHERWISE
IF *OTHERWISE;

//?07/19/10 PKD E884-Remove Unit Cost validation.
ENDIF;

//?Check return code and process accordingly
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Item_Code);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?USER: Validate relations

//?If unit of measure is not entered then default to the primary
CASE;

// IF DTL.U/M - Transaction is Not Entered
IF DTL.UOM_Transaction = *BLANK;

// DTL.U/M - Transaction = PAR.U/M - Primary
DTL.UOM_Transaction = PAR.UOM_Primary;

//?If unit of measure is not entered then default to the primary
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.U/M - Transaction NE PAR.U/M - Primary
IF DTL.UOM_Transaction <> PAR.UOM_Primary;

// AND DTL.U/M - Transaction NE PAR.U/M - Second
AND DTL.UOM_Transaction <> PAR.UOM_Second;

// AND DTL.U/M - Transaction NE PAR.U/M - Third
AND DTL.UOM_Transaction <> PAR.UOM_Third;

// Send error message - 'Item unit of measure must be one of the following: &2 &3 &4'
ERROR(USR0392);
MSGPARM(DTL.UOM_Transaction);
MSGPARM(PAR.UOM_Primary);
MSGPARM(PAR.UOM_Second);
MSGPARM(PAR.UOM_Third);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(DTL.UOM_Transaction);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?If the company number has changed issue error
CASE;

// IF PAR.Company Number - 3 NE DTL.Company Number - 3
IF PAR.Company_Number <> DTL.Company_Number;

// Send error message - 'Company number must match Company number for original transaction.'
ERROR(USR0916);

ENDIF;

//?Fill in shift number
CASE;

// IF DTL.Shift Number EQ WRK.BLANK
IF DTL.Shift_Number = WRK.BLANK;

// DTL.Shift Number = CON.1
DTL.Shift_Number = 1;

ENDIF;

//?USER: User defined action

// DTL.U/M - Cost = CND.Pounds
DTL.UOM_Cost = 'LB';

//?** Pass Lot Number from the screen to the edit program  FP1127
//?WI517 DN 09/25/23-Added Output Parm 'Inventory Updated USR'.
// Call program Edt Enter Issu/Adj Dtl EF.
CALL PROGRAM(Edt Enter Issu/Adj Dtl EF) ('ICQ7EFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(PAR.Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.UOM_Transaction);
PARAMETER(DTL.Description);
PARAMETER(DTL.UOM_Cost);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Employee_Badge_Number);
PARAMETER(DTL.Shift_Number);
PARAMETER(DTL.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(DTL.Name);
PARAMETER(DTL.Condition_Desc_1_USR);
PARAMETER(DTL.USR_Hold_Description);
PARAMETER(DTL.Lot_Number);
PARAMETER(LCL.Inventory_Updated_USR);

//?Process return code from called program
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?WI517 DN 09/28/23-Commented Out.
//?WI517 DN 09/28/23-Send Info Msg Based on Inventory was Updated or Not.
CASE;

// IF LCL.Inventory Updated USR is Yes
IF LCL.Inventory_Updated_USR = 'Y';

// Send information message - 'Last item &1 processed.'
MESSAGE(USR0400 *INFO);
MSGPARM(DTL.Item_Code);

//?WI517 DN 09/28/23-Send Info Msg Based on Inventory was Updated or Not.
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Last item &1 not processed.'
MESSAGE(USR0399 *INFO);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Process return code from called program
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Last item &1 not processed.'
MESSAGE(USR0399 *INFO);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Reset screen for next entry
// DTL.Item Code = CON.*ZERO
DTL.Item_Code = *ZERO;

// DTL.Description Line One = CON.*BLANK
DTL.Description_Line_One = *BLANK;

// DTL.U/M - Transaction = CON.*BLANK
DTL.UOM_Transaction = *BLANK;

// DTL.Description. . . . . . . = CON.*BLANK
DTL.Description = *BLANK;

// DTL.Production Date = CON.*ZERO
DTL.Production_Date = *ZERO;

// DTL.Description = PAR.USR Hold Description
DTL.Description = PAR.USR_Hold_Description;

// DTL.Lot Number = CON.*ZERO
DTL.Lot_Number = *ZERO;

