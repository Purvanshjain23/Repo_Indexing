// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMPJPFR
// ?Date: 14.08.2025 Time: 12:05:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW GL_Sub_Code;
// LCL.G/L Sub Code = CON.*BLANK
LCL.GL_Sub_Code = *BLANK;

// SUPPRESSED PRINT G/L Sub Code header format

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
// LCL.Item Structure Class Code = CON.*ZERO
LCL.Item_Structure_Class_Code = *ZERO;

// SUPPRESSED PRINT Item Structure Class Code header format

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Sales Summary     RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1856326;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(CUR.Weight_Billed);
PARAMETER(CUR.Billing_Detail_Cost_Dol);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date GT PAR.Date To               USR
 IF DB1.Actual_Shipped_Date > PAR.Date_To_USR;

 QUIT;

 ENDIF;

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Affect Sales Doll Status is yes
 IF DB1.Affect_Sales_Doll_Status = 'Y';

 // PAR.Billing Detail Cost Dol. = PAR.Billing Detail Cost Dol. + DB1.Billing Detail Gross Dol.
 PAR.Billing_Detail_Cost_Dol = PAR.Billing_Detail_Cost_Dol + DB1.Billing_Detail_Gross_Dol;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is yes
 IF DB1.Affect_Sales_Pnds_Status = 'Y';

 CASE;

 // IF LCL.Billing Activity Type is Credit Memo
 IF LCL.Billing_Activity_Type = '2';

 // PAR.Weight Billed = PAR.Weight Billed - DB1.Weight Billed
 PAR.Weight_Billed = PAR.Weight_Billed - DB1.Weight_Billed;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Billed = PAR.Weight Billed + DB1.Weight Billed
 PAR.Weight_Billed = PAR.Weight_Billed + DB1.Weight_Billed;

 ENDIF;

 ENDIF;

}


//?PRT: G/L Sub Code
CASE;

// IF CUR.G/L Sub Code NE LCL.G/L Sub Code
IF CUR.GL_Sub_Code <> LCL.GL_Sub_Code;

// LCL.G/L Sub Code = CUR.G/L Sub Code
LCL.GL_Sub_Code = CUR.GL_Sub_Code;

//?PRT: G/L Sub Code
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.G/L Sub Code = CON.*BLANK
CUR.GL_Sub_Code = *BLANK;

ENDIF;

//?PRT: Item Structure Class
CASE;

// IF CUR.Item Structure Class Code NE LCL.Item Structure Class Code
IF CUR.Item_Structure_Class_Code <> LCL.Item_Structure_Class_Code;

// LCL.Item Structure Class Code = CUR.Item Structure Class Code
LCL.Item_Structure_Class_Code = CUR.Item_Structure_Class_Code;

//?PRT: Item Structure Class
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Item Structure Class Code = CON.*ZERO
CUR.Item_Structure_Class_Code = *ZERO;

ENDIF;

//?Gross /CWT
CASE;

// IF CUR.Weight Billed is Greater than zero
IF CUR.Weight_Billed > *ZERO;

// Gross /CWT
CUR.USR_Percent_Work_7_2 = ( CUR.Billing_Detail_Cost_Dol / CUR.Weight_Billed 'H' ) * 100           +
'H';

ENDIF;

//?**** Year To Date ****
// LCL.Year Code = PAR.Date To               USR *YEAR
LCL.Year_Code = DATEDTLS(PAR.Date_To_USR 'YR' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Year Start/End    RT) TYPE(RTVOBJ) FILE(CAATREP)           AC1856330;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Year_Code);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Ending_Date);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // PAR.Period Ending Date = DB1.Period Ending Date
 PAR.Period_Ending_Date = DB1.Period_Ending_Date;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 // PAR.Period Beginning Date = DB1.Period Beginning Date
 PAR.Period_Beginning_Date = DB1.Period_Beginning_Date;

}


EXECUTE FUNCTION(Rtv Sales Summary     RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1856326;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(PAR.Date_To_USR);
PARAMETER(CUR.USR_Weight);
PARAMETER(CUR.USR_Billing_Detail_Gross);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date GT PAR.Date To               USR
 IF DB1.Actual_Shipped_Date > PAR.Date_To_USR;

 QUIT;

 ENDIF;

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF DB1.Affect Sales Doll Status is yes
 IF DB1.Affect_Sales_Doll_Status = 'Y';

 // PAR.Billing Detail Cost Dol. = PAR.Billing Detail Cost Dol. + DB1.Billing Detail Gross Dol.
 PAR.Billing_Detail_Cost_Dol = PAR.Billing_Detail_Cost_Dol + DB1.Billing_Detail_Gross_Dol;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is yes
 IF DB1.Affect_Sales_Pnds_Status = 'Y';

 CASE;

 // IF LCL.Billing Activity Type is Credit Memo
 IF LCL.Billing_Activity_Type = '2';

 // PAR.Weight Billed = PAR.Weight Billed - DB1.Weight Billed
 PAR.Weight_Billed = PAR.Weight_Billed - DB1.Weight_Billed;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Billed = PAR.Weight Billed + DB1.Weight Billed
 PAR.Weight_Billed = PAR.Weight_Billed + DB1.Weight_Billed;

 ENDIF;

 ENDIF;

}


//?YTD Gross /CWT
CASE;

// IF CUR.USR Weight is Greater than zero
IF CUR.USR_Weight > *ZERO;

// YTD Gross /CWT
CUR.USR_Percent_Work_7_2_1 = ( CUR.USR_Billing_Detail_Gross / CUR.USR_Weight 'H' ) * 100           +
'H';

ENDIF;

CASE;

// IF DB1.Item Structure Type Code is EQ 900
IF DB1.Item_Structure_Type_Code = 900;

CASE;

// IF DB1.Item Code NE DB1.Seaboard Equivalent Item
IF DB1.Item_Code <> DB1.Seaboard_Equivalent_Item;

// CUR.Item Code = DB1.Seaboard Equivalent Item
CUR.Item_Code = DB1.Seaboard_Equivalent_Item;

ENDIF;

ENDIF;

//?PRT: Format
CASE;

// IF CUR.Weight Billed is Equal to zero
IF CUR.Weight_Billed = *ZERO;

// AND CUR.USR Weight is Equal to zero
AND CUR.USR_Weight = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed);

NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Cost_Dol);

NXT.Weight_Billed_Sum_13 = SUM(CUR.USR_Weight);

NXT.FOB_Gross_Amount_SUM = SUM(CUR.USR_Billing_Detail_Gross);

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

CASE;

IF NEW Item_Structure_Class_Code;
CASE;

// IF CUR.Weight Billed SUM is Equal to zero
IF CUR.Weight_Billed_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Gross /CWT
CUR.USR_Percent_Work_7_2 = ( CUR.Billing_Detail_Gr_$_SUM / CUR.Weight_Billed_SUM 'H' )             +
* 100 'H';

CASE;

// IF CUR.Weight Billed Sum 13 is GT Zero
IF CUR.Weight_Billed_Sum_13 > *ZERO;

// YTD Gross /CWT
CUR.USR_Percent_Work_7_2_1 = ( CUR.FOB_Gross_Amount_SUM / CUR.Weight_Billed_Sum_13 'H' )           +
* 100 'H';

ENDIF;

ENDIF;

// Print Item Structure Class Code totals format
PRINT Item Structure Class Code totals format;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Gr_$_SUM);

NXT.Weight_Billed_Sum_13 = SUM(CUR.Weight_Billed_Sum_13);

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount_SUM);

ENDIF;

CASE;

IF NEW GL_Sub_Code;
CASE;

// IF CUR.Weight Billed SUM is Equal to zero
IF CUR.Weight_Billed_SUM = *ZERO;

// AND CUR.Weight Billed Sum 13 is EQ Zero
AND CUR.Weight_Billed_Sum_13 = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Gross /CWT
CASE;

// IF CUR.Weight Billed SUM is Greater than zero
IF CUR.Weight_Billed_SUM > *ZERO;

// Gross /CWT
CUR.USR_Percent_Work_7_2 = ( CUR.Billing_Detail_Gr_$_SUM / CUR.Weight_Billed_SUM 'H' )             +
* 100 'H';

ENDIF;

//?YTD Gross /CWT
CASE;

// IF CUR.Weight Billed Sum 13 is GT Zero
IF CUR.Weight_Billed_Sum_13 > *ZERO;

// YTD Gross /CWT
CUR.USR_Percent_Work_7_2_1 = ( CUR.FOB_Gross_Amount_SUM / CUR.Weight_Billed_Sum_13 'H' )           +
* 100 'H';

ENDIF;

ENDIF;

// Print G/L Sub Code totals format
PRINT G/L Sub Code totals format;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Gr_$_SUM);

NXT.Weight_Billed_Sum_13 = SUM(CUR.Weight_Billed_Sum_13);

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount_SUM);

ENDIF;

// SUPPRESSED PRINT Company Number totals format

//?USER: On print of final totals format

CASE;

// IF CUR.Weight Billed SUM is Equal to zero
IF CUR.Weight_Billed_SUM = *ZERO;

// AND CUR.Weight Billed Sum 13 is EQ Zero
AND CUR.Weight_Billed_Sum_13 = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Gross /CWT
CASE;

// IF CUR.Weight Billed SUM is Greater than zero
IF CUR.Weight_Billed_SUM > *ZERO;

// Gross /CWT
CUR.USR_Percent_Work_7_2 = ( CUR.Billing_Detail_Gr_$_SUM / CUR.Weight_Billed_SUM 'H' )             +
* 100 'H';

ENDIF;

//?YTD Gross /CWT
CASE;

// IF CUR.Weight Billed Sum 13 is GT Zero
IF CUR.Weight_Billed_Sum_13 > *ZERO;

// YTD Gross /CWT
CUR.USR_Percent_Work_7_2_1 = ( CUR.FOB_Gross_Amount_SUM / CUR.Weight_Billed_Sum_13 'H' )           +
* 100 'H';

ENDIF;

ENDIF;

