      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF227 - Eopfees: Carrier Invoice Close
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/16/06
      *
      * Function:    This program extracts load data and "freezes" it for the period
      *              by writing it to the Freight Variance Detail file.
      *
      *
      ****************************************************************************************
      * MODIFICATIONS:
      ****************************************************************************************
      * DATE      PROGRAMMER
      *
      * 04/07/06  LeAnne Fedor
      *           Added a new field "Difference Amount" to the Freight Variance Detail file.
      *
      * 11/22/06  LeAnne Fedor
      *           Added more fields to Freight Variance Detail file. Changed field name/text
      *           for "actual freight amount" to "allocated actual freight amount".
      *
      * 12/01/06  LeAnne Ramsey
      *           Replaced call to the generic program that formatted Synon dates
      *           into CCYYMMDD and MMDDYY formats with ILE date logic.
      *
      * 12/05/06  LeAnne Ramsey
      *           A new customer (Gordon Food Service) is demanding that all product be
      *           shipped to them from the Triumph (St. Joe) location. This has required
      *           the Synon Systems to have both an Accounting Company and a Shipping
      *           Company. In general, for the TF system, we use the Accounting Company.
      *           BUT, when creating records in our Freight Variance file, we will use
      *           'Shipping Company' since Shipping Company/Load is the key field
      *           combination that the users would need to look up a "load" in the
      *           Synon systems.
      *
      * 07/02/07  LeAnne Ramsey
      *           Recompile only. Synon Load Freight Charge file was changed.
      *
      * 07/16/08  LeAnne Ramsey
      *           Replace: FDAACTFAM  Allocated Actual Freight Amount
      *              With: FDALFAM    Allocated Load Total Freight Amount
      *
      * 08/12/08  LeAnne Ramsey
      *           In the Traffic System, users can now override the Total Load Miles
      *           on a load. So, we changed our code to populate the Datamart Total Load
      *           Miles field conditionally with either:
      *             1) FJTLMI-Total Load Miles
      *             2) FJK2DT-Override Total Load Miles
      *
      * 03/10/09  LeAnne Ramsey
      *           The users want to revert back to Allocated Actual Freight Amount
      *           from Allocated Load Total Freight Amount.
      *           This will reverse the change of 07/16/08 above!
      *           We have decided to keep two sets of fields in TFP027-Freight
      *           Variance Detail:
      *               ALLOCATED LOAD TOT FRT AM       FDALFAM
      *               LOAD TOTAL DIFFERENCE AMT       FDLDIFFAM
      *               LOAD TOTAL PRIOR DIFF AMT       FDLPDIFFAM
      *
      *               ALLOCATED ACTUAL FRT AMT        FDAAFAM
      *               ACTUAL DIFFERENCE AMT           FDADIFFAM
      *               ACTUAL PRIOR DIFF AMT           FDAPDIFFAM
      *
      *           We are also deleting 4 fields from TFP027 which were never used in
      *           calculating the Freight Variance. They were only used in TF627-Paid Loads
      *           for Carrier SBD which was not used. The deleted fields are:
      *               FDRATFAM   Rated Freight Amount
      *               FDACTFCAM  Actual Frt Charge Amount
      *               FDNONFCAM  Non-Actual Frt Charge Amount
      *               FDLACTFAM  Load Actual Frt Amount
      *
      * 01/21/21  ISE            TSN593
      *           Replaced *loval with *start
      *
      * 08/13/24  ISE            TSN593
      *           Replaced *loval with *start
      /eject
      ****************************************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************************************
      *
PIO  F*omfjcplc  if   e           k disk
      *    Load header (logical file selects only Invoice records)
      *    (used for "unpaid" load processing; record selections are made in this program)
PIO  Fomfjcpmu  if   e           k disk
      *    Load header (logical file selects only Invoice records)
      *    (used for "unpaid" load processing; record selections are made in this program)
      *
      *
     Fomfjcpmc  if   e           k disk
      *    Load header
      *    (used for "paid" load processing; record selections are made in the open query)
      *
      *
     Fomhstpn8  if   e           k disk
      *    Sales history
      *
      *
     Ftfp027    o    e           k disk
      *    Freight Variance Detail
      *
      *
     Ftfl027b   if   e           k disk    rename(fdrec:fdrecb) prefix(p1)
      *    Freight Variance Detail
      *
      *
     Ftfp099    if   e           k disk
      *    Function control
      *
      *
     Fprint132  o    f  132        printer oflind(*inof)
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D dash132         s            132    inz(*all'-')
     d rtime           s              6  0
      *
      *
      * Control fields
      *
     D first           s              1    inz('Y')
     D svorno          s                   like(fdorno)
     D svprcd          s                   like(fdprcd)
      *
      *
      * Date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
      *
      *
      * Workfields
      *
     D wkalfam         s                   like(f4ocfr)
     D wkaafam         s                   like(f4onva)
     D wkabsfam        s                   like(f4onva)
     D wkasdt          s                   like(fdasdt)
     D wkcapddt        s                   like(fdcapddt)
     D wkpufl          s                   like(fdpufl)
      *
     D wkyr            s                   like(fdyr)
     D wkpe            s                   like(fdpe)
     D wkpbdt          s                   like(fdpbdt)
     D wkpedt          s                   like(fdpedt)
     D wkesyndt        s                   like(fncesyn)
      *
      *
      * Parms
      *
     D xxsyndt         s              7  0
     D xxccyymmdd      s              8  0
     D xxmmddyy        s              6  0
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area
      *---------------------------------------------------------------
      *
     d lda            uds                  dtaara(*lda)
     D  ldcyr                  2      5  0
     D  ldcpe                  6      7  0
      *
     D  ldcbdt                 8     15  0
     D  ldcbmdy               16     21  0
     D  ldcbsyn               22     28  0
      *
     D  ldcedt                29     36  0
     D  ldcemdy               37     42  0
     D  ldcesyn               43     49  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      **********************************************************************************
      * Mainline
      **********************************************************************************
      *
      * Extract "Unpaid" loads
      *
     C                   exsr      $unpaid
      *
      * Extract "Paid" loads
      *
     C                   exsr      $paid
      *---------------
      * EOF processing
      *---------------
      *
      * Print message that Carrier Invoices Close is completed.
      *
     C                   except    h1hdr
      *
     C                   seton                                        lr
      /eject
      *----------------------------------------------------------------------------------
      * Extract Unpaid Loads
      *----------------------------------------------------------------------------------
      *
      * It takes accounting at least a week to get the Freight Account finalized in JDE
      * after a period has ended. During this week, the Transportation people are already
      * entering freight payments into the Freight System (ie: marking loads as paid). So,
      * some of the loads that were actually in an Unpaid status for the period are marked
      * as PAID by the time the EOP function runs.
      *
      * SO, we will extract all UNPAID loads and also all loads that were PAID after our
      * period end date. On the PAID loads, we will override "allocated actual freight
      * amount" to zero so that the correct "variance" will show on reports.
      *
     C     $unpaid       begsr
      *
      * Set flag indicating "Unpaid"
      *
     C                   move      'U'           wkpufl
      *
      * Process records in the Load Header file that:
      *          1) Have a Load Status of I=Invoiced (the logical file selects these recs)
      *          2) Have an Actual Ship Date on/before the period end date
      *          3) Are Prepaid (have a 'P' in the first position of Shipping Method)
      *          4) Have an LH Carrier Payment Status of ' '=Unpaid
      *                     - OR -
      *             Have an LH Carrier Payment Status of 'P'=Paid AND a
      *             Carrier Paid Date after the period end date
      *
593  C*    *loval        setll     omfjcplc
593  C*    *start        setll     omfjcplc
PIO  C     *start        setll     omfjcpmu
      *
     C                   dou       *in91 = *on                                  Do unpaid
PIO  C*                  read      omfjcplc                               91
PIO  C                   read      omfjcpmu                               91
     C                   if        *in91 = *off and                             If not EOF
     C                             fjf9dt <= wkesyndt and
     C                             %subst(fjq2cd:1:1) = 'P' and
     C                             (fjrnst = ' ' or
     C                             (fjrnst = 'P' and fjpydt > wkesyndt))
      *
      * Flip dates into CCYYMMDD format
      *
     C                   exsr      $flip
      *
      * Retrieve/process Sales for this Load.
      *
     C                   exsr      $sales
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do unpaid
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------
      * Extract Paid Loads
      *----------------------------------------------------------------------------------
      *
     C     $paid         begsr
      *
      * Set flag indicating "Paid"
      *
     C                   move      'P'           wkpufl
      *
      * Process all selected records in the Load Header file that:
      *      Open query selections:
      *          1) Have a Date in the Period being processed
      *          2) Have a Carrier Payment Status of P=Paid
      *      Program selections:
      *          3) Are Prepaid (have a 'P' in the first position of Shipping Method)
      *
593  C*    *loval        setll     omfjcpmc
593  C     *start        setll     omfjcpmc
      *
     C                   dou       *in91 = *on                                  Do paid
     C                   read      omfjcpmc                               91
     C                   if        *in91 = *off and                             If not EOF
     C                             %subst(fjq2cd:1:1) = 'P'
      *
      * Flip dates into CCYYMMDD format
      *
     C                   exsr      $flip
      *
      * Retrieve/process Sales for this Load.
      *
     C                   exsr      $sales
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do paid
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------
      * Flip dates
      *----------------------------------------------------------------------------------
      *
     C     $flip         begsr
      *
      * Get Synon Dates into CCYYMMDD format.
      *  1) actual ship date
      *  2) carrier paid date
      *
     C                   if        fjf9dt = 0
     C                   z-add     0             wkasdt
     C                   else
     C                   z-add     fjf9dt        xxsyndt
     C                   exsr      $date
     C                   z-add     xxccyymmdd    wkasdt
     C                   endif
      *
     C                   if        fjpydt = 0
     C                   z-add     0             wkcapddt
     C                   else
     C                   z-add     fjpydt        xxsyndt
     C                   exsr      $date
     C                   z-add     xxccyymmdd    wkcapddt
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------
      * Format Synon date into CCYYMMDD format
      *----------------------------------------------------------------------------------
      *
     C     $date         begsr
      *
     C     *cymd         test(d)                 xxsyndt                92
     C                   if        *in92 = *off                                 If OK date
     C     *cymd         move      xxsyndt       wkisodate
     C     *iso          move      wkisodate     xxccyymmdd
     C     *mdy          move      wkisodate     xxmmddyy
     C                   else
     C                   z-add     0             xxccyymmdd
     C                   z-add     0             xxmmddyy
     C                   endif                                                  If OK date
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------
      * Retrieve Sales History records for this Load
      *----------------------------------------------------------------------------------
      *
     C     $sales        begsr
      *
      * Retrieve all Sales History records for this:
      *          Load number
      *
      * If there is Absorbed and/or Allocated Actual Freight Amounts, process.
      *
     C                   move      yes           first
     C                   z-add     0             wkabsfam
     C                   z-add     0             wkaafam
     C                   z-add     0             wkalfam
      *
     C     fjrmnb        setll     omhstpn8
      *
     C                   dou       *in92 = *on                                  Do Sales
     C     fjrmnb        reade     omhstpn8                               92
     C                   if        *in92 = *off and                             If not EOF
     C                             (f4ulva <> 0 or f4onva <> 0)
      *
      * Break processing
     C                   select
     C                   when      first = yes
     C                   move      no            first
     C                   z-add     f4c4nb        svorno
     C                   z-add     f4s5nb        svprcd
      *
     C                   when      svorno <> f4c4nb or
     C                             svprcd <> f4s5nb
     C                   exsr      $wrt027
     C                   endsl
      *
      * Detail processing
      *
     C                   if        wkpufl = 'U' and fjrnst = 'P'
     C                   else
     C                   add       f4ocfr        wkalfam
     C                   add       f4onva        wkaafam
     C                   endif
      *
     C                   add       f4ulva        wkabsfam
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do Sales
      *
      * Last record processing for a "Load"
      *
     C                   if        first = no
     C                   exsr      $wrt027
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write a Freight Variance Detail record
      *---------------------------------------------------------------
      *
     C     $wrt027       begsr
      *
     C                   move      wkpufl        fdpufl
     C                   z-add     wkyr          fdyr
     C                   z-add     wkpe          fdpe
     C                   z-add     wkpbdt        fdpbdt
     C                   z-add     wkpedt        fdpedt
      *
      * Load fields
      *  (Note: "Company" is "Shipping Company")
      *
     C                   z-add     fjaic3        fdcono
     C                   z-add     fjrmnb        fdload
     C                   z-add     wkasdt        fdasdt
     C                   z-add     wkcapddt      fdcapddt
     C                   move      fjbzna        fdcacd
     C                   move      fjrnst        fdcapst
     C                   move      fjq2cd        fdshcd
     C                   z-add     fjdgwg        fdcapam
      *
      * In the Traffic System, users can override the Total Load Miles
      * on a load. So, populate the Datamart "total load miles" field with
      * either:
      *        1) FJK2DT-Override Total Load Miles
      *        2) FJTLMI-Total Load Miles
      *
     C                   if        fjk2dt > 0                                   If override
     C                   z-add     fjk2dt        fdlmile
     C                   else
     C                   z-add     fjtlmi        fdlmile
     C                   endif                                                  If override
      *
      * Order fields
     C                   z-add     svorno        fdorno
     C                   z-add     svprcd        fdprcd
      *
     C                   z-add     wkabsfam      fdabsfam
     C                   z-add     wkaafam       fdaafam
     C                   z-add     wkalfam       fdalfam
      *
      *
      * If you are processing "Paid Loads", retrieve/sum the Difference Amount
      * for all prior periods.
      *
     C                   z-add     0             fdlpdiffam
     C                   z-add     0             fdapdiffam
      *
     C                   if        fdpufl = 'P'
     C                   exsr      $prior
     C                   endif
      *
      * Calculate the Difference Amount for the Period for both "Actual" and "Load Total"
      *    For Unpaid Loads:
      *            Absorbed less Allocated
      *    For Paid Loads:
      *            Absorbed less Allocated less Prior Periods Difference Amount
      *
     C                   select
     C                   when      fdpufl = 'U'
     C                   eval      fdadiffam = fdabsfam - fdaafam
     C                   eval      fdldiffam = fdabsfam - fdalfam
      *
     C                   when      fdpufl = 'P'
     C                   eval      fdadiffam = fdabsfam - fdaafam - fdapdiffam
     C                   eval      fdldiffam = fdabsfam - fdalfam - fdlpdiffam
     C                   endsl
      *
     C                   write     fdrec
      *
      * Save control fields and initialize accumulators.
      *
     C                   z-add     f4c4nb        svorno
     C                   z-add     f4s5nb        svprcd
      *
     C                   z-add     0             wkabsfam
     C                   z-add     0             wkaafam
     C                   z-add     0             wkalfam
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Prior Periods Difference Amounts for Paid Loads
      *---------------------------------------------------------------
      *
     C     $prior        begsr
      *
      * Read all records in the "frozen" file (Freight Variance Detail file)
      * for this:
      *            Company
      *            Load
      *            Order
      *            Product
      *
      * Accumulate the "Difference Amount" from each record where:
      *   1) the Period End Date is prior to the Beginning Period Date of the
      *      period we are "freezing".
      *   2) the "frozen" record is a "Paid" record
      *
     C     key01         setll     tfl027b
      *
     C                   dou       *in93 = *on or p1fdpedt >= ldcbdt            Do prior
     C     key01         reade     tfl027b                                93
     C                   if        *in93 = *off and                             If not EOF
     C                             p1fdpedt < ldcbdt and
     C                             p1fdpufl = 'P'
     C                   add       p1fdadiffam   fdapdiffam
     C                   add       p1fdldiffam   fdlpdiffam
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do prior
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    fdcono
     C                   kfld                    fdload
     C                   kfld                    fdorno
     C                   kfld                    fdprcd
      *
      *
      * Retrieve the "Current Period" info from the Control file.
      *
     C     'EOPFEES   '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     fncyr         wkyr
     C                   z-add     fncpe         wkpe
     C                   z-add     fncbdt        wkpbdt
     C                   z-add     fncedt        wkpedt
     C                   z-add     fncesyn       wkesyndt
     C                   endif                                                  If hit
      *
     C                   time                    rtime
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------
      * Report heading lines
      *-------------------------------------------------------------
      *
     Oprint132  e            h1hdr          1 01
     O                       sdpgm               10
     O                                           67 'CARRIER INVOICE CLOSE'
     O                                          122 'DATE'
     O                       udate         y    132
      *
      *
     O          e            h1hdr          1
     O                       sdusr               10
     O                                          122 'TIME'
     O                       rtime              132 '  :  :  '
      *
      *
     O          e            h1hdr          1
     O                                          122 'PAGE'
     O                       page          z    132
      *
      *
     O          e            h1hdr          1
     O                                           18 'Year/Period .....:'
     O                       ldcyr         z     24
     O                       ldcpe         z     28
      *
      *
     O          e            h1hdr          1
     O                                           18 'Period begin date:'
     O                       ldcbmdy             28 '  /  /  '
      *
     O          e            h1hdr          2
     O                                           18 'Period end date .:'
     O                       ldcemdy             28 '  /  /  '
      *
     O          e            h1hdr          2
     O                       dash132            132
      *
     O          e            h1hdr       1
     O                                           21 'Carrier invoices are '
     O                                           43 'closed for the period.'
      *
      /eject
