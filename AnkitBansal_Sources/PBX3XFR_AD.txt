// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBX3XFR
// ?Date: 14.08.2025 Time: 03:49:43
// ?------------------------------------------------------------------------------------------------

//?Execute user function

CASE;

// IF PAR.Invoice Suffix is Invoices
IF PAR.Invoice_Suffix = 'IN';

//?Get Info From Order Header TRG & Create Ext Record.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Inf for AR Hdr Ext RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2137350;
PARAMETER(PAR.Order_Number_Ref);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Load_ID);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Claim_Number);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// IF PAR.Invoice Suffix is Charge Backs
IF PAR.Invoice_Suffix = 'CB';

// OR PAR.Invoice Suffix is Rebill
OR PAR.Invoice_Suffix = 'RB';

//?Note: Original Inv for CB field could be 0.
EXECUTE FUNCTION(Crt A/R Header Ext 3  RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC2127107;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number_Ref);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(PAR.Remaining_Balance_Due);
PARAMETER(PAR.Original_Inv_for_CB);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order Type - SalesRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2127312;
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 {
  //?USER: Initialize routine

  // PAR.Order Type - Sales = CON.*BLANK
  PAR.Order_Type_Sales = *BLANK;

  //?USER: Process Data record

  // PAR.Order Type - Sales = DB1.Order Type - Sales
  PAR.Order_Type_Sales = DB1.Order_Type_Sales;

  QUIT;

 }

 //?If not found and a Remaining Balance Due exists, then use Sales History.
 CASE;

 // IF LCL.Order Type - Sales is Not Entered
 IF LCL.Order_Type_Sales = *BLANK;

 // AND PAR.Remaining Balance Due is greater than zero
 AND PAR.Remaining_Balance_Due > *ZERO;

 // LCL.Order Type - Sales = DB1.Order Type - Sales
 LCL.Order_Type_Sales = DB1.Order_Type_Sales;

 ENDIF;

 //?Create A/R Header Ext when you find an Invoice or last record read.
 CASE;

 // IF DB1.Invoice Suffix is Invoices
 IF DB1.Invoice_Suffix = 'IN';

 EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(PAR.Original_Inv_for_CB);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create A/R Header Ext when you find an Invoice or last record read.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Read until you hit an Invoice Suffix='IN' (Invoice).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Save info from the last record read whether it's an 'IN' or not to
 //?create A/R Header Ext.
 // LCL.Continue (Yes/No) USR = CND.Yes
 LCL.Continue_Yes_No_USR = 'Y';

 // LCL.Attach to Invoice Number = DB1.Attach to Invoice Number
 LCL.Attach_to_Invoice_Number = DB1.Attach_to_Invoice_Number;

 // LCL.Attach to Order Number = DB1.Attach to Order Number
 LCL.Attach_to_Order_Number = DB1.Attach_to_Order_Number;

 //?T9996 DN 05/19/17-Attach to Order#=0, Create A/R Hdr Ext & QUIT.
 CASE;

 // IF LCL.Attach to Order Number is Equal to zeros
 IF LCL.Attach_to_Order_Number = *ZERO;

 //?Rare occurrence this will happen but a 'DM' suffix can represent
 //?a sale.
 EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(PAR.Original_Inv_for_CB);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // LCL.Continue (Yes/No) USR = CND.No
 LCL.Continue_Yes_No_USR = 'N';

 ENDIF;

 // DOW LCL.Continue (Yes/No) USR is Yes
 DOW LCL.Continue_Yes_No_USR = 'Y';

 EXECUTE FUNCTION(Crt A/R Header Ext 4  RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC2127229;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Attach_to_Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.Attach_to_Invoice_Number);
 PARAMETER(LCL.Attach_to_Order_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Continue_Yes_No_USR);
 PARAMETER(LCL.Attach_to_Invoice_#_USR);
 PARAMETER(LCL.Attach_to_Order_#_USR);
 {
  //?USER: Initialize routine

  // PAR.Continue (Yes/No) USR = CND.No
  PAR.Continue_Yes_No_USR = 'N';

  //?USER: Process Data record

  //?Create A/R Header Ext or Save Attach to Invoice/Order Number.
  CASE;

  // IF DB1.Invoice Suffix is Invoices
  IF DB1.Invoice_Suffix = 'IN';

  EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Order_Type_Sales);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(PAR.Attach_to_Invoice_Number);
  PARAMETER(PAR.Attach_to_Order_Number);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Claim_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Continue (Yes/No) USR = CND.No
  PAR.Continue_Yes_No_USR = 'N';

  //?Create A/R Header Ext or Save Attach to Invoice/Order Number.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Attach to Invoice # USR = DB1.Attach to Invoice Number
  PAR.Attach_to_Invoice_#_USR = DB1.Attach_to_Invoice_Number;

  // PAR.Attach to Order # USR = DB1.Attach to Order Number
  PAR.Attach_to_Order_#_USR = DB1.Attach_to_Order_Number;

  // PAR.Continue (Yes/No) USR = CND.Yes
  PAR.Continue_Yes_No_USR = 'Y';

  ENDIF;

  QUIT;

 }

 // LCL.Attach to Invoice Number = LCL.Attach to Invoice # USR
 LCL.Attach_to_Invoice_Number = LCL.Attach_to_Invoice_#_USR;

 // LCL.Attach to Order Number = LCL.Attach to Order # USR
 LCL.Attach_to_Order_Number = LCL.Attach_to_Order_#_USR;

 ENDDO;

 ENDIF;

 ENDIF;

 QUIT;

}


// IF PAR.Invoice Suffix is On Account Cash
IF PAR.Invoice_Suffix = 'OA';

EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER('OA');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

//?Credit Memos (CM) & Debit Memos (DM) will be process here.
//?NOT HERE YET FOR CLAIM'S ORDER --- GOTO OH WITH CLAIM AND GET ATTACH TO
//? ORDER, THEN CHAIN TO SALES HIST WITH THAT ORDER ONLY, FOR THE SHIP DATE
//?T9996 DN 05/19/17-Commented Out.
//?T9996 DN 05/19/17-Create A/R Header Ext by Order# Else by Invoice#.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Inf for AR Hdr Ext RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2137350;
PARAMETER(PAR.Order_Number_Ref);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Claim_Number);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Attach to Order Number is Equal to zeros
IF LCL.Attach_to_Order_Number = *ZERO;

//?The Sales History record will NOT exist yet. It will be created
//?at the tail end of the Claims update post process. Use Order Hdr TRG.
EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Claim_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Crt A/R Hdr Ext By Ord RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC2137351;
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(LCL.Claim_Number);
{
 //?USER: Process Data record

 //?First Instance Will Be the Invoice Record.
 EXECUTE FUNCTION(Crt A/R Header Ext    CR) TYPE(CRTOBJ) FILE(PBC0CPP)           AC2126475;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(PAR.Attach_to_Invoice_Number);
 PARAMETER(PAR.Attach_to_Order_Number);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Claim_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


ENDIF;

ENDIF;

ENDIF;

