// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUKTPFR
// ?Date: 14.08.2025 Time: 12:06:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?NOTES:
//?RMC Print Chile Letterhead form 2630-90
//? L = overlay chi1 = Page 1
//?To control the number of lines printed within the PRTOBJ
//?'Prt Chile Lttrh-Pg1 DtlPO - Export Doc Order Dtl' during overflow,
//?change field 'Text-17               USR' "lines before" value
//?in the Company Number HDG format in this PRTFIL.
//?New Format per WI497:
//?Item Label Line 1 - Print in Box 1.
//?Item Label Line 2 - Print in Box 2.
//?Xlate Desc Line 1 - Print in Box 3.
//?Xlate Desc Line 2 - Print in Box 4.
//?USER: Print required level headings

CASE;

IF NEW Company_Number;
//?R16637 DN 10/12/20-Get 'Live with PHIS' Flag on Doc Type 'A' Only.
EXECUTE FUNCTION(Rtv Live with PHIS    RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC2160999;
PARAMETER(PAR.Company_Number);
PARAMETER('A');
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DB1.ED Document Date is Not entered
IF DB1.ED_Document_Date = *ZERO;

// LCL.Date                  USR = JOB.*Job date
LCL.Date_USR = JOB.*Job_date;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date                  USR = DB1.ED Document Date
LCL.Date_USR = DB1.ED_Document_Date;

ENDIF;

// WRK.Date (Alpha) USR = CVTVAR(LCL.Date                  USR)
WRK.Date_Alpha_USR = CVTVAR(LCL.Date_USR);

// WRK.Month/Day Alpha MMDD = SUBSTRING(WRK.Date (Alpha) USR,CON.4,CON.4)
WRK.Month_Day_Alpha_MMDD = SUBSTRING(WRK.Date_Alpha_USR:4:4);

// WRK.Year  (Char) USR = SUBSTRING(WRK.Date (Alpha) USR,CON.2,CON.2)
WRK.Year_Char_USR = SUBSTRING(WRK.Date_Alpha_USR:2:2);

// WRK.Year Alpha (YYYY) USR = CONCAT(CON.20,WRK.Year  (Char) USR,CON.*ZERO)
WRK.Year_Alpha_YYYY_USR = '20' + WRK.Year_Char_USR (*ZERO);

// WRK.Date (Char-8) USR = CONCAT(WRK.Month/Day Alpha MMDD,WRK.Year Alpha (YYYY) USR,CON.*ZERO)
WRK.Date_Char_8_USR = WRK.Month_Day_Alpha_MMDD + WRK.Year_Alpha_YYYY_USR (*ZERO);

// CUR.Date 8.0 USR = CVTVAR(WRK.Date (Char-8) USR)
CUR.Date_8_0_USR = CVTVAR(WRK.Date_Char_8_USR);

// CUR.ED Export Certificate Nbr = DB1.ED Export Certificate Nbr
CUR.ED_Export_Certificate_Nbr = DB1.ED_Export_Certificate_Nbr;

//?E01119 New form, dont print order no.
// CUR.Order Number = CON.*ZERO
CUR.Order_Number = *ZERO;

//?E00421 RMC 05/26/09 get form letters from company value - copy from JPN
// CUR.ED USDA Cert Nbr US = DB1.ED USDA Cert Nbr US
CUR.ED_USDA_Cert_Nbr_US = DB1.ED_USDA_Cert_Nbr_US;

CASE;

// IF CUR.ED USDA Cert Nbr US is not entered
IF CUR.ED_USDA_Cert_Nbr_US = *BLANK;

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(0);
PARAMETER(0);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

// WRK.Company Value Code = CON.MPGFRLTR
WRK.Company_Value_Code = 'MPGFRLTR';

//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// WRK.Company Value Code = CON.MPGFZLTR
WRK.Company_Value_Code = 'MPGFZLTR';

//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
// IF *OTHERWISE
IF *OTHERWISE;

//?default to something
// WRK.Company Value Code = CON.MPGFRLTR
WRK.Company_Value_Code = 'MPGFRLTR';

ENDIF;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Company_Value_Code);
PARAMETER(WRK.USR_Old_New_prtf_designtn);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.ED USDA Cert Nbr US = WRK.USR Old/New prtf designtn
CUR.ED_USDA_Cert_Nbr_US = WRK.USR_Old_New_prtf_designtn;

EXECUTE FUNCTION(Set USDA Cert Nbr US   IF) TYPE(EXCINTFUN)                     AC2235467;
PARAMETER(DB1.Country_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(DB1.Company_Number);
PARAMETER(CUR.ED_USDA_Cert_Nbr_US);
{
 //?Execute internal function

 // LCL.ED USDA Cert Nbr US = PAR.ED USDA Cert Nbr US
 LCL.ED_USDA_Cert_Nbr_US = PAR.ED_USDA_Cert_Nbr_US;

 //?Get "USDA Cert Nbr" for Japan/Chile
 CASE;

 // IF PAR.Country Code is Japan
 IF PAR.Country_Code = 'JPN';

 // OR PAR.Country Code is Mexico
 OR PAR.Country_Code = 'MEX';

 // OR PAR.Country Code is Korea
 OR PAR.Country_Code = 'KOR';

 // OR PAR.Country Code is Australia
 OR PAR.Country_Code = 'AUS';

 // OR PAR.Country Code is Chile - ISO 3
 OR PAR.Country_Code = 'CHL';

 // OR PAR.Country Code is NewZealand
 OR PAR.Country_Code = 'NZL';

 // OR PAR.Country Code is New Zealand
 OR PAR.Country_Code = 'NEW';

 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('CERTLTRFR');
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US_User);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('CERTLTRFZ');
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US_User);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

 //?Pass "USDA Cert Nbr" as Output
 CASE;

 // IF LCL.ED USDA Cert Nbr US  User is not entered
 IF LCL.ED_USDA_Cert_Nbr_US_User = *BLANK;

 // PAR.ED USDA Cert Nbr US = LCL.ED USDA Cert Nbr US
 PAR.ED_USDA_Cert_Nbr_US = LCL.ED_USDA_Cert_Nbr_US;

 //?Pass "USDA Cert Nbr" as Output
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED USDA Cert Nbr US = LCL.ED USDA Cert Nbr US  User
 PAR.ED_USDA_Cert_Nbr_US = LCL.ED_USDA_Cert_Nbr_US_User;

 ENDIF;

}


ENDIF;

//?Set 2nd Set of Certificate #.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.ED USDA Cert Nbr US 2 = CUR.ED USDA Cert Nbr US
CUR.ED_USDA_Cert_Nbr_US_2 = CUR.ED_USDA_Cert_Nbr_US;

// CUR.ED Export Certif # USR = CUR.ED Export Certificate Nbr
CUR.ED_Export_Certif_#_USR = CUR.ED_Export_Certificate_Nbr;

ENDIF;

//?Set Exporter Name & Address.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?R16637 DN 10/12/20-NOTE: The Consignor info is now 63A bytes hence
//?       if we have Consignor Name & Address info that is a full 63A
//?       bytes long then the CONCAT will not work since it will
//?       truncate the info. The form does NOT have enough room to
//?       support the full Consignor length.
//?       We are printing it as is.
// CUR.Consignor Info USR = CONCAT(CUR.ED Consignor Name,CON.,,CON.1)
CUR.Consignor_Info_USR = CUR.ED_Consignor_Name + ',' (1);

// CUR.Consignor Info USR = CONCAT(CUR.Consignor Info USR,CUR.ED Consignor Addr 1,CON.1)
CUR.Consignor_Info_USR = CUR.Consignor_Info_USR + CUR.ED_Consignor_Addr_1 (1);

// CUR.Consignor Info USR = CONCAT(CUR.Consignor Info USR,CON.,,CON.1)
CUR.Consignor_Info_USR = CUR.Consignor_Info_USR + ',' (1);

// CUR.Consignor Info USR = CONCAT(CUR.Consignor Info USR,CUR.ED Consignor Addr 2,CON.1)
CUR.Consignor_Info_USR = CUR.Consignor_Info_USR + CUR.ED_Consignor_Addr_2 (1);

//?Insert Comma if Addr 3 or Addr 4 are Entered.
CASE;

// IF CUR.ED Consignor Addr 4 is Not Blank
IF CUR.ED_Consignor_Addr_4 <> *BLANK;

CASE;

// IF CUR.ED Consignor Addr 3 is Not Blank
IF CUR.ED_Consignor_Addr_3 <> *BLANK;

// CUR.Consignor Info 2 USR = CONCAT(CUR.ED Consignor Addr 3,CON.,,CON.1)
CUR.Consignor_Info_2_USR = CUR.ED_Consignor_Addr_3 + ',' (1);

ENDIF;

//?Insert Comma if Addr 3 or Addr 4 are Entered.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CUR.ED Consignor Addr 3,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + CUR.ED_Consignor_Addr_3 (1);

ENDIF;

//?If Live with PHIS=Y Then Concat Addr 4 with State, Zip & Country.
CASE;

// IF LCL.ED Live with PHIS is yes
IF LCL.ED_Live_with_PHIS = 'Y';

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CUR.ED Consignor Addr 4,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + CUR.ED_Consignor_Addr_4 (1);

//?Don't Print Consignor State if Blank or International.
CASE;

// IF CUR.ED Consignor State is *Blanks
IF CUR.ED_Consignor_State = *BLANK;

// OR CUR.ED Consignor State is International Accounts
OR CUR.ED_Consignor_State = '.';

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CON.,,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + ',' (1);

//?Don't Print Consignor State if Blank or International.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CON.,,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + ',' (1);

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CUR.ED Consignor State,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + CUR.ED_Consignor_State (1);

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CON.,,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + ',' (1);

ENDIF;

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CUR.ED Consignor Postal,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + CUR.ED_Consignor_Postal (1);

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CON.,,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + ',' (1);

EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(LCL.Country_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,LCL.Country Description,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + LCL.Country_Description (1);

//?If Live with PHIS=Y Then Concat Addr 4 with State, Zip & Country.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Consignor Info 2 USR = CONCAT(CUR.Consignor Info 2 USR,CUR.ED Consignor Addr 4,CON.1)
CUR.Consignor_Info_2_USR = CUR.Consignor_Info_2_USR + CUR.ED_Consignor_Addr_4 (1);

ENDIF;

ENDIF;

//?S14901 DN 04/24/19-Set 'EST.' for Plant Number.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text USR 4 = CON.EST.
CUR.Text_USR_4 = 'EST.';

ENDIF;

//?R16637 DN 10/12/20-Suppress Consignee Blank Address Lines.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Fmt Suppress Addr LinesIF) TYPE(EXCINTFUN)                     AC2191192;
PARAMETER(LCL.ED_Consignor_Addr_2);
PARAMETER(LCL.ED_Consignor_Addr_3);
PARAMETER(LCL.ED_Consignor_Addr_4);
PARAMETER(LCL.ED_Consignor_State);
PARAMETER(LCL.ED_Consignor_Postal);
PARAMETER(LCL.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
PARAMETER(LCL.Consignor_Country_Desc_U);
PARAMETER(CUR.Consignee_Country_Desc_U);
{
 //?Execute internal function

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignor Addr 2 is Not Blank
 IF PAR.ED_Consignor_Addr_2 <> *BLANK;

 // AND PAR.ED Consignor Addr 3 is Not Blank
 AND PAR.ED_Consignor_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignor Addr 4 is Not Blank
 IF PAR.ED_Consignor_Addr_4 <> *BLANK;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignor Addr 2 is eq blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 3 = CON.*BLANK
 PAR.ED_Consignor_Addr_3 = *BLANK;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignor Addr 2 is Blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 // IF PAR.ED Consignor Addr 3 is Blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_3 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignee Addr 2 is Not Blank
 IF PAR.ED_Consignee_Addr_2 <> *BLANK;

 // AND PAR.ED Consignee Addr 3 is Not Blank
 AND PAR.ED_Consignee_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignee Addr 4 is Not Blank
 IF PAR.ED_Consignee_Addr_4 <> *BLANK;

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignee Addr 2 is eq blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 3 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_3 = LCL.USR_Blank_Field;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 //?S17055 DN 04/06/21-Concat Consignee State & Zip if Entered.
 CASE;

 // IF PAR.ED Consignee Postal is Entered
 IF PAR.ED_Consignee_Postal <> *BLANK;

 //?Get State for Domestic Address Else Concat Only Zip Code.
 CASE;

 // IF PAR.ED Consignee State is State code not Blanks
 IF PAR.ED_Consignee_State <> *BLANK;

 // AND PAR.ED Consignee State is Not International
 AND PAR.ED_Consignee_State <> '.';

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee State
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_State;

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 //?Get State for Domestic Address Else Concat Only Zip Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee Postal
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Postal;

 ENDIF;

 //?Concat State/Zip to Last Non Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 3 is Not Blank
 IF PAR.ED_Consignee_Addr_3 <> *BLANK;

 // PAR.ED Consignee Addr 3 = CONCAT(PAR.ED Consignee Addr 3,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3 + LCL.ED_Consignee_Addr_4 (1);

 //?Concat State/Zip to Last Non Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Must Concat on Address 2 Line.
 // PAR.ED Consignee Addr 2 = CONCAT(PAR.ED Consignee Addr 2,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2 + LCL.ED_Consignee_Addr_4 (1);

 ENDIF;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignee Addr 2 is Blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 // IF PAR.ED Consignee Addr 3 is Blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_3 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Get Consignor Country Desc.
 CASE;

 // IF PAR.ED Consignor Country Code is Entered
 IF PAR.ED_Consignor_Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.Consignor_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignor Addr 3 is eq blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_3 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 // PAR.ED Consignor Addr 4 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_4 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

 //?Get Consignee Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is Entered
 IF PAR.ED_Consignee_Country_Code <> *BLANK;

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is China
 IF PAR.ED_Consignee_Country_Code = 'CHN';

 // PAR.Consignee Country Desc U = CONCAT(CON.THE PEOPLE'S REPUBLIC OF,CON.CHINA,CON.1)
 PAR.Consignee_Country_Desc_U = 'THE PEOPLE'S REPUBLIC OF' + 'CHINA' (1);

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.Consignee_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignee Addr 3 is eq blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_3 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 // PAR.ED Consignee Addr 4 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_4 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

}


ENDIF;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT ED Export Document Type header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Count No Dtls Cmb RT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1755257;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(LCL.#_of_Unique_Item_Dtls_USR);
{
 //?USER: Initialize routine

 // PAR.Count 2 USR = CON.*ZERO
 PAR.Count_2_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ED Item Code NE LCL.ED Item Code
 IF DB1.ED_Item_Code <> LCL.ED_Item_Code;

 // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
 PAR.Count_2_USR = PAR.Count_2_USR + 1;

 // LCL.ED Item Code = DB1.ED Item Code
 LCL.ED_Item_Code = DB1.ED_Item_Code;

 ENDIF;

}


//?DO2642 DN 08/25/22-Build Export Doc Order Dtl PRT (PUCFCPP) File.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Crt Exp Doc Ord Dtl PRTXF.
CALL PROGRAM(Crt Exp Doc Ord Dtl PRTXF) ('PUWBXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Xlate_Desc_to_Country);

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Chile Lttrh-Pg1 DtlPO
EXECUTE FUNCTION(Prt Chile Lttrh-Pg1 DtlPO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(PAR.USR_Overflow);
PARAMETER(CUR.ED_Packing_Date);
PARAMETER(CUR.ED_Packing_Date_To);
PARAMETER(LCL.#_of_Unique_Item_Dtls_USR);
PARAMETER(PAR.Print_On_Form);
PARAMETER(CUR.ED_Xlate_Desc_to_Country);
{
 //?USER: Initialize routine

 // PAR.Count 2 USR = CON.*ZERO
 PAR.Count_2_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ED Item Code NE LCL.ED Item Code
 IF DB1.ED_Item_Code <> LCL.ED_Item_Code;

 // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
 PAR.Count_2_USR = PAR.Count_2_USR + 1;

 // LCL.ED Item Code = DB1.ED Item Code
 LCL.ED_Item_Code = DB1.ED_Item_Code;

 ENDIF;

}


//?USER: Print required level totals

// SUPPRESSED PRINT ED Export Document Type totals format

CASE;

IF NEW Order_Number;
// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

