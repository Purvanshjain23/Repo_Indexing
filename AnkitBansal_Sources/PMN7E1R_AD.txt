// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMN7E1R
// ?Date: 14.08.2025 Time: 03:43:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.COA ULSD Company # = PAR.COA ULSD Company #
KEY.COA_ULSD_Company_# = PAR.COA_ULSD_Company_#;

// KEY.COA Batch Number = PAR.COA Batch Number
KEY.COA_Batch_Number = PAR.COA_Batch_Number;

// LCL.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.COA Batch Properties Cmpl = CND.No
DTL.COA_Batch_Properties_Cmpl = 'N';

// DTL.COA Batch Header Sts = CND.Entered
DTL.COA_Batch_Header_Sts = 'E';

EXECUTE FUNCTION(RTV all used fields    RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1851688;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(WRK.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(WRK.COA_Producer_Regist_Nbr);
PARAMETER(WRK.COA_Employer_ID);
PARAMETER(WRK.COA_Sold_From_Address);
PARAMETER(WRK.COA_Sold_From_Name);
PARAMETER(WRK.COA_ULSD_Company_#);
PARAMETER(WRK.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
PARAMETER(WRK.COA_RIN_Renewable_Enrgy);
PARAMETER(WRK.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_Density_Loadout);
PARAMETER(DTL.COA_Density_Reference);
PARAMETER(DTL.COA_Temperature_Loadout);
PARAMETER(WRK.COA_Temperature_Ref);
PARAMETER(WRK.COA_BOL_Percent);
PARAMETER(WRK.COA_Sale_Location);
PARAMETER(WRK.COA_Active_Whse_Tank_1);
PARAMETER(WRK.COA_Active_Whse_Tank_2);
PARAMETER(WRK.COA_Active_Whse_Tank_3);
PARAMETER(WRK.COA_Active_Whse_Tank_4);
PARAMETER(WRK.COA_Active_Whse_Tank_5);
PARAMETER(WRK.COA_Active_Whse_Tank_6);
PARAMETER(WRK.COA_Temp_Conv_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.COA_Temp_Conv_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(DTL.COA_RFS_Renew_Fuel_Code);
PARAMETER(DTL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(WRK.Sold_To_Customer_hpb_biod);
PARAMETER(DTL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?P0579 -  EMTS New fields 5/10/10  RMC - get default values
EXECUTE FUNCTION(RTV Fuel Code Dft,dsc RT) TYPE(RTVOBJ) FILE(PNGCREP)           AC1990657;
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.Condition_Desc_3_USR);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Fuel Code Default EQ PAR.RFS Fuel Code Default
 IF DB1.RFS_Fuel_Code_Default = PAR.RFS_Fuel_Code_Default;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Process Cde Dft,DsRT) TYPE(RTVOBJ) FILE(PNGDREP)           AC1990658;
PARAMETER(DTL.RFS_Process_Code);
PARAMETER(DTL.Condition_Desc_4_USR);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Process Code Default EQ PAR.RFS Process Code Default
 IF DB1.RFS_Process_Code_Default = PAR.RFS_Process_Code_Default;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Fuel Cateogry Dft RT) TYPE(RTVOBJ) FILE(PNGEREP)           AC1990663;
PARAMETER(DTL.RFS_Fuel_Category_Code);
PARAMETER(DTL.Condition_Desc_5_USR);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Fuel Category Cde Dft EQ PAR.RFS Fuel Category Cde Dft
 IF DB1.RFS_Fuel_Category_Cde_Dft = PAR.RFS_Fuel_Category_Cde_Dft;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// DTL.Condition Desc. 6  USR = Condition name of DTL.COA Co-Product Code
DTL.Condition_Desc_6_USR = RTVCND(DTL.COA_Co_Product_Code);

// DTL.COA BH EMTS Sts = CND.Blank
DTL.COA_BH_EMTS_Sts = *BLANK;

// DTL.COA BH RFS Version Nbr = CND.RFS 2
DTL.COA_BH_RFS_Version_Nbr = 2;

// DTL.COA BH Equiv Value f/SEP = CND.GEN Trans - SEParate
DTL.COA_BH_Equiv_Value_f_SEP = 25;

// LCL.Record Status Save = DB1.Record Status
LCL.Record_Status_Save = DB1.Record_Status;

//?DN W104274 07/20/22-Get/Set New COA Fields for Hugoton Plant 375.
CASE;

// IF DTL.Company Number is Seaboard Energy Kansas
IF DTL.Company_Number = 375;

// DTL.COA Sample Date = JOB.*Job date
DTL.COA_Sample_Date = JOB.*Job_date;

// DTL.COA Sample Time = JOB.*Job time
DTL.COA_Sample_Time = JOB.*Job_time;

EXECUTE FUNCTION(Rtv Co 375 Last Record RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC2207186;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Specification);
PARAMETER(DTL.COA_RFS_Program_ID);
PARAMETER(DTL.COA_Reviewed_By);
PARAMETER(DTL.COA_LIMS_ID);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Co 375 Last Record RT) TYPE(RTVOBJ) FILE(PNGHCPP)          AC2207216;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Reviewed_By_Title);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?DN W104274 08/19/22-Don't Display If Fuel Code R99.9 or NAP.
CASE;

// IF DTL.COA Bio-diesel Fuel Code is R99.9
IF DTL.COA_Bio_diesel_Fuel_Code = 'R99.9';

// OR DTL.COA Bio-diesel Fuel Code is Naphtha
OR DTL.COA_Bio_diesel_Fuel_Code = 'NAP';

// LCL.Display Flag 1 USR = CND.yes
LCL.Display_Flag_1_USR = 'Y';

//?DN W104274 08/19/22-Don't Display If Fuel Code R99.9 or NAP.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Desc/Trans/Lot    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1592633;
PARAMETER(DB1.COA_Active_Whse_Tank);
PARAMETER(DTL.Description);
PARAMETER(NLL.Lot_Tracking_Flag);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1850788;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.Description_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.COA Active Whse/Tank = DB1.COA Active Whse/Tank
LCL.COA_Active_Whse_Tank = DB1.COA_Active_Whse_Tank;

//?Once closed do not allow warehouse to be changed
CASE;

// IF DB1.COA Batch Header Sts is Closed from shipping
IF DB1.COA_Batch_Header_Sts = 'C';

// LCL.Output Only 1 USR = CND.yes
LCL.Output_Only_1_USR = 'Y';

//?Once closed do not allow warehouse to be changed
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Output Only 1 USR = CND.no
LCL.Output_Only_1_USR = 'N';

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.COA RFS Renew Fuel Code
DTL.Condition_Desc_1_USR = RTVCND(DTL.COA_RFS_Renew_Fuel_Code);

// DTL.Condition Desc. 2  USR = Condition name of DTL.COA RFS Rnwbl Feedstock
DTL.Condition_Desc_2_USR = RTVCND(DTL.COA_RFS_Rnwbl_Feedstock);

// LCL.COA Temperature Loadout = DB1.COA Temperature Loadout
LCL.COA_Temperature_Loadout = DB1.COA_Temperature_Loadout;

//?P0579 -  EMTS New fields 5/10/10  RMC
EXECUTE FUNCTION(RTV Fuel Code Desc    RT) TYPE(RTVOBJ) FILE(PNGCREP)           AC1990646;
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.Condition_Desc_3_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Process Code Desc RT) TYPE(RTVOBJ) FILE(PNGDREP)           AC1990647;
PARAMETER(DTL.RFS_Process_Code);
PARAMETER(DTL.Condition_Desc_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Fuel Cateogry DescRT) TYPE(RTVOBJ) FILE(PNGEREP)           AC1990648;
PARAMETER(DTL.RFS_Fuel_Category_Code);
PARAMETER(DTL.Condition_Desc_5_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 6  USR = Condition name of DTL.COA Co-Product Code
DTL.Condition_Desc_6_USR = RTVCND(DTL.COA_Co_Product_Code);

CASE;

// IF DB1.COA RIN Equivalence Valu EQ WRK.Blank for 3          USR
IF DB1.COA_RIN_Equivalence_Valu = WRK.Blank_for_3_USR;

// OR DB1.COA RIN Quantity EQ WRK.ZERO
OR DB1.COA_RIN_Quantity = WRK.ZERO;

EXECUTE FUNCTION(RTV Equiv Value       RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1991667;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.RFS Equivalence Value = CVTVAR(DTL.COA RIN Equivalence Valu)
LCL.RFS_Equivalence_Value = CVTVAR(DTL.COA_RIN_Equivalence_Valu);

// DTL.COA RIN Equivalence Valu# = LCL.RFS Equivalence Value
DTL.COA_RIN_Equivalence_Valu# = LCL.RFS_Equivalence_Value;

// DTL.COA RIN Quantity = LCL.RFS Equivalence Value * DTL.COA Batch Volume *
DTL.COA_RIN_Quantity = LCL.RFS_Equivalence_Value * DTL.COA_Batch_Volume;

ENDIF;

// LCL.Record Status Save = DB1.Record Status
LCL.Record_Status_Save = DB1.Record_Status;

//?DN W104274 07/29/22-Get Title if Co 375.
CASE;

// IF DTL.Company Number is Seaboard Energy Kansas
IF DTL.Company_Number = 375;

EXECUTE FUNCTION(Rtv Reviewed By Title RT) TYPE(RTVOBJ) FILE(PNGHCPP)           AC2207257;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.COA_ULSD_Company_#);
PARAMETER(DB1.COA_Batch_Number);
PARAMETER(1);
PARAMETER(DTL.COA_Reviewed_By_Title);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?DN W104274 08/19/22-Don't Display If Fuel Code R99.9 or NAP.
CASE;

// IF DTL.COA Bio-diesel Fuel Code is R99.9
IF DTL.COA_Bio_diesel_Fuel_Code = 'R99.9';

// OR DTL.COA Bio-diesel Fuel Code is Naphtha
OR DTL.COA_Bio_diesel_Fuel_Code = 'NAP';

// LCL.Display Flag 1 USR = CND.yes
LCL.Display_Flag_1_USR = 'Y';

//?DN W104274 08/19/22-Don't Display If Fuel Code R99.9 or NAP.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

ENDIF;

//?USER: Validate detail screen fields

//?Prompt on warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Validate warehouse
CASE;

// IF DTL.COA Active Whse/Tank is Warehouse Code not Blank
IF DTL.COA_Active_Whse_Tank <> *BLANK;

// AND DTL.COA Active Whse/Tank NE LCL.COA Active Whse/Tank
AND DTL.COA_Active_Whse_Tank <> LCL.COA_Active_Whse_Tank;

EXECUTE FUNCTION(RTV Bio-d Code for Whs RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1849761;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.Description_USR);
PARAMETER(DTL.COA_Active_Whse_Tank);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA Bio-diesel Fuel Code EQ PAR.COA Bio-diesel Fuel Code
 IF DB1.COA_Bio_diesel_Fuel_Code = PAR.COA_Bio_diesel_Fuel_Code;

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 CASE;

 // IF DB1.COA Active Whse/Tank 1 EQ PAR.COA Active Whse/Tank 1
 IF DB1.COA_Active_Whse_Tank_1 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 2 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_2 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 3 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_3 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 4 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_4 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 5 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_5 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 6 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_6 = PAR.COA_Active_Whse_Tank_1;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Error if Warehouse not on COA Prop Def Hdr
CASE;

// IF DTL.Description USR is equal to blank
IF DTL.Description_USR = *BLANK;

// Send error message - 'Whse/Tank not on a COA Property Header record.'
ERROR(USR3814);
MSGPARM(DTL.COA_Active_Whse_Tank);

ENDIF;

EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER('O');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


//?Error if Warehouse is 'Entered' or 'Open' on another batch
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'This Warehouse is already open for shipping on batch # &1.'
ERROR(USR3815);
MSGPARM(LCL.COA_Batch_Number);
MSGPARM(DTL.COA_Active_Whse_Tank);

//?Error if Warehouse is 'Entered' or 'Open' on another batch
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER('E');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'This Warehouse is already in an 'Entered' status on batch # &1.'
ERROR(USR3828);
MSGPARM(LCL.COA_Batch_Number);
MSGPARM(DTL.COA_Active_Whse_Tank);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Check Ord for Batch) TYPE(RTVOBJ) FILE(PMAMREP)            AC1851232;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(LCL.USR_Orders_on_Load);
PARAMETER(LCL.USR_Ship_Y_N);
{
 //?USER: Initialize routine

 // PAR.USR Orders on Load = CND.no
 PAR.USR_Orders_on_Load = 'N';

 // PAR.USR Ship Y/N = CND.no
 PAR.USR_Ship_Y_N = 'N';

 //?USER: Process Data record

 // PAR.USR Orders on Load = CND.yes
 PAR.USR_Orders_on_Load = 'Y';

 CASE;

 // IF DB1.OHE Ship Status is Shipped
 IF DB1.OHE_Ship_Status = 'S';

 // PAR.USR Ship Y/N = CND.yes
 PAR.USR_Ship_Y_N = 'Y';

 ENDIF;

}


//?Error if orders already shipped for this batch number
CASE;

// IF LCL.USR Ship Y/N is yes
IF LCL.USR_Ship_Y_N = 'Y';

// Send error message - 'You cannot change the Warehouse when orders have been shipped for the batch
ERROR(USR3820);
MSGPARM(DTL.COA_Active_Whse_Tank);

ENDIF;

ENDIF;

//?Recalc Density ref if Loadout temperature changes
CASE;

// IF DTL.COA Temperature Loadout NE LCL.COA Temperature Loadout
IF DTL.COA_Temperature_Loadout <> LCL.COA_Temperature_Loadout;

// OR DTL.COA Density Reference is Not entered
OR DTL.COA_Density_Reference = *ZERO;

EXECUTE FUNCTION(RTV Temp Reference    RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1876036;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(LCL.COA_Temperature_Ref);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Use API Table or calc - 7/14/2010
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: temp adj
WRK.HPB_Temperature_Adjustmnt = ( ( WRK.COA_Temp_Conv_Factor_1                                     +
* DTL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) * 1 'H';

//?Use API Table or calc - 7/14/2010
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

// LCL.RFS Loadout Temperature = DTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = DTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

CASE;

// IF LCL.RFS API Vol Corr Factor is Not Found
IF LCL.RFS_API_Vol_Corr_Factor = *ZERO;

// Send error message - 'Temperature Loadout invalid'
ERROR(USR3925);
MSGPARM(DTL.COA_Temperature_Loadout);

ENDIF;

ENDIF;

// Compute: density ref NEW
WRK.COA_Density_Ref_Adj_4_dec = WRK.HPB_Temperature_Adjustmnt * DTL.COA_Density_Loadout            +
'H';

// DTL.COA Density Reference = WRK.COA Density Ref Adj 4 dec
DTL.COA_Density_Reference = WRK.COA_Density_Ref_Adj_4_dec;

// LCL.COA Temperature Loadout = DTL.COA Temperature Loadout
LCL.COA_Temperature_Loadout = DTL.COA_Temperature_Loadout;

ENDIF;

//?P0579 -  EMTS New fields 5/10/10  RMC
EXECUTE FUNCTION(RTV Fuel Code Desc    RT) TYPE(RTVOBJ) FILE(PNGCREP)           AC1990646;
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.Condition_Desc_3_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Process Code Desc RT) TYPE(RTVOBJ) FILE(PNGDREP)           AC1990647;
PARAMETER(DTL.RFS_Process_Code);
PARAMETER(DTL.Condition_Desc_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Fuel Cateogry DescRT) TYPE(RTVOBJ) FILE(PNGEREP)           AC1990648;
PARAMETER(DTL.RFS_Fuel_Category_Code);
PARAMETER(DTL.Condition_Desc_5_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 6  USR = Condition name of DTL.COA Co-Product Code
DTL.Condition_Desc_6_USR = RTVCND(DTL.COA_Co_Product_Code);

// LCL.RFS Equivalence Value = CVTVAR(DTL.COA RIN Equivalence Valu)
LCL.RFS_Equivalence_Value = CVTVAR(DTL.COA_RIN_Equivalence_Valu);

// DTL.COA RIN Equivalence Valu# = LCL.RFS Equivalence Value
DTL.COA_RIN_Equivalence_Valu# = LCL.RFS_Equivalence_Value;

// DTL.COA RIN Quantity = LCL.RFS Equivalence Value * DTL.COA Batch Volume *
DTL.COA_RIN_Quantity = LCL.RFS_Equivalence_Value * DTL.COA_Batch_Volume;

CASE;

// IF DTL.COA BH Equiv Value f/SEP is *ALL values
IF DTL.COA_BH_Equiv_Value_f_SEP = '15'/'25';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.COA BH Equiv Value f/SEP = CND.GEN Trans - SEParate
DTL.COA_BH_Equiv_Value_f_SEP = 25;

ENDIF;

CASE;

// IF LCL.Record Status Save is Inactive
IF LCL.Record_Status_Save = 'I';

// AND DTL.Record Status is Active
AND DTL.Record_Status = 'A';

// DTL.COA Batch Header Sts = CND.Open for shipping
DTL.COA_Batch_Header_Sts = 'O';

ENDIF;

//?CALC: Detail screen function fields

// DTL.Condition Desc. 1  USR = Condition name of DTL.COA RFS Renew Fuel Code
DTL.Condition_Desc_1_USR = RTVCND(DTL.COA_RFS_Renew_Fuel_Code);

// DTL.Condition Desc. 2  USR = Condition name of DTL.COA RFS Rnwbl Feedstock
DTL.Condition_Desc_2_USR = RTVCND(DTL.COA_RFS_Rnwbl_Feedstock);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Rec & Bld Details  CR) TYPE(CRTOBJ) FILE(PMCCCPP)          AC1847458;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_Date_Open_for_Ship);
PARAMETER(DTL.COA_Time_Open_for_Ship);
PARAMETER(DTL.COA_Open_for_Ship_Inits);
PARAMETER(DTL.COA_Date_Close_from_Ship);
PARAMETER(DTL.COA_Time_Close_from_Ship);
PARAMETER(DTL.COA_Close_from_Ship_Inits);
PARAMETER(DTL.COA_Gallons_Used);
PARAMETER(DTL.COA_Comment);
PARAMETER(DTL.COA_Batch_Production_Date);
PARAMETER(DTL.COA_Batch_Unused_Time);
PARAMETER(DTL.COA_Specification);
PARAMETER(DTL.COA_RFS_Program_ID);
PARAMETER(DTL.COA_Batch_Header_Sts);
PARAMETER(DTL.COA_Batch_Properties_Cmpl);
PARAMETER(DTL.COA_Batch_Int_Ext_Company);
PARAMETER(DTL.COA_Temperature_Loadout);
PARAMETER(DTL.COA_Batch_Volume);
PARAMETER(DTL.COA_Batch_Denaturant_Vol);
PARAMETER(DTL.COA_RFS_Renew_Fuel_Code);
PARAMETER(DTL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(DTL.COA_Batch_RIN);
PARAMETER(DTL.COA_Batch_Export_Volume);
PARAMETER(DTL.COA_Last_RIN_EEEEEEEE);
PARAMETER(DTL.COA_Density_Loadout);
PARAMETER(DTL.COA_Density_Reference);
PARAMETER(DTL.COA_RIN_Equivalence_Valu#);
PARAMETER(DTL.COA_Batch_Unused_Date);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.RFS_Process_Code);
PARAMETER(DTL.RFS_Fuel_Category_Code);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_Co_Product_Code);
PARAMETER(DTL.COA_Co_Product_Comment);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(DTL.COA_BH_RFS_Version_Nbr);
PARAMETER(DTL.COA_BH_EMTS_Sts);
PARAMETER(DTL.COA_BH_EMTS_Date_Sent);
PARAMETER(DTL.COA_BH_EMTS_Time_Sent);
PARAMETER(DTL.COA_Reviewed_By);
PARAMETER(DTL.COA_BH_Equiv_Value_f_SEP);
PARAMETER(DTL.COA_BH_Yield_Percent);
PARAMETER(DTL.COA_BH_Unused_Cde);
PARAMETER(DTL.COA_Sample_Date);
PARAMETER(DTL.COA_Sample_Time);
PARAMETER(DTL.COA_LIMS_ID);
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.COA_BH_Feedstck_Volume_1);
PARAMETER(DTL.COA_BH_Feedstck_Measure_1);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_1);
PARAMETER(DTL.COA_BH_Feedstck_Pct_Ord_1);
PARAMETER(DTL.COA_BH_Feedstck_comment_1);
PARAMETER(DTL.RFS_Feedstock_Code_2);
PARAMETER(DTL.COA_BH_Feedstck_Volume_2);
PARAMETER(DTL.COA_BH_Feedstck_Measure_2);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_2);
PARAMETER(DTL.COA_BH_Feedstck_Pct_Ord_2);
PARAMETER(DTL.COA_BH_Feedstck_Comment_2);
PARAMETER(DTL.RFS_Feedstock_Code_3);
PARAMETER(DTL.COA_BH_Feedstck_Volume_3);
PARAMETER(DTL.COA_BH_Feedstck_Measure_3);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_3);
PARAMETER(DTL.cOA_BH_Feedstck_Pct_Ord_3);
PARAMETER(DTL.COA_BH_Feedstck_Comment_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(DTL.COA_Reviewed_By_Title);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 //?W104274 DN 07/29/22-Create COA Batch Header Ext Record.
 //?- Sequence will always be 1 since we will not have multiple Seq #.
 EXECUTE FUNCTION(Crt COA BH Feedstock  CR) TYPE(CRTOBJ) FILE(PNGHCPP)           AC1990422;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(LCL.Blank_1_USR);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_Reviewed_By_Title);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 EXECUTE FUNCTION(RTV Build Batch Detail RT) TYPE(RTVOBJ) FILE(PMCBREP)          AC1851345;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  //?W104274 DN 07/27/22-Passed in COA Test & COA Limit Max.
  EXECUTE FUNCTION(RTV for Create Record  RT) TYPE(RTVOBJ) FILE(PMCDCPP)          AC1851389;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.COA_ULSD_Company_#);
  PARAMETER(PAR.COA_Batch_Number);
  PARAMETER(DB1.COA_Property);
  PARAMETER(DB1.COA_Test);
  PARAMETER(DB1.COA_Test_Method);
  PARAMETER(DB1.COA_Unit_of_Measure);
  PARAMETER(DB1.COA_Limit);
  PARAMETER(DB1.COA_Limit_Max);
  PARAMETER(DB1.COA_Print_Sequence);
  PARAMETER(*ZERO);
  PARAMETER(DB1.COA_OMS_Item_Code);
  PARAMETER(DB1.Sold_To_Customer_hpb_biod);
  PARAMETER(DB1.COA_Footnote_Indicator);
  PARAMETER(DB1.COA_Fuel_Desc2_Prop_Value);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing if Data record not found

   //?W104274 DN 07/27/22-Passed in COA Test & COA Limit Max.
   EXECUTE FUNCTION(Crt COA Batch Detail  CR) TYPE(CRTOBJ) FILE(PMCDCPP)           AC1847455;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.COA_ULSD_Company_#);
   PARAMETER(PAR.COA_Batch_Number);
   PARAMETER(PAR.COA_Property);
   PARAMETER(PAR.COA_Test);
   PARAMETER(PAR.COA_Test_Method);
   PARAMETER(PAR.COA_Unit_of_Measure);
   PARAMETER(PAR.COA_Limit);
   PARAMETER(PAR.COA_Limit_Max);
   PARAMETER(PAR.COA_Print_Sequence);
   PARAMETER(PAR.COA_Property_Value);
   PARAMETER(PAR.COA_OMS_Item_Code);
   PARAMETER(PAR.Sold_To_Customer_hpb_biod);
   PARAMETER(PAR.COA_Footnote_Indicator);
   PARAMETER(PAR.COA_Fuel_Desc2_Prop_Value);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(CHG Increment Batch #  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1853165;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_Batch_Number);
 {
  //?USER: Processing before Data update

  // DB1.Next HPB Batch Number = PAR.COA Batch Number + CON.1
  DB1.Next_HPB_Batch_Number = PAR.COA_Batch_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create other entity batch Header
 //?R6965 8/18/16 new hpb plant
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('HPBMKT');
 PARAMETER(LCL.Company_Number_041405);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Batch from Outside CR) TYPE(CRTOBJ) FILE(PMCCCPP)          AC1964792;
 PARAMETER(LCL.Company_Number_041405);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Active_Whse_Tank);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(DB1.COA_Date_Open_for_Ship);
 PARAMETER(DB1.COA_Time_Open_for_Ship);
 PARAMETER(DB1.COA_Open_for_Ship_Inits);
 PARAMETER(DB1.COA_Date_Close_from_Ship);
 PARAMETER(DB1.COA_Time_Close_from_Ship);
 PARAMETER(DB1.COA_Close_from_Ship_Inits);
 PARAMETER(DB1.COA_Gallons_Used);
 PARAMETER(DB1.COA_Comment);
 PARAMETER(DB1.COA_Batch_Production_Date);
 PARAMETER(DB1.COA_Batch_Unused_Time);
 PARAMETER(DB1.COA_Specification);
 PARAMETER(DB1.COA_RFS_Program_ID);
 PARAMETER(DB1.COA_Batch_Header_Sts);
 PARAMETER(DB1.COA_Batch_Properties_Cmpl);
 PARAMETER(DB1.COA_Batch_Int_Ext_Company);
 PARAMETER(DB1.COA_Temperature_Loadout);
 PARAMETER(DB1.COA_Batch_Volume);
 PARAMETER(DB1.COA_Batch_Denaturant_Vol);
 PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
 PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(DB1.COA_Batch_RIN);
 PARAMETER(DB1.COA_Batch_Export_Volume);
 PARAMETER(DB1.COA_Last_RIN_EEEEEEEE);
 PARAMETER(DB1.COA_Density_Loadout);
 PARAMETER(DB1.COA_Density_Reference);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
 PARAMETER(DB1.COA_Batch_Unused_Date);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(DB1.RFS_Process_Code);
 PARAMETER(DB1.RFS_Fuel_Category_Code);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(DB1.COA_Co_Product_Code);
 PARAMETER(DB1.COA_Co_Product_Comment);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
 PARAMETER(DB1.COA_BH_EMTS_Sts);
 PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
 PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
 PARAMETER(DB1.COA_Reviewed_By);
 PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
 PARAMETER(DB1.COA_BH_Yield_Percent);
 PARAMETER(DB1.COA_BH_Unused_Cde);
 PARAMETER(DB1.COA_Sample_Date);
 PARAMETER(DB1.COA_Sample_Time);
 PARAMETER(DB1.COA_LIMS_ID);
 PARAMETER(DB1.RFS_Feedstock_Code_1);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
 PARAMETER(DB1.COA_BH_Feedstck_comment_1);
 PARAMETER(DB1.RFS_Feedstock_Code_2);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
 PARAMETER(DB1.RFS_Feedstock_Code_3);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
 PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Build Batch Detail RT) TYPE(RTVOBJ) FILE(PMCBREP)          AC1851345;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   //?W104274 DN 07/27/22-Passed in COA Test & COA Limit Max.
   EXECUTE FUNCTION(RTV for Create Record  RT) TYPE(RTVOBJ) FILE(PMCDCPP)          AC1851389;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.COA_ULSD_Company_#);
   PARAMETER(PAR.COA_Batch_Number);
   PARAMETER(DB1.COA_Property);
   PARAMETER(DB1.COA_Test);
   PARAMETER(DB1.COA_Test_Method);
   PARAMETER(DB1.COA_Unit_of_Measure);
   PARAMETER(DB1.COA_Limit);
   PARAMETER(DB1.COA_Limit_Max);
   PARAMETER(DB1.COA_Print_Sequence);
   PARAMETER(*ZERO);
   PARAMETER(DB1.COA_OMS_Item_Code);
   PARAMETER(DB1.Sold_To_Customer_hpb_biod);
   PARAMETER(DB1.COA_Footnote_Indicator);
   PARAMETER(DB1.COA_Fuel_Desc2_Prop_Value);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing if Data record not found

    //?W104274 DN 07/27/22-Passed in COA Test & COA Limit Max.
    EXECUTE FUNCTION(Crt COA Batch Detail  CR) TYPE(CRTOBJ) FILE(PMCDCPP)           AC1847455;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.COA_ULSD_Company_#);
    PARAMETER(PAR.COA_Batch_Number);
    PARAMETER(PAR.COA_Property);
    PARAMETER(PAR.COA_Test);
    PARAMETER(PAR.COA_Test_Method);
    PARAMETER(PAR.COA_Unit_of_Measure);
    PARAMETER(PAR.COA_Limit);
    PARAMETER(PAR.COA_Limit_Max);
    PARAMETER(PAR.COA_Print_Sequence);
    PARAMETER(PAR.COA_Property_Value);
    PARAMETER(PAR.COA_OMS_Item_Code);
    PARAMETER(PAR.Sold_To_Customer_hpb_biod);
    PARAMETER(PAR.COA_Footnote_Indicator);
    PARAMETER(PAR.COA_Fuel_Desc2_Prop_Value);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Create_Date);
     PARAMETER(DB1.Create_Time);
     PARAMETER(DB1.Create_User);
     PARAMETER(DB1.Create_Program);
     PARAMETER(DB1.Change_Date);
     PARAMETER(DB1.Change_Time);
     PARAMETER(DB1.Change_User);
     PARAMETER(DB1.Change_Program);
     {
      //?Execute internal function

      //?*** Set RECORD STATUS field. ***
      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      //?*** Set CREATE fields. ***
      // PAR.Create Date = JOB.*Job date
      PAR.Create_Date = JOB.*Job_date;

      // PAR.Create Time = JOB.*Job time
      PAR.Create_Time = JOB.*Job_time;

      // PAR.Create User = JOB.*USER
      PAR.Create_User = JOB.*USER;

      // PAR.Create Program = JOB.*PROGRAM
      PAR.Create_Program = JOB.*PROGRAM;

      //?*** Set CHANGE fields. ***
      // PAR.Change Date = CON.*ZERO
      PAR.Change_Date = *ZERO;

      // PAR.Change Time = CON.*ZERO
      PAR.Change_Time = *ZERO;

      // PAR.Change User = CON.*BLANK
      PAR.Change_User = *BLANK;

      // PAR.Change Program = CON.*BLANK
      PAR.Change_Program = *BLANK;

     }

    }

   }

   ENDIF;

  }

  EXECUTE FUNCTION(CHG Increment Batch #  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1853165;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_Batch_Number);
  {
   //?USER: Processing before Data update

   // DB1.Next HPB Batch Number = PAR.COA Batch Number + CON.1
   DB1.Next_HPB_Batch_Number = PAR.COA_Batch_Number + 1;

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Batch Hdr & Ext    CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC2207268;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_Date_Open_for_Ship);
PARAMETER(DTL.COA_Time_Open_for_Ship);
PARAMETER(DTL.COA_Open_for_Ship_Inits);
PARAMETER(DTL.COA_Date_Close_from_Ship);
PARAMETER(DTL.COA_Time_Close_from_Ship);
PARAMETER(DTL.COA_Close_from_Ship_Inits);
PARAMETER(DTL.COA_Gallons_Used);
PARAMETER(DTL.COA_Comment);
PARAMETER(DTL.COA_Batch_Production_Date);
PARAMETER(DTL.COA_Batch_Unused_Time);
PARAMETER(DTL.COA_Specification);
PARAMETER(DTL.COA_RFS_Program_ID);
PARAMETER(DTL.COA_Batch_Header_Sts);
PARAMETER(DTL.COA_Batch_Properties_Cmpl);
PARAMETER(DTL.COA_Batch_Int_Ext_Company);
PARAMETER(DTL.COA_Temperature_Loadout);
PARAMETER(DTL.COA_Batch_Volume);
PARAMETER(DTL.COA_Batch_Denaturant_Vol);
PARAMETER(DTL.COA_RFS_Renew_Fuel_Code);
PARAMETER(DTL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(DTL.COA_Batch_RIN);
PARAMETER(DTL.COA_Batch_Export_Volume);
PARAMETER(DTL.COA_Last_RIN_EEEEEEEE);
PARAMETER(DTL.COA_Density_Loadout);
PARAMETER(DTL.COA_Density_Reference);
PARAMETER(DTL.COA_RIN_Equivalence_Valu#);
PARAMETER(DTL.COA_Batch_Unused_Date);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.RFS_Process_Code);
PARAMETER(DTL.RFS_Fuel_Category_Code);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_Co_Product_Code);
PARAMETER(DTL.COA_Co_Product_Comment);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(DTL.COA_BH_RFS_Version_Nbr);
PARAMETER(DTL.COA_BH_EMTS_Sts);
PARAMETER(DTL.COA_BH_EMTS_Date_Sent);
PARAMETER(DTL.COA_BH_EMTS_Time_Sent);
PARAMETER(DTL.COA_Reviewed_By);
PARAMETER(DTL.COA_BH_Equiv_Value_f_SEP);
PARAMETER(DTL.COA_BH_Yield_Percent);
PARAMETER(DTL.COA_BH_Unused_Cde);
PARAMETER(DTL.COA_Sample_Date);
PARAMETER(DTL.COA_Sample_Time);
PARAMETER(DTL.COA_LIMS_ID);
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.COA_BH_Feedstck_Volume_1);
PARAMETER(DTL.COA_BH_Feedstck_Measure_1);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_1);
PARAMETER(DTL.COA_BH_Feedstck_Pct_Ord_1);
PARAMETER(DTL.COA_BH_Feedstck_comment_1);
PARAMETER(DTL.RFS_Feedstock_Code_2);
PARAMETER(DTL.COA_BH_Feedstck_Volume_2);
PARAMETER(DTL.COA_BH_Feedstck_Measure_2);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_2);
PARAMETER(DTL.COA_BH_Feedstck_Pct_Ord_2);
PARAMETER(DTL.COA_BH_Feedstck_Comment_2);
PARAMETER(DTL.RFS_Feedstock_Code_3);
PARAMETER(DTL.COA_BH_Feedstck_Volume_3);
PARAMETER(DTL.COA_BH_Feedstck_Measure_3);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_3);
PARAMETER(DTL.cOA_BH_Feedstck_Pct_Ord_3);
PARAMETER(DTL.COA_BH_Feedstck_Comment_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 //?Sequence will always be 1 since we will not have multiple Seq #.
 EXECUTE FUNCTION(Upd Reviewed by Title RT) TYPE(RTVOBJ) FILE(PNGHCPP)           AC2207269;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(1);
 PARAMETER(PAR.COA_Reviewed_By_Title);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.COA Reviewed By Title NE PAR.COA Reviewed By Title
  IF DB1.COA_Reviewed_By_Title <> PAR.COA_Reviewed_By_Title;

  EXECUTE FUNCTION(Chg Reviewed by Title CH) TYPE(CHGOBJ) FILE(PNGHCPP)           AC2207267;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_BH_Feedstock_Sequence);
  PARAMETER(PAR.COA_Reviewed_By_Title);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


