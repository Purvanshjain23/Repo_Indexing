// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCLXFR
// ?Date: 14.08.2025 Time: 03:44:44
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Read the Item Balance Detail and Create the WF Item posit balance
EXECUTE FUNCTION(Rtv/Crt WFItemBalPs   RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1911783;
PARAMETER(PAR.PRP_Warehouse_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.PRP_From_Date);
PARAMETER(PAR.PRP_To_Date);
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(PAR.LSP_Prodution_Warehouse);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Pass in the selection, if selection but not equal then set to no
 //?selection
 //?Company Item
 DO;

 //?Item Code or Warehouse break: Rtv Scheduling Position Grade Sts
 CASE;

 // IF DB1.Item Code NE WRK.Item Code
 IF DB1.Item_Code <> WRK.Item_Code;

 // OR DB1.Warehouse Code NE WRK.Warehouse Code
 OR DB1.Warehouse_Code <> WRK.Warehouse_Code;

 // WRK.Item Code = DB1.Item Code
 WRK.Item_Code = DB1.Item_Code;

 // WRK.Warehouse Code = DB1.Warehouse Code
 WRK.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(Rtv Sched Pstn Grd sts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1517564;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.Scheduling_Position_Grade);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Scheduling Position Grade From the company item must = Y
 CASE;

 // IF WRK.Scheduling Position Grade is Yes
 IF WRK.Scheduling_Position_Grade = 'Y';

 //?Scheduling Position Grade From the company item must = Y
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?If record was selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(Rtv/Crt WFItemP-OnhandRT) TYPE(RTVOBJ) FILE(PME0CPP)           AC1911650;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.LSP_Accounting_Co);
 PARAMETER(PAR.LSP_Prodution_Warehouse);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Quantity_on_Hand_UOM1);
 {
  //?USER: Processing if Data record not found

  // LCL.IPB Quantity On Hand = PAR.Scheduled Quantity
  LCL.IPB_Quantity_On_Hand = PAR.Scheduled_Quantity;

  //?on hand
  EXECUTE FUNCTION(Crt WF ItemPos -OnHandCR) TYPE(CRTOBJ) FILE(PME0CPP)           AC1911674;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.IPB_Accounting_Company);
  PARAMETER(PAR.IPB_Production_Warehouse);
  PARAMETER(PAR.IPB_Order_Company);
  PARAMETER(PAR.IPB_Order_Warehouse);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.IPB_Quantity_On_Hand);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   // DB1.IPB Current Position = DB1.IPB Quantity On Hand - DB1.IPB Picked
   DB1.IPB_Start_Position = DB1.IPB_Quantity_On_Hand - DB1.IPB_Picked;

   // DB1.IPB New Current Position = DB1.IPB Current Position
   DB1.IPB_New_Current_Position = DB1.IPB_Start_Position;

  }

  //?USER: Process Data record

  // LCL.IPB Quantity On Hand = DB1.IPB Quantity On Hand + PAR.Scheduled Quantity
  LCL.IPB_Quantity_On_Hand = DB1.IPB_Quantity_On_Hand + PAR.Scheduled_Quantity;

  //?On hand
  EXECUTE FUNCTION(Chg WF ItemPos -OnhandCO) TYPE(CHGOBJ) FILE(PME0CPP)           AC1911673;
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.IPB_Accounting_Company);
  PARAMETER(DB1.IPB_Production_Warehouse);
  PARAMETER(DB1.IPB_Order_Company);
  PARAMETER(DB1.IPB_Order_Warehouse);
  PARAMETER(PAR.Production_Date);
  PARAMETER(LCL.IPB_Quantity_On_Hand);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   // DB1.IPB Current Position = DB1.IPB Quantity On Hand - DB1.IPB Picked
   DB1.IPB_Start_Position = DB1.IPB_Quantity_On_Hand - DB1.IPB_Picked;

   // DB1.IPB New Current Position = DB1.IPB Current Position
   DB1.IPB_New_Current_Position = DB1.IPB_Start_Position;

  }

 }

 ENDIF;

}


