// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMTJXFR
// ?Date: 14.08.2025 Time: 03:44:04
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?________________________________________________________________
//?F1110 - EPA Quarterly Reporting -- Report RFS0100
//?     RFS RIN Activity Report - send quarterly to the EPA
//?Q1 =  Jan - Mar (Due May 31)         Q2 = Apr - Jun (Due Aug 31)
//?Q3 =  Jul - Sep (Due Nov 30)         Q4 = Oct - Dec (Due Feb 28)
//? Summarize all RIN activities for the reporting period.
//?________________________________________________________________
//?MODIFICATIONS:
//?E02218 RMC 8/08/2012 Q2 2012:  RFS0103 renamed RFS0104 & fld changes
//?   handled in the sql RFS0104
//?E02013 RMC 3/23/2012  use emts sent date instead of trans date because
//?  trans date is now actual shipped date. to balance with emts we
//?  need to total rins per the date they were sent to EMTS.
//?  So do 2 passes: 1st) Get GEN rins per GEN EMTS Dt
//?  then secondly get the BUY/SEL/RET per the RIN EMTS Date sent
//?E01510 RMC 5/17/2011  increase dec position to 9 from 7
//?E01510 RMC 4/26/2011  Add new fields per Q1 2011 docs; Now RFSA101
//?E921 9/28/2010 EPA RFS2 Modifications-Report RFS0100 is now RFS0101
//?   and report rfs1 and rfs2 trans in separate buckets
//? P00579 RMC 7/28/2010  Added comp id to LF for rtv prior yr data
//? P00579 RMC 5/26/2010  Added new fields for RFS2
//?________________________________________________________________
//?Set field values that wont change per batch:
// PAR.RFS Report Form ID = CND.RFS0104
PAR.RFS_Report_Form_ID = 'RFS0104';

// PAR.RFS CBI = CND.Non Confidential Business
PAR.RFS_CBI = 'N';

//?Format report date: MM/DD/YYYY
EXECUTE FUNCTION(Clc Fmt Dt MM/DD/YYYY IF) TYPE(EXCINTFUN)                      AC1874414;
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.RFS_Report_Date);
{
 //?Execute internal function

 //?Format input date as : MM/DD/YYYY
 // PAR.Date 7A              USR = CVTVAR(PAR.Date In)
 PAR.Date_7A_USR = CVTVAR(PAR.Date_In);

 // WRK.Month (Char) USR = SUBSTRING(PAR.Date 7A              USR,CON.4,CON.2)
 WRK.Month_Char_USR = SUBSTRING(PAR.Date_7A_USR:4:2);

 // WRK.Day (Alpha) USR = SUBSTRING(PAR.Date 7A              USR,CON.6,CON.2)
 WRK.Day_Alpha_USR = SUBSTRING(PAR.Date_7A_USR:6:2);

 // WRK.Year Code = PAR.Date In *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_In 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Year USR = WRK.Year Code
 WRK.Year_USR = WRK.Year_Code;

 // WRK.Month MM/  3A = CONCAT(WRK.Month (Char) USR,CON./,CON.*ZERO)
 WRK.Month_MM_3A = WRK.Month_Char_USR + '/' (*ZERO);

 // WRK.Day DD/  3A = CONCAT(WRK.Day (Alpha) USR,CON./,CON.*ZERO)
 WRK.Day_DD_3A = WRK.Day_Alpha_USR + '/' (*ZERO);

 // WRK.Month/Day MM/DD/ = CONCAT(WRK.Month MM/  3A,WRK.Day DD/  3A,CON.*ZERO)
 WRK.Month_Day_MM_DD = WRK.Month_MM_3A + WRK.Day_DD_3A (*ZERO);

 // PAR.MMDDYYYY Usr = CONCAT(WRK.Month/Day MM/DD/,WRK.Year USR,CON.*ZERO)
 PAR.MMDDYYYY_Usr = WRK.Month_Day_MM_DD + WRK.Year_USR (*ZERO);

}


// WRK.Year Alpha (YY) USR = SUBSTRING(PAR.RFS Report Year,CON.3,CON.2)
WRK.Year_Alpha_YY_USR = SUBSTRING(PAR.RFS_Report_Year:3:2);

// WRK.Text 3 Length USR = CONCAT(CON.1,WRK.Year Alpha (YY) USR,CON.*ZERO)
WRK.Text_3_Length_USR = '1' + WRK.Year_Alpha_YY_USR (*ZERO);

//?Set Compliance From and To Dates
CASE;

// IF PAR.RFS Compliance Period is Quarter 1 (Jan-Mar)
IF PAR.RFS_Compliance_Period = 'Q1';

// WRK.Date From Alpha       USR = CONCAT(WRK.Text 3 Length USR,CON.0101,CON.*ZERO)
WRK.Date_From_Alpha_USR = WRK.Text_3_Length_USR + '0101' (*ZERO);

// WRK.Date To Alpha         USR = CONCAT(WRK.Text 3 Length USR,CON.0331,CON.*ZERO)
WRK.Date_To_Alpha_USR = WRK.Text_3_Length_USR + '0331' (*ZERO);

//?Set Compliance From and To Dates
// IF PAR.RFS Compliance Period is Quarter 2 (Apr-Jun)
IF PAR.RFS_Compliance_Period = 'Q2';

// WRK.Date From Alpha       USR = CONCAT(WRK.Text 3 Length USR,CON.0401,CON.*ZERO)
WRK.Date_From_Alpha_USR = WRK.Text_3_Length_USR + '0401' (*ZERO);

// WRK.Date To Alpha         USR = CONCAT(WRK.Text 3 Length USR,CON.0630,CON.*ZERO)
WRK.Date_To_Alpha_USR = WRK.Text_3_Length_USR + '0630' (*ZERO);

//?Set Compliance From and To Dates
// IF PAR.RFS Compliance Period is Quarter 3 (Jly-Sep)
IF PAR.RFS_Compliance_Period = 'Q3';

// WRK.Date From Alpha       USR = CONCAT(WRK.Text 3 Length USR,CON.0701,CON.*ZERO)
WRK.Date_From_Alpha_USR = WRK.Text_3_Length_USR + '0701' (*ZERO);

// WRK.Date To Alpha         USR = CONCAT(WRK.Text 3 Length USR,CON.0930,CON.*ZERO)
WRK.Date_To_Alpha_USR = WRK.Text_3_Length_USR + '0930' (*ZERO);

//?Set Compliance From and To Dates
// IF PAR.RFS Compliance Period is Quarter 4 (Oct-Dec)
IF PAR.RFS_Compliance_Period = 'Q4';

// WRK.Date From Alpha       USR = CONCAT(WRK.Text 3 Length USR,CON.1001,CON.*ZERO)
WRK.Date_From_Alpha_USR = WRK.Text_3_Length_USR + '1001' (*ZERO);

// WRK.Date To Alpha         USR = CONCAT(WRK.Text 3 Length USR,CON.1231,CON.*ZERO)
WRK.Date_To_Alpha_USR = WRK.Text_3_Length_USR + '1231' (*ZERO);

ENDIF;

// PAR.Date From             USR = CVTVAR(WRK.Date From Alpha       USR)
PAR.Date_From_USR = CVTVAR(WRK.Date_From_Alpha_USR);

// PAR.Date To               USR = CVTVAR(WRK.Date To Alpha         USR)
PAR.Date_To_USR = CVTVAR(WRK.Date_To_Alpha_USR);

//?Get Company Info:
EXECUTE FUNCTION(RTV for RFS EPA Rpts  RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1874383;
PARAMETER(PAR.Company_Number);
PARAMETER('B100');
PARAMETER(LCL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(LCL.COA_Producer_Regist_Nbr);
PARAMETER(LCL.COA_Employer_ID);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(LCL.COA_ULSD_Company_#);
PARAMETER(LCL.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_RIN_Equivalence_Valu);
PARAMETER(LCL.COA_RIN_Renewable_Enrgy);
PARAMETER(LCL.COA_RIN_Type_Flag);
PARAMETER(LCL.COA_Density_Loadout);
PARAMETER(LCL.COA_BOL_Percent);
PARAMETER(LCL.COA_RFS_Renew_Fuel_Code);
PARAMETER(LCL.COA_RFS_Rnwbl_Feedstock);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.COA ULSD Facility # is Blanks
IF LCL.COA_ULSD_Facility_# = *BLANK;

// LCL.COA ULSD Facility # = CON.NOTOP
LCL.COA_ULSD_Facility_# = 'NOTOP';

ENDIF;

//?Get Current year gallon rins owned at start of quarter
//?   Volume shipped after Quarter start from active batches
//?this can be 0 -> rins arent assigned until ship/invoice time
// PAR.RFS Cur RFS1 RINS Own Str = CON.*ZERO
PAR.RFS_2009_RFS1_RIN_Own_Str = *ZERO;

// PAR.RFS Cur RFS2 RINS Own Str = CON.*ZERO
PAR.RFS_Cur_RFS2_RINS_Own_Str = *ZERO;

//?5/13/09 E00382 Volume of fuel still in the tanks will come from tom dye.
//? Change effective for Q2 2009 report
//?GET fuel inventory at EOQ FROM TOM!!
//? Gallon RINs owned at Quarter End
//? ->  can be 0 -> rins arent assigned until ship/invoice time
// PAR.RFS 2009 RFS1 RIN Own-End = CON.*ZERO
PAR.RFS_2009_RFS1_RIN_Own_End = *ZERO;

//?Accum Number of gallon-RINs sold and retired for the period:
//?   For Assigned RINS:  status = 1
// PAR.RFS RIN Status = CND.Assigned RINs
PAR.RFS_RIN_Status = 1;

//?Get RINS Generated for the date range
EXECUTE FUNCTION(Rtv RFS Act Rpt-GEN   RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2039927;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.RFS_RIN_Status);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Genertd);
{
 //?USER: Initialize routine

 //?E2013 NEW to use the GEN EMTS Date instead of transaction date
 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA GEN EMTS Date Sent GE PAR.Date From             USR
 IF DB1.COA_GEN_EMTS_Date_Sent >= PAR.Date_From_USR;

 // AND DB1.COA GEN EMTS Date Sent LE PAR.Date To               USR
 AND DB1.COA_GEN_EMTS_Date_Sent <= PAR.Date_To_USR;

 // PAR.RFS Cur RFS2 RINS Genertd = PAR.RFS Cur RFS2 RINS Genertd + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_RINS_Genertd = PAR.RFS_Cur_RFS2_RINS_Genertd + DB1.COA_RIN_Quantity;

 ENDIF;

}


//?Get RINS BUY/SEL/RET for the date range
EXECUTE FUNCTION(Rtv RFS Act Rpt-EMTS  RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2039941;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.RFS_RIN_Status);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Prch);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Sold);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd);
{
 //?USER: Initialize routine

 //?E2013 NEW to use the RIN EMTS Date instead of transaction date
 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA RIN EMTS Date Sent GE PAR.Date From             USR
 IF DB1.COA_RIN_EMTS_Date_Sent >= PAR.Date_From_USR;

 // AND DB1.COA RIN EMTS Date Sent LE PAR.Date To               USR
 AND DB1.COA_RIN_EMTS_Date_Sent <= PAR.Date_To_USR;

 //?FP1322 RMC 03/11/10  accum according to Assigned(1) /Separated Sts (2)
 CASE;

 // IF PAR.RFS RIN Status EQ DB1.COA RIN Type Flag
 IF PAR.RFS_RIN_Status = DB1.COA_RIN_Type_Flag;

 //?Accum into RFS1 or RFS2 buckets
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 1
 IF DB1.COA_BHR_RFS_Version_Nbr = '1';

 //?rfs1 is obsolete
 //?Accum into RFS1 or RFS2 buckets
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.RFS Transaction Type is Sold or Delivered
 IF DB1.RFS_Transaction_Type = 'SEL';

 // PAR.RFS Cur RFS2 Gl RINS Sold = PAR.RFS Cur RFS2 Gl RINS Sold + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Sold = PAR.RFS_Cur_RFS2_Gl_RINS_Sold + DB1.COA_RIN_Quantity;

 // IF DB1.RFS Transaction Type is Retired
 IF DB1.RFS_Transaction_Type = 'RET';

 // PAR.RFS Cur RFS2 Gl RINS Rtrd = PAR.RFS Cur RFS2 Gl RINS Rtrd + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd = PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd + DB1.COA_RIN_Quantity;

 // IF DB1.RFS Transaction Type is Buy
 IF DB1.RFS_Transaction_Type = 'BUY';

 // PAR.RFS Cur RFS2 Gl RINS Prch = PAR.RFS Cur RFS2 Gl RINS Prch + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Prch = PAR.RFS_Cur_RFS2_Gl_RINS_Prch + DB1.COA_RIN_Quantity;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// Comp: rfs2 rins own-end
PAR.RFS_Cur_RFS2_RINS_Own_End = ( ( ( PAR.RFS_Cur_RFS2_RINS_Own_Str                                +
+ PAR.RFS_Cur_RFS2_Gl_RINS_Prch ) + PAR.RFS_Cur_RFS2_RINS_Genertd )                               +
- PAR.RFS_Cur_RFS2_Gl_RINS_Sold ) - PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd;

//?Let Tom supply this:  starting Q1 2010 --- commented 7/28/2010
//?  its nmbr of rins that were generated in the prior yr that were
//?  purch/sold/retred/ or still owned at the end of this period
//?Create RFSA101 Record  for Assigned RINs
CASE;

// IF PAR.Company Number is St Joseph HPB Marketing
IF PAR.Company_Number = 374;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER('St Joseph Marketing');
{
 C                     MOVE #IPANA    #OO9NA
}


ENDIF;

EXECUTE FUNCTION(Crt RFS RIN Actvty Rpt CR) TYPE(CRTOBJ) FILE(PMDRCPP)          AC1874234;
PARAMETER(PAR.RFS_Report_Form_ID);
PARAMETER(PAR.RFS_Report_Type);
PARAMETER(PAR.RFS_CBI);
PARAMETER(PAR.RFS_Report_Date);
PARAMETER(PAR.RFS_Report_Year);
PARAMETER(LCL.COA_ULSD_Company_#);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(PAR.RFS_Compliance_Period);
PARAMETER(LCL.COA_ULSD_Facility_#);
PARAMETER(PAR.RFS_RIN_Status);
PARAMETER(PAR.RFS_Vol_at_End_of_Quarter);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Own_Str);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Purchs);
PARAMETER(PAR.RFS_2009_RFS1_RINS_Sold);
PARAMETER(PAR.RFS_2009_RFS1_RINS_Retrd);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Own_End);
PARAMETER(PAR.RFS_2010_RFS1_RIN_OwSt);
PARAMETER(PAR.RFS_2010_RFS1_RIN_Prch);
PARAMETER(PAR.RFS_2010_RFS1_RIN_Sold);
PARAMETER(PAR.RFS_2010_RFS1_RIN_Rtrd);
PARAMETER(PAR.RFS_2010_RFS1_RINS_Own_En);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Own_Str);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Prch);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Sold);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Own_End);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Genertd);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

//?For Separated RINS:  status = 2
// PAR.RFS RIN Status = CND.Separated RINs
PAR.RFS_RIN_Status = 2;

//?Get RINS Generated for the date range
EXECUTE FUNCTION(Rtv RFS Act Rpt-GEN   RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2039927;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.RFS_RIN_Status);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Genertd);
{
 //?USER: Initialize routine

 //?E2013 NEW to use the GEN EMTS Date instead of transaction date
 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA GEN EMTS Date Sent GE PAR.Date From             USR
 IF DB1.COA_GEN_EMTS_Date_Sent >= PAR.Date_From_USR;

 // AND DB1.COA GEN EMTS Date Sent LE PAR.Date To               USR
 AND DB1.COA_GEN_EMTS_Date_Sent <= PAR.Date_To_USR;

 // PAR.RFS Cur RFS2 RINS Genertd = PAR.RFS Cur RFS2 RINS Genertd + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_RINS_Genertd = PAR.RFS_Cur_RFS2_RINS_Genertd + DB1.COA_RIN_Quantity;

 ENDIF;

}


//?Get RINS BUY/SEL/RET for the date range
EXECUTE FUNCTION(Rtv RFS Act Rpt-EMTS  RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2039941;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.RFS_RIN_Status);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Prch);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Sold);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd);
{
 //?USER: Initialize routine

 //?E2013 NEW to use the RIN EMTS Date instead of transaction date
 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA RIN EMTS Date Sent GE PAR.Date From             USR
 IF DB1.COA_RIN_EMTS_Date_Sent >= PAR.Date_From_USR;

 // AND DB1.COA RIN EMTS Date Sent LE PAR.Date To               USR
 AND DB1.COA_RIN_EMTS_Date_Sent <= PAR.Date_To_USR;

 //?FP1322 RMC 03/11/10  accum according to Assigned(1) /Separated Sts (2)
 CASE;

 // IF PAR.RFS RIN Status EQ DB1.COA RIN Type Flag
 IF PAR.RFS_RIN_Status = DB1.COA_RIN_Type_Flag;

 //?Accum into RFS1 or RFS2 buckets
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 1
 IF DB1.COA_BHR_RFS_Version_Nbr = '1';

 //?rfs1 is obsolete
 //?Accum into RFS1 or RFS2 buckets
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.RFS Transaction Type is Sold or Delivered
 IF DB1.RFS_Transaction_Type = 'SEL';

 // PAR.RFS Cur RFS2 Gl RINS Sold = PAR.RFS Cur RFS2 Gl RINS Sold + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Sold = PAR.RFS_Cur_RFS2_Gl_RINS_Sold + DB1.COA_RIN_Quantity;

 // IF DB1.RFS Transaction Type is Retired
 IF DB1.RFS_Transaction_Type = 'RET';

 // PAR.RFS Cur RFS2 Gl RINS Rtrd = PAR.RFS Cur RFS2 Gl RINS Rtrd + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd = PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd + DB1.COA_RIN_Quantity;

 // IF DB1.RFS Transaction Type is Buy
 IF DB1.RFS_Transaction_Type = 'BUY';

 // PAR.RFS Cur RFS2 Gl RINS Prch = PAR.RFS Cur RFS2 Gl RINS Prch + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Prch = PAR.RFS_Cur_RFS2_Gl_RINS_Prch + DB1.COA_RIN_Quantity;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// Comp: rfs2 rins own-end
PAR.RFS_Cur_RFS2_RINS_Own_End = ( ( ( PAR.RFS_Cur_RFS2_RINS_Own_Str                                +
+ PAR.RFS_Cur_RFS2_Gl_RINS_Prch ) + PAR.RFS_Cur_RFS2_RINS_Genertd )                               +
- PAR.RFS_Cur_RFS2_Gl_RINS_Sold ) - PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd;

//?Let Tom supply this:  starting Q1 2010 --- commented 7/28/2010
//?  its nmbr of rins that were generated in the prior yr that were
//?  purch/sold/retred/ or still owned at the end of this period
//?Create RFSA101 Record  for Separated RINs
CASE;

// IF PAR.RFS Cur RFS1 Gl RINS Prch is Entered
IF PAR.RFS_2009_RFS1_RIN_Purchs > 0;

// OR PAR.RFS Cur RFS1 Gl RINS Sold is Entered
OR PAR.RFS_2009_RFS1_RINS_Sold > 0;

// OR PAR.RFS Cur RFS1 Gl RINS Rtrd is Entered
OR PAR.RFS_2009_RFS1_RINS_Retrd > 0;

// OR PAR.RFS Cur RFS1 Gl RINS Prch is Entered
OR PAR.RFS_2009_RFS1_RIN_Purchs > 0;

// OR PAR.RFS Cur RFS1 Gl RINS Sold is Entered
OR PAR.RFS_2009_RFS1_RINS_Sold > 0;

// OR PAR.RFS Cur RFS1 Gl RINS Rtrd is Entered
OR PAR.RFS_2009_RFS1_RINS_Retrd > 0;

// PAR.RFS Vol at End of Quarter = CND.Zero
PAR.RFS_Vol_at_End_of_Quarter = 0;

EXECUTE FUNCTION(Crt RFS RIN Actvty Rpt CR) TYPE(CRTOBJ) FILE(PMDRCPP)          AC1874234;
PARAMETER(PAR.RFS_Report_Form_ID);
PARAMETER(PAR.RFS_Report_Type);
PARAMETER(PAR.RFS_CBI);
PARAMETER(PAR.RFS_Report_Date);
PARAMETER(PAR.RFS_Report_Year);
PARAMETER(LCL.COA_ULSD_Company_#);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(PAR.RFS_Compliance_Period);
PARAMETER(LCL.COA_ULSD_Facility_#);
PARAMETER(PAR.RFS_RIN_Status);
PARAMETER(PAR.RFS_Vol_at_End_of_Quarter);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Own_Str);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Purchs);
PARAMETER(PAR.RFS_2009_RFS1_RINS_Sold);
PARAMETER(PAR.RFS_2009_RFS1_RINS_Retrd);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Own_End);
PARAMETER(PAR.RFS_2010_RFS1_RIN_OwSt);
PARAMETER(PAR.RFS_2010_RFS1_RIN_Prch);
PARAMETER(PAR.RFS_2010_RFS1_RIN_Sold);
PARAMETER(PAR.RFS_2010_RFS1_RIN_Rtrd);
PARAMETER(PAR.RFS_2010_RFS1_RINS_Own_En);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Own_Str);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Prch);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Sold);
PARAMETER(PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Own_End);
PARAMETER(PAR.RFS_Cur_RFS2_RINS_Genertd);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

ENDIF;

// PAR.RFS Company ID = LCL.COA ULSD Company #
PAR.RFS_Company_ID = LCL.COA_ULSD_Company_#;

