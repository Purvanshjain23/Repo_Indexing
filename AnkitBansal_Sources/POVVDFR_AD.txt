// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVVDFR
// ?Date: 14.08.2025 Time: 03:39:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

EXECUTE FUNCTION(Rtv Ship Co FR WHS    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714992;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Warehouse Type is Fresh
 IF DB1.Warehouse_Type = 'FR';

 // AND DB1.Warehouse Location is Internal (Plant)
 AND DB1.Warehouse_Location = 'I';

 // AND DB1.Production Warehouse Code is Warehouse Code Blank
 AND DB1.Production_Warehouse_Code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// LCL.Select Options USR = CON.5=Partial Transactions
LCL.Select_Options_USR = '5=Partial Transactions';

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.7=FG/WP Transactions,CON.2)
LCL.Select_Options_USR = LCL.Select_Options_USR + '7=FG/WP Transactions' (2);

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.9=Adjustments,CON.2)
LCL.Select_Options_USR = LCL.Select_Options_USR + '9=Adjustments' (2);

//?USER: Initialize subfile control

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(CTL.Department_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(CTL.Production_Line_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// LCL.Change Code = CND.No
LCL.Change_Code = 'N';

EXECUTE FUNCTION(Rtv Totals            RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1666951;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Wgt_Begin_Inv_USR);
PARAMETER(CTL.Wgt_Converting_USR);
PARAMETER(CTL.Wgt_Pending_USR);
PARAMETER(CTL.Wgt_Not_Used_USR);
PARAMETER(CTL.Wgt_Produced_USR);
PARAMETER(CTL.Wgt_Ending_Inv_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Wgt Begin Inv USR = PAR.Wgt Begin Inv USR + DB1.Beginning Inv Wgt
 PAR.Wgt_Begin_Inv_USR = PAR.Wgt_Begin_Inv_USR + DB1.Beginning_Inv_Wgt;

 CASE;

 // IF DB1.Yld Inv Balance Type is Work In Process
 IF DB1.Yld_Inv_Balance_Type = 'WP';

 // PAR.Wgt Converting USR = PAR.Wgt Converting USR + DB1.Delete Pending Wgt
 PAR.Wgt_Converting_USR = PAR.Wgt_Converting_USR + DB1.Delete_Pending_Wgt;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Wgt Pending USR = PAR.Wgt Pending USR + DB1.Delete Pending Wgt
 PAR.Wgt_Pending_USR = PAR.Wgt_Pending_USR + DB1.Delete_Pending_Wgt;

 ENDIF;

 // PAR.Wgt Not Accepted USR = PAR.Wgt Not Accepted USR + DB1.Not Used Wgt
 PAR.Wgt_Not_Used_USR = PAR.Wgt_Not_Used_USR + DB1.Not_Used_Wgt;

 // PAR.Wgt Produced USR = PAR.Wgt Produced USR + DB1.Produced Wgt
 PAR.Wgt_Produced_USR = PAR.Wgt_Produced_USR + DB1.Partial_Produced_Wgt;

 // Ending Inv
 PAR.Wgt_Ending_Inv_USR = PAR.Wgt_Ending_Inv_USR + ( DB1.Not_Used_Wgt
 + DB1.Partial_Produced_Wgt );

}


//?USER: Initialize subfile record from DBF record

// RCD.Wgt Begin Inv USR = RCD.Beginning Inv Wgt
RCD.Wgt_Begin_Inv_USR = RCD.Beginning_Inv_Wgt;

// RCD.Wgt Accepted USR = RCD.Used Wgt
RCD.Wgt_Accepted_USR = RCD.Used_Wgt;

// RCD.Delete Pending Wgt = DB1.Delete Pending Wgt
RCD.Delete_Pending_Wgt = DB1.Delete_Pending_Wgt;

// RCD.Wgt Not Used USR = RCD.Not Used Wgt
RCD.Wgt_Not_Used_USR = RCD.Not_Used_Wgt;

// RCD.Wgt Rejected USR = RCD.WIP Rejected Wgt
RCD.Wgt_Rejected_USR = RCD.WIP_Rejected_Wgt;

// RCD.Wgt Produced USR = RCD.Produced Wgt
RCD.Wgt_Produced_USR = RCD.Partial_Produced_Wgt;

// RCD.Text USR 40 = RCD.Yld Balance Comment
RCD.Text_USR_40 = RCD.Yld_Balance_Comment;

CASE;

// IF RCD.Yld Inv Balance Type is Partial
IF RCD.Yld_Inv_Balance_Type = 'PT';

// RCD.Wgt Ending Inv USR = RCD.Wgt Not Used USR + RCD.Wgt Produced USR
RCD.Wgt_Ending_Inv_USR = RCD.Wgt_Not_Used_USR + RCD.Wgt_Produced_USR;

//?RMC 8/2/6 dont show this for PT per Nathan
// RCD.Delete Pending Wgt = CON.*ZERO
RCD.Delete_Pending_Wgt = *ZERO;

// IF RCD.Yld Inv Balance Type is WIP Reject
IF RCD.Yld_Inv_Balance_Type = 'RJ';

// RCD.Wgt Ending Inv USR = RCD.Wgt Not Used USR
RCD.Wgt_Ending_Inv_USR = RCD.Wgt_Not_Used_USR;

ENDIF;

// RCD.Output Partial Prod USR = PAR.Output Partial Prod USR
RCD.Output_Partial_Prod_USR = PAR.Output_Partial_Prod_USR;

// RCD.Output Begin Inv USR = PAR.Output Begin Inv USR
RCD.Output_Begin_Inv_USR = PAR.Output_Begin_Inv_USR;

CASE;

// IF RCD.Yld Inv Balance Type is FG/WP
IF RCD.Yld_Inv_Balance_Type = 'FG'/'WP';

// RCD.Output Partial Prod USR = CND.yes
RCD.Output_Partial_Prod_USR = 'Y';

// RCD.Output Begin Inv USR = CND.yes
RCD.Output_Begin_Inv_USR = 'Y';

ENDIF;

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(RCD.Item_Description_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Code DRV) TYPE(DRVFLD)                                    AC1670444;
PARAMETER(RCD.Item_Code_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 // LCL.Number 5,0            USR = PAR.Item Code
 LCL.Number_50_USR = PAR.Item_Code;

 // LCL.Text USR 5 = CVTVAR(LCL.Number 5,0            USR)
 LCL.Text_USR_5 = CVTVAR(LCL.Number_50_USR);

 // PAR.Item Code DRV = LCL.Text USR 5
 PAR.Item_Code_DRV = LCL.Text_USR_5;

}


//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F9=Add Partial
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

CASE;

// IF PAR.Add Partial USR is yes
IF PAR.Add_Partial_USR = 'Y';

// Call program Zzz Reconcile Itm Pmt PV.
CALL PROGRAM(Zzz Reconcile Itm Pmt PV) ('PPDYPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(*ZERO);
PARAMETER('PT');
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?F10=Add Finished
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF PAR.Add Partial USR is yes
IF PAR.Add_Partial_USR = 'Y';

// Call program Zzz Reconcile Itm Pmt PV.
CALL PROGRAM(Zzz Reconcile Itm Pmt PV) ('PPDYPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(*ZERO);
PARAMETER('FG');
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?F11=Add Wip
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

CASE;

// IF PAR.Add Partial USR is yes
IF PAR.Add_Partial_USR = 'Y';

// Call program Zzz Reconcile Itm Pmt PV.
CALL PROGRAM(Zzz Reconcile Itm Pmt PV) ('PPDYPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(*ZERO);
PARAMETER('WP');
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?F12=Add Reject
CASE;

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

CASE;

// IF PAR.Add Partial USR is yes
IF PAR.Add_Partial_USR = 'Y';

// Call program Zzz Reconcile Itm Pmt PV.
CALL PROGRAM(Zzz Reconcile Itm Pmt PV) ('PPDYPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(*ZERO);
PARAMETER('RJ');
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?F21=PRINT
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program PMT Print Option  WEB PV.
CALL PROGRAM(PMT Print Option  WEB PV) ('POT2PVR');
PARAMETER('Inventory Reconcile');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('YR');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTINVREC');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = PAR.PRT Number of Copies
LCL.Copies_NBR_USR = PAR.PRT_Number_of_Copies;

// Call program Zzz Yield Reports     UP.
SBMJOB;
CALL PROGRAM(Zzz Yield Reports     UP) ('POWVUPR');
PARAMETER('POWWPFR$');
PARAMETER('POWWPFR');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Display Partial Transactions
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Partial Trans     DF.
CALL PROGRAM(Dsp Partial Trans     DF) ('POWYDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Partial_Item_Code);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?7=Display Item Transactions
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Dsp Transaction   WEB DF.
CALL PROGRAM(Dsp Transaction   WEB DF) ('POWXDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description_DRV);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Display Item Adjustments
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Zzz Item Adjustments  DF.
CALL PROGRAM(Zzz Item Adjustments  DF) ('POYUDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?CHG:  Record
CASE;

// IF RCD.Wgt Accepted USR NE RCD.Used Wgt
IF RCD.Wgt_Accepted_USR <> RCD.Used_Wgt;

// OR RCD.Wgt Not Accepted USR NE RCD.Not Used Wgt
OR RCD.Wgt_Not_Used_USR <> RCD.Not_Used_Wgt;

// OR RCD.Wgt Rejected USR NE RCD.WIP Rejected Wgt
OR RCD.Wgt_Rejected_USR <> RCD.WIP_Rejected_Wgt;

// OR RCD.Text USR 40 NE RCD.Yld Balance Comment
OR RCD.Text_USR_40 <> RCD.Yld_Balance_Comment;

// OR RCD.Wgt Produced USR NE RCD.Produced Wgt
OR RCD.Wgt_Produced_USR <> RCD.Partial_Produced_Wgt;

// OR RCD.Wgt Begin Inv USR NE RCD.Beginning Inv Wgt
OR RCD.Wgt_Begin_Inv_USR <> RCD.Beginning_Inv_Wgt;

EXECUTE FUNCTION(Chg WIP Recncle Data  IF) TYPE(EXCINTFUN)                      AC1667927;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Partial_Item_Code);
PARAMETER(RCD.Yld_Inv_Balance_Type);
PARAMETER(RCD.WIP_Usage_Company_Num);
PARAMETER(RCD.WIP_Usage_Dept_Code);
PARAMETER(RCD.WIP_Usage_Prod_Line_Code);
PARAMETER(RCD.Partial_Produced_Qty);
PARAMETER(RCD.Partial_Produced_Wgt);
PARAMETER(RCD.Beginning_Inv_Qty);
PARAMETER(RCD.Beginning_Inv_Wgt);
PARAMETER(RCD.Delete_Pending_Qty);
PARAMETER(RCD.Delete_Pending_Wgt);
PARAMETER(RCD.Used_Qty);
PARAMETER(RCD.Used_Wgt);
PARAMETER(RCD.Not_Used_Qty);
PARAMETER(RCD.Not_Used_Wgt);
PARAMETER(RCD.WIP_Rejected_Qty);
PARAMETER(RCD.WIP_Rejected_Wgt);
PARAMETER(RCD.Yld_Balance_Comment);
PARAMETER(RCD.Yld_Balance_Post_Sts);
PARAMETER(RCD.Credit_Item_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Wgt_Begin_Inv_USR);
PARAMETER(RCD.Wgt_Not_Used_USR);
PARAMETER(RCD.Wgt_Produced_USR);
PARAMETER(RCD.Text_USR_40);
{
 //?Execute internal function

 // PAR.Transaction Quantity = CON.*ZERO
 PAR.Transaction_Quantity = *ZERO;

 CASE;

 // IF PAR.Beginning Inv Wgt NE PAR.Wgt Begin Inv USR
 IF PAR.Beginning_Inv_Wgt <> PAR.Wgt_Begin_Inv_USR;

 // PAR.Transaction Weight = PAR.Wgt Begin Inv USR - PAR.Beginning Inv Wgt
 PAR.Transaction_Weight = PAR.Wgt_Begin_Inv_USR - PAR.Beginning_Inv_Wgt;

 EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER('BI');
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  {
   //?USER: Processing if Data record not found

   // PAR.Yld Transaction Seq = CON.1
   PAR.Yld_Transaction_Seq = 1;

   //?USER: Process Data record

   // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
   PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // IF PAR.Not Used Wgt NE PAR.Wgt Not Used USR
 IF PAR.Not_Used_Wgt <> PAR.Wgt_Not_Used_USR;

 // PAR.Transaction Weight = PAR.Wgt Not Used USR - PAR.Not Used Wgt
 PAR.Transaction_Weight = PAR.Wgt_Not_Used_USR - PAR.Not_Used_Wgt;

 EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER('NU');
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  {
   //?USER: Processing if Data record not found

   // PAR.Yld Transaction Seq = CON.1
   PAR.Yld_Transaction_Seq = 1;

   //?USER: Process Data record

   // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
   PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // IF PAR.Partial Produced Wgt NE PAR.Wgt Produced USR
 IF PAR.Partial_Produced_Wgt <> PAR.Wgt_Produced_USR;

 // PAR.Transaction Weight = PAR.Wgt Produced USR - PAR.Partial Produced Wgt
 PAR.Transaction_Weight = PAR.Wgt_Produced_USR - PAR.Partial_Produced_Wgt;

 EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER('PP');
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  {
   //?USER: Processing if Data record not found

   // PAR.Yld Transaction Seq = CON.1
   PAR.Yld_Transaction_Seq = 1;

   //?USER: Process Data record

   // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
   PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Chg WIP Recncle Data  CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1665507;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Yld_Inv_Balance_Type);
 PARAMETER(PAR.Wgt_Produced_USR);
 PARAMETER(PAR.Wgt_Begin_Inv_USR);
 PARAMETER(PAR.Wgt_Not_Used_USR);
 PARAMETER(PAR.Text_USR_40);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// LCL.Change Code = CND.Yes
LCL.Change_Code = 'Y';

ENDIF;

//?USER: Final processing (Pre-confirm)

CASE;

// IF LCL.Change Code is Yes
IF LCL.Change_Code = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

//?Update Daily Line Header fields from Detail worksheet, if app. 4/14/04
CASE;

// IF PAR.Department Code is Loin Boning
IF PAR.Department_Code = 'LOINS';

// AND PAR.Production Line Code is Boning
AND PAR.Production_Line_Code = 'BONING';

EXECUTE FUNCTION(Rtv to Upd Dly Ln Hdr RT) TYPE(RTVOBJ) FILE(PPAICPP)           AC1687792;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.YDLD Zone Sts is Bone Less Zones
 IF DB1.YDLD_Zone_Sts = '3'/'4'/'5'/'6';

 // PAR.Bone Ls Zone Start Wgt = PAR.Bone Ls Zone Start Wgt + DB1.YDLD Weight
 PAR.Bone_Ls_Zone_Start_Wgt = PAR.Bone_Ls_Zone_Start_Wgt + DB1.YDLD_Weight;

 // PAR.Bone Ls Zone Piece Count = PAR.Bone Ls Zone Piece Count + DB1.YDLD Pieces
 PAR.Bone_Ls_Zone_Piece_Count = PAR.Bone_Ls_Zone_Piece_Count + DB1.YDLD_Pieces;

 // IF DB1.YDLD Zone Sts is Bone In Zones
 IF DB1.YDLD_Zone_Sts = '1'/'2';

 // WRK.Weight Prod 1 USR = WRK.Weight Prod 1 USR + DB1.YDLD Weight
 WRK.Weight_Prod_1_USR = WRK.Weight_Prod_1_USR + DB1.YDLD_Weight;

 // WRK.Pieces Prod 1 USR = WRK.Pieces Prod 1 USR + DB1.YDLD Pieces
 WRK.Pieces_Prod_1_USR = WRK.Pieces_Prod_1_USR + DB1.YDLD_Pieces;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Pieces Prod 1 USR is GT Zero
 IF WRK.Pieces_Prod_1_USR > *ZERO;

 // PAR.Bone In Zone Avg Loin Wgt = WRK.Weight Prod 1 USR / WRK.Pieces Prod 1 USR *Rounded
 PAR.Bone_In_Zone_Avg_Loin_Wgt = WRK.Weight_Prod_1_USR / WRK.Pieces_Prod_1_USR 'H';

 ENDIF;

 CASE;

 // IF PAR.Bone Ls Zone Piece Count is GT Zero
 IF PAR.Bone_Ls_Zone_Piece_Count > *ZERO;

 //?Finished Pieces = sum (pieces for non-credit items)
 EXECUTE FUNCTION(Rtv Finish Pce Count  RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1687844;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Conv_Finished_Pc_Count);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?SEL:  Non Credit Items
  CASE;

  // IF DB1.Credit Item Status is Not Yes
  IF DB1.Credit_Item_Status = *BLANK/'N';

  // PAR.Conv: Finished Pc Count = PAR.Conv: Finished Pc Count + DB1.Yld Transaction Pieces
  PAR.Conv_Finished_Pc_Count = PAR.Conv_Finished_Pc_Count + DB1.Yld_Transaction_Pieces;

  ENDIF;

 }

 //?06/10/04 Adjust for Parial Combo pieces (8/17/04 non credit items)
 EXECUTE FUNCTION(Rtv Partial Tots      RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1697620;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Pieces_Adjusted);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?8/17/04 Dont do for Credit Items
  CASE;

  // IF DB1.Credit Item Status is Not Yes
  IF DB1.Credit_Item_Status = *BLANK/'N';

  CASE;

  // IF DB1.Yld Inv Balance Type is Finished Good
  IF DB1.Yld_Inv_Balance_Type = 'FG';

  // OR DB1.Yld Inv Balance Type is Partial
  OR DB1.Yld_Inv_Balance_Type = 'PT';

  // OR DB1.Yld Inv Balance Type is WIP Reject
  OR DB1.Yld_Inv_Balance_Type = 'RJ';

  //?FG
  CASE;

  // IF DB1.Yld Inv Balance Type is Finished Good
  IF DB1.Yld_Inv_Balance_Type = 'FG';

  //?Reduce by delete pend wgt so reverse the sign
  // WRK.Wgt Ending Inv USR = CON.*ZERO - DB1.Delete Pending Wgt
  WRK.Wgt_Ending_Inv_USR = 0 - DB1.Delete_Pending_Wgt;

  ENDIF;

  //?11/29/04 PKD Should not get credit for Beginning Inv that is
  //?             not used.
  //?11/30/04 PKD Added Delete Pending to the calculation.
  //?Partial
  CASE;

  // IF DB1.Yld Inv Balance Type is Partial
  IF DB1.Yld_Inv_Balance_Type = 'PT';

  // WRK.Wgt Ending Inv USR = DB1.Partial Produced Wgt - DB1.Delete Pending Wgt
  WRK.Wgt_Ending_Inv_USR = DB1.Partial_Produced_Wgt - DB1.Delete_Pending_Wgt;

  ENDIF;

  //?11/09/04 PKD Should not get credit for used rejected wip when
  //?             calculating Finished Bone Less pieces.
  //?Reject
  CASE;

  // IF DB1.Yld Inv Balance Type is WIP Reject
  IF DB1.Yld_Inv_Balance_Type = 'RJ';

  // WRK.Wgt Ending Inv USR = CON.*ZERO - DB1.Delete Pending Wgt
  WRK.Wgt_Ending_Inv_USR = 0 - DB1.Delete_Pending_Wgt;

  ENDIF;

  EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.Weight Rate 1 = WRK.Wgt Ending Inv USR / WRK.Unit Weight *
  WRK.Unused_Weight_Rate_1 = WRK.Wgt_Ending_Inv_USR / WRK.Unit_Weight;

  // Pieces Adjusted
  WRK.Pieces_Adjusted = ( WRK.Unused_Weight_Rate_1 * WRK.Pieces_Per_Bag )
  * WRK.Bags_Per_Unit;

  // PAR.Pieces Adjusted = PAR.Pieces Adjusted + WRK.Pieces Adjusted
  PAR.Pieces_Adjusted = PAR.Pieces_Adjusted + WRK.Pieces_Adjusted;

  ENDIF;

  ENDIF;

 }

 // PAR.Conv: Finished Pc Count = PAR.Conv: Finished Pc Count + LCL.Pieces Adjusted
 PAR.Conv_Finished_Pc_Count = PAR.Conv_Finished_Pc_Count + LCL.Pieces_Adjusted;

 //?Loins returned from Cut= finished pieces - zones 3-6 pieces
 // PAR.Loins Returned From Cut = PAR.Conv: Finished Pc Count - PAR.Bone Ls Zone Piece Count
 PAR.Loins_Returned_From_Cut = PAR.Conv_Finished_Pc_Count - PAR.Bone_Ls_Zone_Piece_Count;

 //?Total Start weight Loins Returned from cut = avg loin wgt * loins rtrnd
 // PAR.Start Wgt Returned f/Cut = PAR.Bone In Zone Avg Loin Wgt * PAR.Loins Returned From Cut *
 PAR.Start_Wgt_Returned_f_Cut = PAR.Bone_In_Zone_Avg_Loin_Wgt
 * PAR.Loins_Returned_From_Cut;

 //?Tot Start weight= (SW Loins Returned from cut + SW Bone Ls ) * 1.02
 // Compute: Start Wgt
 PAR.Start_Weight = PAR.Bone_Ls_Zone_Start_Wgt + PAR.Start_Wgt_Returned_f_Cut;

 //?02/22/05 PKD Do not add 1.02
 //?Hogs Cut = CUT dept head cut
 EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
 PARAMETER(DB1.Company_Number);
 PARAMETER('CUT');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Hogs_Cut);
 PARAMETER(NLL.Cold_Weight);
 PARAMETER(NLL.Avg_Cold_Weight);
 PARAMETER(NLL.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Chg Worksheet Fld RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688092;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 PARAMETER(PAR.Hogs_Cut);
 PARAMETER(PAR.Bone_In_Zone_Avg_Loin_Wgt);
 PARAMETER(PAR.Bone_Ls_Zone_Start_Wgt);
 PARAMETER(PAR.Bone_Ls_Zone_Piece_Count);
 PARAMETER(PAR.Conv_Finished_Pc_Count);
 PARAMETER(PAR.Loins_Returned_From_Cut);
 PARAMETER(PAR.Start_Wgt_Returned_f_Cut);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Daily Line Header CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1664740;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER(DB1.Start_Pieces);
  PARAMETER(DB1.Ending_Weight);
  PARAMETER(DB1.Converting_Start_Weight);
  PARAMETER(DB1.Converting_End_Weight);
  PARAMETER(DB1.Pct_Pieces_Converted);
  PARAMETER(DB1.Total_Line_Weight);
  PARAMETER(DB1.Production_Standard_Yld);
  PARAMETER(DB1.Actual_Yield);
  PARAMETER(DB1.Yield_Variance);
  PARAMETER(DB1.Weight_Variance);
  PARAMETER(DB1.YDL_Comment);
  PARAMETER(DB1.YDL_Post_Status);
  PARAMETER(DB1.YDL_Process_Status);
  PARAMETER(PAR.Hogs_Cut);
  PARAMETER(PAR.Bone_In_Zone_Avg_Loin_Wgt);
  PARAMETER(PAR.Bone_Ls_Zone_Start_Wgt);
  PARAMETER(PAR.Bone_Ls_Zone_Piece_Count);
  PARAMETER(PAR.Conv_Finished_Pc_Count);
  PARAMETER(PAR.Loins_Returned_From_Cut);
  PARAMETER(PAR.Start_Wgt_Returned_f_Cut);
  PARAMETER(DB1.YDLH_Unused_Wgt);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?Upd Start Wt for Cut Biloin Loincnv with Loins Boning SW
 EXECUTE FUNCTION(Rtv Upd Comp Start Wt RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1684735;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Start Weight      RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669973;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Yld_Component_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Start_Weight);
  PARAMETER('AC');
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.PLYC Type EQ DB1.PLYC Type
   IF PAR.PLYC_Type = DB1.PLYC_Type;

   EXECUTE FUNCTION(Chg Yld Daily Wgt     RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1669642;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(DB1.Yld_Component_Code);
   PARAMETER(PAR.YDL_Yld_Comp_Weight);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(Crt Yld Daily Yld Cmp CR) TYPE(CRTOBJ) FILE(POC0CPP)           AC1669587;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Production_Line_Code);
    PARAMETER(PAR.Production_Date);
    PARAMETER(PAR.Production_Shift);
    PARAMETER(PAR.Yld_Component_Code);
    PARAMETER(PAR.YDL_Yld_Comp_Weight);
    PARAMETER(PAR.YDL_Yld_Mix_Percent);
    PARAMETER(PAR.YDL_Yld_Standard_Pct);
    PARAMETER(PAR.YDL_Yld_Weight_Diff);
    PARAMETER(WRK.YDL_Component_Group);
    PARAMETER(WRK.YDL_Unused_Sts_1);
    PARAMETER(WRK.YDL_Unused_Sts_2);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?USER: Process Data record

    EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Yld_Component_Code);
    PARAMETER(WRK.PLYC_Type);
    PARAMETER(LCL.PLYC_Percent_of_Weight);
    PARAMETER(WRK.PLYC_Comment);
    PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
    PARAMETER(WRK.Type_Inc_Exc_Sts);
    PARAMETER(WRK.Item_Structure_Type_Code);
    PARAMETER(WRK.Group_Inc_Exc_Sts);
    PARAMETER(WRK.Item_Structure_Group_Code);
    PARAMETER(WRK.Class_Inc_Exc_Sts);
    PARAMETER(WRK.Item_Structure_Class_Code);
    PARAMETER(WRK.YC_Required_Sts);
    PARAMETER(WRK.YC_Component_Group);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.PLYC Percent of Weight is Greater than zero
    IF LCL.PLYC_Percent_of_Weight > *ZERO;

    // LCL.YDL Yld Comp Weight
    LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * ( LCL.PLYC_Percent_of_Weight / 100
    'H' ) 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight
    LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight;

    ENDIF;

    EXECUTE FUNCTION(Chg Yld Daily Wgt     CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1669643;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Department_Code);
    PARAMETER(DB1.Production_Line_Code);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.Production_Shift);
    PARAMETER(DB1.Yld_Component_Code);
    PARAMETER(LCL.YDL_Yld_Comp_Weight);
    PARAMETER(DB1.YDL_Component_Group);
    PARAMETER(DB1.YDL_Unused_Sts_1);
    PARAMETER(DB1.YDL_Unused_Sts_2);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   ENDIF;

  }

 }

 ENDIF;

}


ENDIF;

// PAR.Yld Program USR = CND.Yield Calculation
PAR.Yld_Program_USR = 'YC';

RETURN;

ENDIF;

CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

// PAR.Yld Program USR = CND.Production Review
PAR.Yld_Program_USR = 'PR';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

