      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF4120
      * TITLE:       Specify Claims Adjustments Listing Options
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     04/05/05
      *
      * FUNCTION: Allows user to enter listing options and submit job.
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/20/06  LeAnne Fedor
      *           Alice wanted F17-Print Options on this pop-up window.
      *           So, we added F17-Print Options to this pop-up window. And,
      *           we added 'print option' parms to the call to this program so
      *           we could capture/return the pop-up print options to the
      *           calling program--which does the actual submission.
      *
      * 03/23/07  LeAnne Fedor
      *           Users now want to be able to Download report data as a spreadsheet.
      *           Added this functionality.
      *
      * 05/07/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 01/06/11  LeAnne Ramsey
      *           Added an Include/Exclude/Only print flag for Affiliated Sales Claims.
      *
      * 01/26/18  Danny Nguyen  (R12011A-Weekly Product Revenue)
      *           Added 440 as a valid company.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd4120   cf   e             workstn infds(iofeed)
      *
      *
     Ftfp096    if   e           k disk
      *    Data source codes
      *
      *
     Fombyrel0  if   e           k disk
      *    Item default
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxynfl          s              1
      *
     D xxalphprcd      s              7
     D xxprcd          s                   like(d1prcd)
     D xxprds          s             30
      *
     D xxdscd          s                   like(dsdscd)
     D xxdsds          s                   like(dsdsds)
      *
     D xxfcymd         s              8  0
     D xxtcymd         s              8  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
      * Do not use the first 38 LDA positions. We have to generate this from the Revenue
      * Close function as well as on-demand from this program. So, the LDAs have to
      * match up.
      *
     D  ldfmdy                39     44  0
     D  ldtmdy                45     50  0
     D  ldfcymd               52     59  0
     D  ldtcymd               60     67  0
      *
     D  ldcono                68     70  0
     D  ldclno                71     77  0
     D  ldmmno                78     84  0
     D  ldprcd                85     91  0
     D  ldmmty                92     93
      *
     D  ldclorno              94    100  0
     D  ldrpfl               101    101
     D  ldrpdept             102    104
     D  ldrscd               105    107
     D  lddscd               108    108
     D  ldieofl              109    109
      *
     D  ldrpt                299    299
     D  lddemand             300    300
     D  ldrdfl               301    301
     D  ldemail              302    351
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   move      scrn1         routne
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf4120ec
     C                   write     tf4120k1
     C                   exfmt     tf4120r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   endif
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
      * Validate:
      *  1) Report/download
      *  2) E-mail address
      *  3) Report sort sequence
      *  4) From week-ending date
      *  5) To week-ending date
      *  6) Data source code
      *  7) Company number
      *  8) Claim number
      *  9) Memo number
      * 10) Claim order number
      * 11) Product code
      *
     C     $edit1        begsr
      *
     C                   exsr      $rdfl
     C                   exsr      $email
     C                   exsr      $ieofl
     C                   exsr      $rpt
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $dscd
     C                   exsr      $cono
     C                   exsr      $clno
     C                   exsr      $mmno
     C                   exsr      $clorno
     C                   exsr      $prcd
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Data Source code
      *----------------------------------------------------------------
      *
     C     $dscd         begsr
      *
     C                   select
     C                   when      d1dscd = *blank
     C                   other
      *
     C     d1dscd        chain     tfp096                             92
     C                   if        *in92 = *on                                  If bad
     C                   seton                                        42
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08066'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1dscd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If bad
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Report/Download
      *---------------------------------------------------------------
      *
     C     $rdfl         begsr
      *
     C                   select
     C                   when      d1rdfl = 'R'
     C                   when      d1rdfl = 'D'
     C                   other
      *
     C                   seton                                        47
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00449'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Email address
      *----------------------------------------------------------------
      *
     C     $email        begsr
      *
     C                   if        d1rdfl = 'D' and d1email = *blank
     C                   seton                                        48
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Affiliated Sales Claims
      *--------------- ------------------------------------------------
      * Valid actions:
      *         I = Include
      *         E = Exclude from the Listing
      *         O = Only print these on the Listing
      *
     C     $ieofl        begsr
      *
     C                   if        d1ieofl <> 'I' and
     C                             d1ieofl <> 'E' and
     C                             d1ieofl <> 'O'
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08144'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Report Sort Sequence
      *----------------------------------------------------------------
      *
     C     $rpt          begsr
      *
     C                   if        d1rpt <> 'P' and d1rpt <> 'C'
     C                   seton                                        41
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08064'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate From Week-Ending Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             xxfcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1tmdy <> 0 and d1fmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09088'     mgid(e)
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     xxfcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate To Week-ending Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             xxtcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1fmdy <> 0 and d1tmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09089'     mgid(e)
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     xxtcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in30 = *off and
     C                             *in31 = *off and
     C                             xxtcymd < xxfcymd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Company Number
      *---------------------------------------------------------------
      *
     C     $cono         begsr
      *
     C                   select
     C                   when      d1cono = 0
      *
     C                   when      d1cono < 0
     c                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1cono <> 360 and d1cono <> 960
12011C                             and d1cono <> 440
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08054'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Claim Number
      *---------------------------------------------------------------
      *
     C     $clno         begsr
      *
     C                   select
     C                   when      d1clno = 0
      *
     C                   when      d1clno < 0
     c                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Memo Number
      *---------------------------------------------------------------
      *
     C     $mmno         begsr
      *
     C                   select
     C                   when      d1mmno = 0
      *
     C                   when      d1mmno < 0
     c                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Claim Order Number
      *---------------------------------------------------------------
      *
     C     $clorno       begsr
      *
     C                   select
     C                   when      d1clorno = 0
      *
     C                   when      d1clorno < 0
     c                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Product
      *----------------------------------------------------------------
      *
     C     $prcd         begsr
      *
     C                   select
     C                   when      d1prcd = 0
      *
     C                   when      d1prcd < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1prcd        chain     ombyrel0                           92
     C                   if        *in92 = *on                                  If bad
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08006'     mgid(e)
     C                   clear                   mgw
     C                   move      d1prcd        xxalphprcd
     C                   movea     xxalphprcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If bad
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Populate LDA fields.
      *
     C                   move      d1rdfl        ldrdfl
     C                   move      d1email       ldemail
      *
     C                   move      d1rpt         ldrpt
     C                   z-add     d1fmdy        ldfmdy
     C                   z-add     xxfcymd       ldfcymd
     C                   z-add     d1tmdy        ldtmdy
     C                   z-add     xxtcymd       ldtcymd
      *
     C                   z-add     d1cono        ldcono
     C                   z-add     d1clno        ldclno
     C                   z-add     d1clorno      ldclorno
      *
     C                   move      d1mmty        ldmmty
     C                   z-add     d1mmno        ldmmno
     C                   move      d1prcd        ldprcd
     C                   move      d1rpfl        ldrpfl
     C                   move      d1rpdept      ldrpdept
     C                   move      d1rscd        ldrscd
     C                   move      d1dscd        lddscd
     C                   move      d1ieofl       ldieofl
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Data source
     C                   select
     C                   when      fld = 'D1DSCD'
     C                   call      'TF517'
     C                   parm      *blank        xxdscd
     C                   parm      *blank        xxdsds
     C                   seton                                        52
     C                   if        xxdscd <> *blank
     C                   movel     xxdscd        d1dscd
     C                   endif
      *
      * Product
     C                   when      fld = 'D1PRCD'
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
     C                   seton                                        56
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        d1prcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    d1rpt
     C                   parm                    d1fmdy
     C                   parm                    xxfcymd
     C                   parm                    d1tmdy
     C                   parm                    xxtcymd
     C                   parm                    d1cono
     C                   parm                    d1clno
     C                   parm                    xxynfl
     C                   parm                    d1clorno
     C                   parm                    d1mmty
     C                   parm                    d1mmno
     C                   parm                    d1prcd
     C                   parm                    d1rpfl
     C                   parm                    d1rpdept
     C                   parm                    d1rscd
     C                   parm                    d1dscd
     C                   parm                    rtncd
      *
      * On the Work With we use a Yes/No Flag to select/omit Claims from Affiliated Sales
      * Customers. For this screen, we want to map that to our Include/Exclude/Only print flag.
      * So:
      *       Incoming XXYNFL Value        Screen Value
      *             Yes                     Only
      *             No                      Exclude
      *             Blank                   Include
      *
     C                   select
     C                   when      xxynfl = yes
     C                   move      'O'           d1ieofl
      *
     C                   when      xxynfl = no
     C                   move      'E'           d1ieofl
     C                   other
      *
     C                   move      'I'           d1ieofl
     C                   endsl
      *
      * Key lists
      *   None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldtcymd
     C                   z-add     0             ldcono
     C                   z-add     0             ldclno
     C                   z-add     0             ldmmno
     C                   z-add     0             ldprcd
     C                   z-add     0             ldclorno
     C                   out       lda
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(TF4120CL)) JOB(CLAIMADRPT) JOBQ(*JOBD)
