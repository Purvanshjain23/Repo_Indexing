// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCKPFR
// ?Date: 14.08.2025 Time: 12:05:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Call program Rtv Field Security    XF.
CALL PROGRAM(Rtv Field Security    XF) ('PDL1XFR');
PARAMETER(WRK.Display_Flag);

EXECUTE FUNCTION(RTV Info for InvComb PrRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1802129;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Ensure that there is an invoice date
CASE;

// IF PAR.Invoice Date EQ WRK.ZERO
IF PAR.Invoice_Date = WRK.ZERO;

// PAR.Invoice Date = JOB.*Job date
PAR.Invoice_Date = JOB.*Job_date;

ENDIF;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

EXECUTE FUNCTION(RTV Last Ord Seqs notX RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1502729;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?***** Change Log and Comments
//?EL 05/16/23 WI572 Adding Prop 12 logic
//?RMC 12/22/15 E4256 Chg Country Of Origin Label comment under col hdngs
//?FROM: All covered commodities as defined for mandatory country-of-origin
//?   are born, raised and harvested in USA.
//?  TO: The pork item listed below are Product of USA.       (per rob elder)
//?RMC 06/11/13 E2630 Changed COOL Label comment under col hdngs
//?** 03/29/2010 LJB P000198    Fax/Email are now stored in the
//?** Cust Distribution Entry file. Rtv from there. Fax flag is
//?** no longer being used.
//?** Retrieve the Field Security display flag. Do not print selected
//?** fields if it is "NO". In this case, do not print the amount
//?** fields.                                       2/22/2006 LJB
//?RMC 9/14/06 chg zip from 66201 to 66202 per Tim W
//?JRB 06/01/07 DLY029 Replaced Produced By:  Triumph or Seaboard.
//? with Rtv Produced by co    RT - Company Defaults Internal in
//?RMC 09/03/08 E00215 Added Country Of Origin Label comment under col hdngs
//?E4057 JJH 05/06/15 - Price Credit Memo Fixes
//?- Recompiled because $/Quantity by qty shipped QR
//?  removed from Cases LST of Accrual Rate Type.
//?- Recompiled because $/Lb by Weight Billed WR
//?  removed from Pounds LST of Accrual Rate Type.
//?USER: Record selection processing

CASE;

// IF DB1.Order Value Total is equal to zero
IF DB1.Order_Value_Total = *ZERO;

// AND DB1.Order Weight Total is Equal to zero
AND DB1.Order_Weight_Total = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF DB1.Billing Activity Type is Invoice or Debit Memo
IF DB1.Billing_Activity_Type = '3'/'1';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// LCL.Ship To State Code = DB1.Ship To State Code
LCL.Ship_To_State_Code = DB1.Ship_To_State_Code;

//?USER: Process top of page

//?Ensure that there is an invoice date
CASE;

// IF TOP.Invoice Date EQ WRK.ZERO
IF TOP_Invoice_Date = WRK.ZERO;

// TOP.Invoice Date = JOB.*Job date
TOP_Invoice_Date = JOB.*Job_date;

ENDIF;

//?** Retrieve fax/email from new Cust Distr Entry file   P000198
EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER('AR-INVOICE');
PARAMETER(*ZERO);
PARAMETER(WRK.CDE_Name);
PARAMETER(WRK.CDE_Destination);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Distribution_Code);
 PARAMETER(PAR.CDE_Sequence_Number);
 PARAMETER(PAR.CDE_Name);
 PARAMETER(PAR.CDE_Destination);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Return 1st active record with a fax number
  CASE;

  // IF DB1.CDE Destination Type is Fax
  IF DB1.CDE_Destination_Type = 'F';

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

  ENDIF;

 }

}


//?** Print 1st fax number from Cust Distr Entry file    P000198
CASE;

// IF WRK.CDE Destination is Blanks
IF WRK.CDE_Destination = *BLANK;

// TOP.Credit Contact Fax Number = CND.Equal to blanks
TOP_Credit_Contact_Fax_Number = *BLANK;

// TOP.Fax Invoice Contact Name = CND.Blank
TOP_Fax_Invoice_Contact_Name = *BLANK;

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?** Print 1st fax number from Cust Distr Entry file    P000198
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Credit Contact Fax Number = WRK.CDE Destination
TOP_Credit_Contact_Fax_Number = WRK.CDE_Destination;

// TOP.Fax Invoice Contact Name = WRK.CDE Name
TOP_Fax_Invoice_Contact_Name = WRK.CDE_Name;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

//?Print Attention
CASE;

// IF LCL.Fax Invoice Contact Name is Blank
IF LCL.Fax_Invoice_Contact_Name = *BLANK;

// LCL.Print Yes/No          USR = CND.No
LCL.Print_Yes_No_USR = 'N';

//?Print Attention
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Print Yes/No          USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

ENDIF;

//?Calculate Due Date.
CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

//?**** CR/DR Memos use the Invoice Date to calc the Due Date. ****
// Call program CLC Terms Values       XF.
CALL PROGRAM(CLC Terms Values       XF) ('CAC9XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Terms_Code);
PARAMETER(WRK.Discount_Due_Date);
PARAMETER(TOP_Due_Date);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(WRK.Discount_Amount);

//?Calculate Due Date.
// IF *OTHERWISE
IF *OTHERWISE;

//?**** All others use the Actual Ship Date to calc the Due Date. ****
// Call program CLC Terms Values       XF.
CALL PROGRAM(CLC Terms Values       XF) ('CAC9XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Terms_Code);
PARAMETER(WRK.Discount_Due_Date);
PARAMETER(TOP_Due_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(WRK.Discount_Amount);

ENDIF;

//?Ensure due date filled
CASE;

// IF TOP.Due Date EQ WRK.ZERO
IF TOP_Due_Date = WRK.ZERO;

// TOP.Due Date = PAR.Invoice Date
TOP_Due_Date = PAR.Invoice_Date;

ENDIF;

// TOP.A/R Customer Number = PAR.A/R Customer Number
TOP_AR_Customer_Number = PAR.AR_Customer_Number;

// TOP.Order Number = PAR.Order Number
TOP_Order_Number = PAR.Order_Number;

// TOP.Load ID = PAR.Load ID
TOP_Load_ID = PAR.Load_ID;

// TOP.Sales Route Code = PAR.Sales Route Code
TOP_Sales_Route_Code = PAR.Sales_Route_Code;

// TOP.Order Date = PAR.Order Date
TOP_Order_Date = PAR.Order_Date;

// TOP.Actual Shipped Date = PAR.Actual Shipped Date
TOP_Actual_Shipped_Date = PAR.Actual_Shipped_Date;

// TOP.Invoice Number = PAR.Invoice Number
TOP_Invoice_Number = PAR.Invoice_Number;

// TOP.Invoice Date = PAR.Invoice Date
TOP_Invoice_Date = PAR.Invoice_Date;

// TOP.Customer Purchase Order # = PAR.Customer Purchase Order #
TOP_Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(PAR.Carrier_Code);
PARAMETER(WRK.Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.USR Carrier Short = WRK.Name
TOP_USR_Carrier_Short = WRK.Name;

EXECUTE FUNCTION(RTV Retrieve Terms     RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1255765;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Terms_Code);
PARAMETER(TOP_USR_Terms_Desc_Short);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?4/17/02 Use Bill to Remittance Flag, instead of Ship To
EXECUTE FUNCTION(RTV Alt Remittance Flg RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348485;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Alt_Remittance_Flag);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Default chicago   5/29/03
CASE;

// IF PAR.Alt Remittance Flag EQ WRK.Blank 6 USR
IF PAR.Alt_Remittance_Flag = WRK.Blank_6_USR;

// PAR.Alt Remittance Flag = CND.Chicago Lockbox
PAR.Alt_Remittance_Flag = 2;

ENDIF;

EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(PAR.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(PAR.Country_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(TOP_USR_Compressed_Address_1);
PARAMETER(TOP_USR_Compressed_Address_2);
PARAMETER(TOP_USR_Compressed_Address_3);
PARAMETER(TOP_USR_Compressed_Address_4);
PARAMETER(TOP_USR_Compressed_Address_5);
PARAMETER(TOP_USR_Compressed_Address_16);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


EXECUTE FUNCTION(RTV Country/ItemRefSts RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1631724;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(PAR.Country_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(TOP_USR_Compressed_Address_6);
PARAMETER(TOP_USR_Compressed_Address_7);
PARAMETER(TOP_USR_Compressed_Address_8);
PARAMETER(TOP_USR_Compressed_Address_9);
PARAMETER(TOP_USR_Compressed_Address_10);
PARAMETER(TOP_USR_Compressed_Address_17);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


//?1/11/06 slm Added remit name
EXECUTE FUNCTION(Rtv A/R Remittance    RT) TYPE(RTVOBJ) FILE(POA7REP)           AC1621765;
PARAMETER(PAR.Alt_Remittance_Flag);
PARAMETER(PAR.Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(PAR.Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
PARAMETER(*BLANK);
PARAMETER(TOP_USR_Compressed_Address_11);
PARAMETER(TOP_USR_Compressed_Address_12);
PARAMETER(TOP_USR_Compressed_Address_13);
PARAMETER(TOP_USR_Compressed_Address_14);
PARAMETER(TOP_USR_Compressed_Address_15);
PARAMETER(WRK.USR_Country_Description);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


//?quit if weight & value are zeros
CASE;

// IF PAR.Order Value Total is equal to zero
IF PAR.Order_Value_Total = *ZERO;

// AND PAR.Order Weight Total is Equal to zero
AND PAR.Order_Weight_Total = *ZERO;

QUIT;

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Actual Shipped Date header format

// SUPPRESSED PRINT Customer Purchase Order # header format

// SUPPRESSED PRINT Ship To Customer header format

CASE;

IF NEW Order_Number;
//?set attr. so fax number prints on page 1
// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

//?Get the accounting company
EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Produced by co    RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826122;
PARAMETER(LCL.Accounting_Company);
PARAMETER(CUR.Produced_By_Sts_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.CDI Produced by co = DB1.CDI Produced by co
 PAR.CDI_Produced_by_co = DB1.CDI_Produced_by_co;

}


// Print Order Number header format
PRINT Order Number header format;

ENDIF;

//?USER: On print of detail format

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Order Value Total = WRK.Order Value Total + DB1.Order Value Total
WRK.Order_Value_Total = WRK.Order_Value_Total + DB1.Order_Value_Total;

EXECUTE FUNCTION(RTV Last Ord Seqs notX RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1502729;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

MOVE *ALL (To: CUR From: DB1);

//?set attr. so fax number only prints on page 1
// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Invc/Memo Hdr Comm PO
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order Comment     RT) TYPE(RTVOBJ) FILE(OPCOCPP)           AC1804319;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('IN');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

QUIT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(PRT Inv/MemoHdrComm    PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(*ZERO);
PARAMETER('IN');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Embedded PRTOBJ : PRT Invoice Detail-New PO
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Inv/MemoDtl   6LPI PO) TYPE(PRTOBJ);
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Billing_Activity_Type);
PARAMETER(LCL.USR_Quantity);
PARAMETER(LCL.USR_Quantity_Shipped_102);
PARAMETER(LCL.USR_Weight);
PARAMETER(PAR.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


// WRK.USR Quantity = WRK.USR Quantity + LCL.USR Quantity
WRK.USR_Quantity = WRK.USR_Quantity + LCL.USR_Quantity;

// WRK.USR Quantity Shipped 10,2 = WRK.USR Quantity Shipped 10,2 + LCL.USR Quantity Shipped 10,2
WRK.USR_Quantity_Shipped_102 = WRK.USR_Quantity_Shipped_102                                        +
+ LCL.USR_Quantity_Shipped_102;

// WRK.USR Weight = WRK.USR Weight + LCL.USR Weight
WRK.USR_Weight = WRK.USR_Weight + LCL.USR_Weight;

//?Embedded PRTOBJ : PRT Brokers on Invoice PO
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Ship Brokerage DTl RT) TYPE(RTVOBJ) FILE(PDITCPP)          AC1804322;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

QUIT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(PRT BrkOnInvoice       PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?USER: Print required level totals

CASE;

IF NEW Order_Number;
// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

// SUPPRESSED PRINT Ship To Customer totals format

// SUPPRESSED PRINT Customer Purchase Order # totals format

// SUPPRESSED PRINT Actual Shipped Date totals format

// SUPPRESSED PRINT Accounting Company Number totals format

//?USER: On print of final totals format

// CUR.Order Value Total = WRK.Order Value Total
CUR.Order_Value_Total = WRK.Order_Value_Total;

// CUR.USR Quantity = WRK.USR Quantity
CUR.USR_Quantity = WRK.USR_Quantity;

// CUR.USR Quantity Shipped 10,2 = WRK.USR Quantity Shipped 10,2
CUR.USR_Quantity_Shipped_102 = WRK.USR_Quantity_Shipped_102;

// CUR.USR Weight = WRK.USR Weight
CUR.USR_Weight = WRK.USR_Weight;

//?07/30/09 PKD E00464-Allowance for Seaboard
EXECUTE FUNCTION(Rtv Inv Add/Alw       RT) TYPE(RTVOBJ) FILE(PMAFCPP)           AC1949041;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Job_Number_Cde);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.USR_Amount_Applied);
{
 //?USER: Initialize routine

 // PAR.USR Amount Applied = CON.*ZERO
 PAR.USR_Amount_Applied = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Inv AddOn/Allow   RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1844822;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.USR_Amount_Applied);
 {
  //?USER: Initialize routine

  // PAR.USR Amount Applied = CON.*ZERO
  PAR.USR_Amount_Applied = *ZERO;

  //?USER: Process Data record

  // PAR.USR Amount Applied = PAR.USR Amount Applied + DB1.Extended Amount
  PAR.USR_Amount_Applied = PAR.USR_Amount_Applied + DB1.Extended_Amount;

 }

 // PAR.USR Amount Applied = PAR.USR Amount Applied + LCL.USR Amount Applied
 PAR.USR_Amount_Applied = PAR.USR_Amount_Applied + LCL.USR_Amount_Applied;

}


// CUR.Order Value Total = CUR.Order Value Total + LCL.USR Amount Applied
CUR.Order_Value_Total = CUR.Order_Value_Total + LCL.USR_Amount_Applied;

//?---------------------------------------------------
EXECUTE FUNCTION(Chg WF Inv/Comb jobn   RT) TYPE(RTVOBJ) FILE(PMAFCPP)          AC1805658;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Job_Number_Cde);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Process Data record

 // LCL.Combine Invoice Printed = CND.Invoiced
 LCL.Combine_Invoice_Printed = 'Y';

 EXECUTE FUNCTION(Chg WF Invoice/Combine CH) TYPE(CHGOBJ) FILE(PMAFCPP)          AC1802009;
 PARAMETER(DB1.Job_Name_CDE);
 PARAMETER(DB1.Job_Number_Cde);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Fax_Invoice_Flag);
 PARAMETER(DB1.One_Invoice_Per_PO);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(LCL.Combine_Invoice_Printed);
 PARAMETER(DB1.WF_Inv_Comb_Billing_Type);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Bill_to_Customer_Ship_To);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


//?WI572 - Check to see which statement to print
// Call program Chk which Stmt to Prt XF.
CALL PROGRAM(Chk which Stmt to Prt XF) ('PVAAXFR');
PARAMETER(WRK.IDE_Regul_Code_ID_Saved);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.Non_Compliant_Stmt);
PARAMETER(CUR.@Text_80);

//?USER: Process after print of final totals format

RETURN;

