// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKXAPVR
// ?Date: 14.08.2025 Time: 02:50:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?S000219 JM 12/28/23   - Fix unintentional deletion of Carcass Detail &
//?                        Tattoo Ded/Add.
//?WHD86845 RMC 01/27/22 -  before updating paym parms,
//?check for the lcl.thr payment date/sts nE blanks
//?WHD86845 JBB 11/08/21 - Stop Pymt Post from executing twice daily
//?- Jerry Lehenbauer said the Payment Post executed twice for a
//?  Payment Date causing issues.  Modified Payment Processing screen
//?  to check for the current Payment Step being in a range of 6 to
//?  99999.  If Payment Step is within that range, then the Payment
//?  Post is currently running and cannot be submitted a second time.
//?WHD83659 JBB 6/01/21 - Fix to allow Repayment on previous day
//?- Found an issue where the user was unable to perform a repayment
//?  on the previous day.  Removed error check and message.
//?SDD619 JBB  6/01/21 - Repayments by Business User
//?- Found an issue when using the old version of repayments where the
//?  Payment Date and Step were cleared.  If the Payment Date/Step is
//?  not found in the Tattoo Repayment Header, then leave the values
//?  on the screen as they currently are.
//?SDD619 JBB  6/01/21 - Repayments by Business User
//?- If PP Repayment Status field 'Y', then protect Selection field
//?  so the user cannot enter a '2' to run the Payment Post.
//?  Also update the Payment Date and Step to Repayment Date.
//?E15279 JBB  8/01/19 - Do not allow Post if doing a Repayment
//?- Check the Repayment flag in the Payment Processing Parms file.
//?  If it is a 'Y', send error message that Post cannot be run.
//?E14234 JBB  2/21/19 - Repayment Enhancements Phase 2
//?- Do not allow a payment edit or payment post to run if the
//?  Repayment Status on the Payment Process Parms file is 'Y'.
//?E14281 JBB  1/08/19 - Print Pricing Errors
//?- In the validations section, if the Company checks for Pricing
//?  Errors, and the user Selection is Post (2), and the PYMTPRCERR
//?  Company Value is 'Y', then send error message and do not allow
//?  the user to select the Post Process.
//?E12610 Jbb 04/17/18 - Tattoo Balancing Errors
//?- Modified to not be an error if there are Held Overs, and the
//?  Held Over Completion Date = 0
//?E12610 JJH 02/21/18 - Tattoo Balancing Errors
//?- Add logic to determine if there are any Tattoo that is Not
//?  Balanced prior to running the Payment Edit or Payment Post.
//?- Add a Company Value to determine if the Post process should
//?  include Balance Error checking.
//?E12054 JJH 11/13/17 - Payment Edit Messages
//?- No logic changes.  Temporaily Called PKPXXFR for debugging.
//?  Reset to Submit job.
//?E9904  JBB 08/24/17 - Push Payments from 440 to 961
//?- Fixed Site ID check to not flag as an error if the Hog
//?  Classification is Resale.
//?E9904  JJH 08/09/17 - Push Payments from 440 to 961
//?- Add Execute 'CALL Pay Prd Edit' which is to be used when
//?  debugging the Payment Edit process.
//?- Normally we use the  Execute 'SBM Pay Prd Edit'
//?- Currently set back to  Execute 'SBM Pay Prd Edit'
//?E9904  JBB 07/31/17 - Push Payments from 440 to 961
//?- Read through the records to be processed and validate the
//?  the Source Code and Buy Order Type against the Source/Buy Order
//?  Type XREF file (PWAIREL0) for all Triumph Owned records.  Also,
//?  validate that every Triumph Owned record has a Site ID.
//?E7519  JJH 06/27/17 - Trucker/Producer Address
//?- Change Company to be Output only.
//?- This will force users in Production to use the proper User ID
//?  to access the proper Company to process.
//?- In TEST environment, you will have to change the User Profile
//?  Applications HPE and HPERCV for User Profile ISBGUTI.
//?- This will also insure that the Payment Date and Step is for the
//?  correct Company
//?- This will also insure that logic to test for Missing M3 Suppliers
//?  for Truckers and Producers is applied to the correct company.
//?E7519  JJH 06/26/17 - Trucker/Producer Address
//?- Only Prt Trucker Validation Error's report if there is 1 or
//?  more Trucker Error.
//?- Only Prt Pre-Chk Producer Missing Supplier report if there is
//?  1 or more Producer Errors
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?08/29/2007 FT379 Gate Security - Remove validation on IN/OUT/R
//?08/29/2007 slm see validation
// LCL.Valadate Wgt IN/OUT/R USR = CND.No
LCL.Valadate_Wgt_IN_OUT_R_USR = 'N';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEWGTVLD');
PARAMETER(LCL.Valadate_Wgt_IN_OUT_R_USR);

//?7/30/2021 JBB SDN619 - Repayment by Business User
//?Check if this is a repayment.  If it is a repayment, then the
//?Gate security check will not be performed later in the program.
EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(NLL.Pmt_Current_Payment_Date);
PARAMETER(NLL.Pmt_Current_Payment_Step);
PARAMETER(NLL.PP_Commission_Paym_Error);
PARAMETER(NLL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If this is a repayment, skip the IN/OUT/Respread check
CASE;

// IF LCL.PP Repayment Status is Yes
IF LCL.PP_Repayment_Status = 'Y';

// LCL.Valadate Wgt IN/OUT/R USR = CND.No
LCL.Valadate_Wgt_IN_OUT_R_USR = 'N';

ENDIF;

//?04/12/2018 JBB T12610 - Check for Balancing Errors Y/N
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPECHKBALE');
PARAMETER(LCL.Check_for_Balance_Errors);

// WRK.System Value Alpha    USR = LCL.System Value Alpha    USR
WRK.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR;

//?04/11/2017 slm M3 LIVE or parallel
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('M3VEND');
PARAMETER(LCL.System_Value_Alpha_USR);

// WRK.System Value Alpha    USR = LCL.System Value Alpha    USR
WRK.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR;

//? 1/09/2019 JBB E14281 - Pricing Error Report processing
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEPRCERPT');
PARAMETER(LCL.Co_Chks_for_Price_Errors);

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// Call program Rtv Dflt Cut Mtx 2 OMS XF.
CALL PROGRAM(Rtv Dflt Cut Mtx 2 OMS XF) ('PDKHXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);

// Call program Val Cutout Matrix     XF.
CALL PROGRAM(Val Cutout Matrix     XF) ('PDLGXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);
PARAMETER(WRK.Record_Found_USR);

// DTL.Producer Pymt Type Desc = CON.Daily Payment
DTL.Producer_Pymt_Type_Desc = 'Daily Payment';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.Pmt_Current_Payment_Step);
PARAMETER(DTL.PP_Commission_Paym_Error);
PARAMETER(DTL.Pmt_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Repayment flag = Y, this is a repayment
CASE;

// IF LCL.PP Repayment Status is Yes
IF LCL.PP_Repayment_Status = 'Y';

// DTL.Producer Pymt Type Desc = CON.Repayment
DTL.Producer_Pymt_Type_Desc = 'Repayment';

EXECUTE FUNCTION(Rtv Repayment Date    RT) TYPE(RTVOBJ) FILE(PWAWCPP)           AB1368734;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.TRH_Payment_Date);
PARAMETER(LCL.TRH_Payment_Step);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?rmc  added Created sts here
 CASE;

 // IF DB1.TRH Repayment Status is In Progress
 IF DB1.TRH_Repayment_Status = 'I';

 // OR DB1.TRH Repayment Status is Created
 OR DB1.TRH_Repayment_Status = 'C';

 // PAR.TRH Payment Date = DB1.TRH Payment Date
 PAR.TRH_Payment_Date = DB1.TRH_Payment_Date;

 // PAR.TRH Payment Step = DB1.TRH Payment Step
 PAR.TRH_Payment_Step = DB1.TRH_Payment_Step;

 ENDIF;

}


//?If new Repayment method is being used, update PPP with date/step
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.TRH Payment Date is Entered
IF LCL.TRH_Payment_Date <> *ZERO;

// AND LCL.TRH Payment Step NE WRK.Zero USR
AND LCL.TRH_Payment_Step <> WRK.Zero_USR;

//?check for these being 0 before updating
// Call program Chg Payment Date/Step  XF.
CALL PROGRAM(Chg Payment Date/Step  XF) ('PKXAXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.TRH_Payment_Date);
PARAMETER(LCL.TRH_Payment_Step);

ENDIF;

ENDIF;

// DTL.Payment Sel Prcssng Usr = CND.Payment Edit
DTL.Payment_Sel_Prcssng_Usr = 1;

ENDIF;

//?E7519 JJH 06/26/17 - Only print Trucker/Producer Error reports
//?  when there are errors.
//?E7519 Val Trk & also the Producer for a Missing m3 supplier
DO;

//?Trucker validated for missing M3 Supplier
//?SDN 440 - RMC 5/20/21 E1-Trucker validated for missing  TRK VND address
EXECUTE FUNCTION(Val Trucker M3/E1 Vnd RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1337695;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.PP_Trucker_Error);
{
 //?USER: Initialize routine

 //?SDN440 RMC 5/20/21  if E1 is live , validate VND
 // PAR.PP Trucker Error = CND.No Errors
 PAR.PP_Trucker_Error = 'N';

 //?get live with M3
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('M3LIVE');
 PARAMETER(WRK.Live_with_M3_USR);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('E1LIVE');
 PARAMETER(WRK.Live_with_E1);

 //?USER: Process Data record

 CASE;

 // IF DB1.BOL Kill Date LE PAR.Pmt Current Payment Date
 IF DB1.BOL_Kill_Date <= PAR.Pmt_Current_Payment_Date;

 EXECUTE FUNCTION(Rtv Trucker Vnd Add#M3RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1332333;
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(NLL.TRK_Name);
 PARAMETER(LCL.TRK_VND_Address_Number);
 PARAMETER(LCL.TRK_M3_Supplier_Id);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.Record Found
  PGM.*Return_code = 999;

 }

 //?Check for  M3
 CASE;

 // IF LCL.TRK M3 Supplier Id is Not Entered
 IF LCL.TRK_M3_Supplier_Id = *BLANK;

 // AND WRK.Live with M3   USR is Live or Parallel
 AND WRK.Live_with_M3_USR = 'P'/'Y';

 // PAR.PP Trucker Error = CND.Errors
 PAR.PP_Trucker_Error = 'E';

 ENDIF;

 //?Check E1 Vendor -- added for SDN440
 CASE;

 // IF LCL.TRK VND Address Number is Zero
 IF LCL.TRK_VND_Address_Number = *ZERO;

 // AND WRK.Live with E1 is Yes
 AND WRK.Live_with_E1 = 'Y';

 // PAR.PP Trucker Error = CND.Errors
 PAR.PP_Trucker_Error = 'E';

 ENDIF;

 ENDIF;

}


CASE;

// IF DTL.PP Trucker Error is Errors
IF DTL.PP_Trucker_Error = 'E';

// Call program Prt Trucker PaymentVal CL.
CALL PROGRAM(Prt Trucker PaymentVal CL) ('PWBKUPC');
PARAMETER('QPRINT2');
PARAMETER(*YES);
PARAMETER(*YES);
PARAMETER(01);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.PP_Trucker_Error);

ENDIF;

//?Producer validated for missing M3 Supplier
//?SDN 440 - RMC 5/20/21 Producer validated for missing PD VND address
EXECUTE FUNCTION(Val Producer M3/E1 Vnd RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1337685;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.PP_Producer_Error);
{
 //?USER: Initialize routine

 //?Initialize Errros
 // PAR.PP Producer Error = CND.No Errors
 PAR.PP_Producer_Error = 'N';

 //?USER: Process Data record

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('M3LIVE');
 PARAMETER(LCL.Live_with_M3_USR);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('E1LIVE');
 PARAMETER(LCL.Live_with_E1);

 //?Get Producer M3 Supplier ID
 EXECUTE FUNCTION(Rtv Prdcr Vendor#,M3  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1330021;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.PD_VND_Address_Number);
 PARAMETER(LCL.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(PAR.M3_Supplier_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 CASE;

 // IF LCL.M3 Supplier ID is Not found
 IF LCL.M3_Supplier_ID = *BLANK;

 // AND LCL.Live with M3   USR is Live or Parallel
 AND LCL.Live_with_M3_USR = 'P'/'Y';

 // PAR.PP Producer Error = CND.Errors
 PAR.PP_Producer_Error = 'E';

 ENDIF;

 //?SDN 440 -- added for E1
 CASE;

 // IF LCL.Live with E1 is Yes
 IF LCL.Live_with_E1 = 'Y';

 // AND LCL.PD VND Address Number is Zero
 AND LCL.PD_VND_Address_Number = *ZERO;

 // PAR.PP Producer Error = CND.Errors
 PAR.PP_Producer_Error = 'E';

 ENDIF;

}


CASE;

// IF DTL.PP Producer Error is Errors
IF DTL.PP_Producer_Error = 'E';

// Call program Prt Pre-Chk EditPrdM3EdPF.
CALL PROGRAM(Prt Pre-Chk EditPrdM3EdPF) ('PWCQPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.Pmt_Payment_Error);
PARAMETER(DTL.PP_Producer_Error);

ENDIF;

ENDDO;

//?E9904 JBB 07/31/17 - Only print Triumph Owned Error reports when
//?  there are errors.
//?E9904 Validate Src/BO Type and Site ID's for TO records. Company 440 only
DO;

//?Currently, this check is made for Company 440 only
CASE;

// IF DTL.CC Company Number is Sioux City
IF DTL.CC_Company_Number = 440;

// DTL.PP Triumph Owned Error = CND.No Errors
DTL.PP_Triumph_Owned_Error = 'N';

//?Tatto Header validated for invalid Source/Buy Order Type
EXECUTE FUNCTION(Val Source/BO Type    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1339344;
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.PP_Source_BO_Type_Error);
{
 //?USER: Initialize routine

 // PAR.PP Source/BO Type Error = CND.No Errors
 PAR.PP_Source_BO_Type_Error = 'N';

 //?Currently, only process for Sioux City
 CASE;

 // IF NOT PAR.BOH Company Number is Sioux City
 IF ! PAR.BOH_Company_Number = 440;

 QUIT;

 ENDIF;

 //?USER: Process Data record

 //?Validate for Sioux City (440) only
 CASE;

 // IF DB1.BOH Company Number is Sioux City
 IF DB1.BOH_Company_Number = 440;

 //?If Producer Source is Triumph Owned (TO)
 CASE;

 // IF DB1.TH Source Code is Triumph Member (Owner)
 IF DB1.TH_Source_Code = 'TO';

 EXECUTE FUNCTION(Rtv Buy Order Type) TYPE(RTVOBJ) FILE(PKAWCPP)                 AB1193262;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOH_Buy_Order_Type);
 PARAMETER(NLL.PC_Contract_Code);
 PARAMETER(NLL.PSC_Sub_Contract_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Chk Src/BO Type XREF  RT) TYPE(RTVOBJ) FILE(PWAIREP)           AB1339345;
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(LCL.BOH_Buy_Order_Type);
 //?If record not found, signal error and quit reading records
 CASE;

 // IF NOT PGM.*Return code is *Normal
 IF ! PGM.*Return_code = *BLANK;

 // PAR.PP Source/BO Type Error = CND.Errors
 PAR.PP_Source_BO_Type_Error = 'E';

 QUIT;

 ENDIF;

 ENDIF;

 //?Validate for Sioux City (440) only
 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?If Source/BO Type error found, print error report
CASE;

// IF LCL.PP Source/BO Type Error is Errors
IF LCL.PP_Source_BO_Type_Error = 'E';

// DTL.PP Triumph Owned Error = CND.Errors
DTL.PP_Triumph_Owned_Error = 'E';

// Call program Zzz Src/BO Type Val   CL.
CALL PROGRAM(Zzz Src/BO Type Val   CL) ('PWEEUPC');
PARAMETER('QPRINT2');
PARAMETER(*YES);
PARAMETER(*YES);
PARAMETER(01);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(WRK.Return_Code_USR);
PARAMETER(LCL.PP_Triumph_Owned_Error);

ENDIF;

//?Buy Order Header validated for missing Site ID
EXECUTE FUNCTION(Val Tattoo Site ID    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1339445;
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.PP_Site_ID_Error);
{
 //?USER: Initialize routine

 // PAR.PP Site ID Error = CND.No Errors
 PAR.PP_Site_ID_Error = 'N';

 //?Currently, only process for Sioux City
 CASE;

 // IF NOT PAR.BOH Company Number is Sioux City
 IF ! PAR.BOH_Company_Number = 440;

 QUIT;

 ENDIF;

 //?USER: Process Data record

 //?Only process Source Code = TO
 CASE;

 // IF DB1.TH Source Code is Triumph Member (Owner)
 IF DB1.TH_Source_Code = 'TO';

 EXECUTE FUNCTION(Rtv Site ID            RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1268433;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(NLL.PD_Producer_Code);
 PARAMETER(LCL.PS_Site_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If Site ID is blank, signal error and quit reading records
 CASE;

 // IF LCL.PS Site ID is *Blank
 IF LCL.PS_Site_ID = *BLANK;

 //?Only an error if Hog Classification is not Resale
 CASE;

 // IF NOT DB1.HC Class Code is Resale
 IF ! DB1.HC_Class_Code = 'RSL';

 // PAR.PP Site ID Error = CND.Errors
 PAR.PP_Site_ID_Error = 'E';

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?If Site ID error, print error report
CASE;

// IF LCL.PP Site ID Error is Errors
IF LCL.PP_Site_ID_Error = 'E';

// DTL.PP Triumph Owned Error = CND.Errors
DTL.PP_Triumph_Owned_Error = 'E';

// Call program Prt Site ID Val       CL.
CALL PROGRAM(Prt Site ID Val       CL) ('PWEFUPC');
PARAMETER('QPRINT2');
PARAMETER(*YES);
PARAMETER(*YES);
PARAMETER(01);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.PP_Triumph_Owned_Error);

ENDIF;

//?Currently, this check is made for Company 440 only
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PP Triumph Owned Error = CND.No Errors
DTL.PP_Triumph_Owned_Error = 'N';

ENDIF;

ENDDO;

//?E12610 JJH 02/21/18 - Tattoo Balance Error
//?Validate each Tattoo Header is Balanced
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Tattoo Balance    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1343594;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.PP_Tattoo_Balance_Error);
{
 //?USER: Initialize routine

 //?Initialize Errros
 // PAR.PP Tattoo Balance Error = CND.No Errors
 PAR.PP_Tattoo_Balance_Error = 'N';

 //?USER: Process Data record

 //?Check for balance error if not a held over
 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // OR DB1.TH Held/Ovr Completed Dte is Greater than 0
 OR DB1.TH_Held_Ovr_Completed_Dte > *ZERO;

 //?Never flag a Held Over record as an Error
 //?Check for balance error if not a held over
 // IF DB1.TH Kill Balancing Sts is Error
 IF DB1.TH_Kill_Balancing_Sts = 'E';

 // PAR.PP Tattoo Balance Error = CND.Errors
 PAR.PP_Tattoo_Balance_Error = 'E';

 QUIT;

 ENDIF;

}


CASE;

// IF DTL.PP Tattoo Balance Error is Errors
IF DTL.PP_Tattoo_Balance_Error = 'E';

// Call program Prt Tattoo Balance Val CL.
CALL PROGRAM(Prt Tattoo Balance Val CL) ('PWF7UPC');
PARAMETER('QPRINT2');
PARAMETER(*YES);
PARAMETER(*YES);
PARAMETER(01);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Pmt_Current_Payment_Date);

ENDIF;

ENDIF;

//?USER: Validate fields

//?F4 = Prompt for Cutout Matrix
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?SEL: Cutout Matrix
CASE;

// IF PGM.*Cursor field <IS> DTL.Cutout Matrix Code USR
IF PGM.*Cursor_field = DTL.Cutout_Matrix_Code_USR;

// OR PGM.*Cursor field <IS> DTL.Effective Month/Day USR
OR PGM.*Cursor_field = DTL.Effective_Month_Day_USR;

// Call program Sel Cutout Matrix     SR.
CALL PROGRAM(Sel Cutout Matrix     SR) ('PDAZSRR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);

ENDIF;

//?F4 = Prompt for Cutout Matrix
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val Cutout Matrix     XF.
CALL PROGRAM(Val Cutout Matrix     XF) ('PDLGXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

//?F5 = Display Market Prices for WCB or HOG CUTOUT
CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

// Call program Dsp Market PricesWCB/HOGC.
CALL PROGRAM(Dsp Market PricesWCB/HOGC) ('PPV6DFR');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.Pmt_Current_Payment_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//? 2/21/2019 JBB E14234 - Repayment Enhancements Phase 2
//? 8/01/2019 JBB E15279 - Stop Payment Post if Repayment
//?If selection value is 2 for Post, check if Repay Flag is Yes
CASE;

// IF DTL.Payment Sel Prcssng Usr is Payment Posting
IF DTL.Payment_Sel_Prcssng_Usr = '2';

// AND LCL.PP Repayment Status is Yes
AND LCL.PP_Repayment_Status = 'Y';

// Send error message - 'Cannot run the Payment Post when processing a Repayment.'
ERROR(PRK1546);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

CASE;

// IF DTL.Payment Sel Prcssng Usr is Payment Edit
IF DTL.Payment_Sel_Prcssng_Usr = '1';

//?8/29/2007 slm
//?Get this validation out of the way for TF and will come back
//?to not hard code -- Gate Security system does not need this validation
//?8/29/2007 slm This is the 2nd time to get the company value loaded
//?The Buy Order Load information with IN/OUT/R  on the Gate Security
//?does not need the following validation - due to no OUT nor Weight
//?This is not hard coded for company 360
// WRK.@Status (Yes/No) = CND.Blank
WRK.@Status_Yes_No = *BLANK;

CASE;

// IF LCL.Valadate Wgt IN/OUT/R USR is Yes
IF LCL.Valadate_Wgt_IN_OUT_R_USR = 'Y';

EXECUTE FUNCTION(Rtv BOL Scale Sts Err RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1215210;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Initialize routine

 // PAR.@Status (Yes/No) = CND.No
 PAR.@Status_Yes_No = 'N';

 //?USER: Process Data record

 // PAR.@Status (Yes/No) = CND.Yes
 PAR.@Status_Yes_No = 'Y';

 QUIT;

}


CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// Send error message - 'A Buy Order Load Weight is IN, OUT, or RESPREAD. Cannot run payment edit.'
ERROR(PRK0867);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//? 1/09/2019 JBB E14281 - Pricing Error Report processing
EXECUTE FUNCTION(Rtv Price Err Comp Val IF) TYPE(EXCINTFUN)                     AB1349452;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Co_Chks_for_Price_Errors);
PARAMETER(LCL.Error_Level_Warn_Hard);
PARAMETER(LCL.Error_Level_Pricing);
{
 //?Execute internal function

 //?Modification history
 DO;

 //? 2/07/2019 JBB E14281 - Zero Prices on BOL
 //?                        Function created.  This function retrieves
 //?                        the Company Value record for HPEPYPRCERR.
 //?                        Within the retrieved record, there are
 //?                        three fields.  This function passes back
 //?                        the three values.
 //?                        Position  7 - Does the Company print the
 //?                                      Price Errors report during
 //?                                      the Payment Edit process.
 //?                        Position 18 - What is the highest error
 //?                                      level that will be checked.
 //?                        Position 26 - What is the highest error
 //?                                      level found during the
 //?                                      Payment Edit process.
 ENDDO;

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPEPYPRERR');
 PARAMETER(LCL.System_Value_Alpha_USR);

 //?Break out individual values from the Company Value record
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Co Chks for Price Errors = SUBSTRING(LCL.System Value Alpha    USR,CON.7,CON.1)
 PAR.Co_Chks_for_Price_Errors = SUBSTRING(LCL.System_Value_Alpha_USR:7:1);

 // PAR.Error Level - Warn/Hard = SUBSTRING(LCL.System Value Alpha    USR,CON.18,CON.1)
 PAR.Error_Level_Warn_Hard = SUBSTRING(LCL.System_Value_Alpha_USR:18:1);

 // PAR.Error Level - Pricing = SUBSTRING(LCL.System Value Alpha    USR,CON.26,CON.1)
 PAR.Error_Level_Pricing = SUBSTRING(LCL.System_Value_Alpha_USR:26:1);

 ENDIF;

}


//?If Company runs Price Error Report, check for Pricing Error
CASE;

// IF LCL.Co Chks for Price Errors is Yes
IF LCL.Co_Chks_for_Price_Errors = 'Y';

//?Determine is error based on Error Level - Pricing
CASE;

// IF LCL.Error Level - Warn/Hard is Hard
IF LCL.Error_Level_Warn_Hard = 'H';

// AND LCL.Error Level - Pricing is Hard
AND LCL.Error_Level_Pricing = 'H';

// Send error message - 'Cannot run Post at this time. Payment Pricing Errors exist.'
ERROR(PRK1523);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val EvalTrnUplComProc RT) TYPE(RTVOBJ) FILE(PLBAREP)           AB1300185;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Current_Kill_Date);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Event Process is Completed
 IF DB1.EV_Event_Process = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Eval Trans Upload Comment records found.  These records should becompleted
ERROR(PRK1243);

QUIT;

ENDIF;

//?11/08/2021 JBB HD86845 - Don't Submit Post if already running
EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(NLL.PP_Commission_Paym_Error);
PARAMETER(NLL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(NLL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Payment Step > 5, Payment Post is running for Payment Date
CASE;

// IF LCL.Pmt Current Payment Step is Payment Post Processing
IF LCL.Pmt_Current_Payment_Step >= 6;
AND LCL.Pmt_Current_Payment_Step <= 99999;

// AND LCL.Pmt Current Payment Date EQ DTL.Pmt Current Payment Date
AND LCL.Pmt_Current_Payment_Date = DTL.Pmt_Current_Payment_Date;

// Send error message - 'The Payment Post is currently executing. Cannot execute again.'
ERROR(PRK1617);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

//?If Payment Step > 5, Payment Post is running for Payment Date
// IF LCL.Pmt Current Payment Date NE DTL.Pmt Current Payment Date
IF LCL.Pmt_Current_Payment_Date <> DTL.Pmt_Current_Payment_Date;

// Send error message - 'The payment date on the screen does not match the file date.'
ERROR(PRK1618);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

//?USER: User defined action

// DTL.Text Hdr 1 Usr = WRK.Blank USR
DTL.Text_Hdr_1_Usr = WRK.Blank_USR;

CASE;

// IF DTL.Payment Sel Prcssng Usr is Payment Edit
IF DTL.Payment_Sel_Prcssng_Usr = '1';

//?Payment Edit
CASE;

// IF DTL.Pmt Current Payment Step is Less or Equal to Step 5
IF DTL.Pmt_Current_Payment_Step <= 00005;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Payment Edit');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(2);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF PAR.TRH Repayment ID is Entered
IF PAR.TRH_Repayment_ID <> *ZERO;

// Call program Dlt Crc Dtl & Tat D/A XF.
CALL PROGRAM(Dlt Crc Dtl & Tat D/A XF) ('PWOGXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);

ENDIF;

// Execute command - 'SBM Payment Producer Edit'
EXECUTE COMMAND(PRK0456);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(PAR.PRT_Night_Queue);

RETURN;

ENDIF;

//?Payment Edit
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Payment Process not Allow'
ERROR(PRK0453);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

// IF DTL.Payment Sel Prcssng Usr is Payment Posting
IF DTL.Payment_Sel_Prcssng_Usr = '2';

//?Payment Post
CASE;

// IF DTL.Pmt Current Payment Step is Greater then or Equal 5
IF DTL.Pmt_Current_Payment_Step >= 00005;

//?E12610 - Add Tattoo Balancing Error
//?Post if No errors were found during the Payment Edit
CASE;

// IF DTL.Pmt Payment Error is No Errors
IF DTL.Pmt_Payment_Error = 'N';

// AND DTL.PP Commission Paym Error is No Errors
AND DTL.PP_Commission_Paym_Error = 'N';

// AND DTL.PP Trucker Error is No Errors
AND DTL.PP_Trucker_Error = 'N';

// AND DTL.PP Producer Error is No Errors
AND DTL.PP_Producer_Error = 'N';

// AND DTL.PP Triumph Owned Error is No Errors
AND DTL.PP_Triumph_Owned_Error = 'N';

//?If Balance errors are checked and errors exist, do not post
CASE;

// IF LCL.Check for Balance Errors is Yes
IF LCL.Check_for_Balance_Errors = 'Y';

// AND DTL.PP Tattoo Balance Error is Errors
AND DTL.PP_Tattoo_Balance_Error = 'E';

// Send error message - 'Cannot run the Payment Post until all Balance Errors are fixed.'
ERROR(PRK1494);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

//?If Balance errors are checked and errors exist, do not post
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Post: Crc Sum/Crc Dtl');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Payment Producer Posting'
EXECUTE COMMAND(PRK0457);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_System_Value_Alpha);

// WRK.Date Alpha USR = CVTVAR(DTL.Pmt Current Payment Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.Pmt_Current_Payment_Date);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER('HPECMPRPT');
PARAMETER(PAR.System_Value_Alpha_USR);

// PAR.PRT Printer Device = PAR.System Value Alpha    USR
PAR.PRT_Printer_Device = PAR.System_Value_Alpha_USR;

// Execute command - 'SBM Payment Competitor Processing'
EXECUTE COMMAND(PRK0732);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('GUYNIGHTQ');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(DTL.Oms_System_Value_Alpha);

// Call program Bld Exp Rate HPE Sum  XF.
SBMJOB;
CALL PROGRAM(Bld Exp Rate HPE Sum  XF) ('PKX5XFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(*BLANK);
SBMJOBOVR JOB(EXPRTHPESM);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

// Call program Bld Head Kill/Cut Wk  XF.
SBMJOB;
CALL PROGRAM(Bld Head Kill/Cut Wk  XF) ('PLAIXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
SBMJOBOVR JOB(HEADKILLSM);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

RETURN;

ENDIF;

ENDIF;

//?Post if No errors were found during the Payment Edit
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot run the Payment Post until all errors are fixed.'
ERROR(PRK1493);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

//?Payment Post
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Must run Payment Edit First'
ERROR(PRK0465);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

ENDIF;

//?USER: Exit program processing

//?If F3 pressed, set return code to
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PGM.*Return code = CND.*User QUIT requested
PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

