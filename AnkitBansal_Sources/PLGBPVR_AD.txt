// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLGBPVR
// ?Date: 14.08.2025 Time: 02:54:11
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?E8585 JJH 01/09/17 - Correct Deduction Desc 1
//?- This program is intended to be used as a temporary program to
//?  correct the Deduction Desc 1 field in the EDI Carcass Summary.
//?- At this time, the PKLLXFR program cannot be modified until the
//?  M3 modifications are installed.
//?- At this time, the Deduction Desc 1 field is incorrctly populated
//?  with a Truck Name when the Deduction Code 1 = FRT, and the
//?  TRK Truker Code in Buy Order Load = Blank.
//?- This progam will set the Deduction Desc 1 = Blank.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

//?USER: Load screen

// DTL.BOH Company Number = PAR.BOH Company Number
DTL.BOH_Company_Number = PAR.BOH_Company_Number;

// DTL.TH Kill Date = PAR.TH Kill Date
DTL.TH_Kill_Date = PAR.TH_Kill_Date;

//?USER: Validate fields

//?Validate Kill Date Range
CASE;

// IF DTL.TH Kill Date EQ WRK.Zero USR
IF DTL.TH_Kill_Date = WRK.Zero_USR;

// Send error message - 'Date is Required'
ERROR(PRK0641);
MSGPARM(DTL.TH_Kill_Date);

//?Validate Kill Date Range
// IF DTL.Kill Date Usr EQ WRK.Zero USR
IF DTL.Kill_Date_Usr = WRK.Zero_USR;

// Send error message - 'Date is Required'
ERROR(PRK0641);
MSGPARM(DTL.Kill_Date_Usr);

//?Validate Kill Date Range
// IF DTL.TH Kill Date GT DTL.Kill Date Usr
IF DTL.TH_Kill_Date > DTL.Kill_Date_Usr;

// Send error message - '&1 must be less than or equal to &2'
ERROR(PRK0635);
MSGPARM(DTL.TH_Kill_Date);
MSGPARM(DTL.Kill_Date_Usr);

ENDIF;

//?Validate Tattoo Number
CASE;

// IF DTL.TH Tattoo Number is Zero
IF DTL.TH_Tattoo_Number = *ZERO;

//?Validate Tattoo Number
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Tattoo            RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1217490;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Tattoo not found.'
ERROR(PRK0061);

ENDIF;

EXECUTE FUNCTION(Val Crcss Dtl/Tatto  RT) TYPE(RTVOBJ) FILE(PKB1CPP)            AB1160924;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carcass Detail not found.'
ERROR(PRK0138);

ENDIF;

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Rtv Tattoo All Fields RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1232364;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Live_Gross_Amt);
PARAMETER(DTL.TH_LIve_Net_Amt);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Adj_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Adj_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Market_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Payment_Gross);
PARAMETER(DTL.Th_Payment_Net_Amt);
PARAMETER(DTL.TH_AP_Voucher_Document#);
PARAMETER(DTL.TH_Freight_Amount);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Calc_Net_Sts);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Head_Excluded);
PARAMETER(DTL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(DTL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(DTL.TH_CM_Gross_Live_CWT);
PARAMETER(DTL.TH_CM_Gross_Carc_CWT);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Scale_Ticket_Sts);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.TH_Posted_to_HPS_Flag);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.TH_Shift_Held_Over);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.TH_Unused_Code);
PARAMETER(DTL.TH_Unused_Sts_2_Pos);
PARAMETER(DTL.TH_Commission_Status);
PARAMETER(DTL.TH_Paid_2_Week_Avg_Y_N);
PARAMETER(DTL.TH_Unused_Sts_1_Pos_3);
PARAMETER(DTL.TH_DOA_Weight);
PARAMETER(DTL.TH_Avg_Lean_EXC_ADD);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(DTL.TH_Shift_Held_Over_Head);
PARAMETER(DTL.TH_Sorting_Amount);
PARAMETER(DTL.TH_Head_Identified);
PARAMETER(DTL.TH_Percent_Identified);
PARAMETER(DTL.TH_Percent_Accepted);
PARAMETER(DTL.TH_Head_Adjusted_LN);
PARAMETER(DTL.TH_PHA_Head_Adds);
PARAMETER(DTL.TH_PHA_Add_Type);
PARAMETER(DTL.TH_PHA_Average_Type);
PARAMETER(DTL.TH_PHA_Add_Reason);
PARAMETER(DTL.TH_PHA_Yield_Percent);
PARAMETER(DTL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(DTL.TH_VC_Gross_Value_HD);
PARAMETER(DTL.TH_Excluded_Gross_Value);
PARAMETER(DTL.TH_Avg_Lean);
PARAMETER(DTL.TH_Broken_Back_Hd_Count);
PARAMETER(DTL.TH_Hot_Scl_Upload_Time);
PARAMETER(DTL.TH_Unused_Nbr_4);
PARAMETER(DTL.TH_Excluded_Carc_Val);
PARAMETER(DTL.TH_Excluded_Premium);
PARAMETER(DTL.TH_Unused_Nbr_7);
PARAMETER(DTL.TH_Unused_Nbr_8);
PARAMETER(DTL.TH_Unused_Nbr_9);
PARAMETER(DTL.TH_Unused_Nbr_10);
PARAMETER(DTL.TH_Break_Even_Price_CWT);
PARAMETER(DTL.TH_Meat_Value_Factor_Amt);
PARAMETER(DTL.TH_Yld_Parm_Adj_Yield);
PARAMETER(DTL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(DTL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(DTL.TH_Avg_Backfat_2_Dec);
PARAMETER(DTL.TH_HITCH_Old_Pay_Net_Amt);
PARAMETER(DTL.TH_MPR_Sort_Loss);
PARAMETER(DTL.TH_Unused_Nbr_19);
PARAMETER(DTL.TH_Unused_Nbr_20);
PARAMETER(DTL.TH_Cold_Scl_Upload_Date);
PARAMETER(DTL.TH_Cold_Scl_Upload_Time);
PARAMETER(DTL.TH_Head_LFT);
PARAMETER(DTL.TH_Head_EUT_KOA);
PARAMETER(DTL.TH_Unused_Date_5);
PARAMETER(DTL.TH_Unused_Sts_1);
PARAMETER(DTL.TH_Unused_Sts_2);
PARAMETER(DTL.TH_Unused_Sts_3);
PARAMETER(DTL.TH_Unused_Sts_4);
PARAMETER(DTL.TH_Unused_Sts_5);
PARAMETER(DTL.TH_Unused_Sts_6);
PARAMETER(DTL.TH_Unused_Sts_7);
PARAMETER(DTL.TH_Unused_Sts_8);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.THP_Process_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // LCL.Net Amount           USR = LCL.Net Amount           USR + DB1.Th Payment Net Amt
 LCL.Net_Amount_USR = LCL.Net_Amount_USR + DB1.Th_Payment_Net_Amt;

 //?USER: Exit processing

 // PAR.Th Payment Net Amt = LCL.Th Payment Net Amt
 PAR.Th_Payment_Net_Amt = LCL.Th_Payment_Net_Amt;

}


// Call program Crt EDI Carc Summ/Dtl XF.
CALL PROGRAM(Crt EDI Carc Summ/Dtl XF) ('PKLLXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER('O');

//?E8585 JJH 01/09/17 - Correct Deduction Desc 1 in EDI Carcass Summary
// Call program UPD Deduction Desc 1  XF.
CALL PROGRAM(UPD Deduction Desc 1  XF) ('PWAMXFR');
PARAMETER(DTL.TH_Kill_Date);

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(PRK0813 *INFO);
MSGPARM('SLMTESTEDI');
MSGPARM(*JOBD);

