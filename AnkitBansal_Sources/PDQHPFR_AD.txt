// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDQHPFR
// ?Date: 14.08.2025 Time: 12:04:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(Rtv Ats ShpDte-21+Sun RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621711;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.PS_Available_Ship_Date);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
PARAMETER(WRK.ZERO);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.USR Day 1 = DB1.Plant Date of Last Order
 PAR.USR_Day_1 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 1  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_1_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.USR Day 2 = DB1.Plant Date of Last Order
 PAR.USR_Day_2 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 2  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_2_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.USR Day 3 = DB1.Plant Date of Last Order
 PAR.USR_Day_3 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 3  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_3_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.USR Day 4 = DB1.Plant Date of Last Order
 PAR.USR_Day_4 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 4  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_4_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.USR Day 5 = DB1.Plant Date of Last Order
 PAR.USR_Day_5 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 5  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_5_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.USR Day 6 = DB1.Plant Date of Last Order
 PAR.USR_Day_6 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 6  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_6_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 // PAR.USR Day 7 = DB1.Plant Date of Last Order
 PAR.USR_Day_7 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 7  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_7_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 // PAR.USR Day 8 = DB1.Plant Date of Last Order
 PAR.USR_Day_8 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 // PAR.USR Day 9 = DB1.Plant Date of Last Order
 PAR.USR_Day_9 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 // PAR.USR Day 10 = DB1.Plant Date of Last Order
 PAR.USR_Day_10 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 // PAR.USR Day 11 = DB1.Plant Date of Last Order
 PAR.USR_Day_11 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 // PAR.USR Day 12 = DB1.Plant Date of Last Order
 PAR.USR_Day_12 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 // PAR.USR Day 13 = DB1.Plant Date of Last Order
 PAR.USR_Day_13 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 // PAR.USR Day 14 = DB1.Plant Date of Last Order
 PAR.USR_Day_14 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 // PAR.USR Day 15 = DB1.Plant Date of Last Order
 PAR.USR_Day_15 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 // PAR.USR Day 16 = DB1.Plant Date of Last Order
 PAR.USR_Day_16 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.USR Day 17 = DB1.Plant Date of Last Order
 PAR.USR_Day_17 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.USR Day 18 = DB1.Plant Date of Last Order
 PAR.USR_Day_18 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.USR Day 19 = DB1.Plant Date of Last Order
 PAR.USR_Day_19 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.USR Day 20 = DB1.Plant Date of Last Order
 PAR.USR_Day_20 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.USR Day 21 = DB1.Plant Date of Last Order
 PAR.USR_Day_21 = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


//?USER: Record selection processing

CASE;

// IF PAR.Availability Group Code NE DB1.Availability Group Code
IF PAR.Availability_Group_Code <> DB1.Availability_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

//?USER: Process before print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?Company
CASE;

// IF 1PG.Company Number is Equal to zero
IF X1PG_Company_Number = *ZERO;

// 1PG.Name = CON.*All
X1PG_Name = *All;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Availability Group
CASE;

// IF 1PG.Availability Group Code is Blank
IF X1PG_Availability_Group_Code = *BLANK;

// 1PG.Availability Group Desc = CON.*ALL
X1PG_Availability_Group_Desc = *ALL;

//?Availability Group
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?Warehouse
CASE;

// IF 1PG.Warehouse Code is Warehouse Code Blank
IF X1PG_Warehouse_Code = *BLANK;

// 1PG.Warehouse Description = CON.*ALL
X1PG_Warehouse_Description = *ALL;

//?Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDIF;

//?Warehouse Type
CASE;

// IF PAR.Warehouse Type is *ALL values
IF PAR.Warehouse_Type = 'FZ'/'FR'/*BLANK/'BL';

// 1PG.Warehouse Type Desc = Condition name of 1PG.Warehouse Type
X1PG_Warehouse_Type_Desc = RTVCND(X1PG_Warehouse_Type);

//?Warehouse Type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Warehouse Type Desc = CON.*ALL
X1PG_Warehouse_Type_Desc = *ALL;

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Availability Group Code header format

// SUPPRESSED PRINT Item Display Sequence header format

//?USER: Process before print of detail format

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(WRK.Warehouse_Std_Chill_Time);
PARAMETER(WRK.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Item Orders       PO
EXECUTE FUNCTION(Prt Item Orders       PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PS_Available_Ship_Date);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Item Display Sequence totals format

// SUPPRESSED PRINT Availability Group Code totals format

// SUPPRESSED PRINT Accounting Company Number totals format

