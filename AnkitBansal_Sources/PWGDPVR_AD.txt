// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWGDPVR
// ?Date: 14.08.2025 Time: 02:56:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?03/24/2018 SLM P12827 STF GATE APPLICATION
//?03/24/2018 SLM Clone this program from TF and use for the STF
//?Leaving all of the comments that could be used for notes
//?Custom program for Triumph Foods.
//?7/22/2011 slm Arrival Date - do not populat in this program
//?for Triumph Foods.  Do to the fact this is a custom pgm for TF
//?this program should not be updating the Arrival Date and Arrival Time
//?******
//?8/27/2008 slm Add validation that kill date from the
//?buy order can must be either = kill date or next kill date
//?E3503 JJH 10/28/2014 - Truck Authorized Entry Time
//? Enforce Triumph's policy that requires the truck driver to
//? enter the Truck Entry Gate within 15 minutes after the Hog
//? Procurement Office has authorized the Truck to enter the gate.
//? - Program modifications are intended to be used by Triumph only.
//?   must allow Guymon to continue as is.
//? - The gate is unmanned.
//? - A truck is considered 15 minutes late after gate entry is
//?   authorized when user selects option 12=Truck Authorized.
//?   Time may be adjusted via Control Value - HPETRKTME
//? - Truck is denied entry for arriving after 15 minutes authori-
//?   zation time period will not be allowed to enter the gate until
//?   the truck driver calls the Hog Procurement Office, and the
//?   Buy Order Load is Re-authorized by Option 12.
//? - When the Truck Driver succesfully enters gate the BOL Truck
//?   Weigh Sts is set to I=In, and a record is written to the Buy
//?   Order Load Comment file.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?H16853 JBB  3/10/2021 Increase Buy Order Number field from 5 to 7
//?                      Replace 8 digit entry number with a 10 digit
//?                      number.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// PAR.Scheduled Ship Dt 8.0 USR = CON.*ZERO
PAR.Scheduled_Kill_Dt_8_0_USR = *ZERO;

//?Date 03/19/2004 Slm - Does the Scale work? Y or blank for no
// LCL.Company Value Code    USR = CON.TRKSCLSTS
LCL.Company_Value_Code_USR = 'TRKSCLSTS';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.Trk_Scale_Working_Y_Usr);

//?This is a custom program for Triumph Foods and a custom message
//?03/24/2018 New Message for STF - which shows the telephone for STF
// Retrieve message - 'INVALID GATE NUMBER.  REENTER YOUR GATE NUMBER, OR CALL 712-226-7960'
WRK.Message_Data_USR = RTVMSG(PRK1488);

//?USER: Load screen

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

//?The type of truck information will be all I's no O outs.
// DTL.BOLW Weight Type = CND.In(En)
DTL.BOLW_Weight_Type = 'I';

// DTL.Oms Name = PAR.Oms Name
DTL.Oms_Name = PAR.Oms_Name;

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Pdctn Loc Name DRV) TYPE(DRVFLD)                               AB1100402;
PARAMETER(DTL.Pdctn_Loc_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Pdctn_Loc_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?****  Movement Entry Log  ****
// PAR.PD Producer Code = DTL.PD Producer Code
PAR.PD_Producer_Code = DTL.PD_Producer_Code;

// PAR.PL Location Code = DTL.PL Location Code
PAR.PL_Location_Code = DTL.PL_Location_Code;

// LCL.Text 10 2 USR = CVTVAR(DTL.Movement # 10.0 USR)
LCL.Text_10_2_USR = CVTVAR(DTL.Movement_#_10_0_USR);

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

RETURN;

ENDIF;

// DTL.Message Data USR = CON.*BLANK
DTL.Message_Data_USR = *BLANK;

//?USER: Validate fields

// DTL.Weight Type Desc USR = Condition name of DTL.BOLW Weight Type
DTL.Weight_Type_Desc_USR = RTVCND(DTL.BOLW_Weight_Type);

// PAR.Text 10 1 USR = Condition name of DTL.BOLW Weight Type
PAR.Text_10_1_USR = RTVCND(DTL.BOLW_Weight_Type);

// PAR.MEL Error Code = CND.No Error
PAR.MEL_Error_Code = *BLANK;

//?03/24/2018 SLM P12827 STF GATE APPLICATION
//?Process all as Externals  *out the internal/externals and add externals
//?Step 1:  Determine Movement #, External Only, & Prod/Loc
DO;

// LCL.SR Type = CND.External
LCL.SR_Type = 'E';

// LCL.Load Number 2.0 USR = DTL.Movement # 10.0 USR
LCL.Load_Number_2_0_USR = DTL.Movement_#_10_0_USR;

// DTL.BOL Load Number = LCL.Load Number 2.0 USR
DTL.BOL_Load_Number = LCL.Load_Number_2_0_USR;

// DTL.BOH Buy Order Number
DTL.BOH_Buy_Order_Number = DTL.Movement_#_10_0_USR / 1000;

// DTL.BOLW Movement Number
DTL.BOLW_Movement_Number = ( DTL.BOH_Buy_Order_Number * 100 ) + DTL.BOL_Load_Number;

// DTL.BOH Company Number = DTL.CC Company Number
DTL.BOH_Company_Number = DTL.CC_Company_Number;

EXECUTE FUNCTION(Rtv TrlScl Entry Info RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1259329;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(PAR.Return_Code_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Producer Type     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1199555;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.SR_Source_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
 PARAMETER(LCL.SR_Source_Code);
 PARAMETER(LCL.SR_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.SR Type is External
 IF LCL.SR_Type = 'E';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

 ENDIF;

}


ENDDO;

//?8/27/2008 slm wip on E0177 EXTRA VALIDATION
EXECUTE FUNCTION(Rtv CurKill&NextKill  RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1290356;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(LCL.Current_Kill_Date);
PARAMETER(LCL.Next_Kill_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Step 2   N=equal to current kill date and N=next  kill date
CASE;

// IF PAR.Scheduled Kill Date   USR EQ LCL.Current Kill Date
IF PAR.Scheduled_Kill_Date_USR = LCL.Current_Kill_Date;

//?Step 2   N=equal to current kill date and N=next  kill date
// IF PAR.Scheduled Kill Date   USR EQ LCL.Next Kill Date
IF PAR.Scheduled_Kill_Date_USR = LCL.Next_Kill_Date;

//?Step 2   N=equal to current kill date and N=next  kill date
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Message Data USR = CONCAT(WRK.Message Data USR,CON.- Error 100,CON.1)
DTL.Message_Data_USR = WRK.Message_Data_USR + '- Error 100' (1);

// PAR.MEL Error Code = CND.100 Invalid
PAR.MEL_Error_Code = 100;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?Step 3:  Validate Movement Number
CASE;

// IF DTL.BOLW Weight Type is In(En)
IF DTL.BOLW_Weight_Type = 'I';

SET CURSOR;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?200 Movement # already weighed In. Found in the Buy Order Load Weight
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

// DTL.Message Data USR = CONCAT(WRK.Message Data USR,CON.- Error 200,CON.1)
DTL.Message_Data_USR = WRK.Message_Data_USR + '- Error 200' (1);

// PAR.MEL Error Code = CND.200 Weighed In
PAR.MEL_Error_Code = 200;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?100 Movement not found in the Buy Order Load Weight
CASE;

// IF PAR.Return Code USR is *Record does not exist
IF PAR.Return_Code_USR = 'Y2U0005';

// DTL.Message Data USR = CONCAT(WRK.Message Data USR,CON.- Error 100,CON.1)
DTL.Message_Data_USR = WRK.Message_Data_USR + '- Error 100' (1);

// PAR.MEL Error Code = CND.100 Invalid
PAR.MEL_Error_Code = 100;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?Add new Message for the Trucker to know the Truck has not been
//?schedule for arrival  -- if this is true the truck will call
//?the hpe office for them to enter the delivery time.
//?250 Validation -- bol must be in the truck arrival status
DO;

// Call program Val DelTrck ArrvRules XF.
CALL PROGRAM(Val DelTrck ArrvRules XF) ('PLQGXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(WRK.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(LCL.*Return_code);
PARAMETER('T');

CASE;

// IF WRK.BOL Truck Scale Weigh Sts is Arrival
IF WRK.BOL_Truck_Scale_Weigh_Sts = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Message Data USR = CONCAT(WRK.Message Data USR,CON.- Error 250,CON.1)
DTL.Message_Data_USR = WRK.Message_Data_USR + '- Error 250' (1);

// PAR.MEL Error Code = CND.250 Arrival Date/Time In
PAR.MEL_Error_Code = 250;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

ENDDO;

//?Step 3:  Validate Movement Number
// IF DTL.BOLW Weight Type is Out
IF DTL.BOLW_Weight_Type = 'O';

SET CURSOR;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?300 Movement # already weighed Out.
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

// DTL.Message Data USR = CONCAT(WRK.Message Data USR,CON.- Error 300,CON.1)
DTL.Message_Data_USR = WRK.Message_Data_USR + '- Error 300' (1);

// PAR.MEL Error Code = CND.300 Weighed Out
PAR.MEL_Error_Code = 300;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER('I');
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?400 Movement # never weighed In.
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// DTL.Message Data USR = CONCAT(WRK.Message Data USR,CON.- Error 400,CON.1)
DTL.Message_Data_USR = WRK.Message_Data_USR + '- Error 400' (1);

// PAR.MEL Error Code = CND.400 Not Weighed In
PAR.MEL_Error_Code = 400;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?Step 3:  Validate Movement Number
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MEL Error Code = CND.ENT No Entry
PAR.MEL_Error_Code = 'ENT';

SET CURSOR;

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

// PAR.PD Producer Code = DTL.PD Producer Code
PAR.PD_Producer_Code = DTL.PD_Producer_Code;

// PAR.PL Location Code = DTL.PL Location Code
PAR.PL_Location_Code = DTL.PL_Location_Code;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
ENDIF;

//?E3503 JJH 12/10/14 - Do not allow Gate Entry if Authorized Date/
//? Time is exceeded.
//?Truck Authorized Entry Time
DO;

//?NOTE:  Company Value field will not allow Zero.  Therefore, 360
//?was set to 00.0001, and it is being reset to 0 Minutes.
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPETRKTME');
PARAMETER(LCL.System_Value_Numeric_USR);

CASE;

// IF LCL.System Value Numeric  USR is Less Than 1
IF LCL.System_Value_Numeric_USR < 1;

// LCL.Truck Auth Entry Time USR = CND.Zero
LCL.Truck_Auth_Entry_Time_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Truck Auth Entry Time USR = LCL.System Value Numeric  USR
LCL.Truck_Auth_Entry_Time_USR = LCL.System_Value_Numeric_USR;

ENDIF;

ENDDO;

//?Step 4: Deny Gate Entry if Authorized Gate Date/Time is Exceeded
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

//?This feature only applies to Triumph Foods
EXECUTE FUNCTION(Rtv Auth Gate Dt/Tm   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1323148;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(LCL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(LCL.BOL_Violated_Auth_Tme_Sts);
PARAMETER(LCL.BOL_Auth_Gate_Entry_Time);
PARAMETER(LCL.BOL_Auth_Gate_Entry_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Chg Auth Ent ViolationIF) TYPE(EXCINTFUN)                      AB1321784;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(LCL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(LCL.BOL_Violated_Auth_Tme_Sts);
PARAMETER(LCL.BOL_Auth_Gate_Entry_Time);
PARAMETER(LCL.BOL_Auth_Gate_Entry_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);
PARAMETER(LCL.Dsp_Auth_Ent_ViolationUSR);
{
 //?Execute internal function

 //?The purpose of this function is to determine if the Buy Order
 //?Load is in Violation of the Authorized Entry Date/Time.  If yes,
 //?this function will set the BOL Violated Auth Tme Sts = V and
 //?set display RED "V" on the Work With Delivery Receving scren.
 //?This function will add a Buy Order Load Comment indicating that
 //?BOL Violated Auth Tme Sts is in Violation.
 //?This logic will only be used if the Truck Auth Entry Time USR is
 //?GT Zero.
 CASE;

 // IF PAR.Truck Auth Entry Time USR is GT Zero
 IF PAR.Truck_Auth_Entry_Time_USR > *ZERO;

 //?Initialize Return Parameters
 // PAR.Dsp Auth Ent ViolationUSR = CND.No
 PAR.Dsp_Auth_Ent_ViolationUSR = 'N';

 // LCL.Auth Dt/Tm Violated USR = CND.No
 LCL.Auth_Dt_Tm_Violated_USR = 'N';

 //?Get System Date / Time
 // Call program Rtv System Date       UP.
 CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
 PARAMETER(LCL.Current_Date_USR);

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(LCL.*Job_time);
 {
  C                     TIME           #OA1TM
 }

 CASE;

 // IF PAR.BOL Truck Scale Weigh Sts is Arrival
 IF PAR.BOL_Truck_Scale_Weigh_Sts = 'A';

 CASE;

 // IF PAR.BOL Auth Gate Entry Date is Zero
 IF PAR.BOL_Auth_Gate_Entry_Date = *ZERO;

 // OR PAR.BOL Auth Gate Entry Date LT LCL.Current Date USR
 OR PAR.BOL_Auth_Gate_Entry_Date < LCL.Current_Date_USR;

 // LCL.Auth Dt/Tm Violated USR = CND.Yes
 LCL.Auth_Dt_Tm_Violated_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Determine if Authorized Entry Time is Violated
 //?Adjust Current Date and Time
 // LCL.Truck Auth Entry Time USR = PAR.Truck Auth Entry Time USR * CON.100 *
 LCL.Truck_Auth_Entry_Time_USR = PAR.Truck_Auth_Entry_Time_USR * 100;

 // LCL.Current Time USR = LCL.*Job time + LCL.Truck Auth Entry Time USR
 LCL.Current_Time_USR = LCL.*Job_time + LCL.Truck_Auth_Entry_Time_USR;

 CASE;

 // IF LCL.Current Time USR LT LCL.Truck Auth Entry Time USR
 IF LCL.Current_Time_USR < LCL.Truck_Auth_Entry_Time_USR;

 // LCL.Current Date USR = LCL.Current Date USR + CON.1 *DAYS
 LCL.Current_Date_USR = DATEINCR(LCL.Current_Date_USR 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 CASE;

 // IF LCL.Current Date USR EQ PAR.BOL Auth Gate Entry Date
 IF LCL.Current_Date_USR = PAR.BOL_Auth_Gate_Entry_Date;

 CASE;

 // IF LCL.Current Time USR GT PAR.BOL Auth Gate Entry Time
 IF LCL.Current_Time_USR > PAR.BOL_Auth_Gate_Entry_Time;

 // LCL.Auth Dt/Tm Violated USR = CND.Yes
 LCL.Auth_Dt_Tm_Violated_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Update BOL Violated Auth Tme Sts = Violated
 CASE;

 // IF LCL.Auth Dt/Tm Violated USR is Yes
 IF LCL.Auth_Dt_Tm_Violated_USR = 'Y';

 CASE;

 // IF PAR.BOL Violated Auth Tme Sts is No Violations
 IF PAR.BOL_Violated_Auth_Tme_Sts = *BLANK;

 EXECUTE FUNCTION(Chg BOL Auth Time Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1321787;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('V');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Violated Authorized');
 PARAMETER(' Gate Entry Time');
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 ENDIF;

 //?Display V=Violated in RED
 // PAR.Dsp Auth Ent ViolationUSR = CND.Yes
 PAR.Dsp_Auth_Ent_ViolationUSR = 'Y';

 // PAR.BOL Violated Auth Tme Sts = CND.Violated
 PAR.BOL_Violated_Auth_Tme_Sts = 'V';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Dsp Auth Ent ViolationUSR is Yes
IF LCL.Dsp_Auth_Ent_ViolationUSR = 'Y';

//?P12827 - Add STF Phone number instead of TF
// LCL.Truck Auth Entry AlphaUSR = CVTVAR(LCL.Truck Auth Entry Time USR)
LCL.Truck_Auth_Entry_AlphaUSR = CVTVAR(LCL.Truck_Auth_Entry_Time_USR);

// DTL.Message Data USR = CONCAT(LCL.Truck Auth Entry AlphaUSR,CON.MINUTE GATE ENTRY AUTHORI,CND.*On
DTL.Message_Data_USR = LCL.Truck_Auth_Entry_AlphaUSR + 'MINUTE GATE ENTRY AUTHORI' (1);

// DTL.Message Data USR = CONCAT(DTL.Message Data USR,CON.ZATION TIME EXCEEDED, CAL,CND.*None)
DTL.Message_Data_USR = DTL.Message_Data_USR + 'ZATION TIME EXCEEDED, CAL' (*ZERO);

//?P12827 - Add STF Phone number instead of TF
// DTL.Message Data USR = CONCAT(DTL.Message Data USR,CON.L 712-226-7960.,CND.*None)
DTL.Message_Data_USR = DTL.Message_Data_USR + 'L 712-226-7960.' (*ZERO);

// DTL.Message Data USR = CONCAT(DTL.Message Data USR,CON.- Error 700,CND.*Two)
DTL.Message_Data_USR = DTL.Message_Data_USR + '- Error 700' (2);

// Send error message - 'ERROR'
ERROR(PRK0861);

QUIT;

ENDIF;

ENDIF;

//?USER: User defined action

// PAR.Date Alpha USR = CVTVAR(PAR.Scheduled Kill Date   USR)
PAR.Date_Alpha_USR = CVTVAR(PAR.Scheduled_Kill_Date_USR);

// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

//?Getting ready to create the data for the delivery tracking
//?and the buy order load weight
//?after the update takes place - then the Truck Gate will be open
//?and a java script will run on the local to shut the gate
//?E3503 JJH 10/28/14 - Pass I-Parm: Truck Auth Entry Time USR
//?03/24/2018 SLM P12827 STF GATE APPLICATION
// Call program Ent Gate TruckSnUrlST XF.
CALL PROGRAM(Ent Gate TruckSnUrlST XF) ('PWGEXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(LCL.Text_10_2_USR);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(LCL.Trk_Scale_Working_Y_Usr);
PARAMETER(LCL.SR_Type);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);

// DTL.Message Data USR = CON.*BLANK
DTL.Message_Data_USR = *BLANK;

//?INIT:  DTL Fields
DO;

// DTL.BOLW Weight Type = CND.In(En)
DTL.BOLW_Weight_Type = 'I';

// DTL.BOLW Movement Number = CON.*ZERO
DTL.BOLW_Movement_Number = *ZERO;

// DTL.Movement # 10.0 USR = CON.*ZERO
DTL.Movement_#_10_0_USR = *ZERO;

// DTL.PD Producer Code = CON.*BLANK
DTL.PD_Producer_Code = *BLANK;

// DTL.PL Location Code = CON.*BLANK
DTL.PL_Location_Code = *BLANK;

// DTL.BOH Company Number = CON.*ZERO
DTL.BOH_Company_Number = *ZERO;

// DTL.BOH Buy Order Number = CON.*ZERO
DTL.BOH_Buy_Order_Number = *ZERO;

// DTL.BOL Load Number = CON.*ZERO
DTL.BOL_Load_Number = *ZERO;

// PAR.Scheduled Kill Date   USR = CON.*ZERO
PAR.Scheduled_Kill_Date_USR = *ZERO;

SET CURSOR;

ENDDO;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

QUIT;

ENDIF;

