// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPNZPFR
// ?Date: 14.08.2025 Time: 12:06:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?04/19/05 RMC PKTR01  -  Heading print control
// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?USER: Record selection processing

CASE;

// IF PAR.From Date             USR is Entered
IF PAR.From_Date_USR <> *ZERO;

//?Sel Trans Date Range
CASE;

// IF DB1.Transaction Date Code GE PAR.From Date             USR
IF DB1.Transaction_Date_Code >= PAR.From_Date_USR;

// AND DB1.Transaction Date Code LE PAR.To Date               USR
AND DB1.Transaction_Date_Code <= PAR.To_Date_USR;

//?Sel Trans Date Range
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Customer
CASE;

// IF PAR.A/R Customer Number is not equal to zero
IF PAR.AR_Customer_Number <> *ZERO;

// AND DB1.A/R Customer Number NE PAR.A/R Customer Number
AND DB1.AR_Customer_Number <> PAR.AR_Customer_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Invoice
CASE;

// IF PAR.Invoice Number is Not equal to zero
IF PAR.Invoice_Number <> *ZERO;

// AND DB1.Invoice Number NE PAR.Invoice Number
AND DB1.Invoice_Number <> PAR.Invoice_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Check
CASE;

// IF PAR.A/R Check Number is Not equal to blanks
IF PAR.A_R_Check_Number <> *BLANK;

// AND DB1.A/R Check Number NE PAR.A/R Check Number
AND DB1.A_R_Check_Number <> PAR.A_R_Check_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Omit On Accts   if not selection by check
CASE;

// IF DB1.Adjustment Type Code is OA On Account Cash
IF DB1.Adjustment_Type_Code = 'OA';

// AND PAR.A/R Check Number is Equal to blanks
AND PAR.A_R_Check_Number = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

CASE;

// IF TOP.A/R Customer Number is not equal to zero
IF TOP_AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(TOP_Customer_Name_DRV);
PARAMETER(TOP_AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Customer Name DRV = CON.ALL
TOP_Customer_Name_DRV = 'ALL';

ENDIF;

CASE;

// IF TOP.Invoice Number is Equal to zero
IF TOP_Invoice_Number = *ZERO;

// TOP.Condition Desc. 1  USR = CON.ALL
TOP_Condition_Desc_1_USR = 'ALL';

ENDIF;

CASE;

// IF TOP.A/R Check Number is Equal to blanks
IF TOP_A_R_Check_Number = *BLANK;

// TOP.Condition Desc. 2  USR = CON.ALL
TOP_Condition_Desc_2_USR = 'ALL';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT A/R Customer Number header format

// SUPPRESSED PRINT Invoice Number header format

// SUPPRESSED PRINT Invoice Suffix header format

//?USER: On print of detail format

CASE;

// IF DB1.Invoice Suffix is CM or OA
IF DB1.Invoice_Suffix = 'CM'/'OA';

// LCL.Remaining Balance Due = CON.*ZERO - DB1.Remaining Balance Due
LCL.Remaining_Balance_Due = 0 - DB1.Remaining_Balance_Due;

ENDIF;

// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(CUR.Customer_Name_DRV);
PARAMETER(DB1.AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt A/R Cust Recon Dtl PO
EXECUTE FUNCTION(Prt A/R Cust Recon Dtl PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(WRK.Extended_amount_SUM);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : Prt OA for A/R Reconc PO
EXECUTE FUNCTION(Prt OA for A/R Reconc PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Invoice_Suffix);
PARAMETER(WRK.Extended_amount_SUM);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

NXT.Extended_amount_SUM = SUM(WRK.Extended_amount_SUM);

//?USER: Print required level totals

// SUPPRESSED PRINT Invoice Suffix totals format

CASE;

IF NEW Invoice_Number;
// Print Invoice Number totals format
PRINT Invoice Number totals format;

ENDIF;

// SUPPRESSED PRINT A/R Customer Number totals format

