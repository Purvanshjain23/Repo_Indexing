// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBK5PVR
// ?Date: 14.08.2025 Time: 03:48:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?**
//?**
ENDDO;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?** F4 Bill To Customer
CASE;

// IF PGM.*Cursor field <IS> DTL.A/R Customer Number
IF PGM.*Cursor_field = DTL.AR_Customer_Number;

// WRK.Ship To Customer = CON.*ZERO
WRK.Ship_To_Customer = *ZERO;

// Call program SEL Bill To frm CPH CstSL.
CALL PROGRAM(SEL Bill To frm CPH CstSL) ('PBI6SRR');
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(DTL.AR_Customer_Number);

CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Ship To Name          DRV = CND.blanks
DTL.Ship_To_Name_DRV = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

//?** Co, Cust, Dates req'd if PO#, Order and Load ID are blank
CASE;

// IF DTL.USR Customer PO # is *Blanks
IF DTL.USR_Customer_PO_# = *BLANK;

// AND DTL.Order Number is Equal to zeros
AND DTL.Order_Number = *ZERO;

// AND DTL.Load ID is Blank
AND DTL.Load_ID = *ZERO;

//?** Company number is required
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// Send error message - 'Company Number is required with selected entry.'
ERROR(USR3947);
MSGPARM(DTL.Company_Number_CDE);

ENDIF;

//?** Customer number is required
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

//?** Error if From and Through dates are zeros
CASE;

// IF DTL.USR From Date is not entered
IF DTL.USR_From_Date = *ZERO;

// AND DTL.USR Through Date is not entered
AND DTL.USR_Through_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.USR_From_Date);

ENDIF;

ENDIF;

//?** Error if from date is entered and exceeds through date
CASE;

// IF DTL.USR From Date is Entered
IF DTL.USR_From_Date <> *ZERO;

//?** Error if from date exceeds through date
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

ENDIF;

//?** If Order, then no Load ID or Purchase Order#
CASE;

// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

// AND DTL.Load ID is NE Blank
AND ( DTL.Load_ID <> *ZERO;

// OR DTL.USR Customer PO # is not *Blanks
OR DTL.USR_Customer_PO_# <> *BLANK );

// Send error message - 'Load ID or Purchase Order must be blank if Order# is entered'
ERROR(USR4676);
MSGPARM(DTL.Order_Number);

ENDIF;

//?** If Load , then no Order# or Purchase Order#
CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

// AND DTL.Order Number is Greater then zero
AND ( DTL.Order_Number > *ZERO;

// OR DTL.USR Customer PO # is not *Blanks
OR DTL.USR_Customer_PO_# <> *BLANK );

// Send error message - 'Order# or Purchase Order must be blank if Load ID is entered'
ERROR(USR4677);
MSGPARM(DTL.Load_ID);

ENDIF;

//?** If Purchase Order#, then no Load ID or Order#
CASE;

// IF DTL.USR Customer PO # is not *Blanks
IF DTL.USR_Customer_PO_# <> *BLANK;

// AND DTL.Order Number is Greater then zero
AND ( DTL.Order_Number > *ZERO;

// OR DTL.Load ID is NE Blank
OR DTL.Load_ID <> *ZERO );

// Send error message - 'Purchase Order cannot be entered with Load ID or Order Number'
ERROR(USR4616);
MSGPARM(DTL.USR_Customer_PO_#);

ENDIF;

//?** If Purchase Order#, then if partial, Bill To is required
CASE;

// IF DTL.USR Customer PO # is not *Blanks
IF DTL.USR_Customer_PO_# <> *BLANK;

EXECUTE FUNCTION(VAL PO# Exists         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2080770;
PARAMETER(DTL.USR_Customer_PO_#);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Customer Purchase Order # EQ DB1.Customer Purchase Order #
 IF PAR.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Selected       USR is Not Yes
IF LCL.Record_Selected_USR = *BLANK/'N';

// AND DTL.A/R Customer Number is equal to zero
AND DTL.AR_Customer_Number = *ZERO;

// Send error message - 'Bill To Customer# is required when Partial PO# or Invalid Customer#'
ERROR(USR4689);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?** Error if Email Address is blank
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?USER: User defined action

//?* Determine download type
CASE;

// IF DTL.Load ID is GT Zero
IF DTL.Load_ID > *ZERO;

// WRK.Download Type = CND.Load ID
WRK.Download_Type = 'L';

//?* Determine download type
// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

// WRK.Download Type = CND.Order#
WRK.Download_Type = 'O';

//?* Determine download type
// IF DTL.USR Customer PO # is not *Blanks
IF DTL.USR_Customer_PO_# <> *BLANK;

EXECUTE FUNCTION(VAL PO# Exists         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2080770;
PARAMETER(DTL.USR_Customer_PO_#);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Customer Purchase Order # EQ DB1.Customer Purchase Order #
 IF PAR.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Selected       USR is yes
IF LCL.Record_Selected_USR = 'Y';

// WRK.Download Type = CND.Full PO#
WRK.Download_Type = 'F';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Download Type = CND.Partial PO#
WRK.Download_Type = 'P';

ENDIF;

//?* Determine download type
// IF DTL.USR From Date is GT Zero
IF DTL.USR_From_Date > *ZERO;

// OR DTL.USR Through Date is GT Zero
OR DTL.USR_Through_Date > *ZERO;

// OR DTL.A/R Customer Number is not equal to zero
OR DTL.AR_Customer_Number <> *ZERO;

// OR DTL.Company Number CDE is not equal to zero
OR DTL.Company_Number_CDE <> *ZERO;

// WRK.Download Type = CND.Dates
WRK.Download_Type = 'D';

ENDIF;

// Call program DSP Gate Prc Download  DF.
CALL PROGRAM(DSP Gate Prc Download  DF) ('PBLJDFR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.USR_Customer_PO_#);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.USR_Through_Date);
PARAMETER(DTL.Email_Address);
PARAMETER(WRK.Download_Type);

