// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDGEPFR
// ?Date: 14.08.2025 Time: 12:03:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// PAR.Shipped Item Code = CON.*ZERO
PAR.Shipped_Item_Code = *ZERO;

//?9/29/05  SLM Move Company Heading to top of Page, remove breaking
//?         in the report on Company, change new logical file to be
//?         in order of Group/Item and then company.
//?         Will not be printing a company line.
//?         Group and Item line only. If user selects report for a company
//?         then that is what will be selected.
//?         If user selects all companies, then this will be sum at
//?         at the item level.
//?         pass in ITEM Code for user selection
//?7/26/00  Create outfile in Shipped Item total if Rpt Sel is 1, and
//?   Status is Yes
//?*-----------------------------------------------------------*
//?07/22/03 PKD Brad wants to hide some fields temporarily for Rod.
//?             Standard Overage, Var/CWT, & Dollar Variance.
//?             If Display Flag = N, then the fields will be hidden.
//?*-- HIDE --*
//?*-- DO NOT HIDE --*
// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

//?*-----------------------------------------------------------*
//?*-- First time logic --*
// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Record selection processing

//?Company selection will be done within the clp
//?This report will sum at the group and item level.
//?New item
CASE;

// IF PAR.Shipped Item Code NE DB1.Shipped Item Code
IF PAR.Shipped_Item_Code <> DB1.Shipped_Item_Code;

// PAR.Shipped Item Code = DB1.Shipped Item Code
PAR.Shipped_Item_Code = DB1.Shipped_Item_Code;

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?PK0172 - Sales Realization Modification
CASE;

// IF PAR.USR Flag 3 is Yes
IF PAR.USR_Flag_3 = 'Y';

// WRK.Commodity Market Code = PAR.Commodity Market Code
WRK.Commodity_Market_Code = PAR.Commodity_Market_Code;

//?PK0172 - Sales Realization Modification
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?Select on Item Code
CASE;

// IF PAR.Item Code PASS        USR GT WRK.ZERO
IF PAR.Item_Code_PASS_USR > WRK.ZERO;

CASE;

// IF PAR.Item Code PASS        USR EQ DB1.Shipped Item Code
IF PAR.Item_Code_PASS_USR = DB1.Shipped_Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF DB1.Actual Shipped Date LT PAR.USR From Date
IF DB1.Actual_Shipped_Date < PAR.USR_From_Date;

// OR DB1.Actual Shipped Date GT PAR.USR Through Date
OR DB1.Actual_Shipped_Date > PAR.USR_Through_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Check Sales flags
CASE;

// IF PAR.USR Include all Products is YES
IF PAR.USR_Include_all_Products = 'Y';

// AND PAR.Print on Realization Rpt is No
AND PAR.Print_on_Realization_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Check Sales flags
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// AND PAR.USR Sales Realiz. Flag is None
AND PAR.USR_Sales_Realiz_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?PK0246 - Whse Type Selector         2/22/02
CASE;

// IF PAR.Warehouse Type is Fresh or Frozen
IF PAR.Warehouse_Type = 'FR'/'FZ';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type NE PAR.Warehouse Type
IF LCL.Warehouse_Type <> PAR.Warehouse_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// LCL.Company Number = TOP.Company Number
LCL.Company_Number = TOP_Company_Number;

// TOP.Salesperson Code = PAR.Sales Route Code
TOP_Salesperson_Code = PAR.Sales_Route_Code;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Company Recipient Name = TOP.Company Name
TOP_Company_Recipient_Name = TOP_Company_Name;

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

// TOP.Company Recipient Name = CON.*ALL
TOP_Company_Recipient_Name = *ALL;

ENDIF;

// TOP.USR Description - 15 = Condition name of PAR.USR Sales Realiz. Flag
TOP_USR_Description_15 = RTVCND(PAR.USR_Sales_Realiz_Flag);

// TOP.Condition Desc. 1  USR = Condition name of TOP.Export Sales
TOP_Condition_Desc_1_USR = RTVCND(TOP_Export_Sales);

CASE;

// IF TOP.USR Flag 3 is Yes
IF TOP_USR_Flag_3 = 'Y';

//?susan come back to this
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Commodity Market Desc = CON.*BLANK
TOP_Commodity_Market_Desc = *BLANK;

ENDIF;

// TOP.Item Code = PAR.Item Code PASS        USR
TOP_Item_Code = PAR.Item_Code_PASS_USR;

CASE;

// IF PAR.Item Code PASS        USR is Not equal to zero
IF PAR.Item_Code_PASS_USR <> *ZERO;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(TOP_Item_Code);
PARAMETER(TOP_Item_Description);
PARAMETER(LCL.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Description = CON.*ALL
TOP_Item_Description = *ALL;

ENDIF;

//?Select Report conditions
CASE;

// IF PAR.USR Detail or Summary is Report Selection 1
IF PAR.USR_Detail_or_Summary = '1';

//?susan check on this one
// TOP.Condition Desc. 2  USR = CON.Item Group
TOP_Condition_Desc_2_USR = 'Item Group';

// LCL.Select Report = TOP.Condition Desc. 2  USR
LCL.Select_Report = TOP_Condition_Desc_2_USR;

// LCL.Date From Alpha       USR = CVTVAR(PAR.USR From Date)
LCL.Date_From_Alpha_USR = CVTVAR(PAR.USR_From_Date);

// LCL.Date To Alpha         USR = CVTVAR(PAR.USR Through Date)
LCL.Date_To_Alpha_USR = CVTVAR(PAR.USR_Through_Date);

// LCL.Date Range = CONCAT(LCL.Date From Alpha       USR,LCL.Date To Alpha         USR,CON.*ZERO)
LCL.Date_Range = LCL.Date_From_Alpha_USR + LCL.Date_To_Alpha_USR (*ZERO);

//?Select Report conditions
// IF PAR.USR Detail or Summary is Report Selection 2
IF PAR.USR_Detail_or_Summary = '2';

// TOP.Condition Desc. 2  USR = CON.Salesperson
TOP_Condition_Desc_2_USR = 'Salesperson';

//?Select Report conditions
// IF PAR.USR Detail or Summary is Report Selection 3
IF PAR.USR_Detail_or_Summary = '3';

// TOP.Condition Desc. 2  USR = CON.Salesperson/Customer
TOP_Condition_Desc_2_USR = 'Salesperson/Customer';

ENDIF;

//?Retrieve ship to customer name if entered.
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Ship_To_Customer);
PARAMETER(TOP_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve ship to customer name if entered.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Ship To Name = CON.*All
TOP_Ship_To_Name = *All;

ENDIF;

//?Retrieve salesperson name if entered
CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(TOP_Salesperson_Code);
PARAMETER(TOP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve salesperson name if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Salesperson Name = CON.*All
TOP_Salesperson_Name = *All;

ENDIF;

//?Retrieve warehouse type if entered
CASE;

// IF PAR.Warehouse Type NE WRK.BLANK
IF PAR.Warehouse_Type <> WRK.BLANK;

// TOP.Condition Desc. 3  USR = Condition name of TOP.Warehouse Type
TOP_Condition_Desc_3_USR = RTVCND(TOP_Warehouse_Type);

//?Retrieve warehouse type if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 3  USR = CON.*All
TOP_Condition_Desc_3_USR = *All;

ENDIF;

//?Retrieve whse description if entered
CASE;

// IF PAR.Warehouse Code NE WRK.BLANK
IF PAR.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(TOP_Warehouse_Code);
PARAMETER(TOP_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Retrieve whse description if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Warehouse Description = CON.*All
TOP_Warehouse_Description = *All;

ENDIF;

//?USER: On print of first page format

//?*-- First time logic --*
// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

//?USER: Null report processing

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Print required level headings

// SUPPRESSED PRINT Item Structure Group Code header format

// SUPPRESSED PRINT Shipped Item Code header format

// SUPPRESSED PRINT Company Number header format

//?USER: On print of detail format

//?01/20/09 PKD Using Actual & Exclude Non-Ledgered Accrual
CASE;

// IF PAR.Actual or Absorbed USR is Actual
IF PAR.Actual_or_Absorbed_USR = '2';

// CUR.FOB Gross Amount =       *
CUR.FOB_Gross_Amount = ( ( CUR.FOB_Gross_Amount + CUR.Absorbed_Freight_Amount )                    +
- CUR.Actual_Freight_Amount ) - DB1.NonLedgrd_TrdFnd_Acrl_Amt;

ENDIF;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(CUR.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FOB amount and weight
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?01/20/09 PKD Use calculated FOB Gross Amount
// CUR.USR Billing Dtl Net Dol 2 = CUR.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = CUR.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

//?FOB amount and weight
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?01/20/09 PKD Use calculated FOB Gross Amount
// CUR.USR Billing Dtl Net Dol 2 = CUR.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = CUR.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?01/20/09 PKD Use calculated FOB Gross Amount
// CUR.USR Billing Dtl Net Dol 2 = CUR.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = CUR.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// AND DB1.Affect Sales Doll Status is yes
AND DB1.Affect_Sales_Doll_Status = 'Y';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.Weight Billed GT WRK.ZERO
AND CUR.Weight_Billed > WRK.ZERO;

// CUR.Weight Billed = CON.*ZERO - CUR.Weight Billed
CUR.Weight_Billed = *ZERO - CUR.Weight_Billed;

ENDIF;

//?Market Code
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);

//?Get (USDA/Mkt) commodity price for entry prior to ship date
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.U/M - Base Price = DB1.U/M - Base Price
WRK.U_M_Base_Price = DB1.U_M_Base_Price;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);

//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* DB1.Weight_Billed 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

//?Get (USDA/Mkt) commodity price for entry prior to ship date
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

//?Market Code
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);

//?Get (USDA/Mkt) commodity price for entry prior to ship date
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.U/M - Base Price = DB1.U/M - Base Price
WRK.U_M_Base_Price = DB1.U_M_Base_Price;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);

//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* DB1.Weight_Billed 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

//?Get (USDA/Mkt) commodity price for entry prior to ship date
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);

//?Get (USDA/Mkt) commodity price for entry prior to ship date
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.U/M - Base Price = DB1.U/M - Base Price
WRK.U_M_Base_Price = DB1.U_M_Base_Price;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);

//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* DB1.Weight_Billed 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

//?Get (USDA/Mkt) commodity price for entry prior to ship date
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Do not calculate Market Price is Weight is zero
CASE;

// IF CUR.Weight Billed is Equal to zero
IF CUR.Weight_Billed = *ZERO;

// CUR.USR Market Value Price = CND.Equal zero
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

// PAR.U/M - Base Price = DB1.U/M - Base Price
PAR.U_M_Base_Price = DB1.U_M_Base_Price;

//?USER: Process after print of detail format

NXT.USR_FOB_Sales_Price = SUM(CUR.FOB_Gross_Amount);

NXT.USR_Market_Value_SUM_13_4 = SUM(CUR.USR_Market_Value_Price);

NXT.Standard_Overage_SUM = SUM(CUR.Standard_Overage_Amount);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed);

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

//?USER: Print required level totals

// SUPPRESSED PRINT Company Number totals format

CASE;

IF NEW Shipped_Item_Code;
CASE;

// IF CUR.Item Structure Group Code EQ PAR.Item Structure Group Code
IF CUR.Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

//?Print Asterisk if All Products Yes and Sales Realization Flag Yes
CASE;

// IF PAR.USR Include all Products is YES
IF PAR.USR_Include_all_Products = 'Y';

// AND PAR.Print on Realization Rpt is Yes
AND PAR.Print_on_Realization_Rpt = 'Y';

// CUR.USR Asterisk = CND.asterisk
CUR.USR_Asterisk = *;

//?Print Asterisk if All Products Yes and Sales Realization Flag Yes
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Asterisk = CND.blank
CUR.USR_Asterisk = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Change calculations to use weight shipped SUM as displayed in
//?field Shipped Net Weight per call C0000707
//?Compute FOB Sales Price (CWT) * Standard Overage (CWT)
CASE;

// IF CUR.Weight Billed SUM NE WRK.ZERO
IF CUR.Weight_Billed_SUM <> WRK.ZERO;

// Synon (17,9) work field =       * Compute FOB Sales Prc CWT
PGM.*Synon_179_work_field = ( CUR.USR_FOB_Sales_Price / CUR.Weight_Billed_SUM 'H' ) * 100          +
'H';

//?compute FOB Gross Amount
CASE;

// IF CUR.USR FOB Sales Price LT WRK.ZERO
IF CUR.USR_FOB_Sales_Price < WRK.ZERO;

// AND CUR.Weight Billed SUM LT WRK.ZERO
AND CUR.Weight_Billed_SUM < WRK.ZERO;

// CUR.FOB Gross Amount = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.FOB_Gross_Amount = PGM.*Synon_179_work_field * -1 'H';

//?compute FOB Gross Amount
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.FOB Gross Amount = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.FOB_Gross_Amount = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

// Compute:standard overage
CUR.Standard_Overage_Amount = ( CUR.Standard_Overage_SUM / CUR.Weight_Billed_SUM 'H' )             +
* 100 'H';

//?Compute FOB Sales Price (CWT) * Standard Overage (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.Standard Overage Amount = CON.*ZERO
CUR.Standard_Overage_Amount = *ZERO;

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.Weight Billed SUM NE WRK.ZERO
IF CUR.Weight_Billed_SUM <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_SUM_13_4 / CUR.Weight_Billed_SUM 'H' )          +
* 100 'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value SUM 13.4 LT WRK.ZERO
IF CUR.USR_Market_Value_SUM_13_4 < WRK.ZERO;

// AND CUR.Weight Billed SUM LT WRK.ZERO
AND CUR.Weight_Billed_SUM < WRK.ZERO;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = CON.*ZERO
CUR.USR_Market_Value = *ZERO;

ENDIF;

//?-------------------------------------------------------------
//?03/19/03 PKD Changed to use Sales History Standard Overage Amount.
//?-------------------------------------------------------------
//?compute overage achieved
// CUR.USR Amount Remaining = CUR.FOB Gross Amount - CUR.USR Market Value
CUR.USR_Amount_Remaining = CUR.FOB_Gross_Amount - CUR.USR_Market_Value;

//?compute var/CWT
// CUR.Variance amount 1     USR = CUR.USR Amount Remaining - CUR.Standard Overage
CUR.Variance_amount_1_USR = CUR.USR_Amount_Remaining - CUR.Standard_Overage_Amount;

//?Compute Dollar Variance
// Synon (17,9) work field =       * Convert to CWT
PGM.*Synon_179_work_field = CUR.Variance_amount_1_USR * ( CUR.Weight_Billed_SUM / 100              +
'H' ) 'H';

// CUR.Variance Amount 2     USR = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.Variance_Amount_2_USR = PGM.*Synon_179_work_field * 1 'H';

//?Create outfile if Status is Yes
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// AND PAR.USR Detail or Summary is Report Selection 1
AND PAR.USR_Detail_or_Summary = '1';

EXECUTE FUNCTION(Crt W011 Sale Realztn CR) TYPE(CRTOBJ) FILE(POAYCPP)           AC1606542;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Date_Range);
PARAMETER(LCL.Select_Report);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.USR_Asterisk);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.FOB_Gross_Amount);
PARAMETER(CUR.USR_Market_Value);
PARAMETER(CUR.USR_Amount_Remaining);
PARAMETER(CUR.Standard_Overage_Amount);
PARAMETER(CUR.Variance_amount_1_USR);
PARAMETER(CUR.Weight_Billed_SUM);
PARAMETER(CUR.U_M_Base_Price);
PARAMETER(CUR.USR_Billing_Dtl_Net_Dol_2);
PARAMETER(CUR.Variance_Amount_2_USR);

ENDIF;

// Print Shipped Item Code totals format
PRINT Shipped Item Code totals format;

// PAR.Item Structure Group Code = CUR.Item Structure Group Code
PAR.Item_Structure_Group_Code = CUR.Item_Structure_Group_Code;

NXT.USR_FOB_Sales_Price = SUM(CUR.USR_FOB_Sales_Price);

NXT.Standard_Overage_SUM = SUM(CUR.Standard_Overage_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.USR_Market_Value_SUM_13_4 = SUM(CUR.USR_Market_Value_SUM_13_4);

// NXT.Variance Amount 2     USR = NXT.Variance Amount 2     USR + CUR.Variance Amo
NXT.Variance_Amount_2_USR = NXT.Variance_Amount_2_USR + CUR.Variance_Amount_2_USR;

// CUR.Variance Amount 2     USR = CON.*ZERO
CUR.Variance_Amount_2_USR = *ZERO;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(CUR.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Item Structure Group Code totals format
PRINT Item Structure Group Code totals format;

NXT.USR_FOB_Sales_Price = SUM(CUR.USR_FOB_Sales_Price);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.USR_Market_Value_SUM_13_4 = SUM(CUR.USR_Market_Value_SUM_13_4);

// NXT.Variance Amount 2     USR = NXT.Variance Amount 2     USR + CUR.Variance Amo
NXT.Variance_Amount_2_USR = NXT.Variance_Amount_2_USR + CUR.Variance_Amount_2_USR;

// CUR.Variance Amount 2     USR = CON.*ZERO
CUR.Variance_Amount_2_USR = *ZERO;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

ENDIF;

//?USER: On print of final totals format

//?compute overage achieved
//?compute var/CWT
//?Compute Dollar Variance
