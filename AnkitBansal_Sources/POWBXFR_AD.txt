// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POWBXFR
// ?Date: 14.08.2025 Time: 03:39:18
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

//?Call Program
CASE;

// IF PAR.Yld Program USR is Change Line In Progress
IF PAR.Yld_Program_USR = 'CL';

// Call program Sel Prod Line         SR.
CALL PROGRAM(Sel Prod Line         SR) ('POVPSRR');
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

ENDIF;

// Call program Rtv Yld Profile Dft   XF.
CALL PROGRAM(Rtv Yld Profile Dft   XF) ('POWAXFR');
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Yield_Entry_Type);
PARAMETER(WRK.User_Line_In_Process);
PARAMETER(WRK.UPLA_Unused_Sts_2);
PARAMETER(WRK.UPLA_Unused_Sts_3);
PARAMETER(WRK.UPLA_Unused_Sts_4);
PARAMETER(WRK.UPLA_Unused_Sts_5);
PARAMETER(PAR.Record_Found_USR);

CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send completion message - 'User does not have Yield Reporting access.'
MESSAGE(USR3257 *COMPLETION);

// IF *OTHERWISE
IF *OTHERWISE;

//?Process Screens
// DOW PAR.Yld Program USR is Not Exit
DOW PAR.Yld_Program_USR = 'ES'/'IR'/'PR'/'YC'/'YR'/'SW'/'DE'/'LB'/'LD';

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

//?Validate Option
CASE;

// IF PAR.Yld Program USR is Conv Start Wgt Entry
IF PAR.Yld_Program_USR = 'SW';

EXECUTE FUNCTION(Rtv Dte/Shft/PrcSts   RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1669951;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Dte/Shft/PrcSts   RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669954;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.YDL_Post_Status);
 PARAMETER(PAR.YDL_Process_Status);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Dte/Shft/PrcSts   RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1665298;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.YDL_Post_Status);
  PARAMETER(PAR.YDL_Process_Status);
  PARAMETER(PAR.Record_Found_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  CASE;

  // IF PAR.Record Found USR is Record Found
  IF PAR.Record_Found_USR = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.Record Found USR is Record Found
 IF PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

// Send completion message - 'Start Weight Entry for &1 Department and &2 Line not available.'
MESSAGE(USR3267 *COMPLETION);
MSGPARM(PAR.Department_Code);
MSGPARM(PAR.Production_Line_Code);
MSGPARM(PAR.Production_Date);
MSGPARM(PAR.Production_Shift);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?Validate Option
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Dte/Shft/PrcSts   RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1665298;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

// Send completion message - '&1 Department and &2 Line is not available for processing.'
MESSAGE(USR3242 *COMPLETION);
MSGPARM(PAR.Department_Code);
MSGPARM(PAR.Production_Line_Code);
MSGPARM(PAR.Production_Date);
MSGPARM(PAR.Production_Shift);

ENDIF;

ENDIF;

//?Process Option
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

//?Call Program
CASE;

// IF PAR.Yld Program USR is End of Shift
IF PAR.Yld_Program_USR = 'ES';

// Call program Zzz End of Shift      PV.
CALL PROGRAM(Zzz End of Shift      PV) ('POVSPVR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);

//?Call Program
// IF PAR.Yld Program USR is Loin Boning Input Worksht
IF PAR.Yld_Program_USR = 'LB';

// Call program Zzz YDLD Worksheet    EF.
CALL PROGRAM(Zzz YDLD Worksheet    EF) ('PPEJEFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Loin Boning Dsply Worksht
IF PAR.Yld_Program_USR = 'LD';

// Call program Zzz YDLD Worksheet    DF.
CALL PROGRAM(Zzz YDLD Worksheet    DF) ('PPEODFR');
PARAMETER(PAR.Company_Number);
PARAMETER('LOINS');
PARAMETER('BONING');
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Production Review
IF PAR.Yld_Program_USR = 'PR';

// Call program Zzz Production Review DF.
CALL PROGRAM(Zzz Production Review DF) ('POVTDFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Inventory Reconcile
IF PAR.Yld_Program_USR = 'IR';

// Call program Dsp Inv Reconcile     DF.
CALL PROGRAM(Dsp Inv Reconcile     DF) ('POVVDFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Yield Calculation
IF PAR.Yld_Program_USR = 'YC';

// Call program Zzz Calculate Yield   DF.
CALL PROGRAM(Zzz Calculate Yield   DF) ('POW6DFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Yield Review
IF PAR.Yld_Program_USR = 'YR';

// Call program Dsp Yld Approval II   DF.
CALL PROGRAM(Dsp Yld Approval II   DF) ('PPEKDFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Dept Head/Wgt Entry
IF PAR.Yld_Program_USR = 'DE';

// Call program Ent Dept Start Wgt    PV.
CALL PROGRAM(Ent Dept Start Wgt    PV) ('POVWPVR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

//?Call Program
// IF PAR.Yld Program USR is Conv Start Wgt Entry
IF PAR.Yld_Program_USR = 'SW';

CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

// Call program Zzz Start Weight      DF.
CALL PROGRAM(Zzz Start Weight      DF) ('POW4DFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is invalid for &1 Department and &2 Line.'
ERROR(USR3266);
MSGPARM(PAR.Department_Code);
MSGPARM(PAR.Production_Line_Code);

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

ENDIF;

ENDIF;

//?Exit to Menu
CASE;

// IF LCL.Yield Entry Type is Options
IF LCL.Yield_Entry_Type = 'O';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

