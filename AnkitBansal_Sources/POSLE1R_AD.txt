// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POSLE1R
// ?Date: 14.08.2025 Time: 03:38:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PKGUPD');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Program mode = PAR.*Program mode
PGM.*Program_mode = PAR.*Program_mode;

//?USER: Initialize detail screen (new record)

// LCL.Item Code = DTL.Item Code
LCL.Item_Code = DTL.Item_Code;

// LCL.Unit Weight Change Sts = CND.No
LCL.Unit_Weight_Change_Sts = 'NO';

// LCL.Unit Weight = CON.*ZERO
LCL.Unit_Weight = *ZERO;

// DTL.U/M - Primary = CON.EA
DTL.UOM_Primary = 'EA';

// DTL.U/M - Pricing = CON.M
DTL.UOM_Pricing = 'M';

// LCL.U/M - Second = CON.M
LCL.UOM_Second = 'M';

// LCL.Operation Factor 1 = CND.Multiply
LCL.Operation_Factor_1 = 'M';

// LCL.Conversion Factor 1 = CON.1000
LCL.Conversion_Factor_1 = 1000;

//?R17040 DN 03/31/21-Commented Out Item Structure Class Code Default.
// DTL.Pckg Type Class = PAR.Pckg Type Class
DTL.Pckg_Type_Class = PAR.Pckg_Type_Class;

// DTL.Pckg Item Type = PAR.Pckg Item Type
DTL.Pckg_Item_Type = PAR.Pckg_Item_Type;

// DTL.Pre-printed Bag Sts = CND.No
DTL.Pre_printed_Bag_Sts = 'N';

// DTL.Pckg Modified Weight = CND.No
DTL.Pckg_Modified_Weight = 'N';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// LCL.Item Type Code = CND.Packaging and Supplies
LCL.Item_Type_Code = 'PS';

// LCL.Package Type Code = CND.Box Kit
LCL.Package_Type_Code = 'B';

// LCL.Sold 100% Frozen = CND.no
LCL.Sold_100_Percent_Frozen = 'N';

// LCL.Print On Schedule = CND.no
LCL.Print_On_Schedule = 'N';

// LCL.Print on Realization Rpt = CND.No
LCL.Print_on_Realization_Rpt = 'N';

// LCL.Piece Count Item = CND.no
LCL.Piece_Count_Item = 'N';

// LCL.Seconds Item = CND.No
LCL.Seconds_Item = 'N';

// LCL.Production Date Control = CND.no
LCL.Production_Date_Control = 'N';

// LCL.Catch Weight Status = CND.no
LCL.Catch_Weight_Status = 'N';

// LCL.Case Ready Status = CND.no
LCL.Frozen_Make_to_Order_Sts = 'N';

// LCL.Credit Item Status = CND.no
LCL.Credit_Item_Status = 'N';

// LCL.Base/Conv/Loss Item = CND.Base
LCL.Base_Conv_Loss_Item = 'B';

// LCL.Scheduling Position Grade = CND.No
LCL.Scheduling_Position_Grade = 'N';

// LCL.Record Status = CND.Active
LCL.Record_Status = 'A';

EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(DTL.Incl_in_Misc_Tare);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// LCL.Item TF Exempt Code = CND.Exempt Product
LCL.Item_TF_Exempt_Code = 'EP';

// LCL.PA Base Avail Rpt Include = CND.No
LCL.PA_Base_Avail_Rpt_Include = 'N';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Box Pkg Values     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1655255;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(LCL.Item_Label_Line_1);
PARAMETER(LCL.Item_Label_Line_2);
PARAMETER(LCL.Item_Label_Line_3);
PARAMETER(LCL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(LCL.Quality_Level);
PARAMETER(LCL.Item_Level);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(LCL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Transportation_Temp);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Package_Type_Code);
PARAMETER(LCL.Maximum_Audit_Value);
PARAMETER(LCL.Minimum_Audit_Value);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Item_Pricing_Operation);
PARAMETER(LCL.Item_Pricing_Constant);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(LCL.Price_Method_Default);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(LCL.Frozen_Make_to_Order_Sts);
PARAMETER(LCL.Credit_Item_Status);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Pieces_Per_Head);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Group_for_Packaging);
PARAMETER(LCL.Item_Category_Number_1);
PARAMETER(LCL.Made_to_Order_Code);
PARAMETER(LCL.Item_Category_Number_2);
PARAMETER(LCL.Transportation_Equip_Type);
PARAMETER(LCL.Item_Category_Number_3);
PARAMETER(LCL.Item_Category_Code_3);
PARAMETER(LCL.Item_Category_Number_4);
PARAMETER(LCL.GL_Sub_Code);
PARAMETER(LCL.Item_Category_Number_5);
PARAMETER(LCL.Item_Structure_Sub_Class);
PARAMETER(LCL.Item_Category_Number_6);
PARAMETER(LCL.Item_Primal_Sched_Report);
PARAMETER(LCL.Item_Category_Number_7);
PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
PARAMETER(LCL.Item_Category_Number_8);
PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
PARAMETER(LCL.Item_Category_Number_9);
PARAMETER(LCL.Item_Category_Code_9);
PARAMETER(LCL.Item_Category_Number_10);
PARAMETER(LCL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(LCL.Misc_Tare_Weight);
PARAMETER(LCL.Production_Lead_Days);
PARAMETER(LCL.Packaging_Code);
PARAMETER(LCL.Item_Market_Code);
PARAMETER(LCL.TF_Co_Ownership_Sts);
PARAMETER(LCL.Agrimetrics_group);
PARAMETER(LCL.Agrimetrics_pack);
PARAMETER(LCL.Agrimetrics_grade);
PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
PARAMETER(LCL.PM_Pounds_per_Hour);
PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
PARAMETER(LCL.Packages_per_case);
PARAMETER(LCL.Use_Freeze_Sell_By_Days);
PARAMETER(LCL.PM_Batch_Size);
PARAMETER(LCL.Package_Level_size);
PARAMETER(LCL.Partial_Item_Code);
PARAMETER(LCL.WIP_Item_Code);
PARAMETER(LCL.WIP_Reject_Code);
PARAMETER(LCL.Std_Costing_Unit_Weight);
PARAMETER(LCL.FP_Std_Green_Weight);
PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
PARAMETER(LCL.SH_Unused_was_broker);
PARAMETER(LCL.PM_Raw_Material_Type_Code);
PARAMETER(LCL.PM_Line_Number);
PARAMETER(LCL.Seconds_Item);
PARAMETER(LCL.Print_on_Realization_Rpt);
PARAMETER(LCL.Unit_Weight_Change_Sts);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Export_Domestic);
PARAMETER(LCL.Print_On_Schedule);
PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
PARAMETER(LCL.Fresh_Sched_As_Ordered);
PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Item_Meat_Cost_Group_Code);
PARAMETER(LCL.UPC_Code_2);
PARAMETER(LCL.Item_Target_Price);
PARAMETER(LCL.Minimum_Piece_Weight);
PARAMETER(LCL.Maximum_Piece_Weight);
PARAMETER(LCL.Seaboard_Equivalent_Item);
PARAMETER(LCL.Production_Qty_Per_Shift);
PARAMETER(LCL.Scheduling_Position_Grade);
PARAMETER(LCL.Sold_100_Percent_Frozen);
PARAMETER(LCL.Maximum_Shifts);
PARAMETER(DTL.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Unit Weight Change Sts = CND.No
LCL.Unit_Weight_Change_Sts = 'NO';

// LCL.Unit Weight = DTL.Pckg Tare Weight
LCL.Unit_Weight = DTL.Pckg_Tare_Weight;

// DTL.USR Weight, 9.2 = DB1.Pckg Tare Weight
DTL.USR_Weight_9_2 = DB1.Pckg_Tare_Weight;

// LCL.Item Code = DTL.Item Code
LCL.Item_Code = DTL.Item_Code;

// DTL.Condition Desc. 5  USR = Condition name of DB1.Pckg Type Class
DTL.Condition_Desc_5_USR = RTVCND(DB1.Pckg_Type_Class);

EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Condition_Desc_6_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Condition_Desc_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(LCL.Incl_in_Misc_Tare);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Incl in Misc Tare = LCL.Incl in Misc Tare
DTL.Incl_in_Misc_Tare = LCL.Incl_in_Misc_Tare;

CASE;

// IF DTL.Pre-printed Bag Sts EQ WRK.Blank for 4           USR
IF DTL.Pre_printed_Bag_Sts = WRK.Blank_for_4_USR;

// DTL.Pre-printed Bag Sts = CND.No
DTL.Pre_printed_Bag_Sts = 'N';

ENDIF;

CASE;

// IF DTL.Pckg Modified Weight EQ WRK.Blank for 4           USR
IF DTL.Pckg_Modified_Weight = WRK.Blank_for_4_USR;

// DTL.Pckg Modified Weight = CND.No
DTL.Pckg_Modified_Weight = 'N';

ENDIF;

//?R17040 DN 02/23/21-Get/Display IDE Pallet Tiers & Blocks on Screen.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?06/01/22 DN DO2642-Set Spanish Desc 2 to Null.
// Call program Rtv Item Dflt Ext Fld XF.
CALL PROGRAM(Rtv Item Dflt Ext Fld XF) ('PBPAXFR');
PARAMETER(DB1.Item_Code);
PARAMETER(NLL.IDE_Forecast_in_DP);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
PARAMETER(NLL.Spanish_Description);
PARAMETER(NLL.Spanish_Description_Line2);

// DTL.IDE Pallet Tiers USR = CVTVAR(LCL.IDE Pallet Tiers)
DTL.IDE_Pallet_Tiers_USR = CVTVAR(LCL.IDE_Pallet_Tiers);

// DTL.IDE Pallet Blocks USR = CVTVAR(LCL.IDE Pallet Blocks)
DTL.IDE_Pallet_Blocks_USR = CVTVAR(LCL.IDE_Pallet_Blocks);

ENDIF;

//?USER: Validate detail screen fields

// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

//?If Add, and item not overridden, set flag to create
CASE;

// IF DTL.Item Code EQ LCL.Item Code
IF DTL.Item_Code = LCL.Item_Code;

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

// LCL.Status Flag 1  Y/N = CND.Yes
LCL.Status_Flag_1_Y_N = 'Y';

ENDIF;

//?If Add, allow Override to item code for Company Item file
CASE;

// IF DTL.Item Code NE LCL.Item Code
IF DTL.Item_Code <> LCL.Item_Code;

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

// LCL.Record Status 1 Usr = CND.*blank
LCL.Record_Status_1_Usr = *BLANK;

EXECUTE FUNCTION(RTV Chk Item Existance RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1192262;
PARAMETER(DTL.Item_Code);

//?Allow re-use of Not Active items
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Record Status     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1895967;
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Record_Status_1_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Record Status 1 Usr = DB1.Record Status
 PAR.Record_Status_1_Usr = DB1.Record_Status;

}


CASE;

// IF LCL.Record Status 1 Usr is Not Active
IF LCL.Record_Status_1_Usr = *BLANK/'D'/'I';

//?allow reuse of inactive boxes    -- dont try to create it
// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Default already exists.'
ERROR(USR1161);

ENDIF;

//?Allow re-use of Not Active items
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Status Flag 1  Y/N = CND.Yes
LCL.Status_Flag_1_Y_N = 'Y';

ENDIF;

CASE;

// IF DTL.Item Code is GT 500
IF DTL.Item_Code > 500;

// Send error message - 'Item Code must be a box.'
ERROR(USR3183);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

//?desc 1
CASE;

// IF DTL.Description Line One is equal to blank
IF DTL.Description_Line_One = *BLANK;

CASE;

// IF DTL.Item Code is EQ 22
IF DTL.Item_Code = 22;

// OR LCL.Status Flag 1  Y/N is No
OR LCL.Status_Flag_1_Y_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Description is Required.'
ERROR(USR2753);
MSGPARM(DTL.Description_Line_One);

ENDIF;

ENDIF;

//?tare weight
CASE;

// IF DTL.Pckg Tare Weight is Not Entered
IF DTL.Pckg_Tare_Weight = *ZERO;

CASE;

// IF DTL.Item Code is EQ 22
IF DTL.Item_Code = 22;

// OR LCL.Status Flag 1  Y/N is No
OR LCL.Status_Flag_1_Y_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Unit weight is required.'
ERROR(USR3184);
MSGPARM(DTL.Unit_Weight);

ENDIF;

ENDIF;

//?R17040 DN 03/31/21-Validate Item Structure Class Code.
CASE;

// IF DTL.Item Structure Class Code is Entered
IF DTL.Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Val Str Class) TYPE(RTVOBJ) FILE(OMFAREP)                      AC2143287;
PARAMETER(DTL.Item_Structure_Class_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Structure Class not found.'
ERROR(USR3304);
MSGPARM(DTL.Item_Structure_Class_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Condition_Desc_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Condition_Desc_6_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Validate detail screen relations

//?R17040 DN 02/24/21-Convert IDE Pallet Tiers & Blocks to Text.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.IDE Pallet Tiers = CVTVAR(DTL.IDE Pallet Tiers USR)
LCL.IDE_Pallet_Tiers = CVTVAR(DTL.IDE_Pallet_Tiers_USR);

// LCL.IDE Pallet Blocks = CVTVAR(DTL.IDE Pallet Blocks USR)
LCL.IDE_Pallet_Blocks = CVTVAR(DTL.IDE_Pallet_Blocks_USR);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Packaging Item 2  CR) TYPE(CRTOBJ) FILE(POARREP)           AC2195207;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Pckg_Item_Description);
PARAMETER(DTL.Pckg_List_Sequence);
PARAMETER(DTL.Pckg_Type_Class);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Pckg_Unit_Cost);
PARAMETER(DTL.Pckg_Tare_Weight);
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Pckg_Modified_Weight);
PARAMETER(DTL.Pckg_Unused_Status_3);
PARAMETER(DTL.Pckg_Unused_Sts_2);
PARAMETER(DTL.Pre_printed_Bag_Sts);
PARAMETER(DTL.Pckg_Unused_Status_5);
PARAMETER(DTL.Pckg_Unused_Status_6);
PARAMETER(DTL.Pckg_Unused_Status_7);
PARAMETER(DTL.Pckg_Unused_Status_8);
PARAMETER(DTL.Pckg_Unused_Status_9);
PARAMETER(DTL.Pckg_Unused_Status_10);
PARAMETER(DTL.Pckg_Unused_Code);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
 PARAMETER(DB1.Pckg_Reporting_Group);
 PARAMETER(DB1.Pckg_Group_Category);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?USER: Processing after Data update

 //?06/01/22 DN DO2642-Set Spanish Desc 2 to Blank.
 // Call program Rtv/Crt Itm Dflt Ext  XF.
 CALL PROGRAM(Rtv/Crt Itm Dflt Ext  XF) ('PBO6XFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(*BLANK);
 PARAMETER(PAR.IDE_Pallet_Tiers);
 PARAMETER(PAR.IDE_Pallet_Blocks);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(JOB.*PROGRAM);

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Packaging Item    IF) TYPE(EXCINTFUN) FILE(POARREP)        AC1608509;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Pckg_Item_Description);
PARAMETER(DTL.Pckg_List_Sequence);
PARAMETER(DTL.Pckg_Type_Class);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Pckg_Unit_Cost);
PARAMETER(DTL.Pckg_Tare_Weight);
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Pckg_Modified_Weight);
PARAMETER(DTL.Pckg_Unused_Status_3);
PARAMETER(DTL.Pckg_Unused_Sts_2);
PARAMETER(DTL.Pre_printed_Bag_Sts);
PARAMETER(DTL.Pckg_Unused_Status_5);
PARAMETER(DTL.Pckg_Unused_Status_6);
PARAMETER(DTL.Pckg_Unused_Status_7);
PARAMETER(DTL.Pckg_Unused_Status_8);
PARAMETER(DTL.Pckg_Unused_Status_9);
PARAMETER(DTL.Pckg_Unused_Status_10);
PARAMETER(DTL.Pckg_Unused_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(DTL.USR_Weight_9_2);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
{
 //?Execute internal function

 //?FP1271 - RMC - 03/30/08
 //? If the tare weight changed, mark packaging item Modified Sts=Y,
 //?  so the batch process will read this item and upadate all FG using
 //? it, and create the Carlisle PFS Prod records
 // LCL.Pckg Modified Weight = CND.No
 LCL.Pckg_Modified_Weight = 'N';

 EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Pckg_Item_Type);
 PARAMETER(LCL.Incl_in_Misc_Tare);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF LCL.Incl in Misc Tare is Yes
 IF LCL.Incl_in_Misc_Tare = 'Y';

 CASE;

 // IF PAR.Pckg Tare Weight NE PAR.USR Weight, 9.2
 IF PAR.Pckg_Tare_Weight <> PAR.USR_Weight_9_2;

 // LCL.Pckg Modified Weight = CND.Yes
 LCL.Pckg_Modified_Weight = 'Y';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Packaging Item    CH) TYPE(CHGOBJ) FILE(POARREP)           AC1602024;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Pckg_Item_Description);
 PARAMETER(PAR.Pckg_List_Sequence);
 PARAMETER(PAR.Pckg_Type_Class);
 PARAMETER(PAR.Pckg_Item_Type);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pckg_Unit_Cost);
 PARAMETER(PAR.Pckg_Tare_Weight);
 PARAMETER(PAR.Pckg_Reporting_Group);
 PARAMETER(PAR.Pckg_Group_Category);
 PARAMETER(LCL.Pckg_Modified_Weight);
 PARAMETER(PAR.Pckg_Unused_Status_3);
 PARAMETER(PAR.Pckg_Unused_Sts_2);
 PARAMETER(PAR.Pre_printed_Bag_Sts);
 PARAMETER(PAR.Pckg_Unused_Status_5);
 PARAMETER(PAR.Pckg_Unused_Status_6);
 PARAMETER(PAR.Pckg_Unused_Status_7);
 PARAMETER(PAR.Pckg_Unused_Status_8);
 PARAMETER(PAR.Pckg_Unused_Status_9);
 PARAMETER(PAR.Pckg_Unused_Status_10);
 PARAMETER(PAR.Pckg_Unused_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing after Data read

  CASE;

  // IF PAR.Pckg Reporting Group NE DB1.Pckg Reporting Group
  IF PAR.Pckg_Reporting_Group <> DB1.Pckg_Reporting_Group;

  EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
  PARAMETER(PAR.Pckg_Reporting_Group);
  PARAMETER(WRK.Pckg_Group_Category);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Pckg Group Category = DB1.Pckg Group Category
  WRK.Pckg_Group_Category = DB1.Pckg_Group_Category;

  ENDIF;

  CASE;

  // IF DB1.Pckg Item Type NE PAR.Pckg Item Type
  IF DB1.Pckg_Item_Type <> PAR.Pckg_Item_Type;

  // OR DB1.Pckg Reporting Group NE PAR.Pckg Reporting Group
  OR DB1.Pckg_Reporting_Group <> PAR.Pckg_Reporting_Group;

  // OR DB1.Pckg Group Category NE WRK.Pckg Group Category
  OR DB1.Pckg_Group_Category <> WRK.Pckg_Group_Category;

  EXECUTE FUNCTION(Rtv Chg Pckg Itm flds RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1658130;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER(PAR.Pckg_Item_Type);
  PARAMETER(PAR.Pckg_Reporting_Group);
  PARAMETER(WRK.Pckg_Group_Category);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Packaging BOM     CH) TYPE(CHGOBJ) FILE(POAZCPP)           AC1606856;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER(DB1.Packaging_Item_Quantity);
   PARAMETER(PAR.Pckg_Item_Type);
   PARAMETER(PAR.Pckg_Reporting_Group);
   PARAMETER(PAR.Pckg_Group_Category);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

    //?USER: Processing after Data update

    EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
    PARAMETER(DB1.Company_Number);
    PARAMETER('PRDPKG');
    PARAMETER(LCL.PFS_AccuSort_Active);
    PARAMETER(LCL.PFS_Carlisle_Active);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.PFS Carlisle Active is Yes
    IF LCL.PFS_Carlisle_Active = 'Y';

    // Call program PFS One Prod Pkging   XF.
    CALL PROGRAM(PFS One Prod Pkging   XF) ('PPNIXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Packaging_Item_Code);
    PARAMETER('C');

    ENDIF;

   }

  }

  ENDIF;

  //?USER: Processing before Data update

  // DB1.Pckg Group Category = WRK.Pckg Group Category
  DB1.Pckg_Group_Category = WRK.Pckg_Group_Category;

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?RMC Added 2.25.22
 EXECUTE FUNCTION(Rtv Chg rcd status   RT) TYPE(RTVOBJ) FILE(POAZCPP)            AC2203596;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Process Data record

  //?Chg record sts if it changed on the packaging item if FG item is inactive
  CASE;

  // IF PAR.Record Status NE DB1.Record Status
  IF PAR.Record_Status <> DB1.Record_Status;

  EXECUTE FUNCTION(RTV Record Status      RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1483076;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Record_Status_1_Usr);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Record Status is Inactive
  IF PAR.Record_Status = 'I';

  // AND LCL.Record Status 1 Usr is Inactive
  AND LCL.Record_Status_1_Usr = 'I';

  EXECUTE FUNCTION(Chg Record status     CH) TYPE(CHGOBJ) FILE(POAZCPP)           AC2203597;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('PRDPKG');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS One Prod Pkging   XF.
   CALL PROGRAM(PFS One Prod Pkging   XF) ('PPNIXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER('C');

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?R17040 DN 02/24/21-Update IDE Pallet Tiers & Blocks in Item Dft Extsn.
 //?DO2642 DN 06/01/22-Set Spanish Description Line2 to Blank.
 // Call program Upd Itm Dft Extsn Info XF.
 CALL PROGRAM(Upd Itm Dft Extsn Info XF) ('PUJ4XFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.IDE_Pallet_Tiers);
 PARAMETER(PAR.IDE_Pallet_Blocks);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

}


//?USER: Process command keys

//?R17040 DN 02/24/21-Convert IDE Pallet Tiers & Blocks to Text.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.IDE Pallet Tiers = CVTVAR(DTL.IDE Pallet Tiers USR)
LCL.IDE_Pallet_Tiers = CVTVAR(DTL.IDE_Pallet_Tiers_USR);

// LCL.IDE Pallet Blocks = CVTVAR(DTL.IDE Pallet Blocks USR)
LCL.IDE_Pallet_Blocks = CVTVAR(DTL.IDE_Pallet_Blocks_USR);

ENDIF;

CASE;

// IF DTL.Item Code is Entered
IF DTL.Item_Code <> *ZERO;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

CASE;

// IF LCL.Status Flag 1  Y/N is Yes
IF LCL.Status_Flag_1_Y_N = 'Y';

//?Upd Company Item Unit Weight if Incl in Misc Tare is NO
CASE;

// IF DTL.Incl in Misc Tare is Yes
IF DTL.Incl_in_Misc_Tare = 'Y';

// LCL.Unit Weight = CON.*ZERO
LCL.Unit_Weight = 0;

//?Upd Company Item Unit Weight if Incl in Misc Tare is NO
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Unit Weight = DTL.Pckg Tare Weight
LCL.Unit_Weight = DTL.Pckg_Tare_Weight;

ENDIF;

//?R17040 DN 02/24/21-Pass in IDE Pallet Tiers & Blocks for Update.
//?CST/ITM Changes - Adding new parameter "IDE Regulation Code ID"
EXECUTE FUNCTION(CRT Item/Add to AvlGrp IF) TYPE(EXCINTFUN)                     AC1608241;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(LCL.Item_Label_Line_1);
PARAMETER(LCL.Item_Label_Line_2);
PARAMETER(LCL.Item_Label_Line_3);
PARAMETER(LCL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Quality_Level);
PARAMETER(LCL.Item_Level);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(LCL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Transportation_Temp);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Package_Type_Code);
PARAMETER(LCL.Maximum_Audit_Value);
PARAMETER(LCL.Minimum_Audit_Value);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Item_Pricing_Operation);
PARAMETER(LCL.Item_Pricing_Constant);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(LCL.Price_Method_Default);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(LCL.Frozen_Make_to_Order_Sts);
PARAMETER(LCL.Credit_Item_Status);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Pieces_Per_Head);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Group_for_Packaging);
PARAMETER(LCL.Item_Category_Number_1);
PARAMETER(LCL.Made_to_Order_Code);
PARAMETER(LCL.Item_Category_Number_2);
PARAMETER(LCL.Transportation_Equip_Type);
PARAMETER(LCL.Item_Category_Number_3);
PARAMETER(LCL.Item_Category_Code_3);
PARAMETER(LCL.Item_Category_Number_4);
PARAMETER(LCL.GL_Sub_Code);
PARAMETER(LCL.Item_Category_Number_5);
PARAMETER(LCL.Item_Structure_Sub_Class);
PARAMETER(LCL.Item_Category_Number_6);
PARAMETER(LCL.Item_Primal_Sched_Report);
PARAMETER(LCL.Item_Category_Number_7);
PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
PARAMETER(LCL.Item_Category_Number_8);
PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
PARAMETER(LCL.Item_Category_Number_9);
PARAMETER(LCL.Item_Category_Code_9);
PARAMETER(LCL.Item_Category_Number_10);
PARAMETER(LCL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(LCL.Misc_Tare_Weight);
PARAMETER(LCL.Production_Lead_Days);
PARAMETER(LCL.Packaging_Code);
PARAMETER(LCL.Item_Market_Code);
PARAMETER(LCL.TF_Co_Ownership_Sts);
PARAMETER(LCL.Agrimetrics_group);
PARAMETER(LCL.Agrimetrics_pack);
PARAMETER(LCL.Agrimetrics_grade);
PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
PARAMETER(LCL.PM_Pounds_per_Hour);
PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
PARAMETER(LCL.Packages_per_case);
PARAMETER(LCL.Use_Freeze_Sell_By_Days);
PARAMETER(LCL.PM_Batch_Size);
PARAMETER(LCL.Package_Level_size);
PARAMETER(LCL.Partial_Item_Code);
PARAMETER(LCL.WIP_Item_Code);
PARAMETER(LCL.WIP_Reject_Code);
PARAMETER(LCL.Std_Costing_Unit_Weight);
PARAMETER(LCL.FP_Std_Green_Weight);
PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
PARAMETER(LCL.SH_Unused_was_broker);
PARAMETER(LCL.PM_Raw_Material_Type_Code);
PARAMETER(LCL.PM_Line_Number);
PARAMETER(LCL.Seconds_Item);
PARAMETER(LCL.Print_on_Realization_Rpt);
PARAMETER(LCL.Unit_Weight_Change_Sts);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Export_Domestic);
PARAMETER(LCL.Print_On_Schedule);
PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
PARAMETER(LCL.Fresh_Sched_As_Ordered);
PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Item_Meat_Cost_Group_Code);
PARAMETER(LCL.UPC_Code_2);
PARAMETER(LCL.Item_Target_Price);
PARAMETER(LCL.Minimum_Piece_Weight);
PARAMETER(LCL.Maximum_Piece_Weight);
PARAMETER(LCL.Seaboard_Equivalent_Item);
PARAMETER(LCL.Production_Qty_Per_Shift);
PARAMETER(LCL.Scheduling_Position_Grade);
PARAMETER(LCL.Sold_100_Percent_Frozen);
PARAMETER(LCL.Maximum_Shifts);
PARAMETER(LCL.Value_Added_Sts);
PARAMETER(LCL.Label_Type);
PARAMETER(LCL.Item_TF_Exempt_Code);
PARAMETER(LCL.Item_TF_Classification);
PARAMETER(LCL.Default_Workcenter);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
{
 //?Execute internal function

 EXECUTE FUNCTION(CRT Item/Add to AvlGrp CR) TYPE(CRTOBJ) FILE(CABZREP)          AC1120696;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.Description_Line_Two);
 PARAMETER(PAR.Item_Label_Line_1);
 PARAMETER(PAR.Item_Label_Line_2);
 PARAMETER(PAR.Item_Label_Line_3);
 PARAMETER(PAR.Item_Label_Line_4);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 PARAMETER(PAR.Number_Cases_On_A_Pallet);
 PARAMETER(PAR.Vendor_Item_Default);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Transportation_Temp);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(PAR.Maximum_Audit_Value);
 PARAMETER(PAR.Minimum_Audit_Value);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Item_Pricing_Operation);
 PARAMETER(PAR.Item_Pricing_Constant);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Frozen_Make_to_Order_Sts);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Item_Category_Number_1);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Number_2);
 PARAMETER(PAR.Transportation_Equip_Type);
 PARAMETER(PAR.Item_Category_Number_3);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Item_Category_Number_4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Number_5);
 PARAMETER(PAR.Item_Structure_Sub_Class);
 PARAMETER(PAR.Item_Category_Number_6);
 PARAMETER(PAR.Item_Primal_Sched_Report);
 PARAMETER(PAR.Item_Category_Number_7);
 PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
 PARAMETER(PAR.Item_Category_Number_8);
 PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
 PARAMETER(PAR.Item_Category_Number_9);
 PARAMETER(PAR.Item_Category_Code_9);
 PARAMETER(PAR.Item_Category_Number_10);
 PARAMETER(PAR.Item_Category_Code_10);
 PARAMETER(PAR.Pallet_Tare_Weight);
 PARAMETER(PAR.Misc_Tare_Weight);
 PARAMETER(PAR.Production_Lead_Days);
 PARAMETER(PAR.Packaging_Code);
 PARAMETER(PAR.Item_Market_Code);
 PARAMETER(PAR.TF_Co_Ownership_Sts);
 PARAMETER(PAR.Agrimetrics_group);
 PARAMETER(PAR.Agrimetrics_pack);
 PARAMETER(PAR.Agrimetrics_grade);
 PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
 PARAMETER(PAR.PM_Pounds_per_Hour);
 PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PAR.Packages_per_case);
 PARAMETER(PAR.Use_Freeze_Sell_By_Days);
 PARAMETER(PAR.PM_Batch_Size);
 PARAMETER(PAR.Package_Level_size);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.WIP_Item_Code);
 PARAMETER(PAR.WIP_Reject_Code);
 PARAMETER(PAR.Std_Costing_Unit_Weight);
 PARAMETER(PAR.FP_Std_Green_Weight);
 PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
 PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
 PARAMETER(PAR.SH_Unused_was_broker);
 PARAMETER(PAR.PM_Raw_Material_Type_Code);
 PARAMETER(PAR.PM_Line_Number);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 PARAMETER(PAR.Unit_Weight_Change_Sts);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Item_Meat_Cost_Group_Code);
 PARAMETER(PAR.UPC_Code_2);
 PARAMETER(PAR.Item_Target_Price);
 PARAMETER(PAR.Minimum_Piece_Weight);
 PARAMETER(PAR.Maximum_Piece_Weight);
 PARAMETER(PAR.Seaboard_Equivalent_Item);
 PARAMETER(PAR.Production_Qty_Per_Shift);
 PARAMETER(PAR.Scheduling_Position_Grade);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 PARAMETER(PAR.Maximum_Shifts);
 PARAMETER(PAR.Value_Added_Sts);
 PARAMETER(PAR.Label_Type);
 PARAMETER(PAR.Item_TF_Exempt_Code);
 PARAMETER(PAR.Item_TF_Classification);
 PARAMETER(PAR.Default_Workcenter);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  CASE;

  // IF DB1.Item Type Code is Finished Goods
  IF DB1.Item_Type_Code = 'FG';

  EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER('ALL');
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.Item Type Code is Work in Process
  IF DB1.Item_Type_Code = 'WP';

  EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER('WIP');
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?06/17/09 PKD FP1054 Create Company Item EXT & Upd PLAN PRODUCTION STS
  // Call program Rtv Plant Co/Org      XF.
  CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);

  //?LCL. Plant Production Sts
  CASE;

  // IF LCL.Company Organization is Not Seaboard
  IF LCL.Company_Organization = 'D'/'H';

  // OR DB1.Item Type Code is Not Finished Good
  OR DB1.Item_Type_Code <> 'FG';

  // LCL.Plan Production Sts = CND.No
  LCL.Plan_Production_Sts = 'N';

  // LCL.Allocation Method = CND.Forward - ASAP
  LCL.Allocation_Method = 'F';

  //?LCL. Plant Production Sts
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Plan Production Sts = CND.Yes
  LCL.Plan_Production_Sts = *BLANK;

  ENDIF;

  EXECUTE FUNCTION(Crt Company Item Ext  CR) TYPE(CRTOBJ) FILE(PMFDREP)           AC1926035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Produce_on_Sunday_Sts);
  PARAMETER(LCL.Produce_on_Monday_Sts);
  PARAMETER(LCL.Produce_on_Tuesday_Sts);
  PARAMETER(LCL.Produce_on_Wednesday_Sts);
  PARAMETER(LCL.Produce_on_Thursday_Sts);
  PARAMETER(LCL.Produce_on_Friday_Sts);
  PARAMETER(LCL.Produce_on_Saturday_Sts);
  PARAMETER(LCL.Plan_Production_Sts);
  PARAMETER(LCL.Allocation_Method);
  PARAMETER(LCL.Adjust_Credit_Pieces);
  PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
  PARAMETER(LCL.CIE_MPR_Report_to_USDA);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Record_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  // Send information message - 'Company &1 for Item &2 was created'
  MESSAGE(USR3361 *INFO);
  MSGPARM(DB1.Company_Number);
  MSGPARM(DB1.Item_Code);

 }

 //?E3313 JJH 08/27/14 - Create Item Default Extension
 //?R17040 DN 02/24/21-Pass in IDE Pallet Tiers & Blocks.
 //?DO2642 DN 06/01/22-Set Spanish Description Line2 to Blank.
 //?CST/ITM - Passing field "IDE Regulation Code ID".
 EXECUTE FUNCTION(Crt Item Default       CR) TYPE(CRTOBJ) FILE(OMBYREP)          AC1184294;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.Description_Line_Two);
 PARAMETER(PAR.Item_Label_Line_1);
 PARAMETER(PAR.Item_Label_Line_2);
 PARAMETER(PAR.Item_Label_Line_3);
 PARAMETER(PAR.Item_Label_Line_4);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 PARAMETER(PAR.Number_Cases_On_A_Pallet);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Transportation_Temp);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Frozen_Make_to_Order_Sts);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Pallet_Tare_Weight);
 PARAMETER(PAR.Misc_Tare_Weight);
 PARAMETER(PAR.Production_Lead_Days);
 PARAMETER(PAR.Packaging_Code);
 PARAMETER(PAR.Item_Market_Code);
 PARAMETER(PAR.TF_Co_Ownership_Sts);
 PARAMETER(PAR.Agrimetrics_group);
 PARAMETER(PAR.Agrimetrics_pack);
 PARAMETER(PAR.Agrimetrics_grade);
 PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
 PARAMETER(PAR.PM_Pounds_per_Hour);
 PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PAR.Packages_per_case);
 PARAMETER(PAR.Use_Freeze_Sell_By_Days);
 PARAMETER(PAR.PM_Batch_Size);
 PARAMETER(PAR.Package_Level_size);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.WIP_Item_Code);
 PARAMETER(PAR.WIP_Reject_Code);
 PARAMETER(PAR.Std_Costing_Unit_Weight);
 PARAMETER(PAR.FP_Std_Green_Weight);
 PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
 PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
 PARAMETER(PAR.SH_Unused_was_broker);
 PARAMETER(PAR.PM_Raw_Material_Type_Code);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 PARAMETER(PAR.Unit_Weight_Change_Sts);
 PARAMETER(PAR.Maximum_Audit_Value);
 PARAMETER(PAR.Minimum_Audit_Value);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Item_Pricing_Operation);
 PARAMETER(PAR.Item_Pricing_Constant);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Item_Category_Number_1);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Number_2);
 PARAMETER(PAR.Transportation_Equip_Type);
 PARAMETER(PAR.Item_Category_Number_3);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Item_Category_Number_4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Number_5);
 PARAMETER(PAR.Item_Structure_Sub_Class);
 PARAMETER(PAR.Item_Category_Number_6);
 PARAMETER(PAR.Item_Primal_Sched_Report);
 PARAMETER(PAR.Item_Category_Number_7);
 PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
 PARAMETER(PAR.Item_Category_Number_8);
 PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
 PARAMETER(PAR.Item_Category_Number_9);
 PARAMETER(PAR.Item_Category_Code_9);
 PARAMETER(PAR.Item_Category_Number_10);
 PARAMETER(PAR.Item_Category_Code_10);
 PARAMETER(PAR.PM_Line_Number);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Item_Meat_Cost_Group_Code);
 PARAMETER(PAR.UPC_Code_2);
 PARAMETER(PAR.Item_Target_Price);
 PARAMETER(PAR.Minimum_Piece_Weight);
 PARAMETER(PAR.Maximum_Piece_Weight);
 PARAMETER(PAR.Seaboard_Equivalent_Item);
 PARAMETER(PAR.Production_Qty_Per_Shift);
 PARAMETER(PAR.Scheduling_Position_Grade);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 PARAMETER(PAR.Maximum_Shifts);
 PARAMETER(PAR.Value_Added_Sts);
 PARAMETER(PAR.Label_Type);
 PARAMETER(PAR.Item_TF_Exempt_Code);
 PARAMETER(PAR.Item_TF_Classification);
 PARAMETER(PAR.Default_Workcenter);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER('N');
 PARAMETER(PAR.IDE_Regulation_Code_ID);
 PARAMETER(PAR.IDE_Pallet_Tiers);
 PARAMETER(PAR.IDE_Pallet_Blocks);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time_1);
  PARAMETER(DB1.User_Id_1);
  PARAMETER(DB1.Job_Name_1);
  PARAMETER(DB1.Job_Date_1);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  //?E3313 JJH 08/27/14 - Create Item Default Extension
  //?R13981 DN 10/26/18 - Update Spanish Desc in Item Default Extsn.
  //?418 ISE 08/21/20 - Update Manufacturer code in Item Default Extsn.
  //?R17040 DN 02/23/21 - Update IDE Pallet Tiers & Blocks.
  //?DO2642 DN 06/01/22 - Update Spanish Desc 2 in Item Default Extsn.
  // Call program Rtv/Crt Itm Dflt Ext  XF.
  CALL PROGRAM(Rtv/Crt Itm Dflt Ext  XF) ('PBO6XFR');
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.IDE_Forecast_in_DP);
  PARAMETER(PAR.IDE_Pallet_Tiers);
  PARAMETER(PAR.IDE_Pallet_Blocks);
  PARAMETER(PAR.Spanish_Description);
  PARAMETER(PAR.Spanish_Description_Line2);
  PARAMETER(PAR.IDE_Manufacturer_Nbr);
  PARAMETER(JOB.*PROGRAM);

 }

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Upd Company Item Unit Weight if Incl in Misc Tare is NO
CASE;

// IF DTL.Incl in Misc Tare is Yes
IF DTL.Incl_in_Misc_Tare = 'Y';

// LCL.Unit Weight = CON.*ZERO
LCL.Unit_Weight = 0;

//?Upd Company Item Unit Weight if Incl in Misc Tare is NO
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Unit Weight = DTL.Pckg Tare Weight
LCL.Unit_Weight = DTL.Pckg_Tare_Weight;

ENDIF;

EXECUTE FUNCTION(Chg Item/Item Default IF) TYPE(EXCINTFUN)                      AC1608243;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(LCL.Item_Label_Line_1);
PARAMETER(LCL.Item_Label_Line_2);
PARAMETER(LCL.Item_Label_Line_3);
PARAMETER(LCL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Quality_Level);
PARAMETER(LCL.Item_Level);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(LCL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Transportation_Temp);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Package_Type_Code);
PARAMETER(LCL.Maximum_Audit_Value);
PARAMETER(LCL.Minimum_Audit_Value);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Item_Pricing_Operation);
PARAMETER(LCL.Item_Pricing_Constant);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(LCL.Price_Method_Default);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(LCL.Frozen_Make_to_Order_Sts);
PARAMETER(LCL.Credit_Item_Status);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Pieces_Per_Head);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Group_for_Packaging);
PARAMETER(LCL.Item_Category_Number_1);
PARAMETER(LCL.Made_to_Order_Code);
PARAMETER(LCL.Item_Category_Number_2);
PARAMETER(LCL.Transportation_Equip_Type);
PARAMETER(LCL.Item_Category_Number_3);
PARAMETER(LCL.Item_Category_Code_3);
PARAMETER(LCL.Item_Category_Number_4);
PARAMETER(LCL.GL_Sub_Code);
PARAMETER(LCL.Item_Category_Number_5);
PARAMETER(LCL.Item_Structure_Sub_Class);
PARAMETER(LCL.Item_Category_Number_6);
PARAMETER(LCL.Item_Primal_Sched_Report);
PARAMETER(LCL.Item_Category_Number_7);
PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
PARAMETER(LCL.Item_Category_Number_8);
PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
PARAMETER(LCL.Item_Category_Number_9);
PARAMETER(LCL.Item_Category_Code_9);
PARAMETER(LCL.Item_Category_Number_10);
PARAMETER(LCL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(LCL.Misc_Tare_Weight);
PARAMETER(LCL.Production_Lead_Days);
PARAMETER(LCL.Packaging_Code);
PARAMETER(LCL.Item_Market_Code);
PARAMETER(LCL.TF_Co_Ownership_Sts);
PARAMETER(LCL.Agrimetrics_group);
PARAMETER(LCL.Agrimetrics_pack);
PARAMETER(LCL.Agrimetrics_grade);
PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
PARAMETER(LCL.PM_Pounds_per_Hour);
PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
PARAMETER(LCL.Packages_per_case);
PARAMETER(LCL.Use_Freeze_Sell_By_Days);
PARAMETER(LCL.PM_Batch_Size);
PARAMETER(LCL.Package_Level_size);
PARAMETER(LCL.Partial_Item_Code);
PARAMETER(LCL.WIP_Item_Code);
PARAMETER(LCL.WIP_Reject_Code);
PARAMETER(LCL.Std_Costing_Unit_Weight);
PARAMETER(LCL.FP_Std_Green_Weight);
PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
PARAMETER(LCL.SH_Unused_was_broker);
PARAMETER(LCL.PM_Raw_Material_Type_Code);
PARAMETER(LCL.PM_Line_Number);
PARAMETER(LCL.Seconds_Item);
PARAMETER(LCL.Print_on_Realization_Rpt);
PARAMETER(LCL.Unit_Weight_Change_Sts);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Export_Domestic);
PARAMETER(LCL.Print_On_Schedule);
PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
PARAMETER(LCL.Fresh_Sched_As_Ordered);
PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Item_Meat_Cost_Group_Code);
PARAMETER(LCL.UPC_Code_2);
PARAMETER(LCL.Item_Target_Price);
PARAMETER(LCL.Minimum_Piece_Weight);
PARAMETER(LCL.Maximum_Piece_Weight);
PARAMETER(LCL.Seaboard_Equivalent_Item);
PARAMETER(LCL.Production_Qty_Per_Shift);
PARAMETER(LCL.Scheduling_Position_Grade);
PARAMETER(LCL.Sold_100_Percent_Frozen);
PARAMETER(LCL.Maximum_Shifts);
PARAMETER(LCL.Value_Added_Sts);
PARAMETER(LCL.Label_Type);
PARAMETER(LCL.Item_TF_Exempt_Code);
PARAMETER(LCL.Item_TF_Classification);
PARAMETER(LCL.Default_Workcenter);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('PKGFLAG');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Dont change the unit weight to ZERO
 CASE;

 // IF PAR.Unit Weight SUM is Equal to zero
 IF PAR.Unit_Weight_SUM = *ZERO;

 // LCL.Unit Weight USR = PAR.Unit Weight
 LCL.Unit_Weight_USR = PAR.Unit_Weight;

 //?Dont change the unit weight to ZERO
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Unit Weight USR = PAR.Unit Weight SUM
 LCL.Unit_Weight_USR = PAR.Unit_Weight_SUM;

 ENDIF;

 EXECUTE FUNCTION(CHG Item               CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1120697;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.Description_Line_Two);
 PARAMETER(PAR.Item_Label_Line_1);
 PARAMETER(PAR.Item_Label_Line_2);
 PARAMETER(PAR.Item_Label_Line_3);
 PARAMETER(PAR.Item_Label_Line_4);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(LCL.Unit_Weight_USR);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 PARAMETER(PAR.Number_Cases_On_A_Pallet);
 PARAMETER(PAR.Vendor_Item_Default);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Transportation_Temp);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(PAR.Maximum_Audit_Value);
 PARAMETER(PAR.Minimum_Audit_Value);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Item_Pricing_Operation);
 PARAMETER(PAR.Item_Pricing_Constant);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Frozen_Make_to_Order_Sts);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Item_Category_Number_1);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Number_2);
 PARAMETER(PAR.Transportation_Equip_Type);
 PARAMETER(PAR.Item_Category_Number_3);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Item_Category_Number_4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Number_5);
 PARAMETER(PAR.Item_Structure_Sub_Class);
 PARAMETER(PAR.Item_Category_Number_6);
 PARAMETER(PAR.Item_Primal_Sched_Report);
 PARAMETER(PAR.Item_Category_Number_7);
 PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
 PARAMETER(PAR.Item_Category_Number_8);
 PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
 PARAMETER(PAR.Item_Category_Number_9);
 PARAMETER(PAR.Item_Category_Code_9);
 PARAMETER(PAR.Item_Category_Number_10);
 PARAMETER(PAR.Item_Category_Code_10);
 PARAMETER(PAR.Pallet_Tare_Weight);
 PARAMETER(PAR.Misc_Tare_Weight);
 PARAMETER(PAR.Production_Lead_Days);
 PARAMETER(PAR.Packaging_Code);
 PARAMETER(PAR.Item_Market_Code);
 PARAMETER(PAR.TF_Co_Ownership_Sts);
 PARAMETER(PAR.Agrimetrics_group);
 PARAMETER(PAR.Agrimetrics_pack);
 PARAMETER(PAR.Agrimetrics_grade);
 PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
 PARAMETER(PAR.PM_Pounds_per_Hour);
 PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PAR.Packages_per_case);
 PARAMETER(PAR.Use_Freeze_Sell_By_Days);
 PARAMETER(PAR.PM_Batch_Size);
 PARAMETER(PAR.Package_Level_size);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.WIP_Item_Code);
 PARAMETER(PAR.WIP_Reject_Code);
 PARAMETER(PAR.Std_Costing_Unit_Weight);
 PARAMETER(PAR.FP_Std_Green_Weight);
 PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
 PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
 PARAMETER(PAR.SH_Unused_was_broker);
 PARAMETER(PAR.PM_Raw_Material_Type_Code);
 PARAMETER(PAR.PM_Line_Number);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 PARAMETER(PAR.Unit_Weight_Change_Sts);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data read

  // LCL.Change Flag USR = CND.No
  LCL.Change_Flag_USR = 'N';

  //?USER: Processing after Data read

  //?Notification of change    12/01/01
  DO;

  // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
  LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

  // LCL.Description 14A      USR = CONCAT(CON.Item:,LCL.Item Code Txt,CON.1)
  LCL.Description_14A_USR = 'Item:' + LCL.Item_Code_Txt (1);

  // LCL.Text USR 8 = CONCAT(CON.Type:,DB1.Item Type Code,CON.1)
  LCL.Text_USR_8 = 'Type:' + DB1.Item_Type_Code (1);

  // LCL.Text USR 23 = CONCAT(LCL.Description 14A      USR,LCL.Text USR 8,CON.1)
  LCL.Text_USR_23 = LCL.Description_14A_USR + LCL.Text_USR_8 (1);

  // LCL.Text USR 20 = CONCAT(CON.Changed By:,JOB.*USER,CON.1)
  LCL.Text_USR_20 = 'Changed By:' + JOB.*USER (1);

  // LCL.Text USR 43 = CONCAT(LCL.Text USR 23,LCL.Text USR 20,CON.1)
  LCL.Text_USR_43 = LCL.Text_USR_23 + LCL.Text_USR_20 (1);

  //?Packaging & Supply
  CASE;

  // IF DB1.Item Type Code is Packaging and Supplies
  IF DB1.Item_Type_Code = 'PS';

  //?Box Unit Weight
  CASE;

  // IF DB1.Unit Weight NE PAR.Unit Weight
  IF DB1.Unit_Weight <> PAR.Unit_Weight;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_1 = RTVMSG(USR3138);
  PARAMETER('Unit Weight:');
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

  //?Finished Goods
  CASE;

  // IF DB1.Item Type Code is Finished Goods
  IF DB1.Item_Type_Code = 'FG';

  //?Misc Tare Weight
  CASE;

  // IF PAR.Misc Tare Weight NE DB1.Misc Tare Weight
  IF PAR.Misc_Tare_Weight <> DB1.Misc_Tare_Weight;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_1 = RTVMSG(USR3138);
  PARAMETER('Misc Tare Weight:');
  PARAMETER(PAR.Misc_Tare_Weight);
  PARAMETER(',');

  ENDIF;

  //?Minimum Weight Per Case
  CASE;

  // IF PAR.Minimum Weight Per Case NE DB1.Minimum Weight Per Case
  IF PAR.Minimum_Weight_Per_Case <> DB1.Minimum_Weight_Per_Case;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_2 = RTVMSG(USR3138);
  PARAMETER('Min Wt Per Case:');
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(',');

  ENDIF;

  //?Maximum Weight Per Case
  CASE;

  // IF PAR.Maximum Weight Per Case NE DB1.Maximum Weight Per Case
  IF PAR.Maximum_Weight_Per_Case <> DB1.Maximum_Weight_Per_Case;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_3 = RTVMSG(USR3138);
  PARAMETER('Max Wt Per Case:');
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  PARAMETER(',');

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Change Flag USR is Yes
  IF LCL.Change_Flag_USR = 'Y';

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PRKSCHED');
  PARAMETER(WRK.DL_List_ID);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program SND Pager Msg-Long    UP.
  CALL PROGRAM(SND Pager Msg-Long    UP) ('POPMUPC');
  PARAMETER(WRK.DL_List_ID);
  PARAMETER(LCL.Text_USR_43);
  PARAMETER(LCL.Office_Message_USR_1);
  PARAMETER(LCL.Office_Message_USR_2);
  PARAMETER(LCL.Office_Message_USR_3);
  PARAMETER(LCL.Office_Message_USR_4);
  PARAMETER(LCL.Office_Message_USR_5);

  ENDIF;

  ENDDO;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Rtv/Chg Unt wgt,sts    RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1465399;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Unit_Weight_Change_Sts);
  {
   //?USER: Process Data record

   // WRK.Conversion Factor 1 = DB1.Conversion Factor 1
   WRK.Conversion_Factor_1 = DB1.Conversion_Factor_1;

   // WRK.Conversion Factor 2 = DB1.Conversion Factor 2
   WRK.Conversion_Factor_2 = DB1.Conversion_Factor_2;

   //?IF Update the Conversion Factor who's unit of measure = LB
   CASE;

   // IF DB1.U/M - Second Dft is Pounds
   IF DB1.UOM_Second_Dft = 'LB';

   // WRK.Conversion Factor 1 = PAR.Unit Weight
   WRK.Conversion_Factor_1 = PAR.Unit_Weight;

   //?IF Update the Conversion Factor who's unit of measure = LB
   // IF DB1.U/M - Third Dft is Pounds
   IF DB1.UOM_Third_Dft = 'LB';

   // WRK.Conversion Factor 2 = PAR.Unit Weight
   WRK.Conversion_Factor_2 = PAR.Unit_Weight;

   ENDIF;

   EXECUTE FUNCTION(Chg Unt Wgt & chg sts CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1465398;
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Conversion_Factor_1);
   PARAMETER(WRK.Conversion_Factor_2);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Unit_Weight_Change_Sts);
  }

 }

 //?E00221 RMC 10/08/08 dont chg here. a chg is in the chg item function
}


ENDIF;

ENDIF;

