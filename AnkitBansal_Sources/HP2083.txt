      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP2083 - UT: Move Edited Scheduled Movements into HPS
      * PROGRAMMER:  Brad Baden
      * CREATED:     09/22/2017
      *
      * FUNCTION:    This function reads the Editing File of Uploaded Scheduled
      *              Movement Data and writes the records to the HPS files.
      *
      *              This program is called from program HP4082CL.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/27/17  Brad Baden   E010812
      *           Recompiled for field changes in file HSL1951A
      * 12/16/17  Brad Baden   E010812
      *           Recompiled for field change in file HSP0841
      * 11/02/20  ISE          H16853
      *           Buy Order Number length is increased from 5 to 7.
      *           Program Recompilation.
      *
      ****************************************************************
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhsl034h   if   e           k disk
      *  Hog Group
      *
      *
     Fhsp0071   if   e           k disk
      *  Company Control
      *
      *
     Fhsp058    uf a e           k disk
      *  Movement event
      *
      *
     Fhsp084    uf a e           k disk
      *  Sales Movement Header
      *
      *
     Fhsp0841   uf a e           k disk
      *  Sales Movement Header Extension
      *
      *
     Fhsp085    uf a e           k disk
      *  Sales Movement Detail
      *
      *
     Fhsl1951a  uf a e           k disk
      *  Ship To SBD Customer Ref
      *
      *
     Fhsp196    uf a e           k disk
      *  Scheuled Load Planning
      *
      *
     Fhsl2082a  uf   e           k disk
      *   Editing file of uploaded movements
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control and save fields
      *
     D first           s              1    inz('Y')
     D procfl          s              1    inz('Y')
     D svcusn          s                   like(e1cusn)
     D svhgcd          s                   like(e1hgcd)
     D svldno          s                   like(e1ldno)
     D svscshdt        s                   like(e1scshdt)
      *
      *
      * Workfields
      *
     D wkupdt          s                   like(meupdt)
     D wkuptm          s                   like(meuptm)
     D wkupusr         s                   like(meuscd)
     D wkuppgm         s                   like(mepgm)
     D wkhgsn          s                   like(mehgsn)
     D wkmvsn          s                   like(memvsn)
     D wkcocd          s                   like(lpcocd)
     D wktypno         s                   like(crtypno)
     D wktypcd         s                   like(crtypcd)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxnodata        s              1
     D xxperclo        s              1
     D xxperrun        s              1
     D xxediterr       s              1
     D xxbusofc        s                   like(e1bocd)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      ****************************************************************
      * Data areas
      ****************************************************************
      * None
      ****************************************************************
      *
     Dnextmvsn         s              7  0 dtaara(damvsn)
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ***************************************************************************************
      * MAINLINE
      ***************************************************************************************
      *
      * We want to make "Period" checks first. And, only continue if there are no
      * errors. So, this is an all-or-nothing interface.
      *
     C                   exsr      $first
      *
      *
      * There were no errors, so read/process all the records in the Editing File.
      *
     C                   if        procfl = yes                                 if process
     C     xxbusofc      setll     hsl2082a
     C                   if        %equal                                       if %equal
      *
     C                   dou       *in90 = *on                                  do loop
     C     xxbusofc      reade     hsl2082a                               90

     C                   if        *in90 = *off                                 if not EOF
      *
      * If Customer# or Load# changes, get next movement#
      *
     C                   if        e1cusn   <> svcusn or                        if e1cusn<>svcusn
     C                             e1ldno   <> svldno or
     C                             e1scshdt <> svscshdt
     C                   eval      svcusn   =  e1cusn
     C                   eval      svldno   =  e1ldno
     C                   eval      svscshdt =  e1scshdt
      *
     C     *lock         in        nextmvsn
     C                   add       1             nextmvsn
     C                   z-add     nextmvsn      wkmvsn
     C                   out       nextmvsn
      *
     C                   exsr      $crtsh                                       Sales Movement Hdr
     C                   exsr      $crtsx                                       Sales Movement Ext
     C                   endif                                                  fi e1cusn<>svcusn
      *
      * If Hog Group Code changes, get Hog Group Number
      *
     C                   if        e1hgcd <> svhgcd                             if e1hgcd<>svhgcd
     C                   eval      svhgcd = e1hgcd
     C     key01         chain     hsl034h
     C                   if        %found                                       if %found
     C                   eval      wkhgsn = hghgsn
     C                   else
     C                   eval      wkhgsn = 0
     C                   endif                                                  if %found
     C                   endif                                                  if e1hgcd<>svhgcd
      *
      * Write Movement Event record, Sales Movement Header, and Sales Movement Extension record
      *
     C                   exsr      $crtme                                       Movement Event
      *
      * Write Sales Movement Detail record
      *
     C                   exsr      $crtsg
      *
      * Write Scheduled Load Planning
     C                   exsr      $crtlp
      *
      *
      * Delete the "editing" record.
      *
     C                   delete    e1rec
      *
     C                   endif                                                  if not EOF
     C                   enddo                                                  do loop
     C                   endif                                                  if %equal
     C                   endif                                                  if process
      *
      * EOF Processing
      *
     C                   seton                                        lr
      /EJECT
      *----------------------------------------------------------------
      * Subroutine - Load and create the Movement Event file
      *----------------------------------------------------------------
      *
     C     $crtme        begsr
      *
      * Load values
      *
     C                   eval      memvsn  = wkmvsn
     C                   eval      memtcd  = 'S'
     C                   eval      mehgsn  = wkhgsn
     C                   eval      meodfl  = 'O'
     C                   eval      memedt  = e1scshdt
     C                   eval      mehsn   = 0
     C                   eval      melnno  = 0
     C                   eval      mecvno  = e1cusn
     C                   eval      meupdt  = wkupdt
     C                   eval      meuptm  = wkuptm
     C                   eval      meuscd  = wkupusr
     C                   eval      mepgm   = wkuppgm
      *
      * Write record
      *
     C                   write     MEREC
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Subroutine - Load and create the  Sales Header file
      *----------------------------------------------------------------
      *
     C     $crtsh        begsr
      *
      * Load values
      *
     C                   eval      shmvsn   = wkmvsn
     C                   eval      shstcd   = e1stcd
     C                   eval      shltcd   = e1ltcd
     C                   eval      shtpcd   = 'C'                                C = Carcass
     C                   eval      shmscd   = 'SC'
     C                   eval      shcvno   = e1cusn
     C                   eval      shticd   = e1ticd
     C                   eval      shfsbo   = xxbusofc
     C                   eval      shfscd   = e1fscd
     C                   eval      shscdt   = e1scshdt
     C                   eval      shsckldt = e1sckldt
     C                   eval      shshdt   = 0
     C                   eval      shrcdt   = 0
     C                   eval      shepdt   = 0
     C                   eval      shpodt   = 0
     C                   eval      shptct   = 0
     C                   eval      shupdt   = wkupdt
     C                   eval      shuptm   = wkuptm
     C                   eval      shpgm    = wkuppgm
      *
      * Write record
      *
     C                   write     SHREC
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Subroutine - Load and create the Sales Movement Extension file
      *----------------------------------------------------------------
      *
     C     $crtsx        begsr
      *
      * Load values
      *
     C                   eval      sxmvsn    = wkmvsn
     C                   eval      sxscdvdt  = 0
     C                   eval      sxscdvtm  = 0
     C                   eval      sxscseqno = 0
     C                   eval      sxbyordno = 0
     C                   eval      sxboldno  = 0
     C                   eval      sxcupono  = 0
     C                   eval      sxcrdt    = wkupdt
     C                   eval      sxcrtm    = wkuptm
     C                   eval      sxcrusr   = wkupusr
     C                   eval      sxupdt    = 0
     C                   eval      sxuptm    = 0
     C                   eval      sxupusr   = *blanks
      *
      * Write record
      *
     C                   write     sxrec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Subroutine - Load and create the Sales Movement Detail file
      *----------------------------------------------------------------
      *
     C     $crtsg        begsr
      *
      * Load values
      *
     C                   eval      sgmvsn  = wkmvsn
     C                   eval      sghgsn  = wkhgsn
     C                   eval      sgschd  = e1schd
     C                   eval      sgshhd  = 0
     C                   eval      sgshlb  = 0
     C                   eval      sglvhd  = 0
     C                   eval      sglvlb  = 0
     C                   eval      sgdohd  = 0
     C                   eval      sgdolb  = 0
     C                   eval      sgcdhd  = 0
     C                   eval      sgcdlb  = 0
     C                   eval      sgydhd  = 0
     C                   eval      sgydlb  = 0
      *
      * Write record
      *
     C                   write     SGREC
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Subroutine - Load and create the Scheduled Load Planning file
      *----------------------------------------------------------------
      *
     C     $crtlp        begsr
      *
      * Retrieve company name from HSL1951A
     C                   z-add     1             wktypno
     C     key02         chain     hsl1951a
     C                   if        %found(hsl1951a)
     C                   eval      wkcocd = crtypcd
     C                   else
     C                   eval      wkcocd = *blanks
     C                   endif
      *
      * Load values
     C                   eval      lpbocd   = xxbusofc
     C                   eval      lpajd    = e1cusn
     C                   eval      lpscshdt = e1scshdt
     C                   eval      lpscshtm = e1scshtm
     C                   eval      lpscshsq = e1scshsq
     C                   eval      lpsckldt = e1sckldt
     C                   eval      lpldno   = e1ldno
     C                   eval      lpltcd   = e1ltcd
     C                   eval      lpstcd   = e1stcd
     C                   eval      lpticd   = e1ticd
     C                   eval      lpfscd   = e1fscd
     C                   eval      lpblcd   = e1blcd
     C                   eval      lprmcd   = e1rmcd
     C                   eval      lphgcd   = e1hgcd
     C                   eval      lpmvsn   = wkmvsn
     C                   eval      lpschd   = e1schd
     C                   eval      lpcocd   = wkcocd
     C                   eval      lprcfl   = 'N'
     C                   eval      lpcrdt   = wkupdt
     C                   eval      lpcrtm   = wkuptm
     C                   eval      lpcrusr  = wkupusr
     C                   eval      lpupdt   = 0
     C                   eval      lpuptm   = 0
     C                   eval      lpupusr  = *blanks
      *
      * Write record
      *
     C                   write     LPREC
      *
     C                   endsr
      *----------------------------------------------------------------
      * Make 1-time checks before processing
      *----------------------------------------------------------------
      *
     C     $first        begsr
      *
     C                   if        xxbusofc = 'OKLIV'
     C                   eval      cccocd = '350'
     C                   else
     C                   eval      cccocd = '340'
     C                   endif                                                  if xxbusofc = OKLIV

     C     cccocd        chain     hsp0071
     C                   if        not %found(hsp0071)
     C                   eval      procfl = no
     C                   leaveSR                                                leave subroutine
     C                   endif                                                  if not %found

     C     xxbusofc      setll     hsl2082a
     C                   if        %equal                                       if %equal

     C                   dou       *in91 = *on                                  do loop
     C     xxbusofc      reade     hsl2082a                               91

     C                   if        *in91 = *off                                 if not EOF
      *
     C                   move      no            first
      *
      * Edit flag must be YES
     C                   if        e1editfl <> yes
     C                   move      yes           xxediterr
     C                   endif
      *
     C                   select
     C                   when      e1scshdt < ccbpdt
     C                   move      no            xxperclo
      *
     C                   when      e1scshdt >= ccbpdt and
     C                             e1scshdt <= ccepdt and
     C                             ccppfl   <> *blank
     C                   move      no            xxperrun
     C                   endsl
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
     C                   endif                                                  %equal
      *
      * If you did not have data, set the 'No Data' error flag.
      *
     C                   if        first = yes
     C                   move      yes           xxnodata
     C                   endif
      *
      * Were there any errors?
      *
     C                   if        xxnodata = yes or xxperclo = yes or
     C                             xxperrun = yes or xxediterr = yes
     C                   move      no            procfl
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parms
      *
     C     *entry        plist
     C                   parm                    xxnodata
     C                   parm                    xxperclo
     C                   parm                    xxperrun
     C                   parm                    xxediterr
     C                   parm                    xxbusofc
      *
     C     key01         klist
     C                   kfld                    e1hgcd
     C                   kfld                    xxbusofc
      *
     C     key02         klist
     C                   kfld                    e1cusn
     C                   kfld                    wktypno
      *
      * Set up the date/time/user/program for time-stamping the Movement Event record.
      *
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkupdt
     C                   time                    wkuptm
     C                   move      sdusr         wkupusr
     C                   move      sdpgm         wkuppgm
      *
     C                   endsr
      /EJECT
