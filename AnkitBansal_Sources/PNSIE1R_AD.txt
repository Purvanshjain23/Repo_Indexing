// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNSIE1R
// ?Date: 14.08.2025 Time: 03:46:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.COA ULSD Company # = PAR.COA ULSD Company #
KEY.COA_ULSD_Company_# = PAR.COA_ULSD_Company_#;

// KEY.COA Batch Number = PAR.COA Batch Number
KEY.COA_Batch_Number = PAR.COA_Batch_Number;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.RFS_Feedstock_Code_Desc);
PARAMETER(LCL.COA_BH_Feedstck_Measure_1);
PARAMETER(LCL.COA_BH_Feedstck_comment_1);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_2);
PARAMETER(DTL.Condition_Desc_2_USR);
PARAMETER(LCL.COA_BH_Feedstck_Measure_2);
PARAMETER(LCL.COA_BH_Feedstck_Comment_2);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_3);
PARAMETER(DTL.Condition_Desc_3_USR);
PARAMETER(LCL.COA_BH_Feedstck_Measure_3);
PARAMETER(LCL.COA_BH_Feedstck_Comment_3);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get the dft feedstock code
CASE;

// IF DB1.RFS Feedstock Code 1 is Not entered
IF DB1.RFS_Feedstock_Code_1 = *BLANK;

//?W104274 DN 07/20/22-Added Co 375.
CASE;

// IF DB1.Company Number is High Plains
IF DB1.Company_Number = 361;

// OR DB1.Company Number is Seaboard Energy Kansas
OR DB1.Company_Number = 375;

EXECUTE FUNCTION(Rtv Feedstock Desc-DftRT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1999111;
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.RFS_Feedstock_Code_Desc);
PARAMETER(DTL.COA_BH_Feedstck_Measure_1);
PARAMETER(DTL.COA_BH_Feedstck_comment_1);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Feedstock Code Dft is yes
 IF DB1.RFS_Feedstock_Code_Dft = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.RFS Feedstock Code 1 = CND.Non Food Grade corn oil
DTL.RFS_Feedstock_Code_1 = '200';

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.RFS_Feedstock_Code_Desc);
PARAMETER(DTL.COA_BH_Feedstck_Measure_1);
PARAMETER(DTL.COA_BH_Feedstck_comment_1);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?R14395 DN 01/29/19-Calculate Yield Percent.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Yield Percent
DTL.USR_Yield_Percent = DB1.COA_BH_Yield_Percent / 100 'H';

ENDIF;

//?USER: Validate detail screen fields

//?Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.RFS Feedstock Code 1
IF PGM.*Cursor_field = DTL.RFS_Feedstock_Code_1;

// Call program Sel RFS Feedstock Cde SL.
CALL PROGRAM(Sel RFS Feedstock Cde SL) ('PNR0SRR');
PARAMETER(DTL.RFS_Feedstock_Code_1);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.RFS Feedstock Code 2
IF PGM.*Cursor_field = DTL.RFS_Feedstock_Code_2;

// Call program Sel RFS Feedstock Cde SL.
CALL PROGRAM(Sel RFS Feedstock Cde SL) ('PNR0SRR');
PARAMETER(DTL.RFS_Feedstock_Code_2);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.RFS Feedstock Code 3
IF PGM.*Cursor_field = DTL.RFS_Feedstock_Code_3;

// Call program Sel RFS Feedstock Cde SL.
CALL PROGRAM(Sel RFS Feedstock Cde SL) ('PNR0SRR');
PARAMETER(DTL.RFS_Feedstock_Code_3);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.RFS_Feedstock_Code_Desc);
PARAMETER(LCL.COA_BH_Feedstck_Measure_1);
PARAMETER(LCL.COA_BH_Feedstck_comment_1);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Feedstock Code 1.
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'RFS Feedstock Code not found.'
ERROR(USR4322);

ENDIF;

//?Feedstock Code 2.
CASE;

// IF DTL.RFS Feedstock Code 2 is Entered
IF DTL.RFS_Feedstock_Code_2 > *BLANK;

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_2);
PARAMETER(DTL.Condition_Desc_2_USR);
PARAMETER(LCL.COA_BH_Feedstck_Measure_2);
PARAMETER(LCL.COA_BH_Feedstck_Comment_2);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'RFS Feedstock Code not found.'
ERROR(USR4322);

ENDIF;

ENDIF;

//?Feedstock Code 3.
CASE;

// IF DTL.RFS Feedstock Code 3 is Entered
IF DTL.RFS_Feedstock_Code_3 > *BLANK;

EXECUTE FUNCTION(Rtv Feedstock Desc    RT) TYPE(RTVOBJ) FILE(PNGFREP)           AC1990431;
PARAMETER(DTL.RFS_Feedstock_Code_3);
PARAMETER(DTL.Condition_Desc_3_USR);
PARAMETER(LCL.COA_BH_Feedstck_Measure_3);
PARAMETER(LCL.COA_BH_Feedstck_Comment_3);
PARAMETER(LCL.COA_BH_Feedstck_Biomass_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'RFS Feedstock Code not found.'
ERROR(USR4322);

ENDIF;

ENDIF;

//?R14395 DN 01/30/19-Validate Yield % & Percent of Batch 1,2,3.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Yield Percent Cannot be > 100 % & Not 0.
CASE;

// IF DTL.USR Yield Percent is > 100.00 %
IF DTL.USR_Yield_Percent > 100.00;

// Send error message - 'Yield Percent cannot exceed 100.00 %.'
ERROR(USR5109);
MSGPARM(DTL.USR_Yield_Percent);

QUIT;

//?Yield Percent Cannot be > 100 % & Not 0.
// IF DTL.USR Yield Percent is Not Entered
IF DTL.USR_Yield_Percent = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.USR_Yield_Percent);

QUIT;

ENDIF;

//?SUM up Percent Batch 1, 2, & 3 & Validate Total %.
CASE;

// IF DTL.COA BH Feedstck Pct/Ord 1 is Entered
IF DTL.COA_BH_Feedstck_Pct_Ord_1 > 0;

// Percent Total Batch 1,2,3
LCL.Percent_Total_USR = ( DTL.COA_BH_Feedstck_Pct_Ord_1 + DTL.COA_BH_Feedstck_Pct_Ord_2 )          +
+ DTL.cOA_BH_Feedstck_Pct_Ord_3;

//?Cannot Exceed 100% & Must Equal to 100%.
CASE;

// IF LCL.Percent Total USR is > 100.00 %
IF LCL.Percent_Total_USR > 100.00;

// LCL.Generic Message 80 USR = CONCAT(CON.Sum of Percent Batch 1, 2,CON., & 3 cannot exceed 100%.,C
LCL.Generic_Message_80_USR = 'Sum of Percent Batch 1, 2' + ', & 3 cannot exceed 100%.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

//?Cannot Exceed 100% & Must Equal to 100%.
// IF LCL.Percent Total USR is < 100.00 %
IF LCL.Percent_Total_USR < 100.00;

// LCL.Generic Message 80 USR = CONCAT(CON.Sum of Percent Batch 1, 2,CON., & 3 must equal 100%.,CON.
LCL.Generic_Message_80_USR = 'Sum of Percent Batch 1, 2' + ', & 3 must equal 100%.' (0);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Load defaults if screen fields arent entered
//?meas 1
CASE;

// IF DTL.COA BH Feedstck Measure 1 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Measure_1 = WRK.BLANK;

// DTL.COA BH Feedstck Measure 1 = LCL.COA BH Feedstck Measure 1
DTL.COA_BH_Feedstck_Measure_1 = LCL.COA_BH_Feedstck_Measure_1;

ENDIF;

//?meas 2
CASE;

// IF DTL.COA BH Feedstck Measure 2 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Measure_2 = WRK.BLANK;

// DTL.COA BH Feedstck Measure 2 = LCL.COA BH Feedstck Measure 2
DTL.COA_BH_Feedstck_Measure_2 = LCL.COA_BH_Feedstck_Measure_2;

ENDIF;

//?meas 3
CASE;

// IF DTL.COA BH Feedstck Measure 3 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Measure_3 = WRK.BLANK;

// DTL.COA BH Feedstck Measure 3 = LCL.COA BH Feedstck Measure 3
DTL.COA_BH_Feedstck_Measure_3 = LCL.COA_BH_Feedstck_Measure_3;

ENDIF;

//?comm 1
CASE;

// IF DTL.COA BH Feedstck comment 1 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_comment_1 = WRK.BLANK;

// DTL.COA BH Feedstck comment 1 = LCL.COA BH Feedstck comment 1
DTL.COA_BH_Feedstck_comment_1 = LCL.COA_BH_Feedstck_comment_1;

ENDIF;

//?comm 2
CASE;

// IF DTL.COA BH Feedstck Comment 2 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Comment_2 = WRK.BLANK;

// DTL.COA BH Feedstck Comment 2 = LCL.COA BH Feedstck Comment 2
DTL.COA_BH_Feedstck_Comment_2 = LCL.COA_BH_Feedstck_Comment_2;

ENDIF;

//?comm 3
CASE;

// IF DTL.COA BH Feedstck Comment 3 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Comment_3 = WRK.BLANK;

// DTL.COA BH Feedstck Comment 3 = LCL.COA BH Feedstck Comment 3
DTL.COA_BH_Feedstck_Comment_3 = LCL.COA_BH_Feedstck_Comment_3;

ENDIF;

//?biom 1
CASE;

// IF DTL.COA BH Feedstck Biomass 1 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Biomass_1 = WRK.BLANK;

// DTL.COA BH Feedstck Biomass 1 = LCL.COA BH Feedstck Biomass 1
DTL.COA_BH_Feedstck_Biomass_1 = LCL.COA_BH_Feedstck_Biomass_1;

ENDIF;

//?biom 2
CASE;

// IF DTL.COA BH Feedstck Biomass 2 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Biomass_2 = WRK.BLANK;

// DTL.COA BH Feedstck Biomass 2 = LCL.COA BH Feedstck Biomass 2
DTL.COA_BH_Feedstck_Biomass_2 = LCL.COA_BH_Feedstck_Biomass_2;

ENDIF;

//?biom 3
CASE;

// IF DTL.COA BH Feedstck Biomass 3 EQ WRK.BLANK
IF DTL.COA_BH_Feedstck_Biomass_3 = WRK.BLANK;

// DTL.COA BH Feedstck Biomass 3 = LCL.COA BH Feedstck Biomass 3
DTL.COA_BH_Feedstck_Biomass_3 = LCL.COA_BH_Feedstck_Biomass_3;

ENDIF;

//?R14395 DN 01/31/19-Recalculate Feedstock Volume, Do Not Check If Entered.
//?Convert Yield Percent.                        R14395 DN 01/31/19
CASE;

// IF DTL.USR Yield Percent is Entered
IF DTL.USR_Yield_Percent <> 0;

// Convert Pct of Batch 1
LCL.COA_BH_Yield_Percent = DTL.USR_Yield_Percent * 100;

ENDIF;

//?Compute  Volume 1
CASE;

// IF DTL.COA BH Feedstck Pct/Ord 1 is Entered
IF DTL.COA_BH_Feedstck_Pct_Ord_1 > 0;

// AND DTL.USR Yield Percent is Entered
AND DTL.USR_Yield_Percent <> 0;

// AND DTL.COA BH Feedstck Measure 1 is Pounds
AND DTL.COA_BH_Feedstck_Measure_1 = '110';

CASE;

// IF DTL.COA BH Feedstck Pct/Ord 1 is Between 85 - 100
IF DTL.COA_BH_Feedstck_Pct_Ord_1 >= 85;
AND DTL.COA_BH_Feedstck_Pct_Ord_1 <= 100;

// IF *OTHERWISE
IF *OTHERWISE;

//?R14395 DN 01/31/19-Commented Out.
ENDIF;

//?R14395 DN 01/29/19-Updated Calc to Use COA BH Yield Percent.
// Convert Pct of Batch 1
LCL.Percent_7_4_USR = DTL.COA_BH_Feedstck_Pct_Ord_1 / 100 'H';

// Compute:Feedstock Volume1
DTL.COA_BH_Feedstck_Volume_1 = ( ( DTL.COA_Batch_Volume * LCL.Percent_7_4_USR ) * 7.3 ) (          +
LCL.COA_BH_Yield_Percent / 10000 ) 'H';

ENDIF;

//?Compute  Volume 2
CASE;

// IF DTL.COA BH Feedstck Pct/Ord 2 is Entered
IF DTL.COA_BH_Feedstck_Pct_Ord_2 > 0;

// AND DTL.USR Yield Percent is Entered
AND DTL.USR_Yield_Percent <> 0;

// AND DTL.COA BH Feedstck Measure 2 is Pounds
AND DTL.COA_BH_Feedstck_Measure_2 = '110';

//?R14395 DN 01/29/19-Updated Calc to Use COA BH Yield Percent.
// Convert Pct of Batch 2
LCL.Percent_7_4_USR = DTL.COA_BH_Feedstck_Pct_Ord_2 / 100 'H';

// Compute:Feedstock Volume2
DTL.COA_BH_Feedstck_Volume_2 = ( ( DTL.COA_Batch_Volume * LCL.Percent_7_4_USR ) * 7.3 ) (          +
LCL.COA_BH_Yield_Percent / 10000 ) 'H';

ENDIF;

//?Compute  Volume 3
CASE;

// IF DTL.cOA BH Feedstck Pct/Ord 3 is Entered
IF DTL.cOA_BH_Feedstck_Pct_Ord_3 > 0;

// AND DTL.USR Yield Percent is Entered
AND DTL.USR_Yield_Percent <> 0;

// AND DTL.COA BH Feedstck Measure 3 is Pounds
AND DTL.COA_BH_Feedstck_Measure_3 = '110';

//?R14395 DN 01/29/19-Updated Calc to Use COA BH Yield Percent.
// Convert Pct of Batch 3
LCL.Percent_7_4_USR = DTL.cOA_BH_Feedstck_Pct_Ord_3 / 100 'H';

// Compute:Feedstock Volume3
DTL.COA_BH_Feedstck_Volume_3 = ( ( DTL.COA_Batch_Volume * LCL.Percent_7_4_USR ) * 7.3 ) (          +
LCL.COA_BH_Yield_Percent / 10000 ) 'H';

ENDIF;

//?R14395 DN 01/29/19-Re-Compute COA BH Yield Percent Before Updating.
CASE;

// IF DTL.USR Yield Percent is Entered
IF DTL.USR_Yield_Percent <> 0;

// DTL.COA BH Yield Percent =       *
DTL.COA_BH_Yield_Percent = DTL.USR_Yield_Percent * 100;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_Date_Open_for_Ship);
PARAMETER(DTL.COA_Time_Open_for_Ship);
PARAMETER(DTL.COA_Open_for_Ship_Inits);
PARAMETER(DTL.COA_Date_Close_from_Ship);
PARAMETER(DTL.COA_Time_Close_from_Ship);
PARAMETER(DTL.COA_Close_from_Ship_Inits);
PARAMETER(DTL.COA_Gallons_Used);
PARAMETER(DTL.COA_Comment);
PARAMETER(DTL.COA_Batch_Production_Date);
PARAMETER(DTL.COA_Batch_Unused_Time);
PARAMETER(DTL.COA_Specification);
PARAMETER(DTL.COA_RFS_Program_ID);
PARAMETER(DTL.COA_Batch_Header_Sts);
PARAMETER(DTL.COA_Batch_Properties_Cmpl);
PARAMETER(DTL.COA_Batch_Int_Ext_Company);
PARAMETER(DTL.COA_Temperature_Loadout);
PARAMETER(DTL.COA_Batch_Volume);
PARAMETER(DTL.COA_Batch_Denaturant_Vol);
PARAMETER(DTL.COA_RFS_Renew_Fuel_Code);
PARAMETER(DTL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(DTL.COA_Batch_RIN);
PARAMETER(DTL.COA_Batch_Export_Volume);
PARAMETER(DTL.COA_Last_RIN_EEEEEEEE);
PARAMETER(DTL.COA_Density_Loadout);
PARAMETER(DTL.COA_Density_Reference);
PARAMETER(DTL.COA_RIN_Equivalence_Valu#);
PARAMETER(DTL.COA_Batch_Unused_Date);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.RFS_Process_Code);
PARAMETER(DTL.RFS_Fuel_Category_Code);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_Co_Product_Code);
PARAMETER(DTL.COA_Co_Product_Comment);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(DTL.COA_BH_RFS_Version_Nbr);
PARAMETER(DTL.COA_BH_EMTS_Sts);
PARAMETER(DTL.COA_BH_EMTS_Date_Sent);
PARAMETER(DTL.COA_BH_EMTS_Time_Sent);
PARAMETER(DTL.COA_Reviewed_By);
PARAMETER(DTL.COA_BH_Equiv_Value_f_SEP);
PARAMETER(DTL.COA_BH_Yield_Percent);
PARAMETER(DTL.COA_BH_Unused_Cde);
PARAMETER(DTL.COA_Sample_Date);
PARAMETER(DTL.COA_Sample_Time);
PARAMETER(DTL.COA_LIMS_ID);
PARAMETER(DTL.RFS_Feedstock_Code_1);
PARAMETER(DTL.COA_BH_Feedstck_Volume_1);
PARAMETER(DTL.COA_BH_Feedstck_Measure_1);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_1);
PARAMETER(DTL.COA_BH_Feedstck_Pct_Ord_1);
PARAMETER(DTL.COA_BH_Feedstck_comment_1);
PARAMETER(DTL.RFS_Feedstock_Code_2);
PARAMETER(DTL.COA_BH_Feedstck_Volume_2);
PARAMETER(DTL.COA_BH_Feedstck_Measure_2);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_2);
PARAMETER(DTL.COA_BH_Feedstck_Pct_Ord_2);
PARAMETER(DTL.COA_BH_Feedstck_Comment_2);
PARAMETER(DTL.RFS_Feedstock_Code_3);
PARAMETER(DTL.COA_BH_Feedstck_Volume_3);
PARAMETER(DTL.COA_BH_Feedstck_Measure_3);
PARAMETER(DTL.COA_BH_Feedstck_Biomass_3);
PARAMETER(DTL.cOA_BH_Feedstck_Pct_Ord_3);
PARAMETER(DTL.COA_BH_Feedstck_Comment_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


