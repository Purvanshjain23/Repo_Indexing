// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPG1E2R
// ?Date: 14.08.2025 Time: 03:40:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?**** MAX number of fields are on both screens ****
//?**** MAX number of files (50) are used. Additions must be *****
//?****     in XF's                                          *****
//?DLY029T - Auto customer nbr determined by Company Control now
//?If adding, test for and set Auto numbering
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

EXECUTE FUNCTION(RTV Cust # Increment   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1836850;
PARAMETER(*ZERO);
PARAMETER(LCL.Auto_Customers_Numbering);
PARAMETER(LCL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Auto Customers Numbering? = DB1.Auto Customers Numbering?
 PAR.Auto_Customers_Numbering = DB1.Auto_Customers_Numbering;

 //?Ensure that the customer # retrieved is from when the Control
 //?record is locked.
 CASE;

 // IF DB1.Auto Customers Numbering? is yes
 IF DB1.Auto_Customers_Numbering = 'Y';

 EXECUTE FUNCTION(CHG Get lck incr Cust# CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1836814;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Customer_Number_NBR);
 {
  //?USER: Processing before Data update

  // LCL.Record Found USR = CND.Record Found
  LCL.Record_Found_USR = 'Y';

  //?Loop and increment until we find an available Customer #
  // DOW LCL.Record Found USR is Record Found
  DOW LCL.Record_Found_USR = 'Y';

  EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1524178;
  PARAMETER(DB1.Next_Customer_#);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // LCL.Record Found USR = CND.Record Not Found
  LCL.Record_Found_USR = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // DB1.Next Customer # = DB1.Next Customer # + CON.1
  DB1.Next_Customer_# = DB1.Next_Customer_# + 1;

  ENDIF;

  ENDDO;

  // PAR.Customer Number       NBR = DB1.Next Customer #
  PAR.Customer_Number_NBR = DB1.Next_Customer_#;

  // DB1.Next Customer # = DB1.Next Customer # + CON.1
  DB1.Next_Customer_# = DB1.Next_Customer_# + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


//?If auto numbering, setup Parm which will go into key screen
CASE;

// IF LCL.Auto Customers Numbering? is yes
IF LCL.Auto_Customers_Numbering = 'Y';

// PAR.Ship To Customer = LCL.Customer Number       NBR
PAR.Ship_To_Customer = LCL.Customer_Number_NBR;

//?Set program mode to add to bypass key screen
// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?If adding, test for and set Auto numbering
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Auto Numbering Flg RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1839350;
PARAMETER(*ZERO);
PARAMETER(LCL.Auto_Customers_Numbering);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

//?09/25/2007 RMC get co with NO app.
EXECUTE FUNCTION(RTV Default Co No App IF) TYPE(EXCINTFUN)                      AC1628378;
PARAMETER(PAR.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
 PARAMETER(JOB.*USER);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Company Number = LCL.Company Number
 PAR.Company_Number = LCL.Company_Number;

 ENDIF;

}


//?Set to add mode if no customer # passed in
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?Set to add mode if copy from customer is not zero
CASE;

// IF PAR.Copy from Customer Nbr is not equal 0
IF PAR.Copy_from_Customer_Nbr <> *ZERO;

// AND PAR.Ship To Customer is not equal to zero
AND PAR.Ship_To_Customer <> *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?orig point
CASE;

// IF PAR.Origination Point is Called From Menu
IF PAR.Origination_Point = 'M';

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?orig point
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


ENDIF;

//?FP1110 - Get Company Organization -- dsp HPB biodiesel fields if "H"
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?P002045-Only display TPM Loc Code if Live with TPM
// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?E3882SS JJH 01/29/16 - Determine if there is a Sales Customer Sold
//?  To record
EXECUTE FUNCTION(Rtv SalesCstSoldTo Ex RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2118605;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Sales_Sold_To_Exist);
{
 //?USER: Processing if Data record not found

 // PAR.Sales Sold To Exist = CND.No
 PAR.Sales_Sold_To_Exist = 'N';

 //?USER: Process Data record

 // PAR.Sales Sold To Exist = CND.Yes
 PAR.Sales_Sold_To_Exist = 'Y';

 QUIT;

}


//?JBB WI-440  4/14/21 - M3 to JDE E1 Financials
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('E1LIVE');
PARAMETER(LCL.Live_with_E1_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate key screen

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Must enter customer # if auto numbering = N
CASE;

// IF LCL.Auto Customers Numbering? is no
IF LCL.Auto_Customers_Numbering = 'N';

CASE;

// IF KEY.Ship To Customer is equal to zero
IF KEY.Ship_To_Customer = *ZERO;

// Send error message - 'Automatic numbering not in effect, please enter a Customer Number.'
ERROR(USR0199);
MSGPARM(KEY.Ship_To_Customer);

ENDIF;

ENDIF;

//?DLY029T - Auto customer nbr determined by Company Control now
ENDIF;

QUIT;

//?USER: Initialize detail screen (new record)

//?**** If Origination is Menu, then Status field should be blank
//?**** If Origination is Order Entry, then Status field should be 'I'
//?Fill in fields for dtl screen for Customer & Co/Customer Info
CASE;

// IF PAR.Copy from Customer Nbr is not equal 0
IF PAR.Copy_from_Customer_Nbr <> *ZERO;

EXECUTE FUNCTION(RTV All fields         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1478652;
PARAMETER(PAR.Copy_from_Customer_Nbr);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(DTL.Alpha_Search);
PARAMETER(DTL.Federal_Tax_Id);
PARAMETER(DTL.New_Customer_Status);
PARAMETER(DTL.SIC_Number);
PARAMETER(DTL.D_B_Number);
PARAMETER(DTL.D_B_Rating);
PARAMETER(DTL.Date_of_D_B_Rating);
PARAMETER(DTL.Credit_Line_Expire_Date);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Credit_Check_AR_Customer);
PARAMETER(DTL.Credit_Check_Parent_Cust);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.EDI_Invoice_Sts);
PARAMETER(DTL.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(DTL.AR_Credit_Limit);
PARAMETER(DTL.Order_Entry_Hold_Date);
PARAMETER(DTL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Print_Invoice_Sts);
PARAMETER(DTL.Item_Reference_Status);
PARAMETER(DTL.Statement_Print_Frequency);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv All Values FX/EM+ RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1743374;
PARAMETER(PAR.Copy_from_Customer_Nbr);
PARAMETER(DTL.Internet_Password);
PARAMETER(DTL.Email_Address);
PARAMETER(WRK.Email_User_ID);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.EDI_Cust_Duns_Number);
PARAMETER(PAR.EDI_Warehouse_Store_No);
PARAMETER(PAR.State_Tax_ID);
PARAMETER(PAR.Cust_Shipping_Temp_C_F);
PARAMETER(2ND.One_Invoice_Per_PO);
PARAMETER(PAR.EDI_Advanced_Ship_Notice);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(NLL.Air_Freight_Orders);
PARAMETER(DTL.Regional_Mgr_Fax_Email);
PARAMETER(DTL.Employee_Co_Packer_Sale);
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(NLL.Customer_Watch_Flag);
PARAMETER(DTL.Customer_Sales_Region);
PARAMETER(2ND.Customer_Market_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.TF Exempt Code Desc Usr = Condition name of 2ND.Customer TF Exempt Code
2ND.TF_Exempt_Code_Desc_Usr = RTVCND(2ND.Customer_TF_Exempt_Code);

// 2ND.Condition Desc. 1  USR = Condition name of 2ND.One Invoice Per PO
2ND.Condition_Desc_1_USR = RTVCND(2ND.One_Invoice_Per_PO);

EXECUTE FUNCTION(Rtv Company/Cust Data  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1708197;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Copy_from_Customer_Nbr);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Special_Instructions_2);
PARAMETER(2ND.Special_Instructions);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Broker);
PARAMETER(2ND.P_O_Required_Flag);
PARAMETER(2ND.Deliver_after_time);
PARAMETER(2ND.Deliver_before_time);
PARAMETER(NLL.Alt_Remittance_Flag);
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Absorbed_Freight_Rate_CWT);
PARAMETER(2ND.Mileage_To_Customer);
PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
PARAMETER(2ND.Age_Code);
PARAMETER(2ND.Warehouse_Code);
PARAMETER(2ND.Outside_Warehouse_Flag);
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Credit_Contact_Name);
PARAMETER(2ND.Credit_Contact_Telephone);
PARAMETER(2ND.Credit_Contact_Bus_Title);
PARAMETER(2ND.Credit_Contact_Fax_Number);
PARAMETER(2ND.Allow_Man_Qt_WO_Approval);
PARAMETER(2ND.Fax_Invoice_Flag);
PARAMETER(2ND.Fax_Invoice_Fax_Number);
PARAMETER(2ND.Fax_Invoice_Contact_Name);
PARAMETER(2ND.Distributor);
PARAMETER(2ND.Default_Shipping_Co_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Don't default the outside whse to NO              03/09/06 LJB
// 2ND.Warehouse Code = CON.*BLANK
2ND.Warehouse_Code = *BLANK;

// 2ND.Default Shipping Co Sts = CND.No
2ND.Default_Shipping_Co_Sts = 'N';

// 2ND.Mileage To Customer = CON.*ZERO
2ND.Mileage_To_Customer = *ZERO;

// 2ND.Absorbed Freight Rate = CON.*ZERO
2ND.Absorbed_Freight_Rate_CWT = *ZERO;

//?Fill in fields for dtl screen for Customer & Co/Customer Info
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.EDI Invoice Sts = CND.no
DTL.EDI_Invoice_Sts = 'N';

// DTL.Print Invoice Sts = CND.yes
DTL.Print_Invoice_Sts = 'Y';

// DTL.Credit Check A/R Customer = CND.no
DTL.Credit_Check_AR_Customer = 'N';

// DTL.Credit Check Parent Cust = CND.yes
DTL.Credit_Check_Parent_Cust = 'Y';

// DTL.USR A/R Customer Name = CON.*BLANK
DTL.USR_A_R_Customer_Name = *BLANK;

// DTL.USR Bill To Customer Name = CON.*BLANK
DTL.USR_Bill_To_Customer_Name = *BLANK;

// DTL.Order Entry Hold = CND.No Hold
DTL.Order_Entry_Hold = 'N';

// DTL.Ship To Customer Flag = CND.Allow Use as Ship To Cust
DTL.Ship_To_Customer_Flag = 'Y';

// DTL.Description 21a 1 Usr = Condition name of DTL.Ship To Customer Flag
DTL.Description_21a_1_Usr = RTVCND(DTL.Ship_To_Customer_Flag);

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Email When Order Shipped = CND.No
DTL.Email_When_Order_Shipped = 'N';

// DTL.Regional Mgr Fax/Email = CND.NONE
DTL.Regional_Mgr_Fax_Email = *BLANK;

// 2ND.Customer TF Exempt Code = CND.Not Exempt
2ND.Customer_TF_Exempt_Code = 'NE';

// 2ND.TF Exempt Code Desc Usr = Condition name of 2ND.Customer TF Exempt Code
2ND.TF_Exempt_Code_Desc_Usr = RTVCND(2ND.Customer_TF_Exempt_Code);

// 2ND.One Invoice Per PO = CND.No
2ND.One_Invoice_Per_PO = 'N';

// 2ND.Condition Desc. 1  USR = Condition name of 2ND.One Invoice Per PO
2ND.Condition_Desc_1_USR = RTVCND(2ND.One_Invoice_Per_PO);

//?Company Customer Defaults Rules for Add on 2nd screen
DO;

EXECUTE FUNCTION(RTV for Cust Default   RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1108366;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Credit_Limit);
PARAMETER(WRK.A_R_Open_Item_Balance_Fwd);
PARAMETER(WRK.Contract_Status);
PARAMETER(2ND.Special_Instructions_2);
PARAMETER(2ND.Special_Instructions);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Terms_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Credit Contact Telephone = DTL.Telephone Number FF
2ND.Credit_Contact_Telephone = DTL.Telephone_Number_FF;

// 2ND.Credit Contact Fax Number = DTL.Fax Number FF
2ND.Credit_Contact_Fax_Number = DTL.Fax_Number_FF;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('DFTARCODE');
PARAMETER(2ND.G_L_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Customer Name = DTL.Customer Name
2ND.Customer_Name = DTL.Customer_Name;

EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Terms_Description);
PARAMETER(WRK.Terms_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Broker = CND.no
2ND.Broker = 'N';

// 2ND.Record Status = CND.Active
2ND.Record_Status = 'A';

// 2ND.Warehouse Code = CON.*BLANK
2ND.Warehouse_Code = *BLANK;

// 2ND.Default Shipping Co Sts = CND.No
2ND.Default_Shipping_Co_Sts = 'N';

// 2ND.Mileage To Customer = CON.*ZERO
2ND.Mileage_To_Customer = *ZERO;

// 2ND.Absorbed Freight Rate = CON.*ZERO
2ND.Absorbed_Freight_Rate_CWT = *ZERO;

// 2ND.Status Description = Condition name of 2ND.Record Status
2ND.Status_Description = RTVCND(2ND.Record_Status);

// 2ND.Allow Man/Qt WO/Approval = CND.Allow
2ND.Allow_Man_Qt_WO_Approval = 'Y';

//?do this per Tim Wood as of 9/5/03
// 2ND.Fax Invoice Flag = CND.No Automatic Fax Invoice
2ND.Fax_Invoice_Flag = 'N';

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// 2ND.Name  25A  USR = Condition name of 2ND.Age Code
2ND.Name_25A_USR = RTVCND(2ND.Age_Code);

ENDDO;

ENDIF;

// LCL.Allow Shipping Zone Usr = CND.no
LCL.Allow_Shipping_Zone_Usr = 'N';

//?If add mode allow entry of shipping zone
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// LCL.Allow Shipping Zone Usr = CND.yes
LCL.Allow_Shipping_Zone_Usr = 'Y';

ENDIF;

// DTL.Reg Fax/Email Sts DescUsr = Condition name of DTL.Regional Mgr Fax/Email
DTL.Reg_Fax_Email_Sts_DescUsr = RTVCND(DTL.Regional_Mgr_Fax_Email);

//?If add mode default Managed to "I" for In-House Managed
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// 2ND.Field vs. In-House flag = CND.In-House Managed
2ND.Field_vs_In_House_flag = 'I';

ENDIF;

//?Ship-To EST # (Input capable or not)
CASE;

// IF DTL.Ship To Customer Flag is Allow Use as Ship To Cust
IF DTL.Ship_To_Customer_Flag = 'Y';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

//?Ship-To EST # (Input capable or not)
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?USER: Initialize detail screen (existing record)

//?Customer Rules for Existing Customer for DTL screen
DO;

// PAR.A/R Customer Number = DB1.A/R Customer Number
PAR.AR_Customer_Number = DB1.AR_Customer_Number;

// PAR.Parent Customer = DB1.Parent Customer
PAR.Parent_Customer = DB1.Parent_Customer;

// PAR.USR Order Entry Hold = DB1.Order Entry Hold
PAR.USR_Order_Entry_Hold = DB1.Order_Entry_Hold;

// PAR.USR Order Entry Hold Date = DB1.Order Entry Hold Date
PAR.USR_Order_Entry_Hold_Date = DB1.Order_Entry_Hold_Date;

// DTL.State Description = CND.equal to blank
DTL.State_Description = *BLANK;

// DTL.Description = CND.equal to blank
DTL.Description = *BLANK;

// DTL.Country Description = CND.Blank
DTL.Country_Description = *BLANK;

EXECUTE FUNCTION(Rtv All Values FX/EM+ RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1743374;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Internet_Password);
PARAMETER(DTL.Email_Address);
PARAMETER(WRK.Email_User_ID);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.EDI_Cust_Duns_Number);
PARAMETER(PAR.EDI_Warehouse_Store_No);
PARAMETER(PAR.State_Tax_ID);
PARAMETER(PAR.Cust_Shipping_Temp_C_F);
PARAMETER(2ND.One_Invoice_Per_PO);
PARAMETER(PAR.EDI_Advanced_Ship_Notice);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(NLL.Air_Freight_Orders);
PARAMETER(DTL.Regional_Mgr_Fax_Email);
PARAMETER(DTL.Employee_Co_Packer_Sale);
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(NLL.Customer_Watch_Flag);
PARAMETER(DTL.Customer_Sales_Region);
PARAMETER(2ND.Customer_Market_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DB1.State_Code);
PARAMETER(DTL.State_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV County Desc.       RT) TYPE(RTVOBJ) FILE(CAECREP)          AC1147093;
PARAMETER(DB1.State_Code);
PARAMETER(DB1.County_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DB1.Country_Code);
PARAMETER(DTL.Country_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
PARAMETER(2ND.Customer_Market_Code);
PARAMETER(2ND.Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve a/r customer name if not the same number
CASE;

// IF PAR.A/R Customer Number NE PAR.Ship To Customer
IF PAR.AR_Customer_Number <> PAR.Ship_To_Customer;

//?RMC - had to add this because the Ship To Cust was being changed to the AR
// Call program RTV Customer Name     XF.
CALL PROGRAM(RTV Customer Name     XF) ('PPH6XFR');
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(DTL.USR_A_R_Customer_Name);

//?Retrieve a/r customer name if not the same number
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR A/R Customer Name = DB1.Customer Name
DTL.USR_A_R_Customer_Name = DB1.Customer_Name;

ENDIF;

//?Retrieve parent customer name if not the same
CASE;

// IF PAR.Parent Customer NE PAR.Ship To Customer
IF PAR.Parent_Customer <> PAR.Ship_To_Customer;

//?RMC - had to add this because the Ship To Cust was being changed to the Pa
// Call program RTV Customer Name     XF.
CALL PROGRAM(RTV Customer Name     XF) ('PPH6XFR');
PARAMETER(DB1.Parent_Customer);
PARAMETER(DTL.USR_Bill_To_Customer_Name);

//?Retrieve parent customer name if not the same
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Bill To Customer Name = DB1.Customer Name
DTL.USR_Bill_To_Customer_Name = DB1.Customer_Name;

ENDIF;

//?Retrieve g/l customer
CASE;

// IF DTL.Customer G/L Vendor Num is Entered
IF DTL.Customer_G_L_Vendor_Num <> *ZERO;

// Call program Get Vendor Address    RT.
CALL PROGRAM(Get Vendor Address    RT) ('VNDFAXR');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.USR_Description);
PARAMETER(WRK.Address_1);
PARAMETER(WRK.Address_2);
PARAMETER(WRK.Address_3);
PARAMETER(WRK.VND_City);
PARAMETER(WRK.VND_State);
PARAMETER(WRK.VND_Zip);
PARAMETER(WRK.Area_Code);
PARAMETER(WRK.Telephone);
PARAMETER(WRK.Fax_Area_Code_#);
PARAMETER(WRK.Fax_Telephone);
PARAMETER(WRK.Fax_Area_Code_#_2);
PARAMETER(WRK.Fax_Telephone_2);
PARAMETER(WRK.Vendor_1099);
PARAMETER(WRK.Vendor_Tax_Id);
PARAMETER(WRK.VND_Country);
PARAMETER(WRK.Status_Y_or_N);

ENDIF;

//?T8763 01/19/17 DN  - Retrieve M3 Supplier ID.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?DN W84562 10/18/21-Replaced RTVOBJ to Get Addtional Info.
//?EL WI572  04/26/23-Get Ship To Est Nbr
EXECUTE FUNCTION(Rtv for Customer/Co CstRT) TYPE(RTVOBJ) FILE(PUAAREP)          AC2200236;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(2ND.Automated_A_R_Aging_Rpt);
PARAMETER(2ND.USR_Ship_To_Est_#);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.M3 Supplier ID = DTL.M3 Supplier ID
PAR.M3_Supplier_ID = DTL.M3_Supplier_ID;

ENDIF;

//?WI464 11/24/21 JBB - Pallet Management: Validate Pallet Type
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Pallet Type/Desc  XF.
CALL PROGRAM(Rtv Pallet Type/Desc  XF) ('PUTPXFR');
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(2ND.PM_Pallet_Type);
PARAMETER(2ND.PM_Description);
PARAMETER(LCL.Record_Found_USR);

// 2ND.Pallet Type NOREF = 2ND.PM Pallet Type
2ND.Pallet_Type_NOREF = 2ND.PM_Pallet_Type;

ENDIF;

//?Status description for change mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

ENDIF;

// PAR.USR Formula Meth Type Sts = CND.no
PAR.USR_Formula_Meth_Type_Sts = 'N';

// PAR.USR Market Meth Type Sts = CND.no
PAR.USR_Market_Meth_Type_Sts = 'N';

// PAR.USR Manual Meth Type Sts = CND.no
PAR.USR_Manual_Meth_Type_Sts = 'N';

// PAR.USR Extend Meth Type Sts = CND.no
PAR.USR_Extend_Meth_Type_Sts = 'N';

//?Dsply A/R credit limit from A/R customer record - ARS032
CASE;

// IF PAR.Ship To Customer NE PAR.A/R Customer Number
IF PAR.Ship_To_Customer <> PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(WRK.Parent_Credit_Limit);
PARAMETER(DTL.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Flag 1 = CND.No
WRK.USR_Flag_1 = 'N';

ENDIF;

//?Dsply Parent credit limit from Parent customer record - ARS032
CASE;

// IF PAR.Ship To Customer NE PAR.Parent Customer
IF PAR.Ship_To_Customer <> PAR.Parent_Customer;

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(PAR.Parent_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Flag 2 = CND.No
WRK.USR_Flag_2 = 'N';

ENDIF;

// DTL.Description 21a 1 Usr = Condition name of DB1.Ship To Customer Flag
DTL.Description_21a_1_Usr = RTVCND(DB1.Ship_To_Customer_Flag);

// DTL.Description 14A      USR = Condition name of DB1.Statement Print Frequency
DTL.Description_14A_USR = RTVCND(DB1.Statement_Print_Frequency);

//?*------------------------------------------------------------*
//?Make Parent Output Only if dependencies exist.
CASE;

// IF PAR.Ship To Customer EQ PAR.Parent Customer
IF PAR.Ship_To_Customer = PAR.Parent_Customer;

EXECUTE FUNCTION(Val Parent On Other   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1632838;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 CASE;

 // IF DB1.Ship To Customer EQ PAR.Parent Customer
 IF DB1.Ship_To_Customer = PAR.Parent_Customer;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Ship To Customer NE DB1.Parent Customer
 IF DB1.Ship_To_Customer <> DB1.Parent_Customer;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// LCL.Output Only 1 USR = CND.yes
LCL.Output_Only_1_USR = 'Y';

ENDIF;

//?Make Parent Output Only if dependencies exist.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Output Only 1 USR = CND.no
LCL.Output_Only_1_USR = 'N';

ENDIF;

//?*------------------------------------------------------------*
//?PK0040 Default One PO per Invoice = N
CASE;

// IF 2ND.One Invoice Per PO is Blank
IF 2ND.One_Invoice_Per_PO = *BLANK;

// 2ND.One Invoice Per PO = CND.No
2ND.One_Invoice_Per_PO = 'N';

ENDIF;

//?** Retrieve Customer Watch flag                E00431
EXECUTE FUNCTION(Rtv All Values-all    RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1942283;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(NLL.Internet_Password);
PARAMETER(NLL.Email_Address);
PARAMETER(NLL.Email_User_ID);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Cust_Duns_Number);
PARAMETER(NLL.EDI_Warehouse_Store_No);
PARAMETER(NLL.State_Tax_ID);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.One_Invoice_Per_PO);
PARAMETER(NLL.EDI_Advanced_Ship_Notice);
PARAMETER(NLL.Customer_G_L_Vendor_Num);
PARAMETER(NLL.Air_Freight_Orders);
PARAMETER(NLL.Regional_Mgr_Fax_Email);
PARAMETER(NLL.Employee_Co_Packer_Sale);
PARAMETER(NLL.Customer_TF_Exempt_Code);
PARAMETER(DTL.Customer_Watch_Flag);
PARAMETER(NLL.Customer_Sales_Region);
PARAMETER(NLL.Customer_Market_Code);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Description 2 usr = Condition name of DTL.Customer Watch Flag
DTL.Description_2_usr = RTVCND(DTL.Customer_Watch_Flag);

ENDDO;

//?Get the Company Customer for Company 360 360 is the Default
DO;

//?Read Company Customer for user's default company
//?When changes are applied to the Company/Customer all plant companies
//?will be either created or changed with the data from the 2nd screen
EXECUTE FUNCTION(Rtv Company/Cust Data  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1708197;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Special_Instructions_2);
PARAMETER(2ND.Special_Instructions);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Broker);
PARAMETER(2ND.P_O_Required_Flag);
PARAMETER(2ND.Deliver_after_time);
PARAMETER(2ND.Deliver_before_time);
PARAMETER(NLL.Alt_Remittance_Flag);
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Absorbed_Freight_Rate_CWT);
PARAMETER(2ND.Mileage_To_Customer);
PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
PARAMETER(2ND.Age_Code);
PARAMETER(2ND.Warehouse_Code);
PARAMETER(2ND.Outside_Warehouse_Flag);
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Credit_Contact_Name);
PARAMETER(2ND.Credit_Contact_Telephone);
PARAMETER(2ND.Credit_Contact_Bus_Title);
PARAMETER(2ND.Credit_Contact_Fax_Number);
PARAMETER(2ND.Allow_Man_Qt_WO_Approval);
PARAMETER(2ND.Fax_Invoice_Flag);
PARAMETER(2ND.Fax_Invoice_Fax_Number);
PARAMETER(2ND.Fax_Invoice_Contact_Name);
PARAMETER(2ND.Distributor);
PARAMETER(2ND.Default_Shipping_Co_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(DTL.City);
PARAMETER(LCL.Destination_City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


EXECUTE FUNCTION(RTV Zone for City-ST   RT) TYPE(RTVOBJ) FILE(PDLUREP)          AC1484676;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.State_Code);
PARAMETER(LCL.Destination_City);
PARAMETER(2ND.Shipping_Zone_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Account info-Co/ShpRT) TYPE(RTVOBJ) FILE(OMGZCPP)          AC1708801;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.Extra_Amount_1);
PARAMETER(WRK.Extra_Number_1);
PARAMETER(WRK.Extra_Status_1);
PARAMETER(WRK.@G_L_Acct_Number);
PARAMETER(WRK.@G_L_Acct_Number_Sub);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.G/L Account for Dr = CON.*BLANK
 PAR.SH_Expense_Bucket = *BLANK;

 // PAR.G/L Sub Acount for Dr = CON.*BLANK
 PAR.G_L_Sub_Account = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Terms_Description);
PARAMETER(WRK.Terms_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Sales_Route_Description);
PARAMETER(2ND.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(2ND.Salesperson_Code);
PARAMETER(2ND.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Group Descrp. RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1330037;
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Group Descrp. RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1330037;
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.USR_Cust_Term_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 2ND.Status Description = Condition name of 2ND.Record Status
2ND.Status_Description = RTVCND(2ND.Record_Status);

// LCL.Freight Overate Rate = 2ND.Freight Overate Rate
LCL.Co_Cust_Overage_Rate_CWT = 2ND.Co_Cust_Overage_Rate_CWT;

// LCL.Record Status = DB1.Record Status
LCL.Record_Status = DB1.Record_Status;

// LCL.Credit Contact Name = 2ND.Credit Contact Name
LCL.Credit_Contact_Name = 2ND.Credit_Contact_Name;

// LCL.Credit Contact Fax Number = 2ND.Credit Contact Fax Number
LCL.Credit_Contact_Fax_Number = 2ND.Credit_Contact_Fax_Number;

EXECUTE FUNCTION(RTV Type Code Desc.    RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1249965;
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Description_21A_Usr);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// 2ND.Name 25A USR = Condition name of 2ND.Age Code
2ND.Name_25A_USR = RTVCND(2ND.Age_Code);

EXECUTE FUNCTION(Rtv Company/Cust Data  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1708197;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Special_Instructions_2);
PARAMETER(2ND.Special_Instructions);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Broker);
PARAMETER(2ND.P_O_Required_Flag);
PARAMETER(2ND.Deliver_after_time);
PARAMETER(2ND.Deliver_before_time);
PARAMETER(NLL.Alt_Remittance_Flag);
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Absorbed_Freight_Rate_CWT);
PARAMETER(2ND.Mileage_To_Customer);
PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
PARAMETER(2ND.Age_Code);
PARAMETER(2ND.Warehouse_Code);
PARAMETER(2ND.Outside_Warehouse_Flag);
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Credit_Contact_Name);
PARAMETER(2ND.Credit_Contact_Telephone);
PARAMETER(2ND.Credit_Contact_Bus_Title);
PARAMETER(2ND.Credit_Contact_Fax_Number);
PARAMETER(2ND.Allow_Man_Qt_WO_Approval);
PARAMETER(2ND.Fax_Invoice_Flag);
PARAMETER(2ND.Fax_Invoice_Fax_Number);
PARAMETER(2ND.Fax_Invoice_Contact_Name);
PARAMETER(2ND.Distributor);
PARAMETER(2ND.Default_Shipping_Co_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FP1110 RMC 01/07/08 RMC Get HPB Fields
//?E01654 RMC 08/18/11 RMC Get other fields
EXECUTE FUNCTION(Rtv HPB Cust Fld/Whs  RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1972812;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(2ND.HPB_Employer_ID_#);
PARAMETER(2ND.HPB_ULSD_Company_#);
PARAMETER(2ND.HPB_ULSD_Facility_ID);
PARAMETER(2ND.CCE_GL_Sales_Acct_Type);
PARAMETER(2ND.Item_Age_Days_Fresh);
PARAMETER(2ND.Item_Age_Days_Frozen);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?If change mode and shipping zone is blank allow entry
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF 2ND.Shipping Zone Code is Not Entered
IF 2ND.Shipping_Zone_Code = *BLANK;

// LCL.Allow Shipping Zone Usr = CND.yes
LCL.Allow_Shipping_Zone_Usr = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Allow Shipping Zone Usr = CND.no
LCL.Allow_Shipping_Zone_Usr = 'N';

ENDIF;

ENDIF;

// DTL.Reg Fax/Email Sts DescUsr = Condition name of DTL.Regional Mgr Fax/Email
DTL.Reg_Fax_Email_Sts_DescUsr = RTVCND(DTL.Regional_Mgr_Fax_Email);

// 2ND.TF Exempt Code Desc Usr = Condition name of 2ND.Customer TF Exempt Code
2ND.TF_Exempt_Code_Desc_Usr = RTVCND(2ND.Customer_TF_Exempt_Code);

// 2ND.Condition Desc. 1  USR = Condition name of 2ND.One Invoice Per PO
2ND.Condition_Desc_1_USR = RTVCND(2ND.One_Invoice_Per_PO);

// WRK.Customer TF Exempt CodeSV = 2ND.Customer TF Exempt Code
WRK.Customer_TF_Exempt_CodeSV = 2ND.Customer_TF_Exempt_Code;

//?Only display Field Managed description if flag is entered  E004044
CASE;

// IF 2ND.Field vs. In-House flag is Managed Flag
IF 2ND.Field_vs_In_House_flag = 'F'/'I';

// 2ND.Description 21a 4 Usr = Condition name of 2ND.Field vs. In-House flag
2ND.Description_21a_4_Usr = RTVCND(2ND.Field_vs_In_House_flag);

ENDIF;

//?Ship-To EST # (Input capable or not)
CASE;

// IF DTL.Ship To Customer Flag is Allow Use as Ship To Cust
IF DTL.Ship_To_Customer_Flag = 'Y';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

//?Ship-To EST # (Input capable or not)
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Validate detail screen fields

//?SEL: Market Code, TPM Location
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?F4=Market Code
CASE;

// IF PGM.*Cursor field <IS> 2ND.Customer Market Code
IF PGM.*Cursor_field = 2ND.Customer_Market_Code;

// Call program Sel Market            SR.
CALL PROGRAM(Sel Market            SR) ('PMQYSRR');
PARAMETER(2ND.Customer_Market_Code);

ENDIF;

//?F4=Pallet Type
CASE;

// IF PGM.*Cursor field <IS> 2ND.Pallet Type NOREF
IF PGM.*Cursor_field = 2ND.Pallet_Type_NOREF;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(2ND.Pallet_Type_NOREF);
PARAMETER('N');

// 2ND.PM Pallet Type = 2ND.Pallet Type NOREF
2ND.PM_Pallet_Type = 2ND.Pallet_Type_NOREF;

ENDIF;

ENDIF;

//?Customer Validation
DO;

// DTL.State Description = CND.equal to blank
DTL.State_Description = *BLANK;

// DTL.Description = CND.equal to blank
DTL.Description = *BLANK;

// DTL.Country Description = CND.Blank
DTL.Country_Description = *BLANK;

//?Process A/R Customer search request
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.A/R Customer Number
AND PGM.*Cursor_field = DTL.AR_Customer_Number;

// WRK.A/R Customer Number = DTL.A/R Customer Number
WRK.AR_Customer_Number = DTL.AR_Customer_Number;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(WRK.AR_Customer_Number);

CASE;

// IF WRK.A/R Customer Number is not equal to zero
IF WRK.AR_Customer_Number <> *ZERO;

// DTL.A/R Customer Number = WRK.A/R Customer Number
DTL.AR_Customer_Number = WRK.AR_Customer_Number;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process Parent Customer search request
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Parent Customer
AND PGM.*Cursor_field = DTL.Parent_Customer;

// WRK.Parent Customer = DTL.Parent Customer
WRK.Parent_Customer = DTL.Parent_Customer;

// Call program SEL Customer by Name   SR.
CALL PROGRAM(SEL Customer by Name   SR) ('PDCJSRR');
PARAMETER(WRK.Parent_Customer);

CASE;

// IF WRK.Parent Customer is not equal to zero
IF WRK.Parent_Customer <> *ZERO;

// DTL.Parent Customer = WRK.Parent Customer
DTL.Parent_Customer = WRK.Parent_Customer;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process G/L Vendor search request    10/09/03
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Customer G/L Vendor Num
AND PGM.*Cursor_field = DTL.Customer_G_L_Vendor_Num;

// LCL.Customer G/L Vendor Num = DTL.Customer G/L Vendor Num
LCL.Customer_G_L_Vendor_Num = DTL.Customer_G_L_Vendor_Num;

// Call program Sel Vendor Address Acc UP.
CALL PROGRAM(Sel Vendor Address Acc UP) ('VNDACCS');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.USR_Description);
PARAMETER(WRK.Address_1);
PARAMETER(WRK.Address_2);
PARAMETER(WRK.Address_3);
PARAMETER(WRK.VND_City);
PARAMETER(WRK.VND_State);
PARAMETER(WRK.VND_Zip);
PARAMETER(WRK.Area_Code);
PARAMETER(WRK.Telephone);
PARAMETER(WRK.Fax_Area_Code_#);
PARAMETER(WRK.Fax_Telephone);
PARAMETER(WRK.Fax_Area_Code_#_2);
PARAMETER(WRK.Fax_Telephone_2);
PARAMETER(WRK.Vendor_1099);
PARAMETER(WRK.Vendor_Tax_Id);
PARAMETER(WRK.VND_Country);
PARAMETER(WRK.Status_Y_or_N);

CASE;

// IF DTL.Customer G/L Vendor Num is Not Entered
IF DTL.Customer_G_L_Vendor_Num = *ZERO;

// DTL.Customer G/L Vendor Num = LCL.Customer G/L Vendor Num
DTL.Customer_G_L_Vendor_Num = LCL.Customer_G_L_Vendor_Num;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?If Country is USA or CAN, City, State, Zip are required
CASE;

// IF DTL.Country Code is USA
IF DTL.Country_Code = 'USA';

// OR DTL.Country Code is Canada
OR DTL.Country_Code = 'CAN';

// OR DTL.Country Code is Blank
OR DTL.Country_Code = *BLANK;

//?City Required
CASE;

// IF DTL.City is Blank
IF DTL.City = *BLANK;

// Send error message - 'City required if country is USA or Canada.'
ERROR(USR2336);
MSGPARM(DTL.City);

ENDIF;

//?State Required
CASE;

// IF DTL.State Code is *Blanks
IF DTL.State_Code = *BLANK;

// Send error message - 'State required if country is USA or Canada.'
ERROR(USR2337);
MSGPARM(DTL.State_Code);

ENDIF;

//?Zip/Postal Required
CASE;

// IF DTL.Zip/Postal Code is Blank
IF DTL.Zip_Postal_Code = *BLANK;

// Send error message - 'Zip/Postal required if country is USA or Canada.'
ERROR(USR2338);
MSGPARM(DTL.Zip_Postal_Code);

//?Zip/Postal Required
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// LCL.Country Code = DTL.Country Code
LCL.Country_Code = DTL.Country_Code;

//?Validate USA STATE/Zip only   E2247 RMC 12/18/12
CASE;

// IF LCL.Country Code is Blank
IF LCL.Country_Code = *BLANK;

// OR LCL.Country Code is USA
OR LCL.Country_Code = 'USA';

// LCL.MPR Country = CND.USA
LCL.MPR_Country = 'USA';

// LCL.Text USR 5 = DTL.Zip/Postal Code
LCL.Text_USR_5 = DTL.Zip_Postal_Code;

// LCL.MPR Zip Code = CVTVAR(LCL.Text USR 5)
LCL.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

EXECUTE FUNCTION(Val Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2058753;
PARAMETER(LCL.MPR_Country);
PARAMETER(DTL.State_Code);
PARAMETER(LCL.MPR_Zip_Code);
PARAMETER(LCL.Return_Code_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code Usr = CND.*Record does not exist
 PAR.Return_Code_Usr = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

}


CASE;

// IF LCL.Return Code Usr is *Record does not exist
IF LCL.Return_Code_Usr = 'Y2U0005';

// Send information message - 'State/Zip &1 &2 not found MPR Omaha Rate Table'
MESSAGE(USR4563 *INFO);
MSGPARM(DTL.State_Code);
MSGPARM(DTL.Zip_Postal_Code);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Status Description for change mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

ENDIF;

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.State_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Territory using St RT) TYPE(RTVOBJ) FILE(PDLWREP)          AC1494008;
PARAMETER(DTL.State_Code);
PARAMETER(WRK.Territory_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Territory State not found.'
ERROR(USR2583);
MSGPARM(DTL.State_Code);

ENDIF;

EXECUTE FUNCTION(RTV County Desc.       RT) TYPE(RTVOBJ) FILE(CAECREP)          AC1147093;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.Country_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If A/R Customer is changed then there can not be a A/R Sum Rec.
//?Check A/R Summary Record
CASE;

// IF PAR.A/R Customer Number NE DTL.A/R Customer Number
IF PAR.AR_Customer_Number <> DTL.AR_Customer_Number;

// AND PAR.A/R Customer Number EQ DTL.Ship To Customer
AND PAR.AR_Customer_Number = DTL.Ship_To_Customer;

// PAR.USR Tot. Due W/O CB = CND.Zero
PAR.USR_Tot_Due_W_O_CB = *ZERO;

EXECUTE FUNCTION(RTV Check Exist A/R #  RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1420452;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.USR_Tot_Due_W_O_CB);
{
 //?USER: Initialize routine

 // PAR.USR Tot. Due W/O CB = CND.Zero
 PAR.USR_Tot_Due_W_O_CB = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 //?1/24/2006 SLM Routine was replace the accumulate field when the
 //?              next record for the next company was read
 // PAR.USR Tot. Due W/O CB = DB1.Age $ Due-Current-W/O CB + PAR.USR Tot. Due W/O CB
 PAR.USR_Tot_Due_W_O_CB = DB1.Age_Due_Current_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

 // PAR.USR Tot. Due W/O CB = DB1.Age $ Due-Aging 1-W/O CB + PAR.USR Tot. Due W/O CB
 PAR.USR_Tot_Due_W_O_CB = DB1.Age_Due_Aging_1_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

 // PAR.USR Tot. Due W/O CB = DB1.Age $ Due-Aging 2-W/O CB + PAR.USR Tot. Due W/O CB
 PAR.USR_Tot_Due_W_O_CB = DB1.Age_Due_Aging_2_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

 // PAR.USR Tot. Due W/O CB = DB1.Age $ Due-Aging 3-W/O CB + PAR.USR Tot. Due W/O CB
 PAR.USR_Tot_Due_W_O_CB = DB1.Age_Due_Aging_3_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

 // PAR.USR Tot. Due W/O CB = DB1.Age $ Due-Aging 4-W/O CB + PAR.USR Tot. Due W/O CB
 PAR.USR_Tot_Due_W_O_CB = DB1.Age_Due_Aging_4_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

 // PAR.USR Tot. Due W/O CB = DB1.Age $ Due-Aging 5-W/O CB + PAR.USR Tot. Due W/O CB
 PAR.USR_Tot_Due_W_O_CB = DB1.Age_Due_Aging_5_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

}


CASE;

// IF PAR.USR Tot. Due W/O CB is Not Zero
IF PAR.USR_Tot_Due_W_O_CB <> *ZERO;

// Send error message - 'A/R Summary Record Exists.  A/R Customer Number Status can not be changed.'
ERROR(USR2359);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?Email address must be entered if Email Order Shipped is Yes
CASE;

// IF DTL.Email When Order Shipped is Yes
IF DTL.Email_When_Order_Shipped = 'Y';

// AND DTL.Email Address is Blank
AND DTL.Email_Address = *BLANK;

// Send error message - 'Email address must be entered if Email when Order Shipped flag is Yes.'
ERROR(USR2886);
MSGPARM(DTL.Email_Address);

ENDIF;

CASE;

// IF DTL.EDI Invoice Sts is blank
IF DTL.EDI_Invoice_Sts = *BLANK;

// DTL.EDI Invoice Sts = CND.no
DTL.EDI_Invoice_Sts = 'N';

ENDIF;

CASE;

// IF DTL.Print Invoice Sts is blank
IF DTL.Print_Invoice_Sts = *BLANK;

// DTL.Print Invoice Sts = CND.yes
DTL.Print_Invoice_Sts = 'Y';

ENDIF;

//?Val cust g/l vendor
CASE;

// IF DTL.Customer G/L Vendor Num is Entered
IF DTL.Customer_G_L_Vendor_Num <> *ZERO;

// Call program Get Vendor Address    RT.
CALL PROGRAM(Get Vendor Address    RT) ('VNDFAXR');
PARAMETER(WRK.*Return_code);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.Pass_Name);
PARAMETER(WRK.Address_1);
PARAMETER(WRK.Address_2);
PARAMETER(WRK.Address_3);
PARAMETER(WRK.VND_City);
PARAMETER(WRK.VND_State);
PARAMETER(WRK.VND_Zip);
PARAMETER(WRK.Area_Code);
PARAMETER(WRK.Telephone);
PARAMETER(WRK.Fax_Area_Code_#);
PARAMETER(WRK.Fax_Telephone);
PARAMETER(WRK.Fax_Area_Code_#_2);
PARAMETER(WRK.Fax_Telephone_2);
PARAMETER(WRK.Vendor_1099);
PARAMETER(WRK.Vendor_Tax_Id);
PARAMETER(WRK.VND_Country);
PARAMETER(WRK.Status_Y_or_N);

CASE;

// IF WRK.*Return code is *Normal
IF WRK.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid G/L Vendor Nbr &1'
ERROR(USR3298);
MSGPARM(DTL.Customer_G_L_Vendor_Num);

ENDIF;

ENDIF;

// 2ND.TF Exempt Code Desc Usr = Condition name of 2ND.Customer TF Exempt Code
2ND.TF_Exempt_Code_Desc_Usr = RTVCND(2ND.Customer_TF_Exempt_Code);

//?E0952  8/25/10 RMC HPB Only E0952
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

CASE;

// IF 2ND.Type Code is Not RIN Customer
IF 2ND.Type_Code = 'NR';

// IF 2ND.Type Code is Inter-Comp Sales Agreemnt
IF 2ND.Type_Code = 'IS';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF 2ND.HPB ULSD Company # is Not Entered
IF 2ND.HPB_ULSD_Company_# = *BLANK;

// Send error message - 'ULSD Company # required for Customer Type &2'
ERROR(USR4361);
MSGPARM(2ND.HPB_ULSD_Company_#);
MSGPARM(2ND.Type_Code);

ENDIF;

ENDIF;

ENDIF;

//?Managed Field cannot be blank                         E004044
CASE;

// IF 2ND.Field vs. In-House flag is No Secured Terms
IF 2ND.Field_vs_In_House_flag = *BLANK;

// Send error message - 'Field cannot be blank'
ERROR(USR3741);
MSGPARM(2ND.Field_vs_In_House_flag);

ENDIF;

//?Validate Pallet Type if entered
CASE;

// IF 2ND.Pallet Type NOREF is Entered
IF 2ND.Pallet_Type_NOREF <> *BLANK;

// 2ND.PM Pallet Type = 2ND.Pallet Type NOREF
2ND.PM_Pallet_Type = 2ND.Pallet_Type_NOREF;

// Call program Rtv Pallet Master     XF.
CALL PROGRAM(Rtv Pallet Master     XF) ('PUTRXFR');
PARAMETER(2ND.Pallet_Type_NOREF);
PARAMETER(2ND.PM_Description);
PARAMETER(NLL.Misc_Tare_Weight);
PARAMETER(NLL.Rental_Y_N);
PARAMETER(NLL.Effective_Date);
PARAMETER(NLL.Product_ID_GTIN);
PARAMETER(NLL.Interchange_Code);
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(NLL.Contact_Name);
PARAMETER(NLL.ASN_Ready_Y_N);
PARAMETER(NLL.Status_1_Unused);
PARAMETER(NLL.Status_2_Unused);
PARAMETER(NLL.Text_75_Unused);
PARAMETER(NLL.Record_Status);
PARAMETER(LCL.Record_Found_USR);

CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(2ND.Pallet_Type_NOREF);

ENDIF;

//?Validate Pallet Type if entered
// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.PM Pallet Type = CND.None
2ND.PM_Pallet_Type = *BLANK;

// 2ND.PM Description = CON.*BLANK
2ND.PM_Description = *BLANK;

ENDIF;

//?DN W84562 10/15/21-Validate Automated A/R Aging Rpt.
CASE;

// IF 2ND.Automated A/R Aging Rpt is Entered
IF 2ND.Automated_A_R_Aging_Rpt <> *BLANK;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(2ND.Automated_A_R_Aging_Rpt);
PARAMETER(LCL.Active_Status_Flag);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF NOT LCL.Active Status Flag is Active
IF ! LCL.Active_Status_Flag = 'A';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(2ND.Automated_A_R_Aging_Rpt);

QUIT;

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Master not found.'
ERROR(USR1158);
MSGPARM(2ND.Automated_A_R_Aging_Rpt);

QUIT;

ENDIF;

ENDIF;

ENDDO;

//?Co/Customer validation & Relationship
DO;

//?Perform the F4 SELECTS for the Co/Customer relationship sel
DO;

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

//?Terms
CASE;

// IF PGM.*Cursor field <IS> 2ND.Terms Code
IF PGM.*Cursor_field = 2ND.Terms_Code;

// Call program SEL Active Terms       SR.
CALL PROGRAM(SEL Active Terms       SR) ('PDDMSRR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Terms_Code);

ENDIF;

//?Sales Route
CASE;

// IF PGM.*Cursor field <IS> 2ND.Sales Route Code
IF PGM.*Cursor_field = 2ND.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(2ND.Sales_Route_Code);

ENDIF;

//?Carrier
CASE;

// IF PGM.*Cursor field <IS> 2ND.Carrier Code
IF PGM.*Cursor_field = 2ND.Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(2ND.Carrier_Code);

ENDIF;

//?Type codes
CASE;

// IF PGM.*Cursor field <IS> 2ND.Type Code
IF PGM.*Cursor_field = 2ND.Type_Code;

// Call program SEL Type Codes         SR.
CALL PROGRAM(SEL Type Codes         SR) ('CABVSRR');
PARAMETER(2ND.Type_Code);

ENDIF;

//?Warehouse
CASE;

// IF PGM.*Cursor field <IS> 2ND.Warehouse Code
IF PGM.*Cursor_field = 2ND.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(2ND.Warehouse_Code);

ENDIF;

//?Customer Group Master
CASE;

// IF PGM.*Cursor field <IS> 2ND.Customer Group Code
IF PGM.*Cursor_field = 2ND.Customer_Group_Code;

// Call program SEL Active Cust Grp    SR.
CALL PROGRAM(SEL Active Cust Grp    SR) ('PDSASRR');
PARAMETER(2ND.Customer_Group_Code);

ENDIF;

//?Customer Group Master 2
CASE;

// IF PGM.*Cursor field <IS> 2ND.Customer Group Code 2
IF PGM.*Cursor_field = 2ND.Customer_Group_Code_2;

// Call program SEL Active Cust Grp    SR.
CALL PROGRAM(SEL Active Cust Grp    SR) ('PDSASRR');
PARAMETER(2ND.Customer_Group_Code_2);

ENDIF;

//?Commodity Markets
CASE;

// IF PGM.*Cursor field <IS> 2ND.Commodity Market Code
IF PGM.*Cursor_field = 2ND.Commodity_Market_Code;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(2ND.Commodity_Market_Code);

ENDIF;

//?Automated A/R Aging Rpt                     DN W84562 10/15/21
CASE;

// IF PGM.*Cursor field <IS> 2ND.Automated A/R Aging Rpt
IF PGM.*Cursor_field = 2ND.Automated_A_R_Aging_Rpt;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(2ND.Automated_A_R_Aging_Rpt);

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(Val Co/Customer Rel    IF) TYPE(EXCINTFUN)                     AC1708631;
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.Commodity_Market_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Terms_Code);
 PARAMETER(WRK.Description);
 PARAMETER(WRK.Terms_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Terms Code &1 Not Found'
 ERROR(USR3387);
 MSGPARM(PAR.Terms_Code);

 ENDIF;

 EXECUTE FUNCTION(RTV PD Sales Route Act RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1708557;
 PARAMETER(PAR.Sales_Route_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Sales Route &1 Not Found'
 ERROR(USR3386);
 MSGPARM(PAR.Sales_Route_Code);

 ENDIF;

 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
 PARAMETER(PAR.Carrier_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Carrier doesn't exist'
 ERROR(USR1252);
 MSGPARM(PAR.Carrier_Code);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Val Type Codes         RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1708581;
 PARAMETER(PAR.Type_Code);
 {
  //?USER: Initialize routine

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Type Code &1 Not Found'
 ERROR(USR3388);
 MSGPARM(PAR.Type_Code);

 ENDIF;

 CASE;

 // IF PAR.Customer Group Code is entered
 IF PAR.Customer_Group_Code <> *BLANK;

 EXECUTE FUNCTION(Val Cust Group Descrp  RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1708585;
 PARAMETER(PAR.Customer_Group_Code);
 {
  //?USER: Initialize routine

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Customer Group Master &1 Not Found'
 ERROR(USR3389);
 MSGPARM(PAR.Customer_Group_Code);

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Customer Group Code 2 is entered
 IF PAR.Customer_Group_Code_2 <> *BLANK;

 EXECUTE FUNCTION(Val Cust Group Descrp  RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1708585;
 PARAMETER(PAR.Customer_Group_Code_2);
 {
  //?USER: Initialize routine

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Customer Group Master &1 Not Found'
 ERROR(USR3389);
 MSGPARM(PAR.Customer_Group_Code_2);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV & VLD Commod. Mkt  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1382869;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Commodity_Market_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Commodity Market not found'
 ERROR(USR2162);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

}


//?Select G/L Code
CASE;

// IF 2ND.G/L Code is Selection
IF 2ND.G_L_Code = '?';

// WRK.G/L Code = 2ND.G/L Code
WRK.G_L_Code = 2ND.G_L_Code;

// Call program Sel G/L Act Cde 2 HPE XF.
CALL PROGRAM(Sel G/L Act Cde 2 HPE XF) ('PKVCSRR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

ENDIF;

//?Prompt G/L code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> 2ND.G/L Code
AND PGM.*Cursor_field = 2ND.G_L_Code;

// WRK.G/L Code = 2ND.G/L Code
WRK.G_L_Code = 2ND.G_L_Code;

// Call program Sel G/L Act Cde 2 HPE XF.
CALL PROGRAM(Sel G/L Act Cde 2 HPE XF) ('PKVCSRR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

ENDIF;

//?Validate G/L Code
CASE;

// IF 2ND.G/L Code is Entered
IF 2ND.G_L_Code <> *BLANK;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

//?Price Audit processing
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF LCL.Freight Overate Rate NE 2ND.Freight Overate Rate
IF LCL.Co_Cust_Overage_Rate_CWT <> 2ND.Co_Cust_Overage_Rate_CWT;

// LCL.USR Update Flag = CND.Yes
LCL.USR_Update_Flag = 'Y';

// IF LCL.Record Status NE DTL.Record Status
IF LCL.Record_Status <> DTL.Record_Status;

// LCL.USR Update Flag = CND.Yes
LCL.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

//?Prompt Shipping Zone
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> 2ND.Shipping Zone Code
AND PGM.*Cursor_field = 2ND.Shipping_Zone_Code;

// Call program SEL PD Shipping Zone   SR.
CALL PROGRAM(SEL PD Shipping Zone   SR) ('PDCUSRR');
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Shipping_Zone_Code);

ENDIF;

//?Validate Shipping Zone
CASE;

// IF 2ND.Shipping Zone Code NE WRK.BLANK
IF 2ND.Shipping_Zone_Code <> WRK.BLANK;

EXECUTE FUNCTION(VAL Zone Exists for Co.RT) TYPE(RTVOBJ) FILE(PDLTREP)          AC1484221;
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Shipping_Zone_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping Zone not found.'
ERROR(USR2566);
MSGPARM(2ND.Shipping_Zone_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Desc, status       RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1260512;
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Terms_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Sales_Route_Description);
PARAMETER(2ND.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(2ND.Salesperson_Code);
PARAMETER(2ND.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Group Descrp. RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1330037;
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Group Descrp. RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1330037;
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.USR_Cust_Term_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type Code Desc.    RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1249965;
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Description_21A_Usr);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
PARAMETER(2ND.Customer_Market_Code);
PARAMETER(2ND.Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

//?8/18/11 RMC E1654 Default Comp Cust Ext GL Sales Acct Type field
CASE;

// IF 2ND.CCE GL Sales Acct Type is *ALL values
IF 2ND.CCE_GL_Sales_Acct_Type = 'T'/'I'/'A';

//?8/18/11 RMC E1654 Default Comp Cust Ext GL Sales Acct Type field
// IF *OTHERWISE
IF *OTHERWISE;

//?Inter co or not
CASE;

// IF 2ND.Type Code is Inter Company
IF 2ND.Type_Code = 'IC';

// OR 2ND.Type Code is Inter-Comp Sales Agreemnt
OR 2ND.Type_Code = 'IS';

// 2ND.CCE GL Sales Acct Type = CND.Inter Company
2ND.CCE_GL_Sales_Acct_Type = 'I';

//?Inter co or not
// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.CCE GL Sales Acct Type = CND.Third Party
2ND.CCE_GL_Sales_Acct_Type = 'T';

ENDIF;

ENDIF;

ENDDO;

//?CALC: Detail screen function fields

// 2ND.Name  25A  USR = Condition name of 2ND.Age Code
2ND.Name_25A_USR = RTVCND(2ND.Age_Code);

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(2ND.Warehouse_Desc_DRV);
PARAMETER(2ND.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// DTL.Reg Fax/Email Sts DescUsr = Condition name of DTL.Regional Mgr Fax/Email
DTL.Reg_Fax_Email_Sts_DescUsr = RTVCND(DTL.Regional_Mgr_Fax_Email);

//?Only display Field Managed description if flag is entered  E004044
CASE;

// IF 2ND.Field vs. In-House flag is Managed Flag
IF 2ND.Field_vs_In_House_flag = 'F'/'I';

// 2ND.Description 21a 4 Usr = Condition name of 2ND.Field vs. In-House flag
2ND.Description_21a_4_Usr = RTVCND(2ND.Field_vs_In_House_flag);

ENDIF;

//?USER: Validate detail screen relations

//?Customer validate detail screen relationships (also TPM Loc Code)
DO;

//?WRK.Record Status is used here to track valid A/R Customers
//?If a/r customer blank, use customer/name, else validate
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// DTL.A/R Customer Number = DTL.Ship To Customer
DTL.AR_Customer_Number = DTL.Ship_To_Customer;

// DTL.USR A/R Customer Name = DTL.Customer Name
DTL.USR_A_R_Customer_Name = DTL.Customer_Name;

// WRK.Record Status = DTL.Record Status
WRK.Record_Status = DTL.Record_Status;

//?If a/r customer blank, use customer/name, else validate
// IF DTL.A/R Customer Number EQ DTL.Ship To Customer
IF DTL.AR_Customer_Number = DTL.Ship_To_Customer;

// DTL.USR A/R Customer Name = DTL.Customer Name
DTL.USR_A_R_Customer_Name = DTL.Customer_Name;

// WRK.Record Status = DTL.Record Status
WRK.Record_Status = DTL.Record_Status;

//?If a/r customer blank, use customer/name, else validate
// IF DTL.A/R Customer Number NE DTL.Ship To Customer
IF DTL.AR_Customer_Number <> DTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV Valid Cust-A/R     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1349721;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.USR_A_R_Customer_Name);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
 IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?Invalid a/r customer entered
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// WRK.Record Status = CND.Active
WRK.Record_Status = 'A';

//?Invalid a/r customer entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.AR_Customer_Number);

// DTL.USR A/R Customer Name = CON.*BLANK
DTL.USR_A_R_Customer_Name = *BLANK;

// WRK.Record Status = CND.Inactive
WRK.Record_Status = 'I';

ENDIF;

ENDIF;

//?If the record is an A/R customer, the A/R customer number may not
//?be changed if there are any open orders or other customers set up
//?with the original A/R number
//?Check A/R customer number change If Ship To Customer Editing
CASE;

// IF DTL.A/R Customer Number NE DTL.Ship To Customer
IF DTL.AR_Customer_Number <> DTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV Chk Opn by A/R Cst RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1351614;
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'A/R customer change not allowed due open orders.'
ERROR(USR2120);
MSGPARM(DTL.AR_Customer_Number);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Credit Check A/R Customer is yes
IF DTL.Credit_Check_AR_Customer = 'Y';

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(WRK.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Record Not Found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

//?Credit Limit not Entered for A/R customer
CASE;

// IF DTL.Credit Check A/R Customer is yes
IF DTL.Credit_Check_AR_Customer = 'Y';

// AND WRK.A/R Credit Limit is equal to zero
AND WRK.AR_Credit_Limit = *ZERO;

// Send error message - 'A/R Credit Check S/B no or A/R Customer Should have a credit limit in it.'
ERROR(USR2257);
MSGPARM(DTL.Credit_Check_AR_Customer);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Check other customer records
CASE;

// IF DTL.A/R Customer Number NE DTL.Ship To Customer
IF DTL.AR_Customer_Number <> DTL.Ship_To_Customer;

// WRK.Ship To Customer = DTL.Ship To Customer
WRK.Ship_To_Customer = DTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV Chk by A/R Cust.   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1351651;
PARAMETER(WRK.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer NE WRK.Ship To Customer
 IF DB1.Ship_To_Customer <> WRK.Ship_To_Customer;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'A/R customer change not allowed due other customer dependencies.'
ERROR(USR2126);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?If parent blank, use A/R customer/name, else validate
CASE;

// IF DTL.Parent Customer is equal to zero
IF DTL.Parent_Customer = *ZERO;

// DTL.Parent Customer = DTL.A/R Customer Number
DTL.Parent_Customer = DTL.AR_Customer_Number;

// DTL.USR Bill To Customer Name = DTL.USR A/R Customer Name
DTL.USR_Bill_To_Customer_Name = DTL.USR_A_R_Customer_Name;

//?Check record status
CASE;

// IF DTL.A/R Customer Number EQ DTL.Ship To Customer
IF DTL.AR_Customer_Number = DTL.Ship_To_Customer;

//?Check record status
// IF WRK.Record Status is Deleted & Inactive
IF WRK.Record_Status = 'D'/'I';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2111);
MSGPARM(DTL.Parent_Customer);

ENDIF;

//?If parent blank, use A/R customer/name, else validate
// IF DTL.Parent Customer EQ DTL.A/R Customer Number
IF DTL.Parent_Customer = DTL.AR_Customer_Number;

// DTL.USR Bill To Customer Name = DTL.USR A/R Customer Name
DTL.USR_Bill_To_Customer_Name = DTL.USR_A_R_Customer_Name;

//?Check record status
CASE;

// IF DTL.A/R Customer Number EQ DTL.Ship To Customer
IF DTL.AR_Customer_Number = DTL.Ship_To_Customer;

//?do nothing
//?Check record status
// IF WRK.Record Status is Deleted & Inactive
IF WRK.Record_Status = 'D'/'I';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2111);
MSGPARM(DTL.Parent_Customer);

ENDIF;

//?If parent blank, use A/R customer/name, else validate
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Valid Cust-A/R     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1349721;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.USR_Bill_To_Customer_Name);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
 IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


CASE;

// IF DTL.A/R Customer Number NE DTL.Parent Customer
IF DTL.AR_Customer_Number <> DTL.Parent_Customer;

// AND DTL.Parent Customer is not equal to zero
AND DTL.Parent_Customer <> *ZERO;

CASE;

// IF DTL.Credit Check Parent Cust is yes
IF DTL.Credit_Check_Parent_Cust = 'Y';

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(DTL.Parent_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(WRK.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Parent Credit Limit is equal to zero
IF WRK.Parent_Credit_Limit = *ZERO;

// Send error message - 'Parents Credit check S/B no or Parent Credit Limit should have a credit lim
ERROR(USR2258);
MSGPARM(DTL.Parent_Credit_Limit);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// DTL.Parent Credit Limit = WRK.Parent Credit Limit
DTL.Parent_Credit_Limit = WRK.Parent_Credit_Limit;

ENDIF;

ENDIF;

ENDIF;

//?Invalid parent customer entered
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2111);
MSGPARM(DTL.Parent_Customer);

// DTL.USR Bill To Customer Name = CON.*BLANK
DTL.USR_Bill_To_Customer_Name = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?If a/r customer = ship to customer, A/R crdt lmt, stmt freq required
CASE;

// IF DTL.A/R Customer Number EQ DTL.Ship To Customer
IF DTL.AR_Customer_Number = DTL.Ship_To_Customer;

CASE;

// IF DTL.A/R Credit Limit is equal to zero
IF DTL.AR_Credit_Limit = *ZERO;

// AND DTL.Credit Check A/R Customer is yes
AND DTL.Credit_Check_AR_Customer = 'Y';

// Send error message - 'If Credit Check A/R Cust = Y, A/R credit limit must also be entered'
ERROR(USR2117);
MSGPARM(DTL.AR_Credit_Limit);

ENDIF;

CASE;

// IF DTL.Statement Print Frequency EQ WRK.Blank for 4           USR
IF DTL.Statement_Print_Frequency = WRK.Blank_for_4_USR;

// Send error message - 'Statement Frequency Required for A/R Customer.'
ERROR(USR3166);
MSGPARM(DTL.Statement_Print_Frequency);

ENDIF;

// DTL.Description 14A      USR = Condition name of DTL.Statement Print Frequency
DTL.Description_14A_USR = RTVCND(DTL.Statement_Print_Frequency);

ENDIF;

//?If parent customer = ship to customer, parent credit limit is required
CASE;

// IF DTL.Parent Customer EQ DTL.Ship To Customer
IF DTL.Parent_Customer = DTL.Ship_To_Customer;

// AND DTL.Parent Credit Limit is equal to zero
AND DTL.Parent_Credit_Limit = *ZERO;

// AND DTL.Credit Check Parent Cust is yes
AND DTL.Credit_Check_Parent_Cust = 'Y';

// Send error message - 'If Credit Check Parent Cust = Y, Parent credit limit must also be entered'
ERROR(USR2118);
MSGPARM(DTL.Parent_Credit_Limit);

ENDIF;

//?If Parent number not equal to ship to number
CASE;

// IF DTL.Ship To Customer NE DTL.Parent Customer
IF DTL.Ship_To_Customer <> DTL.Parent_Customer;

EXECUTE FUNCTION(RTV Valid Cust-A/R     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1349721;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.USR_Bill_To_Customer_Name);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
 IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


CASE;

// IF DTL.Ship To Customer NE DTL.Parent Customer
IF DTL.Ship_To_Customer <> DTL.Parent_Customer;

// AND DTL.Parent Customer is not equal to zero
AND DTL.Parent_Customer <> *ZERO;

CASE;

// IF DTL.Credit Check Parent Cust is yes
IF DTL.Credit_Check_Parent_Cust = 'Y';

EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(DTL.Parent_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(WRK.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Parent Credit Limit is equal to zero
IF WRK.Parent_Credit_Limit = *ZERO;

// Send error message - 'Parents Credit check S/B no or Parent Credit Limit should have a credit lim
ERROR(USR2258);
MSGPARM(DTL.Parent_Credit_Limit);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// DTL.Parent Credit Limit = WRK.Parent Credit Limit
DTL.Parent_Credit_Limit = WRK.Parent_Credit_Limit;

ENDIF;

ENDIF;

ENDIF;

//?Invalid parent customer entered
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2111);
MSGPARM(DTL.Parent_Customer);

// DTL.USR Bill To Customer Name = CON.*BLANK
DTL.USR_Bill_To_Customer_Name = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?If the record is an A/R customer, the parent customer number may
//?not be changed if there are any other customers set up with the
//?original parent number
//?Check other customer records for A/R Customer
CASE;

// IF DTL.A/R Customer Number NE DTL.Ship To Customer
IF DTL.AR_Customer_Number <> DTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV Chk by A/R Cust.   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1351651;
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer NE WRK.Ship To Customer
 IF DB1.Ship_To_Customer <> WRK.Ship_To_Customer;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Parent customer change not allowed due to customer dependencies.'
ERROR(USR2122);
MSGPARM(DTL.Parent_Customer);

ENDIF;

ENDIF;

//?If new order is put on O.E. hold there must be an O.E. hold date
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// AND DTL.Order Entry Hold is New Order Hold
AND DTL.Order_Entry_Hold = 'Y';

// AND DTL.Order Entry Hold Date is not entered
AND DTL.Order_Entry_Hold_Date = *ZERO;

// DTL.Order Entry Hold Date = JOB.*Job date
DTL.Order_Entry_Hold_Date = JOB.*Job_date;

ENDIF;

//?If old order is taken off of O.E. hold, zero the O.E. hold date
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND DTL.Order Entry Hold is No Hold
AND DTL.Order_Entry_Hold = 'N';

// DTL.Order Entry Hold Date = CND.not entered
DTL.Order_Entry_Hold_Date = *ZERO;

ENDIF;

//?New Order Hold
CASE;

// IF DTL.Order Entry Hold is New Order Hold
IF DTL.Order_Entry_Hold = 'Y';

CASE;

// IF DTL.Order Entry Hold Date EQ WRK.ZERO
IF DTL.Order_Entry_Hold_Date = WRK.ZERO;

// DTL.Order Entry Hold Date = JOB.*Job date
DTL.Order_Entry_Hold_Date = JOB.*Job_date;

ENDIF;

//?New Order Hold
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Order Entry Hold Date = CON.*ZERO
DTL.Order_Entry_Hold_Date = *ZERO;

ENDIF;

//?Inactivating a customer - ARS032
//?Validate that a customer record can be inactivated
CASE;

// IF DTL.Record Status NE PAR.Record Status
IF DTL.Record_Status <> PAR.Record_Status;

// AND DTL.Record Status is Inactive
AND DTL.Record_Status = 'I';

//?Validate Parent record
CASE;

// IF DTL.Parent Customer EQ DTL.Ship To Customer
IF DTL.Parent_Customer = DTL.Ship_To_Customer;

// Call program VAL Parent  Rcd Sts ChgXF.
CALL PROGRAM(VAL Parent  Rcd Sts ChgXF) ('PDYLXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.USR_Return_Code);

//?Check for related customers
CASE;

// IF PAR.USR Return Code is Exists
IF PAR.USR_Return_Code = 'E';

// Send error message - 'Parent customer can not be inactivated due other customer dependencies.'
ERROR(USR2476);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

// Call program CLC Contr.Tot Sum Inq  XF.
CALL PROGRAM(CLC Contr.Tot Sum Inq  XF) ('PDLZXFR');
PARAMETER(DTL.Parent_Customer);
PARAMETER(WRK.USR_Value_Open_Orders);
PARAMETER(WRK.USR_Parent_Current_Due);
PARAMETER(WRK.USR_Parent_Past_Due);
PARAMETER(PAR.USR_Parent_Total_Due);
PARAMETER(PAR.Company_Number);

//?Check for $ owed
CASE;

// IF PAR.USR Parent Total Due is Greater than zero
IF PAR.USR_Parent_Total_Due > *ZERO;

// Send error message - 'Parent customer can not be inactivated due $ owed.'
ERROR(USR2477);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?Validate A/R record
CASE;

// IF DTL.A/R Customer Number EQ DTL.Ship To Customer
IF DTL.AR_Customer_Number = DTL.Ship_To_Customer;

//?check for related customers, open orders, $ still owed
// Call program VAL AR Cust Rcd Sts ChgXF.
CALL PROGRAM(VAL AR Cust Rcd Sts ChgXF) ('PDYKXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.USR_Return_Code);

//?Error if related customers
CASE;

// IF PAR.USR Return Code is Exists
IF PAR.USR_Return_Code = 'E';

// Send error message - 'A/R customer can not be inactivated due other customer dependencies.'
ERROR(USR2473);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

//?Error if open orders
CASE;

// IF PAR.USR Return Code is Open Orders
IF PAR.USR_Return_Code = 'O';

// Send error message - 'A/R customer can not be inactivated due open orders.'
ERROR(USR2474);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

//?Error if $ owed
CASE;

// IF PAR.USR Return Code is $ Owed
IF PAR.USR_Return_Code = '$';

// Send error message - 'A/R customer can not be inactivated due $ owed.'
ERROR(USR2475);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?Validate Ship To Record
CASE;

// IF DTL.A/R Customer Number NE DTL.Ship To Customer
IF DTL.AR_Customer_Number <> DTL.Ship_To_Customer;

EXECUTE FUNCTION(VAL Customer Order Hdr RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1462968;
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Initialize routine

 //?RMC 6/28/2011 use lf not keyed by company, so all will be chked.
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Check for open orders
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// WRK.Order Number = CON.*ZERO
WRK.Order_Number = *ZERO;

// WRK.Block Order Flag = CND.*Blank
WRK.Block_Order_Flag = *BLANK;

EXECUTE FUNCTION(RTV Val Opn Block Ord  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2041625;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Block_Order_Flag);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 QUIT;

 ENDIF;

}


//?send 'order still open' message
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?If Order is Block Order, display appropriate message
CASE;

// IF WRK.Block Order Flag is Block Order
IF WRK.Block_Order_Flag = 'B';

// Send error message - 'Order &1 is a Block Order'
ERROR(USR4508);
MSGPARM(WRK.Order_Number);

//?If Order is Block Order, display appropriate message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order &1 is still open'
ERROR(USR4509);
MSGPARM(WRK.Order_Number);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?*------------------------------------------------------------*
//?New A/R & Parent customers must be an active customers - ARS032
//?Check if Parent Customer is a Parent
CASE;

// IF DTL.Ship To Customer NE DTL.Parent Customer
IF DTL.Ship_To_Customer <> DTL.Parent_Customer;

EXECUTE FUNCTION(Val Parent Customer   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1632830;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Parent_Customer);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2111);
MSGPARM(DTL.Parent_Customer);

ENDIF;

ENDIF;

//?*------------------------------------------------------------*
//?Customer Market Code is Entered
CASE;

// IF 2ND.Customer Market Code is Entered
IF 2ND.Customer_Market_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
PARAMETER(2ND.Customer_Market_Code);
PARAMETER(2ND.Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF 2ND.CM Market Desc is equal to blank
IF 2ND.Market_Desc = *BLANK;

// Send error message - 'Market not found.'
ERROR(USR3859);
MSGPARM(2ND.Customer_Market_Code);

ENDIF;

ENDIF;

//?Put name on screen for Field Managed
CASE;

// IF 2ND.Field vs. In-House flag is Managed Flag
IF 2ND.Field_vs_In_House_flag = 'F'/'I';

// 2ND.Description 21a 4 Usr = Condition name of 2ND.Field vs. In-House flag
2ND.Description_21a_4_Usr = RTVCND(2ND.Field_vs_In_House_flag);

ENDIF;

//?T8763 01/19/17 DN  - Process M3 Supplier Search Request/Validate.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.M3 Supplier ID Chgd? USR = CND.no
PAR.M3_Supplier_ID_Chgd_USR = 'N';

//?F4=M3 Supplier ID.  Added E1LIVE must be no to F4. JBB WI440
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.M3 Supplier ID
AND PGM.*Cursor_field = DTL.M3_Supplier_ID;

// AND LCL.Live with E1 usr is No
AND LCL.Live_with_E1_usr = 'N';

// Call program Sel M3 Supplier       SL.
CALL PROGRAM(Sel M3 Supplier       SL) ('PLV2SRR');
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(PAR.M3_Supplier_Name);
PARAMETER(PAR.M3_Address_Line_1);
PARAMETER(PAR.M3_Address_Line_2);
PARAMETER(PAR.M3_Address_Line_3);
PARAMETER(PAR.M3_Address_Line_4);
PARAMETER(PAR.M3_City);
PARAMETER(PAR.M3_State);
PARAMETER(PAR.M3_Postal_Code);
PARAMETER(PAR.M3_Telephone_No_1);
PARAMETER(PAR.M3_Telephone_No_2);
PARAMETER(PAR.M3_Fax_Telephone);
PARAMETER(PAR.M3_Supplier_Tax_ID);
PARAMETER(PAR.M3_Country_Code);
PARAMETER(PAR.M3_Supplier_Group);
PARAMETER(PAR.M3_Supplier_Division);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate if M3 Supplier ID Changed.
CASE;

// IF DTL.M3 Supplier ID NE PAR.M3 Supplier ID
IF DTL.M3_Supplier_ID <> PAR.M3_Supplier_ID;

CASE;

// IF DTL.M3 Supplier ID is Entered
IF DTL.M3_Supplier_ID <> *BLANK;

//?Call HPE Cross Model Program to Validate.
// Call program Exc Chk Suplr/Div ExistXF.
CALL PROGRAM(Exc Chk Suplr/Div ExistXF) ('PWA1XFR');
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(*BLANK);
PARAMETER(LCL.M3_Supplier_ID_Exist_USR);
PARAMETER(LCL.M3_Division_Match_USR);

//?Check if M3 Supplier ID exist. If not, send error msg.
CASE;

// IF LCL.M3 Supplier ID Exist USR is yes
IF LCL.M3_Supplier_ID_Exist_USR = 'Y';

//?Set Flag to Update.
// PAR.M3 Supplier ID Chgd? USR = CND.yes
PAR.M3_Supplier_ID_Chgd_USR = 'Y';

//?Check if M3 Supplier ID exist. If not, send error msg.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'M3 Supplier ID &1 not found.'
ERROR(USR4971);
MSGPARM(DTL.M3_Supplier_ID);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?M3 Supplier ID Changed to Blank, Set Flag to Update.
// PAR.M3 Supplier ID Chgd? USR = CND.yes
PAR.M3_Supplier_ID_Chgd_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Validate the TF Exempt prior to update
DO;

// LCL.Error Ordtl TFExp Usr = CND.*blanks
LCL.Error_Ordtl_TFExp_Usr = *BLANK;

// Call program Vry TFExemp-CustRtn   XF.
CALL PROGRAM(Vry TFExemp-CustRtn   XF) ('PPSJXFR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(LCL.Error_Ordtl_TFExp_Usr);

//?only display if in change mode.  add mode there should not be any
//?orders for this customer
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF 2ND.Customer TF Exempt Code NE WRK.Customer TF Exempt CodeSV
IF 2ND.Customer_TF_Exempt_Code <> WRK.Customer_TF_Exempt_CodeSV;

// Call program Dsp Cust TF Exempt    DF.
CALL PROGRAM(Dsp Cust TF Exempt    DF) ('PPSFDFR');
PARAMETER(JOB.*USER);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER('E');
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(WRK.Customer_TF_Exempt_CodeSV);

CASE;

// IF LCL.Error Ordtl TFExp Usr is Error
IF LCL.Error_Ordtl_TFExp_Usr = 'E';

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3587);
MSGPARM(2ND.Customer_TF_Exempt_Code);

ENDIF;

// IF LCL.Error Ordtl TFExp Usr is Error
IF LCL.Error_Ordtl_TFExp_Usr = 'E';

// Call program Dsp Cust TF Exempt    DF.
CALL PROGRAM(Dsp Cust TF Exempt    DF) ('PPSFDFR');
PARAMETER(JOB.*USER);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER('E');
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(WRK.Customer_TF_Exempt_CodeSV);

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3587);
MSGPARM(2ND.Customer_TF_Exempt_Code);

ENDIF;

ENDIF;

ENDDO;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Customer-Co/Cust   IF) TYPE(EXCINTFUN) FILE(CABBREP)       AC1708865;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(DTL.Alpha_Search);
PARAMETER(DTL.Federal_Tax_Id);
PARAMETER('Y');
PARAMETER(DTL.SIC_Number);
PARAMETER(DTL.D_B_Number);
PARAMETER(DTL.D_B_Rating);
PARAMETER(DTL.Date_of_D_B_Rating);
PARAMETER(DTL.Credit_Line_Expire_Date);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Credit_Check_AR_Customer);
PARAMETER(DTL.Credit_Check_Parent_Cust);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.EDI_Invoice_Sts);
PARAMETER(DTL.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(DTL.AR_Credit_Limit);
PARAMETER(DTL.Order_Entry_Hold_Date);
PARAMETER(DTL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Print_Invoice_Sts);
PARAMETER(DTL.Item_Reference_Status);
PARAMETER(DTL.Statement_Print_Frequency);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
PARAMETER(DTL.Internet_Password);
PARAMETER(DTL.Email_Address);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.EDI_Cust_Duns_Number);
PARAMETER(PAR.EDI_Warehouse_Store_No);
PARAMETER(PAR.State_Tax_ID);
PARAMETER(PAR.Cust_Shipping_Temp_C_F);
PARAMETER(2ND.One_Invoice_Per_PO);
PARAMETER(PAR.EDI_Advanced_Ship_Notice);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.Employee_Co_Packer_Sale);
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(DTL.Customer_Watch_Flag);
PARAMETER(DTL.Customer_Sales_Region);
PARAMETER(2ND.Customer_Market_Code);
PARAMETER(2ND.USR_Ship_To_Est_#);
PARAMETER(2ND.PM_Pallet_Type);
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Special_Instructions_2);
PARAMETER(2ND.Special_Instructions);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Broker);
PARAMETER(2ND.P_O_Required_Flag);
PARAMETER(2ND.Deliver_after_time);
PARAMETER(2ND.Deliver_before_time);
PARAMETER(2ND.Alt_Remittance_Flag);
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Absorbed_Freight_Rate_CWT);
PARAMETER(2ND.Mileage_To_Customer);
PARAMETER(2ND.Co_Cust_Overage_Rate_CWT);
PARAMETER(2ND.Age_Code);
PARAMETER(2ND.Outside_Warehouse_Flag);
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.G_L_Code);
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Credit_Contact_Name);
PARAMETER(2ND.Credit_Contact_Telephone);
PARAMETER(2ND.Credit_Contact_Bus_Title);
PARAMETER(2ND.Credit_Contact_Fax_Number);
PARAMETER(2ND.Allow_Man_Qt_WO_Approval);
PARAMETER(2ND.Fax_Invoice_Flag);
PARAMETER(2ND.Fax_Invoice_Fax_Number);
PARAMETER(2ND.Fax_Invoice_Contact_Name);
PARAMETER(2ND.Distributor);
PARAMETER(2ND.Default_Shipping_Co_Sts);
PARAMETER('Y');
PARAMETER(2ND.Bypass_DDt_Delay_w_Invcng);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(WRK.Extra_Amount_1);
PARAMETER(WRK.Extra_Number_1);
PARAMETER(WRK.Extra_Status_1);
PARAMETER(WRK.SH_Expense_Bucket);
PARAMETER(WRK.G_L_Sub_Account);
PARAMETER(2ND.Shipping_Zone_Code);
PARAMETER(LCL.Auto_Customers_Numbering);
PARAMETER(2ND.HPB_Employer_ID_#);
PARAMETER(2ND.HPB_ULSD_Company_#);
PARAMETER(2ND.HPB_ULSD_Facility_ID);
PARAMETER(2ND.CCE_GL_Sales_Acct_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(2ND.Automated_A_R_Aging_Rpt);
{
 //?Execute internal function

 EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
 {
  //?Execute internal function

  //?FP1309 Inventory Age Code Description
 }

 //?allow company customer ext  to be created with the age fields
 //?Company Customer Ext will now be there for all company Customer
 // LCL.Regional Mgr Fax/Email = CND.NONE
 LCL.Regional_Mgr_Fax_Email = *BLANK;

 //?W84562 DN 10/18/21-Passed in 'Automated A/R Aging Rpt'.
 EXECUTE FUNCTION(Crt Customer-Co/Cust   CR) TYPE(CRTOBJ) FILE(CABBREP)          AC1708788;
 PARAMETER(PR1.Ship_To_Customer);
 PARAMETER(PR1.Customer_Name);
 PARAMETER(PR1.Address_Line_1);
 PARAMETER(PR1.Address_Line_2);
 PARAMETER(PR1.Address_Line_3);
 PARAMETER(PR1.City);
 PARAMETER(PR1.State_Code);
 PARAMETER(PR1.County_Code);
 PARAMETER(PR1.Zip_Postal_Code);
 PARAMETER(PR1.Telephone_Number_FF);
 PARAMETER(PR1.Fax_Number_FF);
 PARAMETER(PR1.Alpha_Search);
 PARAMETER(PR1.Federal_Tax_Id);
 PARAMETER(PR1.New_Customer_Status);
 PARAMETER(PR1.SIC_Number);
 PARAMETER(PR1.D_B_Number);
 PARAMETER(PR1.D_B_Rating);
 PARAMETER(PR1.Date_of_D_B_Rating);
 PARAMETER(PR1.Credit_Line_Expire_Date);
 PARAMETER(PR1.AR_Customer_Number);
 PARAMETER(PR1.Parent_Customer);
 PARAMETER(PR1.Credit_Check_AR_Customer);
 PARAMETER(PR1.Credit_Check_Parent_Cust);
 PARAMETER(PR1.Country_Code);
 PARAMETER(PR1.EDI_Invoice_Sts);
 PARAMETER(PR1.Order_Entry_Hold);
 PARAMETER(PR1.Parent_Credit_Limit);
 PARAMETER(PR1.AR_Credit_Limit);
 PARAMETER(PR1.Order_Entry_Hold_Date);
 PARAMETER(PR1.Ship_To_Customer_Flag);
 PARAMETER(PR1.Field_vs_In_House_flag);
 PARAMETER(PR1.Email_When_Order_Shipped);
 PARAMETER(PR1.Print_Invoice_Sts);
 PARAMETER(PR1.Item_Reference_Status);
 PARAMETER(PR1.Statement_Print_Frequency);
 PARAMETER(PR1.EDI_Status_1);
 PARAMETER(PR1.EDI_Status_2);
 PARAMETER(PR1.EDI_Status_3);
 PARAMETER(PR1.Record_Status);
 PARAMETER(PR2.Internet_Password);
 PARAMETER(PR2.Email_Address);
 PARAMETER(PR2.EDI_Trading_Partner_No);
 PARAMETER(PR2.EDI_Cust_Duns_Number);
 PARAMETER(PR2.EDI_Warehouse_Store_No);
 PARAMETER(PR2.State_Tax_ID);
 PARAMETER(PR2.Cust_Shipping_Temp_C_F);
 PARAMETER(PR2.One_Invoice_Per_PO);
 PARAMETER(PR2.EDI_Advanced_Ship_Notice);
 PARAMETER(PR2.Customer_G_L_Vendor_Num);
 PARAMETER(LCL.Regional_Mgr_Fax_Email);
 PARAMETER(PR2.Employee_Co_Packer_Sale);
 PARAMETER(PR2.Customer_TF_Exempt_Code);
 PARAMETER(PR2.Customer_Watch_Flag);
 PARAMETER(PR2.Customer_Sales_Region);
 PARAMETER(PR2.Customer_Market_Code);
 PARAMETER(PR4.Company_Number);
 PARAMETER(PR4.Terms_Code);
 PARAMETER(PR4.Sales_Route_Code);
 PARAMETER(PR4.Special_Instructions_2);
 PARAMETER(PR4.Special_Instructions);
 PARAMETER(PR4.Carrier_Code);
 PARAMETER(PR4.Broker);
 PARAMETER(PR4.P_O_Required_Flag);
 PARAMETER(PR4.Deliver_after_time);
 PARAMETER(PR4.Deliver_before_time);
 PARAMETER(PR4.Alt_Remittance_Flag);
 PARAMETER(PR4.Type_Code);
 PARAMETER(PR4.Absorbed_Freight_Rate_CWT);
 PARAMETER(PR4.Mileage_To_Customer);
 PARAMETER(PR4.Co_Cust_Overage_Rate_CWT);
 PARAMETER(PR4.Age_Code);
 PARAMETER(PR4.Outside_Warehouse_Flag);
 PARAMETER(PR4.Customer_Group_Code);
 PARAMETER(PR4.Customer_Group_Code_2);
 PARAMETER(PR4.G_L_Code);
 PARAMETER(PR4.Commodity_Market_Code);
 PARAMETER(PR4.Credit_Contact_Name);
 PARAMETER(PR4.Credit_Contact_Telephone);
 PARAMETER(PR4.Credit_Contact_Bus_Title);
 PARAMETER(PR4.Credit_Contact_Fax_Number);
 PARAMETER(PR4.Allow_Man_Qt_WO_Approval);
 PARAMETER(PR4.Fax_Invoice_Flag);
 PARAMETER(PR4.Fax_Invoice_Fax_Number);
 PARAMETER(PR4.Fax_Invoice_Contact_Name);
 PARAMETER(PR4.Distributor);
 PARAMETER(PR4.Default_Shipping_Co_Sts);
 PARAMETER(PR4.Ord_Ent_Default_Sls_Rte);
 PARAMETER(PR4.Bypass_DDt_Delay_w_Invcng);
 PARAMETER(PR5.Extra_Amount_1);
 PARAMETER(PR5.Extra_Number_1);
 PARAMETER(PR5.Extra_Status_1);
 PARAMETER(PR5.SH_Expense_Bucket);
 PARAMETER(PR5.G_L_Sub_Account);
 PARAMETER(PR6.Shipping_Zone_Code);
 PARAMETER(PR7.Auto_Customers_Numbering);
 PARAMETER(PR8.HPB_Employer_ID_#);
 PARAMETER(PR8.HPB_ULSD_Company_#);
 PARAMETER(PR8.HPB_ULSD_Facility_ID);
 PARAMETER(PR8.CCE_GL_Sales_Acct_Type);
 PARAMETER(PR8.Item_Age_Days_Fresh);
 PARAMETER(PR8.Item_Age_Days_Frozen);
 PARAMETER(PR9.M3_Supplier_ID);
 PARAMETER(PR9.Automated_A_R_Aging_Rpt);
 PARAMETER(PR3.Ship_To_Establishment_nbr);
 PARAMETER(PR3.PM_Pallet_Type);
 {
  //?USER: Processing before Data update

  //?***** Change Log and Comments
  DO;

  EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
  {
   //?Execute internal function

   //?FP1309 Inventory Age Code Description
  }

  //?LJB E00431  06/12/2009  Pass Customer Watch Flag to the
  //?    Customer EXT file (new field-change from lcl to par context)
  //?LJB E00350  02/26/2009  Pass Employee Meat Sales flag and update
  //?    Customer EXT file
  //?RMC  FP1110 01/07/08 pass in fields to update Comp Cust Ext with HPB Flds
  //?RMC  DLY029 05/24/07 remove broker ref- not in cust ext any more
  //?02/02/2007 PKD Changed to use the Plant Companies
  //?rmc 08/09/06 added Air Frt orders dft to NO
  //?slm 08/09/05 added TF Exempt code
  ENDDO;

  //?Create customer ext file
  // LCL.Customer Number Alpha = CVTVAR(DB1.Ship To Customer)
  LCL.Customer_Number_Alpha = CVTVAR(DB1.Ship_To_Customer);

  // LCL.Email User ID = CONCAT(CON.A,LCL.Customer Number Alpha,CON.*ZERO)
  LCL.Email_User_ID = 'A' + LCL.Customer_Number_Alpha (*ZERO);

  //?If Auto Numbering & Vend GL is blank, set to Cust #
  CASE;

  // IF PAR.Auto Customers Numbering? is yes
  IF PAR.Auto_Customers_Numbering = 'Y';

  // AND PAR.Customer G/L Vendor Num is Not Entered
  AND PAR.Customer_G_L_Vendor_Num = *ZERO;

  // LCL.Customer G/L Vendor Num = PAR.Ship To Customer
  LCL.Customer_G_L_Vendor_Num = PAR.Ship_To_Customer;

  //?If Auto Numbering & Vend GL is blank, set to Cust #
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Customer G/L Vendor Num = PAR.Customer G/L Vendor Num
  LCL.Customer_G_L_Vendor_Num = PAR.Customer_G_L_Vendor_Num;

  ENDIF;

  //?** new parms added: EE Meat Sales Y/N, also Cust Watch flag
  EXECUTE FUNCTION(Crt Customer Elec Comm CR) TYPE(CRTOBJ) FILE(PDNEREP)          AC1569823;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Internet_Password);
  PARAMETER(PAR.Email_Address);
  PARAMETER(LCL.Email_User_ID);
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Cust_Duns_Number);
  PARAMETER(PAR.EDI_Warehouse_Store_No);
  PARAMETER(PAR.State_Tax_ID);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.One_Invoice_Per_PO);
  PARAMETER(PAR.EDI_Advanced_Ship_Notice);
  PARAMETER(LCL.Customer_G_L_Vendor_Num);
  PARAMETER('N');
  PARAMETER(PAR.Regional_Mgr_Fax_Email);
  PARAMETER(PAR.Employee_Co_Packer_Sale);
  PARAMETER(PAR.Customer_TF_Exempt_Code);
  PARAMETER(PAR.Customer_Watch_Flag);
  PARAMETER(PAR.Customer_Sales_Region);
  PARAMETER(PAR.Customer_Market_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   //?Add customer to Pork Email File - This is an IBM file.
   // Call program Crt Cust Usr Id IBM Fl UP.
   CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
   PARAMETER(DB1.Email_Address);
   PARAMETER(DB1.Email_User_ID);

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?08/10/2007 RMC moved logic to create shipping zones here, since its
  //?    already reading for plant companies only.
  //?Create company customer ext file with age fields
  // Call program CRT Co/Cust w/G/L PlntsXF.
  CALL PROGRAM(CRT Co/Cust w/G/L PlntsXF) ('PMDXXFR');
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Terms_Code);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Special_Instructions_2);
  PARAMETER(PAR.Special_Instructions);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Broker);
  PARAMETER(PAR.P_O_Required_Flag);
  PARAMETER(PAR.Deliver_after_time);
  PARAMETER(PAR.Deliver_before_time);
  PARAMETER(PAR.Alt_Remittance_Flag);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  PARAMETER(PAR.Mileage_To_Customer);
  PARAMETER(PAR.Co_Cust_Overage_Rate_CWT);
  PARAMETER(PAR.Age_Code);
  PARAMETER(PAR.Outside_Warehouse_Flag);
  PARAMETER(PAR.Customer_Group_Code);
  PARAMETER(PAR.Customer_Group_Code_2);
  PARAMETER(PAR.G_L_Code);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Credit_Contact_Name);
  PARAMETER(PAR.Credit_Contact_Telephone);
  PARAMETER(PAR.Credit_Contact_Bus_Title);
  PARAMETER(PAR.Credit_Contact_Fax_Number);
  PARAMETER(PAR.Allow_Man_Qt_WO_Approval);
  PARAMETER(PAR.Fax_Invoice_Flag);
  PARAMETER(PAR.Fax_Invoice_Fax_Number);
  PARAMETER(PAR.Fax_Invoice_Contact_Name);
  PARAMETER(PAR.Distributor);
  PARAMETER(PAR.Default_Shipping_Co_Sts);
  PARAMETER(PAR.Ord_Ent_Default_Sls_Rte);
  PARAMETER(PAR.Bypass_DDt_Delay_w_Invcng);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(PAR.Extra_Amount_1);
  PARAMETER(PAR.Extra_Number_1);
  PARAMETER(PAR.Extra_Status_1);
  PARAMETER(PAR.SH_Expense_Bucket);
  PARAMETER(PAR.G_L_Sub_Account);
  PARAMETER(PAR.City);
  PARAMETER(PAR.State_Code);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(PAR.Shipping_Zone_Code);
  PARAMETER(PAR.HPB_Employer_ID_#);
  PARAMETER(PAR.HPB_ULSD_Company_#);
  PARAMETER(PAR.HPB_ULSD_Facility_ID);
  PARAMETER(PAR.CCE_GL_Sales_Acct_Type);
  PARAMETER(PAR.Item_Age_Days_Fresh);
  PARAMETER(PAR.Item_Age_Days_Frozen);

  //?T8763 01/19/17 DN  - Create Customer EXT2 record.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?W84562 10/18/21 DN-Passed in 'Automated A/R Aging Rpt'.
  // Call program Ext Crt/Upd Cust EXT2 XF.
  CALL PROGRAM(Ext Crt/Upd Cust EXT2 XF) ('PUANXFR');
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.M3_Supplier_ID);
  PARAMETER(PAR.Automated_A_R_Aging_Rpt);
  PARAMETER(PAR.Ship_To_Establishment_nbr);
  PARAMETER(PAR.PM_Pallet_Type);

  ENDIF;

 }

 //?W84562 DN 10/18/21-Passed in 'Automated A/R Aging Rpt'.
 //?WI464 11/24/21 JBB-Pallet Management: Add Pallet Type create
 //?WI572  EL 04/26/23-Passed in 'Ship To Establishment nbr'
 // Call program Ext Crt/Upd Cust EXT2 XF.
 CALL PROGRAM(Ext Crt/Upd Cust EXT2 XF) ('PUANXFR');
 PARAMETER(PR1.Ship_To_Customer);
 PARAMETER(PR9.M3_Supplier_ID);
 PARAMETER(PR9.Automated_A_R_Aging_Rpt);
 PARAMETER(PR3.Ship_To_Establishment_nbr);
 PARAMETER(PR3.PM_Pallet_Type);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Customer-Co/Cust   IF) TYPE(EXCINTFUN) FILE(CABBREP)       AC1708908;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(DTL.Alpha_Search);
PARAMETER(DTL.Federal_Tax_Id);
PARAMETER(DTL.New_Customer_Status);
PARAMETER(DTL.SIC_Number);
PARAMETER(DTL.D_B_Number);
PARAMETER(DTL.D_B_Rating);
PARAMETER(DTL.Date_of_D_B_Rating);
PARAMETER(DTL.Credit_Line_Expire_Date);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Credit_Check_AR_Customer);
PARAMETER(DTL.Credit_Check_Parent_Cust);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.EDI_Invoice_Sts);
PARAMETER(DTL.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
PARAMETER(DTL.AR_Credit_Limit);
PARAMETER(DTL.Order_Entry_Hold_Date);
PARAMETER(DTL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Print_Invoice_Sts);
PARAMETER(DTL.Item_Reference_Status);
PARAMETER(DTL.Statement_Print_Frequency);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Internet_Password);
PARAMETER(DTL.Email_Address);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.EDI_Cust_Duns_Number);
PARAMETER(PAR.EDI_Warehouse_Store_No);
PARAMETER(PAR.State_Tax_ID);
PARAMETER(PAR.Cust_Shipping_Temp_C_F);
PARAMETER(2ND.One_Invoice_Per_PO);
PARAMETER(PAR.EDI_Advanced_Ship_Notice);
PARAMETER(DTL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.Employee_Co_Packer_Sale);
PARAMETER(2ND.Customer_TF_Exempt_Code);
PARAMETER(DTL.Customer_Watch_Flag);
PARAMETER(DTL.Customer_Sales_Region);
PARAMETER(2ND.Customer_Market_Code);
PARAMETER(2ND.Terms_Code);
PARAMETER(2ND.Sales_Route_Code);
PARAMETER(2ND.Special_Instructions_2);
PARAMETER(2ND.Special_Instructions);
PARAMETER(2ND.Carrier_Code);
PARAMETER(2ND.Broker);
PARAMETER(2ND.P_O_Required_Flag);
PARAMETER(2ND.Deliver_after_time);
PARAMETER(2ND.Deliver_before_time);
PARAMETER(2ND.Type_Code);
PARAMETER(2ND.Age_Code);
PARAMETER(2ND.Outside_Warehouse_Flag);
PARAMETER(2ND.Customer_Group_Code);
PARAMETER(2ND.Customer_Group_Code_2);
PARAMETER(2ND.Commodity_Market_Code);
PARAMETER(2ND.Credit_Contact_Name);
PARAMETER(2ND.Credit_Contact_Telephone);
PARAMETER(2ND.Credit_Contact_Bus_Title);
PARAMETER(2ND.Credit_Contact_Fax_Number);
PARAMETER(2ND.Allow_Man_Qt_WO_Approval);
PARAMETER(2ND.Fax_Invoice_Flag);
PARAMETER(2ND.Fax_Invoice_Fax_Number);
PARAMETER(2ND.Fax_Invoice_Contact_Name);
PARAMETER(2ND.Distributor);
PARAMETER(PAR.USR_Order_Entry_Hold);
PARAMETER(PAR.USR_Order_Entry_Hold_Date);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Company_Number);
PARAMETER(2ND.Shipping_Zone_Code);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(PAR.M3_Supplier_ID_Chgd_USR);
PARAMETER(2ND.Automated_A_R_Aging_Rpt);
PARAMETER(WRK.Customer_TF_Exempt_CodeSV);
PARAMETER(2ND.USR_Ship_To_Est_#);
PARAMETER(2ND.PM_Pallet_Type);
PARAMETER(2ND.HPB_Employer_ID_#);
PARAMETER(2ND.HPB_ULSD_Company_#);
PARAMETER(2ND.HPB_ULSD_Facility_ID);
PARAMETER(2ND.CCE_GL_Sales_Acct_Type);
PARAMETER(2ND.Item_Age_Days_Fresh);
PARAMETER(2ND.Item_Age_Days_Frozen);
PARAMETER(WRK.Extra_Amount_1);
PARAMETER(WRK.Extra_Number_1);
PARAMETER(WRK.Extra_Status_1);
PARAMETER(WRK.SH_Expense_Bucket);
PARAMETER(WRK.G_L_Sub_Account);
PARAMETER(LCL.Auto_Customers_Numbering);
{
 //?Execute internal function

 // LCL.Regional Mgr Fax/Email = CND.NONE
 LCL.Regional_Mgr_Fax_Email = *BLANK;

 //?** This functions changes several associated files when
 //?** the Customer record status changes                 E000900
 //?W84562 DN 10/18/21-Passed in 'Automated A/R Aging Rpt'.
 EXECUTE FUNCTION(Chg Customer-Co/Cust   CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1708940;
 PARAMETER(PR1.Ship_To_Customer);
 PARAMETER(PR1.Customer_Name);
 PARAMETER(PR1.Address_Line_1);
 PARAMETER(PR1.Address_Line_2);
 PARAMETER(PR1.Address_Line_3);
 PARAMETER(PR1.City);
 PARAMETER(PR1.State_Code);
 PARAMETER(PR1.County_Code);
 PARAMETER(PR1.Zip_Postal_Code);
 PARAMETER(PR1.Telephone_Number_FF);
 PARAMETER(PR1.Fax_Number_FF);
 PARAMETER(PR1.Alpha_Search);
 PARAMETER(PR1.Federal_Tax_Id);
 PARAMETER(PR1.New_Customer_Status);
 PARAMETER(PR1.SIC_Number);
 PARAMETER(PR1.D_B_Number);
 PARAMETER(PR1.D_B_Rating);
 PARAMETER(PR1.Date_of_D_B_Rating);
 PARAMETER(PR1.Credit_Line_Expire_Date);
 PARAMETER(PR1.AR_Customer_Number);
 PARAMETER(PR1.Parent_Customer);
 PARAMETER(PR1.Credit_Check_AR_Customer);
 PARAMETER(PR1.Credit_Check_Parent_Cust);
 PARAMETER(PR1.Country_Code);
 PARAMETER(PR1.EDI_Invoice_Sts);
 PARAMETER(PR1.Order_Entry_Hold);
 PARAMETER(PR1.Parent_Credit_Limit);
 PARAMETER(PR1.AR_Credit_Limit);
 PARAMETER(PR1.Order_Entry_Hold_Date);
 PARAMETER(PR1.Ship_To_Customer_Flag);
 PARAMETER(PR1.Field_vs_In_House_flag);
 PARAMETER(PR1.Email_When_Order_Shipped);
 PARAMETER(PR1.Print_Invoice_Sts);
 PARAMETER(PR1.Item_Reference_Status);
 PARAMETER(PR1.Statement_Print_Frequency);
 PARAMETER(PR1.EDI_Status_1);
 PARAMETER(PR1.EDI_Status_2);
 PARAMETER(PR1.EDI_Status_3);
 PARAMETER(PR1.Record_Status);
 PARAMETER(PR2.Internet_Password);
 PARAMETER(PR2.Email_Address);
 PARAMETER(PR2.EDI_Trading_Partner_No);
 PARAMETER(PR2.EDI_Cust_Duns_Number);
 PARAMETER(PR2.EDI_Warehouse_Store_No);
 PARAMETER(PR2.State_Tax_ID);
 PARAMETER(PR2.Cust_Shipping_Temp_C_F);
 PARAMETER(PR2.One_Invoice_Per_PO);
 PARAMETER(PR2.EDI_Advanced_Ship_Notice);
 PARAMETER(PR2.Customer_G_L_Vendor_Num);
 PARAMETER(LCL.Regional_Mgr_Fax_Email);
 PARAMETER(PR2.Employee_Co_Packer_Sale);
 PARAMETER(PR2.Customer_TF_Exempt_Code);
 PARAMETER(PR2.Customer_Watch_Flag);
 PARAMETER(PR2.Customer_Sales_Region);
 PARAMETER(PR2.Customer_Market_Code);
 PARAMETER(PR3.Terms_Code);
 PARAMETER(PR3.Sales_Route_Code);
 PARAMETER(PR3.Special_Instructions_2);
 PARAMETER(PR3.Special_Instructions);
 PARAMETER(PR3.Carrier_Code);
 PARAMETER(PR3.Broker);
 PARAMETER(PR3.P_O_Required_Flag);
 PARAMETER(PR3.Deliver_after_time);
 PARAMETER(PR3.Deliver_before_time);
 PARAMETER(PR3.Type_Code);
 PARAMETER(PR3.Age_Code);
 PARAMETER(PR3.Outside_Warehouse_Flag);
 PARAMETER(PR3.Customer_Group_Code);
 PARAMETER(PR3.Customer_Group_Code_2);
 PARAMETER(PR3.Commodity_Market_Code);
 PARAMETER(PR3.Credit_Contact_Name);
 PARAMETER(PR3.Credit_Contact_Telephone);
 PARAMETER(PR3.Credit_Contact_Bus_Title);
 PARAMETER(PR3.Credit_Contact_Fax_Number);
 PARAMETER(PR3.Allow_Man_Qt_WO_Approval);
 PARAMETER(PR3.Fax_Invoice_Flag);
 PARAMETER(PR3.Fax_Invoice_Fax_Number);
 PARAMETER(PR3.Fax_Invoice_Contact_Name);
 PARAMETER(PR3.Distributor);
 PARAMETER(PR4.USR_Order_Entry_Hold);
 PARAMETER(PR4.USR_Order_Entry_Hold_Date);
 PARAMETER(PR4.A_R_Customer);
 PARAMETER(PR4.Shipping_Zone_Code);
 PARAMETER(PR4.M3_Supplier_ID);
 PARAMETER(PR4.M3_Supplier_ID_Chgd_USR);
 PARAMETER(PR4.Automated_A_R_Aging_Rpt);
 PARAMETER(PR6.Ship_To_Establishment_nbr);
 PARAMETER(PR6.PM_Pallet_Type);
 PARAMETER(PR7.HPB_Employer_ID_#);
 PARAMETER(PR7.HPB_ULSD_Company_#);
 PARAMETER(PR7.HPB_ULSD_Facility_ID);
 PARAMETER(PR7.CCE_GL_Sales_Acct_Type);
 PARAMETER(PR7.Item_Age_Days_Fresh);
 PARAMETER(PR7.Item_Age_Days_Frozen);
 PARAMETER(PR9.Auto_Customers_Numbering);
 PARAMETER(PR4.Company_Number);
 PARAMETER(PR8.Extra_Amount_1);
 PARAMETER(PR8.Extra_Number_1);
 PARAMETER(PR8.Extra_Status_1);
 PARAMETER(PR8.SH_Expense_Bucket);
 PARAMETER(PR8.G_L_Sub_Account);
 {
  //?USER: Processing before Data read

  //?** E01654 RMC 8/18/11 upd gl sales acct type in comp cust ext
  //?** 10/16/2009 LJB E00477 - If Customer is PARENT, Update all the
  //?**   associated Bill To's (A/R Cust), else, update only the one record
  //?** 06/12/2009 LJB E00431 - Update Customer EXT with the
  //?**   new Customer Watch flag, crt if no rec exists
  //?** 06/09/2009 LJB E00352 - If Billing Cust address changes,
  //?**   update all open order header recs for associated Ship To's
  //?**
  //?01/07/08  FP1110 - RMC - added comp cust ext updates for HPB fields
  //?pass pars to CHG Co/Cust w/G/L PlntsXF - Company Defaults  PMDYXFR
  //?9/15/04 slm Add the update of the (Plant) Co/Customer, Guymon
  //?record status of the customer will be place on the co/customer
  //?USER: Processing after Data read

  //?Create or change customer electronic commerce record
  EXECUTE FUNCTION(Val Cust Elec Exists  RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569842;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Email_User_ID);
  PARAMETER(LCL.Air_Freight_Orders);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Format user id if blank
  CASE;

  // IF LCL.Email User ID is Not Entered
  IF LCL.Email_User_ID = *BLANK;

  // LCL.Customer Number Alpha = CVTVAR(DB1.Ship To Customer)
  LCL.Customer_Number_Alpha = CVTVAR(DB1.Ship_To_Customer);

  // LCL.Email User ID = CONCAT(CON.A,LCL.Customer Number Alpha,CON.*ZERO)
  LCL.Email_User_ID = 'A' + LCL.Customer_Number_Alpha (*ZERO);

  ENDIF;

  //?** add Customer Watch update to Elec Comm update      E00431
  //?** If customer is Parent, update all assoc records    E00477
  //?Create or change customer extended record
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  EXECUTE FUNCTION(Crt Customer Elec Comm CR) TYPE(CRTOBJ) FILE(PDNEREP)          AC1569823;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Internet_Password);
  PARAMETER(PAR.Email_Address);
  PARAMETER(LCL.Email_User_ID);
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Cust_Duns_Number);
  PARAMETER(PAR.EDI_Warehouse_Store_No);
  PARAMETER(PAR.State_Tax_ID);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.One_Invoice_Per_PO);
  PARAMETER(PAR.EDI_Advanced_Ship_Notice);
  PARAMETER(PAR.Customer_G_L_Vendor_Num);
  PARAMETER('N');
  PARAMETER(PAR.Regional_Mgr_Fax_Email);
  PARAMETER(PAR.Employee_Co_Packer_Sale);
  PARAMETER(PAR.Customer_TF_Exempt_Code);
  PARAMETER(PAR.Customer_Watch_Flag);
  PARAMETER(PAR.Customer_Sales_Region);
  PARAMETER(PAR.Customer_Market_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   //?Add customer to Pork Email File - This is an IBM file.
   // Call program Crt Cust Usr Id IBM Fl UP.
   CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
   PARAMETER(DB1.Email_Address);
   PARAMETER(DB1.Email_User_ID);

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?Create or change customer extended record
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Parent, rtv watch flag, before update, to check later.   E00477
  CASE;

  // IF DB1.Ship To Customer EQ PAR.Parent Customer
  IF DB1.Ship_To_Customer = PAR.Parent_Customer;

  // Call program Rtv Cust Watch Flag   XF.
  CALL PROGRAM(Rtv Cust Watch Flag   XF) ('PNJ3XFR');
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(LCL.Customer_Watch_Flag);

  ENDIF;

  EXECUTE FUNCTION(Chg Customer Elec Comm CH) TYPE(CHGOBJ) FILE(PDNEREP)          AC1569824;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Internet_Password);
  PARAMETER(PAR.Email_Address);
  PARAMETER(LCL.Email_User_ID);
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Cust_Duns_Number);
  PARAMETER(PAR.EDI_Warehouse_Store_No);
  PARAMETER(PAR.State_Tax_ID);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.One_Invoice_Per_PO);
  PARAMETER(PAR.EDI_Advanced_Ship_Notice);
  PARAMETER(PAR.Customer_G_L_Vendor_Num);
  PARAMETER(LCL.Air_Freight_Orders);
  PARAMETER(PAR.Regional_Mgr_Fax_Email);
  PARAMETER(PAR.Employee_Co_Packer_Sale);
  PARAMETER(PAR.Customer_TF_Exempt_Code);
  PARAMETER(PAR.Customer_Watch_Flag);
  PARAMETER(PAR.Customer_Sales_Region);
  PARAMETER(PAR.Customer_Market_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   //?Add or change Pork Email Address in file. - This is an IBM file.
   // Call program Crt Cust Usr Id IBM Fl UP.
   CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
   PARAMETER(DB1.Email_Address);
   PARAMETER(DB1.Email_User_ID);

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?Update A/R watch flag if Parent watch flag changed    E00477
  CASE;

  // IF DB1.Ship To Customer EQ PAR.Parent Customer
  IF DB1.Ship_To_Customer = PAR.Parent_Customer;

  CASE;

  // IF PAR.Customer Watch Flag NE LCL.Customer Watch Flag
  IF PAR.Customer_Watch_Flag <> LCL.Customer_Watch_Flag;

  // Call program Zzz/Upd Watch-Parnt/AR XF.
  CALL PROGRAM(Zzz/Upd Watch-Parnt/AR XF) ('PNMCXFR');
  PARAMETER(1);
  PARAMETER(DB1.Parent_Customer);
  PARAMETER(PAR.Customer_Watch_Flag);

  ENDIF;

  ENDIF;

  ENDIF;

  //?02/02/2007 PKD Replaced to not hard code Company Number
  //?A/R Customer Changed: Create A/R Summary if necessary.
  CASE;

  // IF PAR.A/R Customer Number NE DB1.A/R Customer Number
  IF PAR.AR_Customer_Number <> DB1.AR_Customer_Number;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  ENDIF;

  //?** If Billing Cust address changes, update assoc open ord header recs
  CASE;

  // IF DB1.Ship To Customer EQ PAR.A/R Customer Number
  IF DB1.Ship_To_Customer = PAR.AR_Customer_Number;

  EXECUTE FUNCTION(RTV Upd Opn Ord-AR Cst IF) TYPE(EXCINTFUN)                     AC1941417;
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Customer_Name);
  PARAMETER(PAR.Address_Line_1);
  PARAMETER(PAR.Address_Line_2);
  PARAMETER(PAR.Address_Line_3);
  PARAMETER(PAR.City);
  PARAMETER(PAR.State_Code);
  PARAMETER(PAR.Zip_Postal_Code);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV Upd Opn Ord-AR Cst RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1941413;
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(PAR.Bill_to_Name);
   PARAMETER(PAR.Bill_to_Address_Line_1);
   PARAMETER(PAR.Bill_to_Address_Line_2);
   PARAMETER(PAR.Bill_to_Address_Line_3);
   PARAMETER(PAR.Bill_to_City);
   PARAMETER(PAR.Bill_to_State_Code);
   PARAMETER(PAR.Bill_to_Zip_Postal_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    EXECUTE FUNCTION(Chg AR cust/BillTo Ad CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1573467;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(PAR.Bill_to_Name);
    PARAMETER(PAR.Bill_to_Address_Line_1);
    PARAMETER(PAR.Bill_to_Address_Line_2);
    PARAMETER(PAR.Bill_to_Address_Line_3);
    PARAMETER(PAR.Bill_to_City);
    PARAMETER(PAR.Bill_to_State_Code);
    PARAMETER(PAR.Bill_to_Zip_Postal_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

  ENDIF;

  // Call program CHG Co/Cust w/G/L PlntsXF.
  CALL PROGRAM(CHG Co/Cust w/G/L PlntsXF) ('PMDYXFR');
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Terms_Code);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Special_Instructions_2);
  PARAMETER(PAR.Special_Instructions);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Broker);
  PARAMETER(PAR.P_O_Required_Flag);
  PARAMETER(PAR.Deliver_after_time);
  PARAMETER(PAR.Deliver_before_time);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Age_Code);
  PARAMETER(PAR.Outside_Warehouse_Flag);
  PARAMETER(PAR.Customer_Group_Code);
  PARAMETER(PAR.Customer_Group_Code_2);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Credit_Contact_Name);
  PARAMETER(PAR.Credit_Contact_Telephone);
  PARAMETER(PAR.Credit_Contact_Bus_Title);
  PARAMETER(PAR.Credit_Contact_Fax_Number);
  PARAMETER(PAR.Allow_Man_Qt_WO_Approval);
  PARAMETER(PAR.Fax_Invoice_Flag);
  PARAMETER(PAR.Fax_Invoice_Fax_Number);
  PARAMETER(PAR.Fax_Invoice_Contact_Name);
  PARAMETER(PAR.Distributor);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Extra_Amount_1);
  PARAMETER(PAR.Extra_Number_1);
  PARAMETER(PAR.Extra_Status_1);
  PARAMETER(PAR.SH_Expense_Bucket);
  PARAMETER(PAR.G_L_Sub_Account);
  PARAMETER(LCL.Change_Flag_USR);
  PARAMETER(PAR.City);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.State_Code);
  PARAMETER(PAR.Shipping_Zone_Code);
  PARAMETER(PAR.HPB_Employer_ID_#);
  PARAMETER(PAR.HPB_ULSD_Company_#);
  PARAMETER(PAR.HPB_ULSD_Facility_ID);
  PARAMETER(PAR.CCE_GL_Sales_Acct_Type);
  PARAMETER(PAR.Item_Age_Days_Fresh);
  PARAMETER(PAR.Item_Age_Days_Frozen);

  //?OMS257:  save off old city/state for zone checking
  // LCL.Ship To City = DB1.City
  LCL.Ship_To_City = DB1.City;

  // LCL.Ship To State Code = DB1.State Code
  LCL.Ship_To_State_Code = DB1.State_Code;

  //?cust change hist
  CASE;

  // IF PAR.Parent Customer NE DB1.Parent Customer
  IF PAR.Parent_Customer <> DB1.Parent_Customer;

  // Call program Crt CustChgHist       XF.
  CALL PROGRAM(Crt CustChgHist       XF) ('PPPPFFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Customer);

  ENDIF;

  //?Set Cust EXT and Co Cust record status to match Customer  E000900
  DO;

  //?** (This program is because the calling pgm has too many files)
  // Call program UPD Match Cust RecSts  XF.
  CALL PROGRAM(UPD Match Cust RecSts  XF) ('PBCXXFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Record_Status);

  ENDDO;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  //?If a Parent Order Entry Hold flag has been changed
  CASE;

  // IF PAR.Ship To Customer EQ PAR.Parent Customer
  IF PAR.Ship_To_Customer = PAR.Parent_Customer;

  CASE;

  // IF PAR.Order Entry Hold NE PAR.USR Order Entry Hold
  IF PAR.Order_Entry_Hold <> PAR.USR_Order_Entry_Hold;

  EXECUTE FUNCTION(CHG Child Par OE Hold  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1463429;
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Order_Entry_Hold);
  PARAMETER(PAR.Order_Entry_Hold_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Child Par OE Hold  CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1463428;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Order_Entry_Hold);
   PARAMETER(PAR.Order_Entry_Hold_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*Job_date);
  }

  ENDIF;

  EXECUTE FUNCTION(CHG Child Parent Cred. RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395747;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Credit_Limit);
  {
   //?USER: Processing if Data record not found

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF PAR.Parent Customer EQ DB1.Parent Customer
   IF PAR.Parent_Customer = DB1.Parent_Customer;

   EXECUTE FUNCTION(CHG CHild Parent Cred  CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1395748;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Parent_Credit_Limit);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing if Data record not found

    QUIT;

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Parent Credit Limit = PAR.Parent Credit Limit
    DB1.Parent_Credit_Limit = PAR.Parent_Credit_Limit;

   }

   ENDIF;

  }

  ENDIF;

  //?If A/R Customer Order Entry hold flag has Changed
  CASE;

  // IF PAR.Ship To Customer EQ PAR.A/R Customer Number
  IF PAR.Ship_To_Customer = PAR.AR_Customer_Number;

  CASE;

  // IF PAR.Order Entry Hold NE PAR.USR Order Entry Hold
  IF PAR.Order_Entry_Hold <> PAR.USR_Order_Entry_Hold;

  EXECUTE FUNCTION(CHG Child A/R OE Hold  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1463425;
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Order_Entry_Hold);
  PARAMETER(PAR.Order_Entry_Hold_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Child A/R OE Hold  CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1463426;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Order_Entry_Hold);
   PARAMETER(PAR.Order_Entry_Hold_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*Job_date);
  }

  ENDIF;

  EXECUTE FUNCTION(CHG Child A/R Credit   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1399291;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.AR_Credit_Limit);
  {
   //?USER: Processing if Data record not found

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF PAR.A/R Credit Limit NE DB1.A/R Credit Limit
   IF PAR.AR_Credit_Limit <> DB1.AR_Credit_Limit;

   // AND PAR.A/R Customer Number EQ DB1.A/R Customer Number
   AND PAR.AR_Customer_Number = DB1.AR_Customer_Number;

   EXECUTE FUNCTION(CHG Child A/R Credit   CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1399298;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.AR_Credit_Limit);
   ENDIF;

   CASE;

   // IF PAR.A/R Customer Number NE DB1.A/R Customer Number
   IF PAR.AR_Customer_Number <> DB1.AR_Customer_Number;

   QUIT;

   ENDIF;

  }

  ENDIF;

  //?T8763 01/19/17 DN  - Update M3 Supplier ID for Customer EXT2 record.
  CASE;

  // IF PAR.M3 Supplier ID Chgd? USR is yes
  IF PAR.M3_Supplier_ID_Chgd_USR = 'Y';

  //?W84562 DN 10/18/21-Passed in 'Automated A/R Aging Rpt'.
  // Call program Ext Crt/Upd Cust EXT2 XF.
  CALL PROGRAM(Ext Crt/Upd Cust EXT2 XF) ('PUANXFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.M3_Supplier_ID);
  PARAMETER(PAR.Automated_A_R_Aging_Rpt);
  PARAMETER(PAR.Ship_To_Establishment_nbr);
  PARAMETER(PAR.PM_Pallet_Type);

  ENDIF;

 }

 //?W84562 DN 10/18/21-Passed in 'Automated A/R Aging Rpt'.
 //?WI464 11/24/21 JBB-Pallet Management: Add Pallet Type update
 //?WI572 04/26/23 EL -Adding Ship To Establishment Nbr
 // Call program Ext Crt/Upd Cust EXT2 XF.
 CALL PROGRAM(Ext Crt/Upd Cust EXT2 XF) ('PUANXFR');
 PARAMETER(PR1.Ship_To_Customer);
 PARAMETER(PR4.M3_Supplier_ID);
 PARAMETER(PR4.Automated_A_R_Aging_Rpt);
 PARAMETER(PR6.Ship_To_Establishment_nbr);
 PARAMETER(PR6.PM_Pallet_Type);

 CASE;

 // IF PR5.Customer TF Exempt CodeSV NE PR2.Customer TF Exempt Code
 IF PR5.Customer_TF_Exempt_CodeSV <> PR2.Customer_TF_Exempt_Code;

 // Call program Chg TFExp-OrdDtl-Cust XF.
 CALL PROGRAM(Chg TFExp-OrdDtl-Cust XF) ('PPSKXFR');
 PARAMETER(PR1.Ship_To_Customer);
 PARAMETER(PR2.Customer_TF_Exempt_Code);

 ENDIF;

}


//?USER: Process command keys

//?Price Audit for St Joseph and Guymon
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

//?02/02/2007 PKD Changed to not hard code.
// Call program Zzz Price Audit Update XF.
CALL PROGRAM(Zzz Price Audit Update XF) ('PMDWXFR');
PARAMETER('CAEOREP');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('Y');
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');

ENDIF;

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PGM.*Return code = CND.Work with Details
PGM.*Return_code = 'WD';

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

RETURN;

ENDIF;

