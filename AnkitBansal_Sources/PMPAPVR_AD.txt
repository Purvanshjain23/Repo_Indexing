// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMPAPVR
// ?Date: 14.08.2025 Time: 03:43:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** CHANGE LOG and comments
DO;

//?01/14/09 LJB FP1303  Recompile for changes to OHE file
//?10/31/07 TPA
//?Notes: This program is called from PDL6DFR-WW Orders for Shipment
//?and will initially be used by Biodiesel companies for the situation
//?when they need to add an order to a load at the time the load
//?is being filled. The user only has to select a Warehouse from which
//?the second batch will be drawn.
ENDDO;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('SHP');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Get the auto-generation of order numbers flag
EXECUTE FUNCTION(RTV OP status          RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1129149;
PARAMETER(*ZERO);
PARAMETER(LCL.Auto_Order_Numbering);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Load screen

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Ship Cust,Ordr Typ RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1790150;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV HPB fields         RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1853458;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.COA_Batch_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV all used fields    RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1851689;
PARAMETER(DTL.Company_Number);
PARAMETER(*MISSING);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(NLL.COA_Date_Open_for_Ship);
PARAMETER(NLL.COA_Time_Open_for_Ship);
PARAMETER(NLL.COA_Open_for_Ship_Inits);
PARAMETER(NLL.COA_Date_Close_from_Ship);
PARAMETER(NLL.COA_Time_Close_from_Ship);
PARAMETER(NLL.COA_Close_from_Ship_Inits);
PARAMETER(NLL.COA_Gallons_Used);
PARAMETER(NLL.COA_Comment);
PARAMETER(NLL.COA_Batch_Header_Sts);
PARAMETER(NLL.COA_Batch_Properties_Cmpl);
PARAMETER(NLL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1850788;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_Bio_dsl_Fuel_Cd_Descr);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.COA_Active_Whse_Tank);
PARAMETER(DTL.Description_Line_One);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?USER: Validate fields

//?Prompt on Warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 1
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_1;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Validate relations

//?Validate new order number if entered
CASE;

// IF DTL.USR Next Order Number is Not equal to zeros
IF DTL.USR_Next_Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Chk Order Exist    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1129157;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Next_Order_Number);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.User_Id);
{
 //?USER: Processing if Data record not found

 // PAR.Reason Code = CON.*BLANK
 PAR.Reason_Code = *BLANK;

 // PAR.Order in Use = CND.no
 PAR.Order_in_Use = 'N';

 // PAR.Header Status = CND.*None
 PAR.Header_Status = *BLANK;

 // PAR.User Id = CON.*BLANK
 PAR.User_Id = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order number already exists.'
ERROR(USR3835);
MSGPARM(DTL.USR_Next_Order_Number);

ENDIF;

ENDIF;

//?Can't enter the same warehouse
CASE;

// IF DTL.COA Active Whse/Tank EQ DTL.COA Active Whse/Tank 1
IF DTL.COA_Active_Whse_Tank = DTL.COA_Active_Whse_Tank_1;

// Send error message - 'Warehouse must be different for the new order.'
ERROR(USR3837);
MSGPARM(DTL.COA_Active_Whse_Tank_1);

QUIT;

ENDIF;

//?Validate Warehouse
CASE;

// IF DTL.COA Active Whse/Tank 1 is Warehouse Code not Blank
IF DTL.COA_Active_Whse_Tank_1 <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER(DTL.Description);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if Company can't ship from this warehouse
CASE;

// IF DTL.Company Number NE LCL.Shipping Company
IF DTL.Company_Number <> LCL.Shipping_Company;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.COA_Active_Whse_Tank_1);
MSGPARM(DTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(RTV Bio-d Code for Whs RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1849761;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Bio_diesel_fuel_code);
PARAMETER(DTL.Description_USR);
PARAMETER(DTL.COA_Active_Whse_Tank_1);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA Bio-diesel Fuel Code EQ PAR.COA Bio-diesel Fuel Code
 IF DB1.COA_Bio_diesel_Fuel_Code = PAR.COA_Bio_diesel_Fuel_Code;

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 CASE;

 // IF DB1.COA Active Whse/Tank 1 EQ PAR.COA Active Whse/Tank 1
 IF DB1.COA_Active_Whse_Tank_1 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 2 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_2 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 3 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_3 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 4 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_4 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 5 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_5 = PAR.COA_Active_Whse_Tank_1;

 // OR DB1.COA Active Whse/Tank 6 EQ PAR.COA Active Whse/Tank 1
 OR DB1.COA_Active_Whse_Tank_6 = PAR.COA_Active_Whse_Tank_1;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Error if Warehouse not on COA Prop Def Hdr
CASE;

// IF DTL.USR Bio-diesel fuel code is Not entered
IF DTL.USR_Bio_diesel_fuel_code = *BLANK;

// Send error message - 'Whse/Tank not on a COA Property Header record.'
ERROR(USR3814);
MSGPARM(DTL.COA_Active_Whse_Tank_1);

//?Error if Warehouse not on COA Prop Def Hdr
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.COA Bio-diesel Fuel Code NE DTL.USR Bio-diesel fuel code
IF DTL.COA_Bio_diesel_Fuel_Code <> DTL.USR_Bio_diesel_fuel_code;

// Send error message - 'Bio-diesel fuel code must be the same for all orders on a load.'
ERROR(USR3834);
MSGPARM(DTL.COA_Active_Whse_Tank_1);
MSGPARM(DTL.USR_Bio_diesel_fuel_code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Batch_Number_5_0_USR);
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER('O');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


//?Error if Warehouse is not 'Open' for shipping
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if Warehouse is not 'Open' for shipping
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The Warehouse must be 'Open' for shipping.'
ERROR(USR3832);
MSGPARM(DTL.COA_Active_Whse_Tank_1);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.COA_Active_Whse_Tank_1);

ENDIF;

ENDIF;

//?USER: User defined action

// LCL.USR Next Order Number = DTL.USR Next Order Number
LCL.USR_Next_Order_Number = DTL.USR_Next_Order_Number;

EXECUTE FUNCTION(RTV for crt from cpy   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1854797;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(LCL.USR_Next_Order_Number);
PARAMETER(DTL.Batch_Number_5_0_USR);
PARAMETER(DTL.COA_Active_Whse_Tank_1);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.USR Next Order Number is Equal to zeros
 IF PAR.USR_Next_Order_Number = *ZERO;

 EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
 PARAMETER(0);
 PARAMETER(LCL.USR_Next_Order_Number);
 {
  //?USER: Processing before Data update

  //?Assumes Credit memo numbers always automatically assigned
  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // PAR.USR Next Order Number = DB1.Next Order Number
  PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

  // DB1.Next Order Number = DB1.Next Order Number + CON.1
  DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // PAR.USR Next Order Number = LCL.USR Next Order Number
 PAR.USR_Next_Order_Number = LCL.USR_Next_Order_Number;

 ENDIF;

 EXECUTE FUNCTION(CRT Order Header       CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1113750;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.USR_Next_Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(02);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Time_of_Original_Entry);

  //?USER: Processing if Data record already exists

  //?** Set flag so it can be tested on the return    T075 03/28/2006 LJB
  PGM.*Return_code = 'Y2U0003';

  RETURN;

 }

 EXECUTE FUNCTION(RTV for crt from cpy   RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1854798;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(LCL.USR_Next_Order_Number);
 {
  //?USER: Process Data record

  //?Need to create Load Detail first to get the next Stop/Drop Seq #
  EXECUTE FUNCTION(RTV high Stp/Drp Seq # RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1855067;
  PARAMETER(DB1.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Then duplicate the Load detail adding new Stop/Drop Seq & Ord #
  // LCL.Stop/Drop Sequence Number = CON.1 + LCL.Stop/Drop Sequence Number
  LCL.Stop_Drop_Sequence_Number = 1 + LCL.Stop_Drop_Sequence_Number;

  EXECUTE FUNCTION(RTV for crt from cpy   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1854878;
  PARAMETER(DB1.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.USR_Next_Order_Number);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Stop_Drop_Sequence_Number);
   PARAMETER(DB1.Stop_Drop);
   PARAMETER(DB1.Comments_for_Pickup);
   PARAMETER(DB1.Miles_to_next_stop);
   PARAMETER(DB1.Freight_Charge);
   PARAMETER(DB1.Ld_Hdr_Ld_Dtl_Unused);
   PARAMETER(DB1.Freight_Misc_Charge);
   PARAMETER(DB1.Freight_Stop_Charge);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.USR_Next_Order_Number);
   PARAMETER(DB1.Ship_Status);
   PARAMETER(DB1.Estimated_Arrival_Date);
   PARAMETER(DB1.Estimated_Arrival_Time);
   PARAMETER(DB1.Appointment_Confirm_Date);
   PARAMETER(DB1.Appointment_Confirm_Time);
   PARAMETER(DB1.Confirmation_Made_With);
   PARAMETER(DB1.Confirmation_Number);
   PARAMETER(DB1.Actual_Delivery_Date);
   PARAMETER(DB1.Actual_Delivery_time);
   PARAMETER(DB1.Scheduled_Delivery_Date);
   PARAMETER(DB1.Scheduled_Delivery_Time);
   PARAMETER(DB1.Deadline_Depart_DT_HDR);
   PARAMETER(DB1.Deadline_Depart_Time_HDR);
   PARAMETER(DB1.On_Yard_Date);
   PARAMETER(DB1.On_Yard_Time);
   PARAMETER(DB1.MPC_Number);
   PARAMETER(DB1.Load_Dtl_On_Time_Flag);
   PARAMETER(DB1.On_Time_Addl_Rsn_Unused);
   PARAMETER(DB1.Seal_Nbr_1);
   PARAMETER(DB1.Seal_Nbr_2);
   PARAMETER(DB1.Seal_Nbr_3);
   PARAMETER(DB1.Seal_Nbr_4);
   PARAMETER(DB1.Seal_Nbr_5);
   PARAMETER(DB1.LD_Carrier_Appt_Date);
   PARAMETER(DB1.LD_Unused_Date_2);
   PARAMETER(DB1.LD_Unused_Date_3);
   PARAMETER(DB1.LD_Carrier_Appt_Time);
   PARAMETER(DB1.LD_Unused_Time_2);
   PARAMETER(DB1.LD_Unused_Time_3);
   PARAMETER(DB1.Miles_Error_Sts);
   PARAMETER(DB1.LD_Unused_Sts_2);
   PARAMETER(DB1.HPB_Transload_Station);
   PARAMETER(DB1.LD_Cst_Svc_Tracer_Cmmnt);
   PARAMETER(DB1.Carrier_Ref_PRO_Inv);
   PARAMETER(DB1.Cust_Assigned_Appt_#);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   QUIT;

  }

  EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.USR_Next_Order_Number);
  PARAMETER(DB1.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Shipping_Line);
  PARAMETER(DB1.Port_Delv_Terminal);
  PARAMETER(DB1.OHE_City);
  PARAMETER(DB1.OHE_Vessel_Airline);
  PARAMETER(DB1.OHE_Voyage_Flight);
  PARAMETER(DB1.OHE_Booking_Number);
  PARAMETER(DB1.OHE_Discharge_Port_Airprt);
  PARAMETER(DB1.OHE_Sail_Flight_Date);
  PARAMETER(DB1.OHE_Port_Cut_Date);
  PARAMETER(DB1.OHE_Arrival_Date);
  PARAMETER(DB1.OHE_Late_Delivery_Code);
  PARAMETER(DB1.OHE_Ship_Status);
  PARAMETER(DB1.OHE_Container_Number);
  PARAMETER(DB1.OHE_Comment_1);
  PARAMETER(DB1.OHE_Comment_2);
  PARAMETER(DB1.OHE_Unused_Number_1_11_0);
  PARAMETER(DB1.OHE_Unused_Number_2_11_0);
  PARAMETER(DB1.OHE_Unused_Number_3_11_0);
  PARAMETER(DB1.OHE_Unused_Number_4_11_0);
  PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
  PARAMETER(DB1.OHE_HPB_RIN_Price);
  PARAMETER(DB1.Transload_Terminal_Fees);
  PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
  PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
  PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
  PARAMETER(DB1.OHE_Actual_Ship_Date);
  PARAMETER(DB1.OHE_Carrier_SCAC_Code);
  PARAMETER(DB1.OHE_Spot_Buy);
  PARAMETER(DB1.OHE_PO_ACK_Flag);
  PARAMETER(DB1.OHE_Override_Type_Code);
  PARAMETER(DB1.OHE_Backhaul_Status);
  PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
  PARAMETER(DB1.OHE_Load_Haul_Type);
  PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
  PARAMETER(DB1.OHE_Bookings_Confirmed);
  PARAMETER(DB1.OHE_EDI_Error_Reasons);
  PARAMETER(*MISSING);
  PARAMETER(PAR.HPB_COA_Batch_Number);
  PARAMETER(DB1.Delivery_P_O_Number);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   //?USER: Processing if Data record already exists

   //?R15161 DN 07/31/19-Commented Out.
   //?USER: Processing if Data update error

   RETURN;

  }

 }

 EXECUTE FUNCTION(RTV for crt from cpy   RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1854866;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.USR_Next_Order_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Event Code is Open Orders
  IF DB1.Event_Code < '04';

  EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.USR_Next_Order_Number);
  PARAMETER(DB1.Event_Number);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Invoice_Memo_Company);
  PARAMETER(DB1.Invoice_Memo_Number);
  PARAMETER(DB1.Invoice_Memo_Suffix);
  PARAMETER(DB1.Event_Date);
  PARAMETER(DB1.Activity_Completion);
  PARAMETER(DB1.Activity_Hold);
  PARAMETER(DB1.Post_Cash_Complete);
  PARAMETER(DB1.Cross_Event_Ref_Comp);
  PARAMETER(DB1.Cross_Event_Ref_Order);
  PARAMETER(DB1.Cross_Event_Ref_Event);
  PARAMETER(DB1.Ship_To_Customer);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  // LCL.Event Code = DB1.Event Code
  LCL.Event_Code = DB1.Event_Code;

  //?USER: Exit processing

  //?Create the picked event if necessary
  CASE;

  // IF LCL.Event Code is 02 Load Planned
  IF LCL.Event_Code = '02';

  EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.USR_Next_Order_Number);
  PARAMETER(3);
  PARAMETER(03);
  PARAMETER(DB1.Invoice_Memo_Company);
  PARAMETER(DB1.Invoice_Memo_Number);
  PARAMETER(DB1.Invoice_Memo_Suffix);
  PARAMETER(DB1.Event_Date);
  PARAMETER(DB1.Activity_Completion);
  PARAMETER(DB1.Activity_Hold);
  PARAMETER(DB1.Post_Cash_Complete);
  PARAMETER(DB1.Cross_Event_Ref_Comp);
  PARAMETER(DB1.Cross_Event_Ref_Order);
  PARAMETER(DB1.Cross_Event_Ref_Event);
  PARAMETER(DB1.Ship_To_Customer);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(RTV for crt from cpy   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1854800;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.USR_Next_Order_Number);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Active_Whse_Tank);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CRT Order Detail       CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1854871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.USR_Next_Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.COA_Active_Whse_Tank);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Order_Group_Code);
  PARAMETER('A');
  PARAMETER(DB1.Detail_Line_Status_Last);
  PARAMETER(DB1.Billing_Detail_Cost_Dol);
  PARAMETER(DB1.Billing_Detail_Gross_Dol);
  PARAMETER(DB1.Billing_Detail_Net_Dol);
  PARAMETER(DB1.Quantity_to_Substitute);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(DB1.Market_Pricing_Date);
  PARAMETER(DB1.Commodity_Market_Code);
  PARAMETER(DB1.Date_Method_Code);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(DB1.Contract_Number);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Pricing_Date_Used);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(DB1.U_M_Ordered);
  PARAMETER(DB1.Work_Confirm_Status);
  PARAMETER(DB1.Work_Over_Short_Status);
  PARAMETER(DB1.OD_Production_Plan_Sts);
  PARAMETER(DB1.Order_Desc_Line_One);
  PARAMETER(DB1.Order_Desc_Line_Two);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Catch_Weight_Status);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Audit_Reason_Code);
  PARAMETER(DB1.Production_Date_Control);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Unit_Cost_Pricing_U_M);
  PARAMETER(DB1.Unit_Cost_Per_Pound);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(DB1.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(DB1.Tare_Weight_Total);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Affect_Inventory_Status);
  PARAMETER(DB1.Affect_Sales_Doll_Status);
  PARAMETER(DB1.Affect_Sales_Pnds_Status);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Level);
  PARAMETER(DB1.Quality_Level);
  PARAMETER(DB1.Pricing_Product_Class_Rep);
  PARAMETER(DB1.Season_Product_Class_Repo);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*USER);
  PARAMETER(DB1.Country_Code);
  PARAMETER(03);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  PARAMETER(DB1.Invoice_Unit_Price);
  PARAMETER(DB1.Invoice_Extended_Amt);
  PARAMETER(DB1.Ham_Group_Number);
  PARAMETER(DB1.OD_Adj_Type_Override);
  PARAMETER(DB1.Affect_Trade_Fund);
  PARAMETER(DB1.Affect_Commission);
  PARAMETER(DB1.Affect_Pricing);
  PARAMETER(DB1.Released_by_User_Sts_Y_N);
  PARAMETER(DB1.Ord_TF_Exempt_Code);
  PARAMETER(DB1.OD_Pallet_Type);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(DB1.OD_Price_Type);
  PARAMETER(DB1.Warehouse_Pallets_Loaded);
  PARAMETER(DB1.Consumed_Item_Code);
  PARAMETER(DB1.Deadline_Depart_Date_LH);
  PARAMETER(DB1.OD_Price_Type_Ref_Num);
  PARAMETER(DB1.OD_Firm_Date);
  PARAMETER(DB1.Deadline_Depart_Time_LH);
  PARAMETER(DB1.Price_Code);
  PARAMETER(DB1.Maximum_Net_Weight);
  PARAMETER(DB1.Substitution_Line_Number);
  PARAMETER(DB1.Max_Qty_to_sched_per_day);
  PARAMETER(DB1.Warehouse_Pallet_Tare);
  PARAMETER(DB1.Warehouse_Avg_Pallet_Tare);
  PARAMETER(DB1.OD_Item_Target_Price);
  PARAMETER(DB1.OD_Estimated_Gross_Weight);
  PARAMETER(DB1.OD_Maximum_Unit_Weight);
  PARAMETER(DB1.Order_Gate_Final_Price);
  PARAMETER(DB1.OD_Ceiling_Price);
  PARAMETER(DB1.OD_Gate_Final_Price_Adj);
  PARAMETER(DB1.OD_Weighted_Avg_Price);
  PARAMETER(DB1.OD_Original_Ordered_Qty);
  PARAMETER(DB1.OD_Cancel_Date);
  PARAMETER(DB1.OD_Unused_Prc_7);
  PARAMETER(DB1.OD_Unused_Prc_8);
  PARAMETER(DB1.OD_MPR_Sent_to_USDA_Sts);
  PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
  PARAMETER(DB1.OD_UnUsed_Price_Sts_3);
  PARAMETER(DB1.Weight_Amount_Entered);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);
  PARAMETER(DB1.OD_Spot_Buy);
  PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
  PARAMETER(DB1.Order_Line_Error_Type);
  PARAMETER(DB1.OD_Market_Begin_Date);
  PARAMETER(DB1.OD_Market_Ending_Date);
  PARAMETER(DB1.OD_Atch_to_Ord_ActShpDte);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.USR_Next_Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER('SHP');

// Send information message - 'Order &1 created for shipping from Warehouse &2.'
MESSAGE(USR3836 *INFO);
MSGPARM(LCL.USR_Next_Order_Number);
MSGPARM(DTL.COA_Active_Whse_Tank_1);

