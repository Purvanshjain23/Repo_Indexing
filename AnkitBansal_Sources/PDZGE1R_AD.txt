// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDZGE1R
// ?Date: 14.08.2025 Time: 03:27:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC 04/18/13 E2494 added gate pricing to type needing contr price type
//?RMC 06/18/08  update price method default (used in O.E. Detail Lines)
//?RMC 08/30/07  fix f4 prompt not working
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(KEY.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Date Method Code  RT) TYPE(RTVOBJ) FILE(PMCEREP)           AC1847958;
PARAMETER(DB1.Price_Method_Code);
PARAMETER(DTL.Date_Method_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

CASE;

// IF DTL.Date Method Code is Entered
IF DTL.Date_Method_Code <> *BLANK;

EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Date_Method_Code);
PARAMETER(DTL.Date_Method_Description);
PARAMETER(DTL.System_Using_Price_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

// LCL.Date Method Code = DTL.Date Method Code
LCL.Date_Method_Code = DTL.Date_Method_Code;

// DTL.Condition Desc. 1  USR = Condition name of DTL.PMH Price Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.PMH_Price_Type);

//?USER: Validate detail screen fields

//?VAL: Contract Price Type
CASE;

// IF DTL.Price Method Type is Contract Pricing
IF DTL.Price_Method_Type = 'Q';

// OR DTL.Price Method Type is Gate Pricing
OR DTL.Price_Method_Type = 'G';

CASE;

// IF DTL.PMH Price Type is *None
IF DTL.PMH_Price_Type = *BLANK;

// Send error message - 'Contract Price Type Required'
ERROR(USR4343);
MSGPARM(DTL.PMH_Price_Type);

ENDIF;

//?VAL: Contract Price Type
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PMH Price Type = CND.*None
DTL.PMH_Price_Type = *BLANK;

ENDIF;

CASE;

// IF DTL.Date Method Code is Entered
IF DTL.Date_Method_Code <> *BLANK;

EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Date_Method_Code);
PARAMETER(DTL.Date_Method_Description);
PARAMETER(DTL.System_Using_Price_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Market Date Method not found.'
ERROR(USR1681);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Date Method Description = CON.*BLANK
DTL.Date_Method_Description = *BLANK;

ENDIF;

//?CALC: Detail screen function fields

// DTL.Condition Desc. 1  USR = Condition name of DTL.PMH Price Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.PMH_Price_Type);

//?USER: Validate detail screen relations

//?F4 = Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.System Using Price Method
IF PGM.*Cursor_field = DTL.System_Using_Price_Method;

// Call program Zzz Syst using Prc Mth SR.
CALL PROGRAM(Zzz Syst using Prc Mth SR) ('PMH1SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.System_Using_Price_Method);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Date Method Code
IF PGM.*Cursor_field = DTL.Date_Method_Code;

// Call program SEL Dte Meth by System SR.
CALL PROGRAM(SEL Dte Meth by System SR) ('PDZYSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Date_Method_Code);
PARAMETER(DTL.Date_Method_Description);
PARAMETER(DTL.System_Using_Price_Method);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT PD Price Meth Hdr  CR) TYPE(CRTOBJ) FILE(PDIHREP)          AC1249300;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.Price_Method_Description);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Method_Type);
PARAMETER(DTL.System_Using_Price_Method);
PARAMETER(DTL.Decimal_Places_Rounded);
PARAMETER(DTL.PMH_Price_Type);
PARAMETER(DTL.PMH_Unused_Sts_2);
PARAMETER(DTL.PMH_Unused_Sts_3);
PARAMETER(DTL.PMH_Unused_Sts_4);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*Job_date);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Price Method He CH) TYPE(CHGOBJ) FILE(PDIHREP)          AC1249301;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.Price_Method_Description);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Method_Type);
PARAMETER(DTL.System_Using_Price_Method);
PARAMETER(DTL.Decimal_Places_Rounded);
PARAMETER(DTL.PMH_Price_Type);
PARAMETER(DTL.PMH_Unused_Sts_2);
PARAMETER(DTL.PMH_Unused_Sts_3);
PARAMETER(DTL.PMH_Unused_Sts_4);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*Job_date);

//?USER: Process command keys

CASE;

// IF DTL.Date Method Code NE LCL.Date Method Code
IF DTL.Date_Method_Code <> LCL.Date_Method_Code;

EXECUTE FUNCTION(Rtv Chg Date Mthd Cd  RT) TYPE(RTVOBJ) FILE(PMCEREP)           AC1888035;
PARAMETER(DTL.Price_Method_Code);
PARAMETER(DTL.Date_Method_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Price Mth Default CR) TYPE(CRTOBJ) FILE(PMCEREP)           AC1847934;
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Price Mth Default CH) TYPE(CHGOBJ) FILE(PMCEREP)           AC1847935;
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
}


ENDIF;

