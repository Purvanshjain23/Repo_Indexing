// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNM9EFR
// ?Date: 14.08.2025 Time: 03:45:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Case Quantity = CND.EQ *ZERO
PAR.USR_Case_Quantity = *ZERO;

// PAR.USR Case Weight = CND.EQ *ZERO
PAR.USR_Case_Weight = *ZERO;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

// PAR.USR Display 2 = CND.Yes
PAR.USR_Display_2 = 'Y';

// LCL.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?USER: Initialize subfile header

CASE;

// IF CTL.COA Temperature Loadout is Not Entered
IF CTL.COA_Temperature_Loadout = *ZERO;

// CTL.COA Temperature Loadout = PAR.COA Temperature Loadout
CTL.COA_Temperature_Loadout = PAR.COA_Temperature_Loadout;

ENDIF;

// CTL.Customer Purchase Order # = PAR.Customer Purchase Order #
CTL.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Quantity Allocated = PAR.Quantity Allocated
CTL.Quantity_Scheduled = PAR.Quantity_Scheduled;

// CTL.Weight Allocated = PAR.Weight Allocated
CTL.Weight_Scheduled = PAR.Weight_Scheduled;

EXECUTE FUNCTION(RTV Manifest detail    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1309792;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Weight_Scheduled);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Quantity Ordered 1 USR = CTL.Quantity Scheduled
CTL.Quantity_Ordered_1_USR = CTL.Quantity_Scheduled;

// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.USR_Item_Type_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Price_Method_Default);
PARAMETER(CTL.Chilling_Time_USR);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Item_Target_Price);
PARAMETER(WRK.Error_Status);

//?If CW sts not found for item, use what's on order
CASE;

// IF PAR.Catch Weight Status EQ WRK.BLANK
IF PAR.Catch_Weight_Status = WRK.BLANK;

// PAR.Catch Weight Status = WRK.Catch Weight Status
PAR.Catch_Weight_Status = WRK.Catch_Weight_Status;

ENDIF;

// WRK.Case Sequence Number = CND.Zero
WRK.Case_Sequence_Number = *ZERO;

EXECUTE FUNCTION(RTV Next Key           RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310085;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(WRK.Case_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Case Sequence Number = CON.1
 PAR.Case_Sequence_Number = 1;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number EQ DB1.Company Number
 IF PAR.Company_Number = DB1.Company_Number;

 // AND PAR.Order Number EQ DB1.Order Number
 AND PAR.Order_Number = DB1.Order_Number;

 // AND PAR.Order Sequence Number EQ DB1.Order Sequence Number
 AND PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

 // AND PAR.Order Secondary Line Seq EQ DB1.Order Secondary Line Seq
 AND PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

 // PAR.Case Sequence Number = DB1.Case Sequence Number
 PAR.Case_Sequence_Number = DB1.Case_Sequence_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 //?USER: Exit processing

 // PAR.Case Sequence Number = CON.1 + PAR.Case Sequence Number
 PAR.Case_Sequence_Number = 1 + PAR.Case_Sequence_Number;

}


// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.Ship To Name = PAR.Ship To Name
CTL.Ship_To_Name = PAR.Ship_To_Name;

//?FP1110 HPB modifications - RMC 11/07/7
EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(CTL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FP1322 chk for an open tank per prod whse on the order's whse
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E2079 Display Gross Ordered Qty so they can compare to gross shipped
// CTL.USR Quantity Accumulated = CON.*ZERO
CTL.USR_Quantity_Accumulated = *ZERO;

EXECUTE FUNCTION(RTV HPB Gross Gall    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1879030;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.USR_Quantity_Accumulated);
{
 //?USER: Process Data record

 // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
 PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

}


CASE;

// IF CTL.COA Temperature Loadout is GT 0
IF CTL.COA_Temperature_Loadout > *ZERO;

// LCL.COA Temperature Loadout = CTL.COA Temperature Loadout
LCL.COA_Temperature_Loadout = CTL.COA_Temperature_Loadout;

// LCL.RFS Loadout Temperature = CTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = CTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: ctl.gross galls
CTL.Gross_Gallons_USR = CTL.Quantity_Ordered_1_USR / WRK.HPB_Temperature_Adjustmnt 'H';

ENDIF;

//?USER: Initialize subfile record (existing record)

// WRK.Case Sequence Number = DB1.Case Sequence Number
WRK.Case_Sequence_Number = DB1.Case_Sequence_Number;

// RCD.Case Sequence Number = WRK.Case Sequence Number
RCD.Case_Sequence_Number = WRK.Case_Sequence_Number;

//?FP1110
// RCD.HPB Meter Start Gallon = DB1.HPB Meter Start Gallon
RCD.HPB_Meter_Start_Gallon = DB1.HPB_Meter_Start_Gallon;

// RCD.HPB Meter Ending Gallon = DB1.HPB Meter Ending Gallon
RCD.HPB_Meter_Ending_Gallon = DB1.HPB_Meter_Ending_Gallon;

// RCD.HPB Meter Total Gallon = DB1.HPB Meter Total Gallon
RCD.HPB_Meter_Total_Gallon = DB1.HPB_Meter_Total_Gallon;

//?FP1322
//?* Dont show rin any more
EXECUTE FUNCTION(RTV RIN Sold          RT) TYPE(RTVOBJ) FILE(PNFPCPP)           AC1962265;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(LCL.COA_Batch_RIN);
PARAMETER(RCD.COA_RIN_Customer_PO#);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv RIN F/Manf Dtl RINRT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1962266;
 PARAMETER(DB1.COA_Batch_Company_Nbr);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.COA_Batch_Header_RIN);
 PARAMETER(PAR.COA_RIN_Customer_PO#);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// Call program Dsp Sel RIN for shipmnDF.
CALL PROGRAM(Dsp Sel RIN for shipmnDF) ('PNOKDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Carrier_Broker);
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.COA_Temperature_Loadout);

CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?recalc gross
CASE;

// IF CTL.COA Temperature Loadout NE LCL.COA Temperature Loadout
IF CTL.COA_Temperature_Loadout <> LCL.COA_Temperature_Loadout;

// LCL.COA Temperature Loadout = CTL.COA Temperature Loadout
LCL.COA_Temperature_Loadout = CTL.COA_Temperature_Loadout;

// LCL.RFS Loadout Temperature = CTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = CTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: ctl.gross galls
CTL.Gross_Gallons_USR = CTL.Quantity_Ordered_1_USR / WRK.HPB_Temperature_Adjustmnt 'H';

ENDIF;

//?USER: Validate subfile record fields

//?Delete Manifest Record
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Compute standard weight for non-catchweight items
CASE;

// IF PAR.Catch Weight Status is Not Yes
IF PAR.Catch_Weight_Status = *BLANK/'N';

// RCD.Case Weight = RCD.Case Quantity * PAR.Unit Weight *
RCD.Case_Weight = RCD.Case_Quantity * PAR.Unit_Weight;

ENDIF;

//?If Y is entered for USR edit for Quantity & Weight
CASE;

// IF RCD.USR Zero Value is Yes
IF RCD.USR_Zero_Value = 'Y';

CASE;

// IF RCD.Case Quantity is NE *ZERO
IF RCD.Case_Quantity <> *ZERO;

// OR RCD.Case Weight is NE *ZERO
OR RCD.Case_Weight <> *ZERO;

// Send error message - 'Quantity and Weight must be Zero if Zero flag is Y.'
ERROR(USR1588);
MSGPARM(RCD.USR_Case_Quantity);
MSGPARM(RCD.USR_Case_Weight);

ENDIF;

ENDIF;

//?IF " " Entered for Zero Quantity flag
CASE;

// IF RCD.USR Zero Value is No
IF RCD.USR_Zero_Value = *BLANK;

CASE;

// IF RCD.Case Quantity is EQ *ZERO
IF RCD.Case_Quantity = *ZERO;

// OR RCD.Case Weight is EQ *ZERO
OR RCD.Case_Weight = *ZERO;

// Send error message - 'Quantity and Weight are required.'
ERROR(USR1325);
MSGPARM(RCD.Case_Quantity);
MSGPARM(RCD.Case_Weight);

ENDIF;

ENDIF;

//?FP1110 HPB project - new validation for meter readings, weight calc
CASE;

// IF CTL.WHS Req Meter Reading Shp is Yes
IF CTL.WHS_Req_Meter_Reading_Shp = 'Y';

// CTL.COA Batch Number = RCD.HPB COA Batch Number
CTL.COA_Batch_Number = RCD.HPB_COA_Batch_Number;

//?Calc HPB Net Gallons
CASE;

// IF RCD.HPB Meter Start Gallon GT RCD.HPB Meter Ending Gallon
IF RCD.HPB_Meter_Start_Gallon > RCD.HPB_Meter_Ending_Gallon;

// Send error message - 'Meter Start Gallons cant be greater than the Meter Ending Gallons.'
ERROR(USR3843);
MSGPARM(RCD.HPB_Meter_Start_Gallon);
MSGPARM(RCD.HPB_Meter_Ending_Gallon);

//?Calc HPB Net Gallons
// IF *OTHERWISE
IF *OTHERWISE;

//?RMC -- Round Net Gallons to a whole number per Tom 4/23/08
//?Calc Factor or Use API Table - 7/14/10
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: rcd.Net gallons
WRK.Quantity_7_0_USR = RCD.HPB_Meter_Total_Gallon * ( ( WRK.COA_Temp_Conv_Factor_1                 +
* LCL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) 'H';

// Compute: density ref NEW
WRK.COA_Density_Ref_Adj_4_dec = ( ( WRK.COA_Temp_Conv_Factor_1                                     +
* LCL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) * LCL.COA_Density_Loadout;

//?Calc Factor or Use API Table - 7/14/10
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

// LCL.RFS Loadout Temperature = LCL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = LCL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

// Compute: rcd.Net gallons
WRK.Quantity_7_0_USR = RCD.HPB_Meter_Total_Gallon * WRK.HPB_Temperature_Adjustmnt 'H';

// Compute: density ref NEW
WRK.COA_Density_Ref_Adj_4_dec = WRK.HPB_Temperature_Adjustmnt * LCL.COA_Density_Loadout            +
'H';

ENDIF;

// RCD.HPB Meter Net Gallon = WRK.Quantity 7.0 USR
RCD.HPB_Meter_Net_Gallon = WRK.Quantity_7_0_USR;

// RCD.HPB Density Ref Gravity = WRK.COA Density Ref Adj 4 dec
RCD.HPB_Density_Ref_Gravity = WRK.COA_Density_Ref_Adj_4_dec;

ENDIF;

//?Calc Gross weight from density loadout and other factor
// Compute: Fuel Weight
RCD.Case_Weight = ( RCD.HPB_Meter_Total_Gallon * LCL.COA_Density_Loadout ) * 8.33;

//?Calc Net weight from density loadout and other factor
// Compute: Fuel Weight
RCD.HPB_Meter_Net_Weight = ( RCD.HPB_Meter_Net_Gallon * LCL.COA_Density_Loadout ) * 8.33;

ENDIF;

// PAR.USR Case Quantity = RCD.Case Quantity + PAR.USR Case Quantity
PAR.USR_Case_Quantity = RCD.Case_Quantity + PAR.USR_Case_Quantity;

// PAR.USR Case Weight = RCD.Case Weight + PAR.USR Case Weight
PAR.USR_Case_Weight = RCD.Case_Weight + PAR.USR_Case_Weight;

//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Manifest Detl -HPB IF) TYPE(EXCINTFUN) FILE(OMFNCPP)       AC1962267;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Load_ID);
{
 //?Execute internal function

 //?Update selected RIN with not sold sts and take out gallons sold
 EXECUTE FUNCTION(DLT Manifest Detail    DL) TYPE(DLTOBJ) FILE(OMFNCPP)          AC1310362;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(LCL.USR_Update_Flag);
 PARAMETER(LCL.COA_RIN_Modified_Sts);
 {
  //?USER: Processing after Data update

  // PAR.USR Update Flag = CND.Yes
  PAR.USR_Update_Flag = 'Y';

  // PAR.COA RIN Modified Sts = CND.yes
  PAR.COA_RIN_Modified_Sts = 'Y';

 }

 EXECUTE FUNCTION(Del Manifest Dtl RIN  DO) TYPE(DLTOBJ) FILE(PNFPCPP)           AC1962251;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 EXECUTE FUNCTION(RTV Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1310188;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Case_Quantity);
 PARAMETER(LCL.Case_Weight);
 PARAMETER(LCL.USR_Under_Min);
 PARAMETER(LCL.USR_Over_Max);
 PARAMETER(LCL.USR_Exit_Program);
 {
  //?USER: Initialize routine

  // PAR.USR Exit Program = CND.yes
  PAR.USR_Exit_Program = 'Y';

  // PAR.USR Over Max = CND.no
  PAR.USR_Over_Max = 'N';

  // PAR.USR Under Min = CND.no
  PAR.USR_Under_Min = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Case_Quantity);
  PARAMETER(PAR.USR_Case_Weight);
  PARAMETER(PAR.HPB_Meter_Net_Gallon);
  PARAMETER(PAR.HPB_Meter_Net_Weight);
  {
   //?USER: Initialize routine

   // PAR.USR Case Quantity = CND.EQ *ZERO
   PAR.USR_Case_Quantity = *ZERO;

   // PAR.USR Case Weight = CND.EQ *ZERO
   PAR.USR_Case_Weight = *ZERO;

   // PAR.HPB Meter Net Gallon = CND.Equal to zero
   PAR.HPB_Meter_Net_Gallon = *ZERO;

   // PAR.HPB Meter Net Weight = CND.Not Entered
   PAR.HPB_Meter_Net_Weight = *ZERO;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
   PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

   // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
   PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

   //?Only HPB will have these   4/14/08
   // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
   PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

   // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
   PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

  }

  //?Check min/max from the item master
  // PAR.USR Min Weight = CND.Not Entered
  PAR.USR_Min_Weight = *ZERO;

  // PAR.USR Max Weight = CND.Not Entered
  PAR.USR_Max_Weight = *ZERO;

  EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
  PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

  // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
  PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

  //?Weight entered as shipped is less than Minimum
  CASE;

  // IF PAR.USR Case Weight LT PAR.USR Min Weight
  IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

  // PAR.USR Under Min = CND.yes
  PAR.USR_Under_Min = 'Y';

  // PAR.USR Exit Program = CND.no
  PAR.USR_Exit_Program = 'N';

  //?Exit Prog. No  will set the program back to beginning
  ENDIF;

  //?Weight entered is greater than the maxiumum
  CASE;

  // IF PAR.USR Case Weight GT PAR.USR Max Weight
  IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

  // PAR.USR Over Max = CND.yes
  PAR.USR_Over_Max = 'Y';

  // PAR.USR Exit Program = CND.no
  PAR.USR_Exit_Program = 'N';

  //?Exit prog. no will set program back to beginning
  ENDIF;

  CASE;

  // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
  IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

  // WRK.Work Over/Short Status = CND.Overage
  WRK.Work_Over_Short_Status = 'O';

  ENDIF;

  CASE;

  // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
  IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

  // WRK.Work Over/Short Status = CND.Short
  WRK.Work_Over_Short_Status = 'S';

  ENDIF;

  // WRK.Detail Line Status = CND.Confirmed
  WRK.Detail_Line_Status = 'R';

  // WRK.Detail Line Status Last = DB1.Detail Line Status
  WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

  //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
  //?  if Warehouse is Req Meter Readings is YES.
  //?  Every other warehouse puts out the gross from manifest dtl
  EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(LCL.Warehouse_Location);
  PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.WHS Req Meter Reading Shp is Yes
  IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

  EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Detail_Line_Status);
  PARAMETER(WRK.Detail_Line_Status_Last);
  PARAMETER('P');
  PARAMETER(WRK.Work_Over_Short_Status);
  PARAMETER(PAR.HPB_Meter_Net_Gallon);
  PARAMETER(PAR.HPB_Meter_Net_Weight);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Detail_Line_Status);
  PARAMETER(WRK.Detail_Line_Status_Last);
  PARAMETER('P');
  PARAMETER(WRK.Work_Over_Short_Status);
  PARAMETER(PAR.USR_Case_Quantity);
  PARAMETER(PAR.USR_Case_Weight);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  ENDIF;

 }

 EXECUTE FUNCTION(RTV Crt/Chg HPB Batch RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1855749;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('R');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OHE_Carrier_SCAC_Code);
  PARAMETER(LCL.OHE_Spot_Buy);
  PARAMETER(LCL.OHE_PO_ACK_Flag);
  PARAMETER(LCL.OHE_Override_Type_Code);
  PARAMETER(LCL.OHE_Backhaul_Status);
  PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
  PARAMETER(LCL.OHE_Load_Haul_Type);
  PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
  PARAMETER(LCL.OHE_Bookings_Confirmed);
  PARAMETER(LCL.OHE_EDI_Error_Reasons);
  PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
  PARAMETER(PAR.HPB_COA_Batch_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OHE_EDI_943_Action);
  PARAMETER(LCL.OHE_EDI_944_Action);
  PARAMETER(LCL.OHE_EDI_940_Action);
  PARAMETER(LCL.OHE_EDI_945_Action);
  PARAMETER(LCL.OHE_EDI_856_Action);
  PARAMETER(LCL.OHE_EDI_824_Action);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OHE_Email_BOL_Sent);
  PARAMETER(LCL.OHE_EDI_Order_Automated);
  PARAMETER(LCL.OHE_EDI_601_Action);
  PARAMETER(LCL.OHE_Unused_Status_4);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

  //?USER: Process Data record

  CASE;

  // IF DB1.Load ID is Blank
  IF DB1.Load_ID = *ZERO;

  // LCL.Load ID = PAR.Load ID
  LCL.Load_ID = PAR.Load_ID;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Load ID = DB1.Load ID
  LCL.Load_ID = DB1.Load_ID;

  ENDIF;

  CASE;

  // IF DB1.Stop/Drop Sequence Number is Not Entered
  IF DB1.Stop_Drop_Sequence_Number = *ZERO;

  EXECUTE FUNCTION(RTV Stop Drop Seq     RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1855766;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
  LCL.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

  ENDIF;

  EXECUTE FUNCTION(CHG HPB Batch/Load    CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1855750;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.HPB_COA_Batch_Number);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Manifest Detail CH) TYPE(CHGOBJ) FILE(OMFNCPP)          AC1402363;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Case_Sequence_Number);
PARAMETER(RCD.Case_Quantity);
PARAMETER(RCD.Case_Weight);
PARAMETER(RCD.Inventory_Updated_Flag);
PARAMETER(RCD.Label_Date);
PARAMETER(RCD.PT_Serial_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Manifest_Gross_Weight);
PARAMETER(RCD.Manifest_Lot_ID);
PARAMETER(RCD.Manifest_Total_Tare);
PARAMETER(RCD.Manifest_Co_Park_Lot_Nbr);
PARAMETER(RCD.Manifest_Pallet_Number);
PARAMETER(RCD.Manifest_Shift);
PARAMETER(RCD.HPB_Meter_Net_Gallon);
PARAMETER(RCD.Manifest_Net_Weight_Kg);
PARAMETER(RCD.Manifest_Unused_Status_1A);
PARAMETER(RCD.Manifest_Unused_Status_2A);
PARAMETER(RCD.Manifest_Unused_Date);
PARAMETER(RCD.HPB_COA_Batch_Number);
PARAMETER(RCD.HPB_Meter_Start_Gallon);
PARAMETER(RCD.HPB_Meter_Ending_Gallon);
PARAMETER(RCD.HPB_Meter_Total_Gallon);
PARAMETER(RCD.HPB_Meter_Net_Weight);
PARAMETER(RCD.HPB_Density_Ref_Gravity);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
PARAMETER(*MISSING);
PARAMETER(PAR.USR_Update_Flag);
PARAMETER(PAR.COA_RIN_Modified_Sts);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 // PAR.COA RIN Modified Sts = CND.yes
 PAR.COA_RIN_Modified_Sts = 'Y';

}


