// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTUPVR
// ?Date: 14.08.2025 Time: 03:29:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?08/02/2016 JBB E5262 - Recompile for change in status list for
//?           field Invoice Suffix.  Change to list not including RB
//?PIO 04/16/24 CHANGED FILE NAME FROM ARBDCPLI TO ARBDCPMB
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(*MISSING);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bank Code = PAR.Bank Code
DTL.Bank_Code = PAR.Bank_Code;

// DTL.Deposit Date = PAR.Deposit Date
DTL.Deposit_Date = PAR.Deposit_Date;

// DTL.Deposit Amount = PAR.Deposit Amount
DTL.Deposit_Amount = PAR.Deposit_Amount;

// DTL.Total Cash Applied = PAR.Total Cash Applied
DTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// DTL.Remaining to Apply = PAR.Deposit Amount - PAR.Total Cash Applied
DTL.Remaining_to_Apply = PAR.Deposit_Amount - PAR.Total_Cash_Applied;

//?USER: Validate fields

//?Prompt Customer Number
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.A/R Customer Number
AND PGM.*Cursor_field = DTL.AR_Customer_Number;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.AR_Customer_Number);

ENDIF;

//?Find customer by Invoice number
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// AND DTL.Invoice Number is Not equal to zero
AND DTL.Invoice_Number <> *ZERO;

EXECUTE FUNCTION(RTV Order # for Invc   RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1316808;
PARAMETER(DTL.Invoice_Number);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Find Customer by Order Number
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// AND DTL.Order Number Ref is Entered
AND DTL.Order_Number_Ref <> *ZERO;

EXECUTE FUNCTION(RTV Cust by Order #    RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1335922;
PARAMETER(DTL.Order_Number_Ref);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Select by name
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// AND DTL.Customer Name is Not Blank
AND DTL.Customer_Name <> *BLANK;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.AR_Customer_Number);

ENDIF;

//?Validate A/R Customer number
CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(VAL A/R Customer       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452402;
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// Call program WW A/R Cash Appl.      DF.
CALL PROGRAM(WW A/R Cash Appl.      DF) ('PDT0DFR');
PARAMETER(*ZERO);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(DTL.USR_Check_Amount);

// PAR.Number of Applied Checks = PAR.Number of Applied Checks + CON.1
PAR.Number_of_Applied_Checks = PAR.Number_of_Applied_Checks + 1;

ENDIF;

// DTL.A/R Check Number = CND.Equal to blanks
DTL.A_R_Check_Number = *BLANK;

// DTL.USR Check Amount = CND.Zero
DTL.USR_Check_Amount = *ZERO;

// DTL.A/R Customer Number = CND.equal to zero
DTL.AR_Customer_Number = *ZERO;

// DTL.Invoice Number = CND.Equal to zero
DTL.Invoice_Number = *ZERO;

// DTL.Order Number Ref = CND.Not Entered
DTL.Order_Number_Ref = *ZERO;

// DTL.Customer Name = CND.blanks
DTL.Customer_Name = *BLANK;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bank Code = PAR.Bank Code
DTL.Bank_Code = PAR.Bank_Code;

// DTL.Deposit Date = PAR.Deposit Date
DTL.Deposit_Date = PAR.Deposit_Date;

// DTL.Deposit Amount = PAR.Deposit Amount
DTL.Deposit_Amount = PAR.Deposit_Amount;

// DTL.Total Cash Applied = PAR.Total Cash Applied
DTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// DTL.Remaining to Apply = PAR.Deposit Amount - PAR.Total Cash Applied
DTL.Remaining_to_Apply = PAR.Deposit_Amount - PAR.Total_Cash_Applied;

//?USER: Exit program processing

CASE;

// IF PAR.Number of Applied Checks is Not zero
IF PAR.Number_of_Applied_Checks <> *ZERO;

EXECUTE FUNCTION(CHG Rtv for Chks Appl. RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1338290;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG # Checks Appl      CH) TYPE(CHGOBJ) FILE(PDJ2CPP)          AC1338291;
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.Deposit_Date);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(DB1.Number_of_Applied_Checks);
 PARAMETER(DB1.CD_TF_Internal_Batch_Nbr);
 PARAMETER(DB1.CD_TF_Immediate_Fund_Amt);
 PARAMETER(DB1.CD_TF_1_Day_Fund_Amt);
 PARAMETER(DB1.CD_TF_2_Day_Fund_Amt);
 PARAMETER(DB1.CD_SB_Exempt_Immed_Amt);
 PARAMETER(DB1.CD_SB_1_Day_Exempt_Immed);
 PARAMETER(DB1.CD_SB_2_Day_Exempt_Immed);
 PARAMETER(DB1.SBD_Exempt_Total_Amount);
 PARAMETER(DB1.ARBD_Unused_Amt_2);
 PARAMETER(DB1.ARBD_Unused_Amt_3);
 PARAMETER(DB1.ARBD_Unused_Amt_4);
 PARAMETER(DB1.ARBD_Unused_Amt_5);
}


ENDIF;

