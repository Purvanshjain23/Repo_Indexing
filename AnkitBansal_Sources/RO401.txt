      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO401
      * TITLE:       Work with Resource Optimization Headers
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     01/16/07
      *
      * FUNCTION: This is a Work With that displays the records in the Resource Optimization
      *           Header file.
      *
      *           Positioners:
      *                Week-ending date
      *
      *           Selectors:
      *                Company number
      *                Status
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/18/07  LeAnne Ramsey
      *           Added 2 options: HAM GROUP SALES
      *                             19=View
      *                             20=List
      * 11/02/07  LeAnne Ramsey
      *           Removed 2 options: HAM GROUP SALES
      *                                 19=View
      *                                 20=List
      * 12/28/07  LeAnne Ramsey
      *           Changed text on DSPF for Option 18 from "credit values" to
      *           "byproduct values".
      *           Added logic to retrieve user's default output queue.
      *
      * 06/12/08  LeAnne Ramsey
      *           Added edits to stop users from changing Status on a Week that is
      *           1) currently being closed or 2) already closed in TFS Margin Adjustment.
      *
      * 07/31/08  LeAnne Ramsey
      *           Added a new function key/call: F24-Work With Meat Cost Overrides.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 02/26/09  LeAnne Ramsey
      *           Added new field 'Smoker % from BI Picnic' to subfile.
      *
      * 05/12/09  LeAnne Ramsey
      *           Added 'out LDA' in the Initialization Subroutine.
      *
      * 02/17/10  LeAnne Ramsey
      *           Added 2 new fields to screen:
      *                 Cap&Blade Special Trim Allocation Percent
      *                 Cap&Blade Regular Trim Allocation Percent
      *
      * 03/08/12  LeAnne Ramsey (E1984)
      *           Recompile only.
      *           Added 6 new Skirt Meat Allocation Flag fields to ROP100.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Frod401    cf   e             workstn sfile(ro401s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Frol100a   if   e           k disk    infds(dbfeed)
      *   Resource optimization header
      *
      *
     Ftfp099    if   e           k disk
      *   Function control
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for positioners and selectors
      *
     D svwemdy         s                   like(c1wemdy)
     D svrcstcd        s                   like(c1rcstcd)
     D svcono          s                   like(c1cono)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkwedt          s                   like(ohwedt)
      *
      *
      * Parms
      *
     D xxrcstcd        s                   like(c1rcstcd)
     D xxrcstds        s             11
     D xxcono          s                   like(d1cono)
     D xxwemdy         s                   like(d1wemdy)
     D xxwedt          s                   like(ohwedt)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *---------------------------------------------------------------
      *  Definition for external data area 'DAROCALC'
      *---------------------------------------------------------------
     D
     D darocalc        ds                  dtaara(darocalc)
     D  dafl                   1      1
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldpfcd                 1      1
      *
     D  ldwedt                29     36  0
     D  ldwemdy               44     49  0
      *
     D  ldcono                82     84  0
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     ro401k1
     C                   write     ro401ec
     C                   exfmt     ro401c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in24 = *on                                  F24-WW Overrides
     C                   call      'RO416'
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svwemdy  <> c1wemdy or
     C                             svcono   <> c1cono or
     C                             svrcstcd <> c1rcstcd
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1wemdy       svwemdy
     C                   z-add     c1cono        svcono
     C                   move      c1rcstcd      svrcstcd
      *
      * Flip date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkwedt
     C                   else
     C     *mdy          move      c1wemdy       wkisodate
     C                   move      wkisodate     wkwedt
     C                   endif                                                  If bad date
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   ro401s1
     C                   seton                                        83        sflclr
     C                   write     ro401c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   if        c1wemdy = 0
     C     *hival        setll     rol100a
     C                   else
     C     wkwedt        setll     rol100a
     C                   endif
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedbcdk
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      rol100a                                82
     C                   if        *in82 = *off                                 If read
      *
      * Only include records that match the user's
      *
     C                   if        c1cono <> 0 and                              If company
     C                             c1cono <> ohcono
     C                   else
      *
     C                   if        c1rcstcd <> *blank and                       If status
     C                             c1rcstcd <> ohrcstcd
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
      *
      * Flip Week-ending Date to MMDDYY format
      *
     C     *iso          test(d)                 ohwedt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ohwedt        wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   z-add     ohwedt        hdwedt
     C                   else
     C                   z-add     0             d1wemdy
     C                   z-add     0             hdwedt
     C                   endif                                                  If OK date
      *
     c                   z-add     ohcono        d1cono
     C                   move      ohrcstcd      d1rcstcd
     c                   z-add     ohsmokypc     d1smokypc
     c                   z-add     ohbicrvl      d1bicrvl
     c                   z-add     ohbitrpc      d1bitrpc
     c                   z-add     ohaltrpc      d1altrpc
     c                   z-add     ohbicapc      d1bicapc
     c                   z-add     ohblcapc      d1blcapc
     c                   z-add     ohbibypc      d1bibypc
     c                   z-add     ohblbypc      d1blbypc
     c                   z-add     ohcbstpc      d1cbstpc
     c                   z-add     ohcbrtpc      d1cbrtpc
      *
     C                   write     ro401s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If status
     C                   endif                                                  If company
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09002'
     C                   endif
     C                   else
      *
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the maintenance program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   in        darocalc
     C                   if        darocalc <> *blank                           If submitted
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00102'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
     C                   call      'RO101'
     C                   parm      create        mode
     C                   parm      0             xxcono
     C                   parm      0             xxwemdy
     C                   parm      0             xxwedt
     C                   parm      '00'          rtncd
     C                   endif                                                  If submitted
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------
      * Read and edit changed subfile records for valid  subfile options on Screen 1
      *--------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     ro401s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> ' 8' and
     C                             d1opt <> ' 9' and
     C                             d1opt <> '10' and
     C                             d1opt <> '14' and
     C                             d1opt <> '15' and
     C                             d1opt <> '16' and
     C                             d1opt <> '18' and
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09006'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      * Perform additional edits if an option was entered.
      *
     C                   if        d1opt <> *blank
     C                   exsr      $opts
     C                   endif
     C                   endif                                                  If bad opt
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    ro401s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Peform additional edits on the option
      *---------------------------------------------------------------
      *
     C     $opts         begsr
      *
      * If a Cost Calculation has been submitted (for any week), you are only
      * allowed to VIEW/PRINT---until the calc function completes.
      *
     C                   in        darocalc
     C                   if        darocalc <> *blank and                       If submitted
     C                             d1opt <> ' 5' and
     C                             d1opt <> '15' and
     C                             d1opt <> '16'
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00103'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If submitted
      *
      * Options that change data are not allowed when the status is Final.
      *
     C                   if        d1rcstcd = 'F' and
     C                             (d1opt = ' 2' or d1opt = ' 8' or
     C                              d1opt = '10')
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00104'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Option 9=Change Status
      *
     C                   if        d1opt = ' 9'
     C                   exsr      $opt9
     C                   endif
      *
      * You are only allowed to delete records that are O=Open.
      *
     C                   if        d1opt = ' 4' and
     C                             d1rcstcd <> 'O'
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00105'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Additional edits for Option 9-Change Status
      *---------------------------------------------------------------
      *
     C     $opt9         begsr
      *
      * Status must be Final; you cannot change the OPEN or PRELIMINARY status.
      *
     C                   if        d1rcstcd <> 'F'
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00111'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * This "Week-ending Date" must still be an open week in the
      * Function Control file for the "MARGIN" function.
      *
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If hit
      *
     C                   if        hdwedt < fncedt and
     C                             error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00133'
     C                   endif
      *
      * A TFS Margin Adjustment close has not been submitted
      *
     C                   if        fnsbfl = yes and
     C                             error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00134'
     C                   endif
     C                   endif                                                  If hit
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection. Set the flag 'reset' to YES so that when you return
      * to this Work With you will reposition to the same place in the
      * subfile.
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     ro401s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
     C                   select
      *
      * Option 2=revise
     C                   when      d1opt = ' 2'
     C                   movel     yes           reset
     C                   call      'RO101'
     C                   parm      revise        mode
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 4=delete
     C                   when      d1opt = ' 4'
     C                   movel     yes           reset
     C                   call      'RO101'
     C                   parm      delete        mode
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 5=view
     C                   when      d1opt = ' 5'
     C                   movel     yes           reset
     C                   call      'RO701'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 8=Weekly Calculation
      *
     C                   when      d1opt = ' 8'
     C                   movel     yes           reset
     C                   call      'RO410'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 9=change status
     C                   when      d1opt = ' 9'
     C                   movel     yes           reset
     C                   call      'RO103'
     C                   parm      revise        mode
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 10=Maintain Item Control Data
      *
     C                   when      d1opt = '10'
     C                   movel     yes           reset
     C                   call      'RO102'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 14=Work With Meat Costs
      *
     C                   when      d1opt = '14'
     C                   movel     yes           reset
     C                   call      'RO408'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 15=View Item Control Data
      *
     C                   when      d1opt = '15'
     C                   movel     yes           reset
     C                   call      'RO702'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
      *
      * Option 16=Print Item Control Data
      *
     C                   when      d1opt = '16'
     C                   movel     yes           reset
     C                   exsr      $list
      *
      * Option 18=Work With Byproduct Values
      *
     C                   when      d1opt = '18'
     C                   movel     yes           reset
     C                   call      'RO409'
     C                   parm      d1cono        xxcono
     C                   parm      d1wemdy       xxwemdy
     C                   parm      hdwedt        xxwedt
     C                   parm                    rtncd
     C                   endsl
      *
      * Upon returning from the called program:
      *    bring in the LDA to pick up any printer changes
      *    clear the subfile option
      *    rewrite the subfile record.
      *
     C                   in        lda
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    ro401s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Print listing
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
      * Listing of Item Control Data
      *
     C                   move      'D'           ldpfcd
     C                   z-add     d1cono        ldcono
     C                   z-add     d1wemdy       ldwemdy
     C                   z-add     hdwedt        ldwedt
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Record Status Code
      *
     C                   select
     C                   when      fld = 'C1RCSTCD'
     C                   call      'RO501'
     C                   parm      *blank        xxrcstcd
     C                   parm      *blank        xxrcstds
     C                   seton                                        51
     C                   if        xxrcstcd <> *blank
     C                   move      xxrcstcd      c1rcstcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'RO09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors
      *---------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   none
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldcono
     C                   z-add     0             ldwedt
     C                   z-add     0             ldwemdy
     C                   out       lda
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     4             wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(RO401CL)) JOB(CONTROLIST) JOBQ(*JOBD)
