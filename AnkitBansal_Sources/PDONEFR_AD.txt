// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDONEFR
// ?Date: 14.08.2025 Time: 03:32:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile record (existing record)

// RCD.USR Stop/Drop = DB1.Stop/Drop
RCD.USR_Stop_Drop = DB1.Stop_Drop;

EXECUTE FUNCTION(RTV Cust,Delivery Date RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1424736;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(RCD.Requested_Delivery_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CRT Load Plan Stop Cst CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1378310;
PARAMETER(DB1.Stop_Drop);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Processing if Data record already exists

 QUIT;

}


//?USER: Validate subfile record fields

//?Validate only 1 customer per stop
EXECUTE FUNCTION(RTV Cust,Delivery Date RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1424736;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(RCD.Requested_Delivery_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Stop/Drop NE RCD.USR Stop/Drop
IF RCD.Stop_Drop <> RCD.USR_Stop_Drop;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378309;
PARAMETER(RCD.Stop_Drop);
PARAMETER(WRK.Ship_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Error if customer mismatch
CASE;

// IF WRK.Ship To Customer NE WRK.ZERO
IF WRK.Ship_To_Customer <> WRK.ZERO;

// AND WRK.Ship To Customer NE RCD.Ship To Customer
AND WRK.Ship_To_Customer <> RCD.Ship_To_Customer;

// Send error message - 'Customer does not match existing customer for selected stop.'
ERROR(USR2370);
MSGPARM(RCD.Stop_Drop);

ENDIF;

ENDIF;

//?Get delivery date for prior stop
// WRK.Stop/Drop = RCD.Stop/Drop - CON.1
WRK.Stop_Drop = RCD.Stop_Drop - 1;

//?Validate Prior Stop Delivery Date
CASE;

// IF WRK.Stop/Drop is EQ Zero
IF WRK.Stop_Drop = *ZERO;

//?Validate Prior Stop Delivery Date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Hi DelDt Prior StopRT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1424906;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER(WRK.Requested_Delivery_Date);
{
 //?USER: Initialize routine

 // PAR.Scheduled Delivery Date = CON.*ZERO
 PAR.Requested_Delivery_Date = *ZERO;

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 // PAR.USR Stop/Drop = DB1.Stop/Drop
 PAR.USR_Stop_Drop = DB1.Stop_Drop;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop EQ PAR.USR Stop/Drop
 IF DB1.Stop_Drop = PAR.USR_Stop_Drop;

 EXECUTE FUNCTION(Rtv Delivery Date     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1409517;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.USR_Sched_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.USR Sched Delivery Date GT PAR.Scheduled Delivery Date
 IF WRK.USR_Sched_Delivery_Date > PAR.Requested_Delivery_Date;

 // PAR.Scheduled Delivery Date = WRK.USR Sched Delivery Date
 PAR.Requested_Delivery_Date = WRK.USR_Sched_Delivery_Date;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?Prior stop out of sequence
CASE;

// IF WRK.Scheduled Delivery Date GT RCD.Scheduled Delivery Date
IF WRK.Requested_Delivery_Date > RCD.Requested_Delivery_Date;

// AND WRK.Scheduled Delivery Date NE WRK.ZERO
AND WRK.Requested_Delivery_Date <> WRK.ZERO;

// Send error message - 'Delivery Date for stop is not in correct order'
ERROR(USR2371);
MSGPARM(RCD.Stop_Drop);

ENDIF;

ENDIF;

//?Get delivery date for next stop
// WRK.Stop/Drop = RCD.Stop/Drop + CON.1
WRK.Stop_Drop = RCD.Stop_Drop + 1;

//?Validate Next Stop Delivery Date
CASE;

// IF WRK.Stop/Drop is EQ Zero
IF WRK.Stop_Drop = *ZERO;

//?Validate Next Stop Delivery Date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Lo DelDt Next Stop RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1424920;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER(WRK.Requested_Delivery_Date);
{
 //?USER: Initialize routine

 // PAR.Scheduled Delivery Date = CON.9999999
 PAR.Requested_Delivery_Date = 9999999;

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Process Data record

 //?First time processing:  assumes that are past current stop
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 // PAR.USR Stop/Drop = DB1.Stop/Drop
 PAR.USR_Stop_Drop = DB1.Stop_Drop;

 ENDIF;

 CASE;

 // IF DB1.Stop/Drop EQ PAR.USR Stop/Drop
 IF DB1.Stop_Drop = PAR.USR_Stop_Drop;

 EXECUTE FUNCTION(Rtv Delivery Date     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1409517;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.USR_Sched_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.USR Sched Delivery Date LT PAR.Scheduled Delivery Date
 IF WRK.USR_Sched_Delivery_Date < PAR.Requested_Delivery_Date;

 // PAR.Scheduled Delivery Date = WRK.USR Sched Delivery Date
 PAR.Requested_Delivery_Date = WRK.USR_Sched_Delivery_Date;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?Next stop out of sequence
CASE;

// IF WRK.Scheduled Delivery Date LT RCD.Scheduled Delivery Date
IF WRK.Requested_Delivery_Date < RCD.Requested_Delivery_Date;

// AND WRK.Scheduled Delivery Date NE WRK.ZERO
AND WRK.Requested_Delivery_Date <> WRK.ZERO;

// Send error message - 'Delivery Date for stop is not in correct order'
ERROR(USR2371);
MSGPARM(RCD.Stop_Drop);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Stop Number        CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1295435;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop_Sequence_Number);
PARAMETER(RCD.Stop_Drop);
PARAMETER(RCD.Miles_to_next_stop);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

EXECUTE FUNCTION(RTV Del All Stop Custs RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378538;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DEL Stop Cust          DL) TYPE(DLTOBJ) ARRAY(Load_Planning_StoAC1378539;
 PARAMETER(DB1.Stop_Drop);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

