// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKRE1R
// ?Date: 14.08.2025 Time: 03:34:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?** 03/18/2010 LJB E000618 Add WO1 as a valid Adjustment Type
//?** add "WO " and WO1" to SEL prompt for adjustment type
//?DLY029 07/13/07 JRB Added Customer, sel on customer & invoice
//?DLY029 07/27/07 RMC Dont val cust against invoice. invoice cust
//?  may not be the same as the check customer because mult a/r custs
//?  may be paid with 1 check
ENDDO;

//?USER: Initialize detail screen (new record)

//?*** Load screen heading ***
EXECUTE FUNCTION(RTV Cust Number Name   RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1835712;
PARAMETER(DTL.LckBx_Number);
PARAMETER(DTL.LckBx_Deposit_Date);
PARAMETER(DTL.LckBx_Deposit_Time);
PARAMETER(DTL.LckBx_Batch_Number);
PARAMETER(DTL.LckBx_Item_Number);
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Text USR = Condition name of PAR.LckBx Deposit Status
DTL.Text_USR = RTVCND(PAR.LckBx_Deposit_Status);

//?Load Hold Description.
CASE;

// IF DTL.LckBx Hold Flag is Yes
IF DTL.LckBx_Hold_Flag = 'Y';

// DTL.Text-17               USR = CON.Check is held
DTL.Text_17_USR = 'Check is held';

//?Load Hold Description.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text-17               USR = CON.Check is released
DTL.Text_17_USR = 'Check is released';

ENDIF;

//?USER: Initialize detail screen (existing record)

//?*** Load detail  format fields ***
EXECUTE FUNCTION(RTV Hold Flag          RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1511372;
PARAMETER(DTL.LckBx_Number);
PARAMETER(DTL.LckBx_Deposit_Date);
PARAMETER(DB1.LckBx_Deposit_Time);
PARAMETER(DTL.LckBx_Batch_Number);
PARAMETER(DTL.LckBx_Item_Number);
PARAMETER(DTL.LckBx_Hold_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Load Hold Description.
CASE;

// IF DTL.LckBx Hold Flag is Yes
IF DTL.LckBx_Hold_Flag = 'Y';

// DTL.Text-17               USR = CON.Check is held
DTL.Text_17_USR = 'Check is held';

//?Load Hold Description.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text-17               USR = CON.Check is released
DTL.Text_17_USR = 'Check is released';

ENDIF;

// DTL.Text USR = Condition name of PAR.LckBx Deposit Status
DTL.Text_USR = RTVCND(PAR.LckBx_Deposit_Status);

EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
PARAMETER(WRK.Company_Number);
PARAMETER(DTL.LckBx_Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Remaining_Balance_Due);
PARAMETER(WRK.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Use cust on invoice if found, else display Check Customer
CASE;

// IF WRK.A/R Customer Number is equal to zero
IF WRK.AR_Customer_Number = *ZERO;

EXECUTE FUNCTION(RTV Cust Number Name   RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1835712;
PARAMETER(DTL.LckBx_Number);
PARAMETER(DTL.LckBx_Deposit_Date);
PARAMETER(DTL.LckBx_Deposit_Time);
PARAMETER(DTL.LckBx_Batch_Number);
PARAMETER(DTL.LckBx_Item_Number);
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Use cust on invoice if found, else display Check Customer
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Customer Number       NBR = WRK.A/R Customer Number
DTL.Customer_Number_NBR = WRK.AR_Customer_Number;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Validate detail screen fields

//?*Prompt Customer Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Customer Number       NBR
AND PGM.*Cursor_field = DTL.Customer_Number_NBR;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.Customer_Number_NBR);

ENDIF;

//?*Prompt LckBx Invoice Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.LckBx Invoice Number
AND PGM.*Cursor_field = DTL.LckBx_Invoice_Number;

// Call program Zzz Invoice            SR.
CALL PROGRAM(Zzz Invoice            SR) ('PMJQSRR');
PARAMETER(DTL.LckBx_Invoice_Number);
PARAMETER(DTL.Customer_Number_NBR);

ENDIF;

//?*Prompt Adjustment Type Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Adjustment Type Code
AND PGM.*Cursor_field = DTL.Adjustment_Type_Code;

//?** add "WO " and WO1" to list of selectable values  E000618
// Call program SEL Lckbx Type         SR.
CALL PROGRAM(SEL Lckbx Type         SR) ('PDJKSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);

ENDIF;

//?Validate Invoice Number.
DO;

CASE;

// IF DTL.LckBx Invoice Number is eq zero
IF DTL.LckBx_Invoice_Number = *ZERO;

// Send error message - 'Invoice number is required.'
ERROR(USR2691);
MSGPARM(DTL.LckBx_Invoice_Number);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.LckBx_Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Remaining_Balance_Due);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Validate against A/R Header record.
DO;

//?*** PK0333 ***
CASE;

// IF DTL.Invoice Suffix is Charge Backs
IF DTL.Invoice_Suffix = 'CB';

// AND DTL.Adjustment Type Code is Chargeback
AND ( DTL.Adjustment_Type_Code = 'CB';

// OR DTL.Adjustment Type Code is Accrual Chargeback
OR DTL.Adjustment_Type_Code = 'ACB' );

//?Can't enter a chargeback trans against a chargeback invoice.
DO;

// Send error message - 'A chargeback transaction cannot be entered against a chargeback invoice.'
ERROR(USR2710);
MSGPARM(DTL.Adjustment_Type_Code);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Remaining Balance must be greater than zero.
DO;

CASE;

// IF DTL.Remaining Balance Due is less or equal to zero
IF DTL.Remaining_Balance_Due <= *ZERO;

// Send error message - 'Remaining balance due for invoice: &1 must be > zero.'
ERROR(USR2681);
MSGPARM(DTL.LckBx_Invoice_Number);

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?upd screen cust with invoice customer #
// DTL.Customer Number       NBR = WRK.Customer Number       NBR
DTL.Customer_Number_NBR = WRK.Customer_Number_NBR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invoice: &1 is invalid.'
ERROR(USR2663);
MSGPARM(DTL.LckBx_Invoice_Number);

ENDIF;

ENDIF;

ENDDO;

//?Validate Invoice Amount.
DO;

CASE;

// IF DTL.LckBx Invoice Amount is less or equal to zero
IF DTL.LckBx_Invoice_Amount <= *ZERO;

// Send error message - 'Invoice amount must be > zero.'
ERROR(USR2692);
MSGPARM(DTL.LckBx_Invoice_Amount);

ENDIF;

ENDDO;

//?Validate Payment Type.
DO;

CASE;

// IF DTL.Adjustment Type Code is Not Entered
IF DTL.Adjustment_Type_Code = *BLANK;

// Send error message - 'Type is Required.'
ERROR(USR2689);
MSGPARM(DTL.Adjustment_Type_Code);

// IF *OTHERWISE
IF *OTHERWISE;

//?*** PK0333 ***
CASE;

// IF DTL.Adjustment Type Code is Chargeback
IF DTL.Adjustment_Type_Code = 'CB';

// OR DTL.Adjustment Type Code is Regular Pay
OR DTL.Adjustment_Type_Code = 'PAY';

// OR DTL.Adjustment Type Code is Write Off Under $50
OR DTL.Adjustment_Type_Code = ' WO';

// OR DTL.Adjustment Type Code is Accrual Chargeback
OR DTL.Adjustment_Type_Code = 'ACB';

// OR DTL.Adjustment Type Code is Write Off Under $100
OR DTL.Adjustment_Type_Code = 'WO';

// OR DTL.Adjustment Type Code is Write off over $100
OR DTL.Adjustment_Type_Code = 'WO1';

//?RMC 1/3/6 added type 'WO '
//?LJB 3/18/10 added type 'WO1'
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invoice type: &1 is invalid.'
ERROR(USR2664);
MSGPARM(DTL.Adjustment_Type_Code);

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?CALC: Detail screen function fields

//?*** Load screen details ***
// DTL.LckBx Trans Source = CND.Manual
DTL.LckBx_Trans_Source = 'M';

// DTL.USR Work Field 7A = Condition name of DTL.LckBx Trans Source
DTL.USR_Work_Field_7A = RTVCND(DTL.LckBx_Trans_Source);

//?USER: Create DBF record

EXECUTE FUNCTION(CRT A/R Lockbox Invoic CR) TYPE(CRTOBJ) FILE(PDMDCPP)          AC1507060;
PARAMETER(DTL.LckBx_Number);
PARAMETER(DTL.LckBx_Deposit_Date);
PARAMETER(DTL.LckBx_Deposit_Time);
PARAMETER(DTL.LckBx_Batch_Number);
PARAMETER(DTL.LckBx_Item_Number);
PARAMETER(DTL.LckBx_Seq_Number);
PARAMETER(DTL.LckBx_Seq_Counter);
PARAMETER(DTL.LckBx_Invoice_Number);
PARAMETER(DTL.LckBx_Invoice_Amount);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.LckBx_Trans_Source);
PARAMETER(DTL.Explanation);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG A/R Lockbox Invoic CH) TYPE(CHGOBJ) FILE(PDMDCPP)          AC1507061;
PARAMETER(DTL.LckBx_Number);
PARAMETER(DTL.LckBx_Deposit_Date);
PARAMETER(DTL.LckBx_Deposit_Time);
PARAMETER(DTL.LckBx_Batch_Number);
PARAMETER(DTL.LckBx_Item_Number);
PARAMETER(DTL.LckBx_Seq_Number);
PARAMETER(DTL.LckBx_Seq_Counter);
PARAMETER(DTL.LckBx_Invoice_Number);
PARAMETER(DTL.LckBx_Invoice_Amount);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.LckBx_Trans_Source);
PARAMETER(DTL.Explanation);

