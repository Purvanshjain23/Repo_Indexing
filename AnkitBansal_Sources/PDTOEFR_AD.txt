// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTOEFR
// ?Date: 14.08.2025 Time: 03:33:01
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PDTOEF');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Exit Program = CND.no
PAR.USR_Exit_Program = 'N';

// LCL.Access Limited Sts USR = CND.no
LCL.Access_Limited_Sts_USR = 'N';

//?use status 16 for 1st time flag
// PAR.Status Flag 16 Y/N = CND.Yes
PAR.Status_Flag_16_Y_N = 'Y';

// PAR.Load ID USR = CTL.Load ID
PAR.Load_ID_USR = CTL.Load_ID;

// LCL.Text 3 Length USR = CON.ALL
LCL.Text_3_Length_USR = 'ALL';

//?Get user's Edit Tracer Appts authority. If not, output appt fields
EXECUTE FUNCTION(Val Accrual Type Exst RT) TYPE(RTVOBJ) FILE(PNHKREP)           AC2025142;
PARAMETER(JOB.*USER);
PARAMETER('CA');
PARAMETER(PAR.USR_Display_2);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?USER: Initialize subfile header

//?RMC 2/20/2020 IF LOAD ID CHANGED, THEN RESET STATUS FLAG 16
CASE;

// IF CTL.Load ID NE PAR.Load ID USR
IF CTL.Load_ID <> PAR.Load_ID_USR;

// PAR.Load ID USR = CTL.Load ID
PAR.Load_ID_USR = CTL.Load_ID;

// PAR.Status Flag 16 Y/N = CND.Yes
PAR.Status_Flag_16_Y_N = 'Y';

ENDIF;

//?** Put BOL Received Date on the screen    E00286
//?RMC WHD 57687     output mg created load
EXECUTE FUNCTION(RTV Load Dispatch 3    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1608823;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Trailer_Id);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(CTL.Shipping_Method);
PARAMETER(CTL.On_Time_Y_N);
PARAMETER(WRK.Truck_Ready_Date);
PARAMETER(WRK.Truck_Ready_Time);
PARAMETER(WRK.Spotted_Date);
PARAMETER(WRK.Spotted_Time);
PARAMETER(WRK.Load_Finished_Date);
PARAMETER(WRK.Load_Finished_Time);
PARAMETER(CTL.BOL_Complete_Date);
PARAMETER(WRK.BOL_Complete_Time);
PARAMETER(CTL.BOL_Received_Date);
PARAMETER(WRK.BOL_Received_Time);
PARAMETER(CTL.Truck_Departure_Date);
PARAMETER(WRK.Truck_Departure_Time);
PARAMETER(WRK.Adjusted_Departure_Date);
PARAMETER(WRK.Adjusted_Departure_Time);
PARAMETER(PAR.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(WRK.Scheduled_Delivery_Date);
PARAMETER(WRK.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(WRK.On_Yard_Date);
PARAMETER(WRK.On_Yard_Time);
PARAMETER(CTL.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(CTL.Load_Held_Over);
PARAMETER(CTL.LH_Held_Over_Rsn_Cmt);
PARAMETER(PAR.MG_Created_Load);
PARAMETER(CTL.LH_On_Time_Reason_Code);
PARAMETER(CTL.LH_Held_Over_Reason);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 //?** 09/28/2006 LJB PK0036
 //?** Change the output parms. Held over reason was changed from
 //?** a 1 char fld to a 3 char fld and the heldover comment
 //?** fld was changed from 15 char to 25 char.
 //?*****
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// PAR.Load Held Over = CTL.Load Held Over
PAR.Load_Held_Over = CTL.Load_Held_Over;

//?** Save DDD/T to test for email alert                 E000504
// PAR.Deadline Depart Date LH = CTL.Deadline Departure Date
PAR.Deadline_Depart_Date_LH = CTL.Deadline_Departure_Date;

// PAR.Deadline Depart Time LH = WRK.Deadline Departure Time
PAR.Deadline_Depart_Time_LH = WRK.Deadline_Departure_Time;

//?** Use new 3 char held over reason code and new 25 char
//?** reason comment    09/20/2006 LJB PK0036
// PAR.LH Held Over Reason = CTL.LH Held Over Reason
PAR.LH_Held_Over_Reason = CTL.LH_Held_Over_Reason;

// PAR.LH Held Over Rsn Cmt = CTL.LH Held Over Rsn Cmt
PAR.LH_Held_Over_Rsn_Cmt = CTL.LH_Held_Over_Rsn_Cmt;

// CTL.Trailer ID USR = CTL.Trailer Id
CTL.Trailer_ID_USR = CTL.Trailer_Id;

// CTL.USR Delivery After Time = WRK.Truck Departure Time / CON.100 *
CTL.USR_Delivery_After_Time = WRK.Truck_Departure_Time / 100;

// CTL.BOL Complete Time,4.0 USR = WRK.BOL Complete Time / CON.100 *
CTL.BOL_Complete_Time4_0_USR = WRK.BOL_Complete_Time / 100;

//?E7892-Replaced 'USR Deadline Deprt Time' with 'TMS Deadline Depart Time'.
// CTL.TMS Deadline Depart Time = WRK.Deadline Departure Time / CON.100 *
CTL.TMS_Deadline_Depart_Time = WRK.Deadline_Departure_Time / 100;

//?** Convert BOL Received time to 4.0     E00286
// CTL.USR Time 4.0 = WRK.BOL Received Time / CON.100 *
CTL.USR_Time_4_0 = WRK.BOL_Received_Time / 100;

//?** First time thru, save On Time status/reason        E004102
CASE;

// IF PAR.Status Flag 16 Y/N is Yes
IF PAR.Status_Flag_16_Y_N = 'Y';

//?** If On Time Y/N=N then save for later testing       E004102
// WRK.On Time - (Y/N) = CTL.On Time - (Y/N)
WRK.On_Time_Y_N = CTL.On_Time_Y_N;

// WRK.LH On-Time Reason Code = CTL.LH On-Time Reason Code
WRK.LH_On_Time_Reason_Code = CTL.LH_On_Time_Reason_Code;

// PAR.Status Flag 16 Y/N = CND.No
PAR.Status_Flag_16_Y_N = 'N';

// PAR.On Time - (Y/N) = CTL.On Time - (Y/N)
PAR.On_Time_Y_N = CTL.On_Time_Y_N;

// PAR.LH On-Time Reason Code = CTL.LH On-Time Reason Code
PAR.LH_On_Time_Reason_Code = CTL.LH_On_Time_Reason_Code;

ENDIF;

//?USER: Initialize subfile record (existing record)

// RCD.USR Display 1 = CND.No
RCD.USR_Display_1 = 'N';

EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(WRK.Appointment_Confirm_Date);
PARAMETER(WRK.Requested_Delivery_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?set appointment confirm date
CASE;

// IF RCD.Appointment Confirm Date is not entered
IF RCD.Appointment_Confirm_Date = *ZERO;

// RCD.Appointment Confirm Date = WRK.Appointment Confirm Date
RCD.Appointment_Confirm_Date = WRK.Appointment_Confirm_Date;

// RCD.USR Appt. Confirm Time = WRK.Requested Delivery Time
RCD.USR_Appt_Confirm_Time = WRK.Requested_Delivery_Time;

//?set appointment confirm date
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Appt. Confirm Time = RCD.Appointment Confirm Time / CON.100 *
RCD.USR_Appt_Confirm_Time = RCD.Appointment_Confirm_Time / 100;

ENDIF;

// RCD.Requested Delivery Time = WRK.Requested Delivery Time
RCD.Requested_Delivery_Time = WRK.Requested_Delivery_Time;

// RCD.Requested Delivery Date = WRK.Appointment Confirm Date
RCD.Requested_Delivery_Date = WRK.Appointment_Confirm_Date;

// RCD.Usr Request Delivery Time = RCD.Requested Delivery Time
RCD.Usr_Request_Delivery_Time = RCD.Requested_Delivery_Time;

// RCD.USR Requested Deliver Dte = RCD.Requested Delivery Date
RCD.USR_Requested_Deliver_Dte = RCD.Requested_Delivery_Date;

//?Determine whether to show ship to city/state or sail port city/state
DO;

EXECUTE FUNCTION(RTV Export Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1449325;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Export_Status);
{
 //?USER: Initialize routine

 // PAR.Export Status = CND.blank
 PAR.Export_Status = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Shipping_Line);
PARAMETER(RCD.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Port Delv Terminal NE WRK.BLANK
IF RCD.Port_Delv_Terminal <> WRK.BLANK;

EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
PARAMETER(PAR.Shipping_Line);
PARAMETER(RCD.Port_Delv_Terminal);
PARAMETER(RCD.Ship_To_City);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDIF;

ENDIF;

ENDDO;

// RCD.USR Est. Arrival Time = RCD.Estimated Arrival Time / CON.100 *
RCD.USR_Est_Arrival_Time = RCD.Estimated_Arrival_Time / 100;

// RCD.USR Actual Delivery Time = RCD.Actual Delivery time / CON.100 *
RCD.USR_Actual_Delivery_Time = RCD.Actual_Delivery_time / 100;

// RCD.USR Actual Delivery Time = RCD.Actual Delivery time / CON.100 *
RCD.USR_Actual_Delivery_Time = RCD.Actual_Delivery_time / 100;

//?* Get Original appt date/time from OHE. It will be blank until the
//?* first appt is made, then it won't change.           E009492
// Call program RTV Orig Appt Dte/Tme  XF.
CALL PROGRAM(RTV Orig Appt Dte/Tme  XF) ('PUA4XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Original_Appointment_Date);
PARAMETER(LCL.Original_Appointment_Time);

//?* Convert Orig Appt Date from *YMD to *MDY            E009492
DO;

CASE;

// IF LCL.Original Appointment Date is Not equal to zero
IF LCL.Original_Appointment_Date <> *ZERO;

//?* Retrieve original appointment date/time from OHE. These will be
//?* blank until appt is made, then they will not change.  E009492
// LCL.Date (Char-6) USR = CVTVAR(LCL.Original Appointment Date)
LCL.Date_Char_6_USR = CVTVAR(LCL.Original_Appointment_Date);

// Call program CLC *YMD to *MDY       CL.
CALL PROGRAM(CLC *YMD to *MDY       CL) ('PUA7UPC');
PARAMETER(LCL.Date_Char_6_USR);
PARAMETER(LCL.USR_Date_Alpha);
PARAMETER(*YMD);
PARAMETER(*MDY);
PARAMETER(*NONE);

// RCD.Original Appointment Date = CVTVAR(LCL.USR Date Alpha)
RCD.Original_Appointment_Date = CVTVAR(LCL.USR_Date_Alpha);

ENDIF;

ENDDO;

// RCD.USR To Time 4.0 = LCL.Original Appointment Time / CON.100 *
RCD.USR_To_Time_4_0 = LCL.Original_Appointment_Time / 100;

//?** Save carrier appt date/time for after db update test  E00495
// RCD.USR Date - ATR = RCD.LD Carrier Appt Date
RCD.USR_Date_ATR = RCD.LD_Carrier_Appt_Date;

// RCD.USR Carrier Appt Time = RCD.LD Carrier Appt Time / CON.100 *
RCD.USR_Carrier_Appt_Time = RCD.LD_Carrier_Appt_Time / 100;

// RCD.USR Time 4.0 = RCD.USR Carrier Appt Time
RCD.USR_Time_4_0 = RCD.USR_Carrier_Appt_Time;

//?* Retrieve Late Delivery code from Order Header EXT   E002962
EXECUTE FUNCTION(RTV Late Deliv-Ld/Stop RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2087861;
PARAMETER(NLL.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Stop_Drop_Sequence_Number);
PARAMETER(RCD.OHE_Late_Delivery_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?* Not an error if no record or if blanks           E002962
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?Highlight "Late" in the stop if carrier arrives late   E004102
CASE;

// IF RCD.Actual Delivery Date GT RCD.LD Carrier Appt Date
IF RCD.Actual_Delivery_Date > RCD.LD_Carrier_Appt_Date;

// OR RCD.Actual Delivery Date EQ RCD.LD Carrier Appt Date
OR ( RCD.Actual_Delivery_Date = RCD.LD_Carrier_Appt_Date;

// AND RCD.USR Actual Delivery Time GT RCD.USR Carrier Appt Time
AND RCD.USR_Actual_Delivery_Time > RCD.USR_Carrier_Appt_Time );

// RCD.USR Display 1 = CND.Yes
RCD.USR_Display_1 = 'Y';

ENDIF;

//?CALC: Subfile control function fields

//?RMC WHD 547687 Reload subfile if load id changes - dont do validations
CASE;

// IF CTL.Load ID NE PAR.Load ID USR
IF CTL.Load_ID <> PAR.Load_ID_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

//?F20=Traffic Comments
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?F4=Reason Code           RMC 7/19/06
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.LH On-Time Reason Code
IF PGM.*Cursor_field = CTL.LH_On_Time_Reason_Code;

// Call program SEL On Time Reasons    SR.
CALL PROGRAM(SEL On Time Reasons    SR) ('PPYNSRR');
PARAMETER(CTL.LH_On_Time_Reason_Code);

ENDIF;

ENDIF;

// WRK.USR Flag 1 = CND.No
WRK.USR_Flag_1 = 'N';

//?Val on time reason code
CASE;

// IF CTL.LH On-Time Reason Code is Blank
IF CTL.LH_On_Time_Reason_Code = *BLANK;

//?Val on time reason code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val OT Resaon Code    RT) TYPE(RTVOBJ) FILE(PPB5REP)           AC1787946;
PARAMETER(CTL.LH_On_Time_Reason_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'On Time Reason Code &1 not found.'
ERROR(USR3631);
MSGPARM(CTL.LH_On_Time_Reason_Code);

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

ENDIF;

//?If on time, then Reason Code must be blanks
CASE;

// IF CTL.On Time - (Y/N) is yes
IF ( CTL.On_Time_Y_N = 'Y';

// OR CTL.On Time - (Y/N) is blank
OR CTL.On_Time_Y_N = *BLANK );

// AND CTL.LH On-Time Reason Code NE WRK.Blank for 4           USR
AND CTL.LH_On_Time_Reason_Code <> WRK.Blank_for_4_USR;

//?RMC Added blank check 2.20.20
// Send error message - 'On time reason code &1 not valid when Load is On Time.'
ERROR(USR3645);
MSGPARM(CTL.LH_On_Time_Reason_Code);

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

//?If on time = No then Reason Code must be entered      E002962
CASE;

// IF CTL.On Time - (Y/N) is no
IF CTL.On_Time_Y_N = 'N';

// AND CTL.LH On-Time Reason Code EQ WRK.Blank for 4           USR
AND CTL.LH_On_Time_Reason_Code = WRK.Blank_for_4_USR;

// Send error message - 'Reason Code is required.'
ERROR(USR2778);
MSGPARM(CTL.LH_On_Time_Reason_Code);

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

//?** Val held over reason
CASE;

// IF CTL.LH Held Over Reason is *Blanks
IF CTL.LH_Held_Over_Reason = *BLANK;

//?** Val held over reason
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val OT Resaon Code    RT) TYPE(RTVOBJ) FILE(PPB5REP)           AC1787946;
PARAMETER(CTL.LH_Held_Over_Reason);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?** Held over reasons are from the On Time Reasons file    LJB
// Send error message - 'Heldover Reason invalid'
ERROR(USR4700);
MSGPARM(CTL.LH_Held_Over_Reason);

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

ENDIF;

//?* Bo does not want any testing done on this field.    E002962 (post instl)
//?** Deadline Departure Date/Time Restrictions Warning  W288
CASE;

// IF LCL.Access Limited Sts USR is no
IF LCL.Access_Limited_Sts_USR = 'N';

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1517921;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Retrieve the hours that Shipping is restricted from loading
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** Warning message if DDD/T is during Shipping Restricted times
//?** Validate if hours are entered for a warehouse
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** Validate if hours are entered for a warehouse
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** Validate if hours are entered for a warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?** Error if DDT is during restriced hours             W288
CASE;

// IF WRK.Deadline Departure Time GE WRK.Dock Unavail Start Time
IF WRK.Deadline_Departure_Time >= WRK.Dock_Unavail_Start_Time;

// AND WRK.Deadline Departure Time LE WRK.Dock Unavail End Time
AND WRK.Deadline_Departure_Time <= WRK.Dock_Unavail_End_Time;

// AND CTL.Deadline Departure Date EQ CTL.Scheduled Ship Date
AND CTL.Deadline_Departure_Date = CTL.Scheduled_Ship_Date;

// Send information message - 'WARN:Deadline Depart Date is during Shipping Restricted Hours'
MESSAGE(USR4251 *INFO);

ENDIF;

ENDIF;

ENDIF;

//?If Error, Then Quit.
CASE;

// IF WRK.USR Flag 1 is Yes
IF WRK.USR_Flag_1 = 'Y';

QUIT;

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?** Use the new 25 char Held over reason comment fld   9/20/2006 LJB
//?Update load header with On Time flag and reason code
CASE;

// IF CTL.On Time - (Y/N) NE PAR.On Time - (Y/N)
IF CTL.On_Time_Y_N <> PAR.On_Time_Y_N;

// OR CTL.LH On-Time Reason Code NE PAR.LH On-Time Reason Code
OR CTL.LH_On_Time_Reason_Code <> PAR.LH_On_Time_Reason_Code;

EXECUTE FUNCTION(CHG Load On Time/ReasonCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1445721;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.On_Time_Y_N);
PARAMETER(CTL.LH_Unused_Sts);
PARAMETER(CTL.LH_On_Time_Reason_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Use the new 25 char Held over reason comment fld   9/20/2006 LJB
//?Update Load Header with Held Over Flag and Held Over Reason Comment
CASE;

// IF CTL.Load Held Over NE PAR.Load Held Over
IF CTL.Load_Held_Over <> PAR.Load_Held_Over;

// OR CTL.LH Held Over Rsn Cmt NE PAR.LH Held Over Rsn Cmt
OR CTL.LH_Held_Over_Rsn_Cmt <> PAR.LH_Held_Over_Rsn_Cmt;

EXECUTE FUNCTION(CHG Held Over/Reason   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1502798;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Load_Held_Over);
PARAMETER(CTL.LH_Held_Over_Rsn_Cmt);
PARAMETER(CTL.LH_Held_Over_Reason);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Load Held Over = CTL.Load Held Over
PAR.Load_Held_Over = CTL.Load_Held_Over;

// PAR.LH Held Over Rsn Cmt = CTL.LH Held Over Rsn Cmt
PAR.LH_Held_Over_Rsn_Cmt = CTL.LH_Held_Over_Rsn_Cmt;

ENDIF;

//?USER: Validate subfile record fields

//?F4 to Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.OHE Late Delivery Code
IF PGM.*Cursor_field = RCD.OHE_Late_Delivery_Code;

// Call program SEL On Time Reasons    SR.
CALL PROGRAM(SEL On Time Reasons    SR) ('PPYNSRR');
PARAMETER(RCD.OHE_Late_Delivery_Code);

ENDIF;

ENDIF;

//?E4241 RMC  dont comp to JobDate.  12-2-15
//?Edit Requested Delivery Date cannot be before sched ship date  E4241
CASE;

// IF RCD.Requested Delivery Date LT CTL.Scheduled Ship Date
IF RCD.Requested_Delivery_Date < CTL.Scheduled_Ship_Date;

// AND RCD.Requested Delivery Date is entered
AND RCD.Requested_Delivery_Date <> *ZERO;

// Send error message - 'Delivery Date is before Scheduled Ship Date'
ERROR(USR2063);
MSGPARM(RCD.Requested_Delivery_Date);

ENDIF;

//?USER: Validate subfile record relations

// RCD.Estimated Arrival Time = RCD.USR Est. Arrival Time * CON.100 *
RCD.Estimated_Arrival_Time = RCD.USR_Est_Arrival_Time * 100;

// RCD.Actual Delivery time = RCD.USR Actual Delivery Time * CON.100 *
RCD.Actual_Delivery_time = RCD.USR_Actual_Delivery_Time * 100;

// RCD.Appointment Confirm Time = RCD.USR Appt. Confirm Time * CON.100 *
RCD.Appointment_Confirm_Time = RCD.USR_Appt_Confirm_Time * 100;

// RCD.LD Carrier Appt Time = RCD.USR Carrier Appt Time * CON.100 *
RCD.LD_Carrier_Appt_Time = RCD.USR_Carrier_Appt_Time * 100;

// RCD.Original Appt Confirm Tm = RCD.USR To Time 4.0 * CON.100 *
RCD.LD_Unused_Time_2 = RCD.USR_To_Time_4_0 * 100;

//?First check for Errors
DO;

//?Late Deliv Code required if On Time Deliv=No (3 char)  E002962
CASE;

// IF RCD.Load Dtl On Time Flag is Not On Time
IF RCD.Load_Dtl_On_Time_Flag = 'N';

// AND RCD.OHE Late Delivery Code EQ WRK.BLANK
AND RCD.OHE_Late_Delivery_Code = WRK.BLANK;

// Send error message - 'Reason is required if On Time is No.'
ERROR(USR3639);
MSGPARM(RCD.OHE_Late_Delivery_Code);

ENDIF;

//?Validate on time flag is entered when act delv date is entered-chk MG CRT
CASE;

// IF RCD.Actual Delivery Date is Entered
IF RCD.Actual_Delivery_Date <> *ZERO;

// AND CTL.On Time - (Y/N) is blank
AND CTL.On_Time_Y_N = *BLANK;

CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

CASE;

// IF RCD.Stop/Drop is Stop One
IF RCD.Stop_Drop = 1;

// Send error message - 'On time flag must be entered when Actual Delivery Date is entered for stop
ERROR(USR2451);
MSGPARM(CTL.On_Time_Y_N);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?WHD 57687
CASE;

// IF RCD.Stop/Drop is Stop 2
IF RCD.Stop_Drop = 2;

// Send error message - 'On time flag must be entered when Actual Delivery Date is entered for stop
ERROR(USR2451);
MSGPARM(CTL.On_Time_Y_N);

ENDIF;

ENDIF;

ENDIF;

//?Validate SSD vs. Carrier Appt Date   NEW  RMC 10/21/09
CASE;

// IF RCD.LD Carrier Appt Date is Entered
IF RCD.LD_Carrier_Appt_Date > 0;

CASE;

// IF RCD.LD Carrier Appt Date LT CTL.Scheduled Ship Date
IF RCD.LD_Carrier_Appt_Date < CTL.Scheduled_Ship_Date;

// Send error message - 'Date &1 cannot be earlier than the Sched Ship Dt.'
ERROR(USR4196);
MSGPARM(RCD.LD_Carrier_Appt_Date);

ENDIF;

ENDIF;

//?"ALL" for on time reason is no longer allowed         E004147
CASE;

// IF CTL.LH On-Time Reason Code is ALL
IF CTL.LH_On_Time_Reason_Code = 'ALL';

// Send error message - 'On Time reason code "ALL" is not allowed.'
ERROR(USR4799);
MSGPARM(CTL.LH_On_Time_Reason_Code);

// CTL.LH On-Time Reason Code = CND.Blank
CTL.LH_On_Time_Reason_Code = *BLANK;

ENDIF;

//?"ALL" for late delivery reason is not allowed         E004147
CASE;

// IF RCD.OHE Late Delivery Code EQ LCL.Text 3 Length USR
IF RCD.OHE_Late_Delivery_Code = LCL.Text_3_Length_USR;

// Send error message - 'On Time reason code "ALL" is not allowed.'
ERROR(USR4799);
MSGPARM(RCD.OHE_Late_Delivery_Code);

// RCD.OHE Late Delivery Code = CON.*BLANK
RCD.OHE_Late_Delivery_Code = *BLANK;

ENDIF;

ENDDO;

//?Second, check for field changes
DO;

// WRK.Status Flag 10 Y/N = CND.No
WRK.Status_Flag_10_Y_N = 'N';

// WRK.Status Flag 11 Y/N = CND.Yes
WRK.Status_Flag_11_Y_N = 'Y';

CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

//?If stop 1 then match on time & reason to ctl           E004102
CASE;

// IF RCD.Stop/Drop is Stop One
IF RCD.Stop_Drop = 1;

// RCD.OHE Late Delivery Code = CTL.LH On-Time Reason Code
RCD.OHE_Late_Delivery_Code = CTL.LH_On_Time_Reason_Code;

// RCD.Load Dtl On Time Flag = CTL.On Time - (Y/N)
RCD.Load_Dtl_On_Time_Flag = CTL.On_Time_Y_N;

// RCD.USR Check Y/N Status = RCD.Load Dtl On Time Flag
RCD.USR_Check_Y_N_Status = RCD.Load_Dtl_On_Time_Flag;

// PAR.On Time - (Y/N) = CTL.On Time - (Y/N)
PAR.On_Time_Y_N = CTL.On_Time_Y_N;

// PAR.LH On-Time Reason Code = CTL.LH On-Time Reason Code
PAR.LH_On_Time_Reason_Code = CTL.LH_On_Time_Reason_Code;

// Execute function Set On Indicator 84    US.
EXECUTE FUNCTION(Set On Indicator 84    US) TYPE(EXCUSRSRC) ('PBRJUFR');
{
 C                     SETON                     84    SETON SFLNXTCHG 84
}


// Execute function Set On Indicator 55    US.
EXECUTE FUNCTION(Set On Indicator 55    US) TYPE(EXCUSRSRC) ('PBM2UFR');
{
 ***** SET MDT ON
 C                     SETON                     55    SETON INDICATOR
}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?If stop 2 then match on time & reason to ctl          WHD 57687
CASE;

// IF RCD.Stop/Drop is Stop 2
IF RCD.Stop_Drop = 2;

// RCD.OHE Late Delivery Code = CTL.LH On-Time Reason Code
RCD.OHE_Late_Delivery_Code = CTL.LH_On_Time_Reason_Code;

// RCD.Load Dtl On Time Flag = CTL.On Time - (Y/N)
RCD.Load_Dtl_On_Time_Flag = CTL.On_Time_Y_N;

// RCD.USR Check Y/N Status = RCD.Load Dtl On Time Flag
RCD.USR_Check_Y_N_Status = RCD.Load_Dtl_On_Time_Flag;

// PAR.On Time - (Y/N) = CTL.On Time - (Y/N)
PAR.On_Time_Y_N = CTL.On_Time_Y_N;

// PAR.LH On-Time Reason Code = CTL.LH On-Time Reason Code
PAR.LH_On_Time_Reason_Code = CTL.LH_On_Time_Reason_Code;

// Execute function Set On Indicator 84    US.
EXECUTE FUNCTION(Set On Indicator 84    US) TYPE(EXCUSRSRC) ('PBRJUFR');
{
 C                     SETON                     84    SETON SFLNXTCHG 84
}


// Execute function Set On Indicator 55    US.
EXECUTE FUNCTION(Set On Indicator 55    US) TYPE(EXCUSRSRC) ('PBM2UFR');
{
 ***** SET MDT ON
 C                     SETON                     55    SETON INDICATOR
}


ENDIF;

ENDIF;

//?If rcd on time flag has changed, update the file       E004102
CASE;

// IF RCD.Load Dtl On Time Flag NE RCD.USR Check Y/N Status
IF RCD.Load_Dtl_On_Time_Flag <> RCD.USR_Check_Y_N_Status;

// AND RCD.Load Dtl On Time Flag NE WRK.Blank for 3          USR
AND RCD.Load_Dtl_On_Time_Flag <> WRK.Blank_for_3_USR;

// RCD.USR Check Y/N Status = RCD.Load Dtl On Time Flag
RCD.USR_Check_Y_N_Status = RCD.Load_Dtl_On_Time_Flag;

// Execute function Set On Indicator 84    US.
EXECUTE FUNCTION(Set On Indicator 84    US) TYPE(EXCUSRSRC) ('PBRJUFR');
{
 C                     SETON                     84    SETON SFLNXTCHG 84
}


// Execute function Set On Indicator 55    US.
EXECUTE FUNCTION(Set On Indicator 55    US) TYPE(EXCUSRSRC) ('PBM2UFR');
{
 ***** SET MDT ON
 C                     SETON                     55    SETON INDICATOR
}


ENDIF;

ENDDO;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Arrv/Delv/Appt Tm IF) TYPE(EXCINTFUN) FILE(OMFLCPP)        AC2116226;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop_Sequence_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Estimated_Arrival_Date);
PARAMETER(RCD.Estimated_Arrival_Time);
PARAMETER(RCD.Appointment_Confirm_Date);
PARAMETER(RCD.Appointment_Confirm_Time);
PARAMETER(RCD.Confirmation_Made_With);
PARAMETER(LCL.Confirmation_Number);
PARAMETER(RCD.Actual_Delivery_Date);
PARAMETER(RCD.Actual_Delivery_time);
PARAMETER(RCD.MPC_Number);
PARAMETER(RCD.Load_Dtl_On_Time_Flag);
PARAMETER(RCD.LD_Carrier_Appt_Date);
PARAMETER(RCD.LD_Unused_Date_2);
PARAMETER(RCD.LD_Carrier_Appt_Time);
PARAMETER(RCD.LD_Unused_Time_2);
PARAMETER(RCD.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(RCD.OHE_Late_Delivery_Code);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.USR_Requested_Deliver_Dte);
PARAMETER(RCD.Usr_Request_Delivery_Time);
PARAMETER(CTL.Carrier_Code);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Arrv/Delv/Appt Tm CH) TYPE(CHGOBJ) FILE(OMFLCPP)           AC2116190;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Estimated_Arrival_Date);
 PARAMETER(PAR.Estimated_Arrival_Time);
 PARAMETER(PAR.Appointment_Confirm_Date);
 PARAMETER(PAR.Appointment_Confirm_Time);
 PARAMETER(PAR.Confirmation_Made_With);
 PARAMETER(PAR.Confirmation_Number);
 PARAMETER(PAR.Actual_Delivery_Date);
 PARAMETER(PAR.Actual_Delivery_time);
 PARAMETER(PAR.MPC_Number);
 PARAMETER(PAR.Load_Dtl_On_Time_Flag);
 PARAMETER(PAR.LD_Carrier_Appt_Date);
 PARAMETER(PAR.LD_Unused_Date_2);
 PARAMETER(PAR.LD_Carrier_Appt_Time);
 PARAMETER(PAR.LD_Unused_Time_2);
 PARAMETER(PAR.LD_Cst_Svc_Tracer_Cmmnt);
 PARAMETER(PAR.OHE_Late_Delivery_Code);
 {
  //?USER: Processing before Data read

  //?***** Change Log and Comments
  DO;

  //?*****
  //?** 04/28/2014 LJB E002962
  //?** Change On Time Reason to OHE Late Delivery Code in Order Hdr Ext
  //?*****
  ENDDO;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(CHG Late Deliv Code    CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2087862;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.OHE_Late_Delivery_Code);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

 EXECUTE FUNCTION(CHG Appt Cnf & ReqDlv IF) TYPE(EXCINTFUN)                      AC2018863;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.USR_Requested_Deliver_Dte);
 PARAMETER(PAR.Usr_Request_Delivery_Time);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Appointment_Confirm_Date);
 PARAMETER(PAR.Appointment_Confirm_Time);
 PARAMETER(PAR.Confirmation_Number);
 PARAMETER(PAR.Confirmation_Made_With);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Requested Delivery Date NE PAR.USR Requested Deliver Dte
  IF PAR.Requested_Delivery_Date <> PAR.USR_Requested_Deliver_Dte;

  // OR PAR.Requested Delivery Time NE PAR.Usr Request Delivery Time
  OR PAR.Requested_Delivery_Time <> PAR.Usr_Request_Delivery_Time;

  //?recalc deadl for order thats NOT on a load
  // Call program CLC Deadln Depart Dt  XF.
  CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.USR_Requested_Deliver_Dte);
  PARAMETER(PAR.Usr_Request_Delivery_Time);
  PARAMETER(LCL.Deadline_Depart_Date_LH);
  PARAMETER(LCL.Deadline_Depart_Time_LH);

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Deadline_Depart_Date_LH);
  PARAMETER(LCL.Deadline_Depart_Time_LH);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  CASE;

  // IF PAR.Load ID is GT Zero
  IF PAR.Load_ID > *ZERO;

  //?** If Req Dt changed write log record
  CASE;

  // IF PAR.Requested Delivery Date NE PAR.USR Requested Deliver Dte
  IF PAR.Requested_Delivery_Date <> PAR.USR_Requested_Deliver_Dte;

  // LCL.Department Control Code = CND.Sales Dept
  LCL.Department_Control_Code = 'SLS';

  // LCL.Load Change Type = CND.Requested Delivery Date
  LCL.Load_Change_Type = 'RQSDLV';

  // LCL.Date To Alpha         USR = CVTVAR(PAR.USR Requested Deliver Dte)
  LCL.Date_To_Alpha_USR = CVTVAR(PAR.USR_Requested_Deliver_Dte);

  // LCL.Date From Alpha       USR = CVTVAR(PAR.Requested Delivery Date)
  LCL.Date_From_Alpha_USR = CVTVAR(PAR.Requested_Delivery_Date);

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Department_Control_Code);
  PARAMETER(LCL.Date_From_Alpha_USR);
  PARAMETER(LCL.Date_To_Alpha_USR);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);

  ENDIF;

  //?** If Req Tm changed write log record
  CASE;

  // IF PAR.Requested Delivery Time NE PAR.Usr Request Delivery Time
  IF PAR.Requested_Delivery_Time <> PAR.Usr_Request_Delivery_Time;

  // LCL.Department Control Code = CND.Sales Dept
  LCL.Department_Control_Code = 'SLS';

  // LCL.Load Change Type = CND.Requested Delivery Date
  LCL.Load_Change_Type = 'RQSDLV';

  // LCL.Date To Alpha         USR = CVTVAR(PAR.Usr Request Delivery Time)
  LCL.Date_To_Alpha_USR = CVTVAR(PAR.Usr_Request_Delivery_Time);

  // LCL.Date From Alpha       USR = CVTVAR(PAR.Requested Delivery Time)
  LCL.Date_From_Alpha_USR = CVTVAR(PAR.Requested_Delivery_Time);

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Department_Control_Code);
  PARAMETER(LCL.Date_From_Alpha_USR);
  PARAMETER(LCL.Date_To_Alpha_USR);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(CHG Appt Cnf & ReqDlv CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2018645;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.USR_Requested_Deliver_Dte);
  PARAMETER(PAR.Usr_Request_Delivery_Time);
  PARAMETER(PAR.OH_Appt_Confirmation_Dt);
  PARAMETER(PAR.OH_Appt_Confirmation_Tm);
  PARAMETER(PAR.OHE_Appt_Confirmation_#);
  PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

   //?USER: Processing after Data update

   //?** Upd App Conf name and number
   EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(WRK.Delivery_P_O_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   //?R15161 DN 07/31/19-Replaced OHE CRTOBJ to Not Call CHGOBJ.
   EXECUTE FUNCTION(CRT Order Header Extsn CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2173922;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(LCL.OHE_Ship_Status);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.OHE_Carrier_SCAC_Code);
   PARAMETER(LCL.OHE_Spot_Buy);
   PARAMETER(LCL.OHE_PO_ACK_Flag);
   PARAMETER(LCL.OHE_Override_Type_Code);
   PARAMETER(LCL.OHE_Backhaul_Status);
   PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
   PARAMETER(LCL.OHE_Load_Haul_Type);
   PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
   PARAMETER(LCL.OHE_Bookings_Confirmed);
   PARAMETER(LCL.OHE_EDI_Error_Reasons);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Delivery_P_O_Number);
   PARAMETER(*BLANK);
   PARAMETER(LCL.OHE_EDI_943_Action);
   PARAMETER(LCL.OHE_EDI_944_Action);
   PARAMETER(LCL.OHE_EDI_940_Action);
   PARAMETER(LCL.OHE_EDI_945_Action);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.OHE_Appt_Confirmation_#);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER('A');
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(JOB.*Job_date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing if Data update error

    RETURN;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?* Orig Carr Appt fields are now being used so don't zero them out.
   ENDIF;

  }

 }

}


//?USER: Extra processing after DBF update

//?* Set off MDT after file update                       E003135
//?* Set off SFLNXTCHG after file update                 E004102
// Execute function Set Off Indicator 55   US.
EXECUTE FUNCTION(Set Off Indicator 55   US) TYPE(EXCUSRSRC) ('PBM3UFR');
{
 ***** SET MDT OFF
 C                     SETOF                     55    SETOF INDICATOR
}


// Execute function Set Off Indicator 84   US.
EXECUTE FUNCTION(Set Off Indicator 84   US) TYPE(EXCUSRSRC) ('PBRKUFR');
{
 ***** SET MDT OFF
 C                     SETOF                     84    SETOF SFLNXTCHG
}


// RCD.USR Check Y/N Status = RCD.Load Dtl On Time Flag
RCD.USR_Check_Y_N_Status = RCD.Load_Dtl_On_Time_Flag;

CASE;

// IF CTL.LH On-Time Reason Code is ALL
IF CTL.LH_On_Time_Reason_Code = 'ALL';

// CTL.LH On-Time Reason Code = CND.Blank
CTL.LH_On_Time_Reason_Code = *BLANK;

ENDIF;

CASE;

// IF RCD.OHE Late Delivery Code EQ LCL.Text 3 Length USR
IF RCD.OHE_Late_Delivery_Code = LCL.Text_3_Length_USR;

// RCD.OHE Late Delivery Code = CON.*BLANK
RCD.OHE_Late_Delivery_Code = *BLANK;

ENDIF;

//?USER: Process command keys

// PAR.Load ID = CTL.Load ID
PAR.Load_ID = CTL.Load_ID;

RETURN;

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

CASE;

// IF CTL.LH On-Time Reason Code is ALL
IF CTL.LH_On_Time_Reason_Code = 'ALL';

// CTL.LH On-Time Reason Code = CND.Blank
CTL.LH_On_Time_Reason_Code = *BLANK;

ENDIF;

// PAR.USR Exit Program = CND.yes
PAR.USR_Exit_Program = 'Y';

ENDIF;

