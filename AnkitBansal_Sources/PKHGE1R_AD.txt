// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKHGE1R
// ?Date: 14.08.2025 Time: 02:49:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize key screen

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize detail screen (new record)

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

// WRK.Cmp Type Save usr = DTL.CMP Type
WRK.Cmp_Type_Save_usr = DTL.CMP_Type;

//?USER: Initialize detail screen (existing record)

// DTL.Grading Type Desc Usr = Condition name of DB1.CMP Grading Type
DTL.Grading_Type_Desc_Usr = RTVCND(DB1.CMP_Grading_Type);

// DTL.Sort Basis Desc Usr = Condition name of DB1.CMP Sort Basis
DTL.Sort_Basis_Desc_Usr = RTVCND(DB1.CMP_Sort_Basis);

// DTL.Carc Wgt Type Desc Usr = Condition name of DB1.CMP Carc Wgt Type
DTL.Carc_Wgt_Type_Desc_Usr = RTVCND(DB1.CMP_Carc_Wgt_Type);

// DTL.Sort Weight Desc Usr = Condition name of DB1.CMP UnUsed Field 1
DTL.Sort_Weight_Desc_Usr = RTVCND(DB1.CMP_Optimal_Row_Nbr_f_srt);

// DTL.CMP Type Desc Usr = Condition name of DB1.CMP Type
DTL.CMP_Type_Desc_Usr = RTVCND(DB1.CMP_Type);

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

// WRK.Cmp Type Save usr = DTL.CMP Type
WRK.Cmp_Type_Save_usr = DTL.CMP_Type;

//?Build sort or preimum description for screen
DO;

// DTL.Desc 15 USR = Condition name of DTL.CMP CLC Premium First
DTL.Desc_15_USR = RTVCND(DTL.CMP_CLC_Premium_First);

ENDDO;

// DTL.CMP Effect Kill Date = JOB.*Job date
DTL.CMP_Effect_Purchase_Date = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Carcass Merit Prog RT) TYPE(RTVOBJ) FILE(PLBPCPP)          AB1316570;
PARAMETER(DB1.CMP_Program_Code);
PARAMETER(DTL.CMP_Effect_Purchase_Date);
PARAMETER(DTL.CMP_Commodity_Market);
PARAMETER(DTL.CMP_Commodity_Group);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.CMP Effect Kill Date GE DB1.CMP Effect Kill Date
 IF PAR.CMP_Effect_Purchase_Date >= DB1.CMP_Effect_Purchase_Date;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 // IF PAR.CMP Effect Kill Date LT DB1.CMP Effect Kill Date
 IF PAR.CMP_Effect_Purchase_Date < DB1.CMP_Effect_Purchase_Date;

 ENDIF;

}


//?USER: Validate detail screen fields

//?Build sort or preimum description for screen
DO;

// DTL.Desc 15 USR = Condition name of DTL.CMP CLC Premium First
DTL.Desc_15_USR = RTVCND(DTL.CMP_CLC_Premium_First);

ENDDO;

//?validate Premium 1st only used with the %base Price
CASE;

// IF DTL.CMP Sort Basis is % of Base Price
IF DTL.CMP_Sort_Basis = 'P';

//?validate Premium 1st only used with the %base Price
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.CMP CLC Premium First is Premium First
IF DTL.CMP_CLC_Premium_First = 'P';

// Send error message - 'Premium 1st Only allowed on the %BasePrice'
ERROR(PRK1146);

ENDIF;

ENDIF;

//?Validate Lean Factor evaluation type.
CASE;

// IF DTL.CMP Grading Type is Lean Factor
IF DTL.CMP_Grading_Type = 'F';

CASE;

// IF DTL.CMP Std Lean Percent EQ WRK.Zero USR
IF DTL.CMP_Std_Lean_Percent = WRK.Zero_USR;

// Send error message - 'Standard Lean Required for Lean Factor evaluation.'
ERROR(PRK0142);
MSGPARM(DTL.CMP_Std_Lean_Percent);

ENDIF;

CASE;

// IF DTL.CMP Lean Factor EQ WRK.Zero USR
IF DTL.CMP_Lean_Factor = WRK.Zero_USR;

// Send error message - 'Lean Factor required for Lean Factor evaluation.'
ERROR(PRK0143);
MSGPARM(DTL.CMP_Lean_Factor);

ENDIF;

//?Validate Lean Factor evaluation type.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.CMP Std Lean Percent = CON.*ZERO
DTL.CMP_Std_Lean_Percent = *ZERO;

ENDIF;

//?Validate COMPETITOR Lean % +/-
CASE;

// IF DTL.CMP Type is Competitor Comparison
IF DTL.CMP_Type = 'D';

// AND DTL.CMP Grading Type is Lean Factor
AND ( DTL.CMP_Grading_Type = 'F';

// OR DTL.CMP Grading Type is Lean Percent FOM
OR DTL.CMP_Grading_Type = 'P' );

//?Validate COMPETITOR Lean % +/-
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.CMP Lean Factor = CON.*ZERO
DTL.CMP_Lean_Factor = *ZERO;

ENDIF;

//?Validate COMPETITOR Market add/Ded
CASE;

// IF DTL.CMP Type is Competitor Comparison
IF DTL.CMP_Type = 'D';

//?Validate COMPETITOR Market add/Ded
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.CMP Market Add/Deduct = CON.*ZERO
DTL.CMP_Market_Add_Deduct = *ZERO;

ENDIF;

//?06/20/05 slm Validation on Meat Value
//?Validate Meat Value
CASE;

// IF DTL.CMP Grading Type is Meat Value
IF DTL.CMP_Grading_Type = 'M';

//?Validate Meat Value
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.CMP % of Carcass Cutout EQ WRK.Zero USR
IF DTL.CMP_of_Carcass_Cutout = WRK.Zero_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '% of Carc Cutout only allowed on Grading Type = Meat Value'
ERROR(PRK1130);
MSGPARM(DTL.CMP_Grading_Type);
MSGPARM(DTL.CMP_of_Carcass_Cutout);

ENDIF;

CASE;

// IF DTL.CMP Fixed Cost Per Head EQ WRK.Zero USR
IF DTL.CMP_Fixed_Cost_Per_Head = WRK.Zero_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Fixed Cost Per Head only allowed on Grading Type = Meat Value'
ERROR(PRK1131);
MSGPARM(DTL.CMP_Grading_Type);
MSGPARM(DTL.CMP_Fixed_Cost_Per_Head);

ENDIF;

ENDIF;

//?10/18/07 slm Validation the Grade = B and Grade Adjustment
//?Validate Grade Adjustment
CASE;

// IF DTL.CMP Grading Type is Not BackFat Grade
IF DTL.CMP_Grading_Type = 'C'/'G'/'F'/'P'/'D'/'L'/'M'/'S';

CASE;

// IF DTL.CMP Grade Type Adj EQ WRK.Zero USR
IF DTL.CMP_Grade_Type_Adj = WRK.Zero_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Adj For Grade =BackFat Only & >=0'
ERROR(PRK1178);
MSGPARM(DTL.CMP_Grade_Type_Adj);

ENDIF;

//?Validate Grade Adjustment
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.CMP Grade Type Adj GE WRK.Zero USR
IF DTL.CMP_Grade_Type_Adj >= WRK.Zero_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Adj For Grade =BackFat Only & >=0'
ERROR(PRK1178);
MSGPARM(DTL.CMP_Grade_Type_Adj);

ENDIF;

ENDIF;

// DTL.Grading Type Desc Usr = Condition name of DTL.CMP Grading Type
DTL.Grading_Type_Desc_Usr = RTVCND(DTL.CMP_Grading_Type);

// DTL.Sort Basis Desc Usr = Condition name of DTL.CMP Sort Basis
DTL.Sort_Basis_Desc_Usr = RTVCND(DTL.CMP_Sort_Basis);

// DTL.Carc Wgt Type Desc Usr = Condition name of DTL.CMP Carc Wgt Type
DTL.Carc_Wgt_Type_Desc_Usr = RTVCND(DTL.CMP_Carc_Wgt_Type);

// DTL.CMP Type Desc Usr = Condition name of DTL.CMP Type
DTL.CMP_Type_Desc_Usr = RTVCND(DTL.CMP_Type);

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

CASE;

// IF DTL.CMP Type is Competitor Comparison
IF DTL.CMP_Type = 'D';

EXECUTE FUNCTION(Chk 3 Only Competitors RT) TYPE(RTVOBJ) FILE(PKARREP)          AB1174022;
PARAMETER(WRK.Competitors_Code_1_Usr);
PARAMETER(WRK.Competitors_Code_2_Usr);
PARAMETER(WRK.Competitors_Code_3_Usr);
PARAMETER(WRK.Count_USR);
{
 //?USER: Initialize routine

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Count_USR = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_1_Usr = *BLANK;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_2_Usr = *BLANK;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_3_Usr = *BLANK;

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.001
 PAR.Count_USR = WRK.Count_USR + 001;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Count_USR = WRK.Count_USR;

 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_1_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_2_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_3_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Greater then 3
 IF WRK.Count_USR > 3;

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Count USR is Greater then 3
IF WRK.Count_USR > 3;

// Send error message - 'Only 3 Competitors Allow'
ERROR(PRK0617);
MSGPARM(WRK.Competitors_Code_1_Usr);
MSGPARM(WRK.Competitors_Code_2_Usr);
MSGPARM(WRK.Competitors_Code_3_Usr);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.CMP Type NE WRK.Cmp Type Save usr
IF DTL.CMP_Type <> WRK.Cmp_Type_Save_usr;

CASE;

// IF DTL.CMP Type is Competitor Comparison
IF DTL.CMP_Type = 'D';

EXECUTE FUNCTION(Chk 3 Only Competitors RT) TYPE(RTVOBJ) FILE(PKARREP)          AB1174022;
PARAMETER(WRK.Competitors_Code_1_Usr);
PARAMETER(WRK.Competitors_Code_2_Usr);
PARAMETER(WRK.Competitors_Code_3_Usr);
PARAMETER(WRK.Count_USR);
{
 //?USER: Initialize routine

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Count_USR = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_1_Usr = *BLANK;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_2_Usr = *BLANK;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_3_Usr = *BLANK;

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.001
 PAR.Count_USR = WRK.Count_USR + 001;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Count_USR = WRK.Count_USR;

 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_1_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_2_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_3_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Greater then 3
 IF WRK.Count_USR > 3;

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Count USR is Greater then 3
IF WRK.Count_USR > 3;

// Send error message - 'Only 3 Competitors Allow'
ERROR(PRK0617);
MSGPARM(WRK.Competitors_Code_1_Usr);
MSGPARM(WRK.Competitors_Code_2_Usr);
MSGPARM(WRK.Competitors_Code_3_Usr);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Carcass Merit Pgm CR) TYPE(CRTOBJ) FILE(PKARREP)           AB1101849;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.CMP_Description);
PARAMETER(DTL.CMP_Grading_Type);
PARAMETER(DTL.CMP_Sort_Basis);
PARAMETER(DTL.CMP_Sts);
PARAMETER(DTL.CMP_Carc_Wgt_Type);
PARAMETER(DTL.CMP_Std_Lean_Percent);
PARAMETER(DTL.CMP_Lean_Factor);
PARAMETER(DTL.CMP_Optimal_Row_Nbr_f_srt);
PARAMETER(DTL.CMP_Type);
PARAMETER(DTL.CMP_Market_Add_Deduct);
PARAMETER(DTL.CMP_of_Carcass_Cutout);
PARAMETER(DTL.CMP_Fixed_Cost_Per_Head);
PARAMETER(DTL.CMP_Grade_Type_Adj);
PARAMETER(DTL.CMP_Unused_Price_2);
PARAMETER(DTL.CMP_Unused_Price_3);
PARAMETER(DTL.CMP_CLC_Premium_First);
PARAMETER(DTL.CMP_Unused_Sts_2);
PARAMETER(DTL.CMP_Unused_Sts_3);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Carcass Merit Pgm CH) TYPE(CHGOBJ) FILE(PKARREP)           AB1101850;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.CMP_Description);
PARAMETER(DTL.CMP_Grading_Type);
PARAMETER(DTL.CMP_Sort_Basis);
PARAMETER(DTL.CMP_Sts);
PARAMETER(DTL.CMP_Carc_Wgt_Type);
PARAMETER(DTL.CMP_Std_Lean_Percent);
PARAMETER(DTL.CMP_Lean_Factor);
PARAMETER(DTL.CMP_Optimal_Row_Nbr_f_srt);
PARAMETER(DTL.CMP_Type);
PARAMETER(DTL.CMP_Market_Add_Deduct);
PARAMETER(DTL.CMP_of_Carcass_Cutout);
PARAMETER(DTL.CMP_Fixed_Cost_Per_Head);
PARAMETER(DTL.CMP_Grade_Type_Adj);
PARAMETER(DTL.CMP_Unused_Price_2);
PARAMETER(DTL.CMP_Unused_Price_3);
PARAMETER(DTL.CMP_CLC_Premium_First);
PARAMETER(DTL.CMP_Unused_Sts_2);
PARAMETER(DTL.CMP_Unused_Sts_3);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.CMP_Commodity_Market);
PARAMETER(DTL.CMP_Commodity_Group);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

