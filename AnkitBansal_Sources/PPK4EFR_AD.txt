// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPK4EFR
// ?Date: 14.08.2025 Time: 03:41:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
DO;

//?11/11/21 W87162 RMC added to existing rcd section ->chk ACCTNG CO 440
//?11/16/18 S13578 RMC Force 440 claims to be Co Resp- for ACCTNG CO 440
//?08/10/18 S13578 RMC Force 440 claims to be Company Responsibility
//?01/09/18 R12011A RMC Force 440 claims to be Company Responsibility
//?E7293 JJH 09/20/16 - Ship To Customer
//?- Change the access path on the 'VAL Ext Co/Ord/Item ShpRT - Order
//?  Detail" function to "Co/Order#/Item/Whse Not X OPBGWKLD" so
//?  Cancelled Order Detail lines will be excluded.
//?- This will allow the validation of the Ship To Customer on the
//?  Edit Claim Product function to work properly.
//?E4057 JJH 10/13/15 - Price Credit Memo Fixes
//?- Do not allow Inactive (I) Department/Reason Codes to be entered.
//?E4057 JJH 04/06/15 - Price Credit Memo Fixes
//?- Change postion of Reason and Dept on display screen
//?- Affect Sales Pnds Status (Afft Lbs) - Changed to Output
//?- Remove Affect Inventory Status (Afft Inv) from display screen
//?- Add Require Credit Manager Approval (Req CM Apv) field to display
//?- Deparment Code and Reason changed from Optional to Required
//?- F4=SELRCD calls the PBQVSRR SELRCD which is I/RST by Deparment
//?  and Claim Reason.  Same SELRCD used for Department and Reason.
//?- Default for Affect Flags and Required CM Approval based on
//?  default values in A/R Claim Reason - Department/Reason.
//?- Add GL (Gallon) as a valid UOM.  Required for HPB.
//?03/26/15  RMC chg HS to not zerout the wt, allow PC= Pieces
//?** 02/27/2008 LJB E00094
//?** Prompt to email the claim with text message to St Joe
//?** only email if "Yes" is selected.
//?slm 8/24/2006 Add the following, open the Aff flg on the Sls Pnds
//?              Only default in from the Reason if blank or changed
//?9/25/2007 slm Add additional rule on the extended amount
//?10/09/07  slm Claim Responsibility was using LCL and not RCD
//?10/11/07  slm Cases was zero out weight reviewed with Purva
//?              and * out this code
//?11/07/07 slm  Pulled in the logic from the change object
//?              on when to change from company to shared
//?              these changes were not being displayed to the user
//?E3387 JJH 09/09/14 - Display Shipping Method, correct call to
//? Order Number SELRCD which requires Shipping Method.
ENDDO;

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(RTV Last Prod Line No  RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1525696;
PARAMETER(CTL.Claim_Number);
PARAMETER(PAR.Claim_Item_Line_Number);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

// WRK.Reason Code = CON.*BLANK
WRK.Reason_Code = *BLANK;

ENDIF;

// Call program EDT Calc Claim Amts    XF.
CALL PROGRAM(EDT Calc Claim Amts    XF) ('PPOCXFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(PAR.Claim_Type);
PARAMETER(CTL.Claim_Amount);
PARAMETER(PAR.Claim_Net_Loss);

// CTL.Claim Company Number = PAR.Claim Company Number
CTL.Claim_Company_Number = PAR.Claim_Company_Number;

// CTL.Claim Ship to Customer = PAR.Claim Ship to Customer
CTL.Claim_Ship_to_Customer = PAR.Claim_Ship_to_Customer;

// CTL.Claim Customer Name = PAR.Claim Customer Name
CTL.Claim_Customer_Name = PAR.Claim_Customer_Name;

//?E3387 JJH 09/09/14 - Output Shipping Method from Order Header TRG
EXECUTE FUNCTION(RTV ShipCust,BiilTpTF RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1750980;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(CTL.Shipping_Method);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.ORG_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(PAR.Claim_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Initialize subfile record (existing record)

// RCD.Reason Code Usr = DB1.Reason Code
RCD.Reason_Code_Usr = DB1.Reason_Code;

//?E4057 JJH 04/09/15 - Revised Department Code procesing
// RCD.Claim Department Code USR = DB1.Claim Department Code
RCD.Claim_Department_Code_USR = DB1.Claim_Department_Code;

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF ( RCD.Claim_Item_Weight = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

//?E4057 JJH 04/09/15 - Revised Reason Code procesing
//?If DP or PS Reason is used, they all must be the same reason code 10/6/04
CASE;

// IF RCD.Reason Code Usr is Deviated Pricing Adj
IF RCD.Reason_Code_Usr = 'DP';

// OR RCD.Reason Code Usr is Profit Sharing Adj
OR RCD.Reason_Code_Usr = 'PS';

CASE;

// IF WRK.Status Flag 1  Y/N is No
IF WRK.Status_Flag_1_Y_N = 'N';

//?E4057 JJH 04/09/15 - Revised Reason  Code procesing
// WRK.Reason Code = RCD.Reason Code Usr
WRK.Reason_Code = RCD.Reason_Code_Usr;

// WRK.Status Flag 1  Y/N = CND.Yes
WRK.Status_Flag_1_Y_N = 'Y';

ENDIF;

ENDIF;

//?Val existing recd that could have missing uom because crt elsewhere
DO;

//?Validate company, item, Ship To and TF Exempt
DO;

//?03/11/05 Add the validation of Valid Item type and item type from
//?the Company Item file.
//?The org Check file was * out and a new one created
//?Company & Item must exist in the Company/Item file
//?and bring back the item type for additional validation.
//?03/16/05 OMS012A - Only allow items from one company.
//?03/16/05 OMS012A - Bring back the item type
// RCD.Cst TF Exempt Cde Usr = WRK.BLANK
RCD.Cst_TF_Exempt_Cde_Usr = WRK.BLANK;

// RCD.Itm TF Exempt Cde Usr = WRK.BLANK
RCD.Itm_TF_Exempt_Cde_Usr = WRK.BLANK;

// RCD.Ord TF Exempt Cde Usr = WRK.BLANK
RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

// RCD.Clm Item TF Exempt Code = WRK.BLANK
RCD.Clm_Item_TF_Exempt_Code = WRK.BLANK;

//?F4 = Prompt for Company/Item.
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Claim Company Number
AND ( PGM.*Cursor_field = RCD.Claim_Company_Number;

// OR PGM.*Cursor field <IS> RCD.Claim Item Code
OR PGM.*Cursor_field = RCD.Claim_Item_Code );

// RCD.Claim Company Number = PAR.Claim Company Number
RCD.Claim_Company_Number = PAR.Claim_Company_Number;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Claim_Item_Code);

ENDIF;

//?Load Default Value for Single Company Users.
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// RCD.Claim Company Number = PAR.Company Number
RCD.Claim_Company_Number = PAR.Company_Number;

ENDIF;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(VAL Ext Co/Ord/Item ShpRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1727916;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Ord_TF_Exempt_Cde_Usr);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Was not on the Orginial Order get ship to customer and
//?the TF will be set to the value of blanks.
EXECUTE FUNCTION(RTV Ship Cust,Bill Tp RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1700188;
PARAMETER(WRK.Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Ord TF Exempt Cde Usr = WRK.BLANK
RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

ENDIF;

CASE;

// IF CTL.Claim Ship to Customer EQ LCL.Ship To Customer
IF CTL.Claim_Ship_to_Customer = LCL.Ship_To_Customer;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Ord &2 ShpTo &3 Shipto does not equal &1'
ERROR(USR3463);
MSGPARM(CTL.Claim_Ship_to_Customer);
MSGPARM(RCD.Claim_Order_Number);
MSGPARM(LCL.Ship_To_Customer);

ENDIF;

// Call program Rtv Cust Tf Exempt    XF.
CALL PROGRAM(Rtv Cust Tf Exempt    XF) ('PPSMXFR');
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Cst_TF_Exempt_Cde_Usr);

//?Company & Item are required.
CASE;

// IF RCD.Claim Company Number is Equal to zero
IF RCD.Claim_Company_Number = *ZERO;

// OR RCD.Claim Item Code is Not Entered
OR RCD.Claim_Item_Code = *ZERO;

// Send error message - 'Company and Item are required.'
ERROR(USR2765);
MSGPARM(RCD.Claim_Company_Number);
MSGPARM(RCD.Claim_Item_Code);

//?Company & Item are required.
// IF *OTHERWISE
IF *OTHERWISE;

//?check file
DO;

//?03/11/05 Add the validation of Valid Item type and item type from
//?the Company Item file.
//?The org Check file was * out and a new one created
//?Company & Item must exists in the Company/Item file.
//?and bring back the item type for additional validation.
EXECUTE FUNCTION(Rtv Item Type/TF Exemp RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1750320;
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Itm_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(RCD.Claim_Company_Number);
MSGPARM(RCD.Claim_Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Item Type Code is Equal Blanks
IF RCD.Item_Type_Code = *BLANK;

// RCD.Item Type Code = LCL.Item Type Code
RCD.Item_Type_Code = LCL.Item_Type_Code;

ENDIF;

CASE;

// IF LCL.Item Type Code is Work in Process
IF LCL.Item_Type_Code = 'WP';

// Send error message - 'Invalid: Item &1 is Item Type Work In Process.'
ERROR(USR3050);
MSGPARM(RCD.Claim_Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

//?Determine if Item is on the Order, if not give warning.
DO;

EXECUTE FUNCTION(VAL Exist co/ord/item  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1527879;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(RCD.Claim_Item_Code);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Load Sequence Numbers, If not already loaded.
DO;

CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// AND RCD.Order Secondary Line Seq is ZERO
AND RCD.Order_Secondary_Line_Seq = *ZERO;

// RCD.Order Sequence Number = PAR.Order Sequence Number
RCD.Order_Sequence_Number = PAR.Order_Sequence_Number;

// RCD.Order Secondary Line Seq = PAR.Order Secondary Line Seq
RCD.Order_Secondary_Line_Seq = PAR.Order_Secondary_Line_Seq;

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Zero Sequence Numbers.
DO;

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.*ZERO
RCD.Order_Secondary_Line_Seq = *ZERO;

ENDDO;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?E4057 JJH 04/09/15 - Revised Department / Reason Code procesing
//?Validate Department and Reason code
DO;

//?Reason & department must be found in the A/R Claim Reason
EXECUTE FUNCTION(Vry A/R Claim Dept/Rsn RT) TYPE(RTVOBJ) FILE(PPAUREP)          AC1741232;
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(LCL.Valid_Item_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // IF DB1.Record Status is Inactive
 IF DB1.Record_Status = 'I';

 // PGM.*Return code = CND.*Record is inactive
 PGM.*Return_code = 'USR4855';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Claim Reason not found.'
ERROR(USR3423);

//?E4057 JJH 10/13/15 - Do not allow Inactive Department/Reason
// IF PGM.*Return code is *Record is inactive
IF PGM.*Return_code = 'USR4855';

// Send error message - 'A/R Claim Department and Reason is Inactive.'
ERROR(USR4856);
MSGPARM(RCD.Claim_Department_Code_USR);
MSGPARM(RCD.Reason_Code_Usr);

ENDIF;

ENDDO;

//?E4057 JJH 04/09/15 - Revised Department / Reason Code procesing
//?03/11/04 SLM OMS012A
//?Remove the reason department validation and add the
//?A/R Claim Department
//?Validate unit of measure.
DO;

//?Company & Item are required.
CASE;

// IF RCD.Claim Company Number is Equal to zero
IF RCD.Claim_Company_Number = *ZERO;

// OR RCD.Claim Item Code is Not Entered
OR RCD.Claim_Item_Code = *ZERO;

//?Company & Item are required.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Prc Unit of Meas   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1575254;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(RCD.UOM_Primary_Dft);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E4057 JJH 05/27/15 - Add GL (Gallons) as valid U/M
CASE;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

// OR RCD.U/M - Primary Dft is Pounds
OR RCD.UOM_Primary_Dft = 'LB';

// OR RCD.U/M - Primary Dft is Each
OR RCD.UOM_Primary_Dft = 'EA';

// OR RCD.U/M - Primary Dft is Cases
OR RCD.UOM_Primary_Dft = 'CS';

// OR RCD.U/M - Primary Dft is Carcass Hundred Weight
OR RCD.UOM_Primary_Dft = 'CW';

// OR RCD.U/M - Primary Dft is Tons
OR RCD.UOM_Primary_Dft = 'TN';

// OR RCD.U/M - Primary Dft is Pieces
OR RCD.UOM_Primary_Dft = 'PC';

// OR RCD.U/M - Primary Dft is Gallon
OR RCD.UOM_Primary_Dft = 'GL';

//?added pieces
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim unit of measure is invalid.'
ERROR(USR2897);
MSGPARM(RCD.UOM_Primary_Dft);

ENDIF;

ENDIF;

ENDDO;

CASE;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

// RCD.Claim Item Weight = CON.*ZERO
RCD.Claim_Item_Weight = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Validate quantity & weight.
DO;

//?Quantity is Negative --> Weight must be Negative.
CASE;

// IF RCD.Claim Item Quantity is Less than zero
IF RCD.Claim_Item_Quantity < *ZERO;

// AND RCD.Claim Item Weight is Greater than zero
AND RCD.Claim_Item_Weight > *ZERO;

// RCD.Claim Item Weight = RCD.Claim Item Weight * CON.-1 *
RCD.Claim_Item_Weight = RCD.Claim_Item_Weight * -1;

ENDIF;

//?Calculate Average Weight.
CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF RCD.Claim_Item_Weight = *ZERO;

// AND RCD.Claim Item Quantity is not equal zero
AND RCD.Claim_Item_Quantity <> *ZERO;

CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// OR RCD.Order Secondary Line Seq is ZERO
OR RCD.Order_Secondary_Line_Seq = *ZERO;

//?Calculate the average weight for "non-order" item.
DO;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(PAR.Average_Weight_USR);
PARAMETER(WRK.Unused_Parm_CD9_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Claim Item Weight = RCD.Claim Item Quantity * PAR.Average Weight USR *Rounde
RCD.Claim_Item_Weight = RCD.Claim_Item_Quantity * PAR.Average_Weight_USR 'H';

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Calculate the average weight for "order" item.
DO;

//?*** Get shipped weight and quantity from order detail. ***
EXECUTE FUNCTION(RTV Qty/Weight Shipped RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1479553;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Quantity_Shipped_Total);
PARAMETER(PAR.Weight_Shipped_Total);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// AND PAR.Quantity Shipped Total is not equal zero
AND PAR.Quantity_Shipped_Total <> *ZERO;

// AND PAR.Weight Shipped Total is Not equal zero
AND PAR.Weight_Shipped_Total <> *ZERO;

//?*** Calculate the average weight of each item on order detail. ***
// PAR.Average Weight USR = PAR.Weight Shipped Total / PAR.Quantity Shipped Total *
PAR.Average_Weight_USR = PAR.Weight_Shipped_Total / PAR.Quantity_Shipped_Total 'H';

//?*** Calculate the total weight for item on claim. ***
// RCD.Claim Item Weight = RCD.Claim Item Quantity * PAR.Average Weight USR *Rounde
RCD.Claim_Item_Weight = RCD.Claim_Item_Quantity * PAR.Average_Weight_USR 'H';

CASE;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

//?Validate required fields.
DO;

CASE;

// IF RCD.U/M - Primary Dft is Pounds
IF RCD.UOM_Primary_Dft = 'LB';

//?Pounds required fields.
DO;

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF ( RCD.Claim_Item_Weight = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Weight and Price) or (Total Amount) must be entered.'
ERROR(USR2779);
MSGPARM(RCD.Claim_Item_Weight);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

//?Head Set required fields.
DO;

CASE;

// IF RCD.Claim Item Quantity is Equal to zero
IF ( RCD.Claim_Item_Quantity = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Quantity and Price) or (Total Amount) must be entered.'
ERROR(USR2899);
MSGPARM(RCD.Claim_Item_Quantity);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?All other unit of measure required fields.
DO;

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF ( RCD.Claim_Item_Weight = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Weight and Price) or (Total Amount) must be entered.'
ERROR(USR2779);
MSGPARM(RCD.Claim_Item_Weight);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?031604 slm OMS012 -- Item Type is EX, Order number is optional
CASE;

// IF RCD.Item Type Code is Finished Good
IF RCD.Item_Type_Code = 'FG';

CASE;

// IF RCD.Claim Order Number is Equal to zeros
IF RCD.Claim_Order_Number = *ZERO;

// Send error message - 'Order Number must be entered.'
ERROR(USR1936);
MSGPARM(RCD.Claim_Order_Number);

ENDIF;

//?031604 slm OMS012 -- Item Type is EX, Order number is optional
// IF RCD.Item Type Code is Expense
IF RCD.Item_Type_Code = 'EX';

//?031604 slm OMS012 -- Item Type is EX, Order number is optional
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Move TF Exempt Code and Validate TF Exempt Code
DO;

CASE;

// IF LCL.ORG TF Exempt Cde Usr is Pre Commencement
IF LCL.ORG_TF_Exempt_Cde_Usr = 'PC';

//?If the TF from the ORG ORDER IS A PC then all records will be a pc
// RCD.Ord TF Exempt Cde Usr = LCL.ORG TF Exempt Cde Usr
RCD.Ord_TF_Exempt_Cde_Usr = LCL.ORG_TF_Exempt_Cde_Usr;

// IF RCD.Ord TF Exempt Cde Usr EQ WRK.BLANK
IF RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

//?If the TF from the Order is blank then get the TF from the Item
//?If THE ITEM IS an EP
CASE;

// IF RCD.Itm TF Exempt Cde Usr is Exempt Product
IF RCD.Itm_TF_Exempt_Cde_Usr = 'EP';

// RCD.Ord TF Exempt Cde Usr = RCD.Itm TF Exempt Cde Usr
RCD.Ord_TF_Exempt_Cde_Usr = RCD.Itm_TF_Exempt_Cde_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Order TF-Exempt   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1750566;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Ord_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

//?Move the TF from the Order, then if Order not found then move from
//?the item code.
//?Move the values to the claim product TF EXEMPT
CASE;

// IF RCD.Ord TF Exempt Cde Usr NE WRK.BLANK
IF RCD.Ord_TF_Exempt_Cde_Usr <> WRK.BLANK;

// RCD.Clm Item TF Exempt Code = RCD.Ord TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Ord_TF_Exempt_Cde_Usr;

//?Move the values to the claim product TF EXEMPT
// IF RCD.Cst TF Exempt Cde Usr is Exempt Customer
IF RCD.Cst_TF_Exempt_Cde_Usr = 'EC';

CASE;

// IF RCD.Itm TF Exempt Cde Usr is Exempt Product
IF RCD.Itm_TF_Exempt_Cde_Usr = 'EP';

// RCD.Clm Item TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Clm Item TF Exempt Code = RCD.Cst TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Cst_TF_Exempt_Cde_Usr;

ENDIF;

//?Move the values to the claim product TF EXEMPT
// IF RCD.Cst TF Exempt Cde Usr is Not Exempt
IF RCD.Cst_TF_Exempt_Cde_Usr = 'NE';

// RCD.Clm Item TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

ENDIF;

//?Validate the TF Exempt
CASE;

// IF RCD.Clm Item TF Exempt Code EQ WRK.BLANK
IF RCD.Clm_Item_TF_Exempt_Code = WRK.BLANK;

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3585);
MSGPARM(RCD.Clm_Item_TF_Exempt_Code);

//?If the claim TF Exempt is blank, then this is a required field.
//?The IS group would have to review this data to know what has
//?happened.
ENDIF;

ENDDO;

ENDDO;

//?OVERRIDE: Claim Responsibility
CASE;

// IF RCD.Clm Item TF Exempt Code is Exempt Customer
IF RCD.Clm_Item_TF_Exempt_Code = 'EC';

// OR RCD.Clm Item TF Exempt Code is Exempt Product
OR RCD.Clm_Item_TF_Exempt_Code = 'EP';

// OR RCD.Clm Item TF Exempt Code is Pre Commencement
OR RCD.Clm_Item_TF_Exempt_Code = 'PC';

// OR PAR.Accounting Company is Seaboard Triumph Foods
OR PAR.Accounting_Company = 440;

//?RMC 11/11/2021 Missed this change below:  its in the CRTOBJ  -->
//?RMC            : Change to check ACCTNG CO = STF 11/16/18 S13578
// RCD.Claim Responsibility = CND.Company
RCD.Claim_Responsibility = 'C';

//?OVERRIDE: Claim Responsibility
// IF *OTHERWISE
IF *OTHERWISE;

//?Affect Sales Pounds = Y
CASE;

// IF RCD.Affect Sales Pnds Status is yes
IF RCD.Affect_Sales_Pnds_Status = 'Y';

// RCD.Claim Responsibility = CND.Company
RCD.Claim_Responsibility = 'C';

ENDIF;

//?TFS037:  If the Item is Co-Owned, the responsibility is always
//?         Shared.
//?Item Co-Ownership = S or T
CASE;

// IF RCD.TF Co-Ownership Sts is Co-Owned
IF RCD.TF_Co_Ownership_Sts = 'S'/'T';

// RCD.Claim Responsibility = CND.Shared
RCD.Claim_Responsibility = 'S';

ENDIF;

ENDIF;

//?Set Cursor to Claim Department Code USR
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

SET CURSOR;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Claim Company Number = PAR.Claim Company Number
RCD.Claim_Company_Number = PAR.Claim_Company_Number;

// RCD.Claim Order Number = CON.*ZERO
RCD.Claim_Order_Number = *ZERO;

// RCD.Load ID = CON.*ZERO
RCD.Load_ID = *ZERO;

// PAR.Claim Item Line Number = PAR.Claim Item Line Number + CON.1
PAR.Claim_Item_Line_Number = PAR.Claim_Item_Line_Number + 1;

// RCD.Claim Item Line Number = PAR.Claim Item Line Number
RCD.Claim_Item_Line_Number = PAR.Claim_Item_Line_Number;

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.*ZERO
RCD.Order_Secondary_Line_Seq = *ZERO;

// RCD.Reason Code Usr = CON.*BLANK
RCD.Reason_Code_Usr = *BLANK;

//?E4057 JJH 04/09/15 - Revised Claim Department Code procesing
// RCD.Claim Department Code USR = CON.*BLANK
RCD.Claim_Department_Code_USR = *BLANK;

// RCD.Reason Code = CON.*BLANK
RCD.Reason_Code = *BLANK;

// RCD.Claim Department Code = CON.*BLANK
RCD.Claim_Department_Code = *BLANK;

// RCD.Reason Code Usr = CON.*BLANK
RCD.Reason_Code_Usr = *BLANK;

//?slm 8/22/2006
//?This should not be of any value so * out the user
//?has not entered any values for the pull down
//?CALC: Subfile control function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(PAR.Claim_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?E3387 JJH 09/10/14 - Display Shipping Method
EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Validate subfile control

// PAR.Change Modes          USR = CND.No
PAR.Change_Modes_USR = 'N';

//?USER: Validate subfile record fields

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

// OR RCD.*SFLSEL is *Delete#2
OR RCD.*SFLSEL = '4';

// IF *OTHERWISE
IF *OTHERWISE;

//?IF not F10, THEN continue validations.
DO;

//?Validate company & item.  Pull down TF from the Order, and Ship to
DO;

//?03/11/05 Add the validation of Valid Item type and item type from
//?the Company Item file.
//?The org Check file was * out and a new one created
//?Company & Item must exists in the Company/Item file.
//?and bring back the item type for additional validation.
//?03/16/05 OMS012A - Only allow items from one company.
//?03/16/05 OMS012A - Bring back the item type
// RCD.Cst TF Exempt Cde Usr = WRK.BLANK
RCD.Cst_TF_Exempt_Cde_Usr = WRK.BLANK;

// RCD.Itm TF Exempt Cde Usr = WRK.BLANK
RCD.Itm_TF_Exempt_Cde_Usr = WRK.BLANK;

// RCD.Ord TF Exempt Cde Usr = WRK.BLANK
RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

// RCD.Clm Item TF Exempt Code = WRK.BLANK
RCD.Clm_Item_TF_Exempt_Code = WRK.BLANK;

//?F4 = Prompt for Company/Item.
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Claim Company Number
AND ( PGM.*Cursor_field = RCD.Claim_Company_Number;

// OR PGM.*Cursor field <IS> RCD.Claim Item Code
OR PGM.*Cursor_field = RCD.Claim_Item_Code );

// RCD.Claim Company Number = PAR.Claim Company Number
RCD.Claim_Company_Number = PAR.Claim_Company_Number;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Claim_Item_Code);

ENDIF;

//?Load Default Value for Single Company Users.
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// RCD.Claim Company Number = PAR.Company Number
RCD.Claim_Company_Number = PAR.Company_Number;

ENDIF;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(VAL Ext Co/Ord/Item ShpRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1727916;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Ord_TF_Exempt_Cde_Usr);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Was not on the Orginial Order get ship to customer and
//?the TF will be set to the value of blanks.
EXECUTE FUNCTION(RTV Ship Cust,Bill Tp RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1700188;
PARAMETER(WRK.Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Ord TF Exempt Cde Usr = WRK.BLANK
RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

ENDIF;

CASE;

// IF CTL.Claim Ship to Customer EQ LCL.Ship To Customer
IF CTL.Claim_Ship_to_Customer = LCL.Ship_To_Customer;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Ord &2 ShpTo &3 Shipto does not equal &1'
ERROR(USR3463);
MSGPARM(CTL.Claim_Ship_to_Customer);
MSGPARM(RCD.Claim_Order_Number);
MSGPARM(LCL.Ship_To_Customer);

ENDIF;

EXECUTE FUNCTION(Vry TFExmp - Customer) TYPE(RTVOBJ) FILE(PDNEREP)              AC1748135;
PARAMETER(CTL.Claim_Ship_to_Customer);
PARAMETER(RCD.Cst_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company & Item are required.
CASE;

// IF RCD.Claim Company Number is Equal to zero
IF RCD.Claim_Company_Number = *ZERO;

// OR RCD.Claim Item Code is Not Entered
OR RCD.Claim_Item_Code = *ZERO;

// Send error message - 'Company and Item are required.'
ERROR(USR2765);
MSGPARM(RCD.Claim_Company_Number);
MSGPARM(RCD.Claim_Item_Code);

//?Company & Item are required.
// IF *OTHERWISE
IF *OTHERWISE;

//?check file
DO;

//?03/11/05 Add the validation of Valid Item type and item type from
//?the Company Item file.
//?The org Check file was * out and a new one created
//?Company & Item must exists in the Company/Item file.
//?and bring back the item type for additional validation.
EXECUTE FUNCTION(Rtv Item Type/TF Exemp RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1750320;
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Itm_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(RCD.Claim_Company_Number);
MSGPARM(RCD.Claim_Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Item Type Code is Equal Blanks
IF RCD.Item_Type_Code = *BLANK;

// RCD.Item Type Code = LCL.Item Type Code
RCD.Item_Type_Code = LCL.Item_Type_Code;

ENDIF;

CASE;

// IF LCL.Item Type Code is Work in Process
IF LCL.Item_Type_Code = 'WP';

// Send error message - 'Invalid: Item &1 is Item Type Work In Process.'
ERROR(USR3050);
MSGPARM(RCD.Claim_Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

//?Determine if Item is on the Order, if not give warning.
DO;

EXECUTE FUNCTION(VAL Exist co/ord/item  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1527879;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Claim_Item_Code);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Zero Sequence Numbers.
DO;

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.*ZERO
RCD.Order_Secondary_Line_Seq = *ZERO;

ENDDO;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?E4057 JJH 04/09/15 - Revised Reason Code procesing
//?Validate reason code
DO;

//?Reason & department must be found in the A/R Claim Reason
EXECUTE FUNCTION(Rtv A/R Claim Rsn Aff RT) TYPE(RTVOBJ) FILE(PPAUREP)           AC1740690;
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(NLL.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(NLL.Affect_Trade_Fund);
PARAMETER(NLL.Affect_Commission);
PARAMETER(NLL.Affect_Pricing);
PARAMETER(NLL.Valid_Item_Type);
PARAMETER(RCD.CP_Require_CM_Approval);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.Claim Department Code = RCD.Claim Department Code USR
RCD.Claim_Department_Code = RCD.Claim_Department_Code_USR;

// RCD.Reason Code = RCD.Reason Code Usr
RCD.Reason_Code = RCD.Reason_Code_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'AR Claim Reason not found.'
ERROR(USR3423);

ENDIF;

ENDDO;

//?E4057 JJH 04/09/15 - Revised Department & Reason Code procesing
//?E4057 Move this logic after it sets the Department and Reason Codes
//?03/11/04 SLM OMS012A
//?Remove the reason department validation and add the
//?A/R Claim Department
//?08/02/04 SLM OMS012A  Add Cases to Unit of Measure for claims
//?                 Allow this to flow through
//?Validate unit of measure.
DO;

//?Company & Item are required.
CASE;

// IF RCD.Claim Company Number is Equal to zero
IF RCD.Claim_Company_Number = *ZERO;

// OR RCD.Claim Item Code is Not Entered
OR RCD.Claim_Item_Code = *ZERO;

//?Company & Item are required.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Prc Unit of Meas   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1575254;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(RCD.UOM_Primary_Dft);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E4057 JJH 05/28/15 - Add GL (Gallon) as valid UOM.
CASE;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

// OR RCD.U/M - Primary Dft is Pounds
OR RCD.UOM_Primary_Dft = 'LB';

// OR RCD.U/M - Primary Dft is Cases
OR RCD.UOM_Primary_Dft = 'CS';

// OR RCD.U/M - Primary Dft is Each
OR RCD.UOM_Primary_Dft = 'EA';

// OR RCD.U/M - Primary Dft is Carcass Hundred Weight
OR RCD.UOM_Primary_Dft = 'CW';

// OR RCD.U/M - Primary Dft is Tons
OR RCD.UOM_Primary_Dft = 'TN';

// OR RCD.U/M - Primary Dft is Pieces
OR RCD.UOM_Primary_Dft = 'PC';

// OR RCD.U/M - Primary Dft is Gallon
OR RCD.UOM_Primary_Dft = 'GL';

//?added pieces
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim unit of measure is invalid.'
ERROR(USR2897);
MSGPARM(RCD.UOM_Primary_Dft);

ENDIF;

ENDIF;

ENDDO;

//?10/11/07 SLM Cases was zero out weight * this out
//?Validate quantity & weight.  ALL Uoms now - 3/26/15
DO;

//?Quantity is Negative --> Weight must be Negative.
CASE;

// IF RCD.Claim Item Quantity is Less than zero
IF RCD.Claim_Item_Quantity < *ZERO;

// AND RCD.Claim Item Weight is Greater than zero
AND RCD.Claim_Item_Weight > *ZERO;

// RCD.Claim Item Weight = RCD.Claim Item Weight * CON.-1 *
RCD.Claim_Item_Weight = RCD.Claim_Item_Weight * -1;

ENDIF;

//?Calculate Average Weight.
CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF RCD.Claim_Item_Weight = *ZERO;

// AND RCD.Claim Item Quantity is not equal zero
AND RCD.Claim_Item_Quantity <> *ZERO;

CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// OR RCD.Order Secondary Line Seq is ZERO
OR RCD.Order_Secondary_Line_Seq = *ZERO;

//?Calculate the average weight for "non-order" item.
DO;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(PAR.Average_Weight_USR);
PARAMETER(WRK.Unused_Parm_CD9_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Claim Item Weight = RCD.Claim Item Quantity * PAR.Average Weight USR *Rounde
RCD.Claim_Item_Weight = RCD.Claim_Item_Quantity * PAR.Average_Weight_USR 'H';

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Calculate the average weight for "order" item.
DO;

//?*** Get shipped weight and quantity from order detail. ***
EXECUTE FUNCTION(RTV Qty/Weight Shipped RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1479553;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Quantity_Shipped_Total);
PARAMETER(PAR.Weight_Shipped_Total);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// AND PAR.Quantity Shipped Total is not equal zero
AND PAR.Quantity_Shipped_Total <> *ZERO;

// AND PAR.Weight Shipped Total is Not equal zero
AND PAR.Weight_Shipped_Total <> *ZERO;

//?*** Calculate the average weight of each item on order detail. ***
// PAR.Average Weight USR = PAR.Weight Shipped Total / PAR.Quantity Shipped Total *
PAR.Average_Weight_USR = PAR.Weight_Shipped_Total / PAR.Quantity_Shipped_Total 'H';

//?*** Calculate the total weight for item on claim. ***
// RCD.Claim Item Weight = RCD.Claim Item Quantity * PAR.Average Weight USR *Rounde
RCD.Claim_Item_Weight = RCD.Claim_Item_Quantity * PAR.Average_Weight_USR 'H';

CASE;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

//?Validate required fields.
DO;

CASE;

// IF RCD.U/M - Primary Dft is Pounds
IF RCD.UOM_Primary_Dft = 'LB';

//?Pounds required fields.
DO;

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF ( RCD.Claim_Item_Weight = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Weight and Price) or (Total Amount) must be entered.'
ERROR(USR2779);
MSGPARM(RCD.Claim_Item_Weight);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

//?Head Set required fields.
DO;

CASE;

// IF RCD.Claim Item Quantity is Equal to zero
IF ( RCD.Claim_Item_Quantity = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Quantity and Price) or (Total Amount) must be entered.'
ERROR(USR2899);
MSGPARM(RCD.Claim_Item_Quantity);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

// IF RCD.U/M - Primary Dft is Cases
IF RCD.UOM_Primary_Dft = 'CS';

//?Cases required fields.
DO;

CASE;

// IF RCD.Claim Item Quantity is Equal to zero
IF ( RCD.Claim_Item_Quantity = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Quantity and Price) or (Total Amount) must be entered.'
ERROR(USR2899);
MSGPARM(RCD.Claim_Item_Quantity);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

// IF RCD.U/M - Primary Dft is Each
IF RCD.UOM_Primary_Dft = 'EA';

//?Each required fields.
DO;

CASE;

// IF RCD.Claim Item Quantity is Equal to zero
IF ( RCD.Claim_Item_Quantity = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Quantity and Price) or (Total Amount) must be entered.'
ERROR(USR2899);
MSGPARM(RCD.Claim_Item_Quantity);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?All other unit of measure required fields.
DO;

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF ( RCD.Claim_Item_Weight = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO );

// AND RCD.Claim Item Amount is equal to zero
AND RCD.Claim_Item_Amount = *ZERO;

// Send error message - '(Weight and Price) or (Total Amount) must be entered.'
ERROR(USR2779);
MSGPARM(RCD.Claim_Item_Weight);
MSGPARM(RCD.Claim_Item_Unit_Price);
MSGPARM(RCD.Claim_Item_Amount);

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?9/12/2006 slm If Affect Sales Pounds is a Y, then Weight is required
CASE;

// IF RCD.Affect Sales Pnds Status is yes
IF RCD.Affect_Sales_Pnds_Status = 'Y';

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF RCD.Claim_Item_Weight = *ZERO;

// Send error message - 'Pounds is Required'
ERROR(USR2255);
MSGPARM(RCD.Claim_Item_Weight);

ENDIF;

ENDIF;

//?E4057 JJH 04/09/15 - Revised Reason Code procesing
//?Validate Department and Reason code
DO;

//?Reason & department must be found in the A/R Claim Reason
EXECUTE FUNCTION(Vry A/R Claim Dept/Rsn RT) TYPE(RTVOBJ) FILE(PPAUREP)          AC1741232;
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(LCL.Valid_Item_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // IF DB1.Record Status is Inactive
 IF DB1.Record_Status = 'I';

 // PGM.*Return code = CND.*Record is inactive
 PGM.*Return_code = 'USR4855';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Claim Reason not found.'
ERROR(USR3423);

//?E4057 JJH 10/13/15 - Do not allow Inactive Department/Reason
// IF PGM.*Return code is *Record is inactive
IF PGM.*Return_code = 'USR4855';

// Send error message - 'A/R Claim Department and Reason is Inactive.'
ERROR(USR4856);
MSGPARM(RCD.Claim_Department_Code_USR);
MSGPARM(RCD.Reason_Code_Usr);

ENDIF;

ENDDO;

//?If DP or PS Reason is used, set a flag and save it.  10/6/04
CASE;

// IF RCD.Reason Code Usr is Deviated Pricing Adj
IF RCD.Reason_Code_Usr = 'DP';

// OR RCD.Reason Code Usr is Profit Sharing Adj
OR RCD.Reason_Code_Usr = 'PS';

CASE;

// IF WRK.Status Flag 1  Y/N is No
IF WRK.Status_Flag_1_Y_N = 'N';

// WRK.Reason Code = RCD.Reason Code Usr
WRK.Reason_Code = RCD.Reason_Code_Usr;

// WRK.Status Flag 1  Y/N = CND.Yes
WRK.Status_Flag_1_Y_N = 'Y';

ENDIF;

ENDIF;

//?If a DP/PS exists, all reasons must match it.     10/6/04
CASE;

// IF WRK.Status Flag 1  Y/N is Yes
IF WRK.Status_Flag_1_Y_N = 'Y';

// AND RCD.Reason Code Usr NE WRK.Reason Code
AND RCD.Reason_Code_Usr <> WRK.Reason_Code;

// Send error message - 'Reason Codes must all be &1 on this claim.'
ERROR(USR3391);
MSGPARM(WRK.Reason_Code);

ENDIF;

//?031604 slm OMS012 -- Item Type is EX, Order number is optional
CASE;

// IF RCD.Item Type Code is Finished Good
IF RCD.Item_Type_Code = 'FG';

CASE;

// IF RCD.Claim Order Number is Equal to zeros
IF RCD.Claim_Order_Number = *ZERO;

// Send error message - 'Order Number must be entered.'
ERROR(USR1936);
MSGPARM(RCD.Claim_Order_Number);

ENDIF;

//?031604 slm OMS012 -- Item Type is EX, Order number is optional
// IF RCD.Item Type Code is Expense
IF RCD.Item_Type_Code = 'EX';

//?031604 slm OMS012 -- Item Type is EX, Order number is optional
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Move TF Exempt Code and Validate TF Exempt Code
DO;

CASE;

// IF LCL.ORG TF Exempt Cde Usr is Pre Commencement
IF LCL.ORG_TF_Exempt_Cde_Usr = 'PC';

//?If the TF from the ORG ORDER IS A PC then all records will be a pc
// RCD.Ord TF Exempt Cde Usr = LCL.ORG TF Exempt Cde Usr
RCD.Ord_TF_Exempt_Cde_Usr = LCL.ORG_TF_Exempt_Cde_Usr;

// IF RCD.Ord TF Exempt Cde Usr EQ WRK.BLANK
IF RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

// AND RCD.Itm TF Exempt Cde Usr is Exempt Product
AND RCD.Itm_TF_Exempt_Cde_Usr = 'EP';

//?If the TF from the Order is blank then get the TF from the Item
// RCD.Ord TF Exempt Cde Usr = RCD.Itm TF Exempt Cde Usr
RCD.Ord_TF_Exempt_Cde_Usr = RCD.Itm_TF_Exempt_Cde_Usr;

// IF RCD.Ord TF Exempt Cde Usr EQ WRK.BLANK
IF RCD.Ord_TF_Exempt_Cde_Usr = WRK.BLANK;

//?If the TF from the Order is blank then get the TF from Order On Item
EXECUTE FUNCTION(Rtv Order TF-Exempt   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1750566;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Ord_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Move the TF from the Order, then if Order not found then move from
//?the item code.
//?Move the values to the claim product TF EXEMPT
CASE;

// IF RCD.Ord TF Exempt Cde Usr NE WRK.BLANK
IF RCD.Ord_TF_Exempt_Cde_Usr <> WRK.BLANK;

// RCD.Clm Item TF Exempt Code = RCD.Ord TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Ord_TF_Exempt_Cde_Usr;

//?Move the values to the claim product TF EXEMPT
// IF RCD.Cst TF Exempt Cde Usr is Exempt Customer
IF RCD.Cst_TF_Exempt_Cde_Usr = 'EC';

//?Ord TF is blank and now check the customer, if exempt
CASE;

// IF RCD.Itm TF Exempt Cde Usr is Exempt Product
IF RCD.Itm_TF_Exempt_Cde_Usr = 'EP';

//?Check the Item
// RCD.Clm Item TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Clm Item TF Exempt Code = RCD.Cst TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Cst_TF_Exempt_Cde_Usr;

ENDIF;

//?Move the values to the claim product TF EXEMPT
// IF RCD.Cst TF Exempt Cde Usr is Not Exempt
IF RCD.Cst_TF_Exempt_Cde_Usr = 'NE';

//?Ord TF is blank and now check the customer, if not exempt
// RCD.Clm Item TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Item_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

ENDIF;

//?Validate the TF Exempt
CASE;

// IF RCD.Clm Item TF Exempt Code EQ WRK.BLANK
IF RCD.Clm_Item_TF_Exempt_Code = WRK.BLANK;

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3585);
MSGPARM(RCD.Clm_Item_TF_Exempt_Code);

//?If the claim TF Exempt is blank, then this is a required field.
//?The IS group would have to review this data to know what has
//?happened.
ENDIF;

ENDDO;

//?************
//?RMC 01/08/07  Moved here from the Init New REcord spot
//?slm 112806 - PK0040 Add the validation for Accounting company
EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

 ENDIF;

}


//?Val Accounting Co must match between orders
CASE;

// IF LCL.Accounting Company NE PAR.Accounting Company
IF LCL.Accounting_Company <> PAR.Accounting_Company;

//?Issue message that this rcd Accounting Company does not match
//?the order accounting company.
// Send error message - 'Order &2 Acctng Co &1 not the same Order &4 Acctng Co &3'
ERROR(USR3665);
MSGPARM(RCD.Claim_Order_Number);
MSGPARM(RCD.Claim_Company_Number);
MSGPARM(PAR.Accounting_Company);
MSGPARM(PAR.Claim_Order_Number);

ENDIF;

//?************
ENDDO;

ENDIF;

//?CALC: Subfile record function fields

//?SELRCD for Claim Order Number
CASE;

// IF PGM.*Cursor field <IS> RCD.Claim Order Number
IF PGM.*Cursor_field = RCD.Claim_Order_Number;

// AND CTL.*CMD key is CF04
AND CTL.*CMD_key = '04';

// Call program SEL Order/Load Id/Invo SR.
CALL PROGRAM(SEL Order/Load Id/Invo SR) ('PBBHSRR');
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Shipping_Method);
PARAMETER(LCL.Invoice_Number);

ENDIF;

//?E4057 JJH 04/09/15 - New SELRCD for Claim Department and Reason
//?SELRCD for Claim Department and Reason
CASE;

// IF PGM.*Cursor field <IS> RCD.Claim Department Code USR
IF ( PGM.*Cursor_field = RCD.Claim_Department_Code_USR;

// AND CTL.*CMD key is CF04
AND CTL.*CMD_key = '04' );

// OR PGM.*Cursor field <IS> RCD.Reason Code Usr
OR ( PGM.*Cursor_field = RCD.Reason_Code_Usr;

// AND CTL.*CMD key is CF04
AND CTL.*CMD_key = '04' );

// Call program Sel A/R Claim Dpt/Rsn  SR.
CALL PROGRAM(Sel A/R Claim Dpt/Rsn  SR) ('PBQVSRR');
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.CP_Require_CM_Approval);

// RCD.Claim Department Code = RCD.Claim Department Code USR
RCD.Claim_Department_Code = RCD.Claim_Department_Code_USR;

// RCD.Reason Code = RCD.Reason Code Usr
RCD.Reason_Code = RCD.Reason_Code_Usr;

ENDIF;

//?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
//?9/24/2007 slm placed in a wrapper on the extended amount
//?Calculate Extended Amount
DO;

CASE;

// IF RCD.Claim Item Weight is Equal to zero
IF RCD.Claim_Item_Weight = *ZERO;

// OR RCD.Claim Item Unit Price is Equal zero
OR RCD.Claim_Item_Unit_Price = *ZERO;

//?If Item Weight or Item price = zero then extend amount will
//?stays as the user entered the total amount.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Clc OrdDtl Ext Amt    XF.
CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
PARAMETER(RCD.Claim_Item_Amount);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Claim_Item_Quantity);
PARAMETER(RCD.Claim_Item_Weight);
PARAMETER(RCD.Claim_Item_Unit_Price);

ENDIF;

ENDDO;

//?USER: Validate subfile record relations

EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
PARAMETER(RCD.Claim_Department_Code);
PARAMETER(NLL.Claim_Department_Desc);
PARAMETER(RCD.Claim_Responsibility);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?OVERRIDE: Claim Responsibility
CASE;

// IF RCD.Clm Item TF Exempt Code is Exempt Customer
IF RCD.Clm_Item_TF_Exempt_Code = 'EC';

// OR RCD.Clm Item TF Exempt Code is Exempt Product
OR RCD.Clm_Item_TF_Exempt_Code = 'EP';

// OR RCD.Clm Item TF Exempt Code is Pre Commencement
OR RCD.Clm_Item_TF_Exempt_Code = 'PC';

// OR PAR.Accounting Company is Seaboard Triumph Foods
OR PAR.Accounting_Company = 440;

//?RMC 11/11/2021 Missed this change above to hchk accounting co for 440
// RCD.Claim Responsibility = CND.Company
RCD.Claim_Responsibility = 'C';

//?OVERRIDE: Claim Responsibility
// IF *OTHERWISE
IF *OTHERWISE;

//?Affect Sales Pounds = Y, the Company
CASE;

// IF RCD.Affect Sales Pnds Status is yes
IF RCD.Affect_Sales_Pnds_Status = 'Y';

// RCD.Claim Responsibility = CND.Company
RCD.Claim_Responsibility = 'C';

ENDIF;

//?TFS037:  If the Item is Co-Owned, the responsibility is always
//?         Shared.
//?Item Co-Ownership = S or T, then Shared
CASE;

// IF RCD.TF Co-Ownership Sts is Co-Owned
IF RCD.TF_Co_Ownership_Sts = 'S'/'T';

// RCD.Claim Responsibility = CND.Shared
RCD.Claim_Responsibility = 'S';

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT A/R Claim ProductSACR) TYPE(CRTOBJ) FILE(PDMOCPP)          AC1877156;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Item_Line_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Responsible_Department);
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Claim_Item_Quantity);
PARAMETER(RCD.Claim_Item_Weight);
PARAMETER(RCD.Claim_Item_Unit_Price);
PARAMETER(RCD.Claim_Item_Amount);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Inventory_Value);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Claim_Responsibility);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Memo_Number);
PARAMETER(RCD.Item_Type_Code);
PARAMETER(RCD.Claim_Product_Reason_Type);
PARAMETER(RCD.CP_Require_CM_Approval);
PARAMETER(RCD.Clm_Item_TF_Exempt_Code);
PARAMETER(RCD.CP_Unused_Sts_4);
PARAMETER(RCD.CP_Unused_Sts_5);
PARAMETER(RCD.CP_Unused_Sts_6);
PARAMETER(RCD.CP_Unused_Price_1);
PARAMETER(RCD.CP_Unused_Price_2);
PARAMETER(RCD.CP_Unused_Price_3);
PARAMETER(RCD.CP_Unused_Price_4);
PARAMETER(RCD.CP_Unused_Price_5);
PARAMETER(RCD.CP_Unused_Value_1);
PARAMETER(RCD.CP_Unused_Value_2);
PARAMETER(RCD.CP_Unused_Value_3);
PARAMETER(RCD.CP_Unused_Value_4);
PARAMETER(RCD.CP_Unused_Value_5);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(PAR.Accounting_Company);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
 PARAMETER(DB1.Claim_Department_Code);
 PARAMETER(NLL.Claim_Department_Desc);
 PARAMETER(DB1.Claim_Responsibility);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?OVERRIDE: Claim Responsibility
 CASE;

 // IF DB1.Clm Item TF Exempt Code is Exempt Customer
 IF DB1.Clm_Item_TF_Exempt_Code = 'EC';

 // OR DB1.Clm Item TF Exempt Code is Exempt Product
 OR DB1.Clm_Item_TF_Exempt_Code = 'EP';

 // OR DB1.Clm Item TF Exempt Code is Pre Commencement
 OR DB1.Clm_Item_TF_Exempt_Code = 'PC';

 // OR PAR.Accounting Company is Seaboard Triumph Foods
 OR PAR.Accounting_Company = 440;

 //?RMC Change to check ACCTNG CO = STF 11/16/18 S13578
 //?RMC Added STF 9/10/18 S13578
 // DB1.Claim Responsibility = CND.Company
 DB1.Claim_Responsibility = 'C';

 //?OVERRIDE: Claim Responsibility
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Affect Sales Pounds = Y
 CASE;

 // IF DB1.Affect Sales Pnds Status is yes
 IF DB1.Affect_Sales_Pnds_Status = 'Y';

 // DB1.Claim Responsibility = CND.Company
 DB1.Claim_Responsibility = 'C';

 ENDIF;

 //?TFS037:  If the Item is Co-Owned, the responsibility is always
 //?         Shared.
 //?Item Co-Ownership = S or T
 CASE;

 // IF PAR.Item Co-Ownership Sts is Co-Owned
 IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

 // DB1.Claim Responsibility = CND.Shared
 DB1.Claim_Responsibility = 'S';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Claim product was created
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Claim Product Created');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT A/R Claim ProductSADL) TYPE(DLTOBJ) FILE(PDMOCPP)          AC1877167;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Item_Line_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Claim product was deleted
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Claim Product was deleted');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG A/R Claim ProductSACH) TYPE(CHGOBJ) FILE(PDMOCPP)          AC1877186;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Item_Line_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Item_Code);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Responsible_Department);
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Claim_Item_Quantity);
PARAMETER(RCD.Claim_Item_Weight);
PARAMETER(RCD.Claim_Item_Unit_Price);
PARAMETER(RCD.Claim_Item_Amount);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Inventory_Value);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Claim_Responsibility);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Memo_Number);
PARAMETER(RCD.Item_Type_Code);
PARAMETER(RCD.Claim_Product_Reason_Type);
PARAMETER(RCD.CP_Require_CM_Approval);
PARAMETER(RCD.Clm_Item_TF_Exempt_Code);
PARAMETER(RCD.CP_Unused_Sts_4);
PARAMETER(RCD.CP_Unused_Sts_5);
PARAMETER(RCD.CP_Unused_Sts_6);
PARAMETER(RCD.CP_Unused_Price_1);
PARAMETER(RCD.CP_Unused_Price_2);
PARAMETER(RCD.CP_Unused_Price_3);
PARAMETER(RCD.CP_Unused_Price_4);
PARAMETER(RCD.CP_Unused_Price_5);
PARAMETER(RCD.CP_Unused_Value_1);
PARAMETER(RCD.CP_Unused_Value_2);
PARAMETER(RCD.CP_Unused_Value_3);
PARAMETER(RCD.CP_Unused_Value_4);
PARAMETER(RCD.CP_Unused_Value_5);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(PAR.Accounting_Company);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
 PARAMETER(DB1.Claim_Department_Code);
 PARAMETER(NLL.Claim_Department_Desc);
 PARAMETER(DB1.Claim_Responsibility);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?OVERRIDE: Claim Responsibility
 CASE;

 // IF DB1.Clm Item TF Exempt Code is Exempt Customer
 IF DB1.Clm_Item_TF_Exempt_Code = 'EC';

 // OR DB1.Clm Item TF Exempt Code is Exempt Product
 OR DB1.Clm_Item_TF_Exempt_Code = 'EP';

 // OR DB1.Clm Item TF Exempt Code is Pre Commencement
 OR DB1.Clm_Item_TF_Exempt_Code = 'PC';

 // OR PAR.Accounting Company is Seaboard Triumph Foods
 OR PAR.Accounting_Company = 440;

 //?RMC Change to check ACCTNG CO = STF 11/16/18 S13578
 //?RMC added stf 8/10/18
 // DB1.Claim Responsibility = CND.Company
 DB1.Claim_Responsibility = 'C';

 //?OVERRIDE: Claim Responsibility
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Affect Sales Pounds = Y, the Company
 CASE;

 // IF DB1.Affect Sales Pnds Status is yes
 IF DB1.Affect_Sales_Pnds_Status = 'Y';

 // DB1.Claim Responsibility = CND.Company
 DB1.Claim_Responsibility = 'C';

 ENDIF;

 //?TFS037:  If the Item is Co-Owned, the responsibility is always
 //?         Shared.
 //?Item Co-Ownership = S or T, then Shared
 CASE;

 // IF PAR.Item Co-Ownership Sts is Co-Owned
 IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

 // DB1.Claim Responsibility = CND.Shared
 DB1.Claim_Responsibility = 'S';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Claim product was changed
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Claim Product was changed');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


//?USER: Extra processing after DBF update

// PAR.Change Modes          USR = CND.Yes
PAR.Change_Modes_USR = 'Y';

// Call program EDT Calc Claim Amts    XF.
CALL PROGRAM(EDT Calc Claim Amts    XF) ('PPOCXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(PAR.Claim_Type);
PARAMETER(PAR.Claim_Amount);
PARAMETER(PAR.Claim_Net_Loss);

// CTL.Claim Amount = PAR.Claim Amount
CTL.Claim_Amount = PAR.Claim_Amount;

// RCD.Reason Code Usr = RCD.Reason Code
RCD.Reason_Code_Usr = RCD.Reason_Code;

//?E4057 JJH 04/09/15 - Revised Department Code procesing
// RCD.Claim Department Code USR = RCD.Claim Department Code
RCD.Claim_Department_Code_USR = RCD.Claim_Department_Code;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

//?F10=Select Items from Order.
DO;

//?CUSTOMER NOT FOUND BECAUSE OF NO SUB FILE RECORDS
CASE;

// IF LCL.Ship To Customer is equal to zero
IF LCL.Ship_To_Customer = *ZERO;

// LCL.Ship To Customer = PAR.Claim Ship to Customer
LCL.Ship_To_Customer = PAR.Claim_Ship_to_Customer;

ENDIF;

// Call program SEL Item for Order Clm DF.
CALL PROGRAM(SEL Item for Order Clm DF) ('PPLHDFR');
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(PAR.Claim_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(PAR.Claim_Number);
PARAMETER(CTL.Claim_Ship_to_Customer);
PARAMETER('P');
PARAMETER(PAR.Clm_Program_USR);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(PAR.Accounting_Company);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?F8=NEXT
CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

// PAR.Clm Program USR = CND.Edit Claim Comment
PAR.Clm_Program_USR = 'ECC';

RETURN;

ENDIF;

//?F7=BACK
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

// PAR.Clm Program USR = CND.Edit Claim
PAR.Clm_Program_USR = 'ECL';

RETURN;

ENDIF;

//?USER: Exit program processing

// Call program DLT incomplete itemsShlEX.
CALL PROGRAM(DLT incomplete itemsShlEX) ('PPLIXFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(PAR.Details_Remaining_USR);

//?F3=Exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

