// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBQZXFR
// ?Date: 14.08.2025 Time: 03:49:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse Slot Typ RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1619241;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(LCL.WHS_Slotting_Limit_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Calc slots assigned for the SSD/Whse. If slots available is
//?** exceeded, flag as error
// PAR.Error Status = CND.blank
PAR.Error_Status = *BLANK;

//?** Test Slotting only if Load ID is entered
CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

//?** Only check slotting limits if Seaboard
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?Get Load slots
CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

//?** Retrieve number of loads slotted for SSD/Whse
EXECUTE FUNCTION(RTV Limit Loads f/Slot RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1619257;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Export_Load_Limit);
PARAMETER(LCL.Combo_Load_Limit);
PARAMETER(LCL.Box_Load_Limit_USR);
PARAMETER(WRK.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Export Load Limit = CON.*ZERO
 PAR.Export_Load_Limit = *ZERO;

 // PAR.Combo Load Limit = CON.*ZERO
 PAR.Combo_Load_Limit = *ZERO;

 // PAR.Box Load Limit        USR = CON.*ZERO
 PAR.Box_Load_Limit_USR = *ZERO;

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Shipping_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve needed values from System Values file     E000233
 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?change log
 DO;

 //?02/03/2010 LJB E000233
 //?   Retrieve needed values from System Values file
 //?08/03/07 RMC dly029 Count Load as Export if export order whse
 //?   matches ShipFrom Whse on the load   -- per jim n, steve b
 //?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
 //?   from Logical View
 //?05/17/04 RMC PKTR01 Multi-Company - Use Shipping Co from Whse
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?RMC 9/11/13 E2709
 //?Check for Mixed having box qty>BOXLOAD qty, if yes, then BX, else CB
 //?Change Priority 3/14/01    RMC
 //?Check for Mixed having a box qty > 60 to stay BX   6/12/01    RMC
 //?Per Steve Burke - 6/27/01
 //?Dont check just for Prepaid Trucks.  Collect and Prepaid trucks included
 //?If Partial Load (<= 20000 lbs) dont count.
 //?Priority :  Combo , Export, Box
 CASE;

 // IF DB1.Load Type is Regular
 IF DB1.Load_Type = 'R';

 // AND DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 AND DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 // AND DB1.Shipping Method is Not Rail
 AND DB1.Shipping_Method = 'CT'/'PT';

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF DB1.Load ID EQ PAR.Load ID
 IF DB1.Load_ID = PAR.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?05/11/04 SLM PKTR01 Multi-Company - Function chgd-remove Company RST/Pos
 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // PAR.Combo Load Limit = PAR.Combo Load Limit + CON.1
 PAR.Combo_Load_Limit = PAR.Combo_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?Count Load as Export if order whse = Ship-From-Whse & Export 8/3/07
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 //?See if export order whse matches load Shipfrom whse  08/03/07 RMC
 //?For example a load could be export sts=Y and ship from whse is GP1, but
 //?there are multiple orders, and the one that is export is out of CF1
 //? in that case, dont count the load as export- per Steve B and Jim Norris
 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // PAR.Export Load Limit = PAR.Export Load Limit + CON.1
 PAR.Export_Load_Limit = PAR.Export_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Box Load Limit        USR = PAR.Box Load Limit        USR + CON.1
 PAR.Box_Load_Limit_USR = PAR.Box_Load_Limit_USR + 1;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Get Sched Weight Slots.
CASE;

// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

// LCL.Weight Scheduled USR = CON.*ZERO
LCL.Weight_Scheduled_USR = *ZERO;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv OrderWt f/ShpDate RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610091;
PARAMETER(LCL.Shipping_Company);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
PARAMETER(PAR.Load_ID);
{
 //?USER: Initialize routine

 //?RMC 10/02/07 set return code to *normal if no rcd found- not an error
 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.Order Number NE WRK.Order Number Saved USR
 IF DB1.Order_Number <> WRK.Order_Number_Saved_USR;

 EXECUTE FUNCTION(RTV Load ID,shp mth   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1620457;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
 //?  'RTV UM/Whs Code-Add CS RT'.
 EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.USR_Unit_of_Measure);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  // LCL.Boxes Total Quantity = CON.*ZERO
  LCL.Boxes_Total_Quantity = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  //?PF3280 -- add "Cases" to the case-stmt
  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // OR DB1.U/M - Ordered is EQ Boxes
  OR DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Mixed
  OR DB1.U_M_Ordered = 'MX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Sum for later check
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
  LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.U/M - Ordered = CND.Mixed
  WRK.U_M_Ordered = 'MX';

  // PAR.USR Unit of Measure = WRK.U/M - Ordered
  PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // WRK.Order Number Saved USR = DB1.Order Number
 WRK.Order_Number_Saved_USR = DB1.Order_Number;

 ENDIF;

 CASE;

 // IF LCL.Load ID is Blank
 IF LCL.Load_ID = *ZERO;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF LCL.Shipping Method is Rail
 IF LCL.Shipping_Method = 'CR'/'PR';

 // OR LCL.Load Type is Not Regular
 OR LCL.Load_Type = *BLANK/'B';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?Priority: CB,EX,BX
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF PAR.LSSA Load Slot Type is Combo
 IF PAR.LSSA_Load_Slot_Type = 'CB';

 CASE;

 // IF LCL.USR Unit of Measure is Combos
 IF LCL.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.LSSA Load Slot Type is Export
 IF PAR.LSSA_Load_Slot_Type = 'EX';

 CASE;

 // IF LCL.Export Status is Not Yes
 IF LCL.Export_Status = *BLANK/'N';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF PAR.LSSA Load Slot Type is Box
 IF PAR.LSSA_Load_Slot_Type = 'BX';

 CASE;

 // IF LCL.USR Unit of Measure is Boxed
 IF LCL.USR_Unit_of_Measure = 'BX';

 // OR LCL.USR Unit of Measure is Mixed
 OR LCL.USR_Unit_of_Measure = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PAR.Weight Scheduled USR = PAR.Weight Scheduled USR + DB1.Weight Scheduled
 PAR.Weight_Scheduled_USR = PAR.Weight_Scheduled_USR + DB1.Weight_Scheduled;

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF PAR.Load ID EQ LCL.Load ID
 IF PAR.Load_ID = LCL.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(NLL.Accounting_Period_Code);
PARAMETER(WRK.Day_of_Week);
PARAMETER(NLL.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(WRK.Day_of_Week);
PARAMETER(LCL.Slot_Limit_for_Export);
PARAMETER(LCL.Slot_Limit_for_Combo);
PARAMETER(LCL.Slot_Limit_for_Box_Other);
PARAMETER(LCL.Weight_Limit_for_Export);
PARAMETER(LCL.Weight_Limit_for_Combo);
PARAMETER(LCL.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

CASE;

// IF WRK.Record Found -OrdDtlUSR is Record Found
IF WRK.Record_Found_OrdDtlUSR = 'Y';

//?dont add to it if load is already sched, has an order on it
// IF *OTHERWISE
IF *OTHERWISE;

//?Check Slot limit to number of slots taken+1
CASE;

// IF PAR.Slot Type f/New Ords USR is Box
IF PAR.Slot_Type_f_New_Ords_USR = 'BX';

// LCL.Box Load Limit        USR = LCL.Box Load Limit        USR + CON.1
LCL.Box_Load_Limit_USR = LCL.Box_Load_Limit_USR + 1;

CASE;

// IF LCL.Box Load Limit        USR GT LCL.Slot Limit for Box/Other
IF LCL.Box_Load_Limit_USR > LCL.Slot_Limit_for_Box_Other;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Check Slot limit to number of slots taken+1
// IF PAR.Slot Type f/New Ords USR is Combo
IF PAR.Slot_Type_f_New_Ords_USR = 'CB';

// LCL.Combo Load Limit = LCL.Combo Load Limit + CON.1
LCL.Combo_Load_Limit = LCL.Combo_Load_Limit + 1;

CASE;

// IF LCL.Combo Load Limit GT LCL.Slot Limit for Combo
IF LCL.Combo_Load_Limit > LCL.Slot_Limit_for_Combo;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Check Slot limit to number of slots taken+1
// IF PAR.Slot Type f/New Ords USR is Export
IF PAR.Slot_Type_f_New_Ords_USR = 'EX';

// LCL.Export Load Limit = LCL.Export Load Limit + CON.1
LCL.Export_Load_Limit = LCL.Export_Load_Limit + 1;

CASE;

// IF LCL.Export Load Limit GT LCL.Slot Limit for Export
IF LCL.Export_Load_Limit > LCL.Slot_Limit_for_Export;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Check for Weight Limit exceeded
CASE;

// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

//?add new order weight to weight for the day already scheduled
// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + PAR.Order Weight Assigned
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + PAR.Order_Weight_Assigned;

CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

ENDIF;

//?Weight exceeded message
CASE;

// IF LCL.Weight Scheduled USR GT LCL.Weight Limit for Export
IF LCL.Weight_Scheduled_USR > LCL.Weight_Limit_for_Export;

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

