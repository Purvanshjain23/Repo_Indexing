      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF470
      * TITLE:       Claims: Specify Listing of OMS Credit/Debit Memos
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     08/21/09
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the listings.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/10/09  LeAnne Ramsey
      *           Changed selection to A/R Customer instead of ShipTo Customer.
      *           Move the selection to be the last entry on the screen.
      *
      * 01/26/18  Danny Nguyen  (R12011A-Weekly Product Revenue)
      *           Added 440 as a valid company.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd470    cf   e             workstn infds(iofeed)
      *
      *
     Fcabbrel0  if   e           k disk
      *  Customer
      *
      *
     Ftfp096    if   e           k disk
      *    Data source codes
      *
      *
     Fombyrel0  if   e           k disk
      *    Item default
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxdscd          s                   like(dsdscd)
     D xxdsds          s                   like(dsdsds)
     D xxalphprcd      s              7
     D xxprcd          s                   like(d1prcd)
     D xxprds          s             30
     D xxcuno          s                   like(d1cuno)
     D xxcunm          s             30
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
     D  ldfsyndt              25     31  0
     D  ldtsyndt              32     38  0
     D  ldfmdy                39     44  0
     D  ldtmdy                45     50  0
     D  ldfcymd               52     59  0
     D  ldtcymd               60     67  0
      *
     D  ldcono                68     70  0
     D  ldclno                71     77  0
     D  ldmmno                78     84  0
     D  ldprcd                85     91  0
     D  ldmmty                92     93
      *
     D  ldclorno              94    100  0
     D  lddscd               108    108
     D  ldcuno               109    115  0
     D  ldcunm               116    145
     D  ldprds               146    175
     D  lddsds               176    195
      *
     D  ldrpt                299    299
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf470k1
     C                   write     tf470ec
     C                   exfmt     tf470r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *  1) Report sort sequence
      *  2) From date
      *  3) To date
      *  4) Data source code
      *  5) Company number
      *  6) Claim number
      *  7) Memo number
      *  8) Claim order number
      *  9) Product code
      * 10) A/R customer number
      *
     C                   exsr      $rpt
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $dscd
     C                   exsr      $cono
     C                   exsr      $clno
     C                   exsr      $mmno
     C                   exsr      $clorno
     C                   exsr      $prcd
     C                   exsr      $cuno
      *
      * If there are no errors, execute the subroutine to submit the listing
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Report Sort Sequence
      *----------------------------------------------------------------
      *
     C     $rpt          begsr
      *
     C                   if        d1rpt <> 'P' and d1rpt <> 'C'
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08064'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate From Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldfsyndt
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1tmdy <> 0 and d1fmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09088'     mgid(e)
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1fmdy        wkisodate
     C                   move      wkisodate     ldfcymd
     C     *cymd         move      wkisodate     ldfsyndt
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate To Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             ldtcymd
     C                   z-add     0             ldtsyndt
      *
     C                   select
     C                   when      d1tmdy = 0 and d1fmdy = 0
      *
     C                   when      d1fmdy <> 0 and d1tmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09089'     mgid(e)
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1tmdy        wkisodate
     C                   move      wkisodate     ldtcymd
     C     *cymd         move      wkisodate     ldtsyndt
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in30 = *off and
     C                             *in31 = *off and
     C                             ldtcymd < ldfcymd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Data Source code
      *----------------------------------------------------------------
      *
     C     $dscd         begsr
      *
     C                   move      *blank        d1dsds
     C                   move      *blank        lddsds
      *
     C                   select
     C                   when      d1dscd = *blank
     C                   other
      *
     C     d1dscd        chain     tfp096                             92
     C                   if        *in92 = *off                                 If hit
     C                   eval      d1dsds = dsdsds
     C                   eval      lddsds = dsdsds
     C                   else
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08066'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1dscd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Company Number
      *---------------------------------------------------------------
      *
     C     $cono         begsr
      *
     C                   select
     C                   when      d1cono = 0
      *
     C                   when      d1cono < 0
     c                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1cono <> 360 and d1cono <> 960
12011C                             and d1cono <> 440
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08054'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate A/R Customer Number
      *---------------------------------------------------------------
      *
     C     $cuno         begsr
      *
     C                   move      *blank        d1cunm
     C                   move      *blank        ldcunm
      *
     C                   select
     C                   when      d1cuno = 0
      *
     C                   when      d1cuno < 0
     c                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     d1cuno        chain     cabbrel0                           92
     C                   if        *in92 = *off and                             If hit
     C                             bbbkc7 = bbanc7
     C                   eval      d1cunm = bbaytx
     C                   eval      ldcunm = bbaytx
     C                   else
     c                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08158'
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Claim Number
      *---------------------------------------------------------------
      *
     C     $clno         begsr
      *
     C                   if        d1clno < 0
     c                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Product
      *----------------------------------------------------------------
      *
     C     $prcd         begsr
      *
     C                   move      *blank        d1prds
     C                   move      *blank        ldprds
      *
     C                   select
     C                   when      d1prcd = 0
      *
     C                   when      d1prcd < 0
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1prcd        chain     ombyrel0                           92
     C                   if        *in92 = *off                                 If hit
     C                   eval      d1prds = byavna
     C                   eval      ldprds = byavna
     C                   else
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08006'     mgid(e)
     C                   clear                   mgw
     C                   move      d1prcd        xxalphprcd
     C                   movea     xxalphprcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Memo Number
      *---------------------------------------------------------------
      *
     C     $mmno         begsr
      *
     C                   if        d1mmno < 0
     c                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Claim Order Number
      *---------------------------------------------------------------
      *
     C     $clorno       begsr
      *
     C                   if        d1clorno < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Data Source
     C                   when      fld = 'D1DSCD'
     C                   call      'TF517'
     C                   parm      *blank        xxdscd
     C                   parm      *blank        xxdsds
     C                   seton                                        56
     C                   if        xxdscd <> *blank
     C                   movel     xxdscd        d1dscd
     C                   eval      d1dsds = xxdsds
     C                   endif
      * AR Customer
     C                   when      fld = 'D1CUNO'
     C                   call      'TF533'
     C                   parm      0             xxcuno
     C                   parm      *blank        xxcunm
     C                   seton                                        59
     C                   if        xxcuno <> 0
     C                   z-add     xxcuno        d1cuno
     C                   eval      d1cunm = xxcunm
     C                   endif
      * Product
     C                   when      fld = 'D1PRCD'
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
     C                   seton                                        58
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        d1prcd
     C                   eval      d1prds = xxprds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   move      d1rpt         ldrpt
     C                   z-add     d1fmdy        ldfmdy
     C                   z-add     d1tmdy        ldtmdy
      *
     C                   z-add     d1cono        ldcono
     C                   z-add     d1cuno        ldcuno
     C                   z-add     d1clno        ldclno
     C                   z-add     d1clorno      ldclorno
      *
     C                   move      d1mmty        ldmmty
     C                   z-add     d1mmno        ldmmno
     C                   move      d1prcd        ldprcd
     C                   move      d1dscd        lddscd
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldtcymd
     C                   z-add     0             ldcono
     C                   z-add     0             ldcuno
     C                   z-add     0             ldclno
     C                   z-add     0             ldmmno
     C                   z-add     0             ldprcd
     C                   z-add     0             ldclorno
     C                   out       lda
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF470CL))  JOB(MEMOLIST) JOBQ(*JOBD)
