// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POOZXFR
// ?Date: 14.08.2025 Time: 03:38:22
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?*** Build Claim Download File ***
EXECUTE FUNCTION(CRT DNLD Claims Yearly RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1641810;
PARAMETER(PAR.Claim_Start_Entry_Date);
PARAMETER(PAR.Claim_End_Entry_Date);
{
 //?USER: Process Data record

 // PAR.*Record selected = CND.*YES
 PAR.*Record_selected = 'Y';

 //?SEL:  Entry Date
 CASE;

 // IF PAR.Claim Start Entry Date is Entered
 IF PAR.Claim_Start_Entry_Date <> *ZERO;

 CASE;

 // IF DB1.Claim Entry Date LT PAR.Claim Start Entry Date
 IF DB1.Claim_Entry_Date < PAR.Claim_Start_Entry_Date;

 // OR DB1.Claim Entry Date GT PAR.Claim End Entry Date
 OR DB1.Claim_Entry_Date > PAR.Claim_End_Entry_Date;

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.*Record selected is *YES
 IF PAR.*Record_selected = 'Y';

 //?Build file based on Claim Products.        (CM/DM)
 DO;

 CASE;

 // IF PAR.*Record selected is *YES
 IF PAR.*Record_selected = 'Y';

 //?Build & Create Download Record.
 DO;

 // PAR.Claim Number (unpacked) = DB1.Claim Number
 PAR.Claim_Number_unpacked = DB1.Claim_Number;

 // PAR.Claim Product/Resale Prod = CND.Product
 PAR.Claim_Product_Resale_Prod = 'P';

 EXECUTE FUNCTION(RTV Claim Reason Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_ReasAC1561330;
 PARAMETER(PAR.Claim_Reason_Codes);
 {
  //?USER: Initialize routine

  // PAR.Claim Reason Code(s) = CON.*BLANK
  PAR.Claim_Reason_Codes = *BLANK;

  // PAR.Count USR = CND.One
  PAR.Count_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF PAR.Count USR is LE 4
  IF PAR.Count_USR <= 4;

  CASE;

  // IF PAR.Claim Reason Code(s) is *Blank
  IF PAR.Claim_Reason_Codes = *BLANK;

  // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
  PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),CON.,,CON.*ZERO)
  PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + ',' (*ZERO);

  // PAR.Claim Reason Code(s) = CONCAT(PAR.Claim Reason Code(s),DB1.Reason Code,CON.*
  PAR.Claim_Reason_Codes = PAR.Claim_Reason_Codes + DB1.Reason_Code (*ZERO);

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CND.One
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 // PAR.Claim Short Customer Name = DB1.Claim Customer Name
 PAR.Claim_Short_Customer_Name = DB1.Claim_Customer_Name;

 // PAR.Claim Type = DB1.Claim Type
 PAR.Claim_Type = DB1.Claim_Type;

 //?Get Order Info.
 DO;

 EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(WRK.Unused_Parm_CD7_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(PAR.Claim_Invoice_unpacked);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Claim_Load_ID_unpacked);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(WRK.Unused_Parm_CD7_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(PAR.Claim_Load_ID_unpacked);
 PARAMETER(PAR.Claim_Invoice_unpacked);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Date_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Claim_Act_Shp_Dte_lotus);
 {
  //?Execute internal function

  //?Break apart date.
  // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
  PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

  // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
  PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

  // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
  PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

  //?Convert to alpha.
  // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
  PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

  // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
  PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

  // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
  PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

  //?Put back together.
  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

 }

 ENDDO;

 // PAR.Claim Order # (unpacked) = DB1.Claim Order Number
 PAR.Claim_Order_#_unpacked = DB1.Claim_Order_Number;

 EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(LCL.Salesperson_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program CLC Find Last Name     UP.
 CALL PROGRAM(CLC Find Last Name     UP) ('POAGUPC');
 PARAMETER(LCL.Salesperson_Name);
 PARAMETER(PAR.Claim_Short_Salesperson);

 //?Load Short Explanation.
 DO;

 CASE;

 // IF DB1.Claim Status is Denied
 IF DB1.Claim_Status = 'D';

 // OR DB1.Claim Status is Voided
 OR DB1.Claim_Status = 'V';

 // PAR.Claim Short Explanation = DB1.Claim Resolution Explan.
 PAR.Claim_Short_Explanation = DB1.Claim_Resolution_Explan;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV First Expln Line RT) TYPE(RTVOBJ) FILE(PDMNCPP)            AC1561600;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.Claim_Short_Explanation);
 {
  //?USER: Initialize routine

  // PAR.Claim Short Explanation = CON.*BLANK
  PAR.Claim_Short_Explanation = *BLANK;

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF PAR.Count USR is LE 2
  IF PAR.Count_USR <= 2;

  // PAR.Claim Short Explanation = CONCAT(PAR.Claim Short Explanation,DB1.Claim Expla
  PAR.Claim_Short_Explanation = PAR.Claim_Short_Explanation + DB1.Claim_Explanation_Text (1);

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(RTV Claim Dept Codes RT) TYPE(RTVOBJ) ARRAY(Claim_Unique_Dept_CAC1561332;
 PARAMETER(PAR.Claim_Department_Desc);
 {
  //?USER: Initialize routine

  // PAR.Claim Department Desc = CND.*Blank
  PAR.Claim_Department_Desc = *BLANK;

  // PAR.Count USR = CND.One
  PAR.Count_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF PAR.Count USR is LE 4
  IF PAR.Count_USR <= 4;

  //?051705 slm use the department description as is do not
  //?           set condition for the description
  //?           this process was using the responsibility department
  //?           now we use the claim department
  EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
  PARAMETER(DB1.Claim_Department_Code);
  PARAMETER(PAR.Department_Description);
  PARAMETER(NLL.Claim_Responsibility);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PAR.Department Description is equal to blank
  IF PAR.Department_Description = *BLANK;

  // PAR.Department Description = CON.** Unknown **
  PAR.Department_Description = '** Unknown **';

  ENDIF;

  CASE;

  // IF PAR.Claim Department Desc is *Blank
  IF PAR.Claim_Department_Desc = *BLANK;

  // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,PAR.Department Description,CON.*ZE
  PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + PAR.Department_Description (*ZERO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,CON.,,CON.*ZERO)
  PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + ',' (*ZERO);

  // PAR.Claim Department Desc = CONCAT(PAR.Claim Department Desc,PAR.Department Description,CON.*ZE
  PAR.Claim_Department_Desc = PAR.Claim_Department_Desc + PAR.Department_Description (*ZERO);

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CND.One
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 // PAR.Claim Amount (unpacked) = DB1.Claim Amount
 PAR.Claim_Amount_unpacked = DB1.Claim_Amount;

 EXECUTE FUNCTION(Convert DTE to mm/dd/yyyy) TYPE(EXCINTFUN)                     AC1561339;
 PARAMETER(DB1.Claim_Entry_Date);
 PARAMETER(PAR.Claim_Entry_Date_lotus);
 {
  //?Execute internal function

  //?Break apart date.
  // PAR.YYYY numeric USR = PAR.@Date - ATR *YEAR
  PAR.YYYY_numeric_USR = DATEDTLS(PAR.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

  // PAR.MM   numeric USR = PAR.@Date - ATR *MONTH
  PAR.MM_numeric_USR = DATEDTLS(PAR.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

  // PAR.DD   numeric USR = PAR.@Date - ATR *DAY OF MONTH
  PAR.DD_numeric_USR = DATEDTLS(PAR.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

  //?Convert to alpha.
  // PAR.YYYY alpha   USR = CVTVAR(PAR.YYYY numeric USR)
  PAR.YYYY_alpha_USR = CVTVAR(PAR.YYYY_numeric_USR);

  // PAR.MM   alpha   USR = CVTVAR(PAR.MM   numeric USR)
  PAR.MM_alpha_USR = CVTVAR(PAR.MM_numeric_USR);

  // PAR.DD   alpha   USR = CVTVAR(PAR.DD   numeric USR)
  PAR.DD_alpha_USR = CVTVAR(PAR.DD_numeric_USR);

  //?Put back together.
  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.MM   alpha   USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.MM_alpha_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.DD   alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.DD_alpha_USR (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,CON./,CON.*ZERO)
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + '/' (*ZERO);

  // PAR.Date mm/dd/yyyy USR = CONCAT(PAR.Date mm/dd/yyyy USR,PAR.YYYY alpha   USR,CO
  PAR.Date_mm_dd_yyyy_USR = PAR.Date_mm_dd_yyyy_USR + PAR.YYYY_alpha_USR (*ZERO);

 }

 //?*-------------------------------------------------------*
 //?* 10/26/01 PKD T960 Added Resale Amount and Net Loss to Download
 EXECUTE FUNCTION(RTV Calc Resale Total  RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1535548;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(LCL.Resale_Total_Item_Amount);
 {
  //?USER: Initialize routine

  // PAR.Resale Total Item Amount = CON.*ZERO
  PAR.Resale_Total_Item_Amount = *ZERO;

  //?USER: Process Data record

  // PAR.Resale Total Item Amount = PAR.Resale Total Item Amount + DB1.Resale Item Amount
  PAR.Resale_Total_Item_Amount = PAR.Resale_Total_Item_Amount + DB1.Resale_Item_Amount;

 }

 // PAR.Claim Resale Amt UNPKD = LCL.Resale Total Item Amount
 PAR.Claim_Resale_Amt_UNPKD = LCL.Resale_Total_Item_Amount;

 // PAR.Claim Net Loss Amt UNPKD = DB1.Claim Net Loss
 PAR.Claim_Net_Loss_Amt_UNPKD = DB1.Claim_Net_Loss;

 //?*-------------------------------------------------------*
 EXECUTE FUNCTION(CRT A/R Claim Download CR) TYPE(CRTOBJ) FILE(PDNACPP)          AC1561276;
 PARAMETER(PAR.Claim_Number_unpacked);
 PARAMETER(PAR.Claim_Product_Resale_Prod);
 PARAMETER(PAR.Claim_Short_Customer_Name);
 PARAMETER(PAR.Claim_Reason_Codes);
 PARAMETER(PAR.Claim_Type);
 PARAMETER(PAR.Claim_Load_ID_unpacked);
 PARAMETER(PAR.Claim_Invoice_unpacked);
 PARAMETER(PAR.Claim_Act_Shp_Dte_lotus);
 PARAMETER(*MISSING);
 PARAMETER(PAR.Claim_Order_#_unpacked);
 PARAMETER(PAR.Claim_Short_Salesperson);
 PARAMETER(PAR.Claim_Entry_Date_lotus);
 PARAMETER(PAR.Claim_Department_Desc);
 PARAMETER(PAR.Claim_Short_Explanation);
 PARAMETER(PAR.Claim_Amount_unpacked);
 PARAMETER(PAR.Claim_Resale_Amt_UNPKD);
 PARAMETER(PAR.Claim_Net_Loss_Amt_UNPKD);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Claim_Reason_Code_first);
 PARAMETER(DB1.Claim_Status);
 PARAMETER(DB1.Claim_Called_in_by_Desc);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_#_unpacked);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(NLL.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

 }

 ENDDO;

 ENDIF;

 ENDDO;

 ENDIF;

}


