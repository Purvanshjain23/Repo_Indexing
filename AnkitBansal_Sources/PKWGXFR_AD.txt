// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKWGXFR
// ?Date: 14.08.2025 Time: 02:50:41
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(TST tto/Co Recap) TYPE(RTVOBJ) FILE(PKA1CPP)                   AB1162628;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Upd Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162623;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 {
  //?USER: Initialize routine

  // WRK.CKR Head Received/Hld Ovr = CON.*ZERO
  WRK.CKR_Head_Received_Hld_Ovr = *ZERO;

  // WRK.CKR Live Weight = CON.*ZERO
  WRK.CKR_Live_Weight = *ZERO;

  // WRK.CKR Dead On Arrival = CON.*ZERO
  WRK.CKR_Dead_On_Arrival = *ZERO;

  // WRK.CKR Head Resale = CON.*ZERO
  WRK.CKR_Head_Resale = *ZERO;

  // WRK.CKR Yard Deads = CON.*ZERO
  WRK.CKR_Yard_Deads = *ZERO;

  // WRK.CKR Held Over = CON.*ZERO
  WRK.CKR_Held_Over = *ZERO;

  // WRK.CKR Head Killed = CON.*ZERO
  WRK.CKR_Head_Killed = *ZERO;

  // WRK.CKR Hot Weight = CON.*ZERO
  WRK.CKR_Hot_Weight = *ZERO;

  // WRK.CKR Head Comdemned = CON.*ZERO
  WRK.CKR_Head_Comdemned = *ZERO;

  //?USER: Processing if Data record not found

  //?Accumulate from tattoo header, to company kill recap
  // WRK.CKR Head Received/Hld Ovr = PAR.TH Head Received
  WRK.CKR_Head_Received_Hld_Ovr = PAR.TH_Head_Received;

  // WRK.CKR Live Weight = PAR.TH Live Wgt
  WRK.CKR_Live_Weight = PAR.TH_Live_Wgt;

  // WRK.CKR Dead On Arrival = PAR.TH Dead On Arrival
  WRK.CKR_Dead_On_Arrival = PAR.TH_Dead_On_Arrival;

  CASE;

  // IF PAR.TH Hog Class Type is Resale
  IF PAR.TH_Hog_Class_Type = 'R';

  // WRK.CKR Head Resale = PAR.TH Head Received
  WRK.CKR_Head_Resale = PAR.TH_Head_Received;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.CKR Head Resale = CON.*ZERO
  WRK.CKR_Head_Resale = *ZERO;

  ENDIF;

  // WRK.CKR Yard Deads = PAR.TH Yard Deads
  WRK.CKR_Yard_Deads = PAR.TH_Yard_Deads;

  // WRK.CKR Held Over = PAR.TH Held Over
  WRK.CKR_Held_Over = PAR.TH_Held_Over;

  // WRK.CKR Head Killed = PAR.TH Head Killed
  WRK.CKR_Head_Killed = PAR.TH_Head_Killed;

  // WRK.CKR Hot Weight = PAR.TH Hot Wgt
  WRK.CKR_Hot_Weight = PAR.TH_Hot_Wgt;

  // WRK.CKR Head Comdemned = PAR.TH Head Condemned
  WRK.CKR_Head_Comdemned = PAR.TH_Head_Condemned;

  EXECUTE FUNCTION(Create Company Kill Recap) TYPE(CRTOBJ) FILE(PKDCCPP)          AB1162608;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.CKR_Kill_Date);
  PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
  PARAMETER(WRK.CKR_Live_Weight);
  PARAMETER(WRK.CKR_Dead_On_Arrival);
  PARAMETER(WRK.CKR_Head_Resale);
  PARAMETER(WRK.CKR_Yard_Deads);
  PARAMETER(WRK.CKR_Held_Over);
  PARAMETER(WRK.CKR_Head_Killed);
  PARAMETER(WRK.CKR_Hot_Weight);
  PARAMETER(WRK.CKR_Head_Comdemned);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  //?Accumulate from tattoo header, to company kill recap
  // WRK.CKR Head Received/Hld Ovr = PAR.TH Head Received + DB1.CKR Head Received/Hld
  WRK.CKR_Head_Received_Hld_Ovr = PAR.TH_Head_Received + DB1.CKR_Head_Received_Hld_Ovr;

  // WRK.CKR Live Weight = PAR.TH Live Wgt + DB1.CKR Live Weight
  WRK.CKR_Live_Weight = PAR.TH_Live_Wgt + DB1.CKR_Live_Weight;

  // WRK.CKR Dead On Arrival = PAR.TH Dead On Arrival + DB1.CKR Dead On Arrival
  WRK.CKR_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.CKR_Dead_On_Arrival;

  CASE;

  // IF PAR.TH Hog Class Type is Resale
  IF PAR.TH_Hog_Class_Type = 'R';

  // WRK.CKR Head Resale = PAR.TH Head Received + DB1.CKR Head Resale
  WRK.CKR_Head_Resale = PAR.TH_Head_Received + DB1.CKR_Head_Resale;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.CKR Head Resale = WRK.CKR Head Resale + DB1.CKR Head Resale
  WRK.CKR_Head_Resale = WRK.CKR_Head_Resale + DB1.CKR_Head_Resale;

  ENDIF;

  // WRK.CKR Yard Deads = PAR.TH Yard Deads + DB1.CKR Yard Deads
  WRK.CKR_Yard_Deads = PAR.TH_Yard_Deads + DB1.CKR_Yard_Deads;

  // WRK.CKR Held Over = PAR.TH Held Over + DB1.CKR Held Over
  WRK.CKR_Held_Over = PAR.TH_Held_Over + DB1.CKR_Held_Over;

  // WRK.CKR Head Killed = PAR.TH Head Killed + DB1.CKR Head Killed
  WRK.CKR_Head_Killed = PAR.TH_Head_Killed + DB1.CKR_Head_Killed;

  // WRK.CKR Hot Weight = PAR.TH Hot Wgt + DB1.CKR Hot Weight
  WRK.CKR_Hot_Weight = PAR.TH_Hot_Wgt + DB1.CKR_Hot_Weight;

  // WRK.CKR Head Comdemned = PAR.TH Head Condemned + DB1.CKR Head Comdemned
  WRK.CKR_Head_Comdemned = PAR.TH_Head_Condemned + DB1.CKR_Head_Comdemned;

  EXECUTE FUNCTION(Chg Comp Kill Recap   CH) TYPE(CHGOBJ) FILE(PKDCCPP)           AB1162609;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.CKR_Kill_Date);
  PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
  PARAMETER(WRK.CKR_Live_Weight);
  PARAMETER(WRK.CKR_Dead_On_Arrival);
  PARAMETER(WRK.CKR_Head_Resale);
  PARAMETER(WRK.CKR_Yard_Deads);
  PARAMETER(WRK.CKR_Held_Over);
  PARAMETER(WRK.CKR_Head_Killed);
  PARAMETER(WRK.CKR_Hot_Weight);
  PARAMETER(WRK.CKR_Head_Comdemned);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?360/0950703
EXECUTE FUNCTION(Crt Co Exp Rate Data  RT) TYPE(RTVOBJ) FILE(PKC7REP)           AB1162660;
PARAMETER(360);
PARAMETER(0950703);
{
 //?USER: Initialize routine

 //?AS400 Error Message Hot scale records were not up and the
 //?Head Killed was zero
 //?do not div by head killed if head killed is zero
 //?USER: Process Data record

 CASE;

 // IF DB1.CE Expense Type is Daily Summarization
 IF DB1.CE_Expense_Type = 'D';

 EXECUTE FUNCTION(Rtv Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162665;
 PARAMETER(PAR.CE_Company);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Clc Co Daily Rate     IF) TYPE(EXCINTFUN)                      AB1162668;
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 PARAMETER(DB1.CE_Company);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 {
  //?Execute internal function

  //?Calculate amount
  CASE;

  // IF PAR.CE Unit of Measure is Co Head UOM
  IF PAR.CE_Unit_of_Measure = 'CH'/'DH'/'KH'/'RH'/'YH';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.CE Unit of Measure is Received Head
  IF PAR.CE_Unit_of_Measure = 'RH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Received/Hld Ovr *Rou
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Received_Hld_Ovr 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Killed Head
  IF PAR.CE_Unit_of_Measure = 'KH';

  //?slm 05/30/2008 S00258
  //?as400 error message on 5/30 head kill was zero due to NO hot scale
  //?records
  CASE;

  // IF PAR.CKR Head Killed is Equals 0
  IF PAR.CKR_Head_Killed = *ZERO;

  // PAR.Trans Unit Amt Usr = CON.*ZERO
  PAR.Trans_Unit_Amt_Usr = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Killed *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Killed 'H';

  ENDIF;

  //?HEAD
  // IF PAR.CE Unit of Measure is Condemned Head
  IF PAR.CE_Unit_of_Measure = 'CH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Comdemned *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Comdemned 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Yard Deads Head
  IF PAR.CE_Unit_of_Measure = 'YH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Yard Deads *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Yard_Deads 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is DOA Head
  IF PAR.CE_Unit_of_Measure = 'DH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Dead On Arrival *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Dead_On_Arrival 'H';

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Weight UOM
  IF PAR.CE_Unit_of_Measure = 'CW'/'LW';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.CE Unit of Measure is Live Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'LW';

  // Live hundred weght
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Live_Weight / 100 );

  //?WEIGHT
  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Value Uom
  IF PAR.CE_Unit_of_Measure = 'GV';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // IF DB1.CE Expense Type is *Blank
 IF DB1.CE_Expense_Type = *BLANK;

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?360/0950704
EXECUTE FUNCTION(Crt Co Exp Rate Data  RT) TYPE(RTVOBJ) FILE(PKC7REP)           AB1162660;
PARAMETER(360);
PARAMETER(0950704);
{
 //?USER: Initialize routine

 //?AS400 Error Message Hot scale records were not up and the
 //?Head Killed was zero
 //?do not div by head killed if head killed is zero
 //?USER: Process Data record

 CASE;

 // IF DB1.CE Expense Type is Daily Summarization
 IF DB1.CE_Expense_Type = 'D';

 EXECUTE FUNCTION(Rtv Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162665;
 PARAMETER(PAR.CE_Company);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Clc Co Daily Rate     IF) TYPE(EXCINTFUN)                      AB1162668;
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 PARAMETER(DB1.CE_Company);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 {
  //?Execute internal function

  //?Calculate amount
  CASE;

  // IF PAR.CE Unit of Measure is Co Head UOM
  IF PAR.CE_Unit_of_Measure = 'CH'/'DH'/'KH'/'RH'/'YH';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.CE Unit of Measure is Received Head
  IF PAR.CE_Unit_of_Measure = 'RH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Received/Hld Ovr *Rou
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Received_Hld_Ovr 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Killed Head
  IF PAR.CE_Unit_of_Measure = 'KH';

  //?slm 05/30/2008 S00258
  //?as400 error message on 5/30 head kill was zero due to NO hot scale
  //?records
  CASE;

  // IF PAR.CKR Head Killed is Equals 0
  IF PAR.CKR_Head_Killed = *ZERO;

  // PAR.Trans Unit Amt Usr = CON.*ZERO
  PAR.Trans_Unit_Amt_Usr = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Killed *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Killed 'H';

  ENDIF;

  //?HEAD
  // IF PAR.CE Unit of Measure is Condemned Head
  IF PAR.CE_Unit_of_Measure = 'CH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Comdemned *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Comdemned 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Yard Deads Head
  IF PAR.CE_Unit_of_Measure = 'YH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Yard Deads *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Yard_Deads 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is DOA Head
  IF PAR.CE_Unit_of_Measure = 'DH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Dead On Arrival *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Dead_On_Arrival 'H';

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Weight UOM
  IF PAR.CE_Unit_of_Measure = 'CW'/'LW';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.CE Unit of Measure is Live Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'LW';

  // Live hundred weght
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Live_Weight / 100 );

  //?WEIGHT
  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Value Uom
  IF PAR.CE_Unit_of_Measure = 'GV';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // IF DB1.CE Expense Type is *Blank
 IF DB1.CE_Expense_Type = *BLANK;

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?360/0950705
EXECUTE FUNCTION(Crt Co Exp Rate Data  RT) TYPE(RTVOBJ) FILE(PKC7REP)           AB1162660;
PARAMETER(360);
PARAMETER(0950705);
{
 //?USER: Initialize routine

 //?AS400 Error Message Hot scale records were not up and the
 //?Head Killed was zero
 //?do not div by head killed if head killed is zero
 //?USER: Process Data record

 CASE;

 // IF DB1.CE Expense Type is Daily Summarization
 IF DB1.CE_Expense_Type = 'D';

 EXECUTE FUNCTION(Rtv Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162665;
 PARAMETER(PAR.CE_Company);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Clc Co Daily Rate     IF) TYPE(EXCINTFUN)                      AB1162668;
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 PARAMETER(DB1.CE_Company);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 {
  //?Execute internal function

  //?Calculate amount
  CASE;

  // IF PAR.CE Unit of Measure is Co Head UOM
  IF PAR.CE_Unit_of_Measure = 'CH'/'DH'/'KH'/'RH'/'YH';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.CE Unit of Measure is Received Head
  IF PAR.CE_Unit_of_Measure = 'RH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Received/Hld Ovr *Rou
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Received_Hld_Ovr 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Killed Head
  IF PAR.CE_Unit_of_Measure = 'KH';

  //?slm 05/30/2008 S00258
  //?as400 error message on 5/30 head kill was zero due to NO hot scale
  //?records
  CASE;

  // IF PAR.CKR Head Killed is Equals 0
  IF PAR.CKR_Head_Killed = *ZERO;

  // PAR.Trans Unit Amt Usr = CON.*ZERO
  PAR.Trans_Unit_Amt_Usr = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Killed *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Killed 'H';

  ENDIF;

  //?HEAD
  // IF PAR.CE Unit of Measure is Condemned Head
  IF PAR.CE_Unit_of_Measure = 'CH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Comdemned *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Comdemned 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Yard Deads Head
  IF PAR.CE_Unit_of_Measure = 'YH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Yard Deads *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Yard_Deads 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is DOA Head
  IF PAR.CE_Unit_of_Measure = 'DH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Dead On Arrival *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Dead_On_Arrival 'H';

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Weight UOM
  IF PAR.CE_Unit_of_Measure = 'CW'/'LW';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.CE Unit of Measure is Live Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'LW';

  // Live hundred weght
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Live_Weight / 100 );

  //?WEIGHT
  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Value Uom
  IF PAR.CE_Unit_of_Measure = 'GV';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // IF DB1.CE Expense Type is *Blank
 IF DB1.CE_Expense_Type = *BLANK;

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?360/0950706
EXECUTE FUNCTION(Crt Co Exp Rate Data  RT) TYPE(RTVOBJ) FILE(PKC7REP)           AB1162660;
PARAMETER(360);
PARAMETER(0950706);
{
 //?USER: Initialize routine

 //?AS400 Error Message Hot scale records were not up and the
 //?Head Killed was zero
 //?do not div by head killed if head killed is zero
 //?USER: Process Data record

 CASE;

 // IF DB1.CE Expense Type is Daily Summarization
 IF DB1.CE_Expense_Type = 'D';

 EXECUTE FUNCTION(Rtv Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162665;
 PARAMETER(PAR.CE_Company);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Clc Co Daily Rate     IF) TYPE(EXCINTFUN)                      AB1162668;
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 PARAMETER(DB1.CE_Company);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 {
  //?Execute internal function

  //?Calculate amount
  CASE;

  // IF PAR.CE Unit of Measure is Co Head UOM
  IF PAR.CE_Unit_of_Measure = 'CH'/'DH'/'KH'/'RH'/'YH';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.CE Unit of Measure is Received Head
  IF PAR.CE_Unit_of_Measure = 'RH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Received/Hld Ovr *Rou
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Received_Hld_Ovr 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Killed Head
  IF PAR.CE_Unit_of_Measure = 'KH';

  //?slm 05/30/2008 S00258
  //?as400 error message on 5/30 head kill was zero due to NO hot scale
  //?records
  CASE;

  // IF PAR.CKR Head Killed is Equals 0
  IF PAR.CKR_Head_Killed = *ZERO;

  // PAR.Trans Unit Amt Usr = CON.*ZERO
  PAR.Trans_Unit_Amt_Usr = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Killed *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Killed 'H';

  ENDIF;

  //?HEAD
  // IF PAR.CE Unit of Measure is Condemned Head
  IF PAR.CE_Unit_of_Measure = 'CH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Comdemned *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Comdemned 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Yard Deads Head
  IF PAR.CE_Unit_of_Measure = 'YH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Yard Deads *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Yard_Deads 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is DOA Head
  IF PAR.CE_Unit_of_Measure = 'DH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Dead On Arrival *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Dead_On_Arrival 'H';

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Weight UOM
  IF PAR.CE_Unit_of_Measure = 'CW'/'LW';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.CE Unit of Measure is Live Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'LW';

  // Live hundred weght
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Live_Weight / 100 );

  //?WEIGHT
  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Value Uom
  IF PAR.CE_Unit_of_Measure = 'GV';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // IF DB1.CE Expense Type is *Blank
 IF DB1.CE_Expense_Type = *BLANK;

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?360/0950830
EXECUTE FUNCTION(Crt Co Exp Rate Data  RT) TYPE(RTVOBJ) FILE(PKC7REP)           AB1162660;
PARAMETER(360);
PARAMETER(0950830);
{
 //?USER: Initialize routine

 //?AS400 Error Message Hot scale records were not up and the
 //?Head Killed was zero
 //?do not div by head killed if head killed is zero
 //?USER: Process Data record

 CASE;

 // IF DB1.CE Expense Type is Daily Summarization
 IF DB1.CE_Expense_Type = 'D';

 EXECUTE FUNCTION(Rtv Company Kill Recap RT) TYPE(RTVOBJ) FILE(PKDCCPP)          AB1162665;
 PARAMETER(PAR.CE_Company);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Clc Co Daily Rate     IF) TYPE(EXCINTFUN)                      AB1162668;
 PARAMETER(WRK.CKR_Head_Received_Hld_Ovr);
 PARAMETER(WRK.CKR_Live_Weight);
 PARAMETER(WRK.CKR_Dead_On_Arrival);
 PARAMETER(WRK.CKR_Head_Resale);
 PARAMETER(WRK.CKR_Yard_Deads);
 PARAMETER(WRK.CKR_Held_Over);
 PARAMETER(WRK.CKR_Head_Killed);
 PARAMETER(WRK.CKR_Hot_Weight);
 PARAMETER(WRK.CKR_Head_Comdemned);
 PARAMETER(DB1.CE_Company);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 {
  //?Execute internal function

  //?Calculate amount
  CASE;

  // IF PAR.CE Unit of Measure is Co Head UOM
  IF PAR.CE_Unit_of_Measure = 'CH'/'DH'/'KH'/'RH'/'YH';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.CE Unit of Measure is Received Head
  IF PAR.CE_Unit_of_Measure = 'RH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Received/Hld Ovr *Rou
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Received_Hld_Ovr 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Killed Head
  IF PAR.CE_Unit_of_Measure = 'KH';

  //?slm 05/30/2008 S00258
  //?as400 error message on 5/30 head kill was zero due to NO hot scale
  //?records
  CASE;

  // IF PAR.CKR Head Killed is Equals 0
  IF PAR.CKR_Head_Killed = *ZERO;

  // PAR.Trans Unit Amt Usr = CON.*ZERO
  PAR.Trans_Unit_Amt_Usr = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Killed *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Killed 'H';

  ENDIF;

  //?HEAD
  // IF PAR.CE Unit of Measure is Condemned Head
  IF PAR.CE_Unit_of_Measure = 'CH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Head Comdemned *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Head_Comdemned 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is Yard Deads Head
  IF PAR.CE_Unit_of_Measure = 'YH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Yard Deads *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Yard_Deads 'H';

  //?HEAD
  // IF PAR.CE Unit of Measure is DOA Head
  IF PAR.CE_Unit_of_Measure = 'DH';

  // PAR.Trans Unit Amt Usr = PAR.CE Unit Amount / PAR.CKR Dead On Arrival *Rounded
  PAR.Trans_Unit_Amt_Usr = PAR.CE_Unit_Amount / PAR.CKR_Dead_On_Arrival 'H';

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Weight UOM
  IF PAR.CE_Unit_of_Measure = 'CW'/'LW';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.CE Unit of Measure is Live Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'LW';

  // Live hundred weght
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Live_Weight / 100 );

  //?WEIGHT
  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  //?Calculate amount
  // IF PAR.CE Unit of Measure is Co Value Uom
  IF PAR.CE_Unit_of_Measure = 'GV';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.CE Unit of Measure is Carcass Hundred Weight
  IF PAR.CE_Unit_of_Measure = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Unit_Amt_Usr = PAR.Trans_Unit_Amt_Usr / ( PAR.CKR_Hot_Weight / 100 );

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(WRK.Trans_Unit_Amt_Usr);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // IF DB1.CE Expense Type is *Blank
 IF DB1.CE_Expense_Type = *BLANK;

 EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
 PARAMETER(PAR.CE_Company);
 PARAMETER(DB1.CE_Expense_Code);
 PARAMETER(PAR.Current_Kill_Date);
 PARAMETER(DB1.CE_Unit_of_Measure);
 PARAMETER(DB1.CE_Unit_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


