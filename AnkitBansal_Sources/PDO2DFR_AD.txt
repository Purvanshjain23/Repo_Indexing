// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDO2DFR
// ?Date: 14.08.2025 Time: 03:32:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(NLL.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?11/02/09 PKD Allow Sched as Order -renamed to App WHS Restrict
// WRK.Process Post USR = CND.no
WRK.Process_Post_USR = 'N';

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

//?***** Change Log and comments
DO;

//?** LJB 09/20/11 P001251 Don't auto lock if errors pending in Order Dtl
//?   from the Export Order Automation Upload process
//?** 10/01/2009 LJB E00495 Don't auto-lock if shipping later than today
//?** 07/24/2009 RMC FP1054 Dont lock load if shipping later than tomorrow
//?** 01/20/2009 RMC FP1054 For Sched as Ord: Chk User profile field 1st
//?  Remove from screen:  10=Schedule As Ordered
//?  add to screen:  14=Release Line Itm,dsp sts in subfile
//?** 09/01/2006 LJB L60831A Pass company# & whse to Product Availability
//?** 02/27/2007 RMC When Sched as ordered, auto-lock load if it can be.
//?  at exit proc time if Process Post USR = Yes
//?** 04/18/2007 LJB FT299
//?**   Pass blanks to the Print Acknowledgement program - it will
//?**   check to see if the user has multi-warehouse authority
//?** 07/17/2007 RMC Load CTL field with Ship to cust when dtl
//?     line  not Cancelled - the cust may have changed on new line items
ENDDO;

//?USER: Initialize subfile control

MOVE *ALL (To: CTL From: PAR);

EXECUTE FUNCTION(RTV Sales Route/Desc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1507292;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?Get sales route description
 CASE;

 // IF DB1.Sales Route Code NE WRK.BLANK
 IF DB1.Sales_Route_Code <> WRK.BLANK;

 EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get sales route description
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Sales Route Description = CON.*BLANK
 PAR.Sales_Route_Description = *BLANK;

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Hold/Status        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231784;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(CTL.Credit_Hold);
PARAMETER(CTL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Ensure Credit Hold is N if blank passed in
CASE;

// IF CTL.Credit Hold EQ WRK.BLANK
IF CTL.Credit_Hold = WRK.BLANK;

// CTL.Credit Hold = CND.No
CTL.Credit_Hold = 'N';

ENDIF;

//?Ensure Prod Hold is N if blank passed in
CASE;

// IF CTL.Production Hold EQ WRK.BLANK
IF CTL.Production_Hold = WRK.BLANK;

// CTL.Production Hold = CND.No
CTL.Production_Hold = 'N';

ENDIF;

// CTL.USR Day 1 = JOB.*Job date
CTL.USR_Day_1 = JOB.*Job_date;

EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// PAR.Week Number = CON.1
PAR.Week_Number = 1;

EXECUTE FUNCTION(RTV Mon-Sat Dates      IF) TYPE(EXCINTFUN)                     AC1386891;
PARAMETER(CTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(WRK.Accounting_Year_Code);
PARAMETER(PAR.Week_Number);
PARAMETER(WRK.Date_Mon_USR);
PARAMETER(WRK.Date_Tue_USR);
PARAMETER(WRK.Date_Wed_USR);
PARAMETER(WRK.Date_Thu_USR);
PARAMETER(WRK.Date_Fri_USR);
PARAMETER(WRK.Date_Sat_USR);
PARAMETER(WRK.Date_Sun_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Week Number       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1386894;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Post_to_G_L_Date);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(PAR.Week_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(PAR.Week_Number);
 PARAMETER(PAR.Date_Mon_USR);
 PARAMETER(PAR.Date_Tue_USR);
 PARAMETER(PAR.Date_Wed_USR);
 PARAMETER(PAR.Date_Thu_USR);
 PARAMETER(PAR.Date_Fri_USR);
 PARAMETER(PAR.Date_Sat_USR);
 PARAMETER(PAR.Date_Sun_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 CASE;

 // IF PAR.Date Mon USR EQ WRK.ZERO
 IF PAR.Date_Mon_USR = WRK.ZERO;

 // OR PAR.Date Tue USR EQ WRK.ZERO
 OR PAR.Date_Tue_USR = WRK.ZERO;

 // OR PAR.Date Wed USR EQ WRK.ZERO
 OR PAR.Date_Wed_USR = WRK.ZERO;

 // OR PAR.Date Thu USR EQ WRK.ZERO
 OR PAR.Date_Thu_USR = WRK.ZERO;

 // OR PAR.Date Fri USR EQ WRK.ZERO
 OR PAR.Date_Fri_USR = WRK.ZERO;

 // OR PAR.Date Sat USR EQ WRK.ZERO
 OR PAR.Date_Sat_USR = WRK.ZERO;

 //?And the Week is 52 or 53
 CASE;

 // IF PAR.Week Number is Year End
 IF PAR.Week_Number >= 52;
 AND PAR.Week_Number <= 53;

 // PAR.Accounting Year Code = PAR.Accounting Year Code + CON.1
 PAR.Accounting_Year_Code = PAR.Accounting_Year_Code + 1;

 EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(1);
 PARAMETER(PAR.Date_Mon_USR);
 PARAMETER(PAR.Date_Tue_USR);
 PARAMETER(PAR.Date_Wed_USR);
 PARAMETER(PAR.Date_Thu_USR);
 PARAMETER(PAR.Date_Fri_USR);
 PARAMETER(PAR.Date_Sat_USR);
 PARAMETER(PAR.Date_Sun_USR);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 //?And the Week is 52 or 53
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Accounting Year Code = PAR.Accounting Year Code + CON.-1
 PAR.Accounting_Year_Code = PAR.Accounting_Year_Code + -1;

 EXECUTE FUNCTION(RTV Mon-Sat w/Wk#      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1386902;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(53);
 PARAMETER(PAR.Date_Mon_USR);
 PARAMETER(PAR.Date_Tue_USR);
 PARAMETER(PAR.Date_Wed_USR);
 PARAMETER(PAR.Date_Thu_USR);
 PARAMETER(PAR.Date_Fri_USR);
 PARAMETER(PAR.Date_Sat_USR);
 PARAMETER(PAR.Date_Sun_USR);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv PA Shipdate-21+SunRT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621622;
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.Date_Mon_USR);
PARAMETER(WRK.Generic_Heading_1);
PARAMETER(WRK.Generic_Heading_2);
PARAMETER(WRK.Generic_Heading_3);
PARAMETER(WRK.Generic_Heading_4);
PARAMETER(WRK.Generic_Heading_5);
PARAMETER(WRK.Generic_Heading_6);
PARAMETER(WRK.Generic_Heading_7);
PARAMETER(WRK.Generic_Heading_8);
PARAMETER(WRK.Generic_Heading_9);
PARAMETER(WRK.Generic_Heading_10);
PARAMETER(WRK.Generic_Heading_11);
PARAMETER(WRK.Generic_Heading_12);
PARAMETER(WRK.Generic_Heading_13);
PARAMETER(WRK.Generic_Heading_14);
PARAMETER(WRK.Generic_Heading_15);
PARAMETER(WRK.Generic_Heading_16);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 1 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_1 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 1 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_1_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 2 = CON.Total
 PAR.Generic_Heading_2 = 'Total';

 // PAR.Avail Ship Date 2 USR = CON.*ZERO
 PAR.Avail_Ship_Date_2_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 2 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_2 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 2 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_2_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 3 = CON.Total
 PAR.Generic_Heading_3 = 'Total';

 // PAR.Avail Ship Date 3 USR = CON.*ZERO
 PAR.Avail_Ship_Date_3_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 3 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_3 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 3 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_3_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 4 = CON.Total
 PAR.Generic_Heading_4 = 'Total';

 // PAR.Avail Ship Date 4 USR = CON.*ZERO
 PAR.Avail_Ship_Date_4_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 4 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_4 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 4 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_4_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 5 = CON.Total
 PAR.Generic_Heading_5 = 'Total';

 // PAR.Avail Ship Date 5 USR = CON.*ZERO
 PAR.Avail_Ship_Date_5_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 5 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_5 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 5 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_5_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 6 = CON.Total
 PAR.Generic_Heading_6 = 'Total';

 // PAR.Avail Ship Date 6 USR = CON.*ZERO
 PAR.Avail_Ship_Date_6_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 6 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_6 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 6 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_6_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 7 = CON.Total
 PAR.Generic_Heading_7 = 'Total';

 // PAR.Avail Ship Date 7 USR = CON.*ZERO
 PAR.Avail_Ship_Date_7_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 7 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_7 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 7 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_7_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 8 = CON.Total
 PAR.Generic_Heading_8 = 'Total';

 // PAR.Avail Ship Date 8 USR = CON.*ZERO
 PAR.Avail_Ship_Date_8_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 8 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_8 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 8 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_8_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 9 = CON.Total
 PAR.Generic_Heading_9 = 'Total';

 // PAR.Avail Ship Date 9 USR = CON.*ZERO
 PAR.Avail_Ship_Date_9_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 9 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_9 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 9 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_9_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 10 = CON.Total
 PAR.Generic_Heading_10 = 'Total';

 // PAR.Avail Ship Date 10 USR = CON.*ZERO
 PAR.Avail_Ship_Date_10_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 10 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_10 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 10 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_10_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 11 = CON.Total
 PAR.Generic_Heading_11 = 'Total';

 // PAR.Avail Ship Date 11 USR = CON.*ZERO
 PAR.Avail_Ship_Date_11_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 11 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_11 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 11 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_11_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 12 = CON.Total
 PAR.Generic_Heading_12 = 'Total';

 // PAR.Avail Ship Date 12 USR = CON.*ZERO
 PAR.Avail_Ship_Date_12_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 12 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_12 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 12 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_12_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 13 = CON.Total
 PAR.Generic_Heading_13 = 'Total';

 // PAR.Avail Ship Date 13 USR = CON.*ZERO
 PAR.Avail_Ship_Date_13_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 13 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_13 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 13 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_13_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 14 = CON.Total
 PAR.Generic_Heading_14 = 'Total';

 // PAR.Avail Ship Date 14 USR = CON.*ZERO
 PAR.Avail_Ship_Date_14_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 14 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_14 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 14 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_14_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 15 = CON.Total
 PAR.Generic_Heading_15 = 'Total';

 // PAR.Avail Ship Date 15 USR = CON.*ZERO
 PAR.Avail_Ship_Date_15_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 15 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_15 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 15 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_15_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 16 = CON.Total
 PAR.Generic_Heading_16 = 'Total';

 // PAR.Avail Ship Date 16 USR = CON.*ZERO
 PAR.Avail_Ship_Date_16_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 16 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_16 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 16 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_16_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.Avail Ship Date 17 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_17_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.Avail Ship Date 18 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_18_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.Avail Ship Date 19 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_19_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.Avail Ship Date 20 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_20_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.Avail Ship Date 21 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_21_USR = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


//?USER: Initialize subfile record from DBF record

// LCL.Warehouse Code = RCD.Warehouse Code
LCL.Warehouse_Code = RCD.Warehouse_Code;

//?RMC 07/17/07 do if line not cancelled
CASE;

// IF RCD.Detail Line Status is Not cancelled
IF RCD.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

// CTL.Ship To Customer = DB1.Ship To Customer
CTL.Ship_To_Customer = DB1.Ship_To_Customer;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Desc. 10 = Condition name of CTL.Header Status
CTL.USR_Desc_10 = RTVCND(CTL.Header_Status);

ENDIF;

EXECUTE FUNCTION(RTV Job Time           RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1470389;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('01');
PARAMETER(CTL.Time);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get EOD Inv
EXECUTE FUNCTION(Rtv Sched Item Info   IF) TYPE(EXCINTFUN)                      AC1540980;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(WRK.Qty_On_Hand_USR);
PARAMETER(WRK.Qty_Sched_Prod_1_USR);
PARAMETER(WRK.Qty_Produced_USR);
PARAMETER(WRK.Qty_Remaining_Prod_USR);
PARAMETER(WRK.Qty_Sched_Ord_1_USR);
PARAMETER(WRK.Qty_EOD_Inv_1_USR);
PARAMETER(WRK.Qty_Sched_Ord_2_USR);
PARAMETER(WRK.Qty_EOD_Inv_2_USR);
PARAMETER(WRK.Qty_Prod_Needed_2_USR);
PARAMETER(WRK.Qty_Prod_Adjusted_2_USR);
PARAMETER(WRK.Qty_Sched_Prod_2_USR);
PARAMETER(WRK.Qty_Sched_Ord_3_USR);
PARAMETER(WRK.Qty_EOD_Inv_3_USR);
PARAMETER(WRK.Qty_Prod_Needed_3_USR);
PARAMETER(WRK.Qty_Prod_Adjusted_3_USR);
PARAMETER(WRK.Qty_Sched_Prod_3_USR);
PARAMETER(LCL.PS_Production_Warehouse);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?Execute internal function

 MOVE *ALL (To: PAR From: CON);

 //?**********  Day 1  **********
 EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Lot Tracking Flag is yes
 IF LCL.Lot_Tracking_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Item Loc Qty Tot  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1517365;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Qty_On_Hand_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty O
  PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV On Hand Qty f/Whse RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1514970;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Qty_On_Hand_USR);
 {
  //?USER: Process Data record

  // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
  PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

 }

 ENDIF;

 //?If inventory qty is less than zero then make zero
 CASE;

 // IF PAR.Qty On-Hand USR is LT Zero
 IF PAR.Qty_On_Hand_USR < *ZERO;

 // PAR.Qty On-Hand USR = CON.*ZERO
 PAR.Qty_On_Hand_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('S');
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_1_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 1 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_1_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 EXECUTE FUNCTION(Rtv Actual Production RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1377968;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(WRK.Production_Weight_USR);
 PARAMETER(PAR.Qty_Produced_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
  PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

  // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
  PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

 }

 //?Remaining to Produce Quantity
 CASE;

 // IF PAR.Qty Sched Prod 1 USR GT PAR.Qty Produced USR
 IF PAR.Qty_Sched_Prod_1_USR > PAR.Qty_Produced_USR;

 // PAR.Qty Remaining Prod USR = PAR.Qty Sched Prod 1 USR - PAR.Qty Produced USR
 PAR.Qty_Remaining_Prod_USR = PAR.Qty_Sched_Prod_1_USR - PAR.Qty_Produced_USR;

 //?Remaining to Produce Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Remaining Prod USR = CON.*ZERO
 PAR.Qty_Remaining_Prod_USR = *ZERO;

 ENDIF;

 //?Rtv Sched wgt qty which is what it was doing. FP1054 4/15/09
 EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_1_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Status Flag 10 Y/N is Yes
  IF PAR.Status_Flag_10_Y_N = 'Y';

  //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?FP1054 if no, accum Ordered & qty & wgt
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_1_USR = ( PAR.Qty_On_Hand_USR + PAR.Qty_Remaining_Prod_USR )
 - PAR.Qty_Sched_Ord_1_USR;

 //?**********  Day 2  **********
 // PAR.Ord/Sch Sts USR = CND.Scheduled
 PAR.Ord_Sch_Sts_USR = 'S';

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(PAR.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_2_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 2 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_2_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_2_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_2_USR = ( PAR.Qty_EOD_Inv_1_USR + PAR.Qty_Sched_Prod_2_USR )
 - PAR.Qty_Sched_Ord_2_USR;

 CASE;

 // IF PAR.Qty EOD Inv 2 USR is LT Zero
 IF PAR.Qty_EOD_Inv_2_USR < *ZERO;

 // PAR.Qty Prod Needed 2 USR = PAR.Qty EOD Inv 2 USR * CON.-1 *Rounded
 PAR.Qty_Prod_Needed_2_USR = PAR.Qty_EOD_Inv_2_USR * -1 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Prod Needed 2 USR = CON.*ZERO
 PAR.Qty_Prod_Needed_2_USR = *ZERO;

 ENDIF;

 // PAR.Qty Prod Adjusted 2 USR = PAR.Qty Sched Prod 2 USR + PAR.Qty Prod Needed 2 U
 PAR.Qty_Prod_Adjusted_2_USR = PAR.Qty_Sched_Prod_2_USR + PAR.Qty_Prod_Needed_2_USR;

 //?**********  Day 3  **********
 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_3_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 3 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_3_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_3_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_3_USR = ( PAR.Qty_EOD_Inv_2_USR + PAR.Qty_Sched_Prod_3_USR )
 - PAR.Qty_Sched_Ord_3_USR;

 CASE;

 // IF PAR.Qty EOD Inv 3 USR is LT Zero
 IF PAR.Qty_EOD_Inv_3_USR < *ZERO;

 // PAR.Qty Prod Needed 3 USR = PAR.Qty EOD Inv 3 USR * CON.-1 *Rounded
 PAR.Qty_Prod_Needed_3_USR = PAR.Qty_EOD_Inv_3_USR * -1 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Prod Needed 3 USR = CON.*ZERO
 PAR.Qty_Prod_Needed_3_USR = *ZERO;

 ENDIF;

 // PAR.Qty Prod Adjusted 3 USR = PAR.Qty Sched Prod 3 USR + PAR.Qty Prod Needed 3 U
 PAR.Qty_Prod_Adjusted_3_USR = PAR.Qty_Sched_Prod_3_USR + PAR.Qty_Prod_Needed_3_USR;

}


//?EOD
CASE;

// IF CTL.Scheduled Ship Date EQ CTL.USR Day 1
IF CTL.Scheduled_Ship_Date = CTL.USR_Day_1;

// RCD.Qty EOD Inv 3 USR = WRK.Qty EOD Inv 1 USR
RCD.Qty_EOD_Inv_3_USR = WRK.Qty_EOD_Inv_1_USR;

//?EOD
// IF CTL.Scheduled Ship Date EQ CTL.USR Day 2
IF CTL.Scheduled_Ship_Date = CTL.USR_Day_2;

// RCD.Qty EOD Inv 3 USR = WRK.Qty EOD Inv 2 USR
RCD.Qty_EOD_Inv_3_USR = WRK.Qty_EOD_Inv_2_USR;

//?EOD
// IF CTL.Scheduled Ship Date EQ CTL.USR Day 3
IF CTL.Scheduled_Ship_Date = CTL.USR_Day_3;

// RCD.Qty EOD Inv 3 USR = WRK.Qty EOD Inv 3 USR
RCD.Qty_EOD_Inv_3_USR = WRK.Qty_EOD_Inv_3_USR;

ENDIF;

//?EOD GT CTL Date  Move Zeros
CASE;

// IF CTL.Scheduled Ship Date GT CTL.USR Day 3
IF CTL.Scheduled_Ship_Date > CTL.USR_Day_3;

// RCD.Qty EOD Inv 3 USR = CON.*ZERO
RCD.Qty_EOD_Inv_3_USR = *ZERO;

ENDIF;

// RCD.Qty 5.0 USR = DB1.Quantity Ordered
RCD.Qty_5_0_USR = DB1.Quantity_Ordered;

// RCD.Qty On-Hand USR = DB1.Quantity Scheduled
RCD.Qty_On_Hand_USR = DB1.Quantity_Scheduled;

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Warehouse_Description);
PARAMETER(WRK.Lot_Tracking_Flag);
PARAMETER(PAR.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
PARAMETER('T');
PARAMETER(WRK.Maximum_pounds);
PARAMETER(PAR.Load_Size_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


ENDIF;

//?Warehouse Is Not Equal to Blank  Do all Process
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// OR WRK.Record Found USR is Record Found
OR WRK.Record_Found_USR = 'Y';

EXECUTE FUNCTION(Rtv PA For 21 Days    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1543177;
PARAMETER(PAR.Warehouse_Type);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
PARAMETER(WRK.USR_Day_1);
PARAMETER(WRK.USR_Day_2);
PARAMETER(WRK.USR_Day_3);
PARAMETER(WRK.USR_Day_4);
PARAMETER(WRK.USR_Day_5);
PARAMETER(WRK.USR_Day_6);
PARAMETER(WRK.USR_Day_7);
PARAMETER(WRK.USR_Day_8);
PARAMETER(WRK.USR_Day_9);
PARAMETER(WRK.USR_Day_10);
PARAMETER(WRK.USR_Day_11);
PARAMETER(WRK.USR_Day_12);
PARAMETER(WRK.USR_Day_13);
PARAMETER(WRK.USR_Day_14);
PARAMETER(WRK.USR_Day_15);
PARAMETER(WRK.USR_Day_16);
PARAMETER(WRK.USR_Day_17);
PARAMETER(WRK.USR_Day_18);
PARAMETER(WRK.USR_Day_19);
PARAMETER(WRK.USR_Day_20);
PARAMETER(WRK.USR_Day_21);
PARAMETER(WRK.Order_Hold_Over_USR);
PARAMETER(WRK.Order_Hold_Over_Alloc_USR);
PARAMETER(WRK.Day_1_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_2_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_3_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_4_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_5_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_6_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_7_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_8_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_9_Rsrvd_Other_Whse_Fl);
PARAMETER(WRK.Day_10_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_11_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_12_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_13_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_14_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_15_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_16_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_17_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_18_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_19_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_20_Rsrv_Other_Whse_Fl);
PARAMETER(WRK.Day_21_Rsrv_Other_Whse_Fl);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Day_1_Inventory_Total_USR);
PARAMETER(WRK.Day_2_Inventory_Total_USR);
PARAMETER(WRK.Day_3_Inventory_Total_USR);
PARAMETER(WRK.Day_4_Inventory_Total_USR);
PARAMETER(WRK.Day_5_Inventory_Total_USR);
PARAMETER(WRK.Day_6_Inventory_Total_USR);
PARAMETER(WRK.Day_7_Inventory_Total_USR);
PARAMETER(WRK.Day_8_Inventory_Total_USR);
PARAMETER(WRK.Day_9_Inventory_Total_USR);
PARAMETER(WRK.Day_10_Inventory_Totl_USR);
PARAMETER(WRK.Day_11_Inventory_Totl_USR);
PARAMETER(WRK.Day_12_Inventory_Totl_USR);
PARAMETER(WRK.Day_13_Inventory_Totl_USR);
PARAMETER(WRK.Day_14_Inventory_Totl_USR);
PARAMETER(WRK.Day_1_Production_TotalUSR);
PARAMETER(WRK.Day_2_Production_TotalUSR);
PARAMETER(WRK.Day_3_Production_TotalUSR);
PARAMETER(WRK.Day_4_Production_TotalUSR);
PARAMETER(WRK.Day_5_Production_TotalUSR);
PARAMETER(WRK.Day_6_Production_TotalUSR);
PARAMETER(WRK.Day_7_Production_TotalUSR);
PARAMETER(WRK.Day_8_Prod_Total_USR);
PARAMETER(WRK.Day_9_Prod_Total_USR);
PARAMETER(WRK.Day_10_Prod_Total_USR);
PARAMETER(WRK.Day_11_Prod_Total_USR);
PARAMETER(WRK.Day_12_Prod_Total_USR);
PARAMETER(WRK.Day_13_Prod_Total_USR);
PARAMETER(WRK.Day_14_Prod_Total_USR);
PARAMETER(WRK.Day_15_Prod_Total_USR);
PARAMETER(WRK.Day_16_Prod_Total_USR);
PARAMETER(WRK.Day_17_Prod_Total_USR);
PARAMETER(WRK.Day_18_Prod_Total_USR);
PARAMETER(WRK.Day_19_Prod_Total_USR);
PARAMETER(WRK.Day_20_Prod_Total_USR);
PARAMETER(WRK.Day_21_Prod_Total_USR);
PARAMETER(WRK.Day_1_Sales_Total_USR);
PARAMETER(WRK.Day_2_Sales_Total_USR);
PARAMETER(WRK.Day_3_Sales_Total_USR);
PARAMETER(WRK.Day_4_Sales_Total_USR);
PARAMETER(WRK.Day_5_Sales_Total_USR);
PARAMETER(WRK.Day_6_Sales_Total_USR);
PARAMETER(WRK.Day_7_Sales_Total_USR);
PARAMETER(WRK.Day_8_Sales_Total_USR);
PARAMETER(WRK.Day_9_Sales_Total_USR);
PARAMETER(WRK.Day_10_Sales_Total_USR);
PARAMETER(WRK.Day_11_Sales_Total_USR);
PARAMETER(WRK.Day_12_Sales_Total_USR);
PARAMETER(WRK.Day_13_Sales_Total_USR);
PARAMETER(WRK.Day_14_Sales_Total_USR);
PARAMETER(WRK.Day_15_Sales_Total_USR);
PARAMETER(WRK.Day_16_Sales_Total_USR);
PARAMETER(WRK.Day_17_Sales_Total_USR);
PARAMETER(WRK.Day_18_Sales_Total_USR);
PARAMETER(WRK.Day_19_Sales_Total_USR);
PARAMETER(WRK.Day_20_Sales_Total_USR);
PARAMETER(WRK.Day_21_Sales_Total_USR);
PARAMETER(PAR.Day_1_Availability_USR);
PARAMETER(PAR.Day_2_Availability_USR);
PARAMETER(PAR.Day_3_Availability_USR);
PARAMETER(PAR.Day_4_Availability_USR);
PARAMETER(PAR.Day_5_Availability_USR);
PARAMETER(PAR.Day_6_Availability_USR);
PARAMETER(PAR.Day_7_Availability_USR);
PARAMETER(PAR.Day_8_Availability_USR);
PARAMETER(PAR.Day_9_Availability_USR);
PARAMETER(PAR.Day_10_Availability_USR);
PARAMETER(PAR.Day_11_Availability_USR);
PARAMETER(PAR.Day_12_Availability_USR);
PARAMETER(PAR.Day_13_Availability_USR);
PARAMETER(PAR.Day_14_Availability_USR);
PARAMETER(PAR.Day_15_Availability_USR);
PARAMETER(PAR.Day_16_Availability_USR);
PARAMETER(PAR.Day_17_Availability_USR);
PARAMETER(PAR.Day_18_Availability_USR);
PARAMETER(PAR.Day_19_Availability_USR);
PARAMETER(PAR.Day_20_Availability_USR);
PARAMETER(PAR.Day_21_Availability_USR);
PARAMETER(WRK.Day_1_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_2_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_3_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_4_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_5_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_6_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_7_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_8_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_9_Schd_Ship_Total_USR);
PARAMETER(WRK.Day_10_SchdShip_Total_USR);
PARAMETER(WRK.Day_11_SchdShip_Total_USR);
PARAMETER(WRK.Day_12_SchdShip_Total_USR);
PARAMETER(WRK.Day_13_SchdShip_Total_USR);
PARAMETER(WRK.Day_14_SchdShip_Total_USR);
PARAMETER(WRK.Day_15_SchdShip_Total_USR);
PARAMETER(WRK.Day_16_SchdShip_Total_USR);
PARAMETER(WRK.Day_17_SchdShip_Total_USR);
PARAMETER(WRK.Day_18_SchdShip_Total_USR);
PARAMETER(WRK.Day_19_SchdShip_Total_USR);
PARAMETER(WRK.Day_20_SchdShip_Total_USR);
PARAMETER(WRK.Day_21_SchdShip_Total_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 //?Check for matching warehouse code and warehouse type
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // AND PAR.Warehouse Type is Equal blank
 AND PAR.Warehouse_Type = *BLANK;

 EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(PAR.USR_Day_9);
 PARAMETER(PAR.USR_Day_10);
 PARAMETER(PAR.USR_Day_11);
 PARAMETER(PAR.USR_Day_12);
 PARAMETER(PAR.USR_Day_13);
 PARAMETER(PAR.USR_Day_14);
 PARAMETER(PAR.USR_Day_15);
 PARAMETER(PAR.USR_Day_16);
 PARAMETER(PAR.USR_Day_17);
 PARAMETER(PAR.USR_Day_18);
 PARAMETER(PAR.USR_Day_19);
 PARAMETER(PAR.USR_Day_20);
 PARAMETER(PAR.USR_Day_21);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_9_Production_USR);
 PARAMETER(PAR.Day_10_Production_USR);
 PARAMETER(PAR.Day_11_Production_USR);
 PARAMETER(PAR.Day_12_Production_USR);
 PARAMETER(PAR.Day_13_Production_USR);
 PARAMETER(PAR.Day_14_Production_USR);
 PARAMETER(PAR.Day_15_Production_USR);
 PARAMETER(PAR.Day_16_Production_USR);
 PARAMETER(PAR.Day_17_Production_USR);
 PARAMETER(PAR.Day_18_Production_USR);
 PARAMETER(PAR.Day_19_Production_USR);
 PARAMETER(PAR.Day_20_Production_USR);
 PARAMETER(PAR.Day_21_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_9_Sales_USR);
 PARAMETER(PAR.Day_11_Sales_USR);
 PARAMETER(PAR.Day_12_Sales_USR);
 PARAMETER(PAR.Day_13_Sales_USR);
 PARAMETER(PAR.Day_14_Sales_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_10_Sales_USR);
 PARAMETER(PAR.Day_15_Sales_USR);
 PARAMETER(PAR.Day_16_Sales_USR);
 PARAMETER(PAR.Day_17_Sales_USR);
 PARAMETER(PAR.Day_18_Sales_USR);
 PARAMETER(PAR.Day_19_Sales_USR);
 PARAMETER(PAR.Day_20_Sales_USR);
 PARAMETER(PAR.Day_21_Sales_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(PAR.Order_Hold_Over_USR);
 PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.Day_9_Inventory_USR);
 PARAMETER(PAR.Day_10_Inventory_USR);
 PARAMETER(PAR.Day_11_Inventory_USR);
 PARAMETER(PAR.Day_12_Inventory_USR);
 PARAMETER(PAR.Day_13_Inventory_USR);
 PARAMETER(PAR.Day_14_Inventory_USR);
 PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
 PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 {
  //?Execute internal function

  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv PA Inv/Hold Overs XF.
  CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(PAR.Lot_Tracking_Flag);

  EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Process Data record

   //?Is it time to Quit ??
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PA Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Production based on Unit Weight or Pieces
   CASE;

   // IF PAR.Unit Weight is Greater than zero
   IF PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y';

   //?Retrieve production according to day
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?Create array to be used for PA Calc when orders are processed.
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  //?Clear PA Array
  EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
   PARAMETER(DB1.Avail_Ship_Date_USR);
  }

  // Day 1 Available
  PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
  - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER('N');
  // Day 2 Available
  PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
  - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER('N');
  // Day 3 Available
  PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
  - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER('N');
  // Day 4 Available
  PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
  - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER('N');
  // Day 5 Available
  PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
  - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER('N');
  // Day 6 Available
  PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
  - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER('N');
  // Day 7 Available
  PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
  - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER('N');
  // Day 8 Available
  PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
  - PAR.Day_8_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER('N');
  // Day 9 Available
  PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
  - PAR.Day_9_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER('N');
  // Day 10 Available
  PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
  - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER('N');
  // Day 11 Available
  PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
  - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER('N');
  // Day 12 Available
  PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
  - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER('N');
  // Day 13 Available
  PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
  - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER('N');
  // Day 14 Available
  PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
  - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER('N');
  // Day 15 Available
  PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
  - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER('N');
  // Day 16 Available
  PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
  - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER('N');
  // Day 17 Available
  PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
  - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER('N');
  // Day 18 Available
  PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
  - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER('N');
  // Day 19 Available
  PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
  - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER('N');
  // Day 20 Available
  PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
  - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER('N');
  // Day 21 Available
  PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
  - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER('N');
  ENDIF;

  EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   PARAMETER(LCL.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   // AND PAR.Order Number NE DB1.Order Number
   AND PAR.Order_Number <> DB1.Order_Number;

   // AND LCL.Billing Activity Type is Invoice or Transfer
   AND LCL.Billing_Activity_Type = '1'/'4';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

  }

  //?If this is a production whse, then reserve other whse orders.
  CASE;

  // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
  IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

  // OR PAR.Production Warehouse Code is Warehouse Code Blank
  OR PAR.Production_Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?If warehouse ordered not equal to warehouse scheduled, then reserve
   CASE;

   // IF DB1.Warehouse Code NE DB1.Order From Warehouse
   IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

   EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER('Y');
   }

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?Retrieve Sched Ship/Allocation/Available from PA Array
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 //?Check for matching warehouse code and warehouse type
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If whse code is blank & whse type isn't, calculate for that whse type only
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // AND PAR.Warehouse Type EQ DB1.Warehouse Type
 AND PAR.Warehouse_Type = DB1.Warehouse_Type;

 EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(PAR.USR_Day_9);
 PARAMETER(PAR.USR_Day_10);
 PARAMETER(PAR.USR_Day_11);
 PARAMETER(PAR.USR_Day_12);
 PARAMETER(PAR.USR_Day_13);
 PARAMETER(PAR.USR_Day_14);
 PARAMETER(PAR.USR_Day_15);
 PARAMETER(PAR.USR_Day_16);
 PARAMETER(PAR.USR_Day_17);
 PARAMETER(PAR.USR_Day_18);
 PARAMETER(PAR.USR_Day_19);
 PARAMETER(PAR.USR_Day_20);
 PARAMETER(PAR.USR_Day_21);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_9_Production_USR);
 PARAMETER(PAR.Day_10_Production_USR);
 PARAMETER(PAR.Day_11_Production_USR);
 PARAMETER(PAR.Day_12_Production_USR);
 PARAMETER(PAR.Day_13_Production_USR);
 PARAMETER(PAR.Day_14_Production_USR);
 PARAMETER(PAR.Day_15_Production_USR);
 PARAMETER(PAR.Day_16_Production_USR);
 PARAMETER(PAR.Day_17_Production_USR);
 PARAMETER(PAR.Day_18_Production_USR);
 PARAMETER(PAR.Day_19_Production_USR);
 PARAMETER(PAR.Day_20_Production_USR);
 PARAMETER(PAR.Day_21_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_9_Sales_USR);
 PARAMETER(PAR.Day_11_Sales_USR);
 PARAMETER(PAR.Day_12_Sales_USR);
 PARAMETER(PAR.Day_13_Sales_USR);
 PARAMETER(PAR.Day_14_Sales_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_10_Sales_USR);
 PARAMETER(PAR.Day_15_Sales_USR);
 PARAMETER(PAR.Day_16_Sales_USR);
 PARAMETER(PAR.Day_17_Sales_USR);
 PARAMETER(PAR.Day_18_Sales_USR);
 PARAMETER(PAR.Day_19_Sales_USR);
 PARAMETER(PAR.Day_20_Sales_USR);
 PARAMETER(PAR.Day_21_Sales_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(PAR.Order_Hold_Over_USR);
 PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.Day_9_Inventory_USR);
 PARAMETER(PAR.Day_10_Inventory_USR);
 PARAMETER(PAR.Day_11_Inventory_USR);
 PARAMETER(PAR.Day_12_Inventory_USR);
 PARAMETER(PAR.Day_13_Inventory_USR);
 PARAMETER(PAR.Day_14_Inventory_USR);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 {
  //?Execute internal function

  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv PA Inv/Hold Overs XF.
  CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(PAR.Lot_Tracking_Flag);

  EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Process Data record

   //?Is it time to Quit ??
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PA Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Production based on Unit Weight or Pieces
   CASE;

   // IF PAR.Unit Weight is Greater than zero
   IF PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y';

   //?Retrieve production according to day
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?Create array to be used for PA Calc when orders are processed.
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  //?Clear PA Array
  EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
   PARAMETER(DB1.Avail_Ship_Date_USR);
  }

  // Day 1 Available
  PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
  - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER('N');
  // Day 2 Available
  PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
  - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER('N');
  // Day 3 Available
  PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
  - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER('N');
  // Day 4 Available
  PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
  - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER('N');
  // Day 5 Available
  PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
  - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER('N');
  // Day 6 Available
  PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
  - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER('N');
  // Day 7 Available
  PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
  - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER('N');
  // Day 8 Available
  PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
  - PAR.Day_8_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER('N');
  // Day 9 Available
  PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
  - PAR.Day_9_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER('N');
  // Day 10 Available
  PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
  - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER('N');
  // Day 11 Available
  PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
  - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER('N');
  // Day 12 Available
  PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
  - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER('N');
  // Day 13 Available
  PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
  - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER('N');
  // Day 14 Available
  PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
  - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER('N');
  // Day 15 Available
  PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
  - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER('N');
  // Day 16 Available
  PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
  - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER('N');
  // Day 17 Available
  PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
  - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER('N');
  // Day 18 Available
  PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
  - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER('N');
  // Day 19 Available
  PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
  - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER('N');
  // Day 20 Available
  PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
  - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER('N');
  // Day 21 Available
  PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
  - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER('N');
  ENDIF;

  EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   PARAMETER(LCL.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   // AND PAR.Order Number NE DB1.Order Number
   AND PAR.Order_Number <> DB1.Order_Number;

   // AND LCL.Billing Activity Type is Invoice or Transfer
   AND LCL.Billing_Activity_Type = '1'/'4';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

  }

  //?If this is a production whse, then reserve other whse orders.
  CASE;

  // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
  IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

  // OR PAR.Production Warehouse Code is Warehouse Code Blank
  OR PAR.Production_Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?If warehouse ordered not equal to warehouse scheduled, then reserve
   CASE;

   // IF DB1.Warehouse Code NE DB1.Order From Warehouse
   IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

   EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER('Y');
   }

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?Retrieve Sched Ship/Allocation/Available from PA Array
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 //?If whse code is blank & whse type isn't, calculate for that whse type only
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If warehouse code is entered, calculate for that warehouse only
 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(Rtv PA For 21 Days    IF) TYPE(EXCINTFUN)                      AC1543204;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(PAR.USR_Day_9);
 PARAMETER(PAR.USR_Day_10);
 PARAMETER(PAR.USR_Day_11);
 PARAMETER(PAR.USR_Day_12);
 PARAMETER(PAR.USR_Day_13);
 PARAMETER(PAR.USR_Day_14);
 PARAMETER(PAR.USR_Day_15);
 PARAMETER(PAR.USR_Day_16);
 PARAMETER(PAR.USR_Day_17);
 PARAMETER(PAR.USR_Day_18);
 PARAMETER(PAR.USR_Day_19);
 PARAMETER(PAR.USR_Day_20);
 PARAMETER(PAR.USR_Day_21);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_9_Production_USR);
 PARAMETER(PAR.Day_10_Production_USR);
 PARAMETER(PAR.Day_11_Production_USR);
 PARAMETER(PAR.Day_12_Production_USR);
 PARAMETER(PAR.Day_13_Production_USR);
 PARAMETER(PAR.Day_14_Production_USR);
 PARAMETER(PAR.Day_15_Production_USR);
 PARAMETER(PAR.Day_16_Production_USR);
 PARAMETER(PAR.Day_17_Production_USR);
 PARAMETER(PAR.Day_18_Production_USR);
 PARAMETER(PAR.Day_19_Production_USR);
 PARAMETER(PAR.Day_20_Production_USR);
 PARAMETER(PAR.Day_21_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_9_Sales_USR);
 PARAMETER(PAR.Day_11_Sales_USR);
 PARAMETER(PAR.Day_12_Sales_USR);
 PARAMETER(PAR.Day_13_Sales_USR);
 PARAMETER(PAR.Day_14_Sales_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_10_Sales_USR);
 PARAMETER(PAR.Day_15_Sales_USR);
 PARAMETER(PAR.Day_16_Sales_USR);
 PARAMETER(PAR.Day_17_Sales_USR);
 PARAMETER(PAR.Day_18_Sales_USR);
 PARAMETER(PAR.Day_19_Sales_USR);
 PARAMETER(PAR.Day_20_Sales_USR);
 PARAMETER(PAR.Day_21_Sales_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(PAR.Order_Hold_Over_USR);
 PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.Day_9_Inventory_USR);
 PARAMETER(PAR.Day_10_Inventory_USR);
 PARAMETER(PAR.Day_11_Inventory_USR);
 PARAMETER(PAR.Day_12_Inventory_USR);
 PARAMETER(PAR.Day_13_Inventory_USR);
 PARAMETER(PAR.Day_14_Inventory_USR);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 {
  //?Execute internal function

  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv Prod Whse/Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1560479;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv PA Inv/Hold Overs XF.
  CALL PROGRAM(Rtv PA Inv/Hold Overs XF) ('PDS0XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Order_Hold_Over_USR);
  PARAMETER(PAR.Order_Hold_Over_Alloc_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_9_Inventory_USR);
  PARAMETER(PAR.Day_10_Inventory_USR);
  PARAMETER(PAR.Day_11_Inventory_USR);
  PARAMETER(PAR.Day_12_Inventory_USR);
  PARAMETER(PAR.Day_13_Inventory_USR);
  PARAMETER(PAR.Day_14_Inventory_USR);
  PARAMETER(PAR.Lot_Tracking_Flag);

  EXECUTE FUNCTION(Rtv PA Production     RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1543287;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Process Data record

   //?Is it time to Quit ??
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PA Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Production based on Unit Weight or Pieces
   CASE;

   // IF PAR.Unit Weight is Greater than zero
   IF PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y';

   //?Retrieve production according to day
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PA Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   //?Retrieve production according to day
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   EXECUTE FUNCTION(Rtv PA Prod by Day    IF) TYPE(EXCINTFUN)                      AC1543291;
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Production Date EQ JOB.*Job date
    IF PAR.Production_Date = JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // AND PAR.Avail Ship Date USR EQ JOB.*Job date
    AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Production Type is Plan
    AND PAR.Production_Type = 'P';

    // AND PAR.Fresh Chilling Time is GT Zero
    AND PAR.Fresh_Chilling_Time > *ZERO;

    // IF PAR.Production Date LT JOB.*Job date
    IF PAR.Production_Date < JOB.*Job_date;

    // AND PAR.Avail Ship Date USR GT JOB.*Job date
    AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

    // IF PAR.Production Type is Schedule Saved in the am
    IF PAR.Production_Type = 'X';

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Calculate Production
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( ( PAR.PS_Weight_Standard + PAR.PS_Weight_Prod_Adj )
    - PAR.PS_Weight_Converted ) - PAR.PS_Weight_Whs_Tfr_Adj ) / PAR.Unit_Weight 'H';

    //?Calculate Production
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //? **If Piece count item use  PIECE fields
    // Production (No Dec)
    PAR.Quantity_Production_USR = ( ( PAR.PS_Pieces_Standard + PAR.PS_Pieces_Prod_Adj )
    - PAR.PS_Pieces_Converted ) / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    ENDIF;

    //?If production is negative then make zero
    CASE;

    // IF PAR.Quantity Production USR is LT Zero
    IF PAR.Quantity_Production_USR < *ZERO;

    // PAR.Quantity Production USR = CON.*ZERO
    PAR.Quantity_Production_USR = *ZERO;

    ENDIF;

    // PAR.Production Date USR = PAR.Production Date
    PAR.Production_Date_USR = PAR.Production_Date;

    ENDIF;

   }

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?Create array to be used for PA Calc when orders are processed.
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  //?Clear PA Array
  EXECUTE FUNCTION(Del PA Work Array Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543710;
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del PA Work Array Roll DL) TYPE(DLTOBJ) ARRAY(PA_Work_Array_forAC1543711;
   PARAMETER(DB1.Avail_Ship_Date_USR);
  }

  // Day 1 Available
  PAR.Day_1_Availability_USR = ( ( PAR.Day_1_Inventory_USR + PAR.Day_1_Production_USR )
  - PAR.Day_1_Sched_Shipments_USR ) - PAR.Day_1_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER('N');
  // Day 2 Available
  PAR.Day_2_Availability_USR = ( ( PAR.Day_2_Inventory_USR + PAR.Day_2_Production_USR )
  - PAR.Day_2_Sched_Shipments_USR ) - PAR.Day_2_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER('N');
  // Day 3 Available
  PAR.Day_3_Availability_USR = ( ( PAR.Day_3_Inventory_USR + PAR.Day_3_Production_USR )
  - PAR.Day_3_Sched_Shipments_USR ) - PAR.Day_3_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER('N');
  // Day 4 Available
  PAR.Day_4_Availability_USR = ( ( PAR.Day_4_Inventory_USR + PAR.Day_4_Production_USR )
  - PAR.Day_4_Sched_Shipments_USR ) - PAR.Day_4_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER('N');
  // Day 5 Available
  PAR.Day_5_Availability_USR = ( ( PAR.Day_5_Inventory_USR + PAR.Day_5_Production_USR )
  - PAR.Day_5_Sched_Shipments_USR ) - PAR.Day_5_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER('N');
  // Day 6 Available
  PAR.Day_6_Availability_USR = ( ( PAR.Day_6_Inventory_USR + PAR.Day_6_Production_USR )
  - PAR.Day_6_Sched_Shipments_USR ) - PAR.Day_6_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER('N');
  // Day 7 Available
  PAR.Day_7_Availability_USR = ( ( PAR.Day_7_Inventory_USR + PAR.Day_7_Production_USR )
  - PAR.Day_7_Sched_Shipments_USR ) - PAR.Day_7_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER('N');
  // Day 8 Available
  PAR.Day_8_Availability_USR = ( PAR.Day_8_Production_USR - PAR.Day_8_Sched_Shipments_USR )
  - PAR.Day_8_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER('N');
  // Day 9 Available
  PAR.Day_9_Availability_USR = ( PAR.Day_9_Production_USR - PAR.Day_9_Sched_Shipments_USR )
  - PAR.Day_9_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER('N');
  // Day 10 Available
  PAR.Day_10_Availability_USR = ( PAR.Day_10_Production_USR
  - PAR.Day_10_Sched_Shipment_USR ) - PAR.Day_10_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER('N');
  // Day 11 Available
  PAR.Day_11_Availability_USR = ( PAR.Day_11_Production_USR
  - PAR.Day_11_Sched_Shipment_USR ) - PAR.Day_11_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER('N');
  // Day 12 Available
  PAR.Day_12_Availability_USR = ( PAR.Day_12_Production_USR
  - PAR.Day_12_Sched_Shipment_USR ) - PAR.Day_12_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER('N');
  // Day 13 Available
  PAR.Day_13_Availability_USR = ( PAR.Day_13_Production_USR
  - PAR.Day_13_Sched_Shipment_USR ) - PAR.Day_13_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER('N');
  // Day 14 Available
  PAR.Day_14_Availability_USR = ( PAR.Day_14_Production_USR
  - PAR.Day_14_Sched_Shipment_USR ) - PAR.Day_14_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER('N');
  // Day 15 Available
  PAR.Day_15_Availability_USR = ( PAR.Day_15_Production_USR
  - PAR.Day_15_Sched_Shipment_USR ) - PAR.Day_15_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER('N');
  // Day 16 Available
  PAR.Day_16_Availability_USR = ( PAR.Day_16_Production_USR
  - PAR.Day_16_Sched_Shipment_USR ) - PAR.Day_16_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER('N');
  // Day 17 Available
  PAR.Day_17_Availability_USR = ( PAR.Day_17_Production_USR
  - PAR.Day_17_Sched_Shipment_USR ) - PAR.Day_17_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER('N');
  // Day 18 Available
  PAR.Day_18_Availability_USR = ( PAR.Day_18_Production_USR
  - PAR.Day_18_Sched_Shipment_USR ) - PAR.Day_18_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER('N');
  // Day 19 Available
  PAR.Day_19_Availability_USR = ( PAR.Day_19_Production_USR
  - PAR.Day_19_Sched_Shipment_USR ) - PAR.Day_19_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER('N');
  // Day 20 Available
  PAR.Day_20_Availability_USR = ( PAR.Day_20_Production_USR
  - PAR.Day_20_Sched_Shipment_USR ) - PAR.Day_20_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER('N');
  // Day 21 Available
  PAR.Day_21_Availability_USR = ( PAR.Day_21_Production_USR
  - PAR.Day_21_Sched_Shipment_USR ) - PAR.Day_21_Sales_USR;

  EXECUTE FUNCTION(CRT PA Work Array     CR) TYPE(CRTOBJ) ARRAY(PA_Work_Array_for_AC1543352;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(WRK.Quantity_Inventory_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER('N');
  ENDIF;

  EXECUTE FUNCTION(Rtv Sched Ship/Clc PA RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1543296;
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Production_Warehouse_Code);
  PARAMETER(PAR.Lot_Tracking_Flag);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   PARAMETER(LCL.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   // AND PAR.Order Number NE DB1.Order Number
   AND PAR.Order_Number <> DB1.Order_Number;

   // AND LCL.Billing Activity Type is Invoice or Transfer
   AND LCL.Billing_Activity_Type = '1'/'4';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship D
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?Retrieve Week End date for *JOB DATE
   //?Determine production type
   CASE;

   // IF DB1.Scheduled Ship Date EQ JOB.*Job date
   IF DB1.Scheduled_Ship_Date = JOB.*Job_date;

   // PAR.Production Type = CND.Schedule
   PAR.Production_Type = 'S';

   //?Determine production type
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Production Type = CND.Plan
   PAR.Production_Type = 'P';

   ENDIF;

   EXECUTE FUNCTION(Rtv Production Date   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1583635;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(LCL.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Scheduled_Ship_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
   PARAMETER(PAR.Company_Number);
   PARAMETER(JOB.*Job_date);
   PARAMETER(WRK.Julian_Date);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(WRK.OM_Week);
   PARAMETER(WRK.Day_of_Week);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(RTV Bgn/End Dts Prd/Yr RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1470471;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Accounting_Year_Code);
   PARAMETER(PAR.Accounting_Period_Code);
   PARAMETER(7);
   PARAMETER(PAR.Week_Number);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   CASE;

   // IF DB1.Warehouse Code NE PAR.Production Warehouse Code
   IF DB1.Warehouse_Code <> PAR.Production_Warehouse_Code;

   EXECUTE FUNCTION(Rtv Qty for Prod Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)          AC1560628;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Initialize routine

    // PAR.OD Quantity Scheduled = CON.*ZERO
    PAR.OD_Qty_Cnsmd_Pieces_Sched = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code NE DB1.Order From Warehouse
    IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

    // PAR.OD Quantity Scheduled = PAR.OD Quantity Scheduled + DB1.OD Quantity Schedule
    PAR.OD_Qty_Cnsmd_Pieces_Sched = PAR.OD_Qty_Cnsmd_Pieces_Sched
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

   }

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled - PAR.Qty Not Alloc on Ship Dt
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled - PAR.Qty_Not_Alloc_on_Ship_Dt;

   //?If warehouse is not a production whse, rtv sched qty from prod whse
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Qty Not Alloc on Ship Dt = CON.*ZERO
   PAR.Qty_Not_Alloc_on_Ship_Dt = *ZERO;

   // PAR.ATS Quantity Need USR = DB1.Quantity Scheduled
   PAR.ATS_Quantity_Need_USR = DB1.Quantity_Scheduled;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Inv for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_RAC1543462;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   PARAMETER(LCL.Production_Date);
   PARAMETER(LCL.Order_Scheduled_Today_USR);
   {
    //?USER: Initialize routine

    // PAR.First Time Flag = CND.Yes
    PAR.First_Time_Flag = 'Y';

    // PAR.Order Scheduled Today USR = CND.no
    PAR.Order_Scheduled_Today_USR = 'N';

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

    CASE;

    // IF PAR.First Time Flag is Yes
    IF PAR.First_Time_Flag = 'Y';

    //?If ord ship is this day, updt Sched Ship/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    ENDIF;

    ENDIF;

    QUIT;

    ENDIF;

    //?Calc new avail with inv if current week, else calc with no inv
    CASE;

    // IF PAR.Production Date LE PAR.Week End Date        USR
    IF PAR.Production_Date <= PAR.Week_End_Date_USR;

    // OR PAR.Lot Tracking Flag is yes
    OR PAR.Lot_Tracking_Flag = 'Y';

    // Avail with inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Inventory_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Calc new avail with inv if current week, else calc with no inv
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Available    SUM = CON.*ZERO
    PAR.Quantity_Available_SUM = *ZERO;

    ENDIF;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR;

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Scheduled;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg SchdShp/Allc/Avail CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1543494;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Order Scheduled Today USR = CND.yes
    PAR.Order_Scheduled_Today_USR = 'Y';

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

    //?USER: Exit processing

    // PAR.ATS Quantity Need USR = PAR.Quantity Sched 1 USR
    PAR.ATS_Quantity_Need_USR = PAR.Quantity_Sched_1_USR;

   }

   //?If order was not scheduled, then schedule
   CASE;

   // IF LCL.Order Scheduled Today USR is no
   IF LCL.Order_Scheduled_Today_USR = 'N';

   EXECUTE FUNCTION(Rtv Change Sched Ship  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1584958;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.Quantity_Scheduled);
   {
    //?USER: Process Data record

    // PAR.Total Sched Shipments USR = DB1.Quantity Sched Ship USR + PAR.Quantity Sched 1 USR
    PAR.Total_Sched_Shipments_USR = DB1.Quantity_Sched_Ship_USR + PAR.Quantity_Sched_1_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - PAR.Total_Sched_Shipments_USR )
    - DB1.Quantity_Sales_USR;

    EXECUTE FUNCTION(Chg SchdShp/Avail      CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_forAC1568264;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Sched_Shipments_USR);
    PARAMETER(PAR.Total_Availability_USR);
   }

   ENDIF;

   //?DOC: 04/11/07 Change Log
   DO;

   //?04/10/07 Effective 04/23/07 representation of Age Code changes
   //?         will be such that Age Code A will be 0 day for boxes
   //?         and combos.  The labels on the cartons will not print
   //?         a date that is offset by Sunday or Holiday.  Instead of
   //?         Code Date, it will be the Pack Date.
   ENDDO;

   //?Set age code to specific day by number
   CASE;

   // IF DB1.Age Code is A: 0 Day
   IF DB1.Age_Code = 'A';

   // PAR.Aging Day = CON.*ZERO
   PAR.Aging_Day = 0;

   //?Set age code to specific day by number
   // IF DB1.Age Code is B: 1 Day
   IF DB1.Age_Code = 'B';

   // PAR.Aging Day = CON.1
   PAR.Aging_Day = 1;

   //?Set age code to specific day by number
   // IF DB1.Age Code is C: 2 Day
   IF DB1.Age_Code = 'C';

   // PAR.Aging Day = CON.2
   PAR.Aging_Day = 2;

   //?Set age code to specific day by number
   // IF DB1.Age Code is D: 3 Day
   IF DB1.Age_Code = 'D';

   // PAR.Aging Day = CON.3
   PAR.Aging_Day = 3;

   //?Set age code to specific day by number
   // IF DB1.Age Code is E: 4 Day
   IF DB1.Age_Code = 'E';

   // PAR.Aging Day = CON.4
   PAR.Aging_Day = 4;

   //?Set age code to specific day by number
   // IF DB1.Age Code is F: 5 Day
   IF DB1.Age_Code = 'F';

   // PAR.Aging Day = CON.5
   PAR.Aging_Day = 5;

   //?Set age code to specific day by number
   // IF DB1.Age Code is G: 6 Day
   IF DB1.Age_Code = 'G';

   // PAR.Aging Day = CON.6
   PAR.Aging_Day = 6;

   //?Set age code to specific day by number
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Aging Day = CON.999
   PAR.Aging_Day = 999;

   ENDIF;

   EXECUTE FUNCTION(Clc Alloc Prod for PA RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1583300;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Aging_Day);
   PARAMETER(PAR.Week_End_Date_USR);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   PARAMETER(PAR.ATS_Quantity_Need_USR);
   PARAMETER(DB1.Quantity_Scheduled);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Lot_Tracking_Flag);
   {
    //?USER: Initialize routine

    // PAR.Quantity Sched 1 USR = PAR.ATS Quantity Need USR
    PAR.Quantity_Sched_1_USR = PAR.ATS_Quantity_Need_USR;

    //?USER: Process Data record

    // PAR.Quantity Allocated USR = CON.*ZERO
    PAR.Quantity_Allocated_USR = *ZERO;

    //?If age day is zero or order has been allocated, then QUIT
    CASE;

    // IF PAR.Aging Day is equal to zero
    IF PAR.Aging_Day = *ZERO;

    // OR PAR.Quantity Sched 1 USR is LE Zero
    OR PAR.Quantity_Sched_1_USR <= *ZERO;

    QUIT;

    ENDIF;

    // Avail with no inventory
    PAR.Quantity_Available_SUM = ( DB1.Quantity_Production_USR - DB1.Quantity_Sched_Ship_USR )
    - DB1.Quantity_Sales_USR;

    //?Allocate Order
    CASE;

    // IF PAR.Quantity Available    SUM is GT Zero
    IF PAR.Quantity_Available_SUM > *ZERO;

    CASE;

    // IF PAR.Quantity Available    SUM GE PAR.Quantity Sched 1 USR
    IF PAR.Quantity_Available_SUM >= PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Allocated USR = PAR.Quantity Sched 1 USR
    PAR.Quantity_Allocated_USR = PAR.Quantity_Sched_1_USR;

    // PAR.Quantity Sched 1 USR = CON.*ZERO
    PAR.Quantity_Sched_1_USR = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Quantity Allocated USR = PAR.Quantity Available    SUM
    PAR.Quantity_Allocated_USR = PAR.Quantity_Available_SUM;

    // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR - PAR.Quantity Available
    PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR - PAR.Quantity_Available_SUM;

    ENDIF;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    CASE;

    // IF DB1.Avail Ship Date USR EQ PAR.Scheduled Ship Date
    IF DB1.Avail_Ship_Date_USR = PAR.Scheduled_Ship_Date;

    //?If ord ship is this day, updt Sched Ship/Alloc/Avail, else Alloc/Avail
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Quantity Allocated U
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Quantity_Allocated_USR;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
    // PAR.Qty Not Alloc on Ship Dt = PAR.Qty Not Alloc on Ship Dt + PAR.Quantity Alloc
    PAR.Qty_Not_Alloc_on_Ship_Dt = PAR.Qty_Not_Alloc_on_Ship_Dt + PAR.Quantity_Allocated_USR;

    ENDIF;

    ENDIF;

    // PAR.Aging Day = PAR.Aging Day - CON.1
    PAR.Aging_Day = PAR.Aging_Day - 1;

    // PAR.First Time Flag = CND.NO
    PAR.First_Time_Flag = 'N';

   }

   //?Change allocation for schedule shipments not scheduled on ship date
   CASE;

   // IF PAR.Qty Not Alloc on Ship Dt is Greater than zero
   IF PAR.Qty_Not_Alloc_on_Ship_Dt > *ZERO;

   EXECUTE FUNCTION(Rtv Change Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1543505;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(PAR.Qty_Not_Alloc_on_Ship_Dt);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR - PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR - PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER(DB1.Reserved_for_Other_Whse);
   }

   ENDIF;

  }

  //?If this is a production whse, then reserve other whse orders.
  CASE;

  // IF PAR.Production Warehouse Code EQ PAR.Warehouse Code
  IF PAR.Production_Warehouse_Code = PAR.Warehouse_Code;

  // OR PAR.Production Warehouse Code is Warehouse Code Blank
  OR PAR.Production_Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Rsrvd Other Whse  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1560700;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Header_Status);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Header Status is Not Comp/Canc/Conf
   IF PAR.Header_Status = 'L'/'A'/'E'/'H';

   //?Is it time to Quit ??
   CASE;

   // IF DB1.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   QUIT;

   ENDIF;

   //?If warehouse ordered not equal to warehouse scheduled, then reserve
   CASE;

   // IF DB1.Warehouse Code NE DB1.Order From Warehouse
   IF DB1.Warehouse_Code <> DB1.Order_From_Warehouse;

   EXECUTE FUNCTION(Rtv Add to Allocation  RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_forAC1560732;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
   {
    //?USER: Process Data record

    // PAR.Total Quantity Alloc USR = DB1.Quantity Sales USR + PAR.Qty Not Alloc on Shi
    PAR.Total_Quantity_Alloc_USR = DB1.Quantity_Sales_USR + PAR.Qty_Not_Alloc_on_Ship_Dt;

    // New Available
    PAR.Total_Availability_USR = ( ( DB1.Quantity_Inventory_USR
    + DB1.Quantity_Production_USR ) - DB1.Quantity_Sched_Ship_USR )
    - PAR.Total_Quantity_Alloc_USR;

    EXECUTE FUNCTION(Chg Alloc/Avail       CH) TYPE(CHGOBJ) ARRAY(PA_Work_Array_for_AC1543498;
    PARAMETER(DB1.Avail_Ship_Date_USR);
    PARAMETER(PAR.Total_Quantity_Alloc_USR);
    PARAMETER(PAR.Total_Availability_USR);
    PARAMETER('Y');
   }

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?Retrieve Sched Ship/Allocation/Available from PA Array
  CASE;

  // IF WRK.BLANK EQ WRK.BLANK
  IF WRK.BLANK = WRK.BLANK;

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_1_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_2_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_3_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_4_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_5_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_6_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_7_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_8_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_9_Rsrvd_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_10_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_11_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_12_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_13_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_14_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_15_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_16_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_17_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_18_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_19_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_20_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv PA Array for Roll RT) TYPE(RTVOBJ) ARRAY(PA_Work_Array_for_AC1543510;
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Day_21_Rsrv_Other_Whse_Fl);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?If match found add up totals
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 // PAR.Day 1 Inventory Total USR = PAR.Day 1 Inventory Total USR + PAR.Day 1 Invent
 PAR.Day_1_Inventory_Total_USR = PAR.Day_1_Inventory_Total_USR + PAR.Day_1_Inventory_USR;

 // PAR.Day 2 Inventory Total USR = PAR.Day 2 Inventory Total USR + PAR.Day 2 Invent
 PAR.Day_2_Inventory_Total_USR = PAR.Day_2_Inventory_Total_USR + PAR.Day_2_Inventory_USR;

 // PAR.Day 3 Inventory Total USR = PAR.Day 3 Inventory Total USR + PAR.Day 3 Invent
 PAR.Day_3_Inventory_Total_USR = PAR.Day_3_Inventory_Total_USR + PAR.Day_3_Inventory_USR;

 // PAR.Day 4 Inventory Total USR = PAR.Day 4 Inventory Total USR + PAR.Day 4 Invent
 PAR.Day_4_Inventory_Total_USR = PAR.Day_4_Inventory_Total_USR + PAR.Day_4_Inventory_USR;

 // PAR.Day 5 Inventory Total USR = PAR.Day 5 Inventory Total USR + PAR.Day 5 Invent
 PAR.Day_5_Inventory_Total_USR = PAR.Day_5_Inventory_Total_USR + PAR.Day_5_Inventory_USR;

 // PAR.Day 6 Inventory Total USR = PAR.Day 6 Inventory Total USR + PAR.Day 6 Invent
 PAR.Day_6_Inventory_Total_USR = PAR.Day_6_Inventory_Total_USR + PAR.Day_6_Inventory_USR;

 // PAR.Day 7 Inventory Total USR = PAR.Day 7 Inventory Total USR + PAR.Day 7 Invent
 PAR.Day_7_Inventory_Total_USR = PAR.Day_7_Inventory_Total_USR + PAR.Day_7_Inventory_USR;

 // PAR.Day 8 Inventory Total USR = PAR.Day 8 Inventory Total USR + PAR.Day 8 Invent
 PAR.Day_8_Inventory_Total_USR = PAR.Day_8_Inventory_Total_USR + PAR.Day_8_Inventory_USR;

 // PAR.Day 9 Inventory Total USR = PAR.Day 9 Inventory Total USR + PAR.Day 9 Invent
 PAR.Day_9_Inventory_Total_USR = PAR.Day_9_Inventory_Total_USR + PAR.Day_9_Inventory_USR;

 // PAR.Day 10 Inventory Totl USR = PAR.Day 10 Inventory Totl USR + PAR.Day 10 Inven
 PAR.Day_10_Inventory_Totl_USR = PAR.Day_10_Inventory_Totl_USR + PAR.Day_10_Inventory_USR;

 // PAR.Day 11 Inventory Totl USR = PAR.Day 11 Inventory Totl USR + PAR.Day 11 Inven
 PAR.Day_11_Inventory_Totl_USR = PAR.Day_11_Inventory_Totl_USR + PAR.Day_11_Inventory_USR;

 // PAR.Day 12 Inventory Totl USR = PAR.Day 12 Inventory Totl USR + PAR.Day 12 Inven
 PAR.Day_12_Inventory_Totl_USR = PAR.Day_12_Inventory_Totl_USR + PAR.Day_12_Inventory_USR;

 // PAR.Day 13 Inventory Totl USR = PAR.Day 13 Inventory Totl USR + PAR.Day 13 Inven
 PAR.Day_13_Inventory_Totl_USR = PAR.Day_13_Inventory_Totl_USR + PAR.Day_13_Inventory_USR;

 // PAR.Day 14 Inventory Totl USR = PAR.Day 14 Inventory Totl USR + PAR.Day 14 Inven
 PAR.Day_14_Inventory_Totl_USR = PAR.Day_14_Inventory_Totl_USR + PAR.Day_14_Inventory_USR;

 // PAR.Day 1 Production TotalUSR = PAR.Day 1 Production TotalUSR + PAR.Day 1 Produc
 PAR.Day_1_Production_TotalUSR = PAR.Day_1_Production_TotalUSR + PAR.Day_1_Production_USR;

 // PAR.Day 2 Production TotalUSR = PAR.Day 2 Production TotalUSR + PAR.Day 2 Produc
 PAR.Day_2_Production_TotalUSR = PAR.Day_2_Production_TotalUSR + PAR.Day_2_Production_USR;

 // PAR.Day 3 Production TotalUSR = PAR.Day 3 Production TotalUSR + PAR.Day 3 Produc
 PAR.Day_3_Production_TotalUSR = PAR.Day_3_Production_TotalUSR + PAR.Day_3_Production_USR;

 // PAR.Day 4 Production TotalUSR = PAR.Day 4 Production TotalUSR + PAR.Day 4 Produc
 PAR.Day_4_Production_TotalUSR = PAR.Day_4_Production_TotalUSR + PAR.Day_4_Production_USR;

 // PAR.Day 5 Production TotalUSR = PAR.Day 5 Production TotalUSR + PAR.Day 5 Produc
 PAR.Day_5_Production_TotalUSR = PAR.Day_5_Production_TotalUSR + PAR.Day_5_Production_USR;

 // PAR.Day 6 Production TotalUSR = PAR.Day 6 Production TotalUSR + PAR.Day 6 Produc
 PAR.Day_6_Production_TotalUSR = PAR.Day_6_Production_TotalUSR + PAR.Day_6_Production_USR;

 // PAR.Day 7 Production TotalUSR = PAR.Day 7 Production TotalUSR + PAR.Day 7 Produc
 PAR.Day_7_Production_TotalUSR = PAR.Day_7_Production_TotalUSR + PAR.Day_7_Production_USR;

 // PAR.Day 8 Prod Total      USR = PAR.Day 8 Prod Total      USR + PAR.Day 8 Produc
 PAR.Day_8_Prod_Total_USR = PAR.Day_8_Prod_Total_USR + PAR.Day_8_Production_USR;

 // PAR.Day 9 Prod Total      USR = PAR.Day 9 Prod Total      USR + PAR.Day 9 Produc
 PAR.Day_9_Prod_Total_USR = PAR.Day_9_Prod_Total_USR + PAR.Day_9_Production_USR;

 // PAR.Day 10 Prod Total     USR = PAR.Day 10 Prod Total     USR + PAR.Day 10 Produ
 PAR.Day_10_Prod_Total_USR = PAR.Day_10_Prod_Total_USR + PAR.Day_10_Production_USR;

 // PAR.Day 11 Prod Total     USR = PAR.Day 11 Prod Total     USR + PAR.Day 11 Produ
 PAR.Day_11_Prod_Total_USR = PAR.Day_11_Prod_Total_USR + PAR.Day_11_Production_USR;

 // PAR.Day 12 Prod Total     USR = PAR.Day 12 Prod Total     USR + PAR.Day 12 Produ
 PAR.Day_12_Prod_Total_USR = PAR.Day_12_Prod_Total_USR + PAR.Day_12_Production_USR;

 // PAR.Day 13 Prod Total     USR = PAR.Day 13 Prod Total     USR + PAR.Day 13 Produ
 PAR.Day_13_Prod_Total_USR = PAR.Day_13_Prod_Total_USR + PAR.Day_13_Production_USR;

 // PAR.Day 14 Prod Total     USR = PAR.Day 14 Prod Total     USR + PAR.Day 14 Produ
 PAR.Day_14_Prod_Total_USR = PAR.Day_14_Prod_Total_USR + PAR.Day_14_Production_USR;

 // PAR.Day 15 Prod Total     USR = PAR.Day 15 Prod Total     USR + PAR.Day 15 Produ
 PAR.Day_15_Prod_Total_USR = PAR.Day_15_Prod_Total_USR + PAR.Day_15_Production_USR;

 // PAR.Day 16 Prod Total     USR = PAR.Day 16 Prod Total     USR + PAR.Day 16 Produ
 PAR.Day_16_Prod_Total_USR = PAR.Day_16_Prod_Total_USR + PAR.Day_16_Production_USR;

 // PAR.Day 17 Prod Total     USR = PAR.Day 17 Prod Total     USR + PAR.Day 17 Produ
 PAR.Day_17_Prod_Total_USR = PAR.Day_17_Prod_Total_USR + PAR.Day_17_Production_USR;

 // PAR.Day 18 Prod Total     USR = PAR.Day 18 Prod Total     USR + PAR.Day 18 Produ
 PAR.Day_18_Prod_Total_USR = PAR.Day_18_Prod_Total_USR + PAR.Day_18_Production_USR;

 // PAR.Day 19 Prod Total     USR = PAR.Day 19 Prod Total     USR + PAR.Day 19 Produ
 PAR.Day_19_Prod_Total_USR = PAR.Day_19_Prod_Total_USR + PAR.Day_19_Production_USR;

 // PAR.Day 20 Prod Total     USR = PAR.Day 20 Prod Total     USR + PAR.Day 20 Produ
 PAR.Day_20_Prod_Total_USR = PAR.Day_20_Prod_Total_USR + PAR.Day_20_Production_USR;

 // PAR.Day 21 Prod Total     USR = PAR.Day 21 Prod Total     USR + PAR.Day 21 Produ
 PAR.Day_21_Prod_Total_USR = PAR.Day_21_Prod_Total_USR + PAR.Day_21_Production_USR;

 // PAR.Day 1 Schd Ship Total USR = PAR.Day 1 Schd Ship Total USR + PAR.Day 1 Sched
 PAR.Day_1_Schd_Ship_Total_USR = PAR.Day_1_Schd_Ship_Total_USR
 + PAR.Day_1_Sched_Shipments_USR;

 // PAR.Day 2 Schd Ship Total USR = PAR.Day 2 Schd Ship Total USR + PAR.Day 2 Sched
 PAR.Day_2_Schd_Ship_Total_USR = PAR.Day_2_Schd_Ship_Total_USR
 + PAR.Day_2_Sched_Shipments_USR;

 // PAR.Day 3 Schd Ship Total USR = PAR.Day 3 Schd Ship Total USR + PAR.Day 3 Sched
 PAR.Day_3_Schd_Ship_Total_USR = PAR.Day_3_Schd_Ship_Total_USR
 + PAR.Day_3_Sched_Shipments_USR;

 // PAR.Day 4 Schd Ship Total USR = PAR.Day 4 Schd Ship Total USR + PAR.Day 4 Sched
 PAR.Day_4_Schd_Ship_Total_USR = PAR.Day_4_Schd_Ship_Total_USR
 + PAR.Day_4_Sched_Shipments_USR;

 // PAR.Day 5 Schd Ship Total USR = PAR.Day 5 Schd Ship Total USR + PAR.Day 5 Sched
 PAR.Day_5_Schd_Ship_Total_USR = PAR.Day_5_Schd_Ship_Total_USR
 + PAR.Day_5_Sched_Shipments_USR;

 // PAR.Day 6 Schd Ship Total USR = PAR.Day 6 Schd Ship Total USR + PAR.Day 6 Sched
 PAR.Day_6_Schd_Ship_Total_USR = PAR.Day_6_Schd_Ship_Total_USR
 + PAR.Day_6_Sched_Shipments_USR;

 // PAR.Day 7 Schd Ship Total USR = PAR.Day 7 Schd Ship Total USR + PAR.Day 7 Sched
 PAR.Day_7_Schd_Ship_Total_USR = PAR.Day_7_Schd_Ship_Total_USR
 + PAR.Day_7_Sched_Shipments_USR;

 // PAR.Day 8 Schd Ship Total USR = PAR.Day 8 Schd Ship Total USR + PAR.Day 8 Sched
 PAR.Day_8_Schd_Ship_Total_USR = PAR.Day_8_Schd_Ship_Total_USR
 + PAR.Day_8_Sched_Shipments_USR;

 // PAR.Day 9 Schd Ship Total USR = PAR.Day 9 Schd Ship Total USR + PAR.Day 9 Sched
 PAR.Day_9_Schd_Ship_Total_USR = PAR.Day_9_Schd_Ship_Total_USR
 + PAR.Day_9_Sched_Shipments_USR;

 // PAR.Day 10 SchdShip Total USR = PAR.Day 10 SchdShip Total USR + PAR.Day 10 Sched
 PAR.Day_10_SchdShip_Total_USR = PAR.Day_10_SchdShip_Total_USR
 + PAR.Day_10_Sched_Shipment_USR;

 // PAR.Day 11 SchdShip Total USR = PAR.Day 11 SchdShip Total USR + PAR.Day 11 Sched
 PAR.Day_11_SchdShip_Total_USR = PAR.Day_11_SchdShip_Total_USR
 + PAR.Day_11_Sched_Shipment_USR;

 // PAR.Day 12 SchdShip Total USR = PAR.Day 12 SchdShip Total USR + PAR.Day 12 Sched
 PAR.Day_12_SchdShip_Total_USR = PAR.Day_12_SchdShip_Total_USR
 + PAR.Day_12_Sched_Shipment_USR;

 // PAR.Day 13 SchdShip Total USR = PAR.Day 13 SchdShip Total USR + PAR.Day 13 Sched
 PAR.Day_13_SchdShip_Total_USR = PAR.Day_13_SchdShip_Total_USR
 + PAR.Day_13_Sched_Shipment_USR;

 // PAR.Day 14 SchdShip Total USR = PAR.Day 14 SchdShip Total USR + PAR.Day 14 Sched
 PAR.Day_14_SchdShip_Total_USR = PAR.Day_14_SchdShip_Total_USR
 + PAR.Day_14_Sched_Shipment_USR;

 // PAR.Day 15 SchdShip Total USR = PAR.Day 15 SchdShip Total USR + PAR.Day 15 Sched
 PAR.Day_15_SchdShip_Total_USR = PAR.Day_15_SchdShip_Total_USR
 + PAR.Day_15_Sched_Shipment_USR;

 // PAR.Day 16 SchdShip Total USR = PAR.Day 16 SchdShip Total USR + PAR.Day 16 Sched
 PAR.Day_16_SchdShip_Total_USR = PAR.Day_16_SchdShip_Total_USR
 + PAR.Day_16_Sched_Shipment_USR;

 // PAR.Day 17 SchdShip Total USR = PAR.Day 17 SchdShip Total USR + PAR.Day 17 Sched
 PAR.Day_17_SchdShip_Total_USR = PAR.Day_17_SchdShip_Total_USR
 + PAR.Day_17_Sched_Shipment_USR;

 // PAR.Day 18 SchdShip Total USR = PAR.Day 18 SchdShip Total USR + PAR.Day 18 Sched
 PAR.Day_18_SchdShip_Total_USR = PAR.Day_18_SchdShip_Total_USR
 + PAR.Day_18_Sched_Shipment_USR;

 // PAR.Day 19 SchdShip Total USR = PAR.Day 19 SchdShip Total USR + PAR.Day 19 Sched
 PAR.Day_19_SchdShip_Total_USR = PAR.Day_19_SchdShip_Total_USR
 + PAR.Day_19_Sched_Shipment_USR;

 // PAR.Day 20 SchdShip Total USR = PAR.Day 20 SchdShip Total USR + PAR.Day 20 Sched
 PAR.Day_20_SchdShip_Total_USR = PAR.Day_20_SchdShip_Total_USR
 + PAR.Day_20_Sched_Shipment_USR;

 // PAR.Day 21 SchdShip Total USR = PAR.Day 21 SchdShip Total USR + PAR.Day 21 Sched
 PAR.Day_21_SchdShip_Total_USR = PAR.Day_21_SchdShip_Total_USR
 + PAR.Day_21_Sched_Shipment_USR;

 // PAR.Day 1 Sales Total     USR = PAR.Day 1 Sales Total     USR + PAR.Day 1 Sales
 PAR.Day_1_Sales_Total_USR = PAR.Day_1_Sales_Total_USR + PAR.Day_1_Sales_USR;

 // PAR.Day 2 Sales Total     USR = PAR.Day 2 Sales Total     USR + PAR.Day 2 Sales
 PAR.Day_2_Sales_Total_USR = PAR.Day_2_Sales_Total_USR + PAR.Day_2_Sales_USR;

 // PAR.Day 3 Sales Total     USR = PAR.Day 3 Sales Total     USR + PAR.Day 3 Sales
 PAR.Day_3_Sales_Total_USR = PAR.Day_3_Sales_Total_USR + PAR.Day_3_Sales_USR;

 // PAR.Day 4 Sales Total     USR = PAR.Day 4 Sales Total     USR + PAR.Day 4 Sales
 PAR.Day_4_Sales_Total_USR = PAR.Day_4_Sales_Total_USR + PAR.Day_4_Sales_USR;

 // PAR.Day 5 Sales Total     USR = PAR.Day 5 Sales Total     USR + PAR.Day 5 Sales
 PAR.Day_5_Sales_Total_USR = PAR.Day_5_Sales_Total_USR + PAR.Day_5_Sales_USR;

 // PAR.Day 6 Sales Total     USR = PAR.Day 6 Sales Total     USR + PAR.Day 6 Sales
 PAR.Day_6_Sales_Total_USR = PAR.Day_6_Sales_Total_USR + PAR.Day_6_Sales_USR;

 // PAR.Day 7 Sales Total     USR = PAR.Day 7 Sales Total     USR + PAR.Day 7 Sales
 PAR.Day_7_Sales_Total_USR = PAR.Day_7_Sales_Total_USR + PAR.Day_7_Sales_USR;

 // PAR.Day 8 Sales Total     USR = PAR.Day 8 Sales Total     USR + PAR.Day 8 Sales
 PAR.Day_8_Sales_Total_USR = PAR.Day_8_Sales_Total_USR + PAR.Day_8_Sales_USR;

 // PAR.Day 9 Sales Total     USR = PAR.Day 9 Sales Total     USR + PAR.Day 9 Sales
 PAR.Day_9_Sales_Total_USR = PAR.Day_9_Sales_Total_USR + PAR.Day_9_Sales_USR;

 // PAR.Day 10 Sales Total    USR = PAR.Day 10 Sales Total    USR + PAR.Day 10 Sales
 PAR.Day_10_Sales_Total_USR = PAR.Day_10_Sales_Total_USR + PAR.Day_10_Sales_USR;

 // PAR.Day 11 Sales Total    USR = PAR.Day 11 Sales Total    USR + PAR.Day 11 Sales
 PAR.Day_11_Sales_Total_USR = PAR.Day_11_Sales_Total_USR + PAR.Day_11_Sales_USR;

 // PAR.Day 12 Sales Total    USR = PAR.Day 12 Sales Total    USR + PAR.Day 12 Sales
 PAR.Day_12_Sales_Total_USR = PAR.Day_12_Sales_Total_USR + PAR.Day_12_Sales_USR;

 // PAR.Day 13 Sales Total    USR = PAR.Day 13 Sales Total    USR + PAR.Day 13 Sales
 PAR.Day_13_Sales_Total_USR = PAR.Day_13_Sales_Total_USR + PAR.Day_13_Sales_USR;

 // PAR.Day 14 Sales Total    USR = PAR.Day 14 Sales Total    USR + PAR.Day 14 Sales
 PAR.Day_14_Sales_Total_USR = PAR.Day_14_Sales_Total_USR + PAR.Day_14_Sales_USR;

 // PAR.Day 15 Sales Total    USR = PAR.Day 15 Sales Total    USR + PAR.Day 15 Sales
 PAR.Day_15_Sales_Total_USR = PAR.Day_15_Sales_Total_USR + PAR.Day_15_Sales_USR;

 // PAR.Day 16 Sales Total    USR = PAR.Day 16 Sales Total    USR + PAR.Day 16 Sales
 PAR.Day_16_Sales_Total_USR = PAR.Day_16_Sales_Total_USR + PAR.Day_16_Sales_USR;

 // PAR.Day 17 Sales Total    USR = PAR.Day 17 Sales Total    USR + PAR.Day 17 Sales
 PAR.Day_17_Sales_Total_USR = PAR.Day_17_Sales_Total_USR + PAR.Day_17_Sales_USR;

 // PAR.Day 18 Sales Total    USR = PAR.Day 18 Sales Total    USR + PAR.Day 18 Sales
 PAR.Day_18_Sales_Total_USR = PAR.Day_18_Sales_Total_USR + PAR.Day_18_Sales_USR;

 // PAR.Day 19 Sales Total    USR = PAR.Day 19 Sales Total    USR + PAR.Day 19 Sales
 PAR.Day_19_Sales_Total_USR = PAR.Day_19_Sales_Total_USR + PAR.Day_19_Sales_USR;

 // PAR.Day 20 Sales Total    USR = PAR.Day 20 Sales Total    USR + PAR.Day 20 Sales
 PAR.Day_20_Sales_Total_USR = PAR.Day_20_Sales_Total_USR + PAR.Day_20_Sales_USR;

 // PAR.Day 21 Sales Total    USR = PAR.Day 21 Sales Total    USR + PAR.Day 21 Sales
 PAR.Day_21_Sales_Total_USR = PAR.Day_21_Sales_Total_USR + PAR.Day_21_Sales_USR;

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availa
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availa
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availa
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availa
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availa
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availa
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availa
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availa
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availa
 PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Avail
 PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Avail
 PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Avail
 PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Avail
 PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Avail
 PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Avail
 PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Avail
 PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Avail
 PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Avail
 PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Avail
 PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Avail
 PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Avail
 PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

 ENDIF;

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

}


// Total Available(week1)
RCD.Day_7_Availability_USR = ( ( ( ( PAR.Day_1_Availability_USR                                    +
+ PAR.Day_2_Availability_USR ) + PAR.Day_3_Availability_USR )                                     +
+ PAR.Day_4_Availability_USR ) + PAR.Day_5_Availability_USR )                                     +
+ PAR.Day_6_Availability_USR;

// Total Available(week2)
RCD.Day_14_Availability_USR = ( ( ( ( PAR.Day_8_Availability_USR                                   +
+ PAR.Day_9_Availability_USR ) + PAR.Day_10_Availability_USR )                                    +
+ PAR.Day_11_Availability_USR ) + PAR.Day_12_Availability_USR )                                   +
+ PAR.Day_13_Availability_USR;

// Total Available(week3)
RCD.Day_21_Availability_USR = ( ( ( ( PAR.Day_15_Availability_USR                                  +
+ PAR.Day_16_Availability_USR ) + PAR.Day_17_Availability_USR )                                   +
+ PAR.Day_18_Availability_USR ) + PAR.Day_19_Availability_USR )                                   +
+ PAR.Day_20_Availability_USR;

//?Load1
CASE;

// IF PAR.Load Size USR is Not Equal to Zero
IF PAR.Load_Size_USR <> *ZERO;

// day 1
WRK.Day_1_Available_Loads = ( PAR.Day_1_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 2
WRK.Day_2_Available_Loads = ( PAR.Day_2_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 3
WRK.Day_3_Available_Loads = ( PAR.Day_3_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 4
WRK.Day_4_Available_Loads = ( PAR.Day_4_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 5
WRK.Day_5_Available_Loads = ( PAR.Day_5_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 6
WRK.Day_6_Available_Loads = ( PAR.Day_6_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 7
WRK.Day_1_Avail_Ld_Usr = ( ( ( ( WRK.Day_1_Available_Loads + WRK.Day_2_Available_Loads )           +
+ WRK.Day_3_Available_Loads ) + WRK.Day_4_Available_Loads ) + WRK.Day_5_Available_Loads )         +
+ WRK.Day_6_Available_Loads;

ENDIF;

//?Load2
CASE;

// IF PAR.Load Size USR is Not Equal to Zero
IF PAR.Load_Size_USR <> *ZERO;

// day 8
WRK.Day_8_Available_Loads = ( PAR.Day_8_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 9
WRK.Day_9_Available_Loads = ( PAR.Day_9_Availability_USR * PAR.Unit_Weight )                       +
/ PAR.Load_Size_USR;

// Day 10
WRK.Day_10_Available_Loads = ( PAR.Day_10_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 11
WRK.Day_11_Available_Loads = ( PAR.Day_11_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 12
WRK.Day_12_Available_Loads = ( PAR.Day_12_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 13
WRK.Day_13_Available_Loads = ( PAR.Day_13_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 14
WRK.Day_14_Available_Loads = ( ( ( ( WRK.Day_8_Available_Loads                                     +
+ WRK.Day_9_Available_Loads ) + WRK.Day_10_Available_Loads ) + WRK.Day_11_Available_Loads         +
) + WRK.Day_12_Available_Loads ) + WRK.Day_13_Available_Loads;

ENDIF;

//?Load3
CASE;

// IF PAR.Load Size USR is Not Equal to Zero
IF PAR.Load_Size_USR <> *ZERO;

// day 15
WRK.Day_15_Available_Loads = ( PAR.Day_15_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 16
WRK.Day_16_Available_Loads = ( PAR.Day_16_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 17
WRK.Day_17_Available_Loads = ( PAR.Day_17_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 18
WRK.Day_18_Available_Loads = ( PAR.Day_18_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 19
WRK.Day_19_Available_Loads = ( PAR.Day_19_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 20
WRK.Day_20_Available_Loads = ( PAR.Day_20_Availability_USR * PAR.Unit_Weight )                     +
/ PAR.Load_Size_USR;

// Day 21
WRK.Day_21_Available_Loads = ( ( ( ( WRK.Day_15_Available_Loads                                    +
+ WRK.Day_16_Available_Loads ) + WRK.Day_17_Available_Loads )                                     +
+ WRK.Day_18_Available_Loads ) + WRK.Day_19_Available_Loads )                                     +
+ WRK.Day_20_Available_Loads;

ENDIF;

//?Check On Three Weeks
CASE;

// IF CTL.Scheduled Ship Date LE PAR.Avail Ship Date 6 USR
IF CTL.Scheduled_Ship_Date <= PAR.Avail_Ship_Date_6_USR;

// RCD.Day 7 Availability USR = RCD.Day 7 Availability USR
RCD.Day_7_Availability_USR = RCD.Day_7_Availability_USR;

// RCD.Day 1 Avail (Ld) Usr = WRK.Day 1 Avail (Ld) Usr
RCD.Day_1_Avail_Ld_Usr = WRK.Day_1_Avail_Ld_Usr;

//?Check On Three Weeks
// IF CTL.Scheduled Ship Date GT PAR.Avail Ship Date 6 USR
IF CTL.Scheduled_Ship_Date > PAR.Avail_Ship_Date_6_USR;

// AND CTL.Scheduled Ship Date LE PAR.Avail Ship Date 13 USR
AND CTL.Scheduled_Ship_Date <= PAR.Avail_Ship_Date_13_USR;

// RCD.Day 7 Availability USR = RCD.Day 14 Availability USR
RCD.Day_7_Availability_USR = RCD.Day_14_Availability_USR;

// RCD.Day 1 Avail (Ld) Usr = WRK.Day 14 Available Loads
RCD.Day_1_Avail_Ld_Usr = WRK.Day_14_Available_Loads;

//?Check On Three Weeks
// IF CTL.Scheduled Ship Date GT PAR.Avail Ship Date 13 USR
IF CTL.Scheduled_Ship_Date > PAR.Avail_Ship_Date_13_USR;

// AND CTL.Scheduled Ship Date LE PAR.Avail Ship Date 20 USR
AND CTL.Scheduled_Ship_Date <= PAR.Avail_Ship_Date_20_USR;

// RCD.Day 7 Availability USR = RCD.Day 21 Availability USR
RCD.Day_7_Availability_USR = RCD.Day_21_Availability_USR;

// RCD.Day 1 Avail (Ld) Usr = WRK.Day 21 Available Loads
RCD.Day_1_Avail_Ld_Usr = WRK.Day_21_Available_Loads;

ENDIF;

//?Ship Date IS GT 21 Days Move zeros to Avl Qty AND Avl Lds
CASE;

// IF CTL.Scheduled Ship Date GT PAR.Avail Ship Date 21 USR
IF CTL.Scheduled_Ship_Date > PAR.Avail_Ship_Date_21_USR;

// RCD.Day 7 Availability USR = CON.*ZERO
RCD.Day_7_Availability_USR = *ZERO;

// RCD.Day 1 Avail (Ld) Usr = CON.*ZERO
RCD.Day_1_Avail_Ld_Usr = *ZERO;

ENDIF;

//?Warehouse Is Not Equal to Blank  Do all Process
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF DB1.Production Ovr AgeDte Fr is not equal zero
IF DB1.Production_Ovr_AgeDte_Fr <> *ZERO;

// WRK.Override Age Dates StsUsr = CND.Age Dates are Entered
WRK.Override_Age_Dates_StsUsr = 'O';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Override Age Dates StsUsr = CND.No Override Age Dates
WRK.Override_Age_Dates_StsUsr = *BLANK;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Display Order Special Instructions
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program Dsp Special Instr      D1.
CALL PROGRAM(Dsp Special Instr      D1) ('PDXPD1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

ENDIF;

//?Display Shipping Instructions
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program DSP Shipping Inst.     DF.
CALL PROGRAM(DSP Shipping Inst.     DF) ('PDNADFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

ENDIF;

//?Display Production Availability
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?** Pass company# & whse to Product Availability   09/01/2006 LJB
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// WRK.Warehouse Code PASS   USR = LCL.Warehouse Code
WRK.Warehouse_Code_PASS_USR = LCL.Warehouse_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Warehouse Code PASS   USR = CTL.Warehouse Code
WRK.Warehouse_Code_PASS_USR = CTL.Warehouse_Code;

ENDIF;

// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.Warehouse_Code_PASS_USR);

ENDIF;

//?Print Order Acknoledgement
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

//?** FT299 LJB 04/18/2007
//?** Pass blanks to the Print Acknowledgement program. It will
//?** check for allow multiple warehouse access authority
// WRK.USR Warehouse Code = CND.Warehouse Code Blank
WRK.USR_Warehouse_Code = *BLANK;

// Call program PRT Acknowledgements   PV.
CALL PROGRAM(PRT Acknowledgements   PV) ('PDJ4PVR');
PARAMETER(WRK.USR_Warehouse_Code);
PARAMETER(1);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Display order detail line if Display is selected
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Order Detail Line  D1.
CALL PROGRAM(DSP Order Detail Line  D1) ('PDP4D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Validate Load Status
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// OR RCD.*SFLSEL is Option 11
OR RCD.*SFLSEL = '11';

// OR RCD.*SFLSEL is Option 12
OR RCD.*SFLSEL = '12';

CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Load Status is Locked thru Invoiced
IF PAR.Load_Status = 'I'/'L'/'S';

// Send error message - 'The Load is Locked.  Option is invalid.'
ERROR(USR2308);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//? 7=Dsp Age
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Dsp Age Information   DR.
CALL PROGRAM(Dsp Age Information   DR) ('PNQ0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?11=Work With Order Production Schedule
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?14=Release line itm    FP1054 - new opt
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

EXECUTE FUNCTION(RTV Order in Use       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1646052;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Load_ID);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Order in Use is yes
IF LCL.Order_in_Use = 'Y';

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

CASE;

// IF CTL.Requested Ship Date GT CTL.USR Day 3
IF CTL.Requested_Ship_Date > CTL.USR_Day_3;

// RCD.Qty EOD Inv 3 USR = CON.*ZERO
RCD.Qty_EOD_Inv_3_USR = *ZERO;

ENDIF;

//?USER: Process subfile record (Post-confirm)

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?14=Release Line item-FP1054
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

EXECUTE FUNCTION(CHG Released by User  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1920658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?FP1054 chg prod hold status if orders line pass test
EXECUTE FUNCTION(RTV Chg Sts/Prd Sts   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1920663;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Check Sch/not Rlsd RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1920664;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.USR_Production);
 {
  //?USER: Initialize routine

  // PAR.USR Production = CND.No
  PAR.USR_Production = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Quantity Ordered EQ DB1.Quantity Scheduled
  IF DB1.Quantity_Ordered = DB1.Quantity_Scheduled;

  // OR DB1.Released by User Sts Y/N is yes
  OR DB1.Released_by_User_Sts_Y_N = 'Y';

  // OR DB1.Detail Line Status is Cancelled
  OR DB1.Detail_Line_Status = 'X';

  //?if all line items are either sched or released by user or cncled,
  //?then order is not to be on prod hold
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Production = CND.Yes
  PAR.USR_Production = 'Y';

  ENDIF;

 }

 // LCL.Header Status Last = DB1.Header Status Last
 LCL.Header_Status_Last = DB1.Header_Status_Last;

 // LCL.Header Status = DB1.Header Status
 LCL.Header_Status = DB1.Header_Status;

 CASE;

 // IF DB1.Credit Hold is Yes
 IF DB1.Credit_Hold = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.USR Production is No
 IF LCL.USR_Production = 'N';

 // LCL.Header Status Last = DB1.Header Status
 LCL.Header_Status_Last = DB1.Header_Status;

 // LCL.Header Status = CND.Available
 LCL.Header_Status = 'A';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CHG Prd Hld, Sts,Rsn   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1342647;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER(LCL.USR_Production);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?* FP1054 Create rcd * RLSLIN
// WRK.Item Code Txt = CVTVAR(RCD.Item Code)
WRK.Item_Code_Txt = CVTVAR(RCD.Item_Code);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('RLSLIN');
PARAMETER('SLS');
PARAMETER(WRK.Item_Code_Txt);
PARAMETER('Released');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?*
// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

//?*
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Exit program processing

CASE;

// IF WRK.Process Post USR is yes
IF WRK.Process_Post_USR = 'Y';

//?The new order post will not change the production hold if called
//?from a production scheduling program
// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER('PS');

//?** If possible Lock Load when Prod Hold is released - RMC 02/26/07
// WRK.STATUS = CND.No
WRK.STATUS = 'N';

//?** Don't auto lock if errors pending in Order Dtl-LJB 09/20/11 P001251
//?** Don't auto lock if shipping later than today - LJB 10/03/09 E00495
//?** dont auto lock if shipping later than tomorrow   - RMC 07/24/09 FP1054
EXECUTE FUNCTION(EDT Lock Load Edit/INF IF) TYPE(EXCINTFUN)                     AC1481296;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.*SFLSEL);
PARAMETER(WRK.STATUS);
PARAMETER(WRK.Error_Status);
PARAMETER('N');
{
 //?Execute internal function

 //?** Chk for ord detail errors still pending  9.20.2011 P001251 LJB
 //?** Chg lock option override sts to *job date chk   8.23.09 E00495
 //?** Add lock option override sts for sched ship date chk  7.24.09 FP1054
 //?** Add Override Total Load Miles - WRK context     E00207 8/13/08
 EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(WRK.Flat_Amount);
 PARAMETER(WRK.Allocate_Pounds_Miles);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Schedule_Sequence_Number);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(WRK.Ship_From_Warehouse);
 PARAMETER(WRK.Ship_To_State_Code);
 PARAMETER(WRK.Carrier_Broker);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(WRK.Override_Total_Load_Miles);
 PARAMETER(WRK.Shipping_Temp_C_F_txt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.USR_Check_Y_N_Status);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(EDT Lock Load Edits-INFIF) TYPE(EXCINTFUN)                     AC1481297;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.*SFLSEL);
 PARAMETER(PAR.Error_Status);
 PARAMETER(PAR.Block_Order_Flag);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Lock_option_override_sts);
 {
  //?Execute internal function

  //?assume will have error
  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
  PARAMETER('LOCKLD');
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Access_Denied_Y_N);
  {
   //?Execute internal function

   // PAR.User Profile Name = JOB.*USER
   PAR.User_Profile_Name = JOB.*USER;

   EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(WRK.Access_Denied_Y_N);
   {
    //?Execute internal function

    //?RMC 5/11/09 Rtv default company from user profile --
    //?  Override user code model company if it exists
    EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(PAR.User_Code_Model);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?User Profile Record Not found
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    //?User Profile Record Not found
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    ENDIF;

    CASE;

    // IF PAR.User Code Model is equal to blank
    IF PAR.User_Code_Model = *BLANK;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Code_Model);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    // PAR.Warehouse Code = LCL.Warehouse Code
    PAR.Warehouse_Code = LCL.Warehouse_Code;

    //?Return code when not normal for Application Profile
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    //?Return code when not normal for Application Profile
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    ENDIF;

    CASE;

    // IF LCL.Company Number is greater than zero
    IF LCL.Company_Number > *ZERO;

    // PAR.Company Number = LCL.Company Number
    PAR.Company_Number = LCL.Company_Number;

    CASE;

    // IF LCL.Warehouse Code is Not Blanks
    IF LCL.Warehouse_Code <> *BLANK;

    EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(LCL.Shipping_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Record Status is Active
     IF DB1.Record_Status = 'A';

     CASE;

     // IF DB1.Production Warehouse Code is Warehouse Code not Blank
     IF DB1.Production_Warehouse_Code <> *BLANK;

     // PAR.Warehouse Code = DB1.Production Warehouse Code
     PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

     QUIT;

     ENDIF;

     ENDIF;

    }

    ENDIF;

    ENDIF;

   }

   // PAR.Company Number = WRK.Company Number
   PAR.Company_Number = WRK.Company_Number;

   // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
   PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

   //?If access denied is no, rtv co. name
   CASE;

   // IF WRK.Access Denied (Y/N) is no
   IF WRK.Access_Denied_Y_N = 'N';

   EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Name);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  CASE;

  // IF PAR.Access Denied (Y/N) is yes
  IF PAR.Access_Denied_Y_N = 'Y';

  // Send information message - 'User not allowed to  Lock/Unlock Loads.'
  MESSAGE(USR2543 *INFO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.USR_Orders_on_Load);
  {
   //?USER: Initialize routine

   // PAR.Status - Y or N = CND.no
   PAR.Status_Y_or_N = 'N';

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   CASE;

   // IF DB1.Stop/Drop is EQ Zero
   IF DB1.Stop_Drop = *ZERO;

   // PAR.Status - Y or N = CND.yes
   PAR.Status_Y_or_N = 'Y';

   QUIT;

   ENDIF;

  }

  //?Validate lock request
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Send information message - 'No orders assigned to load &1; Can't lock'
  MESSAGE(USR2544 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Validate lock request
  // IF PAR.Block Order Flag is Block Order
  IF PAR.Block_Order_Flag = 'B';

  // Send information message - 'Load &2 contains Block Orders--no update allowed.'
  MESSAGE(USR2545 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Load Status is Locked thru Invoiced
  IF PAR.Load_Status = 'I'/'L'/'S';

  // Send information message - 'Load &2 cannot be locked due to load status'
  MESSAGE(USR2546 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Carrier Code EQ WRK.BLANK
  IF PAR.Carrier_Code = WRK.BLANK;

  // AND PAR.STATUS is No
  AND PAR.STATUS = 'N';

  // Send information message - 'Carrier must be entered for load &2'
  MESSAGE(USR2547 *INFO);
  MSGPARM(PAR.Carrier_Code);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Truck Size EQ WRK.BLANK
  IF PAR.Truck_Size = WRK.BLANK;

  // Send information message - 'Truck size must be entered for load &2'
  MESSAGE(USR2548 *INFO);
  MSGPARM(PAR.Truck_Size);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Shipping Method EQ WRK.BLANK
  IF PAR.Shipping_Method = WRK.BLANK;

  // Send information message - 'Shipping Method required to lock load.'
  MESSAGE(USR2549 *INFO);
  MSGPARM(PAR.Shipping_Method);

  //?Validate lock request
  // IF PAR.USR Orders on Load is yes
  IF PAR.USR_Orders_on_Load = 'Y';

  // Send information message - 'Function not allowed; Load &1 has orders tied to it which are not a
  MESSAGE(USR2550 *INFO);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Load Acceptance Flag is Load not Accepted
  IF PAR.Load_Acceptance_Flag = 'U';

  // Send information message - 'Load cannot be locked, it is unaccepted.'
  MESSAGE(USR2551 *INFO);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
  PARAMETER(PAR.Order_in_Use);
  PARAMETER(PAR.Header_Status);
  PARAMETER(PAR.Load_ID);
  {
   //?USER: Initialize routine

   //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   CASE;

   // IF DB1.Header Status is Hold
   IF DB1.Header_Status = 'H';

   // PAR.Header Status = DB1.Header Status
   PAR.Header_Status = DB1.Header_Status;

   QUIT;

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   // IF DB1.Header Status is Cancelled
   IF DB1.Header_Status = 'X';

   // PAR.Header Status = DB1.Header Status
   PAR.Header_Status = DB1.Header_Status;

   QUIT;

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   // IF DB1.Order in Use is yes
   IF DB1.Order_in_Use = 'Y';

   // PAR.Order in Use = DB1.Order in Use
   PAR.Order_in_Use = DB1.Order_in_Use;

   QUIT;

   ENDIF;

  }

  //?Error if held/cancelled/in use order(s) on load
  CASE;

  // IF PAR.Header Status is Hold
  IF PAR.Header_Status = 'H';

  // Send information message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
  MESSAGE(USR2552 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Error if held/cancelled/in use order(s) on load
  // IF PAR.Header Status is Cancelled
  IF PAR.Header_Status = 'X';

  // Send information message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
  MESSAGE(USR2553 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Error if held/cancelled/in use order(s) on load
  // IF PAR.Order in Use is yes
  IF PAR.Order_in_Use = 'Y';

  // Send information message - 'Load &2 has order(s) in use; Load cannot be locked.'
  MESSAGE(USR2554 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Error if held/cancelled/in use order(s) on load
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Order_Requires_Review);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** Check for errors in Export Order Automation Upload   P001251
  CASE;

  // IF LCL.Order Requires Review is Yes
  IF LCL.Order_Requires_Review = 'Y';

  //?** Cannot lock load if errors in Order Detail         P001251
  // Send error message - 'Order has detail lines that require review'
  ERROR(USR4464);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?** Check for errors in Export Order Automation Upload   P001251
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
  PARAMETER(PAR.Truck_Size);
  PARAMETER(PAR.Maximum_pounds);
  PARAMETER(PAR.Minimum_pounds);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Do not want to lock the load if the Load Weight is not
  //?within range.  -Purva 5/5/99 C0007042
  //?Check minimum and maximum pounds
  CASE;

  // IF PAR.Total Weight LT PAR.Minimum pounds
  IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

  // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
  MESSAGE(USR1262 *INFO);
  MSGPARM(PAR.Load_ID);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  //?Check minimum and maximum pounds
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Total Weight GT PAR.Maximum pounds
  IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

  // Send information message - 'Load weight is greater than maximum allowed for truck size.'
  MESSAGE(USR2231 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
  CASE;

  // IF PAR.Lock option override sts is No
  IF PAR.Lock_option_override_sts = 'N';

  // AND PAR.Scheduled Ship Date GT JOB.*Job date
  AND PAR.Scheduled_Ship_Date > JOB.*Job_date;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Locking load pending'
  MESSAGE(USR1273 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?***** Change Log and Comments
  DO;

  //?*****
  //?** 09/20/2011 LJB P001251  Export Order Automation Upload
  //?** Cannot lock load if there are errors still pending in the
  //?** Order Detail record
  //?*****
  //?** Auto lock if shipping today & no errors            E00495
  ENDDO;

 }

}


//? Lock Load if no errors
CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 //?Fill in ship from whse deadline depart, if locking load and none entered
 CASE;

 // IF PAR.Ship From Warehouse EQ WRK.BLANK
 IF PAR.Ship_From_Warehouse = WRK.BLANK;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 //?** RTV carrier appt date/time                         E00495
 EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.LD_Carrier_Appt_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 CASE;

 // IF WRK.LD Carrier Appt Date is Entered
 IF WRK.LD_Carrier_Appt_Date > 0;

 // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
 PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?---------------------------------------------------------------
 EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(WRK.Ship_To_Name);
 PARAMETER(WRK.Ship_To_Address_Line_1);
 PARAMETER(WRK.Ship_To_Address_Line_2);
 PARAMETER(WRK.Ship_To_Address_Line_3);
 PARAMETER(WRK.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Ship_To_Zip_Postal_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?---------------------------------------------------------------
 //?OMS132:  Fill in Flat Amount as required
 CASE;

 // IF PAR.Total Stops is One Stop
 IF PAR.Total_Stops = 1;

 // AND PAR.Flat Amount EQ WRK.ZERO
 AND PAR.Flat_Amount = WRK.ZERO;

 //?get flat amount for destination city
 EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(WRK.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // PAR.Destination City = WRK.Destination City
 PAR.Destination_City = WRK.Destination_City;

 EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.Flat_Amount);
 {
  //?USER: Process Data record

  //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
  CASE;

  // IF DB1.CDR Unit of Measure is Flat
  IF DB1.CDR_Unit_of_Measure = 'FL';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 ENDIF;

 //?Calc Load U/M           -- RMC 6/16/06
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?OMS261:  if sched to ship today, print prelim pick at all whses
 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 // PAR.Company Number Pass   USR = PAR.Company Number
 PAR.Company_Number_Pass_USR = PAR.Company_Number;

 // PAR.Order Number 1  PASS  USR = PAR.Load ID
 PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

 // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
 PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

 // WRK.USR Select/Omit Flag = CND.Select
 WRK.USR_Select_Omit_Flag = 'S';

 // WRK.USR Detail or Summary = CND.Detail
 WRK.USR_Detail_or_Summary = 'D';

 // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
 WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

 //?letting all the other parms default in the CL
 //?If warehouse exists for load then print.
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program Pass Pre Pick @LoadLockUP.
 CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER('OMS');
 PARAMETER('PDIZPCLP');
 PARAMETER(WRK.USR_Detail_or_Summary);
 PARAMETER('Auto Print Prelim. Pick');
 PARAMETER(WRK.PRT_Printer_Device);
 PARAMETER(WRK.PRT_Hold_Output_Sts);
 PARAMETER(WRK.PRT_Save_Output_Sts);
 PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
 PARAMETER(WRK.PRT_Night_Queue);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(WRK.System_Value_Numeric);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(WRK.USR_Select_Omit_Flag);
 PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?AccuSort:  Create Order Header and Order Detail
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program Zzz AS Order Hdr/Dtl   XF.
  CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
  // Call program Exc Create EDI f/Lock XF.
  CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
  PARAMETER(PAR.Load_ID);

 }

 CASE;

 // IF JOB.*PROGRAM is PRT Audit Report
 IF JOB.*PROGRAM = 'PDSNPFR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program RTV Warehouse Dflt PrtrXF.
 CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Include_in_Auto_Pre_Pick);

 //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
 CASE;

 // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
 IF LCL.Include_in_Auto_Pre_Pick = 'Y';

 // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
 MESSAGE(USR2565 *INFO);
 MSGPARM(PAR.USR_Warehouse_Code);
 MSGPARM(PAR.USR_CDE_Parm_1);
 MSGPARM(PAR.USR_CDE_Parm_2);
 MSGPARM(PAR.USR_CDE_Parm_3);
 MSGPARM(PAR.USR_CDE_Parm_4);
 MSGPARM(PAR.USR_CDE_Parm_5);
 MSGPARM(PAR.USR_CDE_Parm_6);
 MSGPARM(PAR.USR_CDE_Parm_7);
 MSGPARM(PAR.USR_CDE_Parm_8);
 MSGPARM(PAR.USR_CDE_Parm_9);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Preliminary Pick not printed, no order details.'
 MESSAGE(USR2715 *INFO);

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and comments
 DO;

 //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
 //?** 09/30/2009 LJB E00495
 //?**   Use carrier date/time, if entered, to calc DDD/T
 //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
 //?** zeros if there is no Miles Between Cities record
 ENDDO;

}


// WRK.Load Change Type = CND.Lock Load
WRK.Load_Change_Type = 'LOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Load_Status);
PARAMETER('L');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(WRK.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

// Send information message - 'Load &1 has been locked.'
MESSAGE(USR2559 *INFO);
MSGPARM(CTL.Load_ID);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.No Update Occurred
PGM.*Return_code = 'NOUPD';

ENDIF;

RETURN;

ENDIF;

