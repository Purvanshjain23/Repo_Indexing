// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBXFDFR
// ?Date: 14.08.2025 Time: 03:49:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.Process Status 0-1-2 usr is *ALL values
IF CTL.Process_Status_0_1_2_usr = '1'/'0'/'2';

// CTL.TMS Process Status = CVTVAR(CTL.Process Status 0-1-2 usr)
CTL.TMS_Process_Status = CVTVAR(CTL.Process_Status_0_1_2_usr);

CASE;

// IF RCD.TMS Process Status NE CTL.TMS Process Status
IF RCD.TMS_Process_Status <> CTL.TMS_Process_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Process Status 0-1-2 usr NE LCL.Process Status 0-1-2 usr
IF CTL.Process_Status_0_1_2_usr <> LCL.Process_Status_0_1_2_usr;

// LCL.Process Status 0-1-2 usr = CTL.Process Status 0-1-2 usr
LCL.Process_Status_0_1_2_usr = CTL.Process_Status_0_1_2_usr;

// CTL.TMS Process Status = CVTVAR(CTL.Process Status 0-1-2 usr)
CTL.TMS_Process_Status = CVTVAR(CTL.Process_Status_0_1_2_usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program EXC Bld Lds fr TMS Upl XF.
CALL PROGRAM(EXC Bld Lds fr TMS Upl XF) ('PBXAXFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

EXECUTE FUNCTION(Chg TMS Load          CH) TYPE(CHGOBJ) FILE(PBCRCPP)           AC2122573;
PARAMETER(RCD.TMS_Load_ID);
PARAMETER(RCD.TMS_Extract_Date);
PARAMETER(RCD.TMS_Extract_Time);
PARAMETER(RCD.TMS_Extract_File_Name);
PARAMETER(RCD.TMS_Customer_Load_ID);
PARAMETER(RCD.TMS_Temperature);
PARAMETER(RCD.TMS_Temperature_UOM);
PARAMETER(RCD.TMS_Movement_Type);
PARAMETER(RCD.TMS_Shipment_Type);
PARAMETER(RCD.TMS_Payment_Method);
PARAMETER(RCD.TMS_POD_Received);
PARAMETER(RCD.TMS_Load_Status);
PARAMETER(RCD.TMS_Load_Owner);
PARAMETER(RCD.TMS_Carrier_SCAC);
PARAMETER(RCD.TMS_Carrier_Mode);
PARAMETER(RCD.TMS_Carrier_Distance);
PARAMETER(RCD.TMS_Deadline_Depart_Date);
PARAMETER(RCD.TMS_Deadline_Depart_Time);
PARAMETER(RCD.TMS_Trailer_Number);
PARAMETER(RCD.TMS_Container_Number);
PARAMETER(RCD.TMS_Move_Type);
PARAMETER(RCD.TMS_Vessel_Name);
PARAMETER(RCD.TMS_Voyage_Number);
PARAMETER(RCD.TMS_Booking_Number);
PARAMETER(RCD.TMS_OTR_Destination_Name);
PARAMETER(RCD.TMS_OTR_Destination_Addr1);
PARAMETER(RCD.TMS_OTR_Destination_Addr2);
PARAMETER(RCD.TMS_OTR_Destination_City);
PARAMETER(RCD.TMS_OTR_Destination_State);
PARAMETER(RCD.TMS_OTR_Destination_Zip);
PARAMETER(RCD.TMS_OTR_Destination_Cntry);
PARAMETER(RCD.TMS_Vessel_ETD_Date);
PARAMETER(RCD.TMS_Vessel_ETA_Date);
PARAMETER(RCD.TMS_Carrier_Ref_PRO_Inv);
PARAMETER(RCD.TMS_Record_Status);
PARAMETER(0);
PARAMETER(*BLANK);
PARAMETER(RCD.TMS_Change_Date);
PARAMETER(RCD.TMS_Change_time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
 PARAMETER(DB1.TMS_Record_Status);
 PARAMETER(DB1.TMS_Change_Date);
 PARAMETER(DB1.TMS_Change_time);
 {
  //?Execute internal function

  // PAR.TMS Change time = JOB.*Job time
  PAR.TMS_Change_time = JOB.*Job_time;

  // PAR.TMS Change Date = JOB.*Job date
  PAR.TMS_Change_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Rtv TMS Load Evt-repr RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2125872;
PARAMETER(RCD.TMS_Load_ID);
PARAMETER(RCD.TMS_Extract_Date);
PARAMETER(RCD.TMS_Extract_Time);
PARAMETER(RCD.TMS_Extract_File_Name);
PARAMETER(0);
PARAMETER(*BLANK);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg TMS Load Evt-Repr CH) TYPE(CHGOBJ) FILE(PBCSCPP)           AC2125863;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(DB1.TMS_Event_Sequence);
 PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
 PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
 PARAMETER(DB1.TMS_Late_Reason_Code);
 PARAMETER(*MISSING);
 PARAMETER(PAR.TMS_Process_Status);
 PARAMETER(PAR.TMS_Error_Reason);
}


EXECUTE FUNCTION(Rtv TMS Load EvSh Rep CH) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2125873;
PARAMETER(RCD.TMS_Load_ID);
PARAMETER(RCD.TMS_Extract_Date);
PARAMETER(RCD.TMS_Extract_Time);
PARAMETER(0);
PARAMETER(*BLANK);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg TMS Load EvSh Rep CH) TYPE(CHGOBJ) FILE(PBCUCPP)           AC2125864;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(DB1.TMS_Event_Sequence);
 PARAMETER(DB1.TMS_Order_ID);
 PARAMETER(PAR.TMS_Process_Status);
 PARAMETER(PAR.TMS_Error_Reason);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
  PARAMETER(DB1.TMS_Record_Status);
  PARAMETER(DB1.TMS_Change_Date);
  PARAMETER(DB1.TMS_Change_time);
  {
   //?Execute internal function

   // PAR.TMS Change time = JOB.*Job time
   PAR.TMS_Change_time = JOB.*Job_time;

   // PAR.TMS Change Date = JOB.*Job date
   PAR.TMS_Change_Date = JOB.*Job_date;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 3
IF RCD.*SFLSEL = '3'/'3';

EXECUTE FUNCTION(Chg TMS Load          CH) TYPE(CHGOBJ) FILE(PBCRCPP)           AC2122573;
PARAMETER(RCD.TMS_Load_ID);
PARAMETER(RCD.TMS_Extract_Date);
PARAMETER(RCD.TMS_Extract_Time);
PARAMETER(RCD.TMS_Extract_File_Name);
PARAMETER(RCD.TMS_Customer_Load_ID);
PARAMETER(RCD.TMS_Temperature);
PARAMETER(RCD.TMS_Temperature_UOM);
PARAMETER(RCD.TMS_Movement_Type);
PARAMETER(RCD.TMS_Shipment_Type);
PARAMETER(RCD.TMS_Payment_Method);
PARAMETER(RCD.TMS_POD_Received);
PARAMETER(RCD.TMS_Load_Status);
PARAMETER(RCD.TMS_Load_Owner);
PARAMETER(RCD.TMS_Carrier_SCAC);
PARAMETER(RCD.TMS_Carrier_Mode);
PARAMETER(RCD.TMS_Carrier_Distance);
PARAMETER(RCD.TMS_Deadline_Depart_Date);
PARAMETER(RCD.TMS_Deadline_Depart_Time);
PARAMETER(RCD.TMS_Trailer_Number);
PARAMETER(RCD.TMS_Container_Number);
PARAMETER(RCD.TMS_Move_Type);
PARAMETER(RCD.TMS_Vessel_Name);
PARAMETER(RCD.TMS_Voyage_Number);
PARAMETER(RCD.TMS_Booking_Number);
PARAMETER(RCD.TMS_OTR_Destination_Name);
PARAMETER(RCD.TMS_OTR_Destination_Addr1);
PARAMETER(RCD.TMS_OTR_Destination_Addr2);
PARAMETER(RCD.TMS_OTR_Destination_City);
PARAMETER(RCD.TMS_OTR_Destination_State);
PARAMETER(RCD.TMS_OTR_Destination_Zip);
PARAMETER(RCD.TMS_OTR_Destination_Cntry);
PARAMETER(RCD.TMS_Vessel_ETD_Date);
PARAMETER(RCD.TMS_Vessel_ETA_Date);
PARAMETER(RCD.TMS_Carrier_Ref_PRO_Inv);
PARAMETER(RCD.TMS_Record_Status);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(RCD.TMS_Change_Date);
PARAMETER(RCD.TMS_Change_time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
 PARAMETER(DB1.TMS_Record_Status);
 PARAMETER(DB1.TMS_Change_Date);
 PARAMETER(DB1.TMS_Change_time);
 {
  //?Execute internal function

  // PAR.TMS Change time = JOB.*Job time
  PAR.TMS_Change_time = JOB.*Job_time;

  // PAR.TMS Change Date = JOB.*Job date
  PAR.TMS_Change_Date = JOB.*Job_date;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

EXECUTE FUNCTION(CHG MG Created to NO CH) TYPE(CHGOBJ) FILE(OMFJCPP)            AC2128022;
PARAMETER(RCD.TMS_Load_ID);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Load Event Shpmts DF.
CALL PROGRAM(Dsp Load Event Shpmts DF) ('PBXGDFR');
PARAMETER(RCD.TMS_Load_ID);
PARAMETER(RCD.TMS_Extract_Date);
PARAMETER(RCD.TMS_Extract_Time);
PARAMETER(RCD.TMS_Extract_File_Name);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

