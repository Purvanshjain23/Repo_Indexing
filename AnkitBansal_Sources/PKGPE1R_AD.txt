// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKGPE1R
// ?Date: 14.08.2025 Time: 02:51:38
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(HPE048) TYPE(EXCINTFUN)                                        AB1190146;
{
 //?Execute internal function

 //?Nppc by Origin State Report
}


// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(LCL.Oms_Warehouse_Code);
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(LCL.Oms_SalesPerson_Code);
PARAMETER(LCL.Oms_Allow_Multi_Company);
PARAMETER(LCL.Oms_Default_Printer);
PARAMETER(LCL.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(LCL.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?E10468 JJH 05/12/17 - Remove logic for JDE and M3
//?USER: Initialize detail screen (existing record)

//?E10468 JJH 05/12/17 - Remove logic for JDE and M3
//?Rtv Manager Name from comment type "M"
EXECUTE FUNCTION(Rtv Comment type "M"  RT) TYPE(RTVOBJ) FILE(PKAHREP)           AB1242827;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DB1.PL_Location_Code);
PARAMETER(DTL.PLC_Comment);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** default site id required to "N" if blank
CASE;

// IF DTL.PL Site ID Required is Blank
IF DTL.PL_Site_ID_Required = *BLANK;

// DTL.PL Site ID Required = CND.No
DTL.PL_Site_ID_Required = 'N';

ENDIF;

//?USER: Validate detail screen fields

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

//?E10468 JJH 05/12/17 - Remove logic for JDE and M3
//?** Error if "Site ID Required" is blank
CASE;

// IF DTL.PL Site ID Required is Blank
IF DTL.PL_Site_ID_Required = *BLANK;

// DTL.PL Site ID Required = CND.No
DTL.PL_Site_ID_Required = 'N';

// Send error message - 'Invalid value entered for field &1. Prompt for list of valid values.'
ERROR(Y2U0023);
MSGPARM(DTL.PL_Site_ID_Required);

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(zChg Prdcr Loc/Vendor  IF) TYPE(EXCINTFUN) FILE(PKAFREP)       AB1334072;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
PARAMETER(DTL.Pl_VND_Address_Number);
PARAMETER(DTL.PL_Type);
PARAMETER(DTL.PL_Miles_Unused_Fld);
PARAMETER(DTL.PL_Fax_Status);
PARAMETER(DTL.PL_Fax_Carcass_Summary);
PARAMETER(DTL.PL_Unused);
PARAMETER(DTL.PL_Fax_Carcass_Detail);
PARAMETER(DTL.PL_Fax_to_Producer);
PARAMETER(DTL.PL_Producer_Fax_Sequence);
PARAMETER(DTL.PL_State_Code);
PARAMETER(DTL.PL_Truck_Scale_Wgh_Sts);
PARAMETER(DTL.PL_Site_ID_Required);
PARAMETER(DTL.PL_Status_4);
PARAMETER(DTL.PL_Status_5);
PARAMETER(DTL.PL_Status_6);
PARAMETER(DTL.PL_Status_7);
PARAMETER(DTL.PL_Status_8);
PARAMETER(DTL.PL_Status_9);
PARAMETER(DTL.PL_Status_10);
PARAMETER(DTL.PL_Status_11);
PARAMETER(DTL.PL_Status_12);
PARAMETER(DTL.PL_Primary_Company);
PARAMETER(DTL.FZ_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.PLC_Comment);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Pdctn Location    CH) TYPE(CHGOBJ) FILE(PKAFREP)           AB1100392;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.PL_Name);
 PARAMETER(PAR.Pl_VND_Address_Number);
 PARAMETER(PAR.PL_Type);
 PARAMETER(PAR.PL_Miles_Unused_Fld);
 PARAMETER(PAR.PL_Fax_Status);
 PARAMETER(PAR.PL_Fax_Carcass_Summary);
 PARAMETER(PAR.PL_Unused);
 PARAMETER(PAR.PL_Fax_Carcass_Detail);
 PARAMETER(PAR.PL_Fax_to_Producer);
 PARAMETER(PAR.PL_Producer_Fax_Sequence);
 PARAMETER(PAR.PL_State_Code);
 PARAMETER(PAR.PL_Truck_Scale_Wgh_Sts);
 PARAMETER(PAR.PL_Site_ID_Required);
 PARAMETER(PAR.PL_Status_4);
 PARAMETER(PAR.PL_Status_5);
 PARAMETER(PAR.PL_Status_6);
 PARAMETER(PAR.PL_Status_7);
 PARAMETER(PAR.PL_Status_8);
 PARAMETER(PAR.PL_Status_9);
 PARAMETER(PAR.PL_Status_10);
 PARAMETER(PAR.PL_Status_11);
 PARAMETER(PAR.PL_Status_12);
 PARAMETER(PAR.PL_Primary_Company);
 PARAMETER(PAR.FZ_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?6/13/02  Product Trace - Farm Manager name
 EXECUTE FUNCTION(Rtv/Chg Prod Loc "M"  RT) TYPE(RTVOBJ) FILE(PKAHREP)           AB1242841;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.PLC_Comment);
 {
  //?USER: Processing if Data record not found

  CASE;

  // IF PAR.PLC Comment NE WRK.Blank USR
  IF PAR.PLC_Comment <> WRK.Blank_USR;

  EXECUTE FUNCTION(Crt Prod Loc Comment  IF) TYPE(EXCINTFUN)                      AB1105482;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(LCL.PLC_Comment_Line);
  PARAMETER(PAR.PLC_Comment);
  PARAMETER('M');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Line nbr     RT) TYPE(RTVOBJ) FILE(PKAHREP)           AB1105481;
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.PLC_Comment_Line);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.PLC_Comment_Line = 1;

    //?USER: Process Data record

    // PAR.Pdctn Loc Comment Line = DB1.Pdctn Loc Comment Line + CON.1
    PAR.PLC_Comment_Line = DB1.PLC_Comment_Line + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Prod Loc Comment  CR) TYPE(CRTOBJ) FILE(PKAHREP)           AB1105457;
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.PLC_Comment_Line);
   PARAMETER(PAR.PLC_Comment);
   PARAMETER(PAR.PLC_Comment_Type);
   PARAMETER(PAR.RS_User_Changed);
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

  }

  ENDIF;

  //?USER: Process Data record

  CASE;

  // IF PAR.PLC Comment NE DB1.PLC Comment
  IF PAR.PLC_Comment <> DB1.PLC_Comment;

  EXECUTE FUNCTION(Chg Prod Loc Comment  CH) TYPE(CHGOBJ) FILE(PKAHREP)           AB1105458;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.PLC_Comment_Line);
  PARAMETER(PAR.PLC_Comment);
  PARAMETER(DB1.PLC_Comment_Type);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


