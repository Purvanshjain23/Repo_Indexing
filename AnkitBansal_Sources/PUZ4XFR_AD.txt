// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUZ4XFR
// ?Date: 14.08.2025 Time: 03:51:46
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?NOTE: Processing for Regular Sales Order, Billing Activity = 1
//?      (Invoice)
//?Action Items: Missing 'Inventory Item Type' in TDD?
//?      Still need 'API Process Status' field to pass in!!!
//?Create WIM Item Trans Detail (PUCICPP).
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Format Dates.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Transaction Date TS.
CASE;

// IF PAR.Transaction Date is Entered
IF PAR.Transaction_Date <> *ZERO;

EXECUTE FUNCTION(CVT *CYMD toYYYY-MM-DD IF) TYPE(EXCINTFUN)                     AC2211847;
PARAMETER(PAR.Transaction_Date);
PARAMETER(LCL.Date_Format);
{
 //?Execute internal function

 // PAR.Date (Alpha) USR = CVTVAR(PAR.Date                  USR)
 PAR.Date_Alpha_USR = CVTVAR(PAR.Date_USR);

 //?** YEAR **
 // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
 PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

 // LCL.Year Alpha (YYYY) USR = CONCAT(CON.20,PAR.Year  (Char) USR,CON.*ZERO)
 LCL.Year_Alpha_YYYY_USR = '20' + PAR.Year_Char_USR (*ZERO);

 // LCL.Text USR 5 = CONCAT(LCL.Year Alpha (YYYY) USR,CON.-,CON.*ZERO)
 LCL.Text_USR_5 = LCL.Year_Alpha_YYYY_USR + '-' (*ZERO);

 //?** MONTH **
 // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
 PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

 // LCL.Text 3 Length USR = CONCAT(PAR.Month (Char) USR,CON.-,CON.*ZERO)
 LCL.Text_3_Length_USR = PAR.Month_Char_USR + '-' (*ZERO);

 //?** DAY **
 // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
 PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

 // LCL.AS Date MM/DD = CONCAT(LCL.Text 3 Length USR,PAR.Day   (Char) USR,CON.*ZERO)
 LCL.AS_Date_MM_DD = LCL.Text_3_Length_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Format = CONCAT(LCL.Text USR 5,LCL.AS Date MM/DD,CON.*ZERO)
 PAR.Date_Format = LCL.Text_USR_5 + LCL.AS_Date_MM_DD (*ZERO);

}


// LCL.Date Timestamp Txt U = CONCAT(LCL.Date Format,CON.-00.00.00.000000,CON.*ZERO)
LCL.Date_Timestamp_Txt_U = LCL.Date_Format + '-00.00.00.000000' (*ZERO);

// LCL.Transaction Dt Timestamp = CVTVAR(LCL.Date Timestamp Txt U)
LCL.Transaction_Dt_Timestamp = CVTVAR(LCL.Date_Timestamp_Txt_U);

//?Transaction Date TS.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Transaction Dt Timestamp = CON.0001-01-01-00.00.00.00000
LCL.Transaction_Dt_Timestamp = '0001-01-01-00.00.00.00000';

ENDIF;

//?Production Date TS.
CASE;

// IF PAR.Production Date is entered
IF PAR.Production_Date <> *ZERO;

EXECUTE FUNCTION(CVT *CYMD toYYYY-MM-DD IF) TYPE(EXCINTFUN)                     AC2211847;
PARAMETER(PAR.Production_Date);
PARAMETER(LCL.Date_Format);
{
 //?Execute internal function

 // PAR.Date (Alpha) USR = CVTVAR(PAR.Date                  USR)
 PAR.Date_Alpha_USR = CVTVAR(PAR.Date_USR);

 //?** YEAR **
 // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
 PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

 // LCL.Year Alpha (YYYY) USR = CONCAT(CON.20,PAR.Year  (Char) USR,CON.*ZERO)
 LCL.Year_Alpha_YYYY_USR = '20' + PAR.Year_Char_USR (*ZERO);

 // LCL.Text USR 5 = CONCAT(LCL.Year Alpha (YYYY) USR,CON.-,CON.*ZERO)
 LCL.Text_USR_5 = LCL.Year_Alpha_YYYY_USR + '-' (*ZERO);

 //?** MONTH **
 // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
 PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

 // LCL.Text 3 Length USR = CONCAT(PAR.Month (Char) USR,CON.-,CON.*ZERO)
 LCL.Text_3_Length_USR = PAR.Month_Char_USR + '-' (*ZERO);

 //?** DAY **
 // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
 PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

 // LCL.AS Date MM/DD = CONCAT(LCL.Text 3 Length USR,PAR.Day   (Char) USR,CON.*ZERO)
 LCL.AS_Date_MM_DD = LCL.Text_3_Length_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Format = CONCAT(LCL.Text USR 5,LCL.AS Date MM/DD,CON.*ZERO)
 PAR.Date_Format = LCL.Text_USR_5 + LCL.AS_Date_MM_DD (*ZERO);

}


// LCL.Date Timestamp Txt U = CONCAT(LCL.Date Format,CON.-00.00.00.000000,CON.*ZERO)
LCL.Date_Timestamp_Txt_U = LCL.Date_Format + '-00.00.00.000000' (*ZERO);

// LCL.Production Date Timestamp = CVTVAR(LCL.Date Timestamp Txt U)
LCL.Production_Date_Timestamp = CVTVAR(LCL.Date_Timestamp_Txt_U);

//?Production Date TS.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Date Timestamp = CON.0001-01-01-00.00.00.00000
LCL.Production_Date_Timestamp = '0001-01-01-00.00.00.00000';

ENDIF;

ENDIF;

//?Get Item Info.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
PARAMETER(PAR.Item_Code);
PARAMETER(NLL.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.UOM_Primary_Dft);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second_Dft);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third_Dft);
PARAMETER(NLL.UOM_Pricing_Dft);
PARAMETER(NLL.Unit_Weight);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(NLL.Package_Type_Code);
PARAMETER(NLL.Base_Conv_Loss_Item);
PARAMETER(NLL.Variety_Rendered_Cut);
PARAMETER(NLL.Frozen_Make_to_Order_Sts);
PARAMETER(NLL.Credit_Item_Status);
PARAMETER(NLL.Seconds_Item);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV U/M Primary        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1647610;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.UOM_Primary);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If Unship=N & Inv Trns Type=Issue Types, Force Qty/Wgt to be Negative.
CASE;

// IF PAR.USR Unship Flag is no
IF PAR.USR_Unship_Flag = 'N';

// AND PAR.WIM Inventory Trans ID is Issue
AND PAR.WIM_Inventory_Trans_ID = 'I';

// AND PAR.WIM Inventory Trans Type is Issue Order Process
AND PAR.WIM_Inventory_Trans_Type = 'IO';

//?Check Qty.
CASE;

// IF PAR.Transaction Quantity is Greater than zero
IF PAR.Transaction_Quantity > *ZERO;

//?Force negative.
// PAR.Transaction Quantity = PAR.Transaction Quantity * CON.-1 *
PAR.Transaction_Quantity = PAR.Transaction_Quantity * -1;

ENDIF;

//?Check Wgt.
CASE;

// IF PAR.Transaction Weight is Greater than zero
IF PAR.Transaction_Weight > *ZERO;

//?Force negative.
// PAR.Transaction Weight = PAR.Transaction Weight * CON.-1 *
PAR.Transaction_Weight = PAR.Transaction_Weight * -1;

ENDIF;

ENDIF;

//?Get Next ITD Sequence #.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.ITD Sequence Number = CON.99999
LCL.ITD_Sequence_Number = 99999;

//?DN-Inventory Item Type is defaulted to 'FG' here! PIO will send in??
EXECUTE FUNCTION(Rtv Next ITD Seq Nbr  RT) TYPE(RTVOBJ) FILE(PUCICPP)           AC2215812;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('FG');
PARAMETER(PAR.WIM_Inventory_Trans_ID);
PARAMETER(PAR.WIM_Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date);
PARAMETER(LCL.ITD_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.ITD Sequence Number = CON.1
 PAR.ITD_Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
 PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

 QUIT;

}


ENDIF;

EXECUTE FUNCTION(Crt WIM Item Trans Dtl CR) TYPE(CRTOBJ) FILE(PUCICPP)          AC2209167;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('FG');
PARAMETER(PAR.WIM_Inventory_Trans_ID);
PARAMETER(PAR.WIM_Inventory_Trans_Type);
PARAMETER(PAR.Transaction_Date);
PARAMETER(LCL.ITD_Sequence_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(LCL.Production_Date_Timestamp);
PARAMETER(LCL.Transaction_Dt_Timestamp);
PARAMETER(LCL.UOM_Primary);
PARAMETER(PAR.Item_Transaction_Source);
PARAMETER(PAR.Transaction_Description);
PARAMETER(PAR.Transaction_Quantity);
PARAMETER(PAR.Transaction_Weight);
PARAMETER('LB');
PARAMETER(PAR.Transaction_Reason_Code);
PARAMETER(PAR.Shift_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2215806;
 PARAMETER(DB1.Create_Date_Timestamp);
 PARAMETER(DB1.Create_User_ID);
 PARAMETER(DB1.Create_Program_Name);
 {
  //?Execute internal function

  //?*** Set CREATE Time Stamp Info.
  // PAR.Create Date Timestamp = JOB.*System timestamp
  PAR.Create_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Create User ID = JOB.*USER
  PAR.Create_User_ID = JOB.*USER;

  // PAR.Create Program Name = JOB.*PROGRAM
  PAR.Create_Program_Name = JOB.*PROGRAM;

 }

}


ENDIF;

//?Update WIM Item Balance Detail (PUCHCPP).
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?DN-Inventory Item Type is defaulted to 'FG' here! PIO will send in??
EXECUTE FUNCTION(Upd WIM Item Bal Dtl  RT) TYPE(RTVOBJ) FILE(PUCHCPP)           AC2215843;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('FG');
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Transaction_Quantity);
PARAMETER(PAR.Transaction_Weight);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER('N');
{
 //?USER: Processing if Data record not found

 //?Update On Hand Qty/Wgt?
 CASE;

 // IF PAR.Update On Hand Qty/Wgt U is Yes
 IF PAR.Update_On_Hand_Qty_Wgt_U = 'Y';

 // LCL.On Hand Weight = PAR.Transaction Weight
 LCL.On_Hand_Weight = PAR.Transaction_Weight;

 // LCL.On Hand UOM1 Quantity = PAR.Transaction Quantity
 LCL.On_Hand_UOM1_Quantity = PAR.Transaction_Quantity;

 //?Update On Hand Qty/Wgt?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.On Hand Weight = CON.*ZERO
 LCL.On_Hand_Weight = *ZERO;

 // LCL.On Hand UOM1 Quantity = CON.*ZERO
 LCL.On_Hand_UOM1_Quantity = *ZERO;

 ENDIF;

 // LCL.Production Date YYYYMMDD = PAR.Production Date
 LCL.Production_Date_YYYYMMDD = PAR.Production_Date;

 EXECUTE FUNCTION(Crt WIM Item Bal Dtl  CR) TYPE(CRTOBJ) FILE(PUCHCPP)           AC2209117;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Item_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.On_Hand_Weight);
 PARAMETER(LCL.On_Hand_UOM1_Quantity);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(0001-01-01-00.00.00.00000);
 PARAMETER(LCL.Production_Date_YYYYMMDD);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER('A');
 PARAMETER(0001-01-01-00.00.00.00000);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
  PARAMETER(DB1.Create_Date_Timestamp);
  PARAMETER(DB1.Create_User_ID);
  PARAMETER(DB1.Create_Program_Name);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CREATE Time Stamp Info.
   // PAR.Create Date Timestamp = JOB.*System timestamp
   PAR.Create_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Create User ID = JOB.*USER
   PAR.Create_User_ID = JOB.*USER;

   // PAR.Create Program Name = JOB.*PROGRAM
   PAR.Create_Program_Name = JOB.*PROGRAM;

   //?*** Set CHANGE Time Stamp Info.
   //?Cannot set Update Date TS here, will error.
   // PAR.Update User Id = CON.*BLANK
   PAR.Update_User_Id = *BLANK;

   // PAR.Update Program Name = CON.*BLANK
   PAR.Update_Program_Name = *BLANK;

  }

 }

 //?USER: Process Data record

 // LCL.On Hand Weight = DB1.On Hand Weight + PAR.Transaction Weight
 LCL.On_Hand_Weight = DB1.On_Hand_Weight + PAR.Transaction_Weight;

 // LCL.On Hand UOM1 Quantity = DB1.On Hand UOM1 Quantity + PAR.Transaction Quantity
 LCL.On_Hand_UOM1_Quantity = DB1.On_Hand_UOM1_Quantity + PAR.Transaction_Quantity;

 EXECUTE FUNCTION(Chg WIM Item Bal Dtl  CH) TYPE(CHGOBJ) FILE(PUCHCPP)           AC2209118;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Item_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 PARAMETER(DB1.Physical_Count_Status);
 PARAMETER(LCL.On_Hand_Weight);
 PARAMETER(LCL.On_Hand_UOM1_Quantity);
 PARAMETER(DB1.In_Transit_Weight);
 PARAMETER(DB1.In_Transit_UOM1_Quantity);
 PARAMETER(DB1.On_Hold_Weight);
 PARAMETER(DB1.On_Hold_UOM1_Quantity);
 PARAMETER(DB1.Available_Weight);
 PARAMETER(DB1.Available_UOM1_Quantity);
 PARAMETER(DB1.Physical_Start_Weight);
 PARAMETER(DB1.Physical_Start_UOM1);
 PARAMETER(DB1.Physical_Start_Date);
 PARAMETER(DB1.Physical_Start_Timestamp);
 PARAMETER(DB1.Production_Date_YYYYMMDD);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

}


ENDIF;

//?Update WIM Item Balance (PUCGCPP).
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?DN-Inventory Item Type is defaulted to 'FG' here! PIO will send in??
EXECUTE FUNCTION(Rtv Sum On Hand Wgt/QtyRT) TYPE(RTVOBJ) FILE(PUCHCPP)          AC2215846;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('FG');
PARAMETER(LCL.On_Hand_Weight);
PARAMETER(LCL.On_Hand_UOM1_Quantity);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.On Hand Weight = PAR.On Hand Weight + DB1.On Hand Weight
 PAR.On_Hand_Weight = PAR.On_Hand_Weight + DB1.On_Hand_Weight;

 // PAR.On Hand UOM1 Quantity = PAR.On Hand UOM1 Quantity + DB1.On Hand UOM1 Quantity
 PAR.On_Hand_UOM1_Quantity = PAR.On_Hand_UOM1_Quantity + DB1.On_Hand_UOM1_Quantity;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Upd On Hand Wgt/Qty   RT) TYPE(RTVOBJ) FILE(PUCGCPP)           AC2215847;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('FG');
PARAMETER(LCL.On_Hand_Weight);
PARAMETER(LCL.On_Hand_UOM1_Quantity);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg WIM Item Balance  CH) TYPE(CHGOBJ) FILE(PUCGCPP)           AC2209098;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Item_Type);
 PARAMETER(PAR.On_Hand_Weight_Summary);
 PARAMETER(PAR.On_Hand_UOM1_Summary);
 PARAMETER(DB1.In_Transit_Weight_Summary);
 PARAMETER(DB1.In_Transit_UOM1_Summary);
 PARAMETER(DB1.Qty_Available_to_Sell);
 PARAMETER(DB1.On_Hold_Weight_Summary);
 PARAMETER(DB1.On_Hold_UOM1_Summary);
 PARAMETER(DB1.Available_Weight_Summary);
 PARAMETER(DB1.Available_UOM1_Summary);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
  PARAMETER(DB1.Update_Date_Timestamp);
  PARAMETER(DB1.Update_User_Id);
  PARAMETER(DB1.Update_Program_Name);
  {
   //?Execute internal function

   //?*** Set CHANGE Time Stamp Info.
   // PAR.Update Date Timestamp = JOB.*System timestamp
   PAR.Update_Date_Timestamp = JOB.*System_timestamp;

   // PAR.Update User Id = JOB.*USER
   PAR.Update_User_Id = JOB.*USER;

   // PAR.Update Program Name = JOB.*PROGRAM
   PAR.Update_Program_Name = JOB.*PROGRAM;

  }

 }

}


ENDIF;

ENDIF;

