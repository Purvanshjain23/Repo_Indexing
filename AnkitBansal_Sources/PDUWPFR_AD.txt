// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUWPFR
// ?Date: 14.08.2025 Time: 12:04:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?** Retrieve the Field Security display flag. Do not print selected
//?** fields if it is "NO". In this case, do not print the amount
//?** fields.                                        2/3/2006 LJB
// Call program Rtv Field Security    XF.
CALL PROGRAM(Rtv Field Security    XF) ('PDL1XFR');
PARAMETER(WRK.Display_Flag);

//?**   Get all possible accounting companies into usr company fields,
//?**   allow 5 companies.                     RMC 02/07/07
EXECUTE FUNCTION(Rtv Plant Cos all     RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1809261;
PARAMETER(*ZERO);
PARAMETER(LCL.USR_Company_Number_1);
PARAMETER(LCL.USR_Company_Number_2);
PARAMETER(LCL.USR_Company_Number_3);
PARAMETER(LCL.USR_Company_Number_4);
PARAMETER(LCL.USR_Company_Number_5);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.USR Company Number 1 is Equal to zero
 IF PAR.USR_Company_Number_1 = *ZERO;

 // PAR.USR Company Number 1 = DB1.Company Number
 PAR.USR_Company_Number_1 = DB1.Company_Number;

 // IF PAR.USR Company Number 2 is Equal to zero
 IF PAR.USR_Company_Number_2 = *ZERO;

 // PAR.USR Company Number 2 = DB1.Company Number
 PAR.USR_Company_Number_2 = DB1.Company_Number;

 // IF PAR.USR Company Number 3 is Equal to zero
 IF PAR.USR_Company_Number_3 = *ZERO;

 // PAR.USR Company Number 3 = DB1.Company Number
 PAR.USR_Company_Number_3 = DB1.Company_Number;

 // IF PAR.USR Company Number 4 is Equal to zero
 IF PAR.USR_Company_Number_4 = *ZERO;

 // PAR.USR Company Number 4 = DB1.Company Number
 PAR.USR_Company_Number_4 = DB1.Company_Number;

 // IF PAR.USR Company Number 5 is Equal to zero
 IF PAR.USR_Company_Number_5 = *ZERO;

 // PAR.USR Company Number 5 = DB1.Company Number
 PAR.USR_Company_Number_5 = DB1.Company_Number;

 ENDIF;

}


//?***** Change Log and Comments
//?** 2/3/2006 LJB
//?** Retrieve the Field Security display flag. Do not print selected
//?** fields if it is "NO". In this case, do not print the amount
//?** fields.
//?*****
//?** 05/31/2006 LJB OMS047
//?** Add record selection criteria - if only the order number is
//?**   entered, select only that order number.
//?*****
//?*****
//?** 02/07/2007 RMC Added Acctng Co Number Totals so credit can
//?** see what goes to each company.  (ie. warehouse SJG has diff acctng co)
//?**   Get all possible accounting companies into usr company fields,
//?**   allow 5 companies.
//?*****
//?*****
//?** 05/30/2008 RMC for HPB - print: shipping dtl accr + order value total
//?USER: Record selection processing

//?110305 SLM Restrict on Company Number
//?       the Company number is being passed and we should only select
//?       on that company
//?       also only on the Customer type = to the Customer type
//?062607 SLM Only print Invoices that are not Custom
// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?010606 SLM USE THE SHIP TO SHIP TO NUMBER
CASE;

// IF DB1.Company Number NE PAR.Company Number
IF DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel Customer Type     XF.
CALL PROGRAM(Sel Customer Type     XF) ('PPUOXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_to_Customer_Ship_To);
PARAMETER(LCL.Type_Code);
PARAMETER(PAR.Process_Cust_Types_Usr);
PARAMETER(PGM.*Record_selected);

ENDIF;

//?USER: Process top of page

//?Billing type   - First part of title
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

// TOP.Description Usr - 50 = CON.*** SALES ORDERS ONLY ***
TOP_Description_Usr_50 = '*** SALES ORDERS ONLY ***';

//?Billing type   - First part of title
// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// TOP.Description Usr - 50 = CON.*** CREDIT MEMOS ONLY ***
TOP_Description_Usr_50 = '*** CREDIT MEMOS ONLY ***';

//?Billing type   - First part of title
// IF PAR.Billing Activity Type is Debit Memo
IF PAR.Billing_Activity_Type = '3';

// TOP.Description Usr - 50 = CON.*** Debit Memos Only ***
TOP_Description_Usr_50 = '*** Debit Memos Only ***';

//?Billing type   - First part of title
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Description Usr - 50 = CON.*** Cr/Dr Memos Only ***
TOP_Description_Usr_50 = '*** Cr/Dr Memos Only ***';

ENDIF;

//?Last part of title
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- Inter-Co Customers,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- Inter-Co Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is 3rd Party Customer(s)
IF PAR.Process_Cust_Types_Usr = 'TP';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- 3rd Party Customers,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- 3rd Party Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is All Customers
IF PAR.Process_Cust_Types_Usr = 'BT';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- *All Customers,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- *All Customers' (1);

//?Last part of title
// IF PAR.Process Cust Types Usr is Selection by Order/Load
IF PAR.Process_Cust_Types_Usr = 'OR';

// TOP.Description Usr - 50 = CONCAT(TOP.Description Usr - 50,CON.- Selection by Order/Load,CON.1)
TOP_Description_Usr_50 = TOP_Description_Usr_50 + '- Selection by Order/Load' (1);

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

// 1PG.Load ID = PAR.Load ID
X1PG_Load_ID = PAR.Load_ID;

// 1PG.Order Number = PAR.Order Number
X1PG_Order_Number = PAR.Order_Number;

// 1PG.Actual Shipped Date = PAR.Actual Shipped Date
X1PG_Actual_Shipped_Date = PAR.Actual_Shipped_Date;

CASE;

// IF PAR.Order Number is Equal to zeros
IF PAR.Order_Number = *ZERO;

// AND PAR.Load ID is Blank
AND PAR.Load_ID = *ZERO;

// AND PAR.Actual Shipped Date is not entered
AND PAR.Actual_Shipped_Date = *ZERO;

// 1PG.USR Desc. 10 = CON.*ALL
X1PG_USR_Desc_10 = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Job Name CDE header format

// SUPPRESSED PRINT Bill to Name header format

// SUPPRESSED PRINT Ship To Name header format

// SUPPRESSED PRINT Order Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(CUR.Print_Invoice_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv One Invoice /PO   XP.
CALL PROGRAM(Rtv One Invoice /PO   XP) ('PMCOXFR');
PARAMETER(CUR.Ship_to_Customer_Ship_To);
PARAMETER(CUR.One_Invoice_Per_PO);

//?****** RMC 02/07/07         --> 3/28/07 from 1st Active Dtl
//?Get Accounting Company to print final totals
EXECUTE FUNCTION(RTV Whse Acct Co      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1809259;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(CUR.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


//?For high plains only
//?12/15/09 PKD Adjust the total for all organizations.
EXECUTE FUNCTION(Rtv Inv AddOn/Allow   RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1844822;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.USR_Amount_Applied);
{
 //?USER: Initialize routine

 // PAR.USR Amount Applied = CON.*ZERO
 PAR.USR_Amount_Applied = *ZERO;

 //?USER: Process Data record

 // PAR.USR Amount Applied = PAR.USR Amount Applied + DB1.Extended Amount
 PAR.USR_Amount_Applied = PAR.USR_Amount_Applied + DB1.Extended_Amount;

}


// CUR.Order Value Total = CUR.Order Value Total + LCL.USR Amount Applied
CUR.Order_Value_Total = CUR.Order_Value_Total + LCL.USR_Amount_Applied;

//?USER: Process after print of detail format

NXT.Total_Order_Values = SUM(CUR.Order_Value_Total);

NXT.Total_Order_Weights = SUM(CUR.Order_Weight_Total);

//?****** RMC 02/07/07
//?Accum Order Value total per Accounting Company to print on final totals
//?Accum into Company number buckets
CASE;

// IF CUR.Accounting Company EQ LCL.USR Company Number 1
IF CUR.Accounting_Company = LCL.USR_Company_Number_1;

// LCL.USR Adjustment Amt 1 = LCL.USR Adjustment Amt 1 + CUR.Order Value Total
LCL.USR_Adjustment_Amt_1 = LCL.USR_Adjustment_Amt_1 + CUR.Order_Value_Total;

//?Accum into Company number buckets
// IF CUR.Accounting Company EQ LCL.USR Company Number 2
IF CUR.Accounting_Company = LCL.USR_Company_Number_2;

// LCL.USR Adjustment Amt 2 = LCL.USR Adjustment Amt 2 + CUR.Order Value Total
LCL.USR_Adjustment_Amt_2 = LCL.USR_Adjustment_Amt_2 + CUR.Order_Value_Total;

//?Accum into Company number buckets
// IF CUR.Accounting Company EQ LCL.USR Company Number 3
IF CUR.Accounting_Company = LCL.USR_Company_Number_3;

// LCL.USR Adjustment Amt 3 = LCL.USR Adjustment Amt 3 + CUR.Order Value Total
LCL.USR_Adjustment_Amt_3 = LCL.USR_Adjustment_Amt_3 + CUR.Order_Value_Total;

//?Accum into Company number buckets
// IF CUR.Accounting Company EQ LCL.USR Company Number 4
IF CUR.Accounting_Company = LCL.USR_Company_Number_4;

// LCL.USR Adjustment Amt 4 = LCL.USR Adjustment Amt 4 + CUR.Order Value Total
LCL.USR_Adjustment_Amt_4 = LCL.USR_Adjustment_Amt_4 + CUR.Order_Value_Total;

//?Accum into Company number buckets
// IF CUR.Accounting Company EQ LCL.USR Company Number 5
IF CUR.Accounting_Company = LCL.USR_Company_Number_5;

// LCL.USR Adjustment Amt 5 = LCL.USR Adjustment Amt 5 + CUR.Order Value Total
LCL.USR_Adjustment_Amt_5 = LCL.USR_Adjustment_Amt_5 + CUR.Order_Value_Total;

ENDIF;

//?******
//?** Delete record from the Work File          05/31/2006 LJB OMS047
CASE;

// IF CUR.Fax Invoice Flag is No Automatic Fax Invoice
IF CUR.Fax_Invoice_Flag = 'N';

// AND PAR.USR Process status is yes
AND PAR.USR_Process_status = 'Y';

EXECUTE FUNCTION(DLT PD Invoice List Wk DL) TYPE(DLTOBJ) FILE(PDJ4CPP)          AC1339741;
PARAMETER(CUR.Job_Name_CDE);
PARAMETER(CUR.Order_Number);

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Ship To Name totals format

// SUPPRESSED PRINT Bill to Name totals format

// SUPPRESSED PRINT Job Name CDE totals format

//?USER: On print of final totals format

//?RMC 02/07/07 New total to accomodate diff acctng companies
// CUR.USR Company Number 1 = LCL.USR Company Number 1
CUR.USR_Company_Number_1 = LCL.USR_Company_Number_1;

// CUR.USR Company Number 2 = LCL.USR Company Number 2
CUR.USR_Company_Number_2 = LCL.USR_Company_Number_2;

// CUR.USR Company Number 3 = LCL.USR Company Number 3
CUR.USR_Company_Number_3 = LCL.USR_Company_Number_3;

// CUR.USR Company Number 4 = LCL.USR Company Number 4
CUR.USR_Company_Number_4 = LCL.USR_Company_Number_4;

// CUR.USR Company Number 5 = LCL.USR Company Number 5
CUR.USR_Company_Number_5 = LCL.USR_Company_Number_5;

// CUR.USR Adjustment Amt 1 = LCL.USR Adjustment Amt 1
CUR.USR_Adjustment_Amt_1 = LCL.USR_Adjustment_Amt_1;

// CUR.USR Adjustment Amt 2 = LCL.USR Adjustment Amt 2
CUR.USR_Adjustment_Amt_2 = LCL.USR_Adjustment_Amt_2;

// CUR.USR Adjustment Amt 3 = LCL.USR Adjustment Amt 3
CUR.USR_Adjustment_Amt_3 = LCL.USR_Adjustment_Amt_3;

// CUR.USR Adjustment Amt 4 = LCL.USR Adjustment Amt 4
CUR.USR_Adjustment_Amt_4 = LCL.USR_Adjustment_Amt_4;

// CUR.USR Adjustment Amt 5 = LCL.USR Adjustment Amt 5
CUR.USR_Adjustment_Amt_5 = LCL.USR_Adjustment_Amt_5;

