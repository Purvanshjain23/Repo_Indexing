// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLTDFR
// ?Date: 14.08.2025 Time: 03:34:01
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(CTL.Allow_Multi_Company);
PARAMETER(CTL.Default_Printer);
PARAMETER(CTL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

EXECUTE FUNCTION(RTV Load Str Company  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1695918;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Company_Number);
PARAMETER('MAXFLAG');
PARAMETER(LCL.Max_Schd_Shp_Wt_Edit_Flg);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Status Flag 4  Y/N = CND.blank
LCL.Status_Flag_4_Y_N = *BLANK;

// LCL.Error Flag            USR = CND.No
LCL.Error_Flag_USR = 'N';

//?** Add rcd.context changed flag                       W288
// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

// LCL.Order Number Saved USR = CND.Equal to zeros
LCL.Order_Number_Saved_USR = *ZERO;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Organization early, for slotting shed     E001895
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

// LCL.Change Flag USR = CND.No
LCL.Change_Flag_USR = 'N';

//?USER: Initialize subfile control

//?First time only default Scheduled Ship Date
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Scheduled Ship Date USR = PAR.Scheduled Ship Date
CTL.Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date;

// WRK.Scheduled ShpDate SavUsr = PAR.Scheduled Ship Date
WRK.Scheduled_ShpDate_SavUsr = PAR.Scheduled_Ship_Date;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Retrieve warehouse code if not on the screen
CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1517921;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Retrieve warehouse description
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?All orders on load have same shipping method
// PAR.Shipping Method = RCD.Shipping Method
PAR.Shipping_Method = RCD.Shipping_Method;

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// RCD.Sched Delivery Date USR = DB1.Requested Delivery Date
RCD.Sched_Delivery_Date_USR = DB1.Requested_Delivery_Date;

// RCD.Sched Delivery Time USR = DB1.Requested Delivery Time
RCD.Sched_Delivery_Time_USR = DB1.Requested_Delivery_Time;

// RCD.Requested Ship Date USR = DB1.Requested Ship Date
RCD.Requested_Ship_Date_USR = DB1.Requested_Ship_Date;

//?** Save fields to test for changes later              W288
// LCL.Requested Delivery DateUs = DB1.Requested Delivery Date
LCL.Requested_Delivery_DateUs = DB1.Requested_Delivery_Date;

// RCD.Requested Delivery Date = DB1.Requested Delivery Date
RCD.Requested_Delivery_Date = DB1.Requested_Delivery_Date;

// RCD.Scheduled Delivery Dt = DB1.Requested Delivery Date
RCD.Scheduled_Delivery_Dt = DB1.Requested_Delivery_Date;

// RCD.Time = DB1.Requested Delivery Time
RCD.Time = DB1.Requested_Delivery_Time;

// RCD.Ship Date USR = DB1.Requested Ship Date
RCD.Ship_Date_USR = DB1.Requested_Ship_Date;

//?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
//?  'RTV UM/Whs Code-Add CS RT'.
EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.U_M_Base_Price);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Sum for later check
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
 LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


// RCD.USR Warehouse Code = RCD.Warehouse Code
RCD.USR_Warehouse_Code = RCD.Warehouse_Code;

// WRK.Warehouse Code = RCD.Warehouse Code
WRK.Warehouse_Code = RCD.Warehouse_Code;

// LCL.USR Company Number = RCD.Company Number
LCL.USR_Company_Number = RCD.Company_Number;

// RCD.Must Ship Error = CND.No Error
RCD.Must_Ship_Error = *BLANK;

// LCL.Error Flag            USR = CND.No
LCL.Error_Flag_USR = 'N';

//?PK0302  Save 1st order for Sched Ship Wt Edit.
CASE;

// IF LCL.Order Number Saved USR is Equal to zeros
IF LCL.Order_Number_Saved_USR = *ZERO;

// LCL.Order Number Saved USR = DB1.Order Number
LCL.Order_Number_Saved_USR = DB1.Order_Number;

// LCL.Export Status = DB1.Export Status
LCL.Export_Status = DB1.Export_Status;

// LCL.Order Type - Sales = DB1.Order Type - Sales
LCL.Order_Type_Sales = DB1.Order_Type_Sales;

// LCL.Order Weight Total = DB1.Order Weight Total
LCL.Order_Weight_Total = DB1.Order_Weight_Total;

// LCL.Load Type = DB1.Load Type
LCL.Load_Type = DB1.Load_Type;

// LCL.Shipping Method = DB1.Shipping Method
LCL.Shipping_Method = DB1.Shipping_Method;

ENDIF;

//?Deadline Depart Date/Time
DO;

//?** Get DDD/T from Load Detail                         W288
EXECUTE FUNCTION(RTV 1st Stop Info      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1967996;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(1);
PARAMETER(LCL.Comments_for_Pickup);
PARAMETER(LCL.Miles_to_next_stop);
PARAMETER(LCL.Freight_Charge);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Freight_Misc_Charge);
PARAMETER(LCL.Freight_Stop_Charge);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Ship_Status);
PARAMETER(LCL.Estimated_Arrival_Date);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
PARAMETER(LCL.Confirmation_Made_With);
PARAMETER(LCL.Confirmation_Number);
PARAMETER(LCL.Actual_Delivery_Date);
PARAMETER(LCL.Actual_Delivery_time);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.MPC_Number);
PARAMETER(LCL.Load_Dtl_On_Time_Flag);
PARAMETER(LCL.On_Time_Addl_Rsn_Unused);
PARAMETER(LCL.Seal_Nbr_1);
PARAMETER(LCL.Seal_Nbr_2);
PARAMETER(LCL.Seal_Nbr_3);
PARAMETER(LCL.Seal_Nbr_4);
PARAMETER(LCL.Seal_Nbr_5);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(LCL.LD_Unused_Date_2);
PARAMETER(LCL.LD_Unused_Date_3);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(LCL.LD_Unused_Time_2);
PARAMETER(LCL.LD_Unused_Time_3);
PARAMETER(LCL.Miles_Error_Sts);
PARAMETER(LCL.LD_Unused_Sts_2);
PARAMETER(LCL.HPB_Transload_Station);
PARAMETER(LCL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(LCL.Carrier_Ref_PRO_Inv);
PARAMETER(LCL.Cust_Assigned_Appt_#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Deadline Depart DT    HDR is not entered
IF LCL.Deadline_Depart_DT_HDR = *ZERO;

CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

//?if export w/no state then default in SSD and 8:00am for time
CASE;

// IF DB1.Export Status is yes
IF DB1.Export_Status = 'Y';

// AND DB1.Ship To State Code is International Accounts
AND DB1.Ship_To_State_Code = '.';

// WRK.Month NBR USR = CTL.Scheduled Ship Date USR *MONTH
WRK.Month_NBR_USR = DATEDTLS(CTL.Scheduled_Ship_Date_USR 'MO' 1111111 'NONE' 'N' 1);

// WRK.Month USR = CVTVAR(WRK.Month NBR USR)
WRK.Month_USR = CVTVAR(WRK.Month_NBR_USR);

// WRK.Day NBR USR = CTL.Scheduled Ship Date USR *DAY OF MONTH
WRK.Day_NBR_USR = DATEDTLS(CTL.Scheduled_Ship_Date_USR 'DM' 1111111 'NONE' 'N' 1);

// WRK.Day USR = CVTVAR(WRK.Day NBR USR)
WRK.Day_USR = CVTVAR(WRK.Day_NBR_USR);

// WRK.Month/Day Alpha MMDD = CONCAT(WRK.Month USR,WRK.Day USR,CON.*ZERO)
WRK.Month_Day_Alpha_MMDD = WRK.Month_USR + WRK.Day_USR (*ZERO);

// RCD.Deadline Departure MM/DD = CVTVAR(WRK.Month/Day Alpha MMDD)
RCD.Deadline_Departure_MM_DD = CVTVAR(WRK.Month_Day_Alpha_MMDD);

//?default time to 8:00am
// RCD.Deadline Depart Time 4,0 = CON.0800
RCD.Deadline_Depart_Time_40 = 0800;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?** DDD/T to MM/DD, HH/MM conversion                W288
DO;

//?convert date to mm/dd
// WRK.Month NBR USR = LCL.Deadline Depart DT    HDR *MONTH
WRK.Month_NBR_USR = DATEDTLS(LCL.Deadline_Depart_DT_HDR 'MO' 1111111 'NONE' 'N' 1);

// WRK.Month USR = CVTVAR(WRK.Month NBR USR)
WRK.Month_USR = CVTVAR(WRK.Month_NBR_USR);

// WRK.Day NBR USR = LCL.Deadline Depart DT    HDR *DAY OF MONTH
WRK.Day_NBR_USR = DATEDTLS(LCL.Deadline_Depart_DT_HDR 'DM' 1111111 'NONE' 'N' 1);

// WRK.Day USR = CVTVAR(WRK.Day NBR USR)
WRK.Day_USR = CVTVAR(WRK.Day_NBR_USR);

// WRK.Month/Day Alpha MMDD = CONCAT(WRK.Month USR,WRK.Day USR,CON.*ZERO)
WRK.Month_Day_Alpha_MMDD = WRK.Month_USR + WRK.Day_USR (*ZERO);

// RCD.Deadline Departure MM/DD = CVTVAR(WRK.Month/Day Alpha MMDD)
RCD.Deadline_Departure_MM_DD = CVTVAR(WRK.Month_Day_Alpha_MMDD);

//?convert time to hh/mm
// WRK.Hour 1 USR = LCL.Deadline Depart Time  HDR *HOURS
WRK.Hour_1_USR = TIMEDTLS(LCL.Deadline_Depart_Time_HDR 'HR');

// WRK.Hours  2A            USR = CVTVAR(WRK.Hour 1 USR)
WRK.Hours_2A_USR = CVTVAR(WRK.Hour_1_USR);

// WRK.@Minutes = LCL.Deadline Depart Time  HDR *MINUTES
WRK.@Minutes = TIMEDTLS(LCL.Deadline_Depart_Time_HDR 'MN');

// WRK.Minutes  2A          USR = CVTVAR(WRK.@Minutes)
WRK.Minutes_2A_USR = CVTVAR(WRK.@Minutes);

// WRK.Time  4A             USR = CONCAT(WRK.Hours  2A            USR,WRK.Minutes  2A          USR,C
WRK.Time_4A_USR = WRK.Hours_2A_USR + WRK.Minutes_2A_USR (*ZERO);

// RCD.Deadline Depart Time 4,0 = CVTVAR(WRK.Time  4A             USR)
RCD.Deadline_Depart_Time_40 = CVTVAR(WRK.Time_4A_USR);

ENDDO;

ENDIF;

ENDDO;

//?Change warehouses at load level
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

CASE;

// IF RCD.Export Status is no
IF RCD.Export_Status = 'N';

// AND RCD.U/M - Base Price is EQ Boxes
AND RCD.U_M_Base_Price = 'BX';

// RCD.Warehouse Code = CTL.Warehouse Code
RCD.Warehouse_Code = CTL.Warehouse_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Warehouse for Order &1 will not change.  Press Enter to Confirm.'
MESSAGE(USR2489 *INFO);
MSGPARM(RCD.Order_Number);

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Send status message - 'Validation Processing'
MESSAGE(USR4330 *STATUS);

//?SEL: Warehouse Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

EXECUTE FUNCTION(Sel Warehouse         IF) TYPE(EXCINTFUN)                      AC1962374;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER('O/P');
{
 //?Execute internal function

 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 // Call program Sel User Appl Whs     SR.
 CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program SEL Warehouse          SR.
 CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
 PARAMETER(PAR.Warehouse_Code);

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDIF;

//?Validate warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('O/P');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Validate Scheduled Ship Date  and MAX Sched Ship Wt for the day
CASE;

// IF CTL.Scheduled Ship Date USR LT JOB.*Job date
IF CTL.Scheduled_Ship_Date_USR < JOB.*Job_date;

// Send error message - '&1 entered must be equal to or greater than &2.'
ERROR(USR2018);
MSGPARM(CTL.Scheduled_Ship_Date_USR);
MSGPARM(JOB.*Job_date);

//?Validate Scheduled Ship Date  and MAX Sched Ship Wt for the day
// IF *OTHERWISE
IF *OTHERWISE;

//?processing
CASE;

// IF CTL.Scheduled Ship Date USR NE PAR.Scheduled Ship Date
IF CTL.Scheduled_Ship_Date_USR <> PAR.Scheduled_Ship_Date;

//?PK0302 Perform Max Sched Ship Wt edit if flag is Y & Shp Mth = Truck
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND LCL.Shipping Method is Not Rail
AND LCL.Shipping_Method = 'CT'/'PT';

// AND LCL.Load Type is Regular
AND LCL.Load_Type = 'R';

//?If Warehouse is changing
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

// WRK.USR Warehouse Code = CTL.Warehouse Code
WRK.USR_Warehouse_Code = CTL.Warehouse_Code;

//?If Warehouse is changing
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Warehouse Code = WRK.Warehouse Code
WRK.USR_Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

//?** Test slot limits for req date only if Seaboard     E001895
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// Call program SEL Sched Loads Cnfrm  PV.
CALL PROGRAM(SEL Sched Loads Cnfrm  PV) ('POJSPVR');
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(PAR.Deadline_Depart_Date_LH);
PARAMETER(WRK.USR_Return_Code);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Order_Weight_Assigned);
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(WRK.Warehouse_Type_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
PARAMETER(LCL.Requested_Delivery_DateUs);
PARAMETER(CTL.Order_Number);

CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

// CTL.Scheduled Ship Date USR = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date_USR = LCL.Scheduled_Ship_Date_USR;

ENDIF;

CASE;

// IF WRK.USR Return Code is Exists
IF WRK.USR_Return_Code = 'E';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?PK0302 Perform Max Sched Ship Wt edit if flag is Y & Shp Mth = Truck
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Validate Warehouse Code   and Max Sched Ship WT for the day
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

//?FP1054 2/19/09 RMC cant chg shipping company
EXECUTE FUNCTION(Val WHS/Rtv ShpCo     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1922615;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?** Test changed company, rtv organization
//?VAL: Shipping Company
CASE;

// IF LCL.Shipping Company NE LCL.USR Company Number
IF LCL.Shipping_Company <> LCL.USR_Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(LCL.USR_Company_Number);

//?VAL: Shipping Company
// IF *OTHERWISE
IF *OTHERWISE;

//?** Retrieve Organization if company changes           E001895
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

ENDIF;

//?whs processing, slotting, date tests
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_Code);

//?whs processing, slotting, date tests
// IF *OTHERWISE
IF *OTHERWISE;

//?processing
CASE;

// IF CTL.Warehouse Code NE CTL.USR Warehouse Code
IF CTL.Warehouse_Code <> CTL.USR_Warehouse_Code;

//?PK0302 Perform Max Sched Ship Wt edit if flag is Y & Shp Mth = PT
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND LCL.Shipping Method is Not Rail
AND LCL.Shipping_Method = 'CT'/'PT';

// AND LCL.Load Type is Regular
AND LCL.Load_Type = 'R';

//?If Warehouse is changing
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

// WRK.USR Warehouse Code = CTL.Warehouse Code
WRK.USR_Warehouse_Code = CTL.Warehouse_Code;

//?If Warehouse is changing
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Warehouse Code = WRK.Warehouse Code
WRK.USR_Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

//?** Test for slotting limits for date-this whse        E001895
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// Call program SEL Sched Loads Cnfrm  PV.
CALL PROGRAM(SEL Sched Loads Cnfrm  PV) ('POJSPVR');
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(PAR.Deadline_Depart_Date_LH);
PARAMETER(WRK.USR_Return_Code);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Order_Weight_Assigned);
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(WRK.Warehouse_Type_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
PARAMETER(LCL.Requested_Delivery_DateUs);
PARAMETER(CTL.Order_Number);

CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

// CTL.Scheduled Ship Date USR = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date_USR = LCL.Scheduled_Ship_Date_USR;

ENDIF;

//?If error but F3 from Sched Loads Confrm pgm without chg to SSD
CASE;

// IF WRK.USR Return Code is Exists
IF WRK.USR_Return_Code = 'E';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?If error but F3 from Sched Loads Confrm pgm without chg to SSD
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?PK0302 Perform Max Sched Ship Wt edit if flag is Y & Shp Mth = PT
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Reload subfile if CTL Warehouse is not equal to CTL USR Warehouse
CASE;

// IF CTL.Warehouse Code NE CTL.USR Warehouse Code
IF CTL.Warehouse_Code <> CTL.USR_Warehouse_Code;

// CTL.USR Warehouse Code = CTL.Warehouse Code
CTL.USR_Warehouse_Code = CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?FP1309 perform validation on every detail line and if error
//?report this back to the control screen
//?If Scheduled Ship Date Changed: Test Item Age and invld SSD
CASE;

// IF WRK.Scheduled ShpDate SavUsr NE CTL.Scheduled Ship Date USR
IF WRK.Scheduled_ShpDate_SavUsr <> CTL.Scheduled_Ship_Date_USR;

// WRK.Error Status  3 = CND.No
WRK.Error_Status_3 = 'N';

// WRK.Error Status  2 = CND.No
WRK.Error_Status_2 = 'N';

//?testreviewslmvalidation
//?age date validation
CASE;

// IF CTL.Load ID is GT Zero
IF CTL.Load_ID > *ZERO;

// Call program Val ShpDt Allc By LD  XF.
CALL PROGRAM(Val ShpDt Allc By LD  XF) ('PNS0XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(JOB.*PROGRAM);
PARAMETER(LCL.Error_Status_3);

CASE;

// IF WRK.Error Status  3 is Yes
IF WRK.Error_Status_3 = 'Y';

// Send error message - 'Age Days/OvrDate Invalid'
ERROR(USR4355);

ENDIF;

ENDIF;

CASE;

// IF LCL.Change Flag USR is No
IF LCL.Change_Flag_USR = 'N';

//?If no changes to subfile records, check for ctl SSD change  E001895
// PAR.Requested Delivery Date = CND.not entered
PAR.Requested_Delivery_Date = *ZERO;

// Call program Val chgd SSD for Ld   XF.
CALL PROGRAM(Val chgd SSD for Ld   XF) ('PBCFXFR');
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Error_Status_2);
PARAMETER(LCL.Company_Organization);

CASE;

// IF LCL.Error Status  2 is Yes
IF LCL.Error_Status_2 = 'Y';

// Send error message - 'Delivery Date is before Scheduled Ship Date'
ERROR(USR2063);
MSGPARM(PAR.Requested_Delivery_Date);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Scheduled ShpDate SavUsr = CTL.Scheduled Ship Date USR
WRK.Scheduled_ShpDate_SavUsr = CTL.Scheduled_Ship_Date_USR;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?SEL: Warehouse Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Warehouse Code
IF PGM.*Cursor_field = RCD.Warehouse_Code;

EXECUTE FUNCTION(Sel Warehouse         IF) TYPE(EXCINTFUN)                      AC1962374;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER('O/P');
{
 //?Execute internal function

 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 // Call program Sel User Appl Whs     SR.
 CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program SEL Warehouse          SR.
 CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
 PARAMETER(PAR.Warehouse_Code);

 ENDIF;

}


ENDIF;

ENDIF;

//?validate warehouse
CASE;

// IF RCD.Warehouse Code is Warehouse Code not Blank
IF RCD.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(RCD.Warehouse_Code);
PARAMETER('O/P');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Process subfile record (Pre-confirm)

// LCL.Error Flag            USR = CND.No
LCL.Error_Flag_USR = 'N';

//?** Retrieve Organization                              E001895
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

//?check subfile records's scheduled ship date usr
//?** FP1251 LJB 01/22/2008 (Ship date CANNOT be after delivery date)
//?** E001895 CTL Ship date CANNOT be after RCD Delivery date
//?  testScheduledDeliveryShipDate
//?VAL:  Scheduled Delivery Date
CASE;

// IF RCD.Sched Delivery Date USR EQ WRK.ZERO
IF RCD.Sched_Delivery_Date_USR = WRK.ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(RCD.Sched_Delivery_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?VAL:  Scheduled Delivery Date
// IF RCD.Sched Delivery Date USR LT RCD.Requested Ship Date USR
IF RCD.Sched_Delivery_Date_USR < RCD.Requested_Ship_Date_USR;

//?** Prevent rcd.Delivery Date prior to req ship date    FP1251 1/4/2008
// Send error message - 'Delivery Date is before Scheduled Ship Date'
ERROR(USR2063);
MSGPARM(RCD.Sched_Delivery_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?VAL:  Scheduled Delivery Date
// IF CTL.Scheduled Ship Date USR GT RCD.Sched Delivery Date USR
IF CTL.Scheduled_Ship_Date_USR > RCD.Sched_Delivery_Date_USR;

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

//?** Prevent ctl Sched Ship Dt after rcd Req Ship Date   E001895
// Send information message - 'Scheduled Ship Date is after Requested Delivery Date.'
MESSAGE(USR4489 *INFO);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?VAL:  Scheduled Delivery Date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Sched_Delivery_Date_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Calendar Master not found.'
ERROR(USR0018);
MSGPARM(RCD.Sched_Delivery_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?check subfile records's scheduled ship date usr
EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Requested_Ship_Date_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Val: Requested Ship Date - error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Calendar Master not found.'
ERROR(USR0018);
MSGPARM(RCD.Requested_Ship_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

//?E3796 JJH 02/24/15 - SNDERRMSG if Requested Ship Date GT Scheduled
//? Ship Date.
//?Val: Requested Ship Date GT Scheduled Ship Date
CASE;

// IF RCD.Requested Ship Date USR LT JOB.*Job date
IF RCD.Requested_Ship_Date_USR < JOB.*Job_date;

// Send error message - 'Requested Ship Date cannot be earlier than today'
ERROR(USR4797);
MSGPARM(RCD.Requested_Ship_Date_USR);

//?Val: Requested Ship Date GT Scheduled Ship Date
// IF RCD.Requested Ship Date USR GT CTL.Scheduled Ship Date USR
IF RCD.Requested_Ship_Date_USR > CTL.Scheduled_Ship_Date_USR;

// Send error message - 'Requested Ship Date cannot be greater than Scheduled Ship Date.'
ERROR(USR4780);
MSGPARM(RCD.Requested_Ship_Date_USR);

ENDIF;

//?VAL:  Delivery Time
CASE;

// IF RCD.Sched Delivery Time USR EQ WRK.ZERO
IF RCD.Sched_Delivery_Time_USR = WRK.ZERO;

// Send error message - 'Time is required.'
ERROR(USR2333);
MSGPARM(RCD.Sched_Delivery_Time_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

//?VAL:  Delivery Time
// IF *OTHERWISE
IF *OTHERWISE;

//?T12340 DN 01/18/18-Delivery Time cannot exceed 2400 or 59 for minutes.
CASE;

// IF RCD.Sched Delivery Time USR is GT 24 Hour Day
IF RCD.Sched_Delivery_Time_USR > 2400;

// Send error message - 'Time Field GT 24 Hours.  Correct time and re-enter.'
ERROR(USR1712);
MSGPARM(RCD.Sched_Delivery_Time_USR);

//?T12340 DN 01/18/18-Delivery Time cannot exceed 2400 or 59 for minutes.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Remainder= RCD.Sched Delivery Time USR\CON.100
LCL.USR_Remainder = MODULO(RCD.Sched_Delivery_Time_USR 100 1);

CASE;

// IF LCL.USR Remainder is GT 59 Minutes
IF LCL.USR_Remainder > 59;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(RCD.Sched_Delivery_Time_USR);

ENDIF;

ENDIF;

ENDIF;

//?Calculating and comparing against Must Ship Date
CASE;

// IF RCD.Shipping Method is Buyers Truck
IF RCD.Shipping_Method = 'CR'/'CT';

//?         C4086:  Don't check must ship for buyers truck
// RCD.Must Ship Error = CND.No Error
RCD.Must_Ship_Error = *BLANK;

//?Calculating and comparing against Must Ship Date
// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

//?E000647: No Miles is not an error for Exports
// RCD.Must Ship Error = CND.No Error
RCD.Must_Ship_Error = *BLANK;

//?Calculating and comparing against Must Ship Date
// IF RCD.Sched Delivery Date USR NE RCD.Requested Delivery Date
IF RCD.Sched_Delivery_Date_USR <> RCD.Requested_Delivery_Date;

// OR RCD.Sched Delivery Time USR NE RCD.Requested Delivery Time
OR RCD.Sched_Delivery_Time_USR <> RCD.Requested_Delivery_Time;

// OR RCD.Warehouse Code NE RCD.USR Warehouse Code
OR RCD.Warehouse_Code <> RCD.USR_Warehouse_Code;

//?process scheduled ship date changes separately, after confirm, so
//?it can use updated information
// Call program CLC Must Ship Date     XF.
CALL PROGRAM(CLC Must Ship Date     XF) ('PDJBXFR');
PARAMETER(RCD.Must_Ship_Error);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Ship_Date_USR);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(RCD.Sched_Delivery_Date_USR);
PARAMETER(RCD.Sched_Delivery_Time_USR);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Must_Ship_Date_USR);
PARAMETER(WRK.Must_Ship_Time_USR);

//?** Process dates out of order error
CASE;

// IF RCD.Must Ship Error is No Error
IF RCD.Must_Ship_Error = *BLANK;

//?** Process dates out of order error
// IF RCD.Must Ship Error is Miles to Next=Zeros
IF RCD.Must_Ship_Error = 'MTN';

//?** Don't prompt if no Miles Between Cities record
//?** Process dates out of order error
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.STATUS = CND.Yes
WRK.STATUS = 'Y';

EXECUTE FUNCTION(PMT Must Ship Dt Accpt IF) TYPE(EXCINTFUN)                     AC1510968;
PARAMETER(RCD.Sched_Delivery_Date_USR);
PARAMETER(RCD.Sched_Delivery_Time_USR);
PARAMETER(WRK.Must_Ship_Date_USR);
PARAMETER(WRK.Must_Ship_Time_USR);
PARAMETER(RCD.Requested_Ship_Date_USR);
PARAMETER(WRK.STATUS);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(RCD.Must_Ship_Error);
PARAMETER(RCD.Order_Number);
{
 //?Execute internal function

 // Call program PMT Must Ship Dt Accpt PV.
 CALL PROGRAM(PMT Must Ship Dt Accpt PV) ('PDJFPVR');
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Must_Ship_Date_USR);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Must_Ship_Time_USR);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(PAR.Must_Ship_Error);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PAR.STATUS is No
 IF PAR.STATUS = 'N';

 // Send error message - 'Order must be shipped by &1 to be delivered on time.'
 ERROR(USR2662);
 MSGPARM(PAR.Must_Ship_Date_USR);

 ENDIF;

}


CASE;

// IF WRK.STATUS is No
IF WRK.STATUS = 'N';

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Deadline Depart Date/Time, Shipping Restrictions-Seaboard only  W288
DO;

//?** Retrieve 1st stop order number                       W288
EXECUTE FUNCTION(RTV 1st Stop Info      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1967996;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(1);
PARAMETER(NLL.Comments_for_Pickup);
PARAMETER(NLL.Miles_to_next_stop);
PARAMETER(NLL.Freight_Charge);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Freight_Misc_Charge);
PARAMETER(NLL.Freight_Stop_Charge);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(NLL.Ship_Status);
PARAMETER(NLL.Estimated_Arrival_Date);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Appointment_Confirm_Date);
PARAMETER(NLL.Appointment_Confirm_Time);
PARAMETER(NLL.Confirmation_Made_With);
PARAMETER(NLL.Confirmation_Number);
PARAMETER(NLL.Actual_Delivery_Date);
PARAMETER(NLL.Actual_Delivery_time);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.Deadline_Depart_DT_HDR);
PARAMETER(NLL.Deadline_Depart_Time_HDR);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.MPC_Number);
PARAMETER(NLL.Load_Dtl_On_Time_Flag);
PARAMETER(NLL.On_Time_Addl_Rsn_Unused);
PARAMETER(NLL.Seal_Nbr_1);
PARAMETER(NLL.Seal_Nbr_2);
PARAMETER(NLL.Seal_Nbr_3);
PARAMETER(NLL.Seal_Nbr_4);
PARAMETER(NLL.Seal_Nbr_5);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(NLL.LD_Unused_Date_2);
PARAMETER(NLL.LD_Unused_Date_3);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(NLL.LD_Unused_Time_2);
PARAMETER(NLL.LD_Unused_Time_3);
PARAMETER(NLL.Miles_Error_Sts);
PARAMETER(NLL.LD_Unused_Sts_2);
PARAMETER(NLL.HPB_Transload_Station);
PARAMETER(NLL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(NLL.Carrier_Ref_PRO_Inv);
PARAMETER(NLL.Cust_Assigned_Appt_#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Only calc DDD/T for 1st stop order                    W288
CASE;

// IF RCD.Order Number EQ LCL.Order Number
IF RCD.Order_Number = LCL.Order_Number;

// LCL.Deadline Depart DT    HDR = RCD.Sched Delivery Date USR
LCL.Deadline_Depart_DT_HDR = RCD.Sched_Delivery_Date_USR;

//?** Calc DDD/T from Scheduled Delivery Date/Time       W288
//?IF NOT MG LOAD-->  ADDED 1.18.2017 RMC
CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

EXECUTE FUNCTION(CLC Deadline Date/Time IF) TYPE(EXCINTFUN)                     AC1496951;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Sched_Delivery_Time_USR);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);
{
 //?Execute internal function

 //?** Convert time from 4.0 to 6.0
 // PAR.Deadline Depart Time  HDR = PAR.Requested Delivery Time * CON.100 *Rounded
 PAR.Deadline_Depart_Time_HDR = PAR.Requested_Delivery_Time * 100 'H';

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 //?** Convert time back to 6.0
 // PAR.Deadline Departure Time = PAR.Deadline Depart Time  HDR
 PAR.Deadline_Departure_Time = PAR.Deadline_Depart_Time_HDR;

 //?***** Change Log and Comments
 DO;

 //?** 08/12/2008 LJB E00207
 //?** Total Load Miles can be overriden. This will not change the
 //?** Deadline Depart date, however.
 //?*****
 //?** 11/16/2007 LJB FP1251
 //?** Date and time are set to zeros if there is no
 //?** Miles Between Cites record which means there were no
 //?** total load miles calculated.
 ENDDO;

}


//?** If Export & no state code, dflt DDD = SSD & DDT = 8:00am   W288
CASE;

// IF LCL.Deadline Depart DT    HDR is not entered
IF LCL.Deadline_Depart_DT_HDR = *ZERO;

CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

// AND RCD.Ship To State Code is International Accounts
AND RCD.Ship_To_State_Code = '.';

// LCL.Deadline Depart DT    HDR = CTL.Scheduled Ship Date USR
LCL.Deadline_Depart_DT_HDR = CTL.Scheduled_Ship_Date_USR;

// LCL.Deadline Depart Time  HDR = CON.80000
LCL.Deadline_Depart_Time_HDR = 80000;

// RCD.Must Ship Error = CND.No Error
RCD.Must_Ship_Error = *BLANK;

ENDIF;

ENDIF;

ENDIF;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

//?Seaboard only
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?** Only test dates if Access Limited is Yes     W288
CASE;

// IF PAR.Access Limited Sts USR is yes
IF PAR.Access_Limited_Sts_USR = 'Y';

CASE;

// IF PAR.MG Created Load is Yes
IF PAR.MG_Created_Load = 'Y';

//?S7362 JJH 10/20/16 - Do not send error if MG created Load
// IF *OTHERWISE
IF *OTHERWISE;

//?** Prevent Scheduled Ship Date after Deadline Depart   W288
CASE;

// IF CTL.Scheduled Ship Date USR GT LCL.Deadline Depart DT    HDR
IF CTL.Scheduled_Ship_Date_USR > LCL.Deadline_Depart_DT_HDR;

// Send error message - 'Invalid date change - Deadline Depart is before Scheduled Ship Date'
ERROR(USR4222);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?** Retrieve Shipping restricted hours (maintained by scheduling) W288
//?** (this is maintained by scheduling)                 W288
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** DDT cannot be during Shipping Restricted Hours  W288
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** DDT cannot be during Shipping Restricted Hours  W288
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** DDT cannot be during Shipping Restricted Hours  W288
// IF *OTHERWISE
IF *OTHERWISE;

//?** If SSD = DDD then enforce Restricted Time Range    W288
CASE;

// IF LCL.Deadline Depart DT    HDR EQ CTL.Scheduled Ship Date USR
IF LCL.Deadline_Depart_DT_HDR = CTL.Scheduled_Ship_Date_USR;

CASE;

// IF PAR.MG Created Load is Yes
IF PAR.MG_Created_Load = 'Y';

//?S7362 JJH 10/20/16 - Do not send error if MG created load.
// IF *OTHERWISE
IF *OTHERWISE;

//?** Error if DDT falls within Shipping Restricted hours   W288
CASE;

// IF LCL.Deadline Depart Time  HDR GE WRK.Dock Unavail Start Time
IF LCL.Deadline_Depart_Time_HDR >= WRK.Dock_Unavail_Start_Time;

// AND LCL.Deadline Depart Time  HDR LE WRK.Dock Unavail End Time
AND LCL.Deadline_Depart_Time_HDR <= WRK.Dock_Unavail_End_Time;

// Send error message - 'Invalid SSD & DDD/T - during Restricted Hours-chg Dlvry Time, see Schedulin
ERROR(USR4223);
MSGPARM(RCD.Sched_Delivery_Time_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?** DDD/T cannot be in the past. Truck will not have time to load
//?** and leave.                                         W288
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?** Error if DDD = Today & DDT is before system time   W288
CASE;

// IF LCL.Deadline Depart DT    HDR EQ WRK.Current System Date
IF LCL.Deadline_Depart_DT_HDR = WRK.Current_System_Date;

// AND LCL.Deadline Depart Time  HDR LE WRK.Current System Time
AND LCL.Deadline_Depart_Time_HDR <= WRK.Current_System_Time;

// Send error message - 'DDD/Time must be later than NOW, Chg Ship Date or Deliv Time'
ERROR(USR4233);
MSGPARM(RCD.Requested_Ship_Date_USR);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?IF NOT MG LOAD-->  ADDED 1.18.2017 RMC
CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

//?** DDD/T to MM/DD, HH/MM conversion                    W288
DO;

//?convert date to mm/dd
// WRK.Month NBR USR = LCL.Deadline Depart DT    HDR *MONTH
WRK.Month_NBR_USR = DATEDTLS(LCL.Deadline_Depart_DT_HDR 'MO' 1111111 'NONE' 'N' 1);

// WRK.Month USR = CVTVAR(WRK.Month NBR USR)
WRK.Month_USR = CVTVAR(WRK.Month_NBR_USR);

// WRK.Day NBR USR = LCL.Deadline Depart DT    HDR *DAY OF MONTH
WRK.Day_NBR_USR = DATEDTLS(LCL.Deadline_Depart_DT_HDR 'DM' 1111111 'NONE' 'N' 1);

// WRK.Day USR = CVTVAR(WRK.Day NBR USR)
WRK.Day_USR = CVTVAR(WRK.Day_NBR_USR);

// WRK.Month/Day Alpha MMDD = CONCAT(WRK.Month USR,WRK.Day USR,CON.*ZERO)
WRK.Month_Day_Alpha_MMDD = WRK.Month_USR + WRK.Day_USR (*ZERO);

// RCD.Deadline Departure MM/DD = CVTVAR(WRK.Month/Day Alpha MMDD)
RCD.Deadline_Departure_MM_DD = CVTVAR(WRK.Month_Day_Alpha_MMDD);

//?convert time to hh/mm
// WRK.Hour 1 USR = LCL.Deadline Depart Time  HDR *HOURS
WRK.Hour_1_USR = TIMEDTLS(LCL.Deadline_Depart_Time_HDR 'HR');

// WRK.Hours  2A            USR = CVTVAR(WRK.Hour 1 USR)
WRK.Hours_2A_USR = CVTVAR(WRK.Hour_1_USR);

// WRK.@Minutes = LCL.Deadline Depart Time  HDR *MINUTES
WRK.@Minutes = TIMEDTLS(LCL.Deadline_Depart_Time_HDR 'MN');

// WRK.Minutes  2A          USR = CVTVAR(WRK.@Minutes)
WRK.Minutes_2A_USR = CVTVAR(WRK.@Minutes);

// WRK.Time  4A             USR = CONCAT(WRK.Hours  2A            USR,WRK.Minutes  2A          USR,C
WRK.Time_4A_USR = WRK.Hours_2A_USR + WRK.Minutes_2A_USR (*ZERO);

// RCD.Deadline Depart Time 4,0 = CVTVAR(WRK.Time  4A             USR)
RCD.Deadline_Depart_Time_40 = CVTVAR(WRK.Time_4A_USR);

ENDDO;

ENDIF;

ENDIF;

ENDDO;

//?Perform validation on age days
DO;

//?testreviewvaldtl
//?FP1309 perform validation on every detail line and if error
//?report this back to the order header (detail screen)
//?** Use ctl SSD and rcd RDD from the screen in case they have changed 1895
// LCL.Error Status  3 = CND.No
LCL.Error_Status_3 = 'N';

EXECUTE FUNCTION(Val Chgd ShpDt/ItmAge  Rt) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2037981;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(RCD.Sched_Delivery_Date_USR);
PARAMETER(LCL.Error_Status_3);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Process Data record

 //?Validate Item Age Date based on changed SSD and RDD   E001895
 EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(PAR.Error_Status_3);
 PARAMETER(PAR.Company_Organization);
 PARAMETER('V');
 {
  //?Execute internal function

  // WRK.Error Flag            USR = CND.Blank
  WRK.Error_Flag_USR = *BLANK;

  // PAR.Error Status = CND.blank
  PAR.Error_Status = *BLANK;

  // WRK.Error Reason Descript 1 = CON.*BLANK
  WRK.Error_Reason_Descript_1 = *BLANK;

  // WRK.Error Reason Descript 2 = CON.*BLANK
  WRK.Error_Reason_Descript_2 = *BLANK;

  // WRK.Error Reason Descript 3 = CON.*BLANK
  WRK.Error_Reason_Descript_3 = *BLANK;

  // WRK.Error Reason Descript 4 = CON.*BLANK
  WRK.Error_Reason_Descript_4 = *BLANK;

  // WRK.Error Reason Descript 5 = CON.*BLANK
  WRK.Error_Reason_Descript_5 = *BLANK;

  CASE;

  // IF PAR.Company Organization is Seaboard
  IF PAR.Company_Organization = 'S';

  CASE;

  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // Send error message - 'Requested Delv Date is required'
  ERROR(USR4329);
  MSGPARM(PAR.Requested_Delivery_Date);

  // IF PAR.Scheduled Ship Date is not entered
  IF PAR.Scheduled_Ship_Date = *ZERO;

  // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
  ERROR(USR2230);
  MSGPARM(PAR.Scheduled_Ship_Date);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Val Age information   XF.
  CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Error_Flag_USR);
  PARAMETER(WRK.Error_Reason_Descript_1);
  PARAMETER(WRK.Error_Reason_Descript_2);
  PARAMETER(WRK.Error_Reason_Descript_3);
  PARAMETER(WRK.Error_Reason_Descript_4);
  PARAMETER(WRK.Error_Reason_Descript_5);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);

  //?Verify if message should be sent if validation is required
  CASE;

  // IF WRK.Error Flag            USR is Yes
  IF WRK.Error_Flag_USR = 'Y';

  // AND PAR.Production Dates Sts Usr is Validation routine
  AND PAR.Production_Dates_Sts_Usr = 'V';

  //?message 1 Product is shipped before product is made
  CASE;

  // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

  // Send error message - 'Prd Date is invalid for requested delivery date'
  ERROR(USR4307);
  MSGPARM(PAR.Production_AgeDte_Fr);

  ENDIF;

  //?message 2 Either Days or override date but not both
  CASE;

  // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

  // Send error message - 'Enter Age Days or Dates'
  ERROR(USR4304);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 3 With Chill Days Either Days or Override Dates required
  CASE;

  // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 4 From date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 5 To date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  CASE;

  // IF PAR.Production Ovr AgeDte Fr is not entered
  IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

  // Send error message - 'Invalid Item Age Days'
  ERROR(USR4309);
  MSGPARM(PAR.Item_Age_Days);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send error message - 'Invalid Production Override Age Frm/To Dates'
  ERROR(USR4310);
  MSGPARM(PAR.Production_AgeDte_Fr);
  MSGPARM(PAR.Production_AgeDte_To);

  ENDIF;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PAR.Error Status  3 is Yes
 IF PAR.Error_Status_3 = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Error Status  3 is Yes
IF LCL.Error_Status_3 = 'Y';

// Send error message - 'Age Days/OvrDate Invalid'
ERROR(USR4355);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDDO;

//?Validate Warehouse Code
CASE;

// IF RCD.Warehouse Code is Warehouse Code not Blank
IF RCD.Warehouse_Code <> *BLANK;

//?FP1054 2/19/09 RMC cant chg shipping company
EXECUTE FUNCTION(Val WHS/Rtv ShpCo     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1922615;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF LCL.Shipping Company NE RCD.Company Number
IF LCL.Shipping_Company <> RCD.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(RCD.Company_Number);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(RCD.Warehouse_Code);

// LCL.Error Flag            USR = CND.Yes
LCL.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?If warehouse code changed, check for item balance record and/or unit cost
CASE;

// IF RCD.Warehouse Code NE RCD.USR Warehouse Code
IF RCD.Warehouse_Code <> RCD.USR_Warehouse_Code;

EXECUTE FUNCTION(VAL Item Bal/Unit Cost IF) TYPE(EXCINTFUN)                     AC1482205;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Error_Status);
PARAMETER(PAR.Unit_Cost_Per_Pound);
{
 //?Execute internal function

 EXECUTE FUNCTION(VAL Item Bal/Unit Cost RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1482206;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Error_Status);
 {
  //?USER: Initialize routine

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // PAR.Unit Cost Per Pound = CON.1
  PAR.Unit_Cost_Per_Pound = 1;

  //?USER: Process Data record

  CASE;

  // IF PAR.Unit Cost Per Pound is Not equal to zero
  IF PAR.Unit_Cost_Per_Pound <> *ZERO;

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program VAL Itm Bal. Exists    XF.
  CALL PROGRAM(VAL Itm Bal. Exists    XF) ('PDCUXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Error_Status);

  CASE;

  // IF PAR.Error Status is yes
  IF PAR.Error_Status = 'Y';

  // Call program CLC Rtv Unit Cost/LB   XF.
  CALL PROGRAM(CLC Rtv Unit Cost/LB   XF) ('PDLSXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Unit_Cost_Per_Pound);
  PARAMETER(WRK.Cost_per_Primary_UOM);
  PARAMETER(PAR.Pricing_Date_Used);
  PARAMETER(WRK.Price_Status);
  PARAMETER(JOB.*Job_date);

  ENDIF;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PAR.Error Status is yes
 IF PAR.Error_Status = 'Y';

 // OR PAR.Unit Cost Per Pound is equal to zero
 OR PAR.Unit_Cost_Per_Pound = *ZERO;

 // Send error message - 'Item Balance not found & unit cost not calculated for some items in new wa
 ERROR(USR2556);
 MSGPARM(PAR.Warehouse_Code);

 ENDIF;

}


ENDIF;

//?If deliv date/time or req ship date change, flag for update W288
CASE;

// IF RCD.Scheduled Delivery Dt NE RCD.Sched Delivery Date USR
IF RCD.Scheduled_Delivery_Dt <> RCD.Sched_Delivery_Date_USR;

// OR RCD.Time NE RCD.Sched Delivery Time USR
OR RCD.Time <> RCD.Sched_Delivery_Time_USR;

// OR RCD.Ship Date USR NE RCD.Requested Ship Date USR
OR RCD.Ship_Date_USR <> RCD.Requested_Ship_Date_USR;

// LCL.Status Flag 1  Y/N = CND.Yes
LCL.Status_Flag_1_Y_N = 'Y';

ENDIF;

//?8/18/2010 slm Add error message for MTN.
//?confirm if no errors
CASE;

// IF RCD.Must Ship Error is No Error
IF RCD.Must_Ship_Error = *BLANK;

// OR RCD.Warehouse Code NE RCD.USR Warehouse Code
OR RCD.Warehouse_Code <> RCD.USR_Warehouse_Code;

// OR LCL.Error Flag            USR is No
OR LCL.Error_Flag_USR = 'N';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?confirm if no errors
// IF RCD.Must Ship Error is Error List
IF RCD.Must_Ship_Error = 'DDD'/'MTN'/'NOW'/'MSD'/'RSD'/'SSD';

// OR LCL.Error Flag            USR is Yes
OR LCL.Error_Flag_USR = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Set flag if one or more sfl recs are changed       E001895
// LCL.Change Flag USR = CND.Yes
LCL.Change_Flag_USR = 'Y';

//?USER: Process subfile control (Post-confirm)

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?** Update order header & Load Header with the chgd SSD
//?Re-allocate if Scheduled Ship Date Changed ; create log
CASE;

// IF PAR.Scheduled Ship Date NE CTL.Scheduled Ship Date USR
IF PAR.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date_USR;

//?Log Sched ship date change (6/09/09 - wasnt doing this prior to now.)
// WRK.@Blank for 7 = CVTVAR(PAR.Scheduled Ship Date)
WRK.@Blank_for_7 = CVTVAR(PAR.Scheduled_Ship_Date);

// WRK.@Text 7 = CVTVAR(CTL.Scheduled Ship Date USR)
WRK.AAText_7 = CVTVAR(CTL.Scheduled_Ship_Date_USR);

// Call program CRT Load/Order for DD/TXF.
CALL PROGRAM(CRT Load/Order for DD/TXF) ('PDKTXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('SCHSHP');
PARAMETER('TRF');
PARAMETER(WRK.@Blank_for_7);
PARAMETER(WRK.AAText_7);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(CTL.Carrier_Code);
PARAMETER(LCL.USR_Company_Number);
PARAMETER(CTL.Order_Number);

//?** This also updates the Load Header with the chgd SSD
// Call program Upd ShpDt Allc By LD  XF.
CALL PROGRAM(Upd ShpDt Allc By LD  XF) ('PNSVXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(JOB.*PROGRAM);

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?E5534 JJH 04/11/16 - Perform Allocation if Req Delivery Date change
//?Update Scheduled Delivery Dates from requested delivery date
CASE;

// IF RCD.Sched Delivery Date USR NE RCD.Requested Delivery Date
IF RCD.Sched_Delivery_Date_USR <> RCD.Requested_Delivery_Date;

// OR RCD.Sched Delivery Time USR NE RCD.Requested Delivery Time
OR RCD.Sched_Delivery_Time_USR <> RCD.Requested_Delivery_Time;

//?sched delivery date usr is requested delivery date
//?scheduled ship date usr (ctl) is the scheduled ship date
//?the following upd is new for this routine --- FP1309
//?This will be reallocating at the order level
EXECUTE FUNCTION(CHG Delv Date/Time     CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1412023;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Sched_Delivery_Date_USR);
PARAMETER(RCD.Sched_Delivery_Time_USR);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?E5534 JJH 04/11/16 - Perform Allocation if Req Delivery Date change
CASE;

// IF RCD.Sched Delivery Date USR NE RCD.Requested Delivery Date
IF RCD.Sched_Delivery_Date_USR <> RCD.Requested_Delivery_Date;

EXECUTE FUNCTION(Upd ReqDt Alloc ByOrd RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2102410;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 //?E3796 JJH 02/24/15 - This function was copied from the "Upd ShpDt
 //?  Alloc ByLoad RT - Order Header TRG.
 //?- The purpose of this function is to perform allocation and
 //?  Dealocation when the Requested Ship Date Changes for an Order.
 //?- All unused functionality has been removed from this function.
 //?USER: Process Data record

 EXECUTE FUNCTION(Upd ReqDt/Alc by Ord  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2102411;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Initialize routine

  //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
  //?E3796 JJH 02/24/15 - This function was copied from the "Upd ReqDt
  //?  /Alc by Ord  RT - Order Detail.
  //?- The purpose of this function is to perform allocation and
  //?  Dealocation when the Requested Ship Date Changes for an Order.
  //?USER: Process Data record

  CASE;

  // IF DB1.OD Production Plan Sts is Yes
  IF DB1.OD_Production_Plan_Sts = *BLANK;

  // PAR.Quantity Scheduled = DB1.Quantity Scheduled
  PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // PAR.Weight Scheduled = DB1.Weight Scheduled
  PAR.Weight_Scheduled = DB1.Weight_Scheduled;

  //?E3796 JJH 02/24/15 - Changed Parameter Input Field
  //? Changed: I  Ship Date USR       FLD   DB1 Scheduled Ship Date
  //? To:      I  Ship Date USR       FLD   DB1 Requested Ship Date
  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER('CHGSHPDTE');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?FP1054 chg to use ordered instead of scheduled
  //?(uses scheduled, not ordered)
  // PAR.Quantity Scheduled = CON.*ZERO
  PAR.Quantity_Scheduled = *ZERO;

  // PAR.Weight Scheduled = CON.*ZERO
  PAR.Weight_Scheduled = *ZERO;

  //?E3796 JJH 02/24/15 - Changed Parameter Input Field
  //? Changed: I  Ship Date USR       FLD   PAR Scheduled Ship Date
  //? To:      I  Ship Date USR       FLD   PAR Requested Ship Date
  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER('CHGSHPDTE');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?10/06/16  RMC Re-instate this - want it to resched whatever it had before
  //?Schedule As Ordered.   FP1054- dont sched as ordered
  CASE;

  // IF PAR.Quantity Scheduled NE DB1.Quantity Scheduled
  IF PAR.Quantity_Scheduled <> DB1.Quantity_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('AO');
  PARAMETER('CHGSHPDTE');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  ENDIF;

  //?FP1054 Chg sched ship date and Sched Qty and Weight
  //?E3796 JJH 02/24/15 - Use new function: Chg Reque Ship Dt/qty CH
  EXECUTE FUNCTION(Chg Reque Ship Dt/qty CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2102414;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(PAR.Requested_Ship_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?FP1054 Chg sched ship date only if prod plan is  NO  6/17/09
  //?E3796 JJH 02/24/15 - Use new function: Chg Reque Ship Dt/qty CH
  EXECUTE FUNCTION(Chg Reque Ship Dt/qty CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2102414;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(PAR.Requested_Ship_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(CHG Requested Ship Dt  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1512676;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Ship_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // Call program EDT Post Open Orders   XF.
 CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER('PS');

}


ENDIF;

// WRK.Load Change Type = CND.Requested Delivery Date
WRK.Load_Change_Type = 'RQSDLV';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Text USR 7 = CVTVAR(RCD.Requested Delivery Date)
WRK.Text_USR_7 = CVTVAR(RCD.Requested_Delivery_Date);

// LCL.Calc 4 = RCD.Requested Delivery Time
LCL.Calc_4 = RCD.Requested_Delivery_Time;

// WRK.Text USR 4 = CVTVAR(LCL.Calc 4)
WRK.Text_USR_4 = CVTVAR(LCL.Calc_4);

// WRK.Change Log Prior Value = CONCAT(WRK.Text USR 7,WRK.Text USR 4,CON.1)
WRK.Change_Log_Prior_Value = WRK.Text_USR_7 + WRK.Text_USR_4 (1);

// WRK.Text USR 7 = CVTVAR(RCD.Sched Delivery Date USR)
WRK.Text_USR_7 = CVTVAR(RCD.Sched_Delivery_Date_USR);

// LCL.Calc 4 = RCD.Sched Delivery Time USR
LCL.Calc_4 = RCD.Sched_Delivery_Time_USR;

// WRK.Text USR 4 = CVTVAR(LCL.Calc 4)
WRK.Text_USR_4 = CVTVAR(LCL.Calc_4);

// WRK.Change Log New Value = CONCAT(WRK.Text USR 7,WRK.Text USR 4,CON.1)
WRK.Change_Log_New_Value = WRK.Text_USR_7 + WRK.Text_USR_4 (1);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

EXECUTE FUNCTION(RTV ld Accpt/Load Status) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1591499;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?chg load acceptance flag
CASE;

// IF LCL.Load Acceptance Flag is Load Accepted
IF LCL.Load_Acceptance_Flag = 'A';

// AND PAR.MG Created Load is Not MG Created Load
AND PAR.MG_Created_Load = *BLANK;

EXECUTE FUNCTION(CHG Load Acceptance Sw CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1475345;
PARAMETER(RCD.Load_ID);
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?------------  E2210 RMC
//?8/2/12 change ld carrier appt to req delivery if it was there already
EXECUTE FUNCTION(RTV Chg LD APPT w/req RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2048848;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Sched_Delivery_Date_USR);
PARAMETER(RCD.Sched_Delivery_Time_USR);
PARAMETER(RCD.Sales_Route_Code);
{
 //?USER: Process Data record

 //?Upd Ld Carr Appt if entered
 CASE;

 // IF DB1.LD Carrier Appt Date is Entered
 IF DB1.LD_Carrier_Appt_Date > 0;

 // LCL.LD Carrier Appt Date = PAR.Requested Delivery Date
 LCL.LD_Carrier_Appt_Date = PAR.Requested_Delivery_Date;

 // LCL.LD Carrier Appt Time = PAR.Requested Delivery Time * CON.100 *
 LCL.LD_Carrier_Appt_Time = PAR.Requested_Delivery_Time * 100;

 EXECUTE FUNCTION(Chg LD APPT/CNFRM    CH) TYPE(CHGOBJ) FILE(OMFLCPP)            AC2030693;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(DB1.Confirmation_Made_With);
 PARAMETER(DB1.Confirmation_Number);
 PARAMETER(LCL.LD_Carrier_Appt_Date);
 PARAMETER(DB1.LD_Unused_Date_2);
 PARAMETER(LCL.LD_Carrier_Appt_Time);
 PARAMETER(DB1.LD_Unused_Time_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // Call program Exc Email Ord RqDtChg XF.
 CALL PROGRAM(Exc Email Ord RqDtChg XF) ('PBEPXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Sales_Route_Code);

 ENDIF;

}


//?------------
//?** Update the rcd. context control fields for delivery date/time W288
// RCD.Requested Delivery Date = RCD.Sched Delivery Date USR
RCD.Requested_Delivery_Date = RCD.Sched_Delivery_Date_USR;

// RCD.Requested Delivery Time = RCD.Sched Delivery Time USR
RCD.Requested_Delivery_Time = RCD.Sched_Delivery_Time_USR;

// RCD.Scheduled Delivery Dt = RCD.Sched Delivery Date USR
RCD.Scheduled_Delivery_Dt = RCD.Sched_Delivery_Date_USR;

// LCL.Requested Delivery DateUs = RCD.Requested Delivery Date
LCL.Requested_Delivery_DateUs = RCD.Requested_Delivery_Date;

// RCD.Scheduled Delivery Dt = RCD.Requested Delivery Date
RCD.Scheduled_Delivery_Dt = RCD.Requested_Delivery_Date;

ENDIF;

//?Log Requested ship date change
CASE;

// IF RCD.Requested Ship Date USR NE RCD.Requested Ship Date
IF RCD.Requested_Ship_Date_USR <> RCD.Requested_Ship_Date;

//?E3796 JJH 02/24/15 - Moved logic into Upd ReqDt Alloc ByOrd RTs
//?E3796 JJH 02/24/15 - Reallocate if Requested Ship Date Changes
EXECUTE FUNCTION(Upd ReqDt Alloc ByOrd RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2102410;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Requested_Ship_Date_USR);
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 //?E3796 JJH 02/24/15 - This function was copied from the "Upd ShpDt
 //?  Alloc ByLoad RT - Order Header TRG.
 //?- The purpose of this function is to perform allocation and
 //?  Dealocation when the Requested Ship Date Changes for an Order.
 //?- All unused functionality has been removed from this function.
 //?USER: Process Data record

 EXECUTE FUNCTION(Upd ReqDt/Alc by Ord  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2102411;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Initialize routine

  //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
  //?E3796 JJH 02/24/15 - This function was copied from the "Upd ReqDt
  //?  /Alc by Ord  RT - Order Detail.
  //?- The purpose of this function is to perform allocation and
  //?  Dealocation when the Requested Ship Date Changes for an Order.
  //?USER: Process Data record

  CASE;

  // IF DB1.OD Production Plan Sts is Yes
  IF DB1.OD_Production_Plan_Sts = *BLANK;

  // PAR.Quantity Scheduled = DB1.Quantity Scheduled
  PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // PAR.Weight Scheduled = DB1.Weight Scheduled
  PAR.Weight_Scheduled = DB1.Weight_Scheduled;

  //?E3796 JJH 02/24/15 - Changed Parameter Input Field
  //? Changed: I  Ship Date USR       FLD   DB1 Scheduled Ship Date
  //? To:      I  Ship Date USR       FLD   DB1 Requested Ship Date
  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER('CHGSHPDTE');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?FP1054 chg to use ordered instead of scheduled
  //?(uses scheduled, not ordered)
  // PAR.Quantity Scheduled = CON.*ZERO
  PAR.Quantity_Scheduled = *ZERO;

  // PAR.Weight Scheduled = CON.*ZERO
  PAR.Weight_Scheduled = *ZERO;

  //?E3796 JJH 02/24/15 - Changed Parameter Input Field
  //? Changed: I  Ship Date USR       FLD   PAR Scheduled Ship Date
  //? To:      I  Ship Date USR       FLD   PAR Requested Ship Date
  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER('CHGSHPDTE');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?10/06/16  RMC Re-instate this - want it to resched whatever it had before
  //?Schedule As Ordered.   FP1054- dont sched as ordered
  CASE;

  // IF PAR.Quantity Scheduled NE DB1.Quantity Scheduled
  IF PAR.Quantity_Scheduled <> DB1.Quantity_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('AO');
  PARAMETER('CHGSHPDTE');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  ENDIF;

  //?FP1054 Chg sched ship date and Sched Qty and Weight
  //?E3796 JJH 02/24/15 - Use new function: Chg Reque Ship Dt/qty CH
  EXECUTE FUNCTION(Chg Reque Ship Dt/qty CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2102414;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(PAR.Requested_Ship_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?FP1054 Chg sched ship date only if prod plan is  NO  6/17/09
  //?E3796 JJH 02/24/15 - Use new function: Chg Reque Ship Dt/qty CH
  EXECUTE FUNCTION(Chg Reque Ship Dt/qty CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2102414;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(PAR.Requested_Ship_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(CHG Requested Ship Dt  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1512676;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Ship_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // Call program EDT Post Open Orders   XF.
 CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER('PS');

}


// WRK.@Blank for 7 = CVTVAR(RCD.Requested Ship Date)
WRK.@Blank_for_7 = CVTVAR(RCD.Requested_Ship_Date);

// WRK.@Text 7 = CVTVAR(RCD.Requested Ship Date USR)
WRK.AAText_7 = CVTVAR(RCD.Requested_Ship_Date_USR);

// Call program CRT Load/Order for DD/TXF.
CALL PROGRAM(CRT Load/Order for DD/TXF) ('PDKTXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER('RQSSHP');
PARAMETER('TRF');
PARAMETER(WRK.@Blank_for_7);
PARAMETER(WRK.AAText_7);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.Requested Ship Date = RCD.Requested Ship Date USR
RCD.Requested_Ship_Date = RCD.Requested_Ship_Date_USR;

// WRK.STATUS = CND.Yes
WRK.STATUS = 'Y';

//?Log Requested ship date change
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.STATUS = CND.No
WRK.STATUS = 'N';

ENDIF;

//?Re-allocate if Warehouse Changed
CASE;

// IF RCD.Warehouse Code NE RCD.USR Warehouse Code
IF RCD.Warehouse_Code <> RCD.USR_Warehouse_Code;

EXECUTE FUNCTION(Upd WHS/Alc by Order  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1468515;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Upd WHS/Alc by Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)            AC1468516;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Initialize routine

  //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
  //?USER: Process Data record

  // PAR.Quantity Scheduled = DB1.Quantity Scheduled
  PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // PAR.Weight Scheduled = DB1.Weight Scheduled
  PAR.Weight_Scheduled = DB1.Weight_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER('CHGWHS');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  // PAR.Quantity Scheduled = CON.*ZERO
  PAR.Quantity_Scheduled = *ZERO;

  // PAR.Weight Scheduled = CON.*ZERO
  PAR.Weight_Scheduled = *ZERO;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER('CHGWHS');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?Schedule As Ordered.
  CASE;

  // IF PAR.Quantity Scheduled NE DB1.Quantity Scheduled
  IF PAR.Quantity_Scheduled <> DB1.Quantity_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('AO');
  PARAMETER('CHGWHS');
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  ENDIF;

  //?FP1054 upd production warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Chg Warehouse         CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1468517;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(RTV Whse Type,Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1332644;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CHG Trans Control      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1409189;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 //?Change Load Hdr warehouse, and recalc load miles       * OMS259
 //?** 11/16/2007 LJB FP1251 Total Load Miles will=zeros if there is
 //?** no Miles Between Cities record
 CASE;

 // IF DB1.Load ID is NE Blank
 IF DB1.Load_ID <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(DB1.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?USER: Exit processing

 //?FP1054  post order so it will come off prod hold if it can
 // Call program EDT Post Open Orders   XF.
 CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(LCL.Order_Weight_Total);
 PARAMETER('OE');

}


// WRK.Load Change Type = CND.Change Warehouse
WRK.Load_Change_Type = 'CHGWHS';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

EXECUTE FUNCTION(CRT IC Item Balance    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1482311;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?If item balance record is not found, create one
 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // Call program CLC Rtv Unit Cost/LB   XF.
 CALL PROGRAM(CLC Rtv Unit Cost/LB   XF) ('PDLSXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(WRK.Cost_per_Primary_UOM);
 PARAMETER(WRK.Pricing_Date_Used);
 PARAMETER(WRK.Price_Status);
 PARAMETER(JOB.*Job_date);

 EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


ENDIF;

//?Writing Load/Order Change Log.
CASE;

// IF RCD.Must Ship Error is No Error
IF RCD.Must_Ship_Error = *BLANK;

//?Writing Load/Order Change Log.
// IF RCD.Must Ship Error is Miles to Next=Zeros
IF RCD.Must_Ship_Error = 'MTN';

//?** Exports will not have miles here so skip.          E000550
CASE;

// IF RCD.Export Status is Not Yes
IF RCD.Export_Status = *BLANK/'N';

//?** There is no Miles Between Cities record
// Call program CRT Load/Order for DD/TXF.
CALL PROGRAM(CRT Load/Order for DD/TXF) ('PDKTXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER('NOMILE');
PARAMETER('TRF');
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

//?Writing Load/Order Change Log.
// IF *OTHERWISE
IF *OTHERWISE;

//?User has accepted an order/load that cannot arrive on time
//?(This should never happen)
//?** Put user id into new value field              E-OMS23
// Call program CRT Load/Order for DD/TXF.
CALL PROGRAM(CRT Load/Order for DD/TXF) ('PDKTXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER('ACCDEA');
PARAMETER('TRF');
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

//?Recalc DDD/T if this is stop 1
CASE;

// IF RCD.Stop/Drop is Stop One
IF RCD.Stop_Drop = 1;

// LCL.Deadline Depart DT    HDR = RCD.Sched Delivery Date USR
LCL.Deadline_Depart_DT_HDR = RCD.Sched_Delivery_Date_USR;

// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);
PARAMETER(LCL.Requested_Delivery_Date);

//?** DDD/T to MM/DD, HH/MM conversion                    W288
DO;

//?convert date to mm/dd
// WRK.Month NBR USR = LCL.Deadline Depart DT    HDR *MONTH
WRK.Month_NBR_USR = DATEDTLS(LCL.Deadline_Depart_DT_HDR 'MO' 1111111 'NONE' 'N' 1);

// WRK.Month USR = CVTVAR(WRK.Month NBR USR)
WRK.Month_USR = CVTVAR(WRK.Month_NBR_USR);

// WRK.Day NBR USR = LCL.Deadline Depart DT    HDR *DAY OF MONTH
WRK.Day_NBR_USR = DATEDTLS(LCL.Deadline_Depart_DT_HDR 'DM' 1111111 'NONE' 'N' 1);

// WRK.Day USR = CVTVAR(WRK.Day NBR USR)
WRK.Day_USR = CVTVAR(WRK.Day_NBR_USR);

// WRK.Month/Day Alpha MMDD = CONCAT(WRK.Month USR,WRK.Day USR,CON.*ZERO)
WRK.Month_Day_Alpha_MMDD = WRK.Month_USR + WRK.Day_USR (*ZERO);

// RCD.Deadline Departure MM/DD = CVTVAR(WRK.Month/Day Alpha MMDD)
RCD.Deadline_Departure_MM_DD = CVTVAR(WRK.Month_Day_Alpha_MMDD);

// WRK.Deadline Departure MM/DD = RCD.Deadline Departure MM/DD
WRK.Deadline_Departure_MM_DD = RCD.Deadline_Departure_MM_DD;

//?convert time to hh/mm
// WRK.Hour 1 USR = LCL.Deadline Depart Time  HDR *HOURS
WRK.Hour_1_USR = TIMEDTLS(LCL.Deadline_Depart_Time_HDR 'HR');

// WRK.Hours  2A            USR = CVTVAR(WRK.Hour 1 USR)
WRK.Hours_2A_USR = CVTVAR(WRK.Hour_1_USR);

// WRK.@Minutes = LCL.Deadline Depart Time  HDR *MINUTES
WRK.@Minutes = TIMEDTLS(LCL.Deadline_Depart_Time_HDR 'MN');

// WRK.Minutes  2A          USR = CVTVAR(WRK.@Minutes)
WRK.Minutes_2A_USR = CVTVAR(WRK.@Minutes);

// WRK.Time  4A             USR = CONCAT(WRK.Hours  2A            USR,WRK.Minutes  2A          USR,C
WRK.Time_4A_USR = WRK.Hours_2A_USR + WRK.Minutes_2A_USR (*ZERO);

// RCD.Deadline Depart Time 4,0 = CVTVAR(WRK.Time  4A             USR)
RCD.Deadline_Depart_Time_40 = CVTVAR(WRK.Time_4A_USR);

// WRK.Deadline Depart Time 4,0 = RCD.Deadline Depart Time 4,0
WRK.Deadline_Depart_Time_40 = RCD.Deadline_Depart_Time_40;

ENDDO;

//?Recalc DDD/T if this is stop 1
// IF *OTHERWISE
IF *OTHERWISE;

//?Put converted DDD/T in the subfile
// RCD.Deadline Departure MM/DD = WRK.Deadline Departure MM/DD
RCD.Deadline_Departure_MM_DD = WRK.Deadline_Departure_MM_DD;

// WRK.Deadline Depart Time 4,0 = RCD.Deadline Depart Time 4,0
WRK.Deadline_Depart_Time_40 = RCD.Deadline_Depart_Time_40;

ENDIF;

ENDIF;

//?before 6.29.16 RMC     AGAIN  8.29.26
CASE;

// IF RCD.OH Load Plan Ready is Yes
IF RCD.OH_Load_Plan_Ready = 'Y';

// Call program Rtv Crt OH Trigger    XF.
CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Company_Number);

ENDIF;

//?USER: Final processing (Post-confirm)

//?C4121:OMS315-- determine if dates in correct sequence before update DDD/T
// WRK.USR Exit Program = CND.yes
WRK.USR_Exit_Program = 'Y';

//?Upd Load Header req delivery
// Call program UPD Rqs Deliv Date/1st XF.
CALL PROGRAM(UPD Rqs Deliv Date/1st XF) ('PDFFXFR');
PARAMETER(CTL.Load_ID);

//?** RTV carrier appt date/time                         E00495
// Call program RTV Carrier Appt Dt/Tm XF.
CALL PROGRAM(RTV Carrier Appt Dt/Tm XF) ('PNLVXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.LD_Carrier_Appt_Date);
PARAMETER(WRK.LD_Carrier_Appt_Time);

//?Determine if dates are in correct order on load
CASE;

// IF PAR.Shipping Method is Buyers Truck
IF PAR.Shipping_Method = 'CR'/'CT';

//?       skip collect truck
//?Determine if dates are in correct order on load
// IF PAR.Scheduled Ship Date NE CTL.Scheduled Ship Date USR
IF PAR.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date_USR;

// OR LCL.Status Flag 1  Y/N is Yes
OR LCL.Status_Flag_1_Y_N = 'Y';

// WRK.Warehouse Code PASS   USR = CON.*BLANK
WRK.Warehouse_Code_PASS_USR = *BLANK;

//?** Change to use XF instead if RT                     E00495
// Call program CLC Must Ship/Load     XF.
CALL PROGRAM(CLC Must Ship/Load     XF) ('PMQAXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(CTL.Warehouse_Code);

CASE;

// IF WRK.Must Ship Error is No Error
IF WRK.Must_Ship_Error = *BLANK;

// IF WRK.Must Ship Error is Req Ship should =Must Shp
IF WRK.Must_Ship_Error = 'RSD';

// IF WRK.Must Ship Error is Miles to Next=Zeros
IF WRK.Must_Ship_Error = 'MTN';

// IF *OTHERWISE
IF *OTHERWISE;

//?Display program will log the deadline errors
// Call program DSP Must Ship Err/Load DF.
CALL PROGRAM(DSP Must Ship Err/Load DF) ('PDMBDFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);

// WRK.USR Exit Program = CND.no
WRK.USR_Exit_Program = 'N';

ENDIF;

ENDIF;

//?** Update Deadline Depart Date/Time                   W288
// WRK.USR Load Id ALpha = CVTVAR(CTL.Load ID)
WRK.USR_Load_Id_ALpha = CVTVAR(CTL.Load_ID);

CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

// Call program CLC Depart Date f/web  XF.
CALL PROGRAM(CLC Depart Date f/web  XF) ('PNMAXFR');
PARAMETER(WRK.USR_Load_Id_ALpha);

ENDIF;

//?Exit program if no date sequence errors found
CASE;

// IF WRK.USR Exit Program is yes
IF WRK.USR_Exit_Program = 'Y';

RETURN;

ENDIF;

