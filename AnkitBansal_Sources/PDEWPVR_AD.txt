// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDEWPVR
// ?Date: 14.08.2025 Time: 03:34:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

// PAR.PRT Night Queue Run Sts = CND.yes
PAR.PRT_Night_Queue_Run_Sts = 'Y';

//?12/01/04 SLM Use the Company Sel for the plant
//?USER: Load screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.@Date - ATR = JOB.*Job date
DTL.@Date_ATR = JOB.*Job_date;

CASE;

// IF PAR.@Date MMDD is *Blank
IF PAR.@Date_MMDD = *ZERO;

// Call program Zzz Month/Year         XF.
CALL PROGRAM(Zzz Month/Year         XF) ('PDHAXFR');
PARAMETER(DTL.@Date_ATR);
PARAMETER(PAR.@Date_MMDD);

// DTL.@Month/Year = PAR.@Date MMDD
DTL.@Month_Year = PAR.@Date_MMDD;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.@Date MMDD = DTL.@Month/Year
PAR.@Date_MMDD = DTL.@Month_Year;

// Call program Zzz Month/Year         XF.
CALL PROGRAM(Zzz Month/Year         XF) ('PDHAXFR');
PARAMETER(DTL.@Date_ATR);
PARAMETER(PAR.@Date_MMDD);

ENDIF;

// DTL.Print Yes/No          USR = CND.No
DTL.Print_Yes_No_USR = 'N';

// DTL.Sale Type             USR = CND.Loads
DTL.Sale_Type_USR = 'L';

// DTL.Report Type Both      USR = CND.Summary
DTL.Report_Type_Both_USR = 'S';

// DTL.USR Work Field 3A = Condition name of DTL.Print Yes/No          USR
DTL.USR_Work_Field_3A = RTVCND(DTL.Print_Yes_No_USR);

// DTL.USR Work Field 5A     USR = Condition name of DTL.Sale Type             USR
DTL.USR_Work_Field_5A_USR = RTVCND(DTL.Sale_Type_USR);

// DTL.USR Work Field 7A = Condition name of DTL.Report Type Both      USR
DTL.USR_Work_Field_7A = RTVCND(DTL.Report_Type_Both_USR);

CASE;

// IF DTL.Parent Customer is equal to zero
IF DTL.Parent_Customer = *ZERO;

// DTL.Parent Customer Name  USR = CND.blanks
DTL.Parent_Customer_Name_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Parent_Customer_Name_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Move Blanks if needed.
DO;

//?Parent Customer
CASE;

// IF DTL.Parent Customer is equal to zero
IF DTL.Parent_Customer = *ZERO;

// DTL.Parent Customer Name  USR = CON.*BLANK
DTL.Parent_Customer_Name_USR = *BLANK;

ENDIF;

//?A/R Customer Number
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// DTL.USR Bill To Customer Name = CON.*BLANK
DTL.USR_Bill_To_Customer_Name = *BLANK;

ENDIF;

//?Sales Route Code
CASE;

// IF DTL.Sales Route Code is not entered
IF DTL.Sales_Route_Code = *BLANK;

// DTL.Salesperson Name = CON.*BLANK
DTL.Salesperson_Name = *BLANK;

ENDIF;

//?Territory Code
CASE;

// IF DTL.Territory Code is *Blank
IF DTL.Territory_Code = *BLANK;

// DTL.Territory Description = CON.*BLANK
DTL.Territory_Description = *BLANK;

ENDIF;

ENDDO;

//?USER: Process command keys

//?Select Company
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Company Number CDE
AND PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Sale Type             USR
AND PGM.*Cursor_field = DTL.Sale_Type_USR;

// DTL.USR Work Field 5A     USR = Condition name of DTL.Sale Type             USR
DTL.USR_Work_Field_5A_USR = RTVCND(DTL.Sale_Type_USR);

ENDIF;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Report Type Both      USR
AND PGM.*Cursor_field = DTL.Report_Type_Both_USR;

// DTL.USR Work Field 7A = Condition name of DTL.Report Type Both      USR
DTL.USR_Work_Field_7A = RTVCND(DTL.Report_Type_Both_USR);

ENDIF;

//?USER: Validate fields

EXECUTE FUNCTION(RTV Chk Company Exist  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1192393;
PARAMETER(DTL.Company_Number_CDE);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate Company
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(DTL.Company_Number);

//?Validate Company
// IF *OTHERWISE
IF *OTHERWISE;

//?05/10/07 JRB Removed hard coded companys
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

//?Validate Parent Customer
CASE;

// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1524178;
PARAMETER(DTL.Parent_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Parent Number not found.'
ERROR(USR2394);

ENDIF;

ENDIF;

//?Validate A/R Customer
CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1524178;
PARAMETER(DTL.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'A/R Customer Not Found.'
ERROR(USR2751);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?Validate Sales Route
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1502618;
PARAMETER(DTL.Sales_Route_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Sales_Route_Code);

ENDIF;

ENDIF;

//?Validate Territory
CASE;

// IF DTL.Territory Code is *Not Blank
IF DTL.Territory_Code <> *BLANK;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(PDLVREP)          AC1524180;
PARAMETER(DTL.Territory_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Territory Master not found.'
ERROR(USR2581);
MSGPARM(DTL.Territory_Code);

ENDIF;

ENDIF;

//?Validate that both Parent and A/R Customers are not chosen.
CASE;

// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

// AND DTL.A/R Customer Number is not equal to zero
AND DTL.AR_Customer_Number <> *ZERO;

// Send error message - 'Can not choose both Parent Customer and A/R Customer.'
ERROR(USR2771);
MSGPARM(DTL.Parent_Customer);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

//?CALC: Screen function fields

//?Select Parent Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Parent Customer
AND PGM.*Cursor_field = DTL.Parent_Customer;

// Call program SEL Parent Customer    SR.
CALL PROGRAM(SEL Parent Customer    SR) ('PDWBSRR');
PARAMETER(DTL.Parent_Customer);

EXECUTE FUNCTION(RTV All fields         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1478652;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Parent_Customer_Name_USR);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State_Code);
PARAMETER(WRK.County_Code);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.Telephone_Number_FF);
PARAMETER(WRK.Fax_Number_FF);
PARAMETER(WRK.Alpha_Search);
PARAMETER(WRK.Federal_Tax_Id);
PARAMETER(WRK.New_Customer_Status);
PARAMETER(WRK.SIC_Number);
PARAMETER(WRK.D_B_Number);
PARAMETER(WRK.D_B_Rating);
PARAMETER(WRK.Date_of_D_B_Rating);
PARAMETER(WRK.Credit_Line_Expire_Date);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(WRK.Country_Code);
PARAMETER(WRK.EDI_Invoice_Sts);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
PARAMETER(WRK.Order_Entry_Hold_Date);
PARAMETER(WRK.Ship_To_Customer_Flag);
PARAMETER(WRK.Field_vs_In_House_flag);
PARAMETER(WRK.Email_When_Order_Shipped);
PARAMETER(WRK.Print_Invoice_Sts);
PARAMETER(WRK.Item_Reference_Status);
PARAMETER(WRK.Statement_Print_Frequency);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(WRK.Record_Status);
PARAMETER(WRK.Job_Time);
PARAMETER(WRK.User_Id);
PARAMETER(WRK.Job_Name);
PARAMETER(WRK.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Select A/R Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.A/R Customer Number
AND PGM.*Cursor_field = DTL.AR_Customer_Number;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.AR_Customer_Number);

EXECUTE FUNCTION(RTV All fields         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1478652;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.USR_Bill_To_Customer_Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State_Code);
PARAMETER(WRK.County_Code);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.Telephone_Number_FF);
PARAMETER(WRK.Fax_Number_FF);
PARAMETER(WRK.Alpha_Search);
PARAMETER(WRK.Federal_Tax_Id);
PARAMETER(WRK.New_Customer_Status);
PARAMETER(WRK.SIC_Number);
PARAMETER(WRK.D_B_Number);
PARAMETER(WRK.D_B_Rating);
PARAMETER(WRK.Date_of_D_B_Rating);
PARAMETER(WRK.Credit_Line_Expire_Date);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Parent_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Credit_Check_Parent_Cust);
PARAMETER(WRK.Country_Code);
PARAMETER(WRK.EDI_Invoice_Sts);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Parent_Credit_Limit);
PARAMETER(WRK.AR_Credit_Limit);
PARAMETER(WRK.Order_Entry_Hold_Date);
PARAMETER(WRK.Ship_To_Customer_Flag);
PARAMETER(WRK.Field_vs_In_House_flag);
PARAMETER(WRK.Email_When_Order_Shipped);
PARAMETER(WRK.Print_Invoice_Sts);
PARAMETER(WRK.Item_Reference_Status);
PARAMETER(WRK.Statement_Print_Frequency);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(WRK.Record_Status);
PARAMETER(WRK.Job_Time);
PARAMETER(WRK.User_Id);
PARAMETER(WRK.Job_Name);
PARAMETER(WRK.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Select Ship to Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To Customer
AND PGM.*Cursor_field = DTL.Ship_To_Customer;

//?033104 SLM USE SHIP TO CUSTOMER TO POSITION BY NAME
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.Ship_To_Customer);

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Select Sales Route
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Sales Route Code
AND PGM.*Cursor_field = DTL.Sales_Route_Code;

// Call program SEL Route by Sls Persn SR.
CALL PROGRAM(SEL Route by Sls Persn SR) ('PDS1SRR');
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(WRK.TXT_field_not_needed);

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Select Territory
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Territory Code
AND PGM.*Cursor_field = DTL.Territory_Code;

// Call program SEL Territory          SR.
CALL PROGRAM(SEL Territory          SR) ('PDD4SRR');
PARAMETER(DTL.Territory_Code);
PARAMETER(DTL.Territory_Description);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// DTL.Parent Customer = CND.equal to zero
DTL.Parent_Customer = *ZERO;

ENDIF;

// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Customer Number Pass  USR = DTL.Parent Customer
PAR.Customer_Number_Pass_USR = DTL.Parent_Customer;

// PAR.A/R Customer Num Pass USR = DTL.A/R Customer Number
PAR.A_R_Customer_Num_Pass_USR = DTL.AR_Customer_Number;

// PAR.Ship to Customer Pass USR = DTL.Ship To Customer
PAR.Ship_to_Customer_Pass_USR = DTL.Ship_To_Customer;

//?Moving Sales Route Code
CASE;

// IF DTL.Sales Route Code is not entered
IF DTL.Sales_Route_Code = *BLANK;

// PAR.Sales Route Code = CND.*All
PAR.Sales_Route_Code = 'ALL';

//?Moving Sales Route Code
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Sales Route Code = DTL.Sales Route Code
PAR.Sales_Route_Code = DTL.Sales_Route_Code;

ENDIF;

//?Moving Territory Code
CASE;

// IF DTL.Territory Code is *Blank
IF DTL.Territory_Code = *BLANK;

// PAR.Territory Code = CND.*All
PAR.Territory_Code = *ALL;

//?Moving Territory Code
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Territory Code = DTL.Territory Code
PAR.Territory_Code = DTL.Territory_Code;

ENDIF;

// PAR.Date In = DTL.@Date - ATR
PAR.Date_In = DTL.@Date_ATR;

// PAR.@Date MMDD = DTL.@Month/Year
PAR.@Date_MMDD = DTL.@Month_Year;

// Call program Zzz Month/Year         XF.
CALL PROGRAM(Zzz Month/Year         XF) ('PDHAXFR');
PARAMETER(DTL.@Date_ATR);
PARAMETER(PAR.@Date_MMDD);

CASE;

// IF PGM.*Return code is Month Error
IF PGM.*Return_code = 'MONERR';

// Send error message - 'Month in Error'
ERROR(USR2621);

ENDIF;

DO;

// WRK.USR Counter Alpha = CVTVAR(DTL.@Month/Year)
WRK.USR_Counter_Alpha = CVTVAR(DTL.@Month_Year);

// WRK.TXT Month Number      USR = SUBSTRING(WRK.USR Counter Alpha,CON.2,CON.2)
WRK.TXT_Month_Number_USR = SUBSTRING(WRK.USR_Counter_Alpha:2:2);

// WRK.TXT Year Number       USR = SUBSTRING(WRK.USR Counter Alpha,CON.4,CON.2)
WRK.TXT_Year_Number_USR = SUBSTRING(WRK.USR_Counter_Alpha:4:2);

// WRK.TXT Date 1            USR = CONCAT(WRK.TXT Year Number       USR,WRK.TXT Mon
WRK.TXT_Date_1_USR = WRK.TXT_Year_Number_USR + WRK.TXT_Month_Number_USR (*ZERO);

//?LOAD LAST DAY OF MONTH.
DO;

CASE;

// IF WRK.TXT Month Number      USR is February
IF WRK.TXT_Month_Number_USR = '02';

// WRK.TXT Date 1            USR = CONCAT(WRK.TXT Date 1            USR,CON.28,CON.
WRK.TXT_Date_1_USR = WRK.TXT_Date_1_USR + '28' (*ZERO);

// IF WRK.TXT Month Number      USR is April
IF WRK.TXT_Month_Number_USR = '04';

// OR WRK.TXT Month Number      USR is June
OR WRK.TXT_Month_Number_USR = '06';

// OR WRK.TXT Month Number      USR is September
OR WRK.TXT_Month_Number_USR = '09';

// OR WRK.TXT Month Number      USR is November
OR WRK.TXT_Month_Number_USR = '11';

// WRK.TXT Date 1            USR = CONCAT(WRK.TXT Date 1            USR,CON.30,CON.
WRK.TXT_Date_1_USR = WRK.TXT_Date_1_USR + '30' (*ZERO);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TXT Date 1            USR = CONCAT(WRK.TXT Date 1            USR,CON.31,CON.
WRK.TXT_Date_1_USR = WRK.TXT_Date_1_USR + '31' (*ZERO);

ENDIF;

ENDDO;

// DTL.@Date - ATR = CON.*ZERO
DTL.@Date_ATR = *ZERO;

// DTL.@Date - ATR = CVTVAR(WRK.TXT Date 1            USR)
DTL.@Date_ATR = CVTVAR(WRK.TXT_Date_1_USR);

ENDDO;

// PAR.Year Compare          USR = DTL.@Date - ATR *YEAR
PAR.Year_Compare_USR = DATEDTLS(DTL.@Date_ATR 'YR' 1111111 'NONE' 'N' 1);

// PAR.Year Compare 2        USR = PAR.Year Compare          USR - CON.1
PAR.Year_Compare_2_USR = PAR.Year_Compare_USR - 1;

// PAR.Alpha Zeroes 3        USR = CVTVAR(PAR.Year Compare          USR)
PAR.Alpha_Zeroes_3_USR = CVTVAR(PAR.Year_Compare_USR);

// PAR.Alpha Zeros 2 = SUBSTRING(PAR.Alpha Zeroes 3        USR,CON.2,CON.2)
PAR.Alpha_Zeros_2 = SUBSTRING(PAR.Alpha_Zeroes_3_USR:2:2);

// PAR.Month 2 Char Num       .U = DTL.@Date - ATR *MONTH
PAR.Month_2_Char_Num_U = DATEDTLS(DTL.@Date_ATR 'MO' 1111111 'NONE' 'N' 1);

// PAR.Alpha Zeroes 3.2      USR = CVTVAR(PAR.Month 2 Char Num       .U)
PAR.Alpha_Zeroes_3_2_USR = CVTVAR(PAR.Month_2_Char_Num_U);

// PAR.Alpha Zeroes 2.2      USR = SUBSTRING(PAR.Alpha Zeroes 3.2      USR,CON.2,CO
PAR.Alpha_Zeroes_2_2_USR = SUBSTRING(PAR.Alpha_Zeroes_3_2_USR:2:2);

// PAR.Day NBR USR = DTL.@Date - ATR *DAY OF MONTH
PAR.Day_NBR_USR = DATEDTLS(DTL.@Date_ATR 'DM' 1111111 'NONE' 'N' 1);

// PAR.Alpha Zeroes 3.3      USR = CVTVAR(PAR.Day NBR USR)
PAR.Alpha_Zeroes_3_3_USR = CVTVAR(PAR.Day_NBR_USR);

// PAR.Alpha Zeroes 2.3      USR = SUBSTRING(PAR.Alpha Zeroes 3.3      USR,CON.2,CO
PAR.Alpha_Zeroes_2_3_USR = SUBSTRING(PAR.Alpha_Zeroes_3_3_USR:2:2);

// PAR.TXT Date 1            USR = CONCAT(PAR.Alpha Zeros 2,PAR.Alpha Zeroes 2.2
PAR.TXT_Date_1_USR = PAR.Alpha_Zeros_2 + PAR.Alpha_Zeroes_2_2_USR (*ZERO);

// PAR.TXT Date 1            USR = CONCAT(PAR.TXT Date 1            USR,PAR.Alpha Z
PAR.TXT_Date_1_USR = PAR.TXT_Date_1_USR + PAR.Alpha_Zeroes_2_3_USR (*ZERO);

//?Reset year to 99.
CASE;

// IF PAR.Year Compare 2        USR is less than zero
IF PAR.Year_Compare_2_USR < *ZERO;

// PAR.Year Compare 2        USR = CON.99
PAR.Year_Compare_2_USR = 99;

ENDIF;

// PAR.Alpha Zeroes 3        USR = CVTVAR(PAR.Year Compare 2        USR)
PAR.Alpha_Zeroes_3_USR = CVTVAR(PAR.Year_Compare_2_USR);

// PAR.Alpha Zeros 2 = SUBSTRING(PAR.Alpha Zeroes 3        USR,CON.2,CON.2)
PAR.Alpha_Zeros_2 = SUBSTRING(PAR.Alpha_Zeroes_3_USR:2:2);

// PAR.TXT Date 2            USR = CONCAT(PAR.Alpha Zeros 2,CON.0101,CON.*ZERO)
PAR.TXT_Date_2_USR = PAR.Alpha_Zeros_2 + '0101' (*ZERO);

// Call program Zzz Sales Tonnage      UP.
CALL PROGRAM(Zzz Sales Tonnage      UP) ('PDEUUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER('PDD3PCLP');
PARAMETER('Customer Annualized Sales');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.A_R_Customer_Num_Pass_USR);
PARAMETER(PAR.Ship_to_Customer_Pass_USR);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Territory_Code);
PARAMETER(DTL.Sale_Type_USR);
PARAMETER(DTL.Report_Type_Both_USR);
PARAMETER(PAR.TXT_Date_1_USR);
PARAMETER(PAR.TXT_Date_2_USR);
PARAMETER(DTL.Print_Yes_No_USR);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

