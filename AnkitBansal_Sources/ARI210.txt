      *
      * System:      Account Receivable System (PORK)
      * Program:     ARI210
      * Title:       Move Data to populate F0311 in JD Edwards
      * Programmer:  Don Greenhaw
      * Created:     03/26/2004
      *
      *  Function:   This Program Reads Files needed to extract data to
      *              Populate F0311. this program really should be only run
      *              once in production.
      *
      * Files used:
      *
      *
      *       Input      ARBDCPP - A/R Header
      *       Input      ARBECPP - A/R Detail
      *
      *       Update     F0311   - JDE A/R Ledger
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * XX/XX/XX  XXXXXXXXXXXX
      *           XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      *           XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      *           XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      *
      /EJECT
      *******************************************************************
      * FILE SPECIFICTIONS
      *******************************************************************
      *
     FARBDCPL6  IF   E           K DISK
      *  A/R Header                Co/Customer AR
      *
     FARBECPL1  IF   E           K DISK
      *  A/R DETAIL
      *              Co/Invoice number/Invoice suffix/Sequence number
      *
     FF0311     UF A E           K DISK
      *  JDE A/R Ledger
      *
      *******************************************************************
      * EXTENSION SPECIFICATIONS
      *******************************************************************
      *
      *******************************************************************
      * INPUT SPECS
      *******************************************************************
      *
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D ONLY            C                   CONST('O')
      *
     D T1DESC          C                   CONST('CUSTOMER TOTALS -
     D                                     BEFORE CREDIT -
     D                                     APPLIED')
      *
     D CpyNum          C                   CONST('360  ')
      *
     D T2DESC          C                   CONST('CUSTOMER TOTALS -
     D                                     AFTER CREDIT -
     D                                     APPLIED')
      *
      *---------------------------------------------------------------
      *  DATA STRUCTURES
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *
      *---------------------------------------------------------------
      * FORMATS FOR FLIPPING DATES
      *---------------------------------------------------------------
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      *
      * DATE IN CYYMMDD FORMAT USED IN THE OMS SYSTEM
      *
     D                 DS
     D  WKOMDT                 1      7  0
     D  OMSC                   1      1  0
     D  OMSYY                  2      3  0
     D  OMSMM                  4      5  0
     D  OMSDD                  6      7  0
      *
      /EJECT
      *******************************************************************
      * MAINLINE PROCESSING
      *******************************************************************
      *
      * Main line for this program reads the ARS Detail Header and
      * writes information needed to F0311 JDEdwards A/R ledger file.
      *
     C     *LoVal        SetLL     ARBDCPP
      *
     C     *In90         DoUeq     *on
     C                   Read      ARBDCPP                                90
     C     *In90         IfEq      *off
      *
     C                   ExSr      $Popflds
      *
     C                   ExSr      $WritRec
      *
     C                   Else
      *
     C                   ExSr      $EndPgm
      *
     C                   EndIf
      *
     C                   EndDO
      *
      *
      *-----------------------------------------------------------------
      * $Popflds - Populate F0311 fields..
      *-----------------------------------------------------------------
      *
      *
     C     $Popflds      BegSr
      *
     C                   Eval      Rpkco  = Cpyno
     C                   Eval      Rpco   = Cpyno
     C                   Eval      Rpan8  = Bdanc7
     C                   Eval      RpDct  = 'RI'
     C                   Z-add     Bdconb        Rpdoc
     C                   Z-add     Bdconb        Rpvinv
     C                   Z-add     Bdconb        Rpsdoc
     C                   Eval      RpsFx  = *Blanks
     C                   Eval      Rpan8  = Bdanc7
     C                   Z-ADD     Bdh5Dt        PFRM8
     C                   Exsr      $Date
     C                   Z-ADD     PTO8          Rpdivj
     C                   Z-ADD     PTO8          Rpdjg
     C                   Eval      Rpdctm = 'RI'
     C                   Eval      Rpdocm = 1
     C                   Eval      RpsFxm = *Blanks
     C                   Z-ADD     Bdh0Dt        PFRM8
     C                   Exsr      $Date
     C                   Z-ADD     PTO8          Rpdmtj
     C                   Z-add     Bdh5dt        WkomDt
     C                   Z-add     Omsyy         Rpfy
     C                   Z-add     20            Rpctry
     C                   Z-add     *zeros        Rppn
     C                   Movel     Bduhcd        Rpicut
     C                   Z-add     Bdcknb        Rpicu
     C                   Z-add     *zeros        Rpdicj
     C                   Z-add     *zeros        Rppa8
     C                   Z-add     *zeros        Rpdicj
     C                   Z-add     *zeros        Rpan8j
     C                   Eval      Rppost = *blanks
     C                   Eval      Rpbalj = *blanks
     C                   Eval      Rppst  = *blanks
     C                   Z-add     Bdaova        Rpag
     C                   Z-add     Bdagva        Rpaap
     C                   Eval      Rpadsc = *zeros
     C                   Eval      Rpadsa = *zeros
     C                   Eval      Rpatxa = *zeros
     C                   Eval      Rpatxn = *zeros
     C                   Eval      Rpstam = *zeros
     C                   Eval      Rpan8  = Bdanc7
     C                   Eval      Rpcrrm = *blanks
     C                   Eval      Rpcrcd = *blanks
     C                   Eval      Rpcrr  = *zeros
     C                   Eval      Rpacr  = *zeros
     C                   Eval      Rpfap  = *zeros
     C                   Eval      Rpcds  = *zeros
     C                   Eval      Rpdsa  = *zeros
     C                   Eval      Rpctxa = *zeros
     C                   Eval      Rpctxn = *zeros
     C                   Eval      Rpctam = *zeros
     C                   Eval      Rptxa1 = *blanks
     C                   Eval      Rpexr1 = *blanks
     C                   Eval      Rpdsvj = *zeros
     C                   Eval      Rpglc  = *blanks
     C                   Eval      Rpglba = *blanks
     C                   Eval      Rpam   = 'A'
     C                   Eval      Rpaid2 = *blanks
     C                   Eval      Rpam2  = 'A'
     C                   Eval      Rpmcu  = *blanks
     C                   Eval      Rpmobj = *blanks
     C                   Eval      Rpsub  = *blanks
     C                   Eval      Rpsblt = *blanks
     C                   Eval      Rpsbl  = *blanks
     C                   Eval      Rpbaid = *blanks
     C                   Eval      Rpcm   = *blanks
     C                   Eval      Rpptc  = *blanks
     C                   Z-ADD     Bdatdt        PFRM8
     C                   Exsr      $Date
     C                   Z-ADD     PTO8          Rpddj
     C                   Eval      Rpddnj = *zeros
     C                   Eval      Rpdprj = *zeros
     C                   Eval      Rpsmtj = *zeros
     C                   Eval      Rpcldj = *zeros
     C                   Eval      Rpitij = *zeros
     C                   Eval      Rprddj = *zeros
     C                   Eval      Rprdsj = *zeros
     C                   Eval      Rpnbrr = *blanks
     C                   Eval      Rprdrl = *blanks
     C                   Eval      Rprmds = *zeros
     C                   Eval      Rpcoll = 'N'
     C                   Eval      Rpclrc = *blanks
     C                   Eval      Rpafc  = 'N'
     C                   Eval      Rpnsr  = *blanks
     C                   Eval      Rpar   = *blanks
     C                   Eval      Rptrtc = *blanks
     C                   Eval      Rpprt1 = 'N'
     C                   Eval      Rpodoc = *zeros
     C                   Eval      Rpodct = *blanks
     C                   Eval      Rposfx = *blanks
     C                   Eval      Rpcrc  = *blanks
     C                   Eval      Rppo   = *blanks
     C                   Eval      Rpdcto = *blanks
     C                   Eval      Rplntd = *zeros
     C                   Eval      Rpsfxo = *blanks
     C                   Eval      Rpsdct = *blanks
     C                   Eval      Rpsdct = *blanks
     C                   Eval      Rpopsq = *zeros
     C                   Eval      Rpcmc1 = *zeros
     C                   Eval      Rpvro1 = *blanks
     C                   Eval      Rpnumb = *zeros
     C                   Eval      Rpunit = *blanks
     C                   Eval      Rpumcu2= *blanks
     C                   Eval      Rprmk  = *blanks
     C                   Eval      Rprf   = *blanks
     C                   Eval      Rpdrf  = *zeros
     C                   Eval      Rpctl  = *blanks
     C                   Eval      Rpfnlb = *blanks
     C                   Eval      Rpu    = *zeros
     C                   Eval      Rpum   = *blanks
     C                   Eval      Rpalt6 = *blanks
     C                   Eval      Rppyin = *blanks
     C                   Eval      Rppyin = *blanks
     C                   Eval      Rprp1  = *blanks
     C                   Eval      Rprp2  = *blanks
     C                   Eval      Rprp3  = *blanks
      * Rpalph needs to be populated from CABBREP
     C                   Eval      Rpalph = *blanks
     C                   Eval      Rpac01 = *blanks
     C                   Eval      Rpac02 = *blanks
     C                   Eval      Rpac03 = *blanks
     C                   Eval      Rpac04 = *blanks
     C                   Eval      Rpac05 = *blanks
     C                   Eval      Rpac06 = *blanks
     C                   Eval      Rpac07 = *blanks
     C                   Eval      Rpac08 = *blanks
     C                   Eval      Rpac09 = *blanks
     C                   Eval      Rpac10 = *blanks
      *
      *
      * POSITION IN A/R HEADER FILE ON COMPANY AND CUSTOMER.
      *
     C     KEY1          SETLL     ARBDCPL6
      *
      *
      * PROCESS EACH A/R HEADER RECORD FOR THIS CUSTOMER THAT:
      *   1) DOES NOT HAVE A PURGE STATUS OF 'H'ISTORY
      *   2) HAS A TRANSACTION DATE ON OR BEFORE THE CUTOFF DATE
      *
     C     *IN91         DOUEQ     *ON
     C     WKDUE         ORNE      0
     C     KEY1          READE     ARBDCPL6                               91
     C     *IN91         IFEQ      *OFF
     C     BDE3ST        ANDNE     'H'
     C     BDB4DT        ANDLE     XXDT
      *
      *
      *---------------------------------------------------------------
      * EOF PROCESSING
      *---------------------------------------------------------------
      *
      *  IF YOU PROCESSED ANY DATA, THEN CALCULATE TOTALS
      *
      *
     C     FIRST         IFEQ      NO
      *
      * IF THE USER IS GENERATING THE REPORT 'BY SALES ROUTE'
      * CALCULATE SALES ROUTE TOTALS.
      *
     C     XXRPT         IFEQ      '2'
     C                   EXSR      $ROUTE
     C                   ENDIF
      *
      * ALWAYS GENERATE REPORT WORKFILE RECORD.
      *
     C                   EXSR      $TOTR
     C                   ENDIF
      *
      * Exit program
     C                   SETON                                        LR
      /EJECT
      *-------------------------------------------------------------------
      * $ARDUE - DETERMINE IF THIS IS AN A/R CUSTOMER WITH A BALANCE DUE
      *-------------------------------------------------------------------
      *
      * THIS LOGIC IS USED TO DETERMINE WHETHER TO INCLUDE A CUSTOMER ON
      * THE REPORT. TO BE INCLUDED, THE CUSTOMER MUST BE AN A/R CUSTOMER.
      * THE USER'S SELECTIONS DETERMINE WHETHER ZERO BALANCE CUSTOMERS
      * SHOULD BE INCLUDED.
      *
      * THIS LOGIC ASSUMES THAT ONLY A/R CUSTOMERS WILL
      * HAVE A RECORD IN THE A/R SUMMARY FILE.
      *
      *
     C     $ARDUE        BEGSR
      *
      *
      * SET UP THE VALUE FOR THE KEY FIELD OF A/R CUSTOMER NUMBER
      * AND RETRIEVE RECORD FOR COMPANY AND A/R CUSTOMER FROM
      * A/R SUMMARY FILE.
      *
     C     KEY1          CHAIN     ARBCREL6                           92
     C     *IN92         IFEQ      *ON
     C                   MOVEL     NO            PROCFL
     C                   ELSE
      *
      * DETERMINE IF THIS CUSTOMER HAS ANY BALANCE (POSITIVE
      * OR NEGATIVE) AS OF THE USER'S CUTOFF DATE.
      *
     C                   EXSR      $BAL
      *
      *
      * IF THE CUSTOMER HAS A ZERO BALANCE, ONLY PROCESS THE
      * CUSTOMER IF THE USER HAS ELECTED TO SEE ZERO BALANCE
      * CUSTOMERS.
      *
     C     WKDUE         IFEQ      0
     C     XX0BAL        ANDEQ     NO
     C                   MOVEL     NO            PROCFL
     C                   ELSE
      *
      * SET UP FIELDS USING DATA FROM A/R SUMMARY RECORD:
      *  1) AMOUNT OF HIGHEST A/R BALANCE
      *  2) YTD SALES INVOICED
      *
     C                   Z-ADD     BCALVA        $CALVA
     C                   Z-ADD     BCVPVA        $CVPVA
      *
      * FLIP DATES TO MMDDYY FORMAT. FOR EACH DATE, YOU MUST:
      *   1) ADD CENTURY VALUES INSTEAD OF THE 0/1 INDICATOR
      *      USED IN SYNON, THEN
      *   2) USE STANDARD DATE ROUTINE TO FLIP TO MMDDYY
      *
      *
      * FLIP DATE OF LAST PAYMENT
      *
      *
     C                   Z-ADD     BCALDT        $CALDT
     C                   Z-ADD     BCALDT        WKOMDT
     C                   EXSR      $ADDCC
     C                   Z-ADD     WKCYMD        PFRM8
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'MDY '        PTOFMT
     C                   MOVE      *BLANK        PCODE
     C                   Z-ADD     0             PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          $CLPDT
     C                   ELSE
     C                   Z-ADD     0             $CLPDT
     C                   ENDIF
      *
      *
      * FLIP DATE OF HIGHEST A/R BALANCE
      *
      *
     C                   Z-ADD     BCAIDT        $CAIDT
     C                   Z-ADD     BCAIDT        WKOMDT
     C                   EXSR      $ADDCC
     C                   Z-ADD     WKCYMD        PFRM8
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'MDY '        PTOFMT
     C                   MOVE      *BLANK        PCODE
     C                   Z-ADD     0             PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          $CHBDT
     C                   ELSE
     C                   Z-ADD     0             $CHBDT
     C                   ENDIF
      *
     C                   ENDIF
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * $BAL - DETERMINE IF CUSTOMER HAS A BALANCE AS OF CUTOFF DATE
      *-----------------------------------------------------------------
      *
      *
     C     $BAL          BEGSR
      *
      *
      * INITIALIZE WORKFIELD FOR THIS CUSTOMER'S BALANCE DUE.
      *
     C                   Z-ADD     0             WKDUE
      *
      *
      * POSITION IN A/R HEADER FILE ON COMPANY AND CUSTOMER.
      *
     C     KEY1          SETLL     ARBDCPL6
      *
      *
      * PROCESS EACH A/R HEADER RECORD FOR THIS CUSTOMER THAT:
      *   1) DOES NOT HAVE A PURGE STATUS OF 'H'ISTORY
      *   2) HAS A TRANSACTION DATE ON OR BEFORE THE CUTOFF DATE
      *
     C     *IN91         DOUEQ     *ON
     C     WKDUE         ORNE      0
     C     KEY1          READE     ARBDCPL6                               91
     C     *IN91         IFEQ      *OFF
     C     BDE3ST        ANDNE     'H'
     C     BDB4DT        ANDLE     XXDT
      *
      *
      * Conditionally include chargebacks. The user may elect to:
      *  1) include chargebacks with everything else
      *  2) omit charge backs
      *  3) only print chargebacks
      *
     C                   if        xxinclcb = yes or
     C                             (bdcest = 'CB' and xxinclcb = only) or
     C                             (bdcest <> 'CB' and xxinclcb = no)
      *
      * The user can also limit the report to up to 5 different Invoice Suffixes
      * Check for the users choices.
      *
     C                   move      no            goonfl
      *
     C                   select
     C                   when      xxsuffix1 = *blank and
     C                             xxsuffix2 = *blank and
     C                             xxsuffix3 = *blank and
     C                             xxsuffix4 = *blank and
     C                             xxsuffix5 = *blank
     C                   move      yes           goonfl
      *
     C                   when      bdcest = xxsuffix1 or
     C                             bdcest = xxsuffix2 or
     C                             bdcest = xxsuffix3 or
     C                             bdcest = xxsuffix4 or
     C                             bdcest = xxsuffix5
     C                   move      yes           goonfl
     C                   endsl
      *
      * If keep going
     C                   if        goonfl = yes
      *
      * INITIALIZE THE WORK FIELD TO HOLD THE TRANSACTION
      * AMOUNT FROM THIS A/R HEADER RECORD.
      *
     C                   Z-ADD     BDBSVA        WKDUE
      *
      * NOW, CALCULATE THE REMAINING BALANCE FOR THIS A/R
      * HEADER RECORD AS OF THE CUTOFF DATE. BECAUSE THERE
      * IS NO TIE FROM THE A/R HEADER TO THE A/R DETAIL FILE
      * FOR CREDIT MEMEOS AND 'ON ACCOUNT' RECORDS, WE HAD TO
      * CREATE SEPARATE LOGIC TO CALCULATE THE REMAINING BALANCE
      * DUE.
      *
     C                   SELECT
     C     BDCEST        WHENEQ    'IN'
     C     BDCEST        OREQ      'DM'
     C     BDCEST        OREQ      'CB'
     C                   EXSR      $DUEIN
     C     BDCEST        WHENEQ    'CM'
     C     BDCEST        OREQ      'OA'
     C                   EXSR      $DUECM
     C                   ENDSL
      *
     C                   ENDIF
     C                   ENDIF
     C                   ENDIF
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *--------------------------------------------------------------------
      * $DUEIN - CALCULATE AMOUNT DUE FOR A/R HEADER RECORD AS OF CUTOFF
      *          DATE (INVOICES AND DEBIT MEMOS ONLY)
      *--------------------------------------------------------------------
      *
      * CALCULATE THE REMAINING BALANCE FOR THIS A/R HEADER RECORD
      * AS OF THE CUTOFF DATE BY PROCESSING ALL THE A/R DETAIL
      * RECORDS.
      *
     C     $DUEIN        BEGSR
      *
      *
      * POSITION IN THE A/R DETAIL FILE USING THE VALUES FROM THE
      * A/R HEADER RECORD:
      *                    COMPANY NUMBER
      *                    INVOICE NUMBER
      *                    INVOICE SUFFIX
      *
      *
     C     KEY3          SETLL     ARBECPL1
      *
      *
      * PROCESS EACH A/R DETAIL RECORD FOR THE A/R HEADER RECORD THAT:
      *   1) DOES NOT HAVE AN ADJUSTMENT TYPE CODE OF ARM OR ARC
      *   2) HAS A G/L POST DATE THAT IS ON OR BEFORE THE CUTOFF DATE
      *
     C     *IN93         DOUEQ     *ON
     C     KEY3          READE     ARBECPL1                               93
     C     *IN93         IFEQ      *OFF
     C     BFUHCD        ANDNE     'ARM'
     C     BFUHCD        ANDNE     'ARC'
     C     BFHYDT        ANDLE     XXDT
     C********** BFHYDT    ANDNE0
     C     WKDUE         SUB       BFBSVA        WKDUE
     C                   ENDIF
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *--------------------------------------------------------------------
      * $DUECM - CALCULATE AMOUNT DUE FOR A/R HEADER RECORD AS OF CUTOFF
      *          DATE  (CREDIT MEMOS AND 'ON ACCOUNT' RECORDS ONLY)
      *--------------------------------------------------------------------
      *
      * NOW, CALCULATE THE REMAINING BALANCE FOR THIS A/R
      * HEADER RECORD AS OF THE CUTOFF DATE. BECAUSE THERE
      * IS NO TIE FROM THE A/R HEADER TO THE A/R DETAIL FILE
      * FOR CREDIT MEMOS AND 'ON ACCOUNT' RECORDS, WE USE VALUES
      * FROM THE A/R HEADER RECORD ITSELF FOR THE REMAINING BALANCE
      * DUE.
      *
      * IF THE 'PAID IN FULL DATE' IS AFTER THE USER'S CUTOFF DATE
      *   SET THE BALANCE DUE EQUAL TO THE 'TRANSACTION AMOUNT'
      * IF THE 'PAID IN FULL DATE' IS ON OR BEFORE THE USER'S CUTOFF DATE
      *   SET THE BALANCE DUE EQUAL TO THE 'REMAINING BALANCE DUE' VALUE
      *
     C     $DUECM        BEGSR
      *
     C     BDH4DT        IFGT      XXDT
     C                   Z-ADD     BDBSVA        WKDUE
     C                   ELSE
     C                   Z-ADD     BDBGVA        WKDUE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * $CUST - CUSTOMER INFO
      *-----------------------------------------------------------------
      *
     C     $CUST         BEGSR
      *
      *
      * COMPANY FROM COMPANY/CUSTOMER FILE
      *
     C                   Z-ADD     EOAIC3        $CAIC3
      *
      *
      * SET UP FIELDS USING DATA FROM CUSTOMER RECORD
      * THAT WAS READ IN THE MAINLINE ROUTINE
      *
      * A/R CUSTOMER NUMBER
      *
     C                   Z-ADD     SVANC7        $CANC7
      *
      * CUSTOMER NAME
     C                   MOVEL     BBAYTX        $CAYTX
      *
      * PARENT CUSTOMER NUMBER
      *
     C                   Z-ADD     BBBTC7        $CBTC7
      *
      * STATEMENT FREQUENCY
      *
     C                   MOVE      BBUNCS        $BUNCS
      *
      * CONCATENATE CITY/STATE
      *
     C                   EXSR      $CITY
      *
      *
      * ORDER ENTRY HOLD STATUS
      *
     C                   MOVEL     BBQNST        $CQNST
      *
      *
      * CALCULATE CUSTOMER'S MTD AVERAGE DAYS TO PAY =
      *     MTD DAYS PAID / MTD INVOICES PAID
      *
     C                   Z-ADD     BCADPM        $CADPM
     C                   Z-ADD     BCBTDY        $CBTDY
      *
     C     BCADPM        IFNE      0
     C     BCBTDY        DIV(H)    BCADPM        $CMADP
     C                   ENDIF
      *
      *
      * CALCULATE CUSTOMER'S YTD AVERAGE DAYS TO PAY =
      *     YTD DAYS PAID / YTD INVOICES PAID
      *
     C                   Z-ADD     BCVOVA        $CVOVA
     C                   Z-ADD     BCBUDY        $CBUDY
      *
     C     BCVOVA        IFNE      0
     C     BCBUDY        DIV(H)    BCVOVA        $CYADP
     C                   ENDIF
      *
      *
      * RETRIEVE NAME OF PARENT CUSTOMER & PARENT CREDIT LIMIT
      * (NOTE: BE CAREFUL WHERE YOU PLACE THIS LOGIC.
      *  SINCE THE RETRIEVAL OF THE PARENT CUSTOMER INFO
      *  WILL OVERLAY YOUR A/R CUSTOMER RECORD.)
      *
     C     BBBTC7        CHAIN     CABBREL1                           92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     BBAYTX        $CPNAM
      *
      * PARENT CREDIT LIMIT
      *
     C                   MOVEL     BBS2NB        $CS2NB
     C                   ENDIF
      *
      * WRITE THE CUSTOMER HEADINGS WORKFILE RECORD
      *
     C                   WRITE     $CREC
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * $CITY - CONCATENATE CITY/STATE TOGETHER
      *-----------------------------------------------------------------
      *
     C     $CITY         BEGSR
      *
      * NOTES:
      *   1) FOREIGN CUSTOMERS DO NOT HAVE STATE; THE STATE
      *      FIELD WILL HOLD A '.'  SO, DO NOT CONCATENATE
      *      WHEN STATE IS '.')
      *   2) SOMETIMES CITY IS ALSO A '.'  SO, DO NOT CONCATENATE
      *      WHEN CITY IS '.')
      *
     C                   MOVEL     BBAJNA        $CAJNA
     C                   MOVEL     BBBGCD        $CBGCD
      *
      * CHECK FOR STATE
      *
     C     BBBGCD        IFEQ      '. '
     C     BBBGCD        OREQ      ' .'
     C     BBBGCD        OREQ      *BLANK
     C                   MOVEL     NO            STFL
     C                   ELSE
     C                   MOVEL     YES           STFL
     C                   ENDIF
      *
      * CHECK FOR CITY
      *
     C                   MOVEL     BBAJNA        WKFLD
     C     BBAJNA        IFEQ      *BLANK
     C     WKFLD         OREQ      '.'
     C                   MOVEL     NO            CITYFL
     C                   ELSE
     C                   MOVEL     YES           CITYFL
     C                   ENDIF
      *
      *
     C                   SELECT
      *
      * NO CITY, NO STATE
      *
     C     CITYFL        WHENEQ    NO
     C     STFL          ANDEQ     NO
      *
      *
      * CITY AND STATE
      *
     C     CITYFL        WHENEQ    YES
     C     STFL          ANDEQ     YES
     C     BBAJNA        CAT(P)    ',':0         $CADDR
     C                   CAT       BBBGCD:1      $CADDR
      *
      *
      * CITY WITHOUT STATE
      *
     C     CITYFL        WHENEQ    YES
     C     STFL          ANDEQ     NO
     C                   MOVEL     BBAJNA        $CADDR
      *
      *
      * STATE WITHOUT CITY
      *
     C     CITYFL        WHENEQ    NO
     C     STFL          ANDEQ     YES
     C                   MOVEL     BBBGCD        $CADDR
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * $INV - PROCESS INVOICES FOR A CUSTOMER
      *-----------------------------------------------------------------
      *
     C     $INV          BEGSR
      *
      * FOR EACH A/R CUSTOMER, PROCESS EACH INVOICE THAT:
      *   1) DOES NOT HAVE A PURGE STATUS OF 'H'ISTORY
      *   2) HAS A TRANSACTION DATE ON OR BEFORE THE USER'S CUTOFF DATE
      *   3) HAS A BALANCE ON THE USER'S CUTOFF DATE
      *
      * POSITION ON: COMPANY
      *              CUSTOMER NUMBER
      *
      *
     C     KEY1          SETLL     ARBDCPL6
      *
     C     *IN91         DOUEQ     *ON
     C     KEY1          READE     ARBDCPL6                               91
     C     *IN91         IFEQ      *OFF
     C     BDE3ST        ANDNE     'H'
     C     BDB4DT        ANDLE     XXDT
      *
      * Conditionally include chargebacks. The user may elect to:
      *  1) include chargebacks with everything else
      *  2) omit charge backs
      *  3) only print chargebacks
      *
     C                   if        xxinclcb = yes or
     C                             (bdcest = 'CB' and xxinclcb = only) or
     C                             (bdcest <> 'CB' and xxinclcb = no)
      *
      * The user can also limit the report to up to 5 different Invoice Suffixes
      * Check for the users choices.
      *
     C                   move      no            goonfl
      *
     C                   select
     C                   when      xxsuffix1 = *blank and
     C                             xxsuffix2 = *blank and
     C                             xxsuffix3 = *blank and
     C                             xxsuffix4 = *blank and
     C                             xxsuffix5 = *blank
     C                   move      yes           goonfl
      *
     C                   when      bdcest = xxsuffix1 or
     C                             bdcest = xxsuffix2 or
     C                             bdcest = xxsuffix3 or
     C                             bdcest = xxsuffix4 or
     C                             bdcest = xxsuffix5
     C                   move      yes           goonfl
     C                   endsl
      *
      * If keep going
     C                   if        goonfl = yes
      *
      *
      * CLEAR FIELDS IN INVOICE WORKFILE RECORD
      *
     C                   CLEAR                   $IREC
      *
      * CALCULATE THE REMAINING BALANCE FOR THIS A/R
      * HEADER RECORD AS OF THE CUTOFF DATE. BECAUSE THERE
      * IS NO TIE FROM THE A/R HEADER TO THE A/R DETAIL FILE
      * FOR CREDIT MEMOS AND 'ON ACCOUNT' RECORDS, WE HAD TO
      * CREATE SEPARATE LOGIC TO CALCULATE THE REMAINING BALANCE
      * DUE.
      *
     C                   Z-ADD     0             WKDUE
      *
     C                   SELECT
     C     BDCEST        WHENEQ    'IN'
     C     BDCEST        OREQ      'DM'
     C     BDCEST        OREQ      'CB'
     C                   Z-ADD     BDBSVA        WKDUE
     C                   EXSR      $DUEIN
      *
     C     BDCEST        WHENEQ    'CM'
     C     BDCEST        OREQ      'OA'
     C                   EXSR      $DUECM
     C                   ENDSL
      *
      *
     C     WKDUE         IFNE      0
      *
      * SET UP INVOICE FIELDS:
      *   1) INVOICE NUMBER
      *   2) INVOICE SUFFIX
      *   3) ORDER NUMBER REFERENCE
      *   4) TRANSACTION DATE
      *   5) COMPANY NUMBER
      *   5) SALESPERSON CODE
      *
     C                   Z-ADD     BDANC7        $IANC7
     C                   Z-ADD     BDCONB        $ICONB
     C                   MOVEL     BDCEST        $ICEST
     C                   Z-ADD     BDCAC7        $ICAC7
     C                   Z-ADD     BDB4DT        $IB4DT
     C                   Z-ADD     BDAIC3        $IAIC3
     C                   MOVE      BDBCCD        $IBCCD
      *
      *
      * FLIP DUE DATE TO MMDDYY FORMAT
      *
      *
     C                   Z-ADD     BDATDT        $IATDT
     C                   Z-ADD     BDATDT        WKOMDT
     C                   EXSR      $ADDCC
     C                   Z-ADD     WKCYMD        PFRM8
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'MDY '        PTOFMT
     C                   MOVE      *BLANK        PCODE
     C                   Z-ADD     0             PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          $IDUDT
     C                   ELSE
     C                   Z-ADD     0             $IDUDT
     C                   ENDIF
      *
      *
      * RETRIEVE CUSTOMER'S PURCHASE ORDER NUMBER USING
      * COMPANY NUMBER/ORDER NUMBER
      *
      *
     C     KEY2          CHAIN     OPBFCPLW                           92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     BEBCNA        $IBCNA
     C                   ENDIF
      *
      *
      * FOR INVOICES, DEBIT MEMOS AND CHARGEBACKS
      *   1) CALCULATE AGING RANGES
      *   2) PLOP BALANCE DUE INTO THE APPROPRIATE RANGE
      *   3) FOR CHARGEBACKS, GO GET COMMENT
      *
     C                   SELECT
     C     BDCEST        WHENEQ    'IN'
     C     BDCEST        OREQ      'DM'
     C     BDCEST        OREQ      'CB'
     C                   EXSR      $RANGE
     C                   EXSR      $PLOP
      *
     C                   IF        BDCEST = 'CB'
     C                   EXSR      $COMMENT
     C                   ENDIF
      *
      *
      * FOR CREDIT MEMOS AND ON-ACCOUNT RECORDS,
      * DUMP DOLLARS IN CREDIT MEMO/ON ACCOUNT COLUMN AND
      * REVERSE THE SIGN (FORCE THE VALUES TO BE NEGATIVE FOR PRINTING.)
      *
     C     BDCEST        WHENEQ    'CM'
     C     BDCEST        OREQ      'OA'
     C     0             SUB       WKDUE         $IOAAM
     C                   ENDSL
      *
      *
      * ACCUMULATE VALUES FOR CUSTOMER TOTALS
      *
     C                   ADD       $IC1AM        $TC1AM
     C                   ADD       $IC2AM        $TC2AM
     C                   ADD       $IC3AM        $TC3AM
     C                   ADD       $IC4AM        $TC4AM
     C                   ADD       $IC5AM        $TC5AM
     C                   ADD       $IC6AM        $TC6AM
     C                   ADD       $IOAAM        $TOAAM
      *
      *
      * WRITE THE INVOICE WORKFILE RECORD
      *
     C                   WRITE     $IREC
     C                   ENDIF
      *
     C                   ENDIF
     C                   ENDIF
     C                   ENDIF
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * $RANGE - CALCULATE AGING RANGES FOR AN INVOICE
      *-----------------------------------------------------------------
      *
     C     $RANGE        BEGSR
      *
      * DETERMINE WHICH DATE IN THE INVOICE RECORD TO USE FOR AGING
      * AND PUT THAT DATE IN STANDARD CCYYMMDD FORMAT.  YOU WILL
      * AGE ON THE 'DUE DATE' OR THE 'TRANSACTION DATE' DEPENDING ON
      * THE A/R CONTROL VALUE THAT HAS BEEN SET FOR THE SYSTEM
      * AND RETRIEVED IN THE INITIALIZATION ROUTINE.
      *
      *
     C                   SELECT
     C     $REUST        WHENEQ    'D'
     C                   Z-ADD     BDATDT        WKOMDT
     C                   OTHER
     C                   Z-ADD     BDB4DT        WKOMDT
     C                   ENDSL
      *
      *
      * ADD CENTURY VALUES TO THE SYNON DATE TO GET IT INTO
      * A STANDARD FORMAT.
      *
     C                   EXSR      $ADDCC
     C                   Z-ADD     WKCYMD        SVCYMD
      *
      *
      * SET UP FOR CALL TO DATE UTILITY TO RETRIEVE DATE RANGES
      * FOR AGING COLUMNS.
      *
     C                   Z-ADD     SVCYMD        PFRM8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
      *
      * COLUMN 1 IS THE 'CURRENT' COLUMN; NO DATE RANGE IS REQUIRED.
      *
      *
      * DETERMINE THE DATE RANGE FOR AGING COLUMN 2
      *
     C                   Z-ADD     0             WK2FR
     C                   Z-ADD     0             WK2TO
      *      FROM DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R2FR         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK2FR
     C                   ENDIF
      *
      *      TO DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R2TO         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK2TO
     C                   ENDIF
      *
      * DETERMINE THE DATE RANGE FOR AGING COLUMN 3
      *
     C                   Z-ADD     0             WK3FR
     C                   Z-ADD     0             WK3TO
      *      FROM DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R3FR         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK3FR
     C                   ENDIF
      *
      *      TO DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R3TO         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK3TO
     C                   ENDIF
      *
      * DETERMINE THE DATE RANGE FOR AGING COLUMN 4
      *
     C                   Z-ADD     0             WK4FR
     C                   Z-ADD     0             WK4TO
      *      FROM DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R4FR         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK4FR
     C                   ENDIF
      *
      *      TO DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R4TO         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK4TO
     C                   ENDIF
      *
      * DETERMINE THE DATE RANGE FOR AGING COLUMN 5
      *
     C                   Z-ADD     0             WK5FR
     C                   Z-ADD     0             WK5TO
      *      FROM DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R5FR         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK5FR
     C                   ENDIF
      *
      *      TO DATE
     C                   MOVEL     'I'           PCODE
     C                   Z-ADD     $R5TO         PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          WK5TO
     C                   ENDIF
      *
      * NO DATE RANGE IS REQUIRED FOR THE 'OVER' COLUMN. THE
      * LOGIC WILL USE THE 'TO' DATE FROM COLUMN 5 FOR ITS
      * COMPARISONS.
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $PLOP - PLOP BALANCE DUE INTO THE APPROPRIATE COLUMN ON REPORT
      *----------------------------------------------------------------
      *
     C     $PLOP         BEGSR
      *
      * THE VALUE IN WKAGDT WILL BE THE DATE THAT IS BEING USED AS THE
      * COMPARISON OR CUT-OFF DATE FOR AGING. IN THIS CASE, IT IS
      * SET UP IN THIS WORK FIELD IN THE INITIALIZATION ROUTINE.
      *
      * THE VALUE IN SVCYMD IS EITHER A) THE DUE DATE OR B)
      * THE TRANSACTION DATE OF THE INVOICE BEING PROCESSED
      *
     C                   SELECT
      *
      * CURRENT COLUMN
      *
     C     SVCYMD        WHENGE    WKAGDT
     C                   Z-ADD     WKDUE         $IC1AM
      *
      * COLUMN 2
     C     WKAGDT        WHENGE    WK2FR
     C     WKAGDT        ANDLE     WK2TO
     C                   Z-ADD     WKDUE         $IC2AM
      *
      * COLUMN 3
     C     WKAGDT        WHENGE    WK3FR
     C     WKAGDT        ANDLE     WK3TO
     C                   Z-ADD     WKDUE         $IC3AM
      *
      * COLUMN 4
      *
     C     WKAGDT        WHENGE    WK4FR
     C     WKAGDT        ANDLE     WK4TO
     C                   Z-ADD     WKDUE         $IC4AM
      *
      * COLUMN 5
      *
     C     WKAGDT        WHENGE    WK5FR
     C     WKAGDT        ANDLE     WK5TO
     C                   Z-ADD     WKDUE         $IC5AM
      *
      * THE 'OVER' COLUMN
      *
     C     WKAGDT        WHENGT    WK5TO
     C                   Z-ADD     WKDUE         $IC6AM
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * Retrieve Chargeback Comment
      *----------------------------------------------------------------
      *
     C     $comment      begsr
      *
     C     bdconb        mult      .1            wkconb
     C     key4          setll     arbecpl1
      *
     C                   dou       *in92 = *on or $ngna <> *blank
     C     key4          reade     arbecpl1                               92
     C                   if        *in92 = *off and
     C                             (bfuhcd = 'CB ' or bfuhcd = 'ACB') and
     C                             bdbgva = bfbsva
     C                   move      bfngna        $ngna
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $TOTC - WRITE TOTAL LINES FOR THE CUSTOMER
      *----------------------------------------------------------------
      *
     C     $TOTC         BEGSR
      *
     C                   Z-ADD     $CAIC3        $TAIC3
     C                   Z-ADD     $CANC7        $TANC7
      *
      * WRITE THE FIRST CUSTOMER TOTAL LINE
      *
     C                   Z-ADD     1             $TLINE
     C                   MOVEL(P)  T1DESC        $TDESC
     C                   WRITE     $TREC
      *
      * IT IS POSSIBLE THAT AN AGING COLUMN MAY HAVE A NEGATIVE BALANCE.
      * IF ANY COLUMN (EXCEPT THE CURRENT COLUMN) HAS A NEGATIVE BALANCE,
      * DUMP THE NEGATIVE BALANCE INTO THE PRECEDING COLUMN.
      *
     C     $TC6AM        IFLT      0
     C                   ADD       $TC6AM        $TC5AM
     C                   Z-ADD     0             $TC6AM
     C                   ENDIF
      *
     C     $TC5AM        IFLT      0
     C                   ADD       $TC5AM        $TC4AM
     C                   Z-ADD     0             $TC5AM
     C                   ENDIF
      *
     C     $TC4AM        IFLT      0
     C                   ADD       $TC4AM        $TC3AM
     C                   Z-ADD     0             $TC4AM
     C                   ENDIF
      *
     C     $TC3AM        IFLT      0
     C                   ADD       $TC3AM        $TC2AM
     C                   Z-ADD     0             $TC3AM
     C                   ENDIF
      *
      * NOW, YOU MUST ALSO DUMP THE TOTAL CREDIT MEMO AMOUNT INTO
      * THE OLDEST OVERDUE COLUMN.  IF THERE ARE NO OVERDUE VALUES,
      * DUMP IT INTO THE 'CURRENT' COLUMN.
      *
      * FLIP THE SIGN OF THE CREDIT MEMO TOTAL VALUE BACK TO WHAT IT WAS
      * (IT HAS ALREADY BEEN FLIPPED FOR PRINTING; BUT WE NEED IT UNFLIPPED
      * FOR THIS LOGIC)
      *
     C     0             SUB       $TOAAM        WKDUE
     C                   EXSR      $APPLY
      *
      *
      * ACCUMULATE CUSTOMER TOTALS INTO REPORT TOTAL FIELDS
      *
     C                   ADD       $TC1AM        $RC1AM
     C                   ADD       $TC2AM        $RC2AM
     C                   ADD       $TC3AM        $RC3AM
     C                   ADD       $TC4AM        $RC4AM
     C                   ADD       $TC5AM        $RC5AM
     C                   ADD       $TC6AM        $RC6AM
      *
      * CALCULATE TOTAL DUE FOR CUSTOMER
      *
     C     $TC1AM        ADD       $TC2AM        $TDAM
     C                   ADD       $TC3AM        $TDAM
     C                   ADD       $TC4AM        $TDAM
     C                   ADD       $TC5AM        $TDAM
     C                   ADD       $TC6AM        $TDAM
      *
      *
      * WRITE 'APPLIED CREDIT' RECORD FOR CUSTOMER
      *
     C                   Z-ADD     2             $TLINE
     C                   MOVEL(P)  T2DESC        $TDESC
     C                   WRITE     $TREC
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $APPLY - DUMP CREDIT MEMOS INTO COLUMNS WITH OVERDUE BALANCES
      *----------------------------------------------------------------
      *
     C     $APPLY        BEGSR
      *
      *
      * CHECK COLUMN 6 FOR APPLICATION OF CREDIT
      *
     C     WKDUE         IFGT      0
     C     WKDUE         IFGT      $TC6AM
     C     WKDUE         SUB       $TC6AM        WKDUE
     C                   Z-ADD     0             $TC6AM
     C                   ELSE
     C     $TC6AM        SUB       WKDUE         $TC6AM
     C                   Z-ADD     0             WKDUE
     C                   ENDIF
     C                   ENDIF
      *
      *
      * CHECK COLUMN 5 FOR APPLICATION OF CREDIT
      *
     C     WKDUE         IFGT      0
     C     WKDUE         IFGT      $TC5AM
     C     WKDUE         SUB       $TC5AM        WKDUE
     C                   Z-ADD     0             $TC5AM
     C                   ELSE
     C     $TC5AM        SUB       WKDUE         $TC5AM
     C                   Z-ADD     0             WKDUE
     C                   ENDIF
     C                   ENDIF
      *
      *
      * CHECK COLUMN 4 FOR APPLICATION OF CREDIT
      *
     C     WKDUE         IFGT      0
     C     WKDUE         IFGT      $TC4AM
     C     WKDUE         SUB       $TC4AM        WKDUE
     C                   Z-ADD     0             $TC4AM
     C                   ELSE
     C     $TC4AM        SUB       WKDUE         $TC4AM
     C                   Z-ADD     0             WKDUE
     C                   ENDIF
     C                   ENDIF
      *
      *
      * CHECK COLUMN 3 FOR APPLICATION OF CREDIT
      *
      *
     C     WKDUE         IFGT      0
     C     WKDUE         IFGT      $TC3AM
     C     WKDUE         SUB       $TC3AM        WKDUE
     C                   Z-ADD     0             $TC3AM
     C                   ELSE
     C     $TC3AM        SUB       WKDUE         $TC3AM
     C                   Z-ADD     0             WKDUE
     C                   ENDIF
     C                   ENDIF
      *
      *
      * CHECK COLUMN 2 FOR APPLICATION OF CREDIT
      *
      *
     C     WKDUE         IFGT      0
     C     WKDUE         IFGT      $TC2AM
     C     WKDUE         SUB       $TC2AM        WKDUE
     C                   Z-ADD     0             $TC2AM
     C                   ELSE
     C     $TC2AM        SUB       WKDUE         $TC2AM
     C                   Z-ADD     0             WKDUE
     C                   ENDIF
     C                   ENDIF
      *
      *
      * IF ANY CREDIT IS LEFT TO APPLY, DUMP IT IN COLUMN 1
      *
     C     WKDUE         IFGT      0
     C     $TC1AM        SUB       WKDUE         $TC1AM
     C                   ENDIF
      *
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      *----------------------------------------------------------------
      *
     C     $DATE         BEGSR
      *
     C                   MOVE      *BLANK        PRTRN
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *------------------------------------------------------------------
      * $ADDCC - ADD CENTURY TO A SYNON DATE
      *------------------------------------------------------------------
      *
     C     $ADDCC        BEGSR
      *
      * SYNON HOLDS DATES AS A 7,0 NUMERIC FIELD WHERE THE
      * LEADING DIGIT IS 0 OR 1.
      *             0 = 19TH CENTURY
      *             1 = 20TH CENTURY
      *
      * I WANT TO USE THE STANDARD DATE ROUTINE WHICH USES AN 8,0
      * FORMAT. SO, TURN THE 7,0 DATE FIELD INTO AN 8,0 DATE.
      *
     C                   Z-ADD     0             WKCYMD
      *
     C                   SELECT
     C     OMSC          WHENEQ    0
     C                   Z-ADD     19            WKCEN
     C     OMSC          WHENEQ    1
     C                   Z-ADD     20            WKCEN
     C                   ENDSL
      *
     C                   Z-ADD     OMSYY         WKYER
     C                   Z-ADD     OMSMM         WKMON
     C                   Z-ADD     OMSDD         WKDAY
      *
     C                   ENDSR
      /EJECT
      *------------------------------------------------------------------
      * $ROUTE - PROCESS CUSTOMER TOTAL RECORDS TO GET SALES ROUTE TOTALS
      *------------------------------------------------------------------
      *
      * PROCESS EACH CUSTOMER TOTAL LINE '2' WHICH HOLDS THE TOTAL
      * AFTER CREDITS ARE APPLIED.
      *
      *
     C     $ROUTE        BEGSR
      *
     C     *LOVAL        SETLL     ARL302A
      *
     C     *IN90         DOUEQ     *ON
     C                   READ      ARL302A                                90
     C     *IN90         IFEQ      *OFF
     C     $TLINE        ANDEQ     2
      *
     C     FIRSTS        IFEQ      YES
     C                   MOVEL     NO            FIRSTS
     C                   MOVEL     $TAIC3        SVAIC3
     C                   MOVEL     $TR4CD        SVR4CD
     C                   ENDIF
      *
      * BREAK LOGIC:
      *    WHEN YOU BREAK ON COMPANY OR SALES ROUTE,
      *    CALCULATE PERCENTS AND WRITE SALES ROUTE TOTAL RECORD
      *
     C     $TAIC3        IFNE      SVAIC3
     C     $TR4CD        ORNE      SVR4CD
     C                   EXSR      $TOTS
     C                   ENDIF
      *
      * DETAIL PROCESSING:
      *           ACCUMULATE CUSTOMER TOTALS INTO SALES ROUTE TOTALS
      *
     C                   ADD       $TC1AM        $SC1AM
     C                   ADD       $TC2AM        $SC2AM
     C                   ADD       $TC3AM        $SC3AM
     C                   ADD       $TC4AM        $SC4AM
     C                   ADD       $TC5AM        $SC5AM
     C                   ADD       $TC6AM        $SC6AM
     C                   ADD       $TDAM         $SDAM
      *
     C                   ENDIF
     C                   ENDDO
      *
      * WRITE OUT LAST SALES ROUTE TOTAL RECORD
      *
     C     FIRSTS        IFEQ      NO
     C                   EXSR      $TOTS
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *------------------------------------------------------------------
      * $TOTS - CALCULATE PERCENTS FOR SALES ROUTE TOTAL LINE
      *------------------------------------------------------------------
      *
     C     $TOTS         BEGSR
      *
     C                   Z-ADD     SVAIC3        $SAIC3
     C                   MOVEL     SVR4CD        $SR4CD
      *
      * PERCENT OF TOTAL FOR CURRENT COLUMN 1
      *
     C     $SDAM         IFNE      0
     C     $SC1AM        DIV(H)    $SDAM         WKPER
     C     WKPER         MULT(H)   100           $SC1PC
     C                   END
      *
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 2
      *
     C     $SDAM         IFNE      0
     C     $SC2AM        DIV(H)    $SDAM         WKPER
     C     WKPER         MULT(H)   100           $SC2PC
     C                   ENDIF
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 3
      *
     C     $SDAM         IFNE      0
     C     $SC3AM        DIV(H)    $SDAM         WKPER
     C     WKPER         MULT(H)   100           $SC3PC
     C                   ENDIF
      *
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 4
      *
     C     $SDAM         IFNE      0
     C     $SC4AM        DIV(H)    $SDAM         WKPER
     C     WKPER         MULT(H)   100           $SC4PC
     C                   ENDIF
      *
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 5
      *
     C     $SDAM         IFNE      0
     C     $SC5AM        DIV(H)    $SDAM         WKPER
     C     WKPER         MULT(H)   100           $SC5PC
     C                   ENDIF
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 6
      *
     C     $SDAM         IFNE      0
     C     $SC6AM        DIV(H)    $SDAM         WKPER
     C     WKPER         MULT(H)   100           $SC6PC
     C                   ENDIF
      *
      *
      * WRITE SALES ROUTE TOTAL RECORD
      *
     C                   WRITE     $SREC
      *
      *
      * CLEAR SALES ROUTE WORKFILE FIELDS
      *
     C                   CLEAR                   $SREC
      *
      *
      * SAVE CONTROL BREAK FIELD VALUES
      *
     C                   MOVEL     $TAIC3        SVAIC3
     C                   MOVEL     $TR4CD        SVR4CD
      *
     C                   ENDSR
      /EJECT
      *------------------------------------------------------------------
      * $TOTR - CALCULATE PERCENTS FOR REPORT TOTAL LINE
      *------------------------------------------------------------------
      *
     C     $TOTR         BEGSR
      *
      * ACCUMULATE COLUMN DOLLARS INTO TOTAL DOLLARS FOR THE
      * 'CREDIT MEMO/ON ACCOUNT' COLUMN
      *
     C     $RC1AM        ADD       $RC2AM        $RDAM
     C                   ADD       $RC3AM        $RDAM
     C                   ADD       $RC4AM        $RDAM
     C                   ADD       $RC5AM        $RDAM
     C                   ADD       $RC6AM        $RDAM
      *
      *
      * PERCENT OF TOTAL FOR CURRENT COLUMN 1
      *
     C     $RDAM         IFNE      0
     C     $RC1AM        DIV(H)    $RDAM         WKPER
     C     WKPER         MULT(H)   100           $RC1PC
     C                   END
      *
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 2
      *
     C     $RDAM         IFNE      0
     C     $RC2AM        DIV(H)    $RDAM         WKPER
     C     WKPER         MULT(H)   100           $RC2PC
     C                   ENDIF
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 3
      *
     C     $RDAM         IFNE      0
     C     $RC3AM        DIV(H)    $RDAM         WKPER
     C     WKPER         MULT(H)   100           $RC3PC
     C                   ENDIF
      *
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 4
      *
     C     $RDAM         IFNE      0
     C     $RC4AM        DIV(H)    $RDAM         WKPER
     C     WKPER         MULT(H)   100           $RC4PC
     C                   ENDIF
      *
      *
      * PERCENT OF TOTAL FOR AGING COLUMN 5
      *
     C     $RDAM         IFNE      0
     C     $RC5AM        DIV(H)    $RDAM         WKPER
     C     WKPER         MULT(H)   100           $RC5PC
     C                   ENDIF
      *
      * PERCENT OF TOTAL FOR 'OVER' AGING COLUMN
      *
     C     $RDAM         IFNE      0
     C     $RC6AM        DIV(H)    $RDAM         WKPER
     C     WKPER         MULT(H)   100           $RC6PC
     C                   ENDIF
      *
      *
      *  WRITE REPORT TOTAL RECORD
      *
     C                   WRITE     $RREC
      *
     C                   ENDSR
      /EJECT
      *------------------------------------------------------------------
      * $ARCTL - RETRIEVE A/R AGING CONTROL INFO FOR COMPANY
      *------------------------------------------------------------------
      *
     C     $ARCTL        BEGSR
      *
      *
      * ACCESS THE COMPANY CONTROL FILE FOR THE COMPANY BEING PROCESSED
      *
      *
     C     XXAIC3        CHAIN     CAASREL2                           92
     C     *IN92         IFEQ      *ON
     C                   MOVEL     NO            PROCFL
     C                   ELSE
      *
      * SET UP FIELD INDICATING WHETHER TO AGE BY TRANSACTION
      * DATE OR DUE DATE
      *
     C                   MOVEL     ASEUST        $REUST
      *
      * SET UP THE COLUMN HEADING VALUES FOR THE 'FROM-TO'
      * AGING DAYS IN THE REPORT WORKFILE RECORD.
      *
      * COLUMN 1 IS THE 'CURRENT' COLUMN
      *
      * COLUMN 2 FROM/TO  DAYS
     C                   Z-ADD     1             $R2FR
     C                   Z-ADD     ASAEDY        $R2TO
      *
      * COLUMN 3 FROM/TO DAYS
      *
     C     $R2TO         ADD       1             $R3FR
     C                   Z-ADD     ASAFDY        $R3TO
      *
      * COLUMN 4 FROM/TO DAYS
      *
     C     $R3TO         ADD       1             $R4FR
     C                   Z-ADD     ASAGDY        $R4TO
      *
      * COLUMN 5 FROM/TO DAYS
      *
     C     $R4TO         ADD       1             $R5FR
     C                   Z-ADD     ASAHDY        $R5TO
     C                   ENDIF
      *
      * COLUMN 6 IS THE 'OVER' COLUMN; IT IS ANYTHING OVER
      * COLUMN 5.
      *
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * $SALES - CHECK SALES TYPE, SALES ROUTE AND GET CREDIT INFO
      *-----------------------------------------------------------------
      *
      * 1) OMIT CUSTOMERS WITH A STATUS OF 'DELETED' OR 'INACTIVE' WHEN
      *    THE USER HAS SUBMITTED THE REPORT WITH 'YES' FOR 'PRINT ZERO
      *    BALANCES'.
      *
      * 2) CHECK THE SALES ROUTE AGAINST THE SALES ROUTE SELECTED BY
      *    THE USER.
      *
      * 3) RETRIEVE CUSTOMER CREDIT CONTACT INFO
      *      CREDIT CONTACT NAME
      *      CREDIT CONTACT TELEPHONE
      *      CREDIT CONTACT FAX NUMBER
      *
      *
     C     $SALES        BEGSR
      *
      *
     C     KEY1          CHAIN     CAEOREL1                           92
      *
     C                   SELECT
     C     *IN92         WHENEQ    *ON
     C                   MOVEL     NO            PROCFL
     C                   OTHER
      *
      * OMIT DELETED/INACTIVE CUSTOMERS WHEN USER HAS
      * SUBMITTED REPORT WITH 'PRINT ZERO BALANCES' AS YES
      *
     C     XX0BAL        IFEQ      YES
     C     EOVSST        IFEQ      'D'
     C     EOVSST        OREQ      'I'
     C                   MOVEL     NO            PROCFL
     C                   ENDIF
     C                   ENDIF
      *
      *
      * CHECK SALES ROUTE
      *
     C                   SELECT
     C     PROCFL        WHENEQ    NO
      *
     C     XXR4CD        WHENNE    *BLANK
     C     XXR4CD        ANDNE     EOR4CD
     C                   MOVEL     NO            PROCFL
     C                   OTHER
      *
     C                   MOVEL     EOR4CD        $CR4CD
     C                   MOVEL     EOR4CD        $TR4CD
     C     EOR4CD        CHAIN     PDJEREL1                           92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     JEMZNA        $CMZNA
     C                   ENDIF
     C                   ENDSL
      *
      *
      * SET UP CREDIT CONTACT INFO
      *
     C     PROCFL        IFEQ      YES
     C                   MOVEL     EONJNA        $CNJNA
     C                   MOVEL     EOI0TX        $CI0TX
     C                   MOVEL     EOI1TX        $CI1TX
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * PARMS
      *
     C     *ENTRY        PLIST
      *
      * INPUT
     C                   PARM                    XXAIC3
     C                   PARM                    XXDT              7 0
     C                   PARM                    XXANC7            7 0
     C                   PARM                    XXBTC7            7 0
     C                   PARM                    XXR4CD
     C                   PARM                    XX0BAL            1
     C                   PARM                    XXRPT             1
     C                   PARM                    XXINCLCB          1
     C                   PARM                    XXSUFFIX1         2
     C                   PARM                    XXSUFFIX2         2
     C                   PARM                    XXSUFFIX3         2
     C                   PARM                    XXSUFFIX4         2
     C                   PARM                    XXSUFFIX5         2
      *
     C     *LIKE         DEFINE    ABAIC3        XXAIC3
     C     *LIKE         DEFINE    JER4CD        XXR4CD
      *
      * KEY LISTS
      *
     C     KEY1          KLIST
     C                   KFLD                    XXAIC3
     C                   KFLD                    SVANC7            7 0
      *
      *
     C     KEY2          KLIST
     C                   KFLD                    XXAIC3
     C                   KFLD                    BDCAC7
      *
      *
     C     KEY3          KLIST
     C                   KFLD                    BDAIC3
     C                   KFLD                    BDCONB
     C                   KFLD                    BDCEST
      *
      *
     C     KEY4          KLIST
     C                   KFLD                    BDAIC3
     C                   KFLD                    WKCONB            7 0
     C                   KFLD                    WKCEST            2
      *
     C                   MOVE      'IN'          WKCEST            2
      *
      * FIELDS TO CONTROL PROCESSING
      *
     C                   MOVEL     YES           FIRST             1
     C                   MOVEL     YES           FIRSTS            1
     C                   MOVEL     YES           PROCFL            1
     C                   MOVEL     YES           GOONFL            1
     C                   MOVE      *BLANK        CITYFL            1
     C                   MOVE      *BLANK        STFL              1
      *
     C                   Z-ADD     0             SVCYMD            8 0
     C     *LIKE         DEFINE    $TAIC3        SVAIC3
     C     *LIKE         DEFINE    $TR4CD        SVR4CD
      *
      * WORKFIELDS
      *
     C                   Z-ADD     0             WKDUE            15 2
     C                   Z-ADD     0             WKPER            15 6
     C                   Z-ADD     0             WKAGDT            8 0
     C                   MOVE      *BLANK        WKFLD             1
      *
      * DATE RANGES FOR AGING COLUMNS
      *
     C     *LIKE         DEFINE    WKAGDT        WK2FR
     C     *LIKE         DEFINE    WKAGDT        WK2TO
     C     *LIKE         DEFINE    WKAGDT        WK3FR
     C     *LIKE         DEFINE    WKAGDT        WK3TO
     C     *LIKE         DEFINE    WKAGDT        WK4FR
     C     *LIKE         DEFINE    WKAGDT        WK4TO
     C     *LIKE         DEFINE    WKAGDT        WK5FR
     C     *LIKE         DEFINE    WKAGDT        WK5TO
      *
      *
      *
      * THE USER'S CUTOFF DATE (IN FORMAT CCYYMMDD) WILL BE USED
      * FOR AGING. YOU MUST:
      *   1) ADD CENTURY VALUES TO THE 7,0 SYNON DATE
      *   2) FLIP THE DATE TO MMDDY FORMAT FOR PRINTING IN SUBSEQUENT
      *      REPORTS.
      *
     C                   Z-ADD     XXDT          WKOMDT
     C                   EXSR      $ADDCC
     C                   Z-ADD     WKCYMD        WKAGDT
      *
     C                   Z-ADD     WKCYMD        PFRM8
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'MDY '        PTOFMT
     C                   MOVE      *BLANK        PCODE
     C                   Z-ADD     0             PDAYS
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK
     C                   Z-ADD     PTO8          $RCMDY
     C                   ELSE
     C                   Z-ADD     0             $RCMDY
     C                   ENDIF
      *
      *
      * RETRIEVE COMPANY NAME
      *
     C     XXAIC3        CHAIN     CAABREL3                           92
     C     *IN92         IFEQ      *ON
     C                   MOVEL     NO            PROCFL
     C                   ELSE
      *
     C                   MOVEL     ABADTX        $RADTX
     C                   Z-ADD     XXAIC3        $RAIC3
     C                   ENDIF
      *
      * RETRIEVE THE A/R AGING CONTROL DATA FOR THE COMPANY
      *
     C                   EXSR      $ARCTL
      *
     C                   ENDSR
      *
      * this subroutine performs date conversions. PFRM8 must be populated
      * with input date..
      *
     C     $DATE         BEGSR
      *
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'CYMD'        PFRFMT
     C                   MOVEL     'JUL '        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
      *
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
