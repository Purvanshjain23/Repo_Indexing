      *These two lines here to aid in debugging when needed***************
     H debug(*yes)
     H option(*srcstmt:*nodebugio)
      * SYSTEM:      Hog Production
      * PROGRAM:     HP1002
      * TITLE:       Revise Targets for BGF Target Table/Year
      * PROGRAMMER:  Sharon Zurn
      * CREATED:     08/30/06
      *
      * FUNCTION: This is an edit record function to revise target values for a
      *           table/year.
      *
      *           The function requires 2 screens to contain all of the data entry
      *           fields. Therefore, the standard subroutines have been altered
      *           slightly to accommodate navigation.
      *
      *           The field 'mode' contains the value passed into
      *           this program from the calling program.  The field
      *           'd1mode' is the screen field that displays the
      *           value of 'mode'.  Mode will be CREATE, REVISE or
      *           DELETE.           Once in the program, mode and
      *           d1mode will never change.  However, the action
      *           being performed can change depending on the function
      *           keys the user takes.
      *
      *           Restrictors:
      *                Target table
      *                Year
      *
      *           Positioners:
      *                None
      *
      *           Selectors:
      *                None
      *
      *           NOTE: A single record is deleted by blanking out the entry fields
      *                 on the subfile line. All target records for a table can be
      *                 deleted with F11=Delete.
      *
      *                 No file updates occur until the user takes
      *                 F9-Accept when creating or revising records.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      *
      * 09/25/07  LeAnne Ramsey
      *           Cleaned up code.
      *
      * 11/06/08  LeAnne Ramsey
      *           Added 3 new fields to HSP096-BGF Yearly Targets:
      *            1) open gilt pool eligible
      *            2) litters farrowed/mated female/year
      *            3) pigs weaned/mated female/year
      *
      * 05/28/09  LeAnne Ramsey
      *           Added 1 new field to HSP096-BGF Yearly Targets:
      *            1) farrowing crates
      *
      * 09/24/09  LeAnne Ramsey
      *           Removed the check on Screen 1 that required a value in the
      *           Female Weekly Inv Head.  We ONLY had this in the code to keep the
      *           user on the screen when they entered a Year in the Control Record and
      *           pressed ENTER before entering any subfile data. This worked since they
      *           always entered some Inventory Head. BUT, now they are going to be
      *           entering targets for DUMMY farms...which do not have Head. So, I
      *           removed the check for Inventory Head.
      *
      * 11/10/10  LeAnne Ramsey (E1151)
      *           Recompile only. Increased some head fields from 5,0 to 6,0:
      *              Total pigs weaned
      *              Total born head
      *              Total born gilt head
      *              Total born alive
      *              Total pigs received at NUR
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1002   cf   e             workstn infds(iofeed)
      *
      *
     Fhsl096b   uf   e           k disk    rename(byrec:byrecb)
      *    BGF yearly targets
      *
      *
     Fhsp096    uf a e           k disk
      *    BGF yearly target
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D update          c                   'UPDATE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set             c                   'SET   '
     D scrn1           c                   'SCRN1 '
     D scrn2           c                   'SCRN2 '
     D scrn3           c                   'SCRN3 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
     D notflg          s              1    inz('Y')
      *
      *
      *
      * Control/flag fields
      *
      *
      * Parm fields
      *
     D xxttbcd         s                   like(d1ttbcd)
     D xxttbds         s                   like(d1ttbds)
      *
     D xxreturn        s              7a
      *
     D xxjulian        s              5  0
     D xxcyymmdd       s              7  0
      *
     D xxhpscdyr       s              4  0
     D xxhpscdwk       s              2  0
     D xxhpspicdt      s              5  0
      *
     D xxcdqr          s                   like(bycdqr)
     D xxcdyr          s              4  0
     D xxcdwk          s              2  0
     D xxday           s              1a
      *
     D xxacyr          s              4  0
     D xxacpe          s              2  0
     D xxacwk          s              2  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set           $set
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     scrn2         $scrn2
     C     routne        caseq     scrn3         $scrn3
     C     routne        caseq     update        $update
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for all screens
      *----------------------------------------------------------------
      *
     C     $set          begsr
      *
      * If the user is in CREATE mode, clear the fields on all 3 screens
      *
     C                   select                                                 Main select
     C                   when      mode = create
     C                   exsr      $clear
     C                   move      yes           notflg
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * records using the parms passed in.  Do not lock the records.
      * Typically, in DELETE mode these retrieved values will not be
      * displayed. However, if there is an error on the delete action
      * the panel will be displayed.
      *
     C                   when      mode = revise or mode = delete
      *
     C     key01         setll     hsp096
     C                   dou       *in91 = *on                                  Do 4 qtrs
     C     key01         reade(n)  hsp096                                 91
     C                   if        *in91 = *off                                 If not eof
     C                   move      no            notflg
      *
      * Quarter 1
     C                   select
     C                   when      bycdqr  = 1
      *        Screen 1
     C                   z-add     byfwinhd      d1fwinhd1
     C                   z-add     byopglhd      d1opglhd1
     C                   z-add     byglsv        d1glsv1
     C                   z-add     bytosv        d1tosv1
     C                   z-add     bycrpr        d1crpr1
     C                   z-add     byprhd        d1prhd1
     C                   z-add     byfopr        d1fopr1
     C                   z-add     byaborpr      d1aborpr1
     C                   z-add     byfrpr        d1frpr1
     C                   z-add     byglfart      d1glfart1
     C                   z-add     bytolt        d1tolt1
     C                   z-add     bygllt        d1gllt1
     C                   z-add     bylttbhd      d1lttbhd1
     C                   z-add     bylttbghd     d1lttbghd1
     C                   z-add     bytbhd        d1tbhd1
     C                   z-add     bytbglhd      d1tbglhd1
      *        Screen 2
     C                   z-add     bysbpr        d2sbpr1
     C                   z-add     byltbahd      d2ltbahd1
     C                   z-add     byltbaghd     d2ltbaghd1
     C                   z-add     bybahd        d2bahd1
     C                   z-add     bytolspr      d2tolspr1
     C                   z-add     byltwnhd      d2ltwnhd1
     C                   z-add     bytownhd      d2townhd1
     C                   z-add     byvarpr       d2varpr1
     C                   z-add     bynurrchd     d2nurrchd1
     C                   z-add     byavsv        d2avsv1
     C                   z-add     byavlt        d2avlt1
     C                   z-add     byavltmt      d2avltmt1
     C                   z-add     byavwn        d2avwn1
     C                   z-add     byavwnmt      d2avwnmt1
     C                   z-add     byfmddpr      d2fmddpr1
      *       Screen 3
     C                   z-add     bycrates      d3crates1
      * Quarter 2
     C                   when      bycdqr  = 2
      *       Screen 1
     C                   z-add     byfwinhd      d1fwinhd2
     C                   z-add     byopglhd      d1opglhd2
     C                   z-add     byglsv        d1glsv2
     C                   z-add     bytosv        d1tosv2
     C                   z-add     bycrpr        d1crpr2
     C                   z-add     byprhd        d1prhd2
     C                   z-add     byfopr        d1fopr2
     C                   z-add     byaborpr      d1aborpr2
     C                   z-add     byfrpr        d1frpr2
     C                   z-add     byglfart      d1glfart2
     C                   z-add     bytolt        d1tolt2
     C                   z-add     bygllt        d1gllt2
     C                   z-add     bylttbhd      d1lttbhd2
     C                   z-add     bylttbghd     d1lttbghd2
     C                   z-add     bytbhd        d1tbhd2
     C                   z-add     bytbglhd      d1tbglhd2
      *        Screen 2
     C                   z-add     bysbpr        d2sbpr2
     C                   z-add     byltbahd      d2ltbahd2
     C                   z-add     byltbaghd     d2ltbaghd2
     C                   z-add     bybahd        d2bahd2
     C                   z-add     bytolspr      d2tolspr2
     C                   z-add     byltwnhd      d2ltwnhd2
     C                   z-add     bytownhd      d2townhd2
     C                   z-add     byvarpr       d2varpr2
     C                   z-add     bynurrchd     d2nurrchd2
     C                   z-add     byavsv        d2avsv2
     C                   z-add     byavlt        d2avlt2
     C                   z-add     byavltmt      d2avltmt2
     C                   z-add     byavwn        d2avwn2
     C                   z-add     byavwnmt      d2avwnmt2
     C                   z-add     byfmddpr      d2fmddpr2
      *        Screen 3
     C                   z-add     bycrates      d3crates2
      * Quarter 3
     C                   when      bycdqr  = 3
      *        Screen 1
     C                   z-add     bycdyr        d1cdyr
     C                   z-add     byfwinhd      d1fwinhd3
     C                   z-add     byopglhd      d1opglhd3
     C                   z-add     byglsv        d1glsv3
     C                   z-add     bytosv        d1tosv3
     C                   z-add     bycrpr        d1crpr3
     C                   z-add     byprhd        d1prhd3
     C                   z-add     byfopr        d1fopr3
     C                   z-add     byaborpr      d1aborpr3
     C                   z-add     byfrpr        d1frpr3
     C                   z-add     byglfart      d1glfart3
     C                   z-add     bytolt        d1tolt3
     C                   z-add     bygllt        d1gllt3
     C                   z-add     bylttbhd      d1lttbhd3
     C                   z-add     bylttbghd     d1lttbghd3
     C                   z-add     bytbhd        d1tbhd3
     C                   z-add     bytbglhd      d1tbglhd3
      *        Screen 2
     C                   z-add     bysbpr        d2sbpr3
     C                   z-add     byltbahd      d2ltbahd3
     C                   z-add     byltbaghd     d2ltbaghd3
     C                   z-add     bybahd        d2bahd3
     C                   z-add     bytolspr      d2tolspr3
     C                   z-add     byltwnhd      d2ltwnhd3
     C                   z-add     bytownhd      d2townhd3
     C                   z-add     byvarpr       d2varpr3
     C                   z-add     bynurrchd     d2nurrchd3
     C                   z-add     byavsv        d2avsv3
     C                   z-add     byavlt        d2avlt3
     C                   z-add     byavltmt      d2avltmt3
     C                   z-add     byavwn        d2avwn3
     C                   z-add     byavwnmt      d2avwnmt3
     C                   z-add     byfmddpr      d2fmddpr3
      *        Screen 3
     C                   z-add     bycrates      d3crates3
      * Quarter 4
     C                   when      bycdqr  = 4
      *        Screen 1
     C                   z-add     bycdyr        d1cdyr
     C                   z-add     byfwinhd      d1fwinhd4
     C                   z-add     byopglhd      d1opglhd4
     C                   z-add     byglsv        d1glsv4
     C                   z-add     bytosv        d1tosv4
     C                   z-add     bycrpr        d1crpr4
     C                   z-add     byprhd        d1prhd4
     C                   z-add     byfopr        d1fopr4
     C                   z-add     byaborpr      d1aborpr4
     C                   z-add     byfrpr        d1frpr4
     C                   z-add     byglfart      d1glfart4
     C                   z-add     bytolt        d1tolt4
     C                   z-add     bygllt        d1gllt4
     C                   z-add     bylttbhd      d1lttbhd4
     C                   z-add     bylttbghd     d1lttbghd4
     C                   z-add     bytbhd        d1tbhd4
     C                   z-add     bytbglhd      d1tbglhd4
      *        Screen 2
     C                   z-add     bysbpr        d2sbpr4
     C                   z-add     byltbahd      d2ltbahd4
     C                   z-add     byltbaghd     d2ltbaghd4
     C                   z-add     bybahd        d2bahd4
     C                   z-add     bytolspr      d2tolspr4
     C                   z-add     byltwnhd      d2ltwnhd4
     C                   z-add     bytownhd      d2townhd4
     C                   z-add     byvarpr       d2varpr4
     C                   z-add     bynurrchd     d2nurrchd4
     C                   z-add     byavsv        d2avsv4
     C                   z-add     byavlt        d2avlt4
     C                   z-add     byavltmt      d2avltmt4
     C                   z-add     byavwn        d2avwn4
     C                   z-add     byavwnmt      d2avwnmt4
     C                   z-add     byfmddpr      d2fmddpr4
      *        Screen 3
     C                   z-add     bycrates      d3crates4
     C                   endsl
      *
     C                   endif                                                  If not eof
     C                   enddo                                                  Do 4 qtrs
      *
      * Record does not exist.
     C                   if        notflg = yes                                 If not found
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsl                                                  Main select
      *
      * If the user is deleting, go on to the update routine and don't
      * display the screen. Otherwise, display screen 1.
      *
     C                   if        error = 0 and action = delete
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Clear the fields on both screens
      *---------------------------------------------------------------
      *
     C     $clear        begsr
      *
      * Quarter 1
     C                   z-add     0             d1fwinhd1
     C                   z-add     0             d1opglhd1
     C                   z-add     0             d1glsv1
     C                   z-add     0             d1tosv1
     C                   z-add     0             d1crpr1
     C                   z-add     0             d1prhd1
     C                   z-add     0             d1fopr1
     C                   z-add     0             d1aborpr1
     C                   z-add     0             d1frpr1
     C                   z-add     0             d1glfart1
     C                   z-add     0             d1tolt1
     C                   z-add     0             d1gllt1
     C                   z-add     0             d1lttbhd1
     C                   z-add     0             d1lttbghd1
     C                   z-add     0             d1tbhd1
     C                   z-add     0             d1tbglhd1
      *
     C                   z-add     0             d2sbpr1
     C                   z-add     0             d2ltbahd1
     C                   z-add     0             d2ltbaghd1
     C                   z-add     0             d2bahd1
     C                   z-add     0             d2tolspr1
     C                   z-add     0             d2ltwnhd1
     C                   z-add     0             d2townhd1
     C                   z-add     0             d2varpr1
     C                   z-add     0             d2nurrchd1
     C                   z-add     0             d2avsv1
     C                   z-add     0             d2avlt1
     C                   z-add     0             d2avltmt1
     C                   z-add     0             d2avwn1
     C                   z-add     0             d2avwnmt1
     C                   z-add     0             d2fmddpr1
      *
     C                   z-add     0             d3crates1
      * Quarter 2
     C                   z-add     0             d1fwinhd2
     C                   z-add     0             d1opglhd2
     C                   z-add     0             d1glsv2
     C                   z-add     0             d1tosv2
     C                   z-add     0             d1crpr2
     C                   z-add     0             d1prhd2
     C                   z-add     0             d1fopr2
     C                   z-add     0             d1aborpr2
     C                   z-add     0             d1frpr2
     C                   z-add     0             d1glfart2
     C                   z-add     0             d1tolt2
     C                   z-add     0             d1gllt2
     C                   z-add     0             d1lttbhd2
     C                   z-add     0             d1lttbghd2
     C                   z-add     0             d1tbhd2
     C                   z-add     0             d1tbglhd2
      *
     C                   z-add     0             d2sbpr2
     C                   z-add     0             d2ltbahd2
     C                   z-add     0             d2ltbaghd2
     C                   z-add     0             d2bahd2
     C                   z-add     0             d2tolspr2
     C                   z-add     0             d2ltwnhd2
     C                   z-add     0             d2townhd2
     C                   z-add     0             d2varpr2
     C                   z-add     0             d2nurrchd2
     C                   z-add     0             d2avsv2
     C                   z-add     0             d2avlt2
     C                   z-add     0             d2avltmt2
     C                   z-add     0             d2avwn2
     C                   z-add     0             d2avwnmt2
     C                   z-add     0             d2fmddpr2
      *
     C                   z-add     0             d3crates2
      * Quarter 3
     C                   z-add     0             d1fwinhd3
     C                   z-add     0             d1opglhd3
     C                   z-add     0             d1glsv3
     C                   z-add     0             d1tosv3
     C                   z-add     0             d1crpr3
     C                   z-add     0             d1prhd3
     C                   z-add     0             d1fopr3
     C                   z-add     0             d1aborpr3
     C                   z-add     0             d1frpr3
     C                   z-add     0             d1glfart3
     C                   z-add     0             d1tolt3
     C                   z-add     0             d1gllt3
     C                   z-add     0             d1lttbhd3
     C                   z-add     0             d1lttbghd3
     C                   z-add     0             d1tbhd3
     C                   z-add     0             d1tbglhd3
      *
     C                   z-add     0             d2sbpr3
     C                   z-add     0             d2ltbahd3
     C                   z-add     0             d2ltbaghd3
     C                   z-add     0             d2bahd3
     C                   z-add     0             d2tolspr3
     C                   z-add     0             d2ltwnhd3
     C                   z-add     0             d2townhd3
     C                   z-add     0             d2varpr3
     C                   z-add     0             d2nurrchd3
     C                   z-add     0             d2avsv3
     C                   z-add     0             d2avlt3
     C                   z-add     0             d2avltmt3
     C                   z-add     0             d2avwn3
     C                   z-add     0             d2avwnmt3
     C                   z-add     0             d2fmddpr3
      *
     C                   z-add     0             d3crates3
      * Quarter 4
     C                   z-add     0             d1fwinhd4
     C                   z-add     0             d1opglhd4
     C                   z-add     0             d1glsv4
     C                   z-add     0             d1tosv4
     C                   z-add     0             d1crpr4
     C                   z-add     0             d1prhd4
     C                   z-add     0             d1fopr4
     C                   z-add     0             d1aborpr4
     C                   z-add     0             d1frpr4
     C                   z-add     0             d1glfart4
     C                   z-add     0             d1tolt4
     C                   z-add     0             d1gllt4
     C                   z-add     0             d1lttbhd4
     C                   z-add     0             d1lttbghd4
     C                   z-add     0             d1tbhd4
     C                   z-add     0             d1tbglhd4
      *
     C                   z-add     0             d2sbpr4
     C                   z-add     0             d2ltbahd4
     C                   z-add     0             d2ltbaghd4
     C                   z-add     0             d2bahd4
     C                   z-add     0             d2tolspr4
     C                   z-add     0             d2ltwnhd4
     C                   z-add     0             d2townhd4
     C                   z-add     0             d2varpr4
     C                   z-add     0             d2nurrchd4
     C                   z-add     0             d2avsv4
     C                   z-add     0             d2avlt4
     C                   z-add     0             d2avltmt4
     C                   z-add     0             d2avwn4
     C                   z-add     0             d2avwnmt4
     C                   z-add     0             d2fmddpr4
      *
     C                   z-add     0             d3crates4
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     hp1002k1
     C                   write     hp1002ec
     C                   exfmt     hp1002r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
     C                   other
      *
      * User has pressed ENTER on screen 1
      *
     C                   exsr      $edit1
      *
     C                   select
     C                   when      error = 0
     C                   eval      routne = scrn2
     C                   other
     C                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      * When creating, validate:
      *   1) Year
     C                   if        mode = create
     C                   exsr      $cdyr
     C                   endif
     C                   endif                                                  If here
      *
      * If there are no errors, attempt the write/update; otherwise,
      * redisplay the screen.  If a record has been deleted out from
      * under the user (*IN62 is ON), then the error message will be
      * issued in the update subroutine.  So, always perform this code.
      *
     C                   if        error = 0
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Year (only in Create mode)
      *----------------------------------------------------------------
      *
     C     $cdyr         begsr
      *
     C                   select
     C                   when      d1cdyr = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1cdyr < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1cdyr < 1998 or d1cdyr > 2025
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09028'
     C                   endif
     C                   other
      *
      * Target Table/Year already exist.
      *
     C     key02         chain     hsp096                             92
     C                   if        *in92 = *off                                 If already exist
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01026'     mgid(e)
     C                   endif
     C                   endif                                                  If already exist
     C                   endsl
      *
     C                   z-add     d1cdyr        d2cdyr
     C                   z-add     d1cdyr        d3cdyr
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit screen 2 fields
      *----------------------------------------------------------------
      *
     C     $edit2        begsr
      *
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit screen 3 fields
      *----------------------------------------------------------------
      *
     C     $edit3        begsr
      *
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Subroutine to perform operator I/O for screen 2
      *---------------------------------------------------------------
      *
     C     $scrn2        begsr
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     hp1002k2
     C                   write     hp1002ec
     C                   exfmt     hp1002r2
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   move      *blank        rtncd
     C                   eval      routne = scrn1
     C                   other
      *
      * User has pressed ENTER on screen 2
      *
     C                   exsr      $edit2
      *
     C                   select
     C                   when      error = 0
     C                   eval      routne = scrn3
     C                   other
     C                   eval      routne = scrn2
     C                   endsl
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Subroutine to perform operator I/O for screen 3
      *---------------------------------------------------------------
      *
     C     $scrn3        begsr
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 3 to CRT
      *
     C                   write     hp1002k3
     C                   write     hp1002ec
     C                   exfmt     hp1002r3
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      routne = scrn2
      *
     C                   when      *in11 = *on                                  F11-delete
     C                   movel     delete        action
     C                   exsr      $update
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   exsr      $edit2
     C                   exsr      $edit3
      *
     C                   if        error = 0
     C                   exsr      $update
     C                   endif
     C                   other
      *
      * User has pressed ENTER on screen 3
      *
     C                   exsr      $edit3
     C                   eval      routne = scrn3
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Reset indicators for all screens
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
      *  Set up for mode
      *
     C                   select
     C                   when      dfmode = create
     C                   seton                                        61
      *
     C                   when      dfmode = revise
     C                   seton                                        60
      *
     C                   when      dfmode = delete
     C                   seton                                        62
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Update record
      *---------------------------------------------------------------
      *
     C     $update       begsr
      *
      * If there are no errors, delete/revise/create
      *
     C                   if        error = 0                                    If no error
      * Revise/Delete
     C                   if        action = delete or action = revise
     C                   exsr      $delete
     C                   endif
      *
      * Move DSPF fields to database file fields and write 4 records.
      *
     C                   if        action = create or action = revise
     C                   exsr      $wrt096
     C                   endif
     C                   endif                                                  If no error
      *
      *  If there are any errors, redisplay the screens; otherwise, exit.
      *
     C                   select
     C                   when      error  > 0
     C                   eval      routne = scrn1
     C                   other
     C                   eval      routne = exit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write 4 "quarter" reocrds
      *---------------------------------------------------------------
      *
     C     $wrt096       begsr
      *
      * Quarter 1
     C                   z-add     1             bycdqr
     C                   movel     d1ttbcd       byttbcd
     C                   z-add     d1cdyr        bycdyr
     C                   z-add     d1fwinhd1     byfwinhd
     C                   z-add     d1opglhd1     byopglhd
     C                   z-add     d1glsv1       byglsv
     C                   z-add     d1tosv1       bytosv
     C                   z-add     d1crpr1       bycrpr
     C                   z-add     d1prhd1       byprhd
     C                   z-add     d1fopr1       byfopr
     C                   z-add     d1aborpr1     byaborpr
     C                   z-add     d1frpr1       byfrpr
     C                   z-add     d1glfart1     byglfart
     C                   z-add     d1tolt1       bytolt
     C                   z-add     d1gllt1       bygllt
     C                   z-add     d1lttbhd1     bylttbhd
     C                   z-add     d1lttbghd1    bylttbghd
     C                   z-add     d1tbhd1       bytbhd
     C                   z-add     d1tbglhd1     bytbglhd
      *
     C                   z-add     d2sbpr1       bysbpr
     C                   z-add     d2ltbahd1     byltbahd
     C                   z-add     d2ltbaghd1    byltbaghd
     C                   z-add     d2bahd1       bybahd
     C                   z-add     d2tolspr1     bytolspr
     C                   z-add     d2ltwnhd1     byltwnhd
     C                   z-add     d2townhd1     bytownhd
     C                   z-add     d2varpr1      byvarpr
     C                   z-add     d2nurrchd1    bynurrchd
     C                   z-add     d2avsv1       byavsv
     C                   z-add     d2avlt1       byavlt
     C                   z-add     d2avltmt1     byavltmt
     C                   z-add     d2avwn1       byavwn
     C                   z-add     d2avwnmt1     byavwnmt
     C                   z-add     d2fmddpr1     byfmddpr
      *
     C                   z-add     d3crates1     bycrates
     C                   write     byrec
      * Quarter 2
     C                   z-add     2             bycdqr
     C                   movel     d1ttbcd       byttbcd
     C                   z-add     d1cdyr        bycdyr
      *
     C                   z-add     d1fwinhd2     byfwinhd
     C                   z-add     d1opglhd2     byopglhd
     C                   z-add     d1glsv2       byglsv
     C                   z-add     d1tosv2       bytosv
     C                   z-add     d1crpr2       bycrpr
     C                   z-add     d1prhd2       byprhd
     C                   z-add     d1fopr2       byfopr
     C                   z-add     d1aborpr2     byaborpr
     C                   z-add     d1frpr2       byfrpr
     C                   z-add     d1glfart2     byglfart
     C                   z-add     d1tolt2       bytolt
     C                   z-add     d1gllt2       bygllt
     C                   z-add     d1lttbhd2     bylttbhd
     C                   z-add     d1lttbghd2    bylttbghd
     C                   z-add     d1tbhd2       bytbhd
     C                   z-add     d1tbglhd2     bytbglhd
      *
     C                   z-add     d2sbpr2       bysbpr
     C                   z-add     d2ltbahd2     byltbahd
     C                   z-add     d2ltbaghd2    byltbaghd
     C                   z-add     d2bahd2       bybahd
     C                   z-add     d2tolspr2     bytolspr
     C                   z-add     d2ltwnhd2     byltwnhd
     C                   z-add     d2townhd2     bytownhd
     C                   z-add     d2varpr2      byvarpr
     C                   z-add     d2nurrchd2    bynurrchd
     C                   z-add     d2avsv2       byavsv
     C                   z-add     d2avlt2       byavlt
     C                   z-add     d2avltmt2     byavltmt
     C                   z-add     d2avwn2       byavwn
     C                   z-add     d2avwnmt2     byavwnmt
     C                   z-add     d2fmddpr2     byfmddpr
      *
     C                   z-add     d3crates2     bycrates
     C                   write     byrec
      * Quarter 3
     C                   z-add     3             bycdqr
     C                   movel     d1ttbcd       byttbcd
     C                   z-add     d1cdyr        bycdyr
      *
     C                   z-add     d1fwinhd3     byfwinhd
     C                   z-add     d1opglhd3     byopglhd
     C                   z-add     d1glsv3       byglsv
     C                   z-add     d1tosv3       bytosv
     C                   z-add     d1crpr3       bycrpr
     C                   z-add     d1prhd3       byprhd
     C                   z-add     d1fopr3       byfopr
     C                   z-add     d1aborpr3     byaborpr
     C                   z-add     d1frpr3       byfrpr
     C                   z-add     d1glfart3     byglfart
     C                   z-add     d1tolt3       bytolt
     C                   z-add     d1gllt3       bygllt
     C                   z-add     d1lttbhd3     bylttbhd
     C                   z-add     d1lttbghd3    bylttbghd
     C                   z-add     d1tbhd3       bytbhd
     C                   z-add     d1tbglhd3     bytbglhd
      *
     C                   z-add     d2sbpr3       bysbpr
     C                   z-add     d2ltbahd3     byltbahd
     C                   z-add     d2ltbaghd3    byltbaghd
     C                   z-add     d2bahd3       bybahd
     C                   z-add     d2tolspr3     bytolspr
     C                   z-add     d2ltwnhd3     byltwnhd
     C                   z-add     d2townhd3     bytownhd
     C                   z-add     d2varpr3      byvarpr
     C                   z-add     d2nurrchd3    bynurrchd
     C                   z-add     d2avsv3       byavsv
     C                   z-add     d2avlt3       byavlt
     C                   z-add     d2avltmt3     byavltmt
     C                   z-add     d2avwn3       byavwn
     C                   z-add     d2avwnmt3     byavwnmt
     C                   z-add     d2fmddpr3     byfmddpr
      *
     C                   z-add     d3crates3     bycrates
     C                   write     byrec
      * Quarter 4
     C                   z-add     4             bycdqr
     C                   movel     d1ttbcd       byttbcd
     C                   z-add     d1cdyr        bycdyr
     C                   z-add     d1fwinhd4     byfwinhd
     C                   z-add     d1opglhd4     byopglhd
     C                   z-add     d1glsv4       byglsv
     C                   z-add     d1tosv4       bytosv
     C                   z-add     d1crpr4       bycrpr
     C                   z-add     d1prhd4       byprhd
     C                   z-add     d1fopr4       byfopr
     C                   z-add     d1aborpr4     byaborpr
     C                   z-add     d1frpr4       byfrpr
     C                   z-add     d1glfart4     byglfart
     C                   z-add     d1tolt4       bytolt
     C                   z-add     d1gllt4       bygllt
     C                   z-add     d1lttbhd4     bylttbhd
     C                   z-add     d1lttbghd4    bylttbghd
     C                   z-add     d1tbhd4       bytbhd
     C                   z-add     d1tbglhd4     bytbglhd
      *
     C                   z-add     d2sbpr4       bysbpr
     C                   z-add     d2ltbahd4     byltbahd
     C                   z-add     d2ltbaghd4    byltbaghd
     C                   z-add     d2bahd4       bybahd
     C                   z-add     d2tolspr4     bytolspr
     C                   z-add     d2ltwnhd4     byltwnhd
     C                   z-add     d2townhd4     bytownhd
     C                   z-add     d2varpr4      byvarpr
     C                   z-add     d2nurrchd4    bynurrchd
     C                   z-add     d2avsv4       byavsv
     C                   z-add     d2avlt4       byavlt
     C                   z-add     d2avltmt4     byavltmt
     C                   z-add     d2avwn4       byavwn
     C                   z-add     d2avwnmt4     byavwnmt
     C                   z-add     d2fmddpr4     byfmddpr
      *
     C                   z-add     d3crates4     bycrates
     C                   write     byrec
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Delete all 4 records for a Target Table/Year
      *---------------------------------------------------------------
      *
     C     $delete       begsr
      *
     C     key02         setll     hsl096b
      *
     C                   dou       *in91 = *on
     C     key02         reade     hsl096b                                91
     C                   if        *in91 = *off
     C                   delete    byrecb
     C                   endif
     C                   enddo
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set           routne
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set           routne
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     dfmode        parm                    mode
     C     d1ttbcd       parm                    xxttbcd
     C     d1ttbds       parm                    xxttbds
     C     d1cdyr        parm                    xxcdyr
     C                   parm                    rtncd
      *
     C                   z-add     xxcdyr        d2cdyr
     C                   move      xxttbcd       d2ttbcd
     C                   move      xxttbds       d2ttbds
      *
     C                   z-add     xxcdyr        d3cdyr
     C                   move      xxttbcd       d3ttbcd
     C                   move      xxttbds       d3ttbds
      *
     C                   movel     mode          action
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxttbcd
     C                   kfld                    xxcdyr
      *
     C     key02         klist
     C                   kfld                    d1ttbcd
     C                   kfld                    d1cdyr
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
