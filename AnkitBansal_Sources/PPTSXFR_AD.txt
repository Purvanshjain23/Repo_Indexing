// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPTSXFR
// ?Date: 14.08.2025 Time: 03:41:54
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(PFS Inv Physical FRSH RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC1755345;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_From_Warehouse_Code);
PARAMETER(PAR.Program_name_USR);
{
 //?USER: Initialize routine

 //?05/30/18 RMC R12773 if Program is EDI 846, check warehouse for 846
 //?   Active instead of Carlisle
 //?09/09/09 PKD E00475 Use System Date instead of Job Date
 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(PAR.PFS_From_Warehouse_Code);
 PARAMETER(LCL.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Number is greater than zero
 IF LCL.Company_Number > *ZERO;

 EXECUTE FUNCTION(Val Co/Whse/Code/Date  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1349236;
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.PFS_From_Warehouse_Code);
 PARAMETER(LCL.System_Date_USR);
 PARAMETER(*BLANK);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?If record does not exists create else change sts to open
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Crt Physical Count     CR) TYPE(CRTOBJ) FILE(OMHCCPP)          AC1217193;
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.PFS_From_Warehouse_Code);
 PARAMETER(LCL.System_Date_USR);
 PARAMETER(*BLANK);
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?If record does not exists create else change sts to open
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.PFS_From_Warehouse_Code);
 PARAMETER(LCL.System_Date_USR);
 PARAMETER(*BLANK);
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Cncl Old Physical  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1418232;
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.PFS_From_Warehouse_Code);
 PARAMETER(LCL.System_Date_USR);
 PARAMETER(*BLANK);
 PARAMETER('O');
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Physical Start Date NE PAR.Physical Start Date
  IF DB1.Physical_Start_Date <> PAR.Physical_Start_Date;

  EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Physical_Start_Date);
  PARAMETER(DB1.Cycle_Count_Code);
  PARAMETER('C');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 //? Update all Item Balance Detail records with Physical count date
 //? and save start qty on hand
 EXECUTE FUNCTION(Upd Physical Start Dt  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152141;
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.PFS_From_Warehouse_Code);
 PARAMETER(*BLANK);
 PARAMETER(LCL.System_Date_USR);
 {
  //?USER: Process Data record

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  EXECUTE FUNCTION(Upd Phys. Start Dt/Qty RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1152144;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.USR_From_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Phys. Start Qty.   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1152145;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER('P');
   PARAMETER(DB1.Quantity_on_Hand_Weight);
   PARAMETER(DB1.Quantity_on_Hand_UOM1);
   PARAMETER(DB1.Quantity_on_Hand_UOM2);
   PARAMETER(DB1.Quantity_on_Hand_UOM3);
   PARAMETER(PAR.USR_From_Date);
   {
    //?USER: Processing before Data update

    // DB1.Physical Count Weight = CON.*ZERO
    DB1.Physical_Count_Weight = *ZERO;

    // DB1.Physical Count Qty - U/M1 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM1 = *ZERO;

    // DB1.Physical Count Qty - U/M2 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM2 = *ZERO;

    // DB1.Physical Count Qty - U/M3 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM3 = *ZERO;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 RETURN;

 ENDIF;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // PAR.PFS Process Status = CON.*ZERO
 PAR.PFS_Process_Status = *ZERO;

 // PAR.PFS Error Reason = CND.No Error
 PAR.PFS_Error_Reason = *BLANK;

 //?***** VALIDATION *****
 DO;

 // PAR.Company Number = DB1.PFS Company Number
 PAR.Company_Number = DB1.PFS_Company_Number;

 // PAR.Item Code = DB1.PFS Item Code
 PAR.Item_Code = DB1.PFS_Item_Code;

 // PAR.Warehouse Code = DB1.PFS Warehouse Code
 PAR.Warehouse_Code = DB1.PFS_From_Warehouse_Code;

 CASE;

 // IF LCL.Company Number NE DB1.PFS Company Number
 IF LCL.Company_Number <> DB1.PFS_Company_Number;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Warehouse Company
 PAR.PFS_Error_Reason = 'WHSCO';

 ENDIF;

 EXECUTE FUNCTION(Val Warehouse PFS     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1735131;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?Warehouse Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Warehouse Code
 PAR.PFS_Error_Reason = 'WHSCDE';

 ENDIF;

 //?Lot Tracking is Yes: Location Code & Receive/Located Date
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?12/16/08 PKD A decision was made to use Production Date instead
 //?             of Receive/Locate Date.  This Date is not valid in
 //?             Carlisle sometimes.
 ENDIF;

 EXECUTE FUNCTION(Val Itm/Whs,FG/WP PFS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1740513;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Code Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // OR PAR.Primal Group Code is Scale Check
 OR PAR.Primal_Group_Code = 'SCALE';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Item Code
 PAR.PFS_Error_Reason = 'ITMCDE';

 //?Item Code Not Found
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 EXECUTE FUNCTION(RTV Unit Cost Active   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1413977;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Label Date Not Entered
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.PFS Label Date is Not Entered
 IF DB1.PFS_Label_Date = *ZERO;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Label Date
 PAR.PFS_Error_Reason = 'LBLDTE';

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Program name USR is PRC Edi 846 Inventory Inq
 IF PAR.Program_name_USR = 'EDI846';

 EXECUTE FUNCTION(Rtv Whs Interchg Actv RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2153802;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('WHSRST');
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?VAL:  ACTIVE WAREHOUSE with EDI 846
 CASE;

 // IF LCL.Record Status is Active
 IF LCL.Record_Status = 'A';

 //?VAL:  ACTIVE WAREHOUSE with EDI 846
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?VAL:  ACTIVE WAREHOUSE
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 CASE;

 // IF LCL.WHS PFS Interface is Upload/Both
 IF LCL.WHS_PFS_Interface = 'U'/'B';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 //?VAL:  ACTIVE WAREHOUSE
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?ERROR:  DO NOT SELECT RECORD
 CASE;

 // IF PAR.PFS Process Status is Error
 IF PAR.PFS_Process_Status = 2;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Warehouse Not Matching Par              9.20.05
 CASE;

 // IF DB1.PFS Warehouse Code NE PAR.PFS Warehouse Code
 IF DB1.PFS_From_Warehouse_Code <> PAR.PFS_From_Warehouse_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?***** PROCESS RECORD *****
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Initialize
 DO;

 //?--- Transaction Date ---
 // PAR.Transaction Date Code = LCL.System Date USR
 PAR.Transaction_Date_Code = LCL.System_Date_USR;

 //?------------------------
 //?Production & Label Date
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 //?--- Receive date = Lot Loc Production Date ---
 //?12/16/08 PKD A decision was made to use Production Date instead
 //?             of Receive/Locate Date.  This Date is not valid in
 //?             Carlisle sometimes.
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.PFS_Production_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 // PAR.Label Date = PAR.Production Date
 PAR.Label_Date = PAR.Production_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?--- Production Date ---
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.PFS_Production_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 //?--- Label Date ---
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Label_Date);
 PARAMETER(DB1.PFS_Label_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 CASE;

 // IF PAR.Production Date is not entered
 IF PAR.Production_Date = *ZERO;

 // AND PAR.Production Date Control is yes
 AND PAR.Production_Date_Control = 'Y';

 // PAR.Production Date = PAR.Label Date
 PAR.Production_Date = PAR.Label_Date;

 ENDIF;

 //?Rtv Prod date with label date. carlisle is not to be trusted.
 ENDIF;

 //?Production & Label Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 ENDIF;

 // PAR.Transaction Quantity = DB1.PFS On Hand Quantity
 PAR.Transaction_Quantity = DB1.PFS_On_Hand_Quantity;

 // PAR.Transaction Weight = DB1.PFS On Hand Weight
 PAR.Transaction_Weight = DB1.PFS_On_Hand_Weight;

 //?LOT TRACKING WAREHOUSE
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?12/16/08 PKD A decision was made to use Production Date instead
 //?             of Receive/Locate Date.  This Date is not valid in
 //?             Carlisle sometimes.
 //?----- Receive/Located Date -----
 //?----- Location Code -----
 // PAR.Location Code = CVTVAR(DB1.PFS Location Code)
 PAR.Location_Code = CVTVAR(DB1.PFS_Location_Code);

 //?LOT TRACKING WAREHOUSE
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Location Code = CVTVAR(CON.*BLANK)
 PAR.Location_Code = CVTVAR(*BLANK);

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(Rtv Phys. Start Date   RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1164616;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.USR_Start_Date);
 {
  //?USER: Initialize routine

  // PAR.Physical Start Date = CON.*ZERO
  PAR.Physical_Start_Date = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Physical Start Date is entered
  IF DB1.Physical_Start_Date <> *ZERO;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 //?*** this will change the label date, if the old one was in error
 EXECUTE FUNCTION(Chg AS Physical Count  CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1122682;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(LCL.USR_Start_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt AS Physical Count  CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1122687;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Start_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Processing before Data update

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  CASE;

  // IF DB1.Physical Start Date is not entered
  IF DB1.Physical_Start_Date = *ZERO;

  // DB1.Physical Start Date = PAR.USR Start Date
  DB1.Physical_Start_Date = PAR.USR_Start_Date;

  ENDIF;

  // DB1.Physical Count Weight = DB1.Physical Count Weight + PAR.Transaction Weight
  DB1.Physical_Count_Weight = DB1.Physical_Count_Weight + PAR.Transaction_Weight;

  // DB1.Physical Count Qty - U/M1 = DB1.Physical Count Qty - U/M1 + PAR.Transaction
  DB1.Physical_Count_Qty_UOM1 = DB1.Physical_Count_Qty_UOM1 + PAR.Transaction_Quantity;

  // DB1.Physical Count Status = CND.Physical in progress
  DB1.Physical_Count_Status = 'P';

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 CASE;

 // IF PAR.Program name USR is PRC Edi 846 Inventory Inq
 IF PAR.Program_name_USR = 'EDI846';

 EXECUTE FUNCTION(RTV Crt in 846 if n/f  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC2174590;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('.01');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Revaluation_Cost_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Inventory_Planning_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Lead_Time_Exception);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_for_3_USR);
  PARAMETER(LCL.Cost_Update_Pending);
  PARAMETER(LCL.Post_GL_Status);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 // PAR.PFS Process Status = CON.1
 PAR.PFS_Process_Status = 1;

 ENDIF;

 CASE;

 // IF PAR.PFS Error Reason is Inactive Transaction
 IF PAR.PFS_Error_Reason = 'INACTV';

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 EXECUTE FUNCTION(Chg PrcSts/ErrRsn     CH) TYPE(CHGOBJ) FILE(PPB0CPP)           AC1748581;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(DB1.PFS_Inv_Hold_Reason_Code);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(DB1.PFS_Location_Code);
 PARAMETER(DB1.PFS_Production_Date);
 PARAMETER(DB1.PFS_Label_Date);
 PARAMETER(DB1.PFS_Receive_Located_Date);
 PARAMETER(DB1.PFS_On_Hand_Quantity);
 PARAMETER(DB1.PFS_On_Hand_Weight);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(PAR.PFS_Error_Reason);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 PARAMETER(DB1.PFS_Change_Date);
 PARAMETER(DB1.PFS_Change_Time);
}


//?E3191 JJH 08/07/14 Do not send email if Automated Inv Restoration
CASE;

// IF PAR.Program name USR is WW PFS Restoration    DF
IF PAR.Program_name_USR = 'PPT1DFR';

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER('INVRST');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

//?E3191 JJH 08/06/14 Chg msg to indicate this is Carlisle Upload
// LCL.Text USR 43 = CONCAT(CON.Carlisle Upload,CON.Completed for:,CON.1)
LCL.Text_USR_43 = 'Carlisle Upload' + 'Completed for:' (1);

// LCL.Office Message USR = CONCAT(LCL.Text USR 43,PAR.PFS Warehouse Code,CON.2)
LCL.Office_Message_USR = LCL.Text_USR_43 + PAR.PFS_From_Warehouse_Code (2);

// Execute command - 'ESNDMAIL'
EXECUTE COMMAND(USR4703);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Office_Message_USR);

ENDIF;

ENDIF;

