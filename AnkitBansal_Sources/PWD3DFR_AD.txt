// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWD3DFR
// ?Date: 14.08.2025 Time: 02:56:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E11288 JJH 07/25/17 - Tattoo Header Modifications
//?- New function to alllow 961 to Edit Unpaid Tattoo
//?- Copied from WW Delivery Receiving DF (PKA5DFR)
//?- Allow Option 5=Dsp Buy Order and Load
//?- Allow Option 8=WW Tattoo (WW Tattoo for 961     DT)
//?- Allow Commands: F2=Fold/UnFold  F3=Exit  F4=Prompt+  F5=Refresh
//?- Hide the following fields because they are not required for 961
//?  - Subfile Header: Planned Kill, Planned Delv, Surplus/Shortage
//?  - Subfile Record: Delv Time, Plan Delv, Movement Nbr, Sp, V,
//?                    Trk,, Freight Amount, Frt Exp
//?  - Subfile Fold  : Plt Arrival Time, TrkScl Weight-in
//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
ENDDO;

EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('PKS3UFR');
PARAMETER(8);
{
 C                     Z-ADD#IOUTR    ##SFPG
}


// LCL.Company Value Code    USR = CND.HPE & HPS Application Usd
LCL.Company_Value_Code_USR = 'DLVTRKRULE';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(WRK.BOH_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.System_Value_Alpha_USR);

// WRK.Co Uses HPE & HPS usr = LCL.System Value Alpha    USR
WRK.Co_Uses_HPE_HPS_usr = LCL.System_Value_Alpha_USR;

//?E3503 JJH 10/28/14 - Get Control Value HPETRKTME
//?Truck Authorized Entry Time
DO;

//?NOTE:  Company Value field will not allow Zero.  Therefore, 360
//?was set to 00.0001, and it is being reset to 0 Minutes.
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPETRKTME');
PARAMETER(LCL.System_Value_Numeric_USR);

CASE;

// IF LCL.System Value Numeric  USR is Less Than 1
IF LCL.System_Value_Numeric_USR < 1;

// LCL.Truck Auth Entry Time USR = CND.Zero
LCL.Truck_Auth_Entry_Time_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Truck Auth Entry Time USR = LCL.System Value Numeric  USR
LCL.Truck_Auth_Entry_Time_USR = LCL.System_Value_Numeric_USR;

ENDIF;

ENDDO;

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = WRK.BOH Company Number
CTL.BOH_Company_Number = WRK.BOH_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

//?E3503 JJH 12/10/14 - Default Head Received = Zero
// LCL.Head Received Flag USR = CND.All
LCL.Head_Received_Flag_USR = 'A';

// CTL.Head Received Text USR = CON.Head Received = ALL
CTL.Head_Received_Text_USR = 'Head Received = ALL';

// CTL.BOL Head Received = CND.Equals 0
CTL.BOL_Head_Received = *ZERO;

//?E3503 JJH 12/10/14 - Default Head Received = Zero
// LCL.F8=V Flag USR = CND.Normal display V
LCL.F8V_Flag_USR = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?Default Kill Date w/Job Date
CASE;

// IF CTL.BOL Kill Date EQ WRK.Zero USR
IF CTL.BOL_Kill_Date = WRK.Zero_USR;

// CTL.BOL Kill Date = JOB.*Job date
CTL.BOL_Kill_Date = JOB.*Job_date;

ENDIF;

//?E3503 JJH 10/28/14 - Get Control Value HPETRKTME
//?Truck Authorized Entry Time
DO;

//?NOTE:  Company Value field will not allow Zero.  Therefore, 360
//?was set to 00.0001, and it is being reset to 0 Minutes.
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPETRKTME');
PARAMETER(LCL.System_Value_Numeric_USR);

CASE;

// IF LCL.System Value Numeric  USR is Less Than 1
IF LCL.System_Value_Numeric_USR < 1;

// LCL.Truck Auth Entry Time USR = CND.Zero
LCL.Truck_Auth_Entry_Time_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Truck Auth Entry Time USR = LCL.System Value Numeric  USR
LCL.Truck_Auth_Entry_Time_USR = LCL.System_Value_Numeric_USR;

ENDIF;

ENDDO;

//?E3503 JJH 11/04/14 - Add Option 6=BOL Cmt
//?E11288 JJH 07/26/17 - Selection Criteria no longer required
//?Truck Call In
DO;

// WRK.Trk Arrival Sched Sts = CND.*Blanks
WRK.Trk_Arrival_Sched_Sts = *BLANK;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('HPETRKCALL');
PARAMETER(WRK.System_Value_Alpha_USR);

CASE;

// IF WRK.System Value Alpha    USR is Yes
IF WRK.System_Value_Alpha_USR = 'Y';

// WRK.Trk Call In Status Usr = CND.Trk Call In
WRK.Trk_Call_In_Status_Usr = 'Y';

// CTL.Sel Line 2 Usr = CONCAT(CTL.Sel Line 2 Usr,CON.11=Truck Call In,CON.1)
CTL.Sel_Line_2_Usr = CTL.Sel_Line_2_Usr + '11=Truck Call In' (1);

ENDIF;

ENDDO;

//?Truck Authorized Process y/n
DO;

// WRK.Trk Arrival Sched Sts = CND.*Blanks
WRK.Trk_Arrival_Sched_Sts = *BLANK;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('HPETRKARV');
PARAMETER(WRK.System_Value_Alpha_USR);

CASE;

// IF WRK.System Value Alpha    USR is Yes
IF WRK.System_Value_Alpha_USR = 'Y';

// WRK.Trk Arrival Sched Sts = CND.Allow Arrival Process
WRK.Trk_Arrival_Sched_Sts = 'Y';

// CTL.Sel Line 2 Usr = CONCAT(CTL.Sel Line 2 Usr,CON.12=Truck Authorized,CON.1)
CTL.Sel_Line_2_Usr = CTL.Sel_Line_2_Usr + '12=Truck Authorized' (1);

ENDIF;

ENDDO;

//?To Receiving Dock time Entry & Wait
DO;

// WRK.Trk Rec Dock Time Usr = CND.Blanks
WRK.Trk_Rec_Dock_Time_Usr = *BLANK;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('HPETRKRDK');
PARAMETER(WRK.System_Value_Alpha_USR);

CASE;

// IF WRK.System Value Alpha    USR is Yes
IF WRK.System_Value_Alpha_USR = 'Y';

// WRK.Trk Rec Dock Time Usr = CND.Allow Rec Doc Tme
WRK.Trk_Rec_Dock_Time_Usr = 'Y';

// CTL.Sel Line 2 Usr = CONCAT(CTL.Sel Line 2 Usr,CON.13=Recv Dock Time,CON.1)
CTL.Sel_Line_2_Usr = CTL.Sel_Line_2_Usr + '13=Recv Dock Time' (1);

ENDIF;

ENDDO;

//?Calculate Control Record Head Totals
// CTL.Total Plan Kill Usr = CON.*ZERO
CTL.Total_Plan_Kill_Usr = *ZERO;

// CTL.Head Total USR = CON.*ZERO
CTL.Head_Total_USR = *ZERO;

// CTL.Total Plan Delv Usr = CON.*ZERO
CTL.Total_Plan_Delv_Usr = *ZERO;

// CTL.Difference +/- = CON.*ZERO
CTL.Difference_+ = *ZERO;

EXECUTE FUNCTION(Rtv Plnd Kill f/Date  RT) TYPE(RTVOBJ) FILE(PKAOCPP)           AB1127652;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.Total_Plan_Kill_Usr);
{
 //?USER: Initialize routine

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Planned Kill USR = PAR.Planned Kill USR + DB1.KP Planned Kill
 PAR.Planned_Kill_USR = PAR.Planned_Kill_USR + DB1.KP_Planned_Kill;

}


EXECUTE FUNCTION(Rtv Head Received     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1174789;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.Head_Total_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Not Resale
 IF DB1.TH_Hog_Class_Type = 'M'/'S';

 // PAR.Head Total USR = PAR.Head Total USR + DB1.TH Head Received
 PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

}


// CTL.Difference +/- = CTL.Head Total USR - CTL.Total Plan Delv Usr
CTL.Difference_+ = CTL.Head_Total_USR - CTL.Total_Plan_Delv_Usr;

// LCL.Location Code USR = CTL.Location Code USR
LCL.Location_Code_USR = CTL.Location_Code_USR;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv BO Info           RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1100911;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(WRK.BOH_Payment_Type);
PARAMETER(WRK.Producer_Code_USR);
PARAMETER(WRK.Pdctn_Loc_Code_USR);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.PO_Option_Code);
PARAMETER(WRK.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv BOL Tattoo Info   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213937;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.Record_Found_TH_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found TH USR = CND.Record Not Found
 PAR.Record_Found_TH_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found TH USR = CND.Record Found
 PAR.Record_Found_TH_USR = 'Y';

 QUIT;

}


//?*-----------------------------------------------------------*
//?Get information regardless of producer being seaboard
EXECUTE FUNCTION(Rtv Mvmnt,Farm f/BOLIIRT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1306336;
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(LCL.DSD_Farm_Site_Code);
PARAMETER(RCD.BOLW_Movement_Number);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Movemnt, Dates   RT) TYPE(RTVOBJ) FILE(PLAFCPP)            AB1250357;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(LCL.DT_Farm_Site_Code);
PARAMETER(WRK.BOLW_Movement_Number);
PARAMETER(RCD.DT_Arrive_@_Plant_Time);
PARAMETER(RCD.DT_TrkScl_Weigh_In_Time);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?4/7/2004 slm populate the movement number usr rules
EXECUTE FUNCTION(Rtv Producer Nm, Srce RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1162488;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(WRK.PD_Name);
PARAMETER(WRK.SR_Source_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Highlight Load ID if no Tracking record.
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// AND RCD.BOL Head Received is GT Zero
AND RCD.BOL_Head_Received > *ZERO;

// RCD.Reverse Image Sts USR = CND.Yes
RCD.Reverse_Image_Sts_USR = 'Y';

//?Highlight Load ID if no Tracking record.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Reverse Image Sts USR = CND.No
RCD.Reverse_Image_Sts_USR = 'N';

ENDIF;

//?Delivery Tracking Farm Site
CASE;

// IF LCL.DSD Farm Site Code is Not Entered
IF LCL.DSD_Farm_Site_Code = *ZERO;

// LCL.DSD Farm Site Code = LCL.DT Farm Site Code
LCL.DSD_Farm_Site_Code = LCL.DT_Farm_Site_Code;

ENDIF;

//?Tattoo Header Movement Number & Highlight
CASE;

// IF RCD.BOLW Movement Number EQ WRK.Zero USR
IF RCD.BOLW_Movement_Number = WRK.Zero_USR;

// RCD.BOLW Movement Number = RCD.TH HPS Movement Ref #
RCD.BOLW_Movement_Number = RCD.TH_HPS_Movement_Ref_#;

// RCD.Display Field Usr = CND.*No
RCD.Display_Field_Usr = *NO;

//?Tattoo Header Movement Number & Highlight
// IF RCD.BOLW Movement Number NE RCD.TH HPS Movement Ref #
IF RCD.BOLW_Movement_Number <> RCD.TH_HPS_Movement_Ref_#;

// RCD.Display Field Usr = CND.*Yes
RCD.Display_Field_Usr = *YES;

//?Tattoo Header Movement Number & Highlight
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Display Field Usr = CND.*No
RCD.Display_Field_Usr = *NO;

ENDIF;

// PAR.TH HPS Movement Ref # = CTL.BOLW Movement Number
PAR.TH_HPS_Movement_Ref_# = CTL.BOLW_Movement_Number;

//?Sel:  Movement Number
CASE;

// IF CTL.BOLW Movement Number GT WRK.Zero USR
IF CTL.BOLW_Movement_Number > WRK.Zero_USR;

CASE;

// IF RCD.BOLW Movement Number NE CTL.BOLW Movement Number
IF RCD.BOLW_Movement_Number <> CTL.BOLW_Movement_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('PKS4UFR');
{
 C           MODE      IFEQ '0'
 C                     SETON                     89
 C                     ELSE
 C                     SETOF                     89
 C                     ENDIF
}


//?07/21/2009 SLM Add new logic to verify with TF rules.
//?if in error then highlight the truck number on the screen
//?Verification of Delivery Tracking - Additional Rules
DO;

// RCD.Dlv Trck PassRules Usr = CND.Yes
RCD.Dlv_Trck_PassRules_Usr = 'Y';

CASE;

// IF RCD.BOL Head Received is Not 0
IF RCD.BOL_Head_Received <> *ZERO;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER('DVTRCKHIGL');
PARAMETER(LCL.Dlv_Trck_Additional_Rules);

CASE;

// IF LCL.Dlv Trck Additional Rules is Yes
IF LCL.Dlv_Trck_Additional_Rules = 'Y';

CASE;

// IF DB1.BOL Head Received is Greater then Zero
IF DB1.BOL_Head_Received > *ZERO;

EXECUTE FUNCTION(Val DelTrck TF Rules  RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1295617;
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.Dlv_Trck_PassRules_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Dlv Trck PassRules Usr = CND.No
 PAR.Dlv_Trck_PassRules_Usr = 'N';

 //?USER: Process Data record

 //?arrival plant
 CASE;

 // IF DB1.DT Arrive @ Plant Date is Entered
 IF DB1.DT_Arrive_@_Plant_Date <> *ZERO;

 //?arrival plant
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Dlv Trck PassRules Usr = CND.No
 PAR.Dlv_Trck_PassRules_Usr = 'N';

 ENDIF;

 //?trkscl weight in
 CASE;

 // IF DB1.DT TrkScl Weigh-In Date is Entered
 IF DB1.DT_TrkScl_Weigh_In_Date <> *ZERO;

 //?trkscl weight in
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Dlv Trck PassRules Usr = CND.No
 PAR.Dlv_Trck_PassRules_Usr = 'N';

 ENDIF;

 //?to recv dock
 CASE;

 // IF DB1.DT To Recv Dock Date is Entered
 IF DB1.DT_To_Recv_Dock_Date <> *ZERO;

 //?to recv dock
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Dlv Trck PassRules Usr = CND.No
 PAR.Dlv_Trck_PassRules_Usr = 'N';

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Location Code USING External from the Source type and not seaboard
CASE;

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

CASE;

// IF LCL.DSD Farm Site Code is Not Entered
IF LCL.DSD_Farm_Site_Code = *ZERO;

// RCD.Location Code USR = CON.*BLANK
RCD.Location_Code_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?E2423 Farm Site will show the full, no more 3 position
// RCD.Location Code USR = CVTVAR(LCL.DSD Farm Site Code)
RCD.Location_Code_USR = CVTVAR(LCL.DSD_Farm_Site_Code);

ENDIF;

//?Location Code USING External from the Source type and not seaboard
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Location Code USR = RCD.PL Location Code
RCD.Location_Code_USR = RCD.PL_Location_Code;

ENDIF;

//?SEL:  Location Code
CASE;

// IF CTL.Location Code USR is Entered
IF CTL.Location_Code_USR <> *BLANK;

CASE;

// IF CTL.Location Code USR NE RCD.Location Code USR
IF CTL.Location_Code_USR <> RCD.Location_Code_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// RCD.Movement Number USR = RCD.BOLW Movement Number
RCD.Movement_Number_USR = RCD.BOLW_Movement_Number;

// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

// calculate movement numb
RCD.Movement_Number_USR = ( RCD.BOH_Buy_Order_Number * 100 ) + RCD.BOL_Load_Number;

ENDIF;

//?Display records based on Head Received
CASE;

// IF CTL.BOL Head Received is GT Zero
IF CTL.BOL_Head_Received > *ZERO;

CASE;

// IF RCD.BOL Head Received LT CTL.BOL Head Received
IF RCD.BOL_Head_Received < CTL.BOL_Head_Received;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// LCL.Head Received Flag USR = CND.All
LCL.Head_Received_Flag_USR = 'A';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Display records based on Head Received
// IF *OTHERWISE
IF *OTHERWISE;

//?Record Selected for Head Recevied Flag = Zero
CASE;

// IF LCL.Head Received Flag USR is Zero
IF LCL.Head_Received_Flag_USR = 'Z';

CASE;

// IF RCD.BOL Head Received is GT Zero
IF RCD.BOL_Head_Received > *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?E3786 JJH 01/13/15 - Display BOL in Violation
//?Display all BOL in Violation of Authorized Gate Entry
CASE;

// IF LCL.F8=V Flag USR is Display all V
IF LCL.F8V_Flag_USR = 'V';

CASE;

// IF DB1.BOL Violated Auth Tme Sts is Violated
IF DB1.BOL_Violated_Auth_Tme_Sts = 'V';

// RCD.Dsp Auth Ent ViolationUSR = CND.Yes
RCD.Dsp_Auth_Ent_ViolationUSR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Dsp Auth Ent ViolationUSR = CND.No
RCD.Dsp_Auth_Ent_ViolationUSR = 'N';

ENDIF;

ENDIF;

//?E3503 JJH 11/05/14 - Display BOL in Violation of Auth Entry
//?Determine if BOL that are Authorized are in Violation
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

CASE;

// IF LCL.F8=V Flag USR is Normal display V
IF LCL.F8V_Flag_USR = 'N';

EXECUTE FUNCTION(Chg Auth Ent ViolationIF) TYPE(EXCINTFUN)                      AB1321784;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(RCD.BOL_Violated_Auth_Tme_Sts);
PARAMETER(RCD.BOL_Auth_Gate_Entry_Time);
PARAMETER(RCD.BOL_Auth_Gate_Entry_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);
PARAMETER(RCD.Dsp_Auth_Ent_ViolationUSR);
{
 //?Execute internal function

 //?The purpose of this function is to determine if the Buy Order
 //?Load is in Violation of the Authorized Entry Date/Time.  If yes,
 //?this function will set the BOL Violated Auth Tme Sts = V and
 //?set display RED "V" on the Work With Delivery Receving scren.
 //?This function will add a Buy Order Load Comment indicating that
 //?BOL Violated Auth Tme Sts is in Violation.
 //?This logic will only be used if the Truck Auth Entry Time USR is
 //?GT Zero.
 CASE;

 // IF PAR.Truck Auth Entry Time USR is GT Zero
 IF PAR.Truck_Auth_Entry_Time_USR > *ZERO;

 //?Initialize Return Parameters
 // PAR.Dsp Auth Ent ViolationUSR = CND.No
 PAR.Dsp_Auth_Ent_ViolationUSR = 'N';

 // LCL.Auth Dt/Tm Violated USR = CND.No
 LCL.Auth_Dt_Tm_Violated_USR = 'N';

 //?Get System Date / Time
 // Call program Rtv System Date       UP.
 CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
 PARAMETER(LCL.Current_Date_USR);

 // Execute function Rtv Current Time      US.
 EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
 PARAMETER(LCL.*Job_time);
 {
  C                     TIME           #OA1TM
 }

 CASE;

 // IF PAR.BOL Truck Scale Weigh Sts is Arrival
 IF PAR.BOL_Truck_Scale_Weigh_Sts = 'A';

 CASE;

 // IF PAR.BOL Auth Gate Entry Date is Zero
 IF PAR.BOL_Auth_Gate_Entry_Date = *ZERO;

 // OR PAR.BOL Auth Gate Entry Date LT LCL.Current Date USR
 OR PAR.BOL_Auth_Gate_Entry_Date < LCL.Current_Date_USR;

 // LCL.Auth Dt/Tm Violated USR = CND.Yes
 LCL.Auth_Dt_Tm_Violated_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Determine if Authorized Entry Time is Violated
 //?Adjust Current Date and Time
 // LCL.Truck Auth Entry Time USR = PAR.Truck Auth Entry Time USR * CON.100 *
 LCL.Truck_Auth_Entry_Time_USR = PAR.Truck_Auth_Entry_Time_USR * 100;

 // LCL.Current Time USR = LCL.*Job time + LCL.Truck Auth Entry Time USR
 LCL.Current_Time_USR = LCL.*Job_time + LCL.Truck_Auth_Entry_Time_USR;

 CASE;

 // IF LCL.Current Time USR LT LCL.Truck Auth Entry Time USR
 IF LCL.Current_Time_USR < LCL.Truck_Auth_Entry_Time_USR;

 // LCL.Current Date USR = LCL.Current Date USR + CON.1 *DAYS
 LCL.Current_Date_USR = DATEINCR(LCL.Current_Date_USR 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 CASE;

 // IF LCL.Current Date USR EQ PAR.BOL Auth Gate Entry Date
 IF LCL.Current_Date_USR = PAR.BOL_Auth_Gate_Entry_Date;

 CASE;

 // IF LCL.Current Time USR GT PAR.BOL Auth Gate Entry Time
 IF LCL.Current_Time_USR > PAR.BOL_Auth_Gate_Entry_Time;

 // LCL.Auth Dt/Tm Violated USR = CND.Yes
 LCL.Auth_Dt_Tm_Violated_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Update BOL Violated Auth Tme Sts = Violated
 CASE;

 // IF LCL.Auth Dt/Tm Violated USR is Yes
 IF LCL.Auth_Dt_Tm_Violated_USR = 'Y';

 CASE;

 // IF PAR.BOL Violated Auth Tme Sts is No Violations
 IF PAR.BOL_Violated_Auth_Tme_Sts = *BLANK;

 EXECUTE FUNCTION(Chg BOL Auth Time Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1321787;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('V');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Violated Authorized');
 PARAMETER(' Gate Entry Time');
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 ENDIF;

 //?Display V=Violated in RED
 // PAR.Dsp Auth Ent ViolationUSR = CND.Yes
 PAR.Dsp_Auth_Ent_ViolationUSR = 'Y';

 // PAR.BOL Violated Auth Tme Sts = CND.Violated
 PAR.BOL_Violated_Auth_Tme_Sts = 'V';

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Determine if BOL that are Authorized are in Violation
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Dsp Auth Ent ViolationUSR = CND.No
RCD.Dsp_Auth_Ent_ViolationUSR = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF CTL.*CMD key is CF02
IF CTL.*CMD_key = '02';

// OR CTL.*CMD key is CF03
OR CTL.*CMD_key = '03';

// OR CTL.*CMD key is CF04
OR CTL.*CMD_key = '04';

// OR CTL.*CMD key is CF05
OR CTL.*CMD_key = '05';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?If Movement Number or Location Code changed, Reload Subfile
CASE;

// IF CTL.BOLW Movement Number NE PAR.TH HPS Movement Ref #
IF CTL.BOLW_Movement_Number <> PAR.TH_HPS_Movement_Ref_#;

// OR CTL.Location Code USR NE LCL.Location Code USR
OR CTL.Location_Code_USR <> LCL.Location_Code_USR;

//?E3503 JJH 11/12/14 - Update Auth Entry Date/Time Violation
//?Update Auth Entry Time Vioalation
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

// Call program Upd Auth Ent ViolationXF.
CALL PROGRAM(Upd Auth Ent ViolationXF) ('PLV4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F4=Prompt+
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.PD Producer Code
IF PGM.*Cursor_field = CTL.PD_Producer_Code;

// OR PGM.*Cursor field <IS> CTL.Location Code USR
OR PGM.*Cursor_field = CTL.Location_Code_USR;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Location_Code_USR);

// IF PGM.*Cursor field <IS> CTL.TRK Trucker Code
IF PGM.*Cursor_field = CTL.TRK_Trucker_Code;

// Call program Sel Trucker           SR.
CALL PROGRAM(Sel Trucker           SR) ('PKDLSRR');
PARAMETER(CTL.TRK_Trucker_Code);

ENDIF;

//?E3503 JJH 11/12/14 - Update Auth Entry Date/Time Violation
//?Update Auth Entry Time Vioalation
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

// Call program Upd Auth Ent ViolationXF.
CALL PROGRAM(Upd Auth Ent ViolationXF) ('PLV4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

//?E3503 JJH 11/12/14 - Update Auth Entry Date/Time Violation
//?Update Auth Entry Time Vioalation
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

// Call program Upd Auth Ent ViolationXF.
CALL PROGRAM(Upd Auth Ent ViolationXF) ('PLV4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E3503 JJH 12/14/14 - Authorized Gate Entry
//?F7=Head Received Zero/All
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// IF LCL.Head Received Flag USR is All
IF LCL.Head_Received_Flag_USR = 'A';

// LCL.Head Received Flag USR = CND.Zero
LCL.Head_Received_Flag_USR = 'Z';

// CTL.BOL Head Received = CND.Equals 0
CTL.BOL_Head_Received = *ZERO;

// IF LCL.Head Received Flag USR is Zero
IF LCL.Head_Received_Flag_USR = 'Z';

// LCL.Head Received Flag USR = CND.All
LCL.Head_Received_Flag_USR = 'A';

// CTL.Head Received Text USR = CON.Head Received = ALL
CTL.Head_Received_Text_USR = 'Head Received = ALL';

ENDIF;

//?Update Auth Entry Time Vioalation
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

// Call program Upd Auth Ent ViolationXF.
CALL PROGRAM(Upd Auth Ent ViolationXF) ('PLV4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E3786 JJH 01/13/15 - Authorized Gate Entry
//?R7516 JJH 02/21/17 - Remove Hard-Code for BOH Company
//?Change to kill date:  reset "held" tattoo number
CASE;

// IF PAR.TH Kill Date NE CTL.BOL Kill Date
IF PAR.TH_Kill_Date <> CTL.BOL_Kill_Date;

// PAR.TH Kill Date = CTL.BOL Kill Date
PAR.TH_Kill_Date = CTL.BOL_Kill_Date;

// PAR.TH Tattoo Number = CON.*ZERO
PAR.TH_Tattoo_Number = *ZERO;

//?Clear CTL. BO/BOL if probably filled in for Tto selection
CASE;

// IF CTL.BOH Buy Order Number EQ PAR.BOH Buy Order Number
IF CTL.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

// AND CTL.BOL Load Number EQ PAR.BOL Load Number
AND CTL.BOL_Load_Number = PAR.BOL_Load_Number;

// AND CTL.TH Tattoo Number NE WRK.Zero USR
AND CTL.TH_Tattoo_Number <> WRK.Zero_USR;

// CTL.BOH Buy Order Number = CON.*ZERO
CTL.BOH_Buy_Order_Number = *ZERO;

// CTL.BOL Load Number = CON.*ZERO
CTL.BOL_Load_Number = *ZERO;

ENDIF;

ENDIF;

//?Change to Tattoo selection
CASE;

// IF PAR.TH Tattoo Number NE CTL.TH Tattoo Number
IF PAR.TH_Tattoo_Number <> CTL.TH_Tattoo_Number;

// PAR.TH Tattoo Number = CTL.TH Tattoo Number
PAR.TH_Tattoo_Number = CTL.TH_Tattoo_Number;

CASE;

// IF CTL.TH Tattoo Number EQ WRK.Zero USR
IF CTL.TH_Tattoo_Number = WRK.Zero_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Tatts/Bo Load     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1135414;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Tattoo Number Not Found'
ERROR(PRK0368);
MSGPARM(CTL.TH_Tattoo_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.BOH Buy Order Number = PAR.BOH Buy Order Number
CTL.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

// CTL.BOL Load Number = PAR.BOL Load Number
CTL.BOL_Load_Number = PAR.BOL_Load_Number;

//?E3503 JJH 11/12/14 - Update Auth Entry Date/Time Violation
//?Update Auth Entry Time Vioalation
CASE;

// IF LCL.Truck Auth Entry Time USR is GT Zero
IF LCL.Truck_Auth_Entry_Time_USR > *ZERO;

// Call program Upd Auth Ent ViolationXF.
CALL PROGRAM(Upd Auth Ent ViolationXF) ('PLV4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.Truck_Auth_Entry_Time_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Fill in higher level keys if buy order entered
CASE;

// IF CTL.BOH Buy Order Number NE WRK.Zero USR
IF CTL.BOH_Buy_Order_Number <> WRK.Zero_USR;

//?fill in higher level keys
EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1192881;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(CTL.BOL_Pln_Delv_Start_Time);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(CTL.BOL_Pln_Head_Delv);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?E3503 JJH 12/14/14 - Authorized Gate Entry
//?Display Head Received = ALL/ZERO
CASE;

// IF CTL.BOL Head Received is GT Zero
IF CTL.BOL_Head_Received > *ZERO;

// CTL.Head Received Text USR = CON.Head Received = ALL
CTL.Head_Received_Text_USR = 'Head Received = ALL';

//?Display Head Received = ALL/ZERO
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Head Received Flag USR is All
IF LCL.Head_Received_Flag_USR = 'A';

// CTL.Head Received Text USR = CON.Head Received = ALL
CTL.Head_Received_Text_USR = 'Head Received = ALL';

// IF LCL.Head Received Flag USR is Zero
IF LCL.Head_Received_Flag_USR = 'Z';

// CTL.Head Received Text USR = CON.Head Received = ZERO
CTL.Head_Received_Text_USR = 'Head Received = ZERO';

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Reset to blanks
IF RCD.*SFLSEL = *BLANK;

// IF RCD.*SFLSEL is *Option 13 (Reusable)
IF RCD.*SFLSEL = '13';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(WRK.Blank_USR);
PARAMETER(WRK.Zero_USR);
PARAMETER('HPERCV');
PARAMETER(WRK.Blank_USR);
PARAMETER(WRK.Blank_USR);
PARAMETER(WRK.Blank_USR);
PARAMETER(WRK.Blank_USR);
PARAMETER(WRK.Blank_USR);
PARAMETER(LCL.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// WRK.Blank USR = CON.*BLANK
WRK.Blank_USR = *BLANK;

// WRK.Zero USR = CON.*ZERO
WRK.Zero_USR = *ZERO;

CASE;

// IF LCL.Oms Access Denied (Y/N) is Yes
IF LCL.Oms_Access_Denied_Y_N = 'Y';

QUIT;

ENDIF;

ENDIF;

//?E11288 JJH 07/27/17 - New Option
//?5=Dsp Buy Order and Load
CASE;

// IF RCD.*SFLSEL is Select Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Buy Order and LoadDT.
CALL PROGRAM(Dsp Buy Order and LoadDT) ('PWD7DTR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(CTL.Head_Total_USR);
PARAMETER(CTL.Oms_Name);
PARAMETER(CTL.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E3503 JJH 11/04/14 - Add BOL Comments
//?E11288 JJH 07/27/17 - New Option
//?8=WW Tattoo for 961     DT
CASE;

// IF RCD.*SFLSEL is WW Tattoo
IF RCD.*SFLSEL = '8'/'8';

//?VERIFY THE FARM SITE AND STATE CODE ON THE 2ND LINE
// Call program WW Tattoo for 961     DT.
CALL PROGRAM(WW Tattoo for 961     DT) ('PWD2DTR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

