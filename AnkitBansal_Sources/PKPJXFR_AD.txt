// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPJXFR
// ?Date: 14.08.2025 Time: 02:50:04
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

// PAR.Loss Error 1 Usr = CND.Passed
PAR.Loss_Error_1_Usr = 'P';

// PAR.Loss Error 2 Usr = CND.Passed
PAR.Loss_Error_2_Usr = 'P';

// PAR.Loss Error 3 Usr = CND.Passed
PAR.Loss_Error_3_Usr = 'P';

// PAR.Loss Error 4 Usr = CND.Passed
PAR.Loss_Error_4_Usr = 'P';

// PAR.Loss Error 5 Usr = CND.Passed
PAR.Loss_Error_5_Usr = 'P';

EXECUTE FUNCTION(Dlt TTo Loss Errors   RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1135905;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(DB1.KV_Buy_Order_Number);
 PARAMETER(DB1.KV_Load_Number);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// PAR.LTN Error Sts = CND.Not Balanced Record
PAR.LTN_Error_Sts = *BLANK;

EXECUTE FUNCTION(Rtv Loss Type         RT) TYPE(RTVOBJ) FILE(PKBPREP)           AB1135569;
PARAMETER(PAR.LT_Type_Code);
PARAMETER(WRK.LT_Description);
PARAMETER(WRK.LT_Wgt_Required);
PARAMETER(WRK.LT_Extent_Required);
PARAMETER(WRK.Lt_Trim_Location_Required);
PARAMETER(WRK.LT_Reason_Required);
PARAMETER(WRK.LT_Tattoo_Required);
PARAMETER(WRK.LT_Loss_Definition);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.LTN Error Sts = CND.Balance
PAR.LTN_Error_Sts = 'B';

//?Validate
CASE;

// IF PAR.LTN User Error Override is Yes
IF PAR.LTN_User_Error_Override = 'Y';

//?User override all validations do not validate
//?Validate
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate
//?VALIDATE WEIGHT
CASE;

// IF WRK.LT Wgt Required is Yes
IF WRK.LT_Wgt_Required = 'Y';

CASE;

// IF PAR.LTN Wgt EQ WRK.Zero USR
IF PAR.LTN_Wgt = WRK.Zero_USR;

// WRK.KV Error Code = CON.WGT
WRK.KV_Error_Code = 'WGT';

// WRK.KV Error Description = CON.Weight is Required
WRK.KV_Error_Description = 'Weight is Required';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 1 Usr = CND.Failed
PAR.Loss_Error_1_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Loss Error 1 Usr = CND.Passed
PAR.Loss_Error_1_Usr = 'P';

ENDIF;

ENDIF;

//?VALIDATE EXTENT
CASE;

// IF WRK.LT Extent Required is Yes
IF WRK.LT_Extent_Required = 'Y';

CASE;

// IF PAR.LTN Extent EQ WRK.Blank USR
IF PAR.LTN_Extent = WRK.Blank_USR;

// WRK.KV Error Code = CON.EXT
WRK.KV_Error_Code = 'EXT';

// WRK.KV Error Description = CON.Extent is Required
WRK.KV_Error_Description = 'Extent is Required';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 2 Usr = CND.Failed
PAR.Loss_Error_2_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

//?Valid Extents
CASE;

// IF PAR.LTN Extent is *ALL values
IF PAR.LTN_Extent = '01'/'02'/'00'/'03'/'04';

// PAR.Loss Error 2 Usr = CND.Passed
PAR.Loss_Error_2_Usr = 'P';

//?Valid Extents
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.KV Error Code = CON.EXT
WRK.KV_Error_Code = 'EXT';

// WRK.KV Error Description = CON.Extent is Invalid
WRK.KV_Error_Description = 'Extent is Invalid';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.Loss Error 2 Usr = CND.Failed
PAR.Loss_Error_2_Usr = 'F';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

//?VALIDATE EXTENT
// IF *OTHERWISE
IF *OTHERWISE;

//?Valid Extents
CASE;

// IF PAR.LTN Extent is *ALL values
IF PAR.LTN_Extent = '01'/'02'/'00'/'03'/'04';

// PAR.Loss Error 2 Usr = CND.Passed
PAR.Loss_Error_2_Usr = 'P';

//?Valid Extents
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.KV Error Code = CON.EXT
WRK.KV_Error_Code = 'EXT';

// WRK.KV Error Description = CON.Extent is Invalid
WRK.KV_Error_Description = 'Extent is Invalid';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.Loss Error 2 Usr = CND.Failed
PAR.Loss_Error_2_Usr = 'F';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

//?VALIDATE REASON
CASE;

// IF WRK.LT Reason Required is Yes
IF WRK.LT_Reason_Required = 'Y';

CASE;

// IF PAR.LR Reason Code EQ WRK.Zero USR
IF PAR.LR_Reason_Code = WRK.Zero_USR;

// WRK.KV Error Code = CON.RSN
WRK.KV_Error_Code = 'RSN';

// WRK.KV Error Description = CON.Reason is Required
WRK.KV_Error_Description = 'Reason is Required';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 3 Usr = CND.Failed
PAR.Loss_Error_3_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1136410;
PARAMETER(PAR.LR_Reason_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.KV Error Code = CON.RSN
WRK.KV_Error_Code = 'RSN';

// WRK.KV Error Description = CON.Reason is Invalid
WRK.KV_Error_Description = 'Reason is Invalid';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 3 Usr = CND.Failed
PAR.Loss_Error_3_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Loss Error 3 Usr = CND.Passed
PAR.Loss_Error_3_Usr = 'P';

ENDIF;

ENDIF;

ENDIF;

//?VALIDATE TRIM LOCATION
CASE;

// IF WRK.Lt Trim Location Required is Yes
IF WRK.Lt_Trim_Location_Required = 'Y';

CASE;

// IF PAR.LTN Trim Location EQ WRK.Blank USR
IF PAR.LTN_Trim_Location = WRK.Blank_USR;

// WRK.KV Error Code = CON.LOC
WRK.KV_Error_Code = 'LOC';

// WRK.KV Error Description = CON.Trim Loc is Required
WRK.KV_Error_Description = 'Trim Loc is Required';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 5 Usr = CND.Failed
PAR.Loss_Error_5_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.LTN Trim Location is List of Trim
IF PAR.LTN_Trim_Location = '11'/'13'/'12'/'14'/'10'/'15'/'00';

// PAR.Loss Error 5 Usr = CND.Passed
PAR.Loss_Error_5_Usr = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.KV Error Code = CON.LOC
WRK.KV_Error_Code = 'LOC';

// WRK.KV Error Description = CON.Trim Location Invalid
WRK.KV_Error_Description = 'Trim Location Invalid';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 5 Usr = CND.Failed
PAR.Loss_Error_5_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

//?VALIDATE TRIM LOCATION
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.LTN Trim Location is *ALL values
IF PAR.LTN_Trim_Location = '10'/'11'/'12'/'13'/'14'/'00'/'15';

// PAR.Loss Error 5 Usr = CND.Passed
PAR.Loss_Error_5_Usr = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.KV Error Code = CON.LOC
WRK.KV_Error_Code = 'LOC';

// WRK.KV Error Description = CON.Trim Location Invalid
WRK.KV_Error_Description = 'Trim Location Invalid';

// PAR.LTN Error Sts = CND.Error
PAR.LTN_Error_Sts = 'E';

// PAR.TH Detail Error Sts = CND.Yes
PAR.TH_Detail_Error_Sts = 'Y';

// PAR.Loss Error 5 Usr = CND.Failed
PAR.Loss_Error_5_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

ENDIF;

//?All in balance accumulate totals
CASE;

// IF PAR.LTN Error Sts is Balance
IF PAR.LTN_Error_Sts = 'B';

CASE;

// IF WRK.LT Loss Definition is Condemmed Hogs
IF WRK.LT_Loss_Definition = 'C';

// PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.KV Error Code = CON.LST
WRK.KV_Error_Code = 'LST';

// WRK.KV Error Description = CON.Loss Type is Required
WRK.KV_Error_Description = 'Loss Type is Required';

// WRK.LTN Error Sts = CND.Error
WRK.LTN_Error_Sts = 'E';

// PAR.Loss Error 4 Usr = CND.Failed
PAR.Loss_Error_4_Usr = 'F';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.LTN_Company_Number);
PARAMETER(PAR.LTN_Kill_Date);
PARAMETER(PAR.LTN_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.LTN_Record_Number);
PARAMETER('L');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

