// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKA3DFR
// ?Date: 29.08.2025 Time: 09:01:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?S000219 JM 12/28/23 - Fix unintentional deletion of Carcass Detail &
//?                      Tattoo Ded/Add.
//?H16853 JBB  1/29/21 - Aligned text over all columns.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field length from
//? 5 to 7.
//?E14234 JBB  1/29/18 - Add call to a window in intialize to
//?  select program to use for repayments.
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?E3851 JJH 01/19/15 - Remove Carcass Detail
//?-If Option F16=Sel Tattoo or Option  F18=Sel All Tattoo is
//? selected, the From Date and To Date must be the same.
//?-Added record selection to only display records that are using
//? the enerered Company in the CTL.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//? 1/29/2019 JBB E14234 - Repayment Enhancements - Phase 2
// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
PARAMETER(LCL.User_Class_f_usrprf_USR);

//?If user is a programmer, display selection prompt
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// Call program Pmt Repayment Select  PR.
CALL PROGRAM(Pmt Repayment Select  PR) ('PWIIPVR');
PARAMETER(LCL.Select_Y_N_USR_1);
PARAMETER(LCL.Select_Y_N_USR_2);

//?If *YES returned, call new Repayment process
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

RETURN;

//?If *YES returned, call new Repayment process
// IF LCL.Select Y/N USR 1 is Yes
IF LCL.Select_Y_N_USR_1 = 'Y';

// Call program ZzzRepayments         DF.
CALL PROGRAM(ZzzRepayments         DF) ('PWHRDFR');

RETURN;

ENDIF;

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = WRK.CC Company Number
CTL.BOH_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(RTV Payment Prc        RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1146809;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Pmt_Current_Payment_Date);
PARAMETER(CTL.Pmt_Current_Payment_Step);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.BOH Company Number EQ RCD.BOH Company Number
IF CTL.BOH_Company_Number = RCD.BOH_Company_Number;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Tattoo Hdr Job) TYPE(RTVOBJ) FILE(PKDOREP)                 AB1177578;
PARAMETER('REPAY');
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(DB1.TH_Tattoo_Number);
PARAMETER(DB1.TH_Kill_Date);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.*Record already exists
 PAR.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// RCD.ReEvaluation Sel Desc Usr = CON.*BLANK
RCD.ReEvaluation_Sel_Desc_Usr = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.ReEvaluation Sel Desc Usr = CON.Sel for Re-Eval
RCD.ReEvaluation_Sel_Desc_Usr = 'Sel for Re-Eval';

ENDIF;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv BoH  Quot/Cmp     RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1177634;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOH_Quote_Price_Type);
PARAMETER(RCD.BOH_Quoted_Base_Mkt_Price);
PARAMETER(RCD.CMP_Program_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?E3851 JJH 01/21/15 - Replaced this logic with Error Message
//?CF04 Selection
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.CMP Program Code
IF PGM.*Cursor_field = CTL.CMP_Program_Code;

// Call program Sel Carc Merit Pgm    SR.
CALL PROGRAM(Sel Carc Merit Pgm    SR) ('PKBASRR');
PARAMETER(CTL.CMP_Program_Code);

// IF PGM.*Cursor field <IS> CTL.PD Producer Code
IF PGM.*Cursor_field = CTL.PD_Producer_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);

// IF PGM.*Cursor field <IS> CTL.PL Location Code
IF PGM.*Cursor_field = CTL.PL_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);

ENDIF;

ENDIF;

//?Validation/ and command key processing
DO;

//? 8/27/2018 JBB E13669 - Remove F17 processing
//?F16 and F18 validation
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// OR CTL.*CMD key is CF18
OR CTL.*CMD_key = '18';

//?from date
CASE;

// IF CTL.TH Kill Date LE WRK.Zero USR
IF CTL.TH_Kill_Date <= WRK.Zero_USR;

// Send error message - 'Date is Required'
ERROR(PRK0641);
MSGPARM(CTL.TH_Kill_Date);

QUIT;

ENDIF;

//?to date
CASE;

// IF CTL.Kill Date 2 USR LE WRK.Zero USR
IF CTL.Kill_Date_2_USR <= WRK.Zero_USR;

// Send error message - 'Date is Required'
ERROR(PRK0641);
MSGPARM(CTL.Kill_Date_2_USR);

QUIT;

ENDIF;

//?from and to date
CASE;

// IF CTL.TH Kill Date LE CTL.Kill Date 2 USR
IF CTL.TH_Kill_Date <= CTL.Kill_Date_2_USR;

//?from and to date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'From date must be less than or equal to the to date.'
ERROR(PRK0472);

QUIT;

ENDIF;

//?Validate cf keys and input selections
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// OR CTL.*CMD key is CF17
OR CTL.*CMD_key = '17';

// OR CTL.*CMD key is CF18
OR CTL.*CMD_key = '18';

CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

CASE;

// IF CTL.TH Tattoo Number is Zero
IF CTL.TH_Tattoo_Number = *ZERO;

// Send error message - 'Tattoo is Required'
ERROR(PRK0642);
MSGPARM(CTL.TH_Tattoo_Number);

QUIT;

ENDIF;

//?E3851 JJH 01/21/15 - SNDERRMSG if From Date and To Date Different
CASE;

// IF CTL.TH Kill Date NE CTL.Kill Date 2 USR
IF CTL.TH_Kill_Date <> CTL.Kill_Date_2_USR;

// Send error message - 'From Date &1 and To Date &2 must be the same for Option F16 and F18.'
ERROR(PRK1356);
MSGPARM(CTL.TH_Kill_Date);
MSGPARM(CTL.Kill_Date_2_USR);

QUIT;

ENDIF;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

CASE;

// IF CTL.TH Kill Date NE CTL.Kill Date 2 USR
IF CTL.TH_Kill_Date <> CTL.Kill_Date_2_USR;

// Send error message - 'From Date &1 and To Date &2 must be the same for Option F16 and F18.'
ERROR(PRK1356);
MSGPARM(CTL.TH_Kill_Date);
MSGPARM(CTL.Kill_Date_2_USR);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Verify Price Type
CASE;

// IF CTL.BOH Quoted Base Mkt Price is Not Zeros
IF CTL.BOH_Quoted_Base_Mkt_Price <> *ZERO;

CASE;

// IF CTL.BOH Quote Price Type is Not Entered
IF CTL.BOH_Quote_Price_Type = *BLANK;

// Send error message - 'Base Quote Type is required.'
ERROR(PRK0497);
MSGPARM(CTL.BOH_Quote_Price_Type);

QUIT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Verify tattoo number
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

CASE;

// IF CTL.TH Tattoo Number is Zero
IF CTL.TH_Tattoo_Number = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo not found.'
ERROR(PRK0061);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Command Key selection
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Edt Payment Process   E1.
CALL PROGRAM(Edt Payment Process   E1) ('PKSPE1R');
PARAMETER(CTL.BOH_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key selection
// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// Call program PMT Payment Process   PV.
CALL PROGRAM(PMT Payment Process   PV) ('PKXAPVR');
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key selection
// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

//?Print Variance report
// Execute command - 'SBM Qry Variance Rpt'
EXECUTE COMMAND(PRK0646);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key selection
// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?Select Tattoo
//?Repayment selected by user No
//?E3851 JJH 01/23/15 - Remove Input Parameters for Buy Order Header
//? and Re-Pay 1 Tattoo RsqbyUsr
// Call program Pmt Sel Re-Ev/Tattoo  PV.
CALL PROGRAM(Pmt Sel Re-Ev/Tattoo  PV) ('PKBAPVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.Kill_Date_2_USR);
PARAMETER(*NO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key selection
// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

//?Backup files for a repayment
//?E3851 JJH 01/23/15 - Remove Input Parameters for Buy Order Header
// Call program Pmt Repay File Backup PV.
CALL PROGRAM(Pmt Repay File Backup PV) ('PWHEPVR');
PARAMETER(CTL.BOH_Company_Number);

//?Command Key selection
// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

//?Select All Tattoos
//?E3851 JJH 01/23/15 - Remove Input Parameters for Buy Order Header
//? and Re-Pay 1 Tattoo RsqbyUsr
//?Repayment selected by user No
// Call program Pmt Sel Re-Ev/All     PV.
CALL PROGRAM(Pmt Sel Re-Ev/All     PV) ('PKBGPVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.Kill_Date_2_USR);
PARAMETER(*NO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Command Key selection
// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

//?Flag all unpaid as Paid --- Start Clean if you want
// Call program Zzz TtHdr Jbsl/Pay Tt  XF.
CALL PROGRAM(Zzz TtHdr Jbsl/Pay Tt  XF) ('PKBFXFR');
PARAMETER(CTL.BOH_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Revise
IF RCD.*SFLSEL = '2';

// OR RCD.*SFLSEL is *Revise#2
OR RCD.*SFLSEL = '2';

// Call program Zzz Bo Payments       ER.
CALL PROGRAM(Zzz Bo Payments       ER) ('PKBHE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(CTL.Oms_Name);

ENDIF;

CASE;

// IF RCD.*SFLSEL is Internal
IF RCD.*SFLSEL = 'I';

EXECUTE FUNCTION(Dlt Tattoo Ded/Add    RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1143415;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Deduction) TYPE(DLTOBJ) FILE(PKCDCPP)            AB1107819;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
}


EXECUTE FUNCTION(Clc CrMrt/Frt/DA/Net  IF) TYPE(EXCINTFUN)                      AB1186210;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Live_Gross_Amt);
PARAMETER(RCD.TH_LIve_Net_Amt);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Adj_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Market_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Payment_Gross);
PARAMETER(RCD.Th_Payment_Net_Amt);
PARAMETER(RCD.TH_AP_Voucher_Document#);
PARAMETER(RCD.TH_Freight_Amount);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Header_Error_Sts);
PARAMETER(RCD.TH_Detail_Error_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Head_Excluded);
PARAMETER(RCD.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(RCD.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Live_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(RCD.TH_CM_Gross_Live_CWT);
PARAMETER(RCD.TH_CM_Gross_Carc_CWT);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Posted_to_HPS_Flag);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(RCD.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.TH_VC_Gross_Value_HD);
PARAMETER(RCD.TH_PHA_Sort_Disc_Fctr);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(CTL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Competitors_Code_1_Usr);
PARAMETER(LCL.Competitors_Code_2_Usr);
PARAMETER(LCL.Competitors_Code_3_Usr);
{
 //?Execute internal function

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 EXECUTE FUNCTION(HPE096) TYPE(EXCINTFUN)                                        AB1196857;
 EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(WRK.HC_Description);
 PARAMETER(WRK.HC_Defect_Required);
 PARAMETER(WRK.HC_Price_Required);
 PARAMETER(WRK.HC_Resolution);
 PARAMETER(WRK.HC_Qualification);
 PARAMETER(WRK.HC_Class_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Market and head kill greater then zero
 //?Carcass Merit processing
 CASE;

 // IF WRK.HC Class Type is Market
 IF WRK.HC_Class_Type = 'M';

 CASE;

 // IF PAR.TH Payment Sts is Live anything
 IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Carcass/Market only
 //?*Retrieve Purchase Price calculation information.
 //?1/28/2008 SLM CHANGE ON NOT FOUND TO PASS BACK CON VALUE
 EXECUTE FUNCTION(Rtv PrchPrc Clc Info  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1116661;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(WRK.BOH_Market_Add_Deduct);
 PARAMETER(WRK.BOH_Quote_Price_Type);
 PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(WRK.BOH_Commodity_Market_Code);
 PARAMETER(WRK.BOH_Commodity_Price_Group);
 PARAMETER(WRK.BOH_Market_Date_Method);
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PO_Option_Code);
 PARAMETER(WRK.CMP_Program_Code);
 {
  //?USER: Processing if Data record not found

  //?1/28/08 SLM LEFT OVER INFORMATION MAY HAVE CAUSED ISSUES
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?1/28/2008 SLM CHANGE ON NOT FOUND TO PASS BACK CON VALUE
 //?Retrieve Sub-Contract information.
 EXECUTE FUNCTION(Rtv PurchPrc Clc Info RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1116645;
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PSC_Floor_Price);
 PARAMETER(WRK.PSC_Ceiling_Price);
 PARAMETER(WRK.PSC_Market_Percent_NU);
 PARAMETER(WRK.PSC_Break_Even_Percent);
 PARAMETER(WRK.PSC_FLoor_Price_+);
 PARAMETER(WRK.PSC_Sub_Contract_Type);
 PARAMETER(WRK.PSC_Mkt_Percent);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 CASE;

 // IF PAR.TH Payment Type is Live
 IF PAR.TH_Payment_Type = 'L';

 //?The above condition will never be true. PKP/SLM
 //?Analysis
 DO;

 CASE;

 // IF PAR.TH Head Killed is Not Zero
 IF PAR.TH_Head_Killed <> *ZERO;

 // Call program Carcass Merit Process  XF.
 CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
 PARAMETER(WRK.BOH_Market_Add_Deduct);
 PARAMETER(WRK.BOH_Quote_Price_Type);
 PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(WRK.BOH_Commodity_Market_Code);
 PARAMETER(WRK.BOH_Commodity_Price_Group);
 PARAMETER(WRK.BOH_Market_Date_Method);
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PO_Option_Code);
 PARAMETER(WRK.CMP_Program_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price);
 PARAMETER(WRK.PSC_Floor_Price);
 PARAMETER(WRK.PSC_Ceiling_Price);
 PARAMETER(WRK.PSC_Market_Percent_NU);
 PARAMETER(WRK.PSC_Mkt_Percent);
 PARAMETER(WRK.TH_CM_Market_Price);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(PAR.TH_VC_Gross_Value_HD);
 PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
 PARAMETER('N');
 PARAMETER('A');

 ENDIF;

 ENDDO;

 // IF PAR.TH Payment Type is Carcass Merit
 IF PAR.TH_Payment_Type = 'C';

 //?*****************
 //?Commented 01/31/97 for C2343. Per Rick Hoffman
 //?We are not going through Analysis because it will be the same
 //?as what we are going to pay now.
 //?****
 //?If Pork decides to make the Average Competitor the Analysis,
 //?this case would be uncommented.  See Clc Carcass Analysis  XF
 //?for further instructions.  PKD/SLM
 //?*****************
 //?Payment
 DO;

 EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?  ** HPE053P
 //?FOR Carcass, call the XF even if Head Killed is 0, because
 //? we need the th cm base mkt price if Ins Reimb is to be calcd.
 //?Head Killed is checked in the XF.
 // Call program Carcass Merit Process  XF.
 CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
 PARAMETER(WRK.BOH_Market_Add_Deduct);
 PARAMETER(WRK.BOH_Quote_Price_Type);
 PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(WRK.BOH_Commodity_Market_Code);
 PARAMETER(WRK.BOH_Commodity_Price_Group);
 PARAMETER(WRK.BOH_Market_Date_Method);
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(WRK.PO_Option_Code);
 PARAMETER(WRK.CMP_Program_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(WRK.TH_CM_Base_Mkt_Price);
 PARAMETER(WRK.PSC_Floor_Price);
 PARAMETER(WRK.PSC_Ceiling_Price);
 PARAMETER(WRK.PSC_Market_Percent_NU);
 PARAMETER(WRK.PSC_Mkt_Percent);
 PARAMETER(WRK.TH_CM_Market_Price);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(PAR.TH_VC_Gross_Value_HD);
 PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
 PARAMETER('N');
 PARAMETER('P');

 ENDDO;

 ENDIF;

 ENDIF;

 //?Carcass Merit processing
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?Freight
 DO;

 //?Modification history
 DO;

 //? 3/07/2019 JBB E14281 - Zero prices on BOL
 //?                        Added parameter to BOL RTVOBJ to get Market
 //?                        Head Received.
 ENDDO;

 //?Get bol frt fields, and find out if any tattoo for this
 //?load has been paid.
 //?If a tattoo has been paid bringh this back, also held over frt bug
 // Call program Rtv Frt All f/BOL/TTO  XF.
 CALL PROGRAM(Rtv Frt All f/BOL/TTO  XF) ('PKEHXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_UOM);
 PARAMETER(WRK.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(WRK.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Head_Received_Market);
 PARAMETER(WRK.Tattoo_is_paid_Usr);
 PARAMETER(WRK.Held_Over_Records_Y_N);
 PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
 PARAMETER(WRK.Frt_Amt_spread_Usr);

 //?If allocated but no paid then allow to re spread of frt
 //?If not allocated allow spread of frt
 CASE;

 // IF WRK.Tattoo is paid Usr is No
 IF WRK.Tattoo_is_paid_Usr = 'N';

 // AND WRK.BOL Freight Allocation is Freight is Allocated
 AND WRK.BOL_Freight_Allocation = 'Y';

 // WRK.Freight Allociation Apply = CND.Yes
 WRK.Freight_Allociation_Apply = 'Y';

 // Call program Clc Frght Allctn/UnAl  XF.
 CALL PROGRAM(Clc Frght Allctn/UnAl  XF) ('PKQ6XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_UOM);
 PARAMETER(WRK.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(WRK.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Head_Received_Market);
 PARAMETER(WRK.Freight_Allociation_Apply);

 // IF WRK.BOL Freight Allocation is Freight is not Allocated
 IF WRK.BOL_Freight_Allocation = *BLANK;

 // WRK.Freight Allociation Apply = CND.Yes
 WRK.Freight_Allociation_Apply = 'Y';

 // Call program Clc Frght Allctn/UnAl  XF.
 CALL PROGRAM(Clc Frght Allctn/UnAl  XF) ('PKQ6XFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_UOM);
 PARAMETER(WRK.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.BOL_Freight_Amt);
 PARAMETER(WRK.BOL_Freight_Allocation);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.BOL_Head_Received_Market);
 PARAMETER(WRK.Freight_Allociation_Apply);

 ENDIF;

 ENDDO;

 CASE;

 // IF PAR.TH Payment Sts is Paid Anything
 IF PAR.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // WRK.Ded/Add/Net Pay Usr = CND.Paid no del or Create
 WRK.Ded_Add_Net_Pay_Usr = 'P';

 // Call program Clc Ded/Add/Net Pay   XF.
 CALL PROGRAM(Clc Ded/Add/Net Pay   XF) ('PKREXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(WRK.Ded_Add_Net_Pay_Usr);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Second time to create da
 // WRK.Ded/Add/Net Pay Usr = CND.Create ded/Add/Net Pay
 WRK.Ded_Add_Net_Pay_Usr = 'C';

 // Call program Clc Ded/Add/Net Pay   XF.
 CALL PROGRAM(Clc Ded/Add/Net Pay   XF) ('PKREXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(WRK.Ded_Add_Net_Pay_Usr);

 ENDIF;

}


ENDIF;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is Mark for Payment
IF RCD.*SFLSEL = '1'/'1';

EXECUTE FUNCTION(Chg Sel/UnSel Payment RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1115572;
PARAMETER(*MISSING);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER('SL');

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

