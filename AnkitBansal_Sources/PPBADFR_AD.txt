// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPBADFR
// ?Date: 14.08.2025 Time: 03:39:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?USER: Initialize subfile record from DBF record

//?deleted stuff
DO;

ENDDO;

//?Select Trading Partner if requested
CASE;

// IF CTL.EDI Trading Partner No. is Not Entered
IF CTL.EDI_Trading_Partner_No = *BLANK;

// OR CTL.EDI Trading Partner No. EQ RCD.EDI Trading Partner No.
OR CTL.EDI_Trading_Partner_No = RCD.EDI_Trading_Partner_No;

//?Select Trading Partner if requested
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Get Trade Partner Control Info.
CASE;

// IF RCD.EDI Trading Partner No. is Entered
IF RCD.EDI_Trading_Partner_No <> *BLANK;

//?10/01/19 DN S15503-Changed to Get Also 'Use PO Price'.
EXECUTE FUNCTION(RTV TPC for EDI PO    RT) TYPE(RTVOBJ) FILE(PBB8REP)           AC2140000;
PARAMETER(RCD.EDI_Trading_Partner_No);
PARAMETER(NLL.Extol_Control_Flag);
PARAMETER(NLL.Live_with_ERP);
PARAMETER(RCD.Live_w_EDI_Auto_Orders);
PARAMETER(RCD.Use_PO_Price);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Trade Partner Control Info.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Live w/EDI Auto Orders = CND.Blank
RCD.Live_w_EDI_Auto_Orders = *BLANK;

// RCD.Use PO Price = CND.Not Entered
RCD.Use_PO_Price = *BLANK;

ENDIF;

//?Select Auto Ords
CASE;

// IF CTL.Live w/EDI Auto Orders is Blank
IF CTL.Live_w_EDI_Auto_Orders = *BLANK;

// OR CTL.Live w/EDI Auto Orders EQ RCD.Live w/EDI Auto Orders
OR CTL.Live_w_EDI_Auto_Orders = RCD.Live_w_EDI_Auto_Orders;

//?Select Auto Ords
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Use PO Price.                       10/03/19 DN S15503
CASE;

// IF CTL.Use PO Price is Not Entered
IF CTL.Use_PO_Price = *BLANK;

// OR CTL.Use PO Price EQ RCD.Use PO Price
OR CTL.Use_PO_Price = RCD.Use_PO_Price;

//?Select by Use PO Price.                       10/03/19 DN S15503
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Deny PO Reason - 11/13/17 DN E011229
CASE;

// IF CTL.Don't Create Order Reason is *Blanks
IF CTL.Don_t_Create_Order_Reason = *BLANK;

// OR CTL.Don't Create Order Reason EQ RCD.Don't Create Order Reason
OR CTL.Don_t_Create_Order_Reason = RCD.Don_t_Create_Order_Reason;

//?Select Deny PO Reason - 11/13/17 DN E011229
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?* Put OH Order Number on the screen if it exists      E011229
// RCD.OH Order Number = DB1.OH Order Number
RCD.OH_Order_Number = DB1.OH_Order_Number;

//?Get Ship To DUNS and Name, then Ship To Number        E011229
EXECUTE FUNCTION(Rtv All info by type  RT) TYPE(RTVOBJ) FILE(ECP006)            AC2140467;
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('ST');
PARAMETER(RCD.N102_NAME);
PARAMETER(LCL.N103_ID_CODE_QUALIFIER);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(NLL.N201_NAME);
PARAMETER(NLL.N202_NAME);
PARAMETER(LCL.N301_ADD);
PARAMETER(LCL.N302_ADDRESS);
PARAMETER(LCL.N401_CITY);
PARAMETER(LCL.N402_STATE);
PARAMETER(LCL.N403_POSTAL_CODE);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Retrieve BT/BY Name and DUNS
//?Check for Buyer name (Why Walmart Buyer?)
CASE;

// IF RCD.N102-NAME is Not Entered
IF RCD.N102_NAME = *BLANK;

EXECUTE FUNCTION(Rtv Ship To Name      RT) TYPE(RTVOBJ) FILE(ECP006)            AC1678789;
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('BY');
PARAMETER(RCD.N102_NAME);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF RCD.N102-NAME is Not Entered
IF RCD.N102_NAME = *BLANK;

EXECUTE FUNCTION(Rtv Ship To Name      RT) TYPE(RTVOBJ) FILE(ECP006)            AC1678789;
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
PARAMETER('BS');
PARAMETER(RCD.N102_NAME);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

//?11/14/19 DN S15503-Changed to Check for Active Customer.
//?09/03/20 RMC  dont bring back Trade partner from ST - it isnt on the ST!
//?02/22/21 DN R17040-Changed to Check that EDI Trading Partner # matches.
//?   Changed EDI Trading Partner No. Parm from output to input.
EXECUTE FUNCTION(Rtv EDI ST by EDI Duns RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC2140468;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DB1.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?02/22/21 DN R17040-Old Logic. Commented Out.
 //?***NOTE: Any changes made here, should consider changes to
 //?         'Rtv Sales Rte-1st ShToRT - Customer EXT',
 //?         'PRT BT Cust by DUNS   PO - Customer EXT' &
 //?         'PRT ST Cust by DUNS   PO - Customer EXT' functions as
 //?         well. BOTH functions share the same Business Logic to get
 //?         the correct EDI Ship To Customer #. ***
 //?03/01/21 DN R17040-New Logic: Get 1st Active STC# by DUNS#/Trade Partner.
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 //?Get Ship To Cust Flag & Bill To Customer #.
 EXECUTE FUNCTION(Rtv ShpTo Info/AR Cst RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1522850;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.Customer_Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.State_Code);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Order_Entry_Hold);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Must Be Use as Ship To Customer.
 CASE;

 // IF LCL.Ship To Customer Flag is Allow Use as Ship To Cust
 IF LCL.Ship_To_Customer_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Trading Partner   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2195397;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Match by Trading Partner for Bill To Customer.
 CASE;

 // IF PAR.EDI Trading Partner No. EQ LCL.EDI Trading Partner No.
 IF PAR.EDI_Trading_Partner_No = LCL.EDI_Trading_Partner_No;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF DB1.Don't Create Order Reason is *Blanks
IF DB1.Don_t_Create_Order_Reason = *BLANK;

// RCD.USR Description 22 = CON.*BLANK
RCD.USR_Description_22 = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Description 22 = Condition name of DB1.Don't Create Order Reason
RCD.USR_Description_22 = RTVCND(DB1.Don_t_Create_Order_Reason);

ENDIF;

//?If the name is still blank
//?If Name blank, use Shipto Duns number and retrieve name.
CASE;

// IF RCD.N102-NAME is Not Entered
IF RCD.N102_NAME = *BLANK;

EXECUTE FUNCTION(Rtv Sales Route       RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1638220;
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(NLL.Sales_Route_Description);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Salesperson_Name);
PARAMETER(NLL.Email_Address);
{
 //?USER: Process Data record

 // PAR.Ship To Customer = DB1.Ship To Customer
 PAR.Ship_To_Customer = DB1.Ship_To_Customer;

 EXECUTE FUNCTION(Rtv EDI Customer Info RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1638223;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Special_Instructions_2);
 PARAMETER(PAR.Special_Instructions);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Description);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Email_Address);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.EDI Status 3 is Blank
 IF LCL.EDI_Status_3 = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(JOB.*USER);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(LCL.Company_Number);
 PARAMETER('DFTPOEMAIL');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Email Address = LCL.System Value Alpha
 PAR.Email_Address = LCL.System_Value_Alpha;

 ENDIF;

 QUIT;

}


EXECUTE FUNCTION(RTV Credit Limits,Name RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1470848;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.N102_NAME);
PARAMETER(NLL.Parent_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?SEL CUSTOMER NAME
CASE;

// IF CTL.N102-NAME NE WRK.BLANK
IF CTL.N102_NAME <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.N102_NAME);
PARAMETER(25);
PARAMETER(1);
PARAMETER(CTL.N102_NAME);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// CTL.USR Name = CTL.N102-NAME
CTL.USR_Name = CTL.N102_NAME;

//?* Select by Trading Partner column filter
CASE;

// IF CTL.EDI Trading Partner No. NE LCL.EDI Trading Partner No.
IF CTL.EDI_Trading_Partner_No <> LCL.EDI_Trading_Partner_No;

// LCL.EDI Trading Partner No. = CTL.EDI Trading Partner No.
LCL.EDI_Trading_Partner_No = CTL.EDI_Trading_Partner_No;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?* Select by Ship To Name (in caps) column filter
CASE;

// IF CTL.USR Name NE WRK.USR Name
IF CTL.USR_Name <> WRK.USR_Name;

// Execute function CVT to Upper w/SpclChr US.
EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
PARAMETER(CTL.USR_Name);
PARAMETER(CTL.USR_Name);
{
 E                    AR1        30  1               ARRAY 2
 C                     MOVEA#IMKTX    AR1              LOAD ARRAY
 C                     Z-ADD1         X1      20       SET COUNTER
 C                     Z-ADD1         Y1      20       SET COUNTER
 * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
 C                     Z-ADD1         Y1
 C           Y1        DOWLT31
 C           AR1,Y1    IFEQ 'a'
 C                     MOVEL'A'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'b'
 C                     MOVEL'B'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'c'
 C                     MOVEL'C'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'd'
 C                     MOVEL'D'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'e'
 C                     MOVEL'E'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'f'
 C                     MOVEL'F'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'g'
 C                     MOVEL'G'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'h'
 C                     MOVEL'H'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'i'
 C                     MOVEL'I'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'j'
 C                     MOVEL'J'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'k'
 C                     MOVEL'K'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'l'
 C                     MOVEL'L'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'm'
 C                     MOVEL'M'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'n'
 C                     MOVEL'N'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'o'
 C                     MOVEL'O'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'p'
 C                     MOVEL'P'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'q'
 C                     MOVEL'Q'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'r'
 C                     MOVEL'R'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 's'
 C                     MOVEL'S'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 't'
 C                     MOVEL'T'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'u'
 C                     MOVEL'U'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'v'
 C                     MOVEL'V'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'w'
 C                     MOVEL'W'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'x'
 C                     MOVEL'X'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'y'
 C                     MOVEL'Y'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'z'
 C                     MOVEL'Z'       AR1,Y1
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     ADD  1         Y1
 C                     END
 C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
}


// WRK.USR Name = CTL.USR Name
WRK.USR_Name = CTL.USR_Name;

// CTL.N102-NAME = CTL.USR Name
CTL.N102_NAME = CTL.USR_Name;

// WRK.N102-NAME = CTL.USR Name
WRK.N102_NAME = CTL.USR_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?* Select by Auto Ords Y/N column filter               E011229
CASE;

// IF CTL.Live w/EDI Auto Orders NE WRK.Live w/EDI Auto Orders
IF CTL.Live_w_EDI_Auto_Orders <> WRK.Live_w_EDI_Auto_Orders;

// WRK.Live w/EDI Auto Orders = CTL.Live w/EDI Auto Orders
WRK.Live_w_EDI_Auto_Orders = CTL.Live_w_EDI_Auto_Orders;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?* Select by Use PO Price Filter               10/03/19 DN S15503
CASE;

// IF CTL.Use PO Price NE WRK.Use PO Price
IF CTL.Use_PO_Price <> WRK.Use_PO_Price;

// WRK.Use PO Price = CTL.Use PO Price
WRK.Use_PO_Price = CTL.Use_PO_Price;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?* Select by Deny PO Reason -  - 11/13/17 DN E011229
CASE;

// IF CTL.Don't Create Order Reason NE LCL.Don't Create Order Reason
IF CTL.Don_t_Create_Order_Reason <> LCL.Don_t_Create_Order_Reason;

// LCL.Don't Create Order Reason = CTL.Don't Create Order Reason
LCL.Don_t_Create_Order_Reason = CTL.Don_t_Create_Order_Reason;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?* F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E3422 JJH 09/23/14 - Add F10=WW PO Acknowledgement Errors
//?* F10=PO Ack Errors
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program WW PO Acknowledgement DF.
CALL PROGRAM(WW PO Acknowledgement DF) ('PBPSDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F23=Create PO Acknowledgement
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program Pmt Val for PO Ack    PV.
CALL PROGRAM(Pmt Val for PO Ack    PV) ('PBPVPVR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?3=Create Automated Order                              E011229
CASE;

// IF RCD.*SFLSEL is Option 3
IF RCD.*SFLSEL = '3'/'3';

//?Populate parm fields
CASE;

// IF RCD.Live w/EDI Auto Orders is Not Auto Order Cust
IF RCD.Live_w_EDI_Auto_Orders = *BLANK/'I';

// Send error message - 'Customer is not flagged for Live w/EDI Automated Orders.'
ERROR(USR5017);
MSGPARM(RCD.*SFLSEL);

//?Populate parm fields
// IF RCD.OH Order Number is Not Blanks
IF RCD.OH_Order_Number <> *BLANK;

// OR RCD.OH Order Number is Blanks
OR RCD.OH_Order_Number = *BLANK;

//?* Convert fields to correct type and load parm to pass
// PAR.System Value Numeric = RCD.ST02-TRANS SET CONTROL NU
PAR.System_Value_Numeric = RCD.ST02_TRANS_SET_CONTROL_NU;

// PAR.Date 1          PASS  USR = RCD.G6202 Ship Date
PAR.Date_1_PASS_USR = RCD.G6202_Ship_Date;

// PAR.Date 2          PASS  USR = RCD.G6202-DELIVERY DATE
PAR.Date_2_PASS_USR = RCD.G6202_DELIVERY_DATE;

// PAR.From Date Pass        USR = RCD.G5002-ORDER DATE
PAR.From_Date_Pass_USR = RCD.G5002_ORDER_DATE;

//?* Display order info for order create and update
//?10/01/19 DN S15503-Added 'Use PO Price' as Input Parm.
// Call program EDT EDI Automated Ord  DF.
CALL PROGRAM(EDT EDI Automated Ord  DF) ('PUD3DFR');
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(RCD.G5003_PURCHASE_ORDER_NUMB);
PARAMETER(RCD.EDI_Trading_Partner_No);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(RCD.Use_PO_Price);
PARAMETER(LCL.Next_Order_Number);

//?* Prt Order Acknowl if order was created, or error if not
CASE;

// IF PGM.*Return code is Cannot crt EDI PO Order
IF PGM.*Return_code = 'USR5035';

// Send error message - 'Cannot create an order from this PO. Change flag to blanks and update if yo
ERROR(USR5035);
MSGPARM(RCD.*SFLSEL);

//?* Prt Order Acknowl if order was created, or error if not
// IF PGM.*Return code is Invalid Item Numbers
IF PGM.*Return_code = 'USR5036';

// Send error message - 'Item Numbers are invalid or missing and must be corrected before an order c
ERROR(USR5036);

//?* Prt Order Acknowl if order was created, or error if not
// IF PGM.*Return code is Update Occurred
IF PGM.*Return_code = 'UPDOCC';

//?* Print order acknowledgements
// PAR.Order Number 2  PASS  USR = PAR.Order Number 1  PASS  USR
PAR.Order_Number_2_PASS_USR = PAR.Order_Number_1_PASS_USR;

// WRK.Company Number = PAR.Company Number Pass   USR
WRK.Company_Number = PAR.Company_Number_Pass_USR;

// WRK.Company Value Code Usr = CND.Domestic Sales Printer
WRK.Company_Value_Code_Usr = 'DOMPRINTER';

// WRK.Hold = CND.No
WRK.Hold = *NO;

//?* Default to Guymon if company is zeros
CASE;

// IF WRK.Company Number is Equal to zero
IF WRK.Company_Number = *ZERO;

// WRK.Company Number = CND.Guymon
WRK.Company_Number = 360;

ENDIF;

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Company_Value_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);

// Call program PRT Acknowledgements UP.
CALL PROGRAM(PRT Acknowledgements UP) ('PDJWPCLP');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(1);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('S');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(*NO);
PARAMETER(*YES);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('N');

ENDIF;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?5=Display PO Print
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Print for PO      CL.
CALL PROGRAM(DSP Print for PO      CL) ('PBLZUPR');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);

ENDIF;

//?6=Print Schedule
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

//?Print Prompt
CASE;

// IF PAR.Display Prt Opt Pmt USR is *YES
IF PAR.Display_Prt_Opt_Pmt_USR = *YES;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Purchase Order');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');

CASE;

// IF PAR.PRT Printer Device is Not entered
IF PAR.PRT_Printer_Device = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Prt Opt Pmt USR = CND.*NO
PAR.Display_Prt_Opt_Pmt_USR = *NO;

ENDIF;

ENDIF;

//?Submit Report
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Report
// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRINTPO');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = PAR.PRT Number of Copies
LCL.Copies_NBR_USR = PAR.PRT_Number_of_Copies;

// Call program Prt Purchase Order    CL.
SBMJOB;
CALL PROGRAM(Prt Purchase Order    CL) ('PPBDUPR');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(RCD.ST02_TRANS_SET_CONTROL_NU);
SBMJOBOVR JOB(PRINTPO);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

