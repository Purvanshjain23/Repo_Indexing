// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNU8PVR
// ?Date: 14.08.2025 Time: 03:52:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

CASE;

// IF PAR.Call Mode is Change
IF PAR.Call_Mode = 'C';

EXECUTE FUNCTION(Rtv all fields        RT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2240191;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Interchange_Code);
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_File_Set);
PARAMETER(DTL.EDI_unused_text_10);
PARAMETER(DTL.EDI_unused_text_15);
PARAMETER(DTL.EDI_unused_text_14);
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);
PARAMETER(DTL.EDI_unused_nbr_15);
PARAMETER(DTL.EDI_PO_ACK_Required);
PARAMETER(DTL.EDI_BTI_Req_Pre_Invoice);
PARAMETER(DTL.EDI_BTI_GTIN_Required);
PARAMETER(DTL.EDI_Detailed_ASN_856_Rqd);
PARAMETER(DTL.EDI_Tare_Level_Req_f_856);
PARAMETER(DTL.Do_not_Send_for_Manual_PO);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV EDI Interchange   RT) TYPE(RTVOBJ) FILE(PNGNREP)           AC2006128;
PARAMETER(DTL.Interchange_Code);
PARAMETER(DTL.Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Class Desc        RT) TYPE(RTVOBJ) FILE(PNGPREP)           AC2023074;
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.Class_Code_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine whether or not to display Do not Send for Manual PO field
CASE;

// IF DTL.Interchange Code is Invoice             810
IF DTL.Interchange_Code = 'IN';

// OR DTL.Interchange Code is Adv Ship Notice     856
OR DTL.Interchange_Code = 'ADVSN';

// OR DTL.Interchange Code is PO Acknowledgement  855
OR DTL.Interchange_Code = 'POACK';

// OR DTL.Interchange Code is PO Change Ack       865
OR DTL.Interchange_Code = 'POCACK';

// LCL.Hide Screen Field USR = CND.Display
LCL.Hide_Screen_Field_USR = 'D';

//?Determine whether or not to display Do not Send for Manual PO field
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hide Screen Field USR = CND.Hide
LCL.Hide_Screen_Field_USR = 'H';

ENDIF;

ENDIF;

//?USER: Process command keys

//?F4=Prompt
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Bill to Customer
IF PGM.*Cursor_field = DTL.Bill_to_Customer;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.Bill_to_Customer);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

//?R15305 DN 10/29/19-Allow to Prompt on EDI Trade Partner.
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.EDI Trading Partner No.
AND PGM.*Cursor_field = DTL.EDI_Trading_Partner_No;

// Call program SEL Trade Partner Ctrl SL.
CALL PROGRAM(SEL Trade Partner Ctrl SL) ('PBSUSRR');
PARAMETER(DTL.EDI_Trading_Partner_No);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Class Desc        RT) TYPE(RTVOBJ) FILE(PNGPREP)           AC2023074;
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.Class_Code_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R15305 DN 10/09/19-Validate Active Trade Partner.
EXECUTE FUNCTION(Rtv Record Status     RT) TYPE(RTVOBJ) FILE(PBB8REP)           AC2177019;
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Trade Partner Must Be Active.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Trade Partner
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// LCL.Generic Message 80 USR = CONCAT(CON.Invalid option. Trading P,CON.artner is inactive.,CON.*ZE
LCL.Generic_Message_80_USR = 'Invalid option. Trading P' + 'artner is inactive.' (0);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.EDI_Trading_Partner_No);

ENDIF;

//?Validate Trade Partner Must Be Active.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Trade Partner Control not found.'
ERROR(USR4842);

ENDIF;

//?R15305 DN 12/04/19-Record Status Cannot Be Blank.
CASE;

// IF DTL.Record Status is *blank
IF DTL.Record_Status = *BLANK;

// LCL.Generic Message 80 USR = CON.Value A or I required.
LCL.Generic_Message_80_USR = 'Value A or I required.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Record_Status);

ENDIF;

//?R17040 DN 05/14/21-Validate EDI Tare Level Req f/856.
CASE;

// IF DTL.EDI Detailed ASN 856 Rqd is Yes
IF DTL.EDI_Detailed_ASN_856_Rqd = 'Y';

CASE;

// IF DTL.EDI Tare Level Req f/856 is Yes
IF DTL.EDI_Tare_Level_Req_f_856 = 'Y';

// OR DTL.EDI Tare Level Req f/856 is No
OR DTL.EDI_Tare_Level_Req_f_856 = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.EDI Tare Level must be 'Y,CON.or N'.,CON.1)
LCL.Generic_Message_80_USR = 'EDI Tare Level must be 'Y' + 'or N'.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.EDI_Tare_Level_Req_f_856);

QUIT;

ENDIF;

ENDIF;

//?Determine whether or not to display Do not Send for Manual PO field
CASE;

// IF DTL.Interchange Code is Invoice             810
IF DTL.Interchange_Code = 'IN';

// OR DTL.Interchange Code is Adv Ship Notice     856
OR DTL.Interchange_Code = 'ADVSN';

// OR DTL.Interchange Code is PO Acknowledgement  855
OR DTL.Interchange_Code = 'POACK';

// OR DTL.Interchange Code is PO Change Ack       865
OR DTL.Interchange_Code = 'POCACK';

// LCL.Hide Screen Field USR = CND.Display
LCL.Hide_Screen_Field_USR = 'D';

//?Validate entered value (Y, N, or blank)
CASE;

// IF DTL.Do not Send for Manual PO is Send the Document (blank)
IF DTL.Do_not_Send_for_Manual_PO = *BLANK;

// OR DTL.Do not Send for Manual PO is Send the Document (N)
OR DTL.Do_not_Send_for_Manual_PO = 'N';

// OR DTL.Do not Send for Manual PO is Do not Send (Y)
OR DTL.Do_not_Send_for_Manual_PO = 'Y';

//?Validate entered value (Y, N, or blank)
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.Do not Send for Manual PO,CON.must be Y, N, or blank.,CND
LCL.Generic_Message_80_USR = 'Do not Send for Manual PO' + 'must be Y, N, or blank.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Do_not_Send_for_Manual_PO);

ENDIF;

//?Determine whether or not to display Do not Send for Manual PO field
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hide Screen Field USR = CND.Hide
LCL.Hide_Screen_Field_USR = 'H';

// DTL.Do not Send for Manual PO = CND.Send the Document (blank)
DTL.Do_not_Send_for_Manual_PO = *BLANK;

ENDIF;

ENDIF;

//?USER: User defined action

CASE;

// IF PAR.Call Mode is Add
IF PAR.Call_Mode = 'A';

EXECUTE FUNCTION(Crt EDI Bill To Intrc CR) TYPE(CRTOBJ) FILE(PNGQREP)           AC2005722;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Interchange_Code);
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_File_Set);
PARAMETER(DTL.EDI_unused_text_10);
PARAMETER(DTL.EDI_unused_text_15);
PARAMETER(DTL.EDI_unused_text_14);
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);
PARAMETER(DTL.EDI_unused_nbr_15);
PARAMETER(DTL.EDI_PO_ACK_Required);
PARAMETER(DTL.EDI_BTI_Req_Pre_Invoice);
PARAMETER(DTL.EDI_BTI_GTIN_Required);
PARAMETER(DTL.EDI_Detailed_ASN_856_Rqd);
PARAMETER(DTL.EDI_Tare_Level_Req_f_856);
PARAMETER(DTL.Do_not_Send_for_Manual_PO);
PARAMETER(DTL.Record_Status);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


// IF PAR.Call Mode is Change
IF PAR.Call_Mode = 'C';

EXECUTE FUNCTION(Chg EDI Bill To Intrc CH) TYPE(CHGOBJ) FILE(PNGQREP)           AC2005723;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Interchange_Code);
PARAMETER(DTL.Class_Code);
PARAMETER(DTL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_File_Set);
PARAMETER(DTL.EDI_unused_text_10);
PARAMETER(DTL.EDI_unused_text_15);
PARAMETER(DTL.EDI_unused_text_14);
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);
PARAMETER(DTL.EDI_unused_nbr_15);
PARAMETER(DTL.EDI_PO_ACK_Required);
PARAMETER(DTL.EDI_BTI_Req_Pre_Invoice);
PARAMETER(DTL.EDI_BTI_GTIN_Required);
PARAMETER(DTL.EDI_Detailed_ASN_856_Rqd);
PARAMETER(DTL.EDI_Tare_Level_Req_f_856);
PARAMETER(DTL.Do_not_Send_for_Manual_PO);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


ENDIF;

