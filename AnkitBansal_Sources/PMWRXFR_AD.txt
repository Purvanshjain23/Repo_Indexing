// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWRXFR
// ?Date: 14.08.2025 Time: 03:44:22
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC use lf with Actual ship date as 1st key field so we can position!!!!!
EXECUTE FUNCTION(Crt WF SlsHistbyShpNm RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1891745;
PARAMETER(PAR.WF_Sales_History_BrkTyp);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.USR_From_Date);
PARAMETER(PAR.USR_From_Date);
PARAMETER(PAR.USR_To_Date);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Quality_Level);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER(PAR.Report_Type_USR);
{
 //?USER: Process Data record

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 //?** Select by Company Number
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 // AND DB1.Company Number NE PAR.Company Number
 AND DB1.Company_Number <> PAR.Company_Number;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 //?** If Record Selected, test by Actual Shipped Date
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 //?** Select by Actual Shipped Date
 CASE;

 // IF DB1.Actual Shipped Date GT PAR.USR To Date
 IF DB1.Actual_Shipped_Date > PAR.USR_To_Date;

 // OR DB1.Actual Shipped Date LT PAR.USR From Date
 OR DB1.Actual_Shipped_Date < PAR.USR_From_Date;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 //?quit when date is gt parms
 QUIT;

 ENDIF;

 ENDIF;

 //?** If Record Selected, test Parent Number
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 CASE;

 // IF PAR.Parent Customer is not equal to zero
 IF PAR.Parent_Customer <> *ZERO;

 // AND PAR.Parent Customer NE DB1.Parent Customer
 AND PAR.Parent_Customer <> DB1.Parent_Customer;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?** If Record Selected, test A/R Customer number
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 CASE;

 // IF PAR.A/R Customer Number is not equal to zero
 IF PAR.AR_Customer_Number <> *ZERO;

 // AND PAR.A/R Customer Number NE DB1.A/R Customer Number
 AND PAR.AR_Customer_Number <> DB1.AR_Customer_Number;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?** If Record Selected, test Ship to number
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 // AND PAR.Ship To Customer NE DB1.Ship To Customer
 AND PAR.Ship_To_Customer <> DB1.Ship_To_Customer;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // LCL.Extended Amt Total = CON.*ZERO
 LCL.Extended_Amt_Total = *ZERO;

 //?** If Record Selected, test Accrual Type accum Ledgrd Trd Fund Accrl Amt
 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 //?** par.quality level = Accrual Type
 //?** par.item type code = Accrual code
 //?** par.status - y/n  = Ledger Accrual Y/N
 //?** Retrieve Accrual Rate by Accrual Type
 CASE;

 // IF PAR.Quality Level is Entered
 IF PAR.Quality_Level <> *BLANK;

 //?7/30/02
 //?3/07/05 RMC - accum extended amt by order/order seq -- not by sec seq
 //?** Retrieve by Accrual Type
 //?7/31/08 RMC - accum extended amt tot by order/order seq -- not by sec seq
 EXECUTE FUNCTION(Rtv Accrual by Type   RT) TYPE(RTVOBJ) FILE(PDICCPP)           AC1829268;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Accrual_Rate);
 PARAMETER(LCL.Extended_Amt_Total);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Status_Y_or_N);
 {
  //?USER: Initialize routine

  // PAR.Extended Amount = CON.*ZERO
  PAR.Extended_Amount = *ZERO;

  // PAR.Accrual Rate = CND.equal to zero
  PAR.Accrual_Rate = *ZERO;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?SEL: Ledgered Accrual
  CASE;

  // IF PAR.Ledger Accrual (Y/N) NE DB1.HDA Ledger Accrual Y/N
  IF PAR.Post_to_G_L_Y_N <> DB1.HDA_Post_to_G_L_Y_N;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?SEL: Accrual Code
  CASE;

  // IF PAR.Accrual Code is Entered
  IF PAR.Accrual_Code <> *BLANK;

  // AND PAR.Accrual Code NE DB1.Accrual Code
  AND PAR.Accrual_Code <> DB1.Accrual_Code;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  // PAR.Extended Amount = PAR.Extended Amount + DB1.Extended Amount
  PAR.Extended_Amount = PAR.Extended_Amount + DB1.Extended_Amount;

  // PAR.Accrual Rate = DB1.Accrual Rate
  PAR.Accrual_Rate = DB1.Accrual_Rate;

  ENDIF;

  //?11/25/11 PKD Below code was not working.
 }

 CASE;

 // IF LCL.Accrual Rate is equal to zero
 IF LCL.Accrual_Rate = *ZERO;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 // LCL.WF SalesHst Break Level 1 = CON.*BLANK
 LCL.WF_SalesHst_Break_Level_1 = *BLANK;

 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Parent / Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1658639;
 PARAMETER(DB1.Parent_Customer);
 PARAMETER(LCL.Parent_Name);
 PARAMETER(NLL.Parent_Customer);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Format Parent Break A/R Break or Ship to
 CASE;

 // IF PAR.WF Sales History - BrkTyp is Parent
 IF PAR.WF_Sales_History_BrkTyp = 'P';

 // WRK.Text 10A USR = CVTVAR(DB1.Parent Customer)
 WRK.Text_10A_USR = CVTVAR(DB1.Parent_Customer);

 // LCL.WF SalesHst Break Level 1 = CONCAT(CON.Parent:,WRK.Text 10A USR,CON.2)
 LCL.WF_SalesHst_Break_Level_1 = 'Parent:' + WRK.Text_10A_USR (2);

 // LCL.WF SalesHst Break Level 1 = CONCAT(LCL.WF SalesHst Break Level 1,LCL.Parent Name,CON.2)
 LCL.WF_SalesHst_Break_Level_1 = LCL.WF_SalesHst_Break_Level_1 + LCL.Parent_Name (2);

 //?Format Parent Break A/R Break or Ship to
 // IF PAR.WF Sales History - BrkTyp is Bill To
 IF PAR.WF_Sales_History_BrkTyp = 'B';

 // WRK.Text 10A USR = CVTVAR(DB1.A/R Customer Name)
 WRK.Text_10A_USR = CVTVAR(DB1.AR_Customer_Name);

 // LCL.WF SalesHst Break Level 1 = CONCAT(CON.A/R Customer:,WRK.Text 10A USR,CON.2)
 LCL.WF_SalesHst_Break_Level_1 = 'A/R Customer:' + WRK.Text_10A_USR (2);

 // LCL.WF SalesHst Break Level 1 = CONCAT(LCL.WF SalesHst Break Level 1,DB1.A/R Customer Name,CON.2
 LCL.WF_SalesHst_Break_Level_1 = LCL.WF_SalesHst_Break_Level_1 + DB1.AR_Customer_Name (2);

 //?Format Parent Break A/R Break or Ship to
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Text 10A USR = CVTVAR(DB1.Ship To Customer)
 WRK.Text_10A_USR = CVTVAR(DB1.Ship_To_Customer);

 // LCL.WF SalesHst Break Level 1 = CONCAT(CON.Shipped To Customer:,WRK.Text 10A USR,CON.2)
 LCL.WF_SalesHst_Break_Level_1 = 'Shipped To Customer:' + WRK.Text_10A_USR (2);

 // LCL.WF SalesHst Break Level 1 = CONCAT(LCL.WF SalesHst Break Level 1,DB1.Ship To Name,CON.2)
 LCL.WF_SalesHst_Break_Level_1 = LCL.WF_SalesHst_Break_Level_1 + DB1.Ship_To_Name (2);

 ENDIF;

 // LCL.Weight Billed = DB1.Weight Billed
 LCL.Weight_Billed = DB1.Weight_Billed;

 //?reverse sign if credit memo and positive   3/29/05 RMC
 CASE;

 // IF DB1.Ledgrd Trd Fund Accrl Amt is Less than zero
 IF DB1.Ledgrd_Trd_Fund_Accrl_Amt < *ZERO;

 // AND DB1.Weight Billed is Greater than zero
 AND DB1.Weight_Billed > *ZERO;

 // LCL.Weight Billed = CON.*ZERO - DB1.Weight Billed
 LCL.Weight_Billed = *ZERO - DB1.Weight_Billed;

 ENDIF;

 EXECUTE FUNCTION(Create WF Sales History) TYPE(CRTOBJ) FILE(PMD1CPP)            AC1891461;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.WF_Sales_History_BrkTyp);
 PARAMETER(LCL.WF_SalesHst_Break_Level_1);
 PARAMETER(DB1.Parent_Customer);
 PARAMETER(LCL.Parent_Name);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.AR_Customer_Name);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Quantity_Billed);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(DB1.Shipped_Item_Code);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Accrual_Rate);
 PARAMETER(LCL.Extended_Amt_Total);
 ENDIF;

}


