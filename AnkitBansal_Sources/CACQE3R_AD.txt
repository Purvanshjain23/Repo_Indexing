// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for CACQE3R
// ?Date: 14.08.2025 Time: 03:26:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Installation Qst   RT) TYPE(RTVOBJ) FILE(CAAAREP)          AC1102976;
PARAMETER('GY');
PARAMETER(PAR.Inventory_Status);
PARAMETER(PAR.Order_Processing_Status);
PARAMETER(PAR.Sales_Analysis_Status);
PARAMETER(PAR.Purchasing_Status);
PARAMETER(PAR.General_Ledger_Status);
PARAMETER(PAR.Accounts_Payable_Status);
PARAMETER(PAR.Accounts_Receivable_Sts);
PARAMETER(WRK.Payroll_Status);
PARAMETER(WRK.Serialized_Inventory_Sts);
PARAMETER(WRK.Single_Level_Kit_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

//?***** Change Log
DO;

//?** 04/20/2006 LJB
//?** Add FSV Manual Price Acceptance Percentage field to the
//?** first maintenance screen. Co 960 FSV products were being placed
//?** on the exception report and required a pricing override because
//?** this field could not be maintained.
//?*****
//?** 12/01/2006 LJB PK0039
//?** Remove a/r aging ranges and age by field, these are now
//?** stored in the a/r aging control file
//?*****
//?** 03/03/2008 RMC FP1110
//?** Change val of Next PO number to Next Customer Numbering --
//?** Dailys next number comes from JDE, else the user enters it.
//?*****
//?** 01/23/2014 RMC E2991
//?** Change val of Next Late Charge to Next Charge Back Number
//?*****
ENDDO;

//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate key screen

//?Prompt/Select company
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Accounting Company Number
AND PGM.*Cursor_field = KEY.Company_Number;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(KEY.Company_Number);

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (new record)

// DTL.Auto Order Numbering? = CND.yes
DTL.Auto_Order_Numbering = 'Y';

// DTL.Auto Inv. Ref. Numbering? = CND.yes
DTL.Auto_Inv_Ref_Numbering = 'Y';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Print Co Name/Address = CND.yes
DTL.Print_Co_Addr_on_Acknow = 'Y';

//?Default Order Processing Values
CASE;

// IF PAR.Order Processing Status is yes
IF PAR.Order_Processing_Status = 'Y';

// DTL.Auto Order Numbering? = CND.yes
DTL.Auto_Order_Numbering = 'Y';

// 2ND.Credit Hold Status = CND.yes
2ND.Credit_Hold_Status = 'Y';

//?Default Order Processing Values
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Auto Order Numbering? = CND.no
DTL.Auto_Order_Numbering = 'N';

// 2ND.Credit Hold Status = CND.no
2ND.Credit_Hold_Status = 'N';

ENDIF;

//?Default Accounts Payable Values
CASE;

// IF PAR.Accounts Payable Status is yes
IF PAR.Accounts_Payable_Status = 'Y';

// DTL.Auto Voucher Numbering? = CND.yes
DTL.Auto_Voucher_Numbering = 'Y';

//?Default Accounts Payable Values
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Auto Voucher Numbering? = CND.no
DTL.Auto_Voucher_Numbering = 'N';

ENDIF;

// 2ND.Allocate Credit Hold Orde = CND.no
2ND.Allocate_Credit_Hold_Orde = 'N';

//?** age by flag is now in the a/r aging control file 12/01/06 LJB
// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

// 2ND.Company Name = KEY.Company Name
2ND.Company_Name = KEY.Company_Name;

// 3RD.Company Name = KEY.Company Name
3RD.Company_Name = KEY.Company_Name;

//?USER: Initialize detail screen (existing record)

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

// 2ND.Company Name = KEY.Company Name
2ND.Company_Name = KEY.Company_Name;

// 3RD.Company Name = KEY.Company Name
3RD.Company_Name = KEY.Company_Name;

//?USER: Validate detail screen fields

//?Validate G/L batch number entry
CASE;

// IF PAR.General Ledger Status is yes
IF PAR.General_Ledger_Status = 'Y';

CASE;

// IF DTL.Next G/L Batch Number is zeros
IF DTL.Next_PFS_Batch_Number = *ZERO;

// Send error message - 'General Ledger is installed, please enter beginning G/L batch number.'
ERROR(USR0057);
MSGPARM(DTL.Next_PFS_Batch_Number);

ENDIF;

ENDIF;

//?Validate order processing entries
CASE;

// IF PAR.Order Processing Status is yes
IF PAR.Order_Processing_Status = 'Y';

//?Next Order Number required
CASE;

// IF DTL.Next Order Number is Equal to zeros
IF DTL.Next_Order_Number = *ZERO;

// Send error message - 'O/P installed, Next Order # required'
ERROR(USR0063);
MSGPARM(DTL.Next_Order_Number);

ENDIF;

//?Is Auto Reference Numbering No Inv# check
CASE;

// IF DTL.Auto Order Numbering? is no
IF DTL.Auto_Order_Numbering = 'N';

CASE;

// IF DTL.Next Invoice Number is Not equal to zero
IF DTL.Next_Invoice_Number <> *ZERO;

// Send error message - 'O/P installed, Auto Ref # = N, next Invoice # not allowed'
ERROR(USR0209);
MSGPARM(DTL.Next_Invoice_Number);

ENDIF;

ENDIF;

//?Is Auto Reference Numbering Yes inv#  check
CASE;

// IF DTL.Auto Order Numbering? is yes
IF DTL.Auto_Order_Numbering = 'Y';

CASE;

// IF DTL.Next Invoice Number is Equal to zero
IF DTL.Next_Invoice_Number = *ZERO;

// Send error message - 'O/P is installed, Auto Ref # = Y, Next Invoice # required'
ERROR(USR0058);
MSGPARM(DTL.Next_Invoice_Number);

ENDIF;

ENDIF;

//?Is Auto Reference Numbering No Credit Memo check
CASE;

// IF DTL.Auto Order Numbering? is no
IF DTL.Auto_Order_Numbering = 'N';

CASE;

// IF DTL.Next Credit Memo Number is not equal to zeros
IF DTL.Next_Credit_Memo_Number <> *ZERO;

// Send error message - 'O/P installed, Auto Ref # = N, Next C.M. # not allowed'
ERROR(USR0208);
MSGPARM(DTL.Next_Credit_Memo_Number);

ENDIF;

ENDIF;

//?Is Auto Reference Numbering Yes Credit Memo check
CASE;

// IF DTL.Auto Order Numbering? is yes
IF DTL.Auto_Order_Numbering = 'Y';

//?Next Credit memo number required
CASE;

// IF DTL.Next Credit Memo Number is Zeros
IF DTL.Next_Credit_Memo_Number = *ZERO;

// Send error message - 'O/P installed, Auto Ref # = Y, Next C.M. # required'
ERROR(USR0059);
MSGPARM(DTL.Next_Credit_Memo_Number);

ENDIF;

ENDIF;

//?Is Auto Load Numbering No Load number check
CASE;

// IF DTL.Auto Load Numbering? is No
IF DTL.Auto_Load_Numbering = 'N';

CASE;

// IF DTL.Next Load ID is Not Equal Zeros
IF DTL.Next_Load_ID <> *ZERO;

// Send error message - 'If Auto Load Number = N, then Next Load Number must be Zero.'
ERROR(USR1230);
MSGPARM(DTL.Next_Load_ID);

ENDIF;

ENDIF;

//?Is Auto Load Numbering Yes Load Number check
CASE;

// IF DTL.Auto Load Numbering? is Yes
IF DTL.Auto_Load_Numbering = 'Y';

//?Next Load Number required
CASE;

// IF DTL.Next Load ID is Zeros
IF DTL.Next_Load_ID = *ZERO;

// Send error message - 'If Auto Load Number=Y, then next load number is required.'
ERROR(USR1231);
MSGPARM(DTL.Next_Load_ID);

ENDIF;

ENDIF;

//?Check Contract/Promo Number
CASE;

// IF DTL.Next Contract/Promo Num. is Zero
IF DTL.Next_Contract_Promo_Num = *ZERO;

// Send error message - 'O/E is installed, please enter next Contract/Promotion number'
ERROR(USR0523);
MSGPARM(DTL.Next_Contract_Promo_Num);

ENDIF;

ENDIF;

//?Validate voucher number entry
CASE;

// IF PAR.Accounts Payable Status is yes
IF PAR.Accounts_Payable_Status = 'Y';

//?Is Auto Voucher yes
CASE;

// IF DTL.Auto Voucher Numbering? is yes
IF DTL.Auto_Voucher_Numbering = 'Y';

CASE;

// IF DTL.Next Voucher Number is Equal to zero
IF DTL.Next_Voucher_Number = *ZERO;

// Send error message - 'Accounts payable installed, automatic voucher numbering = Y, next voucher n
ERROR(USR0064);
MSGPARM(DTL.Next_Voucher_Number);

ENDIF;

ENDIF;

//?Is Auto Voucher no
CASE;

// IF DTL.Auto Voucher Numbering? is no
IF DTL.Auto_Voucher_Numbering = 'N';

CASE;

// IF DTL.Next Voucher Number is Not equal to zero
IF DTL.Next_Voucher_Number <> *ZERO;

// Send error message - 'Accounts payable installed, automatic voucher numbering = N, next voucher n
ERROR(USR0210);
MSGPARM(DTL.Next_Voucher_Number);

ENDIF;

ENDIF;

ENDIF;

//?AUTO Cust numbering (was auto-purchasing numbering before dailys)
CASE;

// IF DTL.Auto Customers Numbering? is yes
IF DTL.Auto_Customers_Numbering = 'Y';

CASE;

// IF DTL.Next Customer # is Not equal to zero
IF DTL.Next_Customer_# <> *ZERO;

//?Next nbr comes from JDE - for example for Dailys foods    3/3/08
// Send error message - 'Automatic customer numbering = Y, next customer s/be -0-. New nbr comes fro
ERROR(USR3899);
MSGPARM(DTL.Next_Customer_#);

ENDIF;

ENDIF;

//?Auto Cust numbering (was auto-purchasing numbering before dailys)
CASE;

// IF DTL.Auto Customers Numbering? is no
IF DTL.Auto_Customers_Numbering = 'N';

//?A/R will enter the number they want. no val necessary  - RMC 3/3/08
ENDIF;

//?Validate a/p aging days entries
CASE;

// IF PAR.Accounts Payable Status is yes
IF PAR.Accounts_Payable_Status = 'Y';

//?>>> Accounts Payable aging days edit
// Execute function EDT Aging Days Edit    US.
EXECUTE FUNCTION(EDT Aging Days Edit    US) TYPE(EXCUSRSRC) ('USAGDAY');
PARAMETER(3RD.A_P_Aging_Days_1);
PARAMETER(3RD.A_P_Aging_Days_2);
PARAMETER(3RD.A_P_Aging_Days_3);
PARAMETER(3RD.A_P_Aging_Days_4);
PARAMETER(WRK.test);
PARAMETER(WRK.test_field_two);
{
 C                     Z-ADD0         UWKTST  20
 C                     Z-ADD0         UGTRP   20
 C                     Z-ADD#IARDY    UAGDY1  30
 C                     Z-ADD#IASDY    UAGDY2  30
 C                     Z-ADD#IATDY    UAGDY3  30
 C                     Z-ADD#IAUDY    UAGDY4  30
 *
 C                     EXSR UCHKDA
 C           UWKTST    IFEQ 4
 C                     EXSR UTSTDA
 C                     END
 *
 C                     Z-ADDUWKTST    #OEPNB
 C                     Z-ADDUGTRP     #OEUNB
 C           UCHKDA    BEGSR
 *  Test to see if any of the aging buckets have not been entered.
 *  If one has been entered, then all must be entered.
 C           UAGDY1    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UAGDY2    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UAGDY3    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UAGDY4    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UCHKEN    ENDSR
 /EJECT
 C           UTSTDA    BEGSR
 *   Aging buckets must be greater than the previous bucket.
 *
 C           UAGDY2    IFLT UAGDY1
 C           UAGDY3    ORLT UAGDY2
 C           UAGDY4    ORLT UAGDY3
 C                     Z-ADD1         UGTRP
 C                     END
 C           UTSTEN    ENDSR
 /EJECT
}


CASE;

// IF WRK.test is equal to zero
IF WRK.test = *ZERO;

// Send error message - 'Accounts Payable is installed, please enter aging buckets.'
ERROR(USR0053);
MSGPARM(3RD.A_P_Aging_Days_1);
MSGPARM(3RD.A_P_Aging_Days_2);
MSGPARM(3RD.A_P_Aging_Days_3);
MSGPARM(3RD.A_P_Aging_Days_4);

ENDIF;

CASE;

// IF WRK.test is not equal to four
IF WRK.test <> 4;

// Send error message - 'All four A/P Aging Days Buckets must be entered.'
ERROR(USR0051);
MSGPARM(3RD.A_P_Aging_Days_1);
MSGPARM(3RD.A_P_Aging_Days_2);
MSGPARM(3RD.A_P_Aging_Days_3);
MSGPARM(3RD.A_P_Aging_Days_4);

ENDIF;

CASE;

// IF WRK.test field two is equal to 1
IF WRK.test_field_two = 1;

// Send error message - 'A/P Aging Day Bucket must be greater than previous A/P aging Day Bucket.'
ERROR(USR0052);
MSGPARM(3RD.A_P_Aging_Days_1);
MSGPARM(3RD.A_P_Aging_Days_2);
MSGPARM(3RD.A_P_Aging_Days_3);
MSGPARM(3RD.A_P_Aging_Days_4);

ENDIF;

ENDIF;

//?** a/r aging ranges are now in the a/r aging control file
//?USER: Validate detail screen relations

//?Delete processing
CASE;

// IF DTL.*CMD key is *Delete
IF DTL.*CMD_key = '11';

// DTL.Record Status = CND.Deleted
DTL.Record_Status = 'D';

ENDIF;

//?Print Listing
CASE;

// IF DTL.*CMD key is *Print 21
IF DTL.*CMD_key = '21';

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// PAR.Company Number Pass   USR = DTL.Accounting Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// Call program PRT Prmt w opt Co. No. UP.
CALL PROGRAM(PRT Prmt w opt Co. No. UP) ('PDICUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/A');
PARAMETER('CACTCLP');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Company Control Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?Print Options
CASE;

// IF DTL.*CMD key is *Print Options
IF DTL.*CMD_key = '07';

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Call program Zzz Prmt Print Options UP.
CALL PROGRAM(Zzz Prmt Print Options UP) ('PDIKUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/A');
PARAMETER('CATCCLP');
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Company Control Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(DTL.PRT_Night_Queue);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Company Control   IF) TYPE(EXCINTFUN) FILE(CAASREP)        AC1983489;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Current_Accounting_Year);
PARAMETER(DTL.Current_Accounting_Period);
PARAMETER(DTL.OM_Week);
PARAMETER(DTL.Next_Order_Number);
PARAMETER(DTL.Next_Invoice_Number);
PARAMETER(DTL.Next_Credit_Memo_Number);
PARAMETER(DTL.Next_Charge_Back_Number);
PARAMETER(DTL.Next_On_Acct_Cash_Number);
PARAMETER(DTL.Next_Voucher_Number);
PARAMETER(DTL.Next_Customer_#);
PARAMETER(DTL.Next_Inventory_Reference#);
PARAMETER(DTL.Next_PFS_Batch_Number);
PARAMETER(DTL.Next_Contract_Promo_Num);
PARAMETER(DTL.Next_HPB_Batch_Number);
PARAMETER(DTL.Auto_Order_Numbering);
PARAMETER(DTL.Auto_Voucher_Numbering);
PARAMETER(DTL.Auto_Customers_Numbering);
PARAMETER(DTL.Auto_Inv_Ref_Numbering);
PARAMETER(DTL.Manual_Price_Accept_Prcnt);
PARAMETER(DTL.CoPk_FdSrv_ManPrc_Acpt_PT);
PARAMETER(DTL.Late_Charge_Minimum_Amt);
PARAMETER(DTL.Print_Co_Addr_on_Acknow);
PARAMETER(DTL.Credit_Hold_Status);
PARAMETER(DTL.Allocate_Credit_Hold_Orde);
PARAMETER(DTL.Message_Line_1);
PARAMETER(DTL.Message_Line_2);
PARAMETER(DTL.Message_Line_3);
PARAMETER(DTL.Message_Line_4);
PARAMETER(DTL.Age_by_Trans_or_Due_Date);
PARAMETER(DTL.A_P_Aging_Days_1);
PARAMETER(DTL.A_P_Aging_Days_2);
PARAMETER(DTL.A_P_Aging_Days_3);
PARAMETER(DTL.A_P_Aging_Days_4);
PARAMETER(DTL.A_R_Aging_Days_1);
PARAMETER(DTL.A_R_Aging_Days_2);
PARAMETER(DTL.A_R_Aging_Days_3);
PARAMETER(DTL.A_R_Aging_Days_4);
PARAMETER(DTL.Retention_Periods_A_P);
PARAMETER(DTL.Retention_Periods_A_R);
PARAMETER(DTL.Retention_Periods_P_O);
PARAMETER(DTL.Retention_Periods_O_P);
PARAMETER(DTL.Retention_Periods_S_A);
PARAMETER(DTL.Next_Load_ID);
PARAMETER(DTL.Auto_Load_Numbering);
PARAMETER(DTL.Next_Item_Number);
PARAMETER(DTL.G_L_Posted_Code);
PARAMETER(DTL.Production_Number_of_Days);
PARAMETER(DTL.Freight_by_Pounds_Miles);
PARAMETER(DTL.Price_Audit_Activated);
PARAMETER(DTL.PRT_Night_Queue);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?Execute internal function

 EXECUTE FUNCTION(CRT Company Control    CR) TYPE(CRTOBJ) FILE(CAASREP)          AC1102891;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Current_Accounting_Year);
 PARAMETER(PAR.Current_Accounting_Period);
 PARAMETER(PAR.OM_Week);
 PARAMETER(PAR.Next_Order_Number);
 PARAMETER(PAR.Next_Invoice_Number);
 PARAMETER(PAR.Next_Credit_Memo_Number);
 PARAMETER(PAR.Next_Charge_Back_Number);
 PARAMETER(PAR.Next_On_Acct_Cash_Number);
 PARAMETER(PAR.Next_Voucher_Number);
 PARAMETER(PAR.Next_Customer_#);
 PARAMETER(PAR.Next_Inventory_Reference#);
 PARAMETER(PAR.Next_PFS_Batch_Number);
 PARAMETER(PAR.Next_Contract_Promo_Num);
 PARAMETER(PAR.Next_HPB_Batch_Number);
 PARAMETER(PAR.Auto_Order_Numbering);
 PARAMETER(PAR.Auto_Voucher_Numbering);
 PARAMETER(PAR.Auto_Customers_Numbering);
 PARAMETER(PAR.Auto_Inv_Ref_Numbering);
 PARAMETER(PAR.Manual_Price_Accept_Prcnt);
 PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
 PARAMETER(PAR.Late_Charge_Minimum_Amt);
 PARAMETER(PAR.Print_Co_Addr_on_Acknow);
 PARAMETER(PAR.Credit_Hold_Status);
 PARAMETER(PAR.Allocate_Credit_Hold_Orde);
 PARAMETER(PAR.Message_Line_1);
 PARAMETER(PAR.Message_Line_2);
 PARAMETER(PAR.Message_Line_3);
 PARAMETER(PAR.Message_Line_4);
 PARAMETER(PAR.Age_by_Trans_or_Due_Date);
 PARAMETER(PAR.A_P_Aging_Days_1);
 PARAMETER(PAR.A_P_Aging_Days_2);
 PARAMETER(PAR.A_P_Aging_Days_3);
 PARAMETER(PAR.A_P_Aging_Days_4);
 PARAMETER(PAR.A_R_Aging_Days_1);
 PARAMETER(PAR.A_R_Aging_Days_2);
 PARAMETER(PAR.A_R_Aging_Days_3);
 PARAMETER(PAR.A_R_Aging_Days_4);
 PARAMETER(PAR.Retention_Periods_A_P);
 PARAMETER(PAR.Retention_Periods_A_R);
 PARAMETER(PAR.Retention_Periods_P_O);
 PARAMETER(PAR.Retention_Periods_O_P);
 PARAMETER(PAR.Retention_Periods_S_A);
 PARAMETER(PAR.Next_Load_ID);
 PARAMETER(PAR.Auto_Load_Numbering);
 PARAMETER(PAR.Next_Item_Number);
 PARAMETER(PAR.G_L_Posted_Code);
 PARAMETER(PAR.Production_Number_of_Days);
 PARAMETER(PAR.Freight_by_Pounds_Miles);
 PARAMETER(PAR.Price_Audit_Activated);
 PARAMETER(PAR.PRT_Night_Queue);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // Call program Crt Co Control HPE    XF.
 CALL PROGRAM(Crt Co Control HPE    XF) ('PLO2XFR');
 PARAMETER(PAR.Company_Number);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Company Control    CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1102892;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Current_Accounting_Year);
PARAMETER(DTL.Current_Accounting_Period);
PARAMETER(DTL.OM_Week);
PARAMETER(DTL.Next_Order_Number);
PARAMETER(DTL.Next_Invoice_Number);
PARAMETER(DTL.Next_Credit_Memo_Number);
PARAMETER(DTL.Next_Charge_Back_Number);
PARAMETER(DTL.Next_On_Acct_Cash_Number);
PARAMETER(DTL.Next_Voucher_Number);
PARAMETER(DTL.Next_Customer_#);
PARAMETER(DTL.Next_Inventory_Reference#);
PARAMETER(DTL.Next_PFS_Batch_Number);
PARAMETER(DTL.Next_Contract_Promo_Num);
PARAMETER(DTL.Next_HPB_Batch_Number);
PARAMETER(DTL.Auto_Order_Numbering);
PARAMETER(DTL.Auto_Voucher_Numbering);
PARAMETER(DTL.Auto_Customers_Numbering);
PARAMETER(DTL.Auto_Inv_Ref_Numbering);
PARAMETER(DTL.Manual_Price_Accept_Prcnt);
PARAMETER(DTL.CoPk_FdSrv_ManPrc_Acpt_PT);
PARAMETER(DTL.Late_Charge_Minimum_Amt);
PARAMETER(DTL.Print_Co_Addr_on_Acknow);
PARAMETER(DTL.Credit_Hold_Status);
PARAMETER(DTL.Allocate_Credit_Hold_Orde);
PARAMETER(DTL.Message_Line_1);
PARAMETER(DTL.Message_Line_2);
PARAMETER(DTL.Message_Line_3);
PARAMETER(DTL.Message_Line_4);
PARAMETER(DTL.Age_by_Trans_or_Due_Date);
PARAMETER(DTL.A_P_Aging_Days_1);
PARAMETER(DTL.A_P_Aging_Days_2);
PARAMETER(DTL.A_P_Aging_Days_3);
PARAMETER(DTL.A_P_Aging_Days_4);
PARAMETER(DTL.A_R_Aging_Days_1);
PARAMETER(DTL.A_R_Aging_Days_2);
PARAMETER(DTL.A_R_Aging_Days_3);
PARAMETER(DTL.A_R_Aging_Days_4);
PARAMETER(DTL.Retention_Periods_A_P);
PARAMETER(DTL.Retention_Periods_A_R);
PARAMETER(DTL.Retention_Periods_P_O);
PARAMETER(DTL.Retention_Periods_O_P);
PARAMETER(DTL.Retention_Periods_S_A);
PARAMETER(DTL.Next_Load_ID);
PARAMETER(DTL.Auto_Load_Numbering);
PARAMETER(DTL.Next_Item_Number);
PARAMETER(DTL.G_L_Posted_Code);
PARAMETER(DTL.Production_Number_of_Days);
PARAMETER(DTL.Freight_by_Pounds_Miles);
PARAMETER(DTL.Price_Audit_Activated);
PARAMETER(DTL.PRT_Night_Queue);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


