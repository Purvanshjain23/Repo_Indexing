// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBFBEFR
// ?Date: 14.08.2025 Time: 03:47:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.TPM Facility Type = PAR.TPM Facility Type
CTL.TPM_Facility_Type = PAR.TPM_Facility_Type;

// WRK.TPM Facility Type = PAR.TPM Facility Type
WRK.TPM_Facility_Type = PAR.TPM_Facility_Type;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?** Only display records that match par Facility Type
CASE;

// IF DB1.TPM Facility Type NE CTL.TPM Facility Type
IF DB1.TPM_Facility_Type <> CTL.TPM_Facility_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Don't display deleted records
CASE;

// IF DB1.TPM Record Status is Cancelled
IF DB1.TPM_Record_Status = 'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Validate subfile control

//?*CMD keys
CASE;

// IF CTL.*CMD key is *Add Details
IF CTL.*CMD_key = '06';

CASE;

// IF CTL.TPM Facility Type is Warehouse
IF CTL.TPM_Facility_Type = 'WAREHOUSE';

// Call program Zzz TPM Loc Mstr-WHSE  ER.
CALL PROGRAM(Zzz TPM Loc Mstr-WHSE  ER) ('PBFEE1R');
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(CTL.TPM_Location_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.TPM_Record_Status);

// IF CTL.TPM Facility Type is Ship To Customer
IF CTL.TPM_Facility_Type = 'CUSTOMER';

// Call program EDT TPM Loc Mstr-CUST  ER.
CALL PROGRAM(EDT TPM Loc Mstr-CUST  ER) ('PBFJE1R');
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(CTL.TPM_Location_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.TPM_Record_Status);
PARAMETER(*ZERO);

// IF CTL.TPM Facility Type is Railyard
IF CTL.TPM_Facility_Type = 'RAILYARD';

// OR CTL.TPM Facility Type is Terminal
OR CTL.TPM_Facility_Type = 'TERMINAL';

// OR CTL.TPM Facility Type is Transloader
OR CTL.TPM_Facility_Type = 'TRANSLOADER';

// LCL.Display Flag = CND.*blank
LCL.Display_Flag = *BLANK;

// Call program Zzz TPM Loc Mstr-SHIPL ER.
CALL PROGRAM(Zzz TPM Loc Mstr-SHIPL ER) ('PBGHE1R');
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(CTL.TPM_Location_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.TPM_Record_Status);
PARAMETER(LCL.Display_Flag);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TPM Location Code = CND.NOT ENTERED
WRK.TPM_Location_Code = *BLANK;

EXECUTE FUNCTION(RTV TPM Loc Code       RT) TYPE(RTVOBJ) FILE(PBAPREP)          AC2060348;
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(WRK.TPM_Location_Code);
PARAMETER(NLL.Effective_Date);
PARAMETER(NLL.Cancellation_Date);
PARAMETER(NLL.TPM_Country_Code);
PARAMETER(NLL.TPM_Region_State_Code);
PARAMETER(NLL.TPM_City);
PARAMETER(NLL.TPM_Sub_Region_County);
PARAMETER(NLL.TPM_Zip_Code);
PARAMETER(NLL.TPM_Name);
PARAMETER(NLL.TPM_Address_1);
PARAMETER(NLL.TPM_Address_2);
PARAMETER(NLL.TPM_Contact);
PARAMETER(NLL.TPM_Voice_Phone);
PARAMETER(NLL.TPM_Fax_Phone);
PARAMETER(NLL.Email_Address_Long_1);
PARAMETER(NLL.Email_Address_Long_2);
PARAMETER(NLL.TPM_Record_Status);
PARAMETER(NLL.TPM_Process_Status);
PARAMETER(NLL.TPM_Error_Reason);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.TPM Location Code is NOT ENTERED
IF WRK.TPM_Location_Code = *BLANK;

// Send error message - 'Facility Type may not have a retrieval program associated with it.'
ERROR(USR4571);
MSGPARM(CTL.TPM_Facility_Type);

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?*CMD keys
// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program Zzz TPM Loc Facility   ER.
CALL PROGRAM(Zzz TPM Loc Facility   ER) ('PBHNE1R');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?*CMD keys
// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.TPM Location Code
IF PGM.*Cursor_field = CTL.TPM_Location_Code;

// Call program SEL TPM Location Code  SL.
CALL PROGRAM(SEL TPM Location Code  SL) ('PBFASRR');
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(CTL.TPM_Location_Code);

// IF PGM.*Cursor field <IS> CTL.TPM Facility Type
IF PGM.*Cursor_field = CTL.TPM_Facility_Type;

// Call program SEL TPM Location Type  SL.
CALL PROGRAM(SEL TPM Location Type  SL) ('PBHESRR');
PARAMETER(CTL.TPM_Facility_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.TPM Facility Type = CTL.TPM Facility Type
WRK.TPM_Facility_Type = CTL.TPM_Facility_Type;

ENDIF;

//?*CMD keys
// IF CTL.TPM Facility Type NE WRK.TPM Facility Type
IF CTL.TPM_Facility_Type <> WRK.TPM_Facility_Type;

// AND CTL.TPM Facility Type NE WRK.Blank for 12          USR
AND CTL.TPM_Facility_Type <> WRK.Blank_for_12_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.TPM Facility Type = CTL.TPM Facility Type
WRK.TPM_Facility_Type = CTL.TPM_Facility_Type;

ENDIF;

//?USER: Validate subfile record fields

//?Select Record
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?WAREHOUSE facility type
CASE;

// IF CTL.TPM Facility Type is Warehouse
IF CTL.TPM_Facility_Type = 'WAREHOUSE';

// Call program Zzz TPM Loc Mstr-WHSE  ER.
CALL PROGRAM(Zzz TPM Loc Mstr-WHSE  ER) ('PBFEE1R');
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.TPM_Country_Code);
PARAMETER(RCD.TPM_Region_State_Code);
PARAMETER(RCD.TPM_City);
PARAMETER(RCD.TPM_Sub_Region_County);
PARAMETER(RCD.TPM_Zip_Code);
PARAMETER(RCD.TPM_Name);
PARAMETER(RCD.TPM_Address_1);
PARAMETER(RCD.TPM_Address_2);
PARAMETER(RCD.TPM_Contact);
PARAMETER(RCD.TPM_Voice_Phone);
PARAMETER(RCD.TPM_Fax_Phone);
PARAMETER(RCD.Email_Address_Long_1);
PARAMETER(RCD.Email_Address_Long_2);
PARAMETER(RCD.TPM_Record_Status);

ENDIF;

//?CUSTOMER facility type
CASE;

// IF CTL.TPM Facility Type is Ship To Customer
IF CTL.TPM_Facility_Type = 'CUSTOMER';

// Call program EDT TPM Loc Mstr-CUST  ER.
CALL PROGRAM(EDT TPM Loc Mstr-CUST  ER) ('PBFJE1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.TPM_Country_Code);
PARAMETER(RCD.TPM_Region_State_Code);
PARAMETER(RCD.TPM_City);
PARAMETER(RCD.TPM_Sub_Region_County);
PARAMETER(RCD.TPM_Zip_Code);
PARAMETER(RCD.TPM_Name);
PARAMETER(RCD.TPM_Address_1);
PARAMETER(RCD.TPM_Address_2);
PARAMETER(RCD.TPM_Contact);
PARAMETER(RCD.TPM_Voice_Phone);
PARAMETER(RCD.TPM_Fax_Phone);
PARAMETER(RCD.Email_Address_Long_1);
PARAMETER(RCD.TPM_Record_Status);
PARAMETER(*ZERO);

ENDIF;

//?TERMINAL, TRANSLOADER, RAILYARD Shipping Line facility type
CASE;

// IF CTL.TPM Facility Type is Transloader
IF CTL.TPM_Facility_Type = 'TRANSLOADER';

// OR CTL.TPM Facility Type is Terminal
OR CTL.TPM_Facility_Type = 'TERMINAL';

// OR CTL.TPM Facility Type is Railyard
OR CTL.TPM_Facility_Type = 'RAILYARD';

// WRK.Display Flag = CND.*blank
WRK.Display_Flag = *BLANK;

// Call program Zzz TPM Loc Mstr-SHIPL ER.
CALL PROGRAM(Zzz TPM Loc Mstr-SHIPL ER) ('PBGHE1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.TPM_Country_Code);
PARAMETER(RCD.TPM_Region_State_Code);
PARAMETER(RCD.TPM_City);
PARAMETER(RCD.TPM_Sub_Region_County);
PARAMETER(RCD.TPM_Zip_Code);
PARAMETER(RCD.TPM_Name);
PARAMETER(RCD.TPM_Address_1);
PARAMETER(RCD.TPM_Address_2);
PARAMETER(RCD.TPM_Contact);
PARAMETER(RCD.TPM_Voice_Phone);
PARAMETER(RCD.TPM_Fax_Phone);
PARAMETER(RCD.Email_Address_Long_1);
PARAMETER(RCD.Email_Address_Long_2);
PARAMETER(RCD.TPM_Record_Status);
PARAMETER(WRK.Display_Flag);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Select Record
// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?Display WAREHOUSE facility type
CASE;

// IF CTL.TPM Facility Type is Warehouse
IF CTL.TPM_Facility_Type = 'WAREHOUSE';

// Call program Zzz TPM Loc Mstr-WHSE  DR.
CALL PROGRAM(Zzz TPM Loc Mstr-WHSE  DR) ('PBFRD1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);

ENDIF;

//?Display CUSTOMER facility type
CASE;

// IF CTL.TPM Facility Type is Ship To Customer
IF CTL.TPM_Facility_Type = 'CUSTOMER';

// Call program DSP TPM Loc Mstr-CUST  DR.
CALL PROGRAM(DSP TPM Loc Mstr-CUST  DR) ('PBFQD1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(*ZERO);

ENDIF;

//?Display TERMINAL, TRANSLOADER, RAILYARD Shipping Line facility type
CASE;

// IF CTL.TPM Facility Type is Transloader
IF CTL.TPM_Facility_Type = 'TRANSLOADER';

// OR CTL.TPM Facility Type is Terminal
OR CTL.TPM_Facility_Type = 'TERMINAL';

// OR CTL.TPM Facility Type is Railyard
OR CTL.TPM_Facility_Type = 'RAILYARD';

// Call program Zzz TPM Loc Mstr-SHIPL DR.
CALL PROGRAM(Zzz TPM Loc Mstr-SHIPL DR) ('PBGJD1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(WRK.Count_USR);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Delete DBF record

EXECUTE FUNCTION(DLT TPM Loc Master     DL) TYPE(DLTOBJ) FILE(PBAPREP)          AC2051229;
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG TPM Loc Master     CH) TYPE(CHGOBJ) FILE(PBAPREP)          AC2051228;
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.Effective_Date);
PARAMETER(RCD.Cancellation_Date);
PARAMETER(RCD.TPM_Country_Code);
PARAMETER(RCD.TPM_Region_State_Code);
PARAMETER(RCD.TPM_City);
PARAMETER(RCD.TPM_Sub_Region_County);
PARAMETER(RCD.TPM_Zip_Code);
PARAMETER(RCD.TPM_Name);
PARAMETER(RCD.TPM_Address_1);
PARAMETER(RCD.TPM_Address_2);
PARAMETER(RCD.TPM_Contact);
PARAMETER(RCD.TPM_Voice_Phone);
PARAMETER(RCD.TPM_Fax_Phone);
PARAMETER(RCD.Email_Address_Long_1);
PARAMETER(RCD.Email_Address_Long_2);
PARAMETER(RCD.TPM_Record_Status);
PARAMETER(RCD.TPM_Process_Status);
PARAMETER(RCD.TPM_Error_Reason);
PARAMETER(RCD.TPM_Create_Date);
PARAMETER(RCD.TPM_Create_Time);
PARAMETER(RCD.TPM_Change_Date);
PARAMETER(RCD.TPM_Change_Time);
{
 //?USER: Processing before Data read

 //?This updates the TPM Location Master with the consolidated location
 //?code and then ties all associated warehouses to this code
 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(PAR.TPM_Change_Time);
 PARAMETER(WRK.User_Id);
 PARAMETER(WRK.Job_Name);
 PARAMETER(PAR.TPM_Change_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing before Data update

 EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
 PARAMETER(DB1.TPM_Change_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(DB1.TPM_Change_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


