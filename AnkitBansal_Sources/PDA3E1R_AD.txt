// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDA3E1R
// ?Date: 14.08.2025 Time: 03:27:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?If allow multi-company is no, then ouput only company
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// PAR.USR Output Only Status = CND.yes
PAR.USR_Output_Only_Status = 'Y';

ENDIF;

//?USER: Validate key screen

EXECUTE FUNCTION(Val Effective Mo/Day  IF) TYPE(EXCINTFUN)                      AC1353296;
PARAMETER(KEY.Effective_Month_Day);
{
 //?Execute internal function

 // WRK.Effective Mo/Dy TXT USR = CVTVAR(PAR.Effective Month/Day)
 WRK.Effective_Mo_Dy_TXT_USR = CVTVAR(PAR.Effective_Month_Day);

 // WRK.Month USR = SUBSTRING(WRK.Effective Mo/Dy TXT USR,CON.1,CON.2)
 WRK.Month_USR = SUBSTRING(WRK.Effective_Mo_Dy_TXT_USR:1:2);

 // WRK.Day USR = SUBSTRING(WRK.Effective Mo/Dy TXT USR,CON.3,CON.2)
 WRK.Day_USR = SUBSTRING(WRK.Effective_Mo_Dy_TXT_USR:3:2);

 //?Validate Month
 CASE;

 // IF WRK.Month USR is GT 12
 IF WRK.Month_USR > '12';

 // Send error message - 'Effective Month Invalid'
 ERROR(USR2127);
 MSGPARM(PAR.Effective_Month_Day);

 ENDIF;

 //?Validate Day
 CASE;

 // IF WRK.Day USR is GT 31
 IF WRK.Day_USR > '31';

 // Send error message - 'Effective Day Invalid'
 ERROR(USR2128);
 MSGPARM(PAR.Effective_Month_Day);

 ENDIF;

}


//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Cutout Matrix Default = CND.no
DTL.Cutout_Matrix_Default = 'N';

// DTL.Condition Name USR = Condition name of DTL.Cutout Matrix Default
DTL.Condition_Name_USR = RTVCND(DTL.Cutout_Matrix_Default);

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Type Description = Condition name of DTL.Cutout Matrix Type
DTL.USR_Type_Description = RTVCND(DTL.Cutout_Matrix_Type);

// DTL.Condition Name USR = Condition name of DTL.Cutout Matrix Default
DTL.Condition_Name_USR = RTVCND(DTL.Cutout_Matrix_Default);

// DTL.USR Record Status Desc = Condition name of DTL.Record Status
DTL.USR_Record_Status_Desc = RTVCND(DTL.Record_Status);

//?USER: Validate detail screen fields

// DTL.USR Type Description = Condition name of DTL.Cutout Matrix Type
DTL.USR_Type_Description = RTVCND(DTL.Cutout_Matrix_Type);

// DTL.Condition Name USR = Condition name of DTL.Cutout Matrix Default
DTL.Condition_Name_USR = RTVCND(DTL.Cutout_Matrix_Default);

// DTL.USR Record Status Desc = Condition name of DTL.Record Status
DTL.USR_Record_Status_Desc = RTVCND(DTL.Record_Status);

//?USER: Validate detail screen relations

//?Validate Default
CASE;

// IF DTL.Cutout Matrix Default is yes
IF DTL.Cutout_Matrix_Default = 'Y';

EXECUTE FUNCTION(Val Mtx Default       RT) TYPE(RTVOBJ) FILE(PDI0REP)           AC1288998;
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Cutout_Matrix_Code_USR);
PARAMETER(PAR.Effective_Month_Day_USR);
PARAMETER(PAR.Record_Found_PS_CM_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found -PS CM USR = CND.Record Not Found
 PAR.Record_Found_PS_CM_USR = 'N';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Record Found -PS CM USR = CND.Record Found
 PAR.Record_Found_PS_CM_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Record Found -PS CM USR is Record Found
IF PAR.Record_Found_PS_CM_USR = 'Y';

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// Send error message - 'There must be only one default cutout matrix for a company.'
ERROR(USR1842);
MSGPARM(DTL.Cutout_Matrix_Default);

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF PAR.Cutout Matrix Code USR NE DTL.Cutout Matrix Code
IF PAR.Cutout_Matrix_Code_USR <> DTL.Cutout_Matrix_Code;

// OR PAR.Effective Month/Day USR NE DTL.Effective Month/Day
OR PAR.Effective_Month_Day_USR <> DTL.Effective_Month_Day;

// Send error message - 'There must be only one default cutout matrix for a company.'
ERROR(USR1842);
MSGPARM(DTL.Cutout_Matrix_Default);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Cutout Matrix     CR) TYPE(CRTOBJ) FILE(PDI0REP)           AC1254442;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.Cutout_Matrix_Desc);
PARAMETER(DTL.Cutout_Matrix_Type);
PARAMETER(DTL.Cutout_Matrix_Default);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(*MISSING);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Cutout Matrix     CH) TYPE(CHGOBJ) FILE(PDI0REP)           AC1254443;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code);
PARAMETER(DTL.Effective_Month_Day);
PARAMETER(DTL.Cutout_Matrix_Desc);
PARAMETER(DTL.Cutout_Matrix_Type);
PARAMETER(DTL.Cutout_Matrix_Default);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(*MISSING);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

ENDIF;

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

