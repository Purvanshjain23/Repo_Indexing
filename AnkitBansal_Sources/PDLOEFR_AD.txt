// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLOEFR
// ?Date: 14.08.2025 Time: 03:32:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?E3160 07/14/14 JJH - Recompiled for change in CRTOBJ.
//?12/03/2020 JBB E17020 - Update Std Weight/Head (Var/Ren)
//?                        Recompile for change in Chg Item CHGOBJ
//?                        to update the Std Weight/Head (Var/Ren)
//?                        field in the Item Default file.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

//?USER: Initialize subfile header

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

CASE;

// IF CTL.Company Number NE RCD.Company Number
IF CTL.Company_Number <> RCD.Company_Number;

// AND CTL.Company Number is not equal to zero
AND CTL.Company_Number <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF DB1.Item Type Code is Not Finished Good
IF DB1.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Validate subfile record fields

//?Select Commodity Market
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Default Commod Mark basis
IF PGM.*Cursor_field = RCD.Default_Commod_Mark_basis;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(RCD.Default_Commod_Mark_basis);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Validate Commodity Market
CASE;

// IF RCD.Default Commod Mark basis is Entered
IF RCD.Default_Commod_Mark_basis <> *BLANK;

EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1387392;
PARAMETER(RCD.Default_Commod_Mark_basis);
PARAMETER(WRK.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Commodity Market not found'
ERROR(USR2162);
MSGPARM(RCD.Default_Commod_Mark_basis);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Item               CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1120697;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(RCD.Description_Line_Two);
PARAMETER(RCD.Item_Label_Line_1);
PARAMETER(RCD.Item_Label_Line_2);
PARAMETER(RCD.Item_Label_Line_3);
PARAMETER(RCD.Item_Label_Line_4);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third);
PARAMETER(RCD.UOM_Pricing);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Minimum_Weight_Per_Case);
PARAMETER(RCD.Maximum_Weight_Per_Case);
PARAMETER(RCD.Number_Cases_On_A_Pallet);
PARAMETER(RCD.Vendor_Item_Default);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Default_Commod_Mark_basis);
PARAMETER(RCD.Transportation_Temp);
PARAMETER(RCD.Item_Type_Code);
PARAMETER(RCD.Package_Type_Code);
PARAMETER(RCD.Maximum_Audit_Value);
PARAMETER(RCD.Minimum_Audit_Value);
PARAMETER(RCD.Market_Overage);
PARAMETER(RCD.Standard_Overage_Underage);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Item_Pricing_Operation);
PARAMETER(RCD.Item_Pricing_Constant);
PARAMETER(RCD.Default_Warehouse);
PARAMETER(RCD.Price_Method_Default);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Variety_Rendered_Cut);
PARAMETER(RCD.Frozen_Make_to_Order_Sts);
PARAMETER(RCD.Credit_Item_Status);
PARAMETER(RCD.Std_Weight_Head_Var_Ren);
PARAMETER(RCD.Pieces_Per_Head);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Group_for_Packaging);
PARAMETER(RCD.Item_Category_Number_1);
PARAMETER(RCD.Made_to_Order_Code);
PARAMETER(RCD.Item_Category_Number_2);
PARAMETER(RCD.Transportation_Equip_Type);
PARAMETER(RCD.Item_Category_Number_3);
PARAMETER(RCD.Item_Category_Code_3);
PARAMETER(RCD.Item_Category_Number_4);
PARAMETER(RCD.GL_Sub_Code);
PARAMETER(RCD.Item_Category_Number_5);
PARAMETER(RCD.Item_Structure_Sub_Class);
PARAMETER(RCD.Item_Category_Number_6);
PARAMETER(RCD.Item_Primal_Sched_Report);
PARAMETER(RCD.Item_Category_Number_7);
PARAMETER(RCD.Item_Exc_Man_Prc_Excp);
PARAMETER(RCD.Item_Category_Number_8);
PARAMETER(RCD.Item_Prod_Sched_Send_PFS);
PARAMETER(RCD.Item_Category_Number_9);
PARAMETER(RCD.Item_Category_Code_9);
PARAMETER(RCD.Item_Category_Number_10);
PARAMETER(RCD.Item_Category_Code_10);
PARAMETER(RCD.Pallet_Tare_Weight);
PARAMETER(RCD.Misc_Tare_Weight);
PARAMETER(RCD.Production_Lead_Days);
PARAMETER(RCD.Packaging_Code);
PARAMETER(RCD.Item_Market_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Agrimetrics_group);
PARAMETER(RCD.Agrimetrics_pack);
PARAMETER(RCD.Agrimetrics_grade);
PARAMETER(RCD.PA_Base_Avail_Rpt_Include);
PARAMETER(RCD.PM_Pounds_per_Hour);
PARAMETER(RCD.Item_Frt_Overage_Prc_UOM);
PARAMETER(RCD.Packages_per_case);
PARAMETER(RCD.Use_Freeze_Sell_By_Days);
PARAMETER(RCD.PM_Batch_Size);
PARAMETER(RCD.Package_Level_size);
PARAMETER(RCD.Partial_Item_Code);
PARAMETER(RCD.WIP_Item_Code);
PARAMETER(RCD.WIP_Reject_Code);
PARAMETER(RCD.Std_Costing_Unit_Weight);
PARAMETER(RCD.FP_Std_Green_Weight);
PARAMETER(RCD.PM_Std_LBS_Man_Per_Hour);
PARAMETER(RCD.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(RCD.PM_Formula_LBS_Per_Hour);
PARAMETER(RCD.PM_Finished_LBS_Per_Hour);
PARAMETER(RCD.SH_Unused_was_broker);
PARAMETER(RCD.PM_Raw_Material_Type_Code);
PARAMETER(RCD.PM_Line_Number);
PARAMETER(RCD.Seconds_Item);
PARAMETER(RCD.Print_on_Realization_Rpt);
PARAMETER(RCD.Unit_Weight_Change_Sts);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data read

 // LCL.Change Flag USR = CND.No
 LCL.Change_Flag_USR = 'N';

 //?USER: Processing after Data read

 //?Notification of change    12/01/01
 DO;

 // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
 LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

 // LCL.Description 14A      USR = CONCAT(CON.Item:,LCL.Item Code Txt,CON.1)
 LCL.Description_14A_USR = 'Item:' + LCL.Item_Code_Txt (1);

 // LCL.Text USR 8 = CONCAT(CON.Type:,DB1.Item Type Code,CON.1)
 LCL.Text_USR_8 = 'Type:' + DB1.Item_Type_Code (1);

 // LCL.Text USR 23 = CONCAT(LCL.Description 14A      USR,LCL.Text USR 8,CON.1)
 LCL.Text_USR_23 = LCL.Description_14A_USR + LCL.Text_USR_8 (1);

 // LCL.Text USR 20 = CONCAT(CON.Changed By:,JOB.*USER,CON.1)
 LCL.Text_USR_20 = 'Changed By:' + JOB.*USER (1);

 // LCL.Text USR 43 = CONCAT(LCL.Text USR 23,LCL.Text USR 20,CON.1)
 LCL.Text_USR_43 = LCL.Text_USR_23 + LCL.Text_USR_20 (1);

 //?Packaging & Supply
 CASE;

 // IF DB1.Item Type Code is Packaging and Supplies
 IF DB1.Item_Type_Code = 'PS';

 //?Box Unit Weight
 CASE;

 // IF DB1.Unit Weight NE PAR.Unit Weight
 IF DB1.Unit_Weight <> PAR.Unit_Weight;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_1 = RTVMSG(USR3138);
 PARAMETER('Unit Weight:');
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(*BLANK);

 ENDIF;

 ENDIF;

 //?Finished Goods
 CASE;

 // IF DB1.Item Type Code is Finished Goods
 IF DB1.Item_Type_Code = 'FG';

 //?Misc Tare Weight
 CASE;

 // IF PAR.Misc Tare Weight NE DB1.Misc Tare Weight
 IF PAR.Misc_Tare_Weight <> DB1.Misc_Tare_Weight;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_1 = RTVMSG(USR3138);
 PARAMETER('Misc Tare Weight:');
 PARAMETER(PAR.Misc_Tare_Weight);
 PARAMETER(',');

 ENDIF;

 //?Minimum Weight Per Case
 CASE;

 // IF PAR.Minimum Weight Per Case NE DB1.Minimum Weight Per Case
 IF PAR.Minimum_Weight_Per_Case <> DB1.Minimum_Weight_Per_Case;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_2 = RTVMSG(USR3138);
 PARAMETER('Min Wt Per Case:');
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(',');

 ENDIF;

 //?Maximum Weight Per Case
 CASE;

 // IF PAR.Maximum Weight Per Case NE DB1.Maximum Weight Per Case
 IF PAR.Maximum_Weight_Per_Case <> DB1.Maximum_Weight_Per_Case;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_3 = RTVMSG(USR3138);
 PARAMETER('Max Wt Per Case:');
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 PARAMETER(',');

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Change Flag USR is Yes
 IF LCL.Change_Flag_USR = 'Y';

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PRKSCHED');
 PARAMETER(WRK.DL_List_ID);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program SND Pager Msg-Long    UP.
 CALL PROGRAM(SND Pager Msg-Long    UP) ('POPMUPC');
 PARAMETER(WRK.DL_List_ID);
 PARAMETER(LCL.Text_USR_43);
 PARAMETER(LCL.Office_Message_USR_1);
 PARAMETER(LCL.Office_Message_USR_2);
 PARAMETER(LCL.Office_Message_USR_3);
 PARAMETER(LCL.Office_Message_USR_4);
 PARAMETER(LCL.Office_Message_USR_5);

 ENDIF;

 ENDDO;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv/Chg Unt wgt,sts    RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1465399;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Unit_Weight_Change_Sts);
 {
  //?USER: Process Data record

  // WRK.Conversion Factor 1 = DB1.Conversion Factor 1
  WRK.Conversion_Factor_1 = DB1.Conversion_Factor_1;

  // WRK.Conversion Factor 2 = DB1.Conversion Factor 2
  WRK.Conversion_Factor_2 = DB1.Conversion_Factor_2;

  //?IF Update the Conversion Factor who's unit of measure = LB
  CASE;

  // IF DB1.U/M - Second Dft is Pounds
  IF DB1.UOM_Second_Dft = 'LB';

  // WRK.Conversion Factor 1 = PAR.Unit Weight
  WRK.Conversion_Factor_1 = PAR.Unit_Weight;

  //?IF Update the Conversion Factor who's unit of measure = LB
  // IF DB1.U/M - Third Dft is Pounds
  IF DB1.UOM_Third_Dft = 'LB';

  // WRK.Conversion Factor 2 = PAR.Unit Weight
  WRK.Conversion_Factor_2 = PAR.Unit_Weight;

  ENDIF;

  EXECUTE FUNCTION(Chg Unt Wgt & chg sts CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1465398;
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Conversion_Factor_1);
  PARAMETER(WRK.Conversion_Factor_2);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Unit_Weight_Change_Sts);
 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// Call program PRT Prmt with Co. No.  UP.
CALL PROGRAM(PRT Prmt with Co. No.  UP) ('PDH1UPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('I/C');
PARAMETER('PDQOCLP');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(CTL.System_Value_Numeric);
PARAMETER('Item-Audit Min/Max List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(LCL.Carrier_Code_Usr);
PARAMETER(*BLANK);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

