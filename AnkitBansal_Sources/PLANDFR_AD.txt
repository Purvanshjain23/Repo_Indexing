// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLANDFR
// ?Date: 14.08.2025 Time: 02:53:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 4/07/2017 JBB C9426 - Data Base Chgs for ProdServ
//?                       Add Ref1, Ref2, and Ref Status to screen
//?                       and allow maintenance of the fields if
//?                       company is allowed to modify the record and
//?                       Source Code is TO (Triumph Member Owner).
//?                       The Company Values file is used to determine
//?                       the Companies that can maintain the Ref
//?                       values. (HPECORQREF)
//? 4/22/2017 JBB C9426 - Data Base Chgs for ProdServ
//?                       Remove validation of the REF fields
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//? 4/22/2017 JBB C9426 - Remove REF field validation
// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

// PGM.*Scan limit = CON.1000
PGM.*Scan_limit = 1000;

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// CTL.CC Company Number = PAR.CC Company Number
CTL.CC_Company_Number = PAR.CC_Company_Number;

// CTL.Oms Name = PAR.Oms Name
CTL.Oms_Name = PAR.Oms_Name;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

ENDIF;

SET CURSOR;

//?USER: Initialize subfile record from DBF record

// RCD.Day of Week Desc DRV = Condition name of RCD.DST Day of Week
RCD.Day_of_Week_Desc_DRV = RTVCND(RCD.DST_Delivery_Day_of_Week);

// RCD.Day of Week Desc USR = Condition name of RCD.DST Kill Day of Week
RCD.Day_of_Week_Desc_USR = RTVCND(RCD.DST_Kill_Day_of_Week);

// RCD.Producer Code         USR = DB1.PD Producer Code
RCD.Producer_Code_USR = DB1.PD_Producer_Code;

// RCD.Location Code USR = DB1.PL Location Code
RCD.Location_Code_USR = DB1.PL_Location_Code;

// RCD.Sched Delv Head USR = DB1.DST Scheduled Delv Head
RCD.Sched_Delv_Head_USR = DB1.DST_Scheduled_Delv_Head;

// RCD.Receiving Shift USR = DB1.DST Receiving Shift
RCD.Receiving_Shift_USR = DB1.DST_Receiving_Shift;

// RCD.Sched Kill Head USR = DB1.DST Scheduled Kill Head
RCD.Sched_Kill_Head_USR = DB1.DST_Scheduled_Kill_Head;

// RCD.Schedule Kill Shift   USR = DB1.DST Kill Shift
RCD.Schedule_Kill_Shift_USR = DB1.DST_Kill_Shift;

// RCD.BOL Kill Shift USR = DB1.DST BOL Kill Shift
RCD.BOL_Kill_Shift_USR = DB1.DST_BOL_Kill_Shift;

// RCD.Ref 1 USR = DB1.DST Ref 1
RCD.Ref_1_USR = DB1.DST_Ref_1;

// RCD.Ref 2 USR = DB1.DST Ref 2
RCD.Ref_2_USR = DB1.DST_Ref_2;

// RCD.Ref Status USR = DB1.DST Ref Status
RCD.Ref_Status_USR = DB1.DST_Ref_Status;

//?USER: IRCD BRAD 04/11/17 JBB C9426 - Determine if Ref fields required
//? 4/22/2017 JBB C9426 - Remove REF field validation
//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.PD Producer Code
IF PGM.*Cursor_field = CTL.PD_Producer_Code;

// OR PGM.*Cursor field <IS> CTL.PL Location Code
OR PGM.*Cursor_field = CTL.PL_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);

ENDIF;

ENDIF;

//?F9=Generate Slots
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Pmt Gen DS Template   PV.
CALL PROGRAM(Pmt Gen DS Template   PV) ('PLA6PVR');
PARAMETER(CTL.CC_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?1=Add
CASE;

// IF CTL.*SFLSEL is *Select#1
IF CTL.*SFLSEL = '1';

CASE;

// IF CTL.DST Day of Week EQ WRK.Blank Usr 2
IF CTL.DST_Delivery_Day_of_Week = WRK.Blank_Usr_2;

// OR CTL.DST Delivery Time EQ WRK.Zero USR
OR CTL.DST_Delivery_Time = WRK.Zero_USR;

// OR CTL.DST Delivery Time Seq EQ WRK.Zero USR
OR CTL.DST_Delivery_Time_Seq = WRK.Zero_USR;

// OR CTL.DST Kill Day of Week EQ WRK.Blank Usr 2
OR CTL.DST_Kill_Day_of_Week = WRK.Blank_Usr_2;

// OR CTL.DST Receiving Shift EQ WRK.Blank Usr 2
OR CTL.DST_Receiving_Shift = WRK.Blank_Usr_2;

// OR CTL.DST Kill Shift EQ WRK.Blank Usr 2
OR CTL.DST_Kill_Shift = WRK.Blank_Usr_2;

// Send error message - 'Day of Week, Delv Time, Delv Seq, & Shifts are required for Add.'
ERROR(PRK1043);
MSGPARM(CTL.DST_Delivery_Day_of_Week);
MSGPARM(CTL.DST_Delivery_Time);
MSGPARM(CTL.DST_Delivery_Time_Seq);
MSGPARM(CTL.DST_Kill_Day_of_Week);
MSGPARM(CTL.DST_Receiving_Shift);
MSGPARM(CTL.DST_Kill_Shift);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val DS Tmp Slot       RT) TYPE(RTVOBJ) FILE(PLACREP)           AB1245259;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DST_Delivery_Day_of_Week);
PARAMETER(CTL.DST_Delivery_Time);
PARAMETER(CTL.DST_Delivery_Time_Seq);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Delivery Sched Template already exists.'
ERROR(PRK1025);
MSGPARM(CTL.DST_Delivery_Day_of_Week);
MSGPARM(CTL.DST_Delivery_Time);
MSGPARM(CTL.DST_Delivery_Time_Seq);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Error Type Found = CND.No
LCL.Error_Type_Found = 'N';

// WRK.SR Source Code = CON.*BLANK
WRK.SR_Source_Code = *BLANK;

//?Val: Producer, Req Head
CASE;

// IF CTL.PD Producer Code is Entered
IF CTL.PD_Producer_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Prod,Nm,TrkSz,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1247321;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(WRK.PD_Name);
PARAMETER(WRK.PD_Std_Truck_Size);
PARAMETER(WRK.PD_Freight_Exp_Paid_By);
PARAMETER(WRK.SR_Source_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.SR Source Code NE WRK.Blank Usr 2
IF WRK.SR_Source_Code <> WRK.Blank_Usr_2;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(CTL.DST_Source_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.DST BOL Kill Shift EQ WRK.Blank Usr 2
IF CTL.DST_BOL_Kill_Shift = WRK.Blank_Usr_2;

// Send error message - 'Shift is required'
ERROR(PRK0722);
MSGPARM(CTL.DST_BOL_Kill_Shift);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

//?Delivery Truck validation on exceed truck size
CASE;

// IF CTL.DST Requested Delv Head is Entered
IF CTL.DST_Unused_Head > *ZERO;

// AND WRK.PD Std Truck Size is GT Zero
AND WRK.PD_Std_Truck_Size > *ZERO;

// AND CTL.DST Requested Delv Head GT WRK.PD Std Truck Size
AND CTL.DST_Unused_Head > WRK.PD_Std_Truck_Size;

// Send error message - 'Delivery Head &1 exceeds standard truck size &2'
ERROR(PRK1069);
MSGPARM(WRK.PD_Std_Truck_Size);
MSGPARM(CTL.DST_Unused_Head);

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer not found.'
ERROR(PRK1045);
MSGPARM(CTL.PD_Producer_Code);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

ENDIF;

//?Val: Prod Location
CASE;

// IF CTL.PL Location Code is Blank
IF CTL.PL_Location_Code = *BLANK;

//?Val: Prod Location
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Producer Location RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1233183;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Producer Location not found.'
ERROR(PRK1046);
MSGPARM(CTL.PL_Location_Code);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

ENDIF;

//?Val: Delv Time
CASE;

// IF CTL.DST Delivery Time is Entered
IF CTL.DST_Delivery_Time <> *ZERO;

// WRK.Time MM USR = CTL.DST Delivery Time
WRK.Time_MM_USR = CTL.DST_Delivery_Time;

// WRK.Time HH USR = CTL.DST Delivery Time / CON.100 *
WRK.Time_HH_USR = CTL.DST_Delivery_Time / 100;

CASE;

// IF WRK.Time MM USR is gt 59
IF WRK.Time_MM_USR > 59;

// OR WRK.Time HH USR is GT 24
OR WRK.Time_HH_USR > 24;

// Send error message - 'Delivery Time not valid.'
ERROR(PRK1047);
MSGPARM(CTL.DST_Delivery_Time);

// LCL.Error Type Found = CND.Critical Error
LCL.Error_Type_Found = 'Y';

ENDIF;

ENDIF;

//?If no errors, create a new Delivery Sched Template record
CASE;

// IF LCL.Error Type Found is No
IF LCL.Error_Type_Found = 'N';

EXECUTE FUNCTION(Crt Delv Sched Templt CR) TYPE(CRTOBJ) FILE(PLACREP)           AB1244652;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DST_Delivery_Day_of_Week);
PARAMETER(CTL.DST_Delivery_Time);
PARAMETER(CTL.DST_Delivery_Time_Seq);
PARAMETER(CTL.DST_Kill_Day_of_Week);
PARAMETER(CTL.DST_Unused_Head);
PARAMETER(CTL.DST_Scheduled_Delv_Head);
PARAMETER(CTL.DST_Scheduled_Kill_Head);
PARAMETER(CTL.DST_Receiving_Shift);
PARAMETER(CTL.DST_Kill_Shift);
PARAMETER(CTL.DST_BOL_Kill_Shift);
PARAMETER(CTL.DST_Source_Type);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(CTL.DST_Ref_1);
PARAMETER(CTL.DST_Ref_2);
PARAMETER(CTL.DST_Ref_Status);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// CTL.*SFLSEL = WRK.Blank Usr 2
CTL.*SFLSEL = WRK.Blank_Usr_2;

// CTL.DST Source Type = WRK.Blank Usr 2
CTL.DST_Source_Type = WRK.Blank_Usr_2;

// CTL.PD Producer Code = WRK.Blank Usr 2
CTL.PD_Producer_Code = WRK.Blank_Usr_2;

// CTL.PL Location Code = WRK.Blank Usr 2
CTL.PL_Location_Code = WRK.Blank_Usr_2;

// CTL.DST Scheduled Kill Head = CON.*ZERO
CTL.DST_Scheduled_Kill_Head = *ZERO;

// CTL.DST Scheduled Delv Head = CON.*ZERO
CTL.DST_Scheduled_Delv_Head = *ZERO;

// CTL.DST Receiving Shift = WRK.Blank Usr 2
CTL.DST_Receiving_Shift = WRK.Blank_Usr_2;

// CTL.DST Kill Shift = WRK.Blank Usr 2
CTL.DST_Kill_Shift = WRK.Blank_Usr_2;

// CTL.DST BOL Kill Shift = WRK.Blank Usr 2
CTL.DST_BOL_Kill_Shift = WRK.Blank_Usr_2;

// CTL.DST Ref 1 = CND.Not entered
CTL.DST_Ref_1 = *BLANK;

// CTL.DST Ref 2 = CND.Not entered
CTL.DST_Ref_2 = *BLANK;

// CTL.DST Ref Status = CND.*Blank
CTL.DST_Ref_Status = *BLANK;

// WRK.SR Source Code = CON.*BLANK
WRK.SR_Source_Code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Day of Week Desc DRV) TYPE(DRVFLD)                             AB1244696;
PARAMETER(RCD.Day_of_Week_Desc_DRV);
PARAMETER(RCD.DST_Delivery_Day_of_Week);
{
 //?Calculate derived field

 // PAR.Day of Week Desc DRV = Condition name of PAR.DST Day of Week
 PAR.Day_of_Week_Desc_DRV = RTVCND(PAR.DST_Delivery_Day_of_Week);

}


// RCD.Day of Week Desc USR = Condition name of RCD.DST Kill Day of Week
RCD.Day_of_Week_Desc_USR = RTVCND(RCD.DST_Kill_Day_of_Week);

//?USER: Process subfile record (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Producer Code         USR
IF PGM.*Cursor_field = RCD.Producer_Code_USR;

// OR PGM.*Cursor field <IS> RCD.Location Code USR
OR PGM.*Cursor_field = RCD.Location_Code_USR;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(RCD.Producer_Code_USR);
PARAMETER(RCD.Location_Code_USR);

ENDIF;

ENDIF;

//?Val: Producer
CASE;

// IF RCD.Producer Code         USR is Entered
IF RCD.Producer_Code_USR <> *BLANK;

EXECUTE FUNCTION(Rtv Prod,Nm,TrkSz,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1247321;
PARAMETER(RCD.Producer_Code_USR);
PARAMETER(WRK.PD_Name);
PARAMETER(WRK.PD_Std_Truck_Size);
PARAMETER(WRK.PD_Freight_Exp_Paid_By);
PARAMETER(RCD.SR_Source_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.SR Source Code NE WRK.Blank Usr 2
IF RCD.SR_Source_Code <> WRK.Blank_Usr_2;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.DST_Source_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.BOL Kill Shift USR EQ WRK.Blank Usr 2
IF RCD.BOL_Kill_Shift_USR = WRK.Blank_Usr_2;

// Send error message - 'Shift is required'
ERROR(PRK0722);
MSGPARM(RCD.BOL_Kill_Shift_USR);

ENDIF;

CASE;

// IF RCD.Sched Delv Head USR is Entered
IF RCD.Sched_Delv_Head_USR > *ZERO;

// AND WRK.PD Std Truck Size is GT Zero
AND WRK.PD_Std_Truck_Size > *ZERO;

// AND RCD.Sched Delv Head USR GT WRK.PD Std Truck Size
AND RCD.Sched_Delv_Head_USR > WRK.PD_Std_Truck_Size;

// Send error message - 'Delivery Head &1 exceeds standard truck size &2'
ERROR(PRK1069);
MSGPARM(WRK.PD_Std_Truck_Size);
MSGPARM(RCD.Sched_Delv_Head_USR);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer not found.'
ERROR(PRK1045);
MSGPARM(RCD.Producer_Code_USR);

ENDIF;

ENDIF;

//?Val: Prod Location
CASE;

// IF RCD.Location Code USR is Entered
IF RCD.Location_Code_USR <> *BLANK;

EXECUTE FUNCTION(Val Producer Location RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1233183;
PARAMETER(RCD.Producer_Code_USR);
PARAMETER(RCD.Location_Code_USR);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Producer Location not found.'
ERROR(PRK1046);
MSGPARM(RCD.Location_Code_USR);

ENDIF;

ENDIF;

//? 4/22/2017 JBB C9426 - Remove REF field validation
//?1=Add   (dummy case for CTL to work)
CASE;

// IF RCD.*SFLSEL is *Select#1
IF RCD.*SFLSEL = '1';

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Del Delv Sched Templt DL) TYPE(DLTOBJ) FILE(PLACREP)           AB1244654;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DST_Delivery_Day_of_Week);
PARAMETER(RCD.DST_Delivery_Time);
PARAMETER(RCD.DST_Delivery_Time_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF RCD.*SFLSEL is *Reset to blanks
IF RCD.*SFLSEL = *BLANK;

CASE;

// IF RCD.Producer Code         USR is Blank
IF RCD.Producer_Code_USR = *BLANK;

// RCD.DST Source Type = WRK.Blank Usr 2
RCD.DST_Source_Type = WRK.Blank_Usr_2;

// RCD.SR Source Code = WRK.Blank Usr 2
RCD.SR_Source_Code = WRK.Blank_Usr_2;

ENDIF;

EXECUTE FUNCTION(Chg Delv Sched Templt CH) TYPE(CHGOBJ) FILE(PLACREP)           AB1244653;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DST_Delivery_Day_of_Week);
PARAMETER(RCD.DST_Delivery_Time);
PARAMETER(RCD.DST_Delivery_Time_Seq);
PARAMETER(RCD.DST_Kill_Day_of_Week);
PARAMETER(RCD.DST_Unused_Head);
PARAMETER(RCD.Sched_Delv_Head_USR);
PARAMETER(RCD.Sched_Kill_Head_USR);
PARAMETER(RCD.Receiving_Shift_USR);
PARAMETER(RCD.Schedule_Kill_Shift_USR);
PARAMETER(RCD.BOL_Kill_Shift_USR);
PARAMETER(RCD.DST_Source_Type);
PARAMETER(RCD.Producer_Code_USR);
PARAMETER(RCD.Location_Code_USR);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.Ref_1_USR);
PARAMETER(RCD.Ref_2_USR);
PARAMETER(RCD.Ref_Status_USR);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

