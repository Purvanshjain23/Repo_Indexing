      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF447
      * TITLE:       Margin: Specify Margin Adjustment Reopen
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     03/13/08
      *
      * FUNCTION: This function is for I.S. personnel only.
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd447    cf   e             workstn infds(iofeed)
      *
      *
     Fcalcalb   if   e           k disk
      *  Calendar file
      *
      *
     Ftfl021i   uf   e           k disk
      *  Invoice charges
      *
      *
     Ftfp099    uf   e           k disk
      *    Function control
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields
      *
     d wksmcd          s                   like(icsmcd) inz('MA')
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkdt            s              8  0
      *
      *
      * Parm fields
      *
     D xxsatdt         s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
     D xxapfl          s              1
      *
     D xxwbdt          s              8  0
     D xxwbsyndt       s              7  0
     D xxwbmdy         s              6  0
      *
     D xxwedt          s              8  0
     D xxwesyndt       s              7  0
     D xxwemdy         s              6  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Definition for external data area DATFMARG
      *---------------------------------------------------------------
     D
     Ddatfmarg        uds                  dtaara(datfmarg)
     D  da099dt               30     37  0
     D  dadmdt                80     87  0
     D  dasbmfl              100    100
      *
     D
     Ddatfsale        uds                  dtaara(datfsale)
     D  dash099dt             30     37  0
     D  dashdmdt              80     87  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf447k1
     C                   write     tf447ec
     C                   exfmt     tf447r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *   1) date
     C                   exsr      $wemdy
      *
      * You cannot Reopen if a Margin Close has been submitted.
      *
     C     'MARGIN    '  chain(n)  tfp099                             92
     C                   if        *in92 = *off and
     C                             fnsbfl <> *blank
     C                   add       1             error
     C                   movel     'HS08137'     mgid(e)
     C                   endif
      *
      * You cannot Reopen if a Datamart Margin build has been submitted.
      *
     C                   in        datfmarg
     C                   if        dasbmfl <> *blank
     C                   add       1             error
     C                   movel     'HS08139'     mgid(e)
     C                   endif
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Week-Ending Date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) must be a Saturday
      *  5) must be on/before "last" Margin date
      *
     C     $wemdy        begsr
      *
     C                   z-add     0             d1yr
     C                   z-add     0             d1wk
     C                   z-add     0             d1pe
      *
     C                   select
     C                   when      d1wemdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1wemdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and:
      *  1) check that this is a Saturday date
      *  2) retrieve the year/period/week for this week-ending date
      *
     C     *mdy          move      d1wemdy       wkisodate
     C                   move      wkisodate     wkdt
      *
     C     wkdt          chain     calcalb                            92
     C                   if        *in92 = *off and catdtdow = 7                If Saturday
     C                   call      'TF815'
     C                   parm      wkdt          xxsatdt
     C                   parm      'P'           xxapfl
     C     d1yr          parm      0             xxyr
     C     d1pe          parm      0             xxpe
     C     d1wk          parm      0             xxwk
     C                   else
      *
      * Not a Saturday
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09030'
     C                   endif
     C                   endif                                                  If Saturday
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If the date is OK, make one last check that it is on/before the
      * "last" closed Margin week. (If it is not, there is nothing to Reopen.)
      *
     C                   if        *in30 = *off                                 If still OK
     C     'MARGIN    '  chain(n)  tfp099                             92
     C                   if        *in92 = *off and wkdt > fnledt               If hit
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08136'
     C                   endif
     C                   endif                                                  If hit
     C                   endif                                                  If still OK
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Retrieve the MARGIN Function Control record.
      *
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If hit
      *
      * Initialize control fields.
      *
     C                   move      *blank        fnsbfl
     C                   move      *blank        fnpfcd
     C                   z-add     0             fncldt
      *
      *----------------------
      * CURRENT week values
      *----------------------
      *
      *           Populate Year/Period/Week with Reopen Date values.
      *
     C                   z-add     d1yr          fncyr
     C                   z-add     d1pe          fncpe
     C                   z-add     d1wk          fncwk
      *
      *           Retrieve the Beginning/Ending dates for the Reopen Date.
      *
     C                   call      'TF818'
     C                   parm                    xxyr
     C                   parm                    xxwk
     C     fncbdt        parm      0             xxwbdt
     C     fncbsyn       parm      0             xxwbsyndt
     C     fncbmdy       parm      0             xxwbmdy
     C     fncedt        parm      0             xxwedt
     C     fncesyn       parm      0             xxwesyndt
     C     fncemdy       parm      0             xxwemdy
      *
      *
      *----------------------
      * LAST week values
      *----------------------
      *
      *         Find the Last Saturday (the Saturday prior to the one reopened)
      *
     C                   move      wkdt          wkisodate
     C                   subdur    7:*days       wkisodate
     C                   move      wkisodate     wkdt
      *
      *          Retrieve the year/period/week for the Last Week
      *
     C                   call      'TF815'
     C                   parm      wkdt          xxsatdt
     C                   parm      'P'           xxapfl
     C     fnlyr         parm      0             xxyr
     C     fnlpe         parm      0             xxpe
     C     fnlwk         parm      0             xxwk
      *
      *           Retrieve the Beginning/Ending dates for the Last Week
      *
     C                   call      'TF818'
     C                   parm                    xxyr
     C                   parm                    xxwk
     C     fnlbdt        parm      0             xxwbdt
     C     fnlbsyn       parm      0             xxwbsyndt
     C     fnlbmdy       parm      0             xxwbmdy
     C     fnledt        parm      0             xxwedt
     C     fnlesyn       parm      0             xxwesyndt
     C     fnlemdy       parm      0             xxwemdy
      *
      *
      * Update Function Control record
      *
     C                   update    fnrec
      *
      * Update two Data Areas
     C                   exsr      $datfmarg
     C                   exsr      $datfsale
      *
      * Delete Invoice Charge records
      *
     C                   exsr      $dlt021
      *
      * Issue a message
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08138'
     C                   endif
      *
     C                   endif                                                  If hit
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------
      * Update Data area for TFS Datamart Cube: Sales Production Margin
      *-------------------------------------------------------------------
      *
     C     $datfmarg     begsr
      *
      * If the "last" TFP099 date (the last "good" data) is now earlier than
      *    the "last" Datamart Margin Build,
      *
     C                   if        fnledt < da099dt                             If Margin
      *
      * Move the date of the "last" good data
      *
     C                   z-add     fnledt        da099dt
     C
      * Make the "last" build date equal to the Reopen Date less 1 day.
      * (This controls deleting/rebuilding logic.)
      *
     C                   move      fncedt        wkisodate
     C                   subdur    1:*days       wkisodate
     C                   move      wkisodate     dadmdt
     C                   endif                                                  If Margin
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Update Data area for Sales Datamart Cube
      *--------------------------------------------------------------------------------------
      *
     C     $datfsale     begsr
      *
      * If the "last" TFP099 date (the last "good" data) is now earlier than
      *    the "last" Datamart Sales Build,
      *
     C                   if        fnledt < dash099dt                           If Sales
      *
      * Move the date of the "last" good data
      *
     C                   z-add     fnledt        dash099dt
     C
      * Make the "last" build date equal to the Reopen Date less 1 day.
      * (This controls deleting/rebuilding logic.)
      *
     C                   move      fncedt        wkisodate
     C                   subdur    1:*days       wkisodate
     C                   move      wkisodate     dashdmdt
     C                   endif                                                  If Sales
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------------------------
      * Delete Invoice Charge records
      *------------------------------------------------------------------------------------
      *
      * At the time this program was written, we were not doing anything with this TFS
      * file. If that changes, we will need to rethink this whole reopen process.
      *
     C     $dlt021       begsr
      *
     C     key01         setll     tfl021i
      *
     C                   dou       *in91 = *on                                  Do loop
     C     wksmcd        reade     tfl021i                                91
     C                   if        *in91 = *off                                 If not EOF
     C                   delete    icrec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wksmcd
     C                   kfld                    fncedt
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
