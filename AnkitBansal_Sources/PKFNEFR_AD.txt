// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKFNEFR
// ?Date: 14.08.2025 Time: 02:51:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?FUNCTION HISTORY
DO;

//?Purpose:  This program is the online pgm that will allow
//?the user to change yard deads, and held overs after the
//?was sent to kill
//?Author:  Susan L. Mason
EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
{
 //?Execute internal function

 //?This project is to allow reporting of yards/held over after
 //?sent to kill has been already been reported
 //?Special Notes:
 //?Also correction to Held Over in reporting of Shipped Weight
 //?on the next days kill.
 //?Fixes were to correct the dollars spreading of $'s and Weight
 //?and freight in relationship to the correct record
 //?Also correct the create of deduction and additions on the reporting
 //?of the subject tattoo, to use new routine.
}


//?************************************************
//?Changes:
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//? 12/05/96  New
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//? length from 5 to 7.
EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


//?************************************************
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// WRK.Tattoo Detail was Chg Usr = CND.No
WRK.Tattoo_Detail_was_Chg_Usr = 'N';

// WRK.Held Over Records Y/N = CND.Blank
WRK.Held_Over_Records_Y_N = *BLANK;

// WRK.Held Over Record Ld = CND.Blank
WRK.Held_Over_Record_Ld = *BLANK;

// WRK.Record Change Usr = CND.Blank
WRK.Record_Change_Usr = *BLANK;

//?Delete all record by bo load and tattoo number
EXECUTE FUNCTION(Dlt Tattoo Detail Wrk RT) TYPE(RTVOBJ) FILE(PKDRCPP)           AB1186082;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Detail Wrk DO) TYPE(DLTOBJ) FILE(PKDRCPP)           AB1185885;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TDW_Sequence_Number);
}


//?This fun will accumulate the tattoo postion by date to eof
EXECUTE FUNCTION(RTV Tattoo Totals Add RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1182669;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Purchase_Date);
PARAMETER(WRK.TH_Live_Purchase_UOM);
PARAMETER(WRK.TH_Live_Purchase_Price);
PARAMETER(WRK.TH_Live_Gross_Amt);
PARAMETER(WRK.TH_LIve_Net_Amt);
PARAMETER(PAR.TH_Dead_On_Arrival);
PARAMETER(PAR.TH_Head_Received);
PARAMETER(PAR.TH_Yard_Deads);
PARAMETER(PAR.TH_Held_Over);
PARAMETER(PAR.TH_Head_Condemned);
PARAMETER(PAR.TH_Head_Killed);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Avg_Live_Wgt);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Payment_Gross);
PARAMETER(WRK.Th_Payment_Net_Amt);
PARAMETER(WRK.TH_AP_Voucher_Document#);
PARAMETER(WRK.TH_Freight_Amount);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(WRK.Kill_Date_1_Usr);
PARAMETER(WRK.Kill_Date_2_USR);
PARAMETER(WRK.Kill_Date_3_Usr);
{
 //?USER: Initialize routine

 //?MODIFICATION HISTORY
 DO;

 //?Purpose: Accumulate the tattoo header dollars and wgt, and totals
 //?that will be placed on the orginal tattoo header
 EXECUTE FUNCTION(HPE025) TYPE(EXCINTFUN)                                        AB1187109;
 {
  //?Execute internal function

  //?This project is to allow reporting of yards/held over after
  //?sent to kill has been already been reported
  //?Special Notes:
  //?Also correction to Held Over in reporting of Shipped Weight
  //?on the next days kill.
  //?Fixes were to correct the dollars spreading of $'s and Weight
  //?and freight in relationship to the correct record
  //?Also correct the create of deduction and additions on the reporting
  //?of the subject tattoo, to use new routine.
 }

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 ENDDO;

 //?Set Par add fields to zero
 DO;

 // PAR.Kill Date 1 Usr = CON.*ZERO
 PAR.Kill_Date_1_Usr = *ZERO;

 // PAR.Kill Date 2 USR = CON.*ZERO
 PAR.Kill_Date_2_USR = *ZERO;

 // PAR.Kill Date 3 Usr = CON.*ZERO
 PAR.Kill_Date_3_Usr = *ZERO;

 // PAR.TH Purchase Date = WRK.Zero USR
 PAR.TH_Purchase_Date = WRK.Zero_USR;

 // PAR.TH Live Gross Amt = WRK.Zero USR
 PAR.TH_Live_Gross_Amt = WRK.Zero_USR;

 // PAR.TH LIve Net Amt = WRK.Zero USR
 PAR.TH_LIve_Net_Amt = WRK.Zero_USR;

 // PAR.TH Dead On Arrival = WRK.Zero USR
 PAR.TH_Dead_On_Arrival = WRK.Zero_USR;

 // PAR.TH Head Received = WRK.Zero USR
 PAR.TH_Head_Received = WRK.Zero_USR;

 // PAR.TH Yard Deads = WRK.Zero USR
 PAR.TH_Yard_Deads = WRK.Zero_USR;

 // PAR.TH Held Over = WRK.Zero USR
 PAR.TH_Held_Over = WRK.Zero_USR;

 // PAR.TH Head Condemned = WRK.Zero USR
 PAR.TH_Head_Condemned = WRK.Zero_USR;

 // PAR.TH Live Wgt = WRK.Zero USR
 PAR.TH_Live_Wgt = WRK.Zero_USR;

 // PAR.TH Avg Live Wgt = WRK.Zero USR
 PAR.TH_Avg_Live_Wgt = WRK.Zero_USR;

 // PAR.TH Deduction Amt = WRK.Zero USR
 PAR.TH_Deduction_Amt = WRK.Zero_USR;

 // PAR.TH Head Received = WRK.Zero USR
 PAR.TH_Head_Received = WRK.Zero_USR;

 // PAR.TH Yard Deads = WRK.Zero USR
 PAR.TH_Yard_Deads = WRK.Zero_USR;

 // PAR.TH Deduction Amt = WRK.Zero USR
 PAR.TH_Deduction_Amt = WRK.Zero_USR;

 // PAR.TH Total Net WO Adds = WRK.Zero USR
 PAR.TH_Total_Net_WO_Adds = WRK.Zero_USR;

 // PAR.TH Carcass Net Amt = WRK.Zero USR
 PAR.TH_Carcass_Net_Amt = WRK.Zero_USR;

 // PAR.TH Additions Amt = WRK.Zero USR
 PAR.TH_Additions_Amt = WRK.Zero_USR;

 // PAR.TH Payment Gross = WRK.Zero USR
 PAR.TH_Payment_Gross = WRK.Zero_USR;

 // PAR.Th Payment Net Amt = WRK.Zero USR
 PAR.Th_Payment_Net_Amt = WRK.Zero_USR;

 // PAR.TH Freight Amount = WRK.Zero USR
 PAR.TH_Freight_Amount = WRK.Zero_USR;

 // PAR.TH Accrual Amount = WRK.Zero USR
 PAR.TH_Accrual_Amount = WRK.Zero_USR;

 // PAR.TH Shipped Weight = WRK.Zero USR
 PAR.TH_Shipped_Weight = WRK.Zero_USR;

 // PAR.PD Producer Code = CON.*BLANK
 PAR.PD_Producer_Code = *BLANK;

 // PAR.PL Location Code = CON.*BLANK
 PAR.PL_Location_Code = *BLANK;

 ENDDO;

 //?USER: Process Data record

 //?Load kill dates
 CASE;

 // IF PAR.Kill Date 1 Usr EQ WRK.Zero USR
 IF PAR.Kill_Date_1_Usr = WRK.Zero_USR;

 // PAR.Kill Date 1 Usr = DB1.TH Kill Date
 PAR.Kill_Date_1_Usr = DB1.TH_Kill_Date;

 //?Load kill dates
 // IF PAR.Kill Date 2 USR EQ WRK.Zero USR
 IF PAR.Kill_Date_2_USR = WRK.Zero_USR;

 // PAR.Kill Date 2 USR = DB1.TH Kill Date
 PAR.Kill_Date_2_USR = DB1.TH_Kill_Date;

 //?Load kill dates
 // IF PAR.Kill Date 3 Usr EQ WRK.Zero USR
 IF PAR.Kill_Date_3_Usr = WRK.Zero_USR;

 // PAR.Kill Date 3 Usr = DB1.TH Kill Date
 PAR.Kill_Date_3_Usr = DB1.TH_Kill_Date;

 ENDIF;

 CASE;

 // IF PAR.Kill Date 3 Usr is Not Found Kill Date
 IF PAR.Kill_Date_3_Usr = *ZERO;

 //?accumulate detail or move detail
 DO;

 // PAR.TH Purchase Date = DB1.TH Purchase Date
 PAR.TH_Purchase_Date = DB1.TH_Purchase_Date;

 // PAR.TH Live Gross Amt = PAR.TH Live Gross Amt + DB1.TH Live Gross Amt
 PAR.TH_Live_Gross_Amt = PAR.TH_Live_Gross_Amt + DB1.TH_Live_Gross_Amt;

 // PAR.TH LIve Net Amt = PAR.TH LIve Net Amt + DB1.TH LIve Net Amt
 PAR.TH_LIve_Net_Amt = PAR.TH_LIve_Net_Amt + DB1.TH_LIve_Net_Amt;

 // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
 PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

 // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
 PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

 // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
 PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

 // PAR.TH Held Over = PAR.TH Held Over + DB1.TH Held Over
 PAR.TH_Held_Over = PAR.TH_Held_Over + DB1.TH_Held_Over;

 // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
 PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

 // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
 PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

 // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
 PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.TH Deduction Amt
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.TH_Deduction_Amt;

 // PAR.TH Total Net WO Adds = PAR.TH Total Net WO Adds + DB1.TH Total Net WO Adds
 PAR.TH_Total_Net_WO_Adds = PAR.TH_Total_Net_WO_Adds + DB1.TH_Total_Net_WO_Adds;

 // PAR.TH Carcass Net Amt = PAR.TH Carcass Net Amt + DB1.TH Carcass Net Amt
 PAR.TH_Carcass_Net_Amt = PAR.TH_Carcass_Net_Amt + DB1.TH_Carcass_Net_Amt;

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.TH Additions Amt
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.TH_Additions_Amt;

 // PAR.TH Payment Gross = PAR.TH Payment Gross + DB1.TH Payment Gross
 PAR.TH_Payment_Gross = PAR.TH_Payment_Gross + DB1.TH_Payment_Gross;

 // PAR.Th Payment Net Amt = PAR.Th Payment Net Amt + DB1.Th Payment Net Amt
 PAR.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt + DB1.Th_Payment_Net_Amt;

 // PAR.TH Freight Amount = PAR.TH Freight Amount + DB1.TH Freight Amount
 PAR.TH_Freight_Amount = PAR.TH_Freight_Amount + DB1.TH_Freight_Amount;

 // PAR.TH Shipped Weight = PAR.TH Shipped Weight + DB1.TH Shipped Weight
 PAR.TH_Shipped_Weight = PAR.TH_Shipped_Weight + DB1.TH_Shipped_Weight;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.TH Accrual Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.TH_Accrual_Amount;

 // PAR.TH AP Voucher/Document# = DB1.TH AP Voucher/Document#
 PAR.TH_AP_Voucher_Document# = DB1.TH_AP_Voucher_Document#;

 // PAR.TH Voucher Payment Date = DB1.TH Voucher Payment Date
 PAR.TH_Voucher_Payment_Date = DB1.TH_Voucher_Payment_Date;

 // PAR.PD Producer Code = DB1.PD Producer Code
 PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 // PAR.PL Location Code = DB1.PL Location Code
 PAR.PL_Location_Code = DB1.PL_Location_Code;

 ENDDO;

 ENDIF;

}


//?This fun will create the tattoo detail wrk file by read tto dtl
EXECUTE FUNCTION(RTV TT DTL/CRT TT DWK  RT) TYPE(RTVOBJ) FILE(PKA2CPP)          AB1185967;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.Held_Over_Record_Ld);
{
 //?USER: Process Data record

 //?Selection on loading
 DO;

 // WRK.Hld Ovr Rec Pen Usr = CON.*BLANK
 WRK.Hld_Ovr_Rec_Pen_Usr = *BLANK;

 // WRK.Allow Change Usr Y/N = CND.Yes
 WRK.Allow_Change_Usr_Y_N = 'Y';

 //?11/11/2008 slm found that the resale was not be
 //?brought back -- do not allow change on resales hogs
 EXECUTE FUNCTION(Val Tattoo Hdr to TaDtl) TYPE(RTVOBJ) FILE(PKA1CPP)            AB1183248;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Org_Th_Kill_Status);
 PARAMETER(WRK.Org_THP_Process_Code_Usr);
 PARAMETER(WRK.HC_Class_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.HC Class Type is Resale
 IF WRK.HC_Class_Type = 'R';

 // WRK.Allow Change Usr Y/N = CND.No
 WRK.Allow_Change_Usr_Y_N = 'N';

 // IF DB1.TD Drive Card Number is No Drive Card
 IF DB1.TD_Drive_Card_Number = *ZERO;

 // WRK.Allow Change Usr Y/N = CND.No
 WRK.Allow_Change_Usr_Y_N = 'N';

 // IF DB1.TDP Process Code is Not Sent to Kill
 IF DB1.TDP_Process_Code <> 'K';

 // WRK.Allow Change Usr Y/N = CND.No
 WRK.Allow_Change_Usr_Y_N = 'N';

 // IF WRK.Org THP Process Code Usr is Payment
 IF WRK.Org_THP_Process_Code_Usr = 'PAYMNT';

 // WRK.Allow Change Usr Y/N = CND.No
 WRK.Allow_Change_Usr_Y_N = 'N';

 ENDIF;

 ENDDO;

 CASE;

 // IF WRK.Allow Change Usr Y/N is Yes
 IF WRK.Allow_Change_Usr_Y_N = 'Y';

 CASE;

 // IF DB1.TDP Process Code is Driven to Kill/Resold
 IF DB1.TDP_Process_Code = 'K';

 //?Create the tattoo detail work file
 // WRK.TDWC Pen Head = DB1.TD Pen Head + DB1.TD Held Over
 WRK.TDWC_Pen_Head = DB1.TD_Pen_Head + DB1.TD_Held_Over;

 // WRK.TDWC Sent to Kill = WRK.TDWC Pen Head - DB1.TD Yard Dead
 WRK.TDWC_Sent_to_Kill = WRK.TDWC_Pen_Head - DB1.TD_Yard_Dead;

 // WRK.TDWC Sent to Kill = WRK.TDWC Sent to Kill - DB1.TD Held Over
 WRK.TDWC_Sent_to_Kill = WRK.TDWC_Sent_to_Kill - DB1.TD_Held_Over;

 //?Set held over status in work file
 CASE;

 // IF DB1.TD Held Over NE WRK.Zero USR
 IF DB1.TD_Held_Over <> WRK.Zero_USR;

 // WRK.TDWC Held Over Status = CND.Ready-Hld Over Processing
 WRK.TDWC_Held_Over_Status = 'Y';

 ENDIF;

 //?Create record of held over or create record witho held overs dtl wrk
 CASE;

 // IF DB1.Held Over Pen Number NE WRK.Blank Usr 1 fld Usr
 IF DB1.Held_Over_Pen_Number <> WRK.Blank_Usr_1_fld_Usr;

 EXECUTE FUNCTION(Crt Tattoo Detail Wrk CO) TYPE(CRTOBJ) FILE(PKDRCPP)           AB1185883;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(DB1.TD_Drive_Time);
 PARAMETER(DB1.TD_User_Date_1);
 PARAMETER(DB1.TD_Live_Wgt);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER('Y');
 PARAMETER(DB1.TD_Drive_Card_Number);
 PARAMETER(DB1.TD_Avg_Live_Wgt);
 PARAMETER(DB1.TD_Gen_Bal_To_Kill);
 PARAMETER(DB1.TD_Recs_Created_for_HO);
 PARAMETER(DB1.TD_User_Status_2);
 PARAMETER(DB1.TD_User_Date_2);
 PARAMETER(DB1.TD_Drive_Date);
 PARAMETER(DB1.TD_Drive_Hour);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TDP_Process_Code);
 PARAMETER(DB1.Held_Over_Pen_Company_Num);
 PARAMETER(DB1.Held_Over_Pen_Number);
 PARAMETER(DB1.TD_Live_Wgt);
 PARAMETER(WRK.TDWC_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER('Y');
 PARAMETER(DB1.TD_Avg_Live_Wgt);
 PARAMETER(DB1.Held_Over_Pen_Company_Num);
 PARAMETER(DB1.Held_Over_Pen_Number);
 PARAMETER(WRK.TDWC_Sent_to_Kill);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(*BLANK);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER(DB1.TDP_Process_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Update the tattoo detail work file with next record information
 //?if the org record that was created was held over
 // Call program Rtv Nxt Kill Dt 2 OMS XF.
 CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Next_Kill_Date);

 EXECUTE FUNCTION(RTV TT DTL/CHG TT DWK  RT) TYPE(RTVOBJ) FILE(PKA2CPP)          AB1185990;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(WRK.Next_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Held_Over_Record_Ld);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Ttt DWrk Next Rec CH) TYPE(CHGOBJ) FILE(PKDRCPP)           AB1185995;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(PAR.TD_Sequence_Number);
  PARAMETER('Y');
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?If next record is = K and when it is load do not allow
  //?a tattoo to have more then 1 day of held overs.
  //?if this is the case I.S. will have to take a look
  CASE;

  // IF DB1.TDP Process Code is Driven to Kill/Resold
  IF DB1.TDP_Process_Code = 'K';

  // WRK.Held Over Record Ld = CND.Yes
  WRK.Held_Over_Record_Ld = 'Y';

  ENDIF;

 }

 //?Create record of held over or create record witho held overs dtl wrk
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Crt Tattoo Detail Wrk CO) TYPE(CRTOBJ) FILE(PKDRCPP)           AB1185883;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(DB1.TD_Drive_Time);
 PARAMETER(DB1.TD_User_Date_1);
 PARAMETER(DB1.TD_Live_Wgt);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER(DB1.TD_Held_Over_Status);
 PARAMETER(DB1.TD_Drive_Card_Number);
 PARAMETER(DB1.TD_Avg_Live_Wgt);
 PARAMETER(DB1.TD_Gen_Bal_To_Kill);
 PARAMETER(DB1.TD_Recs_Created_for_HO);
 PARAMETER(DB1.TD_User_Status_2);
 PARAMETER(DB1.TD_User_Date_2);
 PARAMETER(DB1.TD_Drive_Date);
 PARAMETER(DB1.TD_Drive_Hour);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TDP_Process_Code);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(DB1.TD_Live_Wgt);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER(DB1.TD_Held_Over_Status);
 PARAMETER(DB1.TD_Avg_Live_Wgt);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(WRK.TDWC_Sent_to_Kill);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(*BLANK);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER(DB1.TDP_Process_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


//?11/10/2008 slm susan reviewing of held overs
//?Print the tattoo detail work file start
// LCL.PRT Printer Device = CON.ISPRT01
LCL.PRT_Printer_Device = 'ISPRT01';

// LCL.PRT Hold Output Sts = CND.*Yes
LCL.PRT_Hold_Output_Sts = *YES;

// LCL.PRT Save Output Sts = CND.*Yes
LCL.PRT_Save_Output_Sts = *YES;

// LCL.PRT Copies Alpha = CON.01
LCL.PRT_Copies_Alpha = 01;

// LCL.Company Number Alpha Usr = CVTVAR(PAR.BOH Company Number)
LCL.Company_Number_Alpha_Usr = CVTVAR(PAR.BOH_Company_Number);

// LCL.Buy Order Number Alpha = CVTVAR(PAR.BOH Buy Order Number)
LCL.Buy_Order_Number_Alpha = CVTVAR(PAR.BOH_Buy_Order_Number);

// LCL.Buy Order Load Alpha = CVTVAR(PAR.BOL Load Number)
LCL.Buy_Order_Load_Alpha = CVTVAR(PAR.BOL_Load_Number);

// LCL.Tattoo Nbr Alpha Usr = CVTVAR(PAR.TH Tattoo Number)
LCL.Tattoo_Nbr_Alpha_Usr = CVTVAR(PAR.TH_Tattoo_Number);

//?USER: Initialize subfile header

// CTL.Kill Date 1 Usr = WRK.Kill Date 1 Usr
CTL.Kill_Date_1_Usr = WRK.Kill_Date_1_Usr;

// CTL.Kill Date 2 USR = WRK.Kill Date 2 USR
CTL.Kill_Date_2_USR = WRK.Kill_Date_2_USR;

// CTL.Kill Date 3 Usr = WRK.Kill Date 3 Usr
CTL.Kill_Date_3_Usr = WRK.Kill_Date_3_Usr;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Producer_Name_17_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name_Usr_17);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.@Desc_30);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Rtv Shift,HldOvrShft  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195857;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(CTL.TH_Shift_Held_Over);
PARAMETER(CTL.TH_Shift_Held_Over_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// WRK.TH Shift Held Over Head = CTL.TH Shift Held Over Head
WRK.TH_Shift_Held_Over_Head = CTL.TH_Shift_Held_Over_Head;

//?USER: Initialize subfile record (existing record)

// RCD.Allow Change Usr Y/N = CND.Yes
RCD.Allow_Change_Usr_Y_N = 'Y';

// RCD.Allow Hld Over Chg Usr = CND.Yes
RCD.Allow_Hld_Over_Chg_Usr = 'Y';

CASE;

// IF CTL.Kill Date 3 Usr NE WRK.Zero USR
IF CTL.Kill_Date_3_Usr <> WRK.Zero_USR;

// RCD.Allow Change Usr Y/N = CND.No
RCD.Allow_Change_Usr_Y_N = 'N';

// RCD.Allow Hld Over Chg Usr = CND.No
RCD.Allow_Hld_Over_Chg_Usr = 'N';

ENDIF;

CASE;

// IF WRK.Held Over Record Ld is Yes
IF WRK.Held_Over_Record_Ld = 'Y';

CASE;

// IF DB1.TH Kill Date EQ CTL.Kill Date 2 USR
IF DB1.TH_Kill_Date = CTL.Kill_Date_2_USR;

// RCD.Allow Hld Over Chg Usr = CND.No
RCD.Allow_Hld_Over_Chg_Usr = 'N';

ENDIF;

CASE;

// IF DB1.TDW User Status 1 is Rec Crt for Hld Ovr Hogs
IF DB1.TDW_User_Status_1 = 'Y';

//?If record was created from a held over do not show beg pen head
// RCD.Allow Hld Over Chg Usr = CND.No
RCD.Allow_Hld_Over_Chg_Usr = 'N';

ENDIF;

// IF DB1.TDW User Status 1 is Rec Crt for Hld Ovr Hogs
IF DB1.TDW_User_Status_1 = 'Y';

CASE;

// IF DB1.TH Kill Date EQ CTL.Kill Date 1 Usr
IF DB1.TH_Kill_Date = CTL.Kill_Date_1_Usr;

//?If record was created from a held over do not show beg pen head
// RCD.Allow Hld Over Chg Usr = CND.No
RCD.Allow_Hld_Over_Chg_Usr = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?If record was created from a held over do not show beg pen head
// RCD.Allow Hld Over Chg Usr = CND.No
RCD.Allow_Hld_Over_Chg_Usr = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// RCD.TDWC Pen Head = DB1.TDW Pen Head + DB1.TDW Held Over
RCD.TDWC_Pen_Head = DB1.TDW_Pen_Head + DB1.TDW_Held_Over;

// RCD.TDWC Sent to Kill = DB1.TDWC Pen Head - DB1.TDWC Yard Dead
RCD.TDWC_Sent_to_Kill = DB1.TDWC_Pen_Head - DB1.TDWC_Yard_Dead;

// RCD.TDWC Sent to Kill = RCD.TDWC Sent to Kill - DB1.TDWC Held Over
RCD.TDWC_Sent_to_Kill = RCD.TDWC_Sent_to_Kill - DB1.TDWC_Held_Over;

CASE;

// IF RCD.TDW Held Over NE WRK.Zero USR
IF RCD.TDW_Held_Over <> WRK.Zero_USR;

// RCD.TDWC Held Over Status = CND.Ready-Hld Over Processing
RCD.TDWC_Held_Over_Status = 'Y';

// IF RCD.TDWC Held Over GT WRK.Zero USR
IF RCD.TDWC_Held_Over > WRK.Zero_USR;

// RCD.TDWC Held Over Status = CND.Ready-Hld Over Processing
RCD.TDWC_Held_Over_Status = 'Y';

ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.TH Shift Held Over Head NE WRK.TH Shift Held Over Head
IF CTL.TH_Shift_Held_Over_Head <> WRK.TH_Shift_Held_Over_Head;

CASE;

// IF CTL.TH Shift Held Over Head GT CTL.TH Head Received
IF CTL.TH_Shift_Held_Over_Head > CTL.TH_Head_Received;

// Send error message - 'Shift held over head can't be greater than the head rcvd.'
ERROR(PRK0741);

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

//?* User Defined * Prompts
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.New Held Over Pen
IF PGM.*Cursor_field = RCD.New_Held_Over_Pen;

// Call program Sel Pen               SR.
CALL PROGRAM(Sel Pen               SR) ('PKJ0SRR');
PARAMETER(RCD.New_Held_Over_Pen_Co);
PARAMETER(RCD.New_Held_Over_Pen);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Pen Validation
CASE;

// IF RCD.New Held Over Pen is Pen Number is Empty
IF RCD.New_Held_Over_Pen = *BLANK;

//?IF NO NEXT RECORD WHEN CREATED MUST BE A OPEN PEN
CASE;

// IF RCD.Nxt Kll Dte Rcd Process EQ WRK.Blank Usr 1 fld Usr
IF ( RCD.Nxt_Kll_Dte_Rcd_Process = WRK.Blank_Usr_1_fld_Usr;

// AND RCD.TDWC Held Over is greater than 0
AND RCD.TDWC_Held_Over > *ZERO );

// OR RCD.Nxt Kll Dte Rcd Process EQ WRK.Blank Usr 1 fld Usr
OR ( RCD.Nxt_Kll_Dte_Rcd_Process = WRK.Blank_Usr_1_fld_Usr;

// AND RCD.TDW Held Over is greater than 0
AND RCD.TDW_Held_Over > *ZERO );

// OR RCD.Nxt Kll Dte Rcd Process EQ WRK.Blank Usr 1 fld Usr
OR ( RCD.Nxt_Kll_Dte_Rcd_Process = WRK.Blank_Usr_1_fld_Usr;

// AND RCD.TDWC Total Held Over is greater than 0
AND RCD.TDWC_Total_Held_Over > *ZERO );

CASE;

// IF RCD.New Held Over Pen is Pen Number is Empty
IF RCD.New_Held_Over_Pen = *BLANK;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Val Pen-no parms  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1118072;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.Change_Pen_Number);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(RCD.Change_Pen_Number);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Val Pen-no parms  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1118072;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.New_Held_Over_Pen);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(RCD.Change_Pen_Number);

ENDIF;

ENDIF;

ENDIF;

//?Pen Validation
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Val Pen-no parms  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1118072;
PARAMETER(RCD.New_Held_Over_Pen_Co);
PARAMETER(RCD.New_Held_Over_Pen);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(RCD.New_Held_Over_Pen);

ENDIF;

ENDIF;

// WRK.Check Next Pen Head Usr = RCD.TDWC Next Rec Yard Dead + RCD.TDWC Next Rec He
WRK.Check_Next_Pen_Head_Usr = RCD.TDWC_Next_Rec_Yard_Dead + RCD.TDWC_Next_Rec_Held_Over;

CASE;

// IF RCD.TDWC Total Held Over LT WRK.Check Next Pen Head Usr
IF RCD.TDWC_Total_Held_Over < WRK.Check_Next_Pen_Head_Usr;

// Send error message - 'Ttl Held Over must be > to cover the inventory need for the next kill recor
ERROR(PRK0676);
MSGPARM(RCD.TDWC_Total_Held_Over);
MSGPARM(RCD.Nxt_Kll_Dte_Rcd_Process);

ENDIF;

CASE;

// IF RCD.TDWC Total Held Over LT WRK.Check Next Pen Head Usr
IF RCD.TDWC_Total_Held_Over < WRK.Check_Next_Pen_Head_Usr;

// Send error message - 'Ttl Held Over must be > to cover the inventory need for the next kill recor
ERROR(PRK0676);
MSGPARM(RCD.TDWC_Total_Held_Over);
MSGPARM(RCD.Nxt_Kll_Dte_Rcd_Process);

ENDIF;

//?* Yard Dead * Validations
CASE;

// IF RCD.TDWC Total Yard Dead GT RCD.TDWC Pen Head
IF RCD.TDWC_Total_Yard_Dead > RCD.TDWC_Pen_Head;

// Send error message - 'Yard dead head cannot be greater than pen head.'
ERROR(PRK0231);

QUIT;

ENDIF;

//?* Held Overs validation
DO;

CASE;

// IF RCD.TDWC Held Over is *Zeros
IF RCD.TDWC_Held_Over = *ZERO;

// AND RCD.TDW Held Over is *Zeros
AND RCD.TDW_Held_Over = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Head Total USR = RCD.TDWC Pen Head - RCD.TDWC Yard Dead
WRK.Head_Total_USR = RCD.TDWC_Pen_Head - RCD.TDWC_Yard_Dead;

EXECUTE FUNCTION(Rtv Ttt Condemmed Hd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1144045;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Head_Condemned);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TH_Head_Condemned = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Head Total USR = WRK.Head Total USR - WRK.TH Head Condemned
WRK.Head_Total_USR = WRK.Head_Total_USR - WRK.TH_Head_Condemned;

CASE;

// IF RCD.TDWC Total Held Over GT WRK.Head Total USR
IF RCD.TDWC_Total_Held_Over > WRK.Head_Total_USR;

// Send error message - 'Held over head cannot be greater than pen head less yard dead.'
ERROR(PRK0227);

QUIT;

ENDIF;

ENDIF;

ENDDO;

//?Sum of yard dead, held over,  cannot exceed pen hd.
// Synon (17,7) work field =       *
PGM.*Synon_177_work_field = RCD.TDWC_Total_Yard_Dead + RCD.TDWC_Total_Held_Over;

CASE;

// IF PGM.*Synon (17,7) work field GT RCD.TDWC Pen Head
IF PGM.*Synon_177_work_field > RCD.TDWC_Pen_Head;

// Send error message - 'Sum of Yard Dead and Held Over head cannot exceed the pen head.'
ERROR(PRK0237);

QUIT;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Detail Wrk IF) TYPE(EXCINTFUN) FILE(PKDRCPP)        AB1186091;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TDW_Sequence_Number);
PARAMETER(RCD.TDW_Drive_Time);
PARAMETER(RCD.TDW_User_Date_1);
PARAMETER(RCD.TDW_Live_Weight);
PARAMETER(RCD.TDW_Pen_Head);
PARAMETER(RCD.TDW_Yard_Dead);
PARAMETER(RCD.TDW_Held_Over);
PARAMETER(RCD.TDW_Held_Over_Status);
PARAMETER(RCD.TDW_Drive_Card_Number);
PARAMETER(RCD.TDW_Avg_Live_Wgt);
PARAMETER(RCD.TDW_Gen_Bal_to_Kill);
PARAMETER(RCD.TDW_User_Status_1);
PARAMETER(RCD.TDW_User_Status_2);
PARAMETER(RCD.TDW_User_Date_2);
PARAMETER(RCD.TDW_Drive_Date);
PARAMETER(RCD.TDW_Drive_Hour);
PARAMETER(RCD.Org_Pen_Company);
PARAMETER(RCD.Org_Pen_Number);
PARAMETER(RCD.Org_Record_Process);
PARAMETER(RCD.Org_Hld_Over_Pen_Company);
PARAMETER(RCD.Org_Hld_Ovr_Pen_Number);
PARAMETER(RCD.TDWC_Live_Weight);
PARAMETER(RCD.TDWC_Pen_Head);
PARAMETER(RCD.TDWC_Yard_Dead);
PARAMETER(RCD.TDWC_Held_Over);
PARAMETER(RCD.TDWC_Held_Over_Status);
PARAMETER(RCD.TDWC_Avg_Live_Weight);
PARAMETER(RCD.Change_Pen_Co_Number);
PARAMETER(RCD.Change_Pen_Number);
PARAMETER(RCD.TDWC_Sent_to_Kill);
PARAMETER(RCD.TDWC_Total_Yard_Dead);
PARAMETER(RCD.New_Held_Over_Pen_Co);
PARAMETER(RCD.New_Held_Over_Pen);
PARAMETER(RCD.TDWC_Total_Held_Over);
PARAMETER(RCD.Current_Record_Process);
PARAMETER(RCD.TDWC_Next_Record_Kill_Dte);
PARAMETER(RCD.TDWC_Next_Rec_Pen_Head);
PARAMETER(RCD.TDWC_Next_Rec_Yard_Dead);
PARAMETER(RCD.TDWC_Next_Rec_Held_Over);
PARAMETER(RCD.TDWC_Next_Rec_Pen_Co);
PARAMETER(RCD.TDWC_Next_Rec_Pen_Number);
PARAMETER(RCD.Nxt_Kll_Dte_Rcd_Process);
PARAMETER(RCD.TDWC_Unused_1_status);
PARAMETER(RCD.TDWC_Unused_2_Status);
PARAMETER(RCD.TDWC_Unused_Head_1);
PARAMETER(RCD.TDWC_Unused_Weight_1);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(WRK.Record_Change_Usr);
PARAMETER(WRK.Held_Over_Records_Y_N);
{
 //?Execute internal function

 CASE;

 // IF PAR.TDWC Yard Dead NE PAR.TDWC Total Yard Dead
 IF PAR.TDWC_Yard_Dead <> PAR.TDWC_Total_Yard_Dead;

 // OR PAR.TDWC Held Over NE PAR.TDWC Total Held Over
 OR PAR.TDWC_Held_Over <> PAR.TDWC_Total_Held_Over;

 CASE;

 // IF PAR.TDWC Held Over Status is Ready-Hld Over Processing
 IF PAR.TDWC_Held_Over_Status = 'Y';

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 // IF PAR.TDWC Held Over Status is Blank
 IF PAR.TDWC_Held_Over_Status = *BLANK;

 CASE;

 // IF PAR.TDWC Total Held Over NE PAR.TDW Held Over
 IF PAR.TDWC_Total_Held_Over <> PAR.TDW_Held_Over;

 // PAR.TDWC Held Over Status = CND.Ready-Hld Over Processing
 PAR.TDWC_Held_Over_Status = 'Y';

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TDWC Held Over Status = CND.Blank
 PAR.TDWC_Held_Over_Status = *BLANK;

 ENDIF;

 ENDIF;

 // PAR.TDWC Yard Dead = PAR.TDWC Total Yard Dead
 PAR.TDWC_Yard_Dead = PAR.TDWC_Total_Yard_Dead;

 // PAR.TDWC Held Over = PAR.TDWC Total Held Over
 PAR.TDWC_Held_Over = PAR.TDWC_Total_Held_Over;

 // PAR.TDWC Sent to Kill = PAR.TDWC Pen Head - PAR.TDWC Yard Dead
 PAR.TDWC_Sent_to_Kill = PAR.TDWC_Pen_Head - PAR.TDWC_Yard_Dead;

 // PAR.TDWC Sent to Kill = PAR.TDWC Sent to Kill - PAR.TDWC Held Over
 PAR.TDWC_Sent_to_Kill = PAR.TDWC_Sent_to_Kill - PAR.TDWC_Held_Over;

 CASE;

 // IF PAR.New Held Over Pen is Pen Number not Empty
 IF PAR.New_Held_Over_Pen > *BLANK;

 // PAR.Change Pen Number = PAR.New Held Over Pen
 PAR.Change_Pen_Number = PAR.New_Held_Over_Pen;

 // PAR.New Held Over Pen = CON.*BLANK
 PAR.New_Held_Over_Pen = *BLANK;

 ENDIF;

 EXECUTE FUNCTION(Chg Tattoo Detail Wrk CH) TYPE(CHGOBJ) FILE(PKDRCPP)           AB1185884;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TDW_Sequence_Number);
 PARAMETER(PAR.TDW_Drive_Time);
 PARAMETER(PAR.TDW_User_Date_1);
 PARAMETER(PAR.TDW_Live_Weight);
 PARAMETER(PAR.TDW_Pen_Head);
 PARAMETER(PAR.TDW_Yard_Dead);
 PARAMETER(PAR.TDW_Held_Over);
 PARAMETER(PAR.TDW_Held_Over_Status);
 PARAMETER(PAR.TDW_Drive_Card_Number);
 PARAMETER(PAR.TDW_Avg_Live_Wgt);
 PARAMETER(PAR.TDW_Gen_Bal_to_Kill);
 PARAMETER(PAR.TDW_User_Status_1);
 PARAMETER(PAR.TDW_User_Status_2);
 PARAMETER(PAR.TDW_User_Date_2);
 PARAMETER(PAR.TDW_Drive_Date);
 PARAMETER(PAR.TDW_Drive_Hour);
 PARAMETER(PAR.Org_Pen_Company);
 PARAMETER(PAR.Org_Pen_Number);
 PARAMETER(PAR.Org_Record_Process);
 PARAMETER(PAR.Org_Hld_Over_Pen_Company);
 PARAMETER(PAR.Org_Hld_Ovr_Pen_Number);
 PARAMETER(PAR.TDWC_Live_Weight);
 PARAMETER(PAR.TDWC_Pen_Head);
 PARAMETER(PAR.TDWC_Yard_Dead);
 PARAMETER(PAR.TDWC_Held_Over);
 PARAMETER(PAR.TDWC_Held_Over_Status);
 PARAMETER(PAR.TDWC_Avg_Live_Weight);
 PARAMETER(PAR.Change_Pen_Co_Number);
 PARAMETER(PAR.Change_Pen_Number);
 PARAMETER(PAR.TDWC_Sent_to_Kill);
 PARAMETER(PAR.TDWC_Total_Yard_Dead);
 PARAMETER(PAR.New_Held_Over_Pen_Co);
 PARAMETER(PAR.New_Held_Over_Pen);
 PARAMETER(PAR.TDWC_Total_Held_Over);
 PARAMETER(PAR.Current_Record_Process);
 PARAMETER(PAR.TDWC_Next_Record_Kill_Dte);
 PARAMETER(PAR.TDWC_Next_Rec_Pen_Head);
 PARAMETER(PAR.TDWC_Next_Rec_Yard_Dead);
 PARAMETER(PAR.TDWC_Next_Rec_Held_Over);
 PARAMETER(PAR.TDWC_Next_Rec_Pen_Co);
 PARAMETER(PAR.TDWC_Next_Rec_Pen_Number);
 PARAMETER(PAR.Nxt_Kll_Dte_Rcd_Process);
 PARAMETER(PAR.TDWC_Unused_1_status);
 PARAMETER(PAR.TDWC_Unused_2_Status);
 PARAMETER(PAR.TDWC_Unused_Head_1);
 PARAMETER(PAR.TDWC_Unused_Weight_1);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Record Change Usr = CND.Yes
 PAR.Record_Change_Usr = 'Y';

 ENDIF;

}


//?USER: Process command keys

//?Update TH with Shift Held Over hd and flag if it changed
CASE;

// IF CTL.TH Shift Held Over Head NE WRK.TH Shift Held Over Head
IF CTL.TH_Shift_Held_Over_Head <> WRK.TH_Shift_Held_Over_Head;

CASE;

// IF CTL.TH Shift Held Over Head is Not Zero
IF CTL.TH_Shift_Held_Over_Head <> *ZERO;

// CTL.TH Shift Held Over = CND.Yes
CTL.TH_Shift_Held_Over = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.TH Shift Held Over = CND.No
CTL.TH_Shift_Held_Over = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv/Chg Shift HldOvr  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195925;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.Kill_Date_1_Usr);
PARAMETER(CTL.TH_Shift_Held_Over);
PARAMETER(CTL.TH_Shift_Held_Over_Head);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo Hdr        CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190872;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.TH_Shift_Held_Over_Head);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

}


ENDIF;

//?Print the tattoo detail work file start
//?USER: Exit program processing

CASE;

// IF WRK.Record Change Usr is Yes
IF WRK.Record_Change_Usr = 'Y';

// Call program RTV/Chg TTD,Pen,Hdr   XF.
CALL PROGRAM(RTV/Chg TTD,Pen,Hdr   XF) ('PKFTXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.Kill_Date_1_Usr);
PARAMETER(CTL.Kill_Date_2_USR);
PARAMETER(WRK.Held_Over_Records_Y_N);

//?Count held over for kill date
EXECUTE FUNCTION(Rtv Cnt Held/Kill Pln RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1187438;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Kill_Date_1_Usr);
{
 //?USER: Initialize routine

 //?Purpose:  This function will accumulate the held over for
 //?a day.  Key is Company and Kill date.  When the Held overs are
 //?completed accumulate then the kill plan will be updated
 EXECUTE FUNCTION(HPE025NEW) TYPE(EXCINTFUN)                                     AB1187401;
 {
  //?Execute internal function

  //?Modification/changes History
  //?12/01/96   New routine
 }

 //?====================================================================
 // WRK.KP Head Hold Over = CON.*ZERO
 WRK.KP_Head_Hold_Over = *ZERO;

 //?USER: Process Data record

 // WRK.KP Head Hold Over = DB1.TH Held Over + WRK.KP Head Hold Over
 WRK.KP_Head_Hold_Over = DB1.TH_Held_Over + WRK.KP_Head_Hold_Over;

 //?USER: Exit processing

 EXECUTE FUNCTION(Rtv/Chg Hld Ovr Only  RT) TYPE(RTVOBJ) FILE(PKAOCPP)           AB1188997;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(1);
 PARAMETER(WRK.KP_Head_Hold_Over);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Head Hld Ovr Only CH) TYPE(CHGOBJ) FILE(PKAOCPP)           AB1188983;
  PARAMETER(PAR.KP_Company_Number);
  PARAMETER(PAR.KP_Kill_Cut_Date);
  PARAMETER(PAR.KP_Shift);
  PARAMETER(PAR.KP_Head_Hold_Over);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?Count held over for next kill date
EXECUTE FUNCTION(Rtv Cnt Held/Kill Pln RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1187438;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Kill_Date_2_USR);
{
 //?USER: Initialize routine

 //?Purpose:  This function will accumulate the held over for
 //?a day.  Key is Company and Kill date.  When the Held overs are
 //?completed accumulate then the kill plan will be updated
 EXECUTE FUNCTION(HPE025NEW) TYPE(EXCINTFUN)                                     AB1187401;
 {
  //?Execute internal function

  //?Modification/changes History
  //?12/01/96   New routine
 }

 //?====================================================================
 // WRK.KP Head Hold Over = CON.*ZERO
 WRK.KP_Head_Hold_Over = *ZERO;

 //?USER: Process Data record

 // WRK.KP Head Hold Over = DB1.TH Held Over + WRK.KP Head Hold Over
 WRK.KP_Head_Hold_Over = DB1.TH_Held_Over + WRK.KP_Head_Hold_Over;

 //?USER: Exit processing

 EXECUTE FUNCTION(Rtv/Chg Hld Ovr Only  RT) TYPE(RTVOBJ) FILE(PKAOCPP)           AB1188997;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(1);
 PARAMETER(WRK.KP_Head_Hold_Over);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Head Hld Ovr Only CH) TYPE(CHGOBJ) FILE(PKAOCPP)           AB1188983;
  PARAMETER(PAR.KP_Company_Number);
  PARAMETER(PAR.KP_Kill_Cut_Date);
  PARAMETER(PAR.KP_Shift);
  PARAMETER(PAR.KP_Head_Hold_Over);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


ENDIF;

//?Remove Held Over blk rec:if Inventory is zero  -- Held Over Date only
DO;

//?Remove Held Over blk rec:if Inventory is zero  -- Held Over Date only
CASE;

// IF CTL.Kill Date 2 USR is Enter Date
IF CTL.Kill_Date_2_USR > *ZERO;

EXECUTE FUNCTION(Del HeldOvr Inv=Zero  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1283976;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.Kill_Date_2_USR);
PARAMETER(CTL.Kill_Date_1_Usr);
{
 //?USER: Initialize routine

 //?The date pass is to be the kill date of the held over record
 //?This is to get rid of zero held over's
 //?they were held overs at one time but then either
 //?the wrong tattoo number was being report as a held over
 //?and now we need to remove the held over with zero inventory
 //?USER: Process Data record

 //?Find if there is any inventory - no inventory then delete
 DO;

 // LCL.Hog Inventory Usr = CND.No Inventory
 LCL.Hog_Inventory_Usr = 'N';

 CASE;

 // IF DB1.TH Dead On Arrival is Not Zero
 IF DB1.TH_Dead_On_Arrival <> *ZERO;

 // LCL.Hog Inventory Usr = CND.Found Inventory
 LCL.Hog_Inventory_Usr = 'Y';

 // IF DB1.TH Head Received is Not Zero
 IF DB1.TH_Head_Received <> *ZERO;

 // LCL.Hog Inventory Usr = CND.Found Inventory
 LCL.Hog_Inventory_Usr = 'Y';

 // IF DB1.TH Yard Deads is Not Zero
 IF DB1.TH_Yard_Deads <> *ZERO;

 // LCL.Hog Inventory Usr = CND.Found Inventory
 LCL.Hog_Inventory_Usr = 'Y';

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // LCL.Hog Inventory Usr = CND.Found Inventory
 LCL.Hog_Inventory_Usr = 'Y';

 // IF DB1.TH Head Condemned is Not Zero
 IF DB1.TH_Head_Condemned <> *ZERO;

 // LCL.Hog Inventory Usr = CND.Found Inventory
 LCL.Hog_Inventory_Usr = 'Y';

 // IF DB1.TH Head Killed is Not Zero
 IF DB1.TH_Head_Killed <> *ZERO;

 // LCL.Hog Inventory Usr = CND.Found Inventory
 LCL.Hog_Inventory_Usr = 'Y';

 ENDIF;

 ENDDO;

 //?Remove the held over records and write out a comment
 CASE;

 // IF LCL.Hog Inventory Usr is No Inventory
 IF LCL.Hog_Inventory_Usr = 'N';

 //?The date pass is to be the kill date of the held over record
 //?will delete the tattoo detail and the tattoo detail ext
 //?this routine will only be performed on the after sent to
 //?held over routine.
 // WRK.Held Over Records Y/N = CND.No
 WRK.Held_Over_Records_Y_N = 'N';

 EXECUTE FUNCTION(Dlt Tattoo detail     RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1283980;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Tattoo Detail     DO) TYPE(DLTOBJ) FILE(PKA2CPP)           AB1284461;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
 }

 EXECUTE FUNCTION(Dlt TttHdr Ext        RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1284447;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Tattoo Hdr Ext    DO) TYPE(DLTOBJ) FILE(PKDNCPP)           AB1271812;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
 }

 EXECUTE FUNCTION(Dlt TttDtl Ext        RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1284463;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Tattoo Detail Ext  DO) TYPE(DLTOBJ) FILE(PKDYCPP)          AB1196903;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
 }

 EXECUTE FUNCTION(Dlt Tattoo Ded/Add    RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1143415;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete Tattoo Deduction) TYPE(DLTOBJ) FILE(PKCDCPP)            AB1107819;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
 }

 EXECUTE FUNCTION(Del Tattoo Hdr        DO) TYPE(DLTOBJ) FILE(PKA1CPP)           AB1284008;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Held_Over_Records_Y_N);
 {
  //?USER: Processing after Data update

  // PAR.Held Over Records Y/N = CND.Yes
  PAR.Held_Over_Records_Y_N = 'Y';

 }

 CASE;

 // IF WRK.Held Over Records Y/N is Yes
 IF WRK.Held_Over_Records_Y_N = 'Y';

 //?Send message to the tattoo header that the user removed the
 //?held over record....no inventory was on this held over
 // LCL.THC Comment = CONCAT(JOB.*USER,CON.Removed HeldOver - No Inv,CON.1)
 LCL.THC_Comment = JOB.*USER + 'Removed HeldOver - No Inv' (1);

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Kill_Date_1_Usr);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(LCL.THC_Comment);
 PARAMETER('S');
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 ENDIF;

}


ENDIF;

ENDDO;

//?Rd TtoDtl for bo/ld/tatto # Remove Pen number if no longer held over
DO;

//?Rd the tattoo detail by bo/ld/tatt and remove any heldopen# = hldo=0
// Call program Chg HldOvPn to Zero   XP.
CALL PROGRAM(Chg HldOvPn to Zero   XP) ('PLLQXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);

ENDDO;

//?Delete all record by bo load and tattoo number
EXECUTE FUNCTION(Dlt Tattoo Detail Wrk RT) TYPE(RTVOBJ) FILE(PKDRCPP)           AB1186082;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Tattoo Detail Wrk DO) TYPE(DLTOBJ) FILE(PKDRCPP)           AB1185885;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TDW_Sequence_Number);
}


//?Head Rec Tattoo Header Vs Head Rec to Tattoo Detail
DO;

//?Next pgm will vry Tattoo hdr Head Rec to Tattoo Detail
//?and if they do not match make the head rec match from
//?the tattoo detail to the tattoo header.
// Call program Rtv/Chg TattHdrRecOnlyXP.
CALL PROGRAM(Rtv/Chg TattHdrRecOnlyXP) ('PLR1XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);

ENDDO;

