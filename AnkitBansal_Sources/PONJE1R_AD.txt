// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PONJE1R
// ?Date: 14.08.2025 Time: 03:38:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.ED Modified Text = CND.original
DTL.ED_Modified_Text = 'original';

//?USER: Validate detail screen fields

//?R16637 DN 09/21/20-Allow for F4=Prompt.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Consignor State.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor State
IF PGM.*Cursor_field = DTL.ED_Consignor_State;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.ED_Consignor_State);

ENDIF;

//?Consignor Country.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor Country Code
IF PGM.*Cursor_field = DTL.ED_Consignor_Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.ED_Consignor_Country_Code);

ENDIF;

ENDIF;

//?R16637 DN 09/21/20-Validations for Consignor (Applicant) Fields.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Required Fields When 'ED Live with PHIS=Y'.
CASE;

// IF DTL.ED Live with PHIS is yes
IF DTL.ED_Live_with_PHIS = 'Y';

//?Consignor Addr 4/City Required.
CASE;

// IF DTL.ED Consignor Addr 4 is Blank
IF DTL.ED_Consignor_Addr_4 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Addr_4);

ENDIF;

//?Consignor Zip Required.
CASE;

// IF DTL.ED Consignor Postal is Not Entered
IF DTL.ED_Consignor_Postal = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Postal);

ENDIF;

//?Consignor Country Required.
CASE;

// IF DTL.ED Consignor Country Code is Blank
IF DTL.ED_Consignor_Country_Code = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

ENDIF;

//?Consignor State.
CASE;

// IF DTL.ED Consignor State is State code not Blanks
IF DTL.ED_Consignor_State <> *BLANK;

EXECUTE FUNCTION(Val State & Active     RT) TYPE(RTVOBJ) FILE(CAACREP)          AC2188226;
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'State &1 Inactive.'
ERROR(USR5197);
MSGPARM(DTL.ED_Consignor_State);

QUIT;

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(DTL.ED_Consignor_State);

QUIT;

ENDIF;

ENDIF;

//?Consignor Country.
CASE;

// IF DTL.ED Consignor Country Code is Entered
IF DTL.ED_Consignor_Country_Code <> *BLANK;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.ED_Consignor_Country_Code);

QUIT;

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.ED_Consignor_Country_Code);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Exp Doc Defaults   CH) TYPE(CHGOBJ) FILE(PDMMREP)          AC1523771;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.ED_Area_Office);
PARAMETER(DTL.ED_Destination);
PARAMETER(DTL.ED_Consignor_Name);
PARAMETER(DTL.ED_Consignor_Addr_1);
PARAMETER(DTL.ED_Consignor_Addr_2);
PARAMETER(DTL.ED_Consignor_Addr_3);
PARAMETER(DTL.ED_Consignor_Addr_4);
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(DTL.ED_Consignor_Postal);
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(DTL.ED_Plant_Number);
PARAMETER(DTL.ED_Plant_Location_City);
PARAMETER(DTL.ED_Plant_Location_State);
PARAMETER(DTL.ED_Processing_Plant_Sts);
PARAMETER(DTL.ED_Attachment_Subtype);
PARAMETER(DTL.ED_Attachment_Type_Sts);
PARAMETER(DTL.ED_Xlate_Desc_to_Country);
PARAMETER(DTL.ED_Unmarked_Txt);
PARAMETER(DTL.ED_Shipping_Marks_Txt);
PARAMETER(DTL.ED_Date_of_Slaughter_Txt);
PARAMETER(DTL.ED_Place_of_Slaughter_Txt);
PARAMETER(DTL.ED_Date_of_Processing_Txt);
PARAMETER(DTL.ED_Place_of_processing_Tx);
PARAMETER(DTL.ED_Continue_Comment_Txt);
PARAMETER(DTL.ED_Remark_Constant_1);
PARAMETER(DTL.ED_Remark_Constant_2);
PARAMETER(DTL.ED_Remark_Constant_3);
PARAMETER(DTL.ED_Remark_Constant_4);
PARAMETER(DTL.ED_Remark_Constant_5);
PARAMETER(DTL.ED_Remark_Constant_7);
PARAMETER(DTL.ED_Remark_Constant_8);
PARAMETER(DTL.ED_Certify_that_the_meat);
PARAMETER(DTL.ED_Inspector_Name);
PARAMETER(DTL.ED_Origin_Country);
PARAMETER(DTL.ED_Port_of_Loading);
PARAMETER(DTL.ED_Transportion);
PARAMETER(DTL.ED_Seal_Number_1);
PARAMETER(DTL.ED_Seal_Number_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Nm);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_1);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Fax);
PARAMETER(DTL.ED_Can_Import_Cntrl_Phne);
PARAMETER(DTL.ED_Seaboard_Plant_Fax);
PARAMETER(DTL.ED_USDA_Cert_Nbr_US);
PARAMETER(DTL.ED_USDA_Cert_Nbr_CA);
PARAMETER(DTL.ED_Can_Port_of_Entry);
PARAMETER(DTL.ED_Can_Reinsp_Est_Nbr);
PARAMETER(DTL.ED_Can_Reinsp_Est_Name);
PARAMETER(DTL.ED_Can_Reinsp_Est_City);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Sts);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Type);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_p_Crt);
PARAMETER(DTL.ED_Whole_Bird_Sts);
PARAMETER(DTL.ED_Marked_Sts);
PARAMETER(DTL.ED_Tamper_Evident_Sts);
PARAMETER(DTL.ED_Plant_Contact_Name);
PARAMETER(DTL.ED_Plant_Contact_Phone);
PARAMETER(DTL.ED_Modified_Text);
PARAMETER(DTL.ED_Issued_Crt_for_Exp_Txt);
PARAMETER(DTL.ED_Species);
PARAMETER(DTL.ED_Slaughter_Plant_Name);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_1);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_2);
PARAMETER(DTL.ED_Packaging_Plant_Name);
PARAMETER(DTL.ED_Packaging_Plant_Addr_1);
PARAMETER(DTL.ED_Packaging_Plant_Addr_2);
PARAMETER(DTL.ED_Manufact_Plant_Name);
PARAMETER(DTL.ED_Manufact_Plant_Addr_1);
PARAMETER(DTL.ED_Manufact_Plant_Addr_2);
PARAMETER(DTL.ED_USDA_Name_1);
PARAMETER(DTL.ED_USDA_Name_2);
PARAMETER(DTL.ED_USDA_Name_3);
PARAMETER(DTL.ED_Title_of_Official);
PARAMETER(DTL.ED_Letter_of_Credit_Nbr);
PARAMETER(DTL.ED_Unused_prd_mo_yr);
PARAMETER(DTL.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(DTL.ED_Importer_Name);
PARAMETER(DTL.ED_Importer_Addr_1);
PARAMETER(DTL.ED_Importer_Addr_2);
PARAMETER(DTL.ED_Purchaser_Name);
PARAMETER(DTL.ED_Purchaser_Addr_1);
PARAMETER(DTL.ED_Purchaser_Addr_2);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Nm);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_1);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_2);
PARAMETER(DTL.ED_Currency);
PARAMETER(DTL.ED_Conditions_of_Sale);
PARAMETER(DTL.ED_Total_Unit_Price);
PARAMETER(DTL.ED_Invoice_Total);
PARAMETER(DTL.ED_Live_with_PHIS);
PARAMETER(DTL.ED_Plant_Number_Dtl);
PARAMETER(DTL.ED_Language_Xlate_Desc_2);
PARAMETER(DTL.ED_Slaughter_Date_CofE_3);
PARAMETER(DTL.ED_Production_mo_yr_ln_3);
PARAMETER(DTL.ED_Remark_Constant_6);
PARAMETER(DTL.ED_Allow_Print_bef_Ship);
PARAMETER(DTL.ED_Cert_of_Orig_Sbd_addr);
PARAMETER(DTL.ED_Use_item_label_1_2);
PARAMETER(DTL.ED_Slg_Proc_Date_Format);
PARAMETER(DTL.ED_Total_Package_UOM);
PARAMETER(DTL.ED_Export_Certificate_Nbr);
PARAMETER(DTL.ED_Sail_Date);
PARAMETER(DTL.ED_Sworn_on_Date);
PARAMETER(DTL.ED_Consignee_Address_Nbr);
PARAMETER(DTL.ED_Form_Identification_Tx);
PARAMETER(DTL.ED_Cold_Storage_Name);
PARAMETER(DTL.ED_Cold_Storage_Addr_1);
PARAMETER(DTL.ED_Cold_Storage_Addr_2);
PARAMETER(DTL.ED_Cold_Storage_Plant_Nbr);
PARAMETER(DTL.ED_Slaughter_Date_CofE_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_2);
PARAMETER(DTL.ED_Booking_Nbr);
PARAMETER(DTL.ED_Unused_Sts_1);
PARAMETER(DTL.ED_Unused_Sts_2);
PARAMETER(DTL.ED_Unused_Text_1);
PARAMETER(DTL.ED_Unused_Text_2);
PARAMETER(DTL.ED_Unused_Number_1);
PARAMETER(DTL.ED_Unused_Date_1);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


