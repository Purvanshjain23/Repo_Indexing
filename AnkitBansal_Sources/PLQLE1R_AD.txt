// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLQLE1R
// ?Date: 14.08.2025 Time: 02:55:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E50577 JJH 07/24/19 - Add Load Type conditions for 2D, 3D, and 4D
//?- Recompile only, no logic changes
//?P12827 JJH 04/04/18 - STF Gate Entry
//?- Recompile so that we can use STRISDB
//?E3503 JJH 11/13/14 - Authorize Gate Entry Violations
//? Modified the Chg DelivTrackingArrivIF - Buy Order Load function
//? to create System Generated Buy Order Load Comments when Option
//? 11=Trucker Call In, 12=Truck Authorized, and 13=Recv Doc Time
//? are used on the Work With Delivery Receiving function.
//?E3503 JJH 11/13/14 - Authorize Gate Entry Violations
//? Add input parameter: Truck Auth Entry Time USR
//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.Current_System_Date_USR);

CASE;

// IF PAR.TRK Arrival Step Usr is Trucker Arrived
IF PAR.TRK_Arrival_Step_Usr = 'A';

// WRK.Trk Individual Process = CND.Trk Authorized
WRK.Trk_Individual_Process = 'A';

// IF PAR.TRK Arrival Step Usr is Trucker Called In
IF PAR.TRK_Arrival_Step_Usr = 'C';

// WRK.Trk Individual Process = CND.Trucker Calls Ahead
WRK.Trk_Individual_Process = 'C';

// IF PAR.TRK Arrival Step Usr is Trucker at Rec Doc
IF PAR.TRK_Arrival_Step_Usr = 'R';

// WRK.Trk Individual Process = CND.Trc Recv Dock Time
WRK.Trk_Individual_Process = 'R';

ENDIF;

//?USER: Initialize detail screen (existing record)

//?Arrival Rules     - Truck Call In
DO;

CASE;

// IF PAR.TRK Arrival Step Usr is Trucker Called In
IF PAR.TRK_Arrival_Step_Usr = 'C';

CASE;

// IF DTL.DT Arrive @ Plant Date is Not Entered
IF DTL.DT_Arrive_@_Plant_Date = 0;

// DTL.DT Arrive @ Plant Date = CON.*ZERO
DTL.DT_Arrive_@_Plant_Date = *ZERO;

// DTL.DT Arrive @ Plant Time = CON.*ZERO
DTL.DT_Arrive_@_Plant_Time = *ZERO;

EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
PARAMETER(NLL.RS_User_Changed);
PARAMETER(DTL.DT_Arrive_@_Plant_Date);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(NLL.RS_Job);
PARAMETER(NLL.RS_Program);
{
 //?Execute internal function

 // PAR.RS User Changed = JOB.*USER
 PAR.RS_User_Changed = JOB.*USER;

 // Call program Rtv System Date & Tim UP.
 CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);

 // PAR.RS Job = JOB.*JOB
 PAR.RS_Job = JOB.*JOB;

 // PAR.RS Program = JOB.*PROGRAM
 PAR.RS_Program = JOB.*PROGRAM;

}


// DTL.DT Arrive @ Plant Time = LCL.RS Time Changed / CON.100 *
DTL.DT_Arrive_@_Plant_Time = LCL.RS_Time_Changed / 100;

ENDIF;

ENDIF;

CASE;

// IF DTL.DT Arrive @ Plant Time is Not Entered
IF DTL.DT_Arrive_@_Plant_Time = *ZERO;

// AND PAR.TRK Arrival Step Usr is Trucker Called In
AND PAR.TRK_Arrival_Step_Usr = 'C';

// DTL.DT Arrive @ Plant Time = CON.0001
DTL.DT_Arrive_@_Plant_Time = 0001;

ENDIF;

ENDDO;

//?Arrival Rules     - Truck Authorized
DO;

CASE;

// IF PAR.TRK Arrival Step Usr is Trucker Arrived
IF PAR.TRK_Arrival_Step_Usr = 'A';

CASE;

// IF DTL.DT Arrive @ Plant Date is Not Entered
IF DTL.DT_Arrive_@_Plant_Date = 0;

// DTL.DT Arrive @ Plant Date = CON.*ZERO
DTL.DT_Arrive_@_Plant_Date = *ZERO;

// DTL.DT Arrive @ Plant Time = CON.*ZERO
DTL.DT_Arrive_@_Plant_Time = *ZERO;

EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
PARAMETER(NLL.RS_User_Changed);
PARAMETER(DTL.DT_Arrive_@_Plant_Date);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(NLL.RS_Job);
PARAMETER(NLL.RS_Program);
{
 //?Execute internal function

 // PAR.RS User Changed = JOB.*USER
 PAR.RS_User_Changed = JOB.*USER;

 // Call program Rtv System Date & Tim UP.
 CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);

 // PAR.RS Job = JOB.*JOB
 PAR.RS_Job = JOB.*JOB;

 // PAR.RS Program = JOB.*PROGRAM
 PAR.RS_Program = JOB.*PROGRAM;

}


// DTL.DT Arrive @ Plant Time = LCL.RS Time Changed / CON.100 *
DTL.DT_Arrive_@_Plant_Time = LCL.RS_Time_Changed / 100;

ENDIF;

ENDIF;

CASE;

// IF DTL.DT Arrive @ Plant Time is Not Entered
IF DTL.DT_Arrive_@_Plant_Time = *ZERO;

// AND PAR.TRK Arrival Step Usr is Trucker Arrived
AND PAR.TRK_Arrival_Step_Usr = 'A';

// DTL.DT Arrive @ Plant Time = CON.0001
DTL.DT_Arrive_@_Plant_Time = 0001;

ENDIF;

ENDDO;

//?Receiving Rules    - Recv Dock Time
DO;

CASE;

// IF PAR.TRK Arrival Step Usr is Trucker at Rec Doc
IF PAR.TRK_Arrival_Step_Usr = 'R';

// AND DB1.DT To Recv Dock Date is Not Entered
AND DB1.DT_To_Recv_Dock_Date = *ZERO;

// DTL.DT To Recv Dock Time = CON.*ZERO
DTL.DT_To_Recv_Dock_Time = *ZERO;

// DTL.DT To Recv Dock Date = CON.*ZERO
DTL.DT_To_Recv_Dock_Date = *ZERO;

EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
PARAMETER(NLL.RS_User_Changed);
PARAMETER(DTL.DT_To_Recv_Dock_Date);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(NLL.RS_Job);
PARAMETER(NLL.RS_Program);
{
 //?Execute internal function

 // PAR.RS User Changed = JOB.*USER
 PAR.RS_User_Changed = JOB.*USER;

 // Call program Rtv System Date & Tim UP.
 CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);

 // PAR.RS Job = JOB.*JOB
 PAR.RS_Job = JOB.*JOB;

 // PAR.RS Program = JOB.*PROGRAM
 PAR.RS_Program = JOB.*PROGRAM;

}


// DTL.DT To Recv Dock Time = LCL.RS Time Changed / CON.100 *
DTL.DT_To_Recv_Dock_Time = LCL.RS_Time_Changed / 100;

ENDIF;

CASE;

// IF DTL.DT To Recv Dock Time is Not Entered
IF DTL.DT_To_Recv_Dock_Time = *ZERO;

// AND PAR.TRK Arrival Step Usr is Trucker at Rec Doc
AND PAR.TRK_Arrival_Step_Usr = 'R';

// DTL.DT To Recv Dock Time = CON.0001
DTL.DT_To_Recv_Dock_Time = 0001;

ENDIF;

ENDDO;

// LCL.DT Driver = DB1.DT Driver
LCL.DT_Driver = DB1.DT_Driver;

// LCL.DT Farm Site Code = DB1.DT Farm Site Code
LCL.DT_Farm_Site_Code = DB1.DT_Farm_Site_Code;

// LCL.DT Building = DB1.DT Building
LCL.DT_Building = DB1.DT_Building;

// LCL.DT Room = DB1.DT Room
LCL.DT_Room = DB1.DT_Room;

// LCL.DT Trucker Code HPS Prior = DB1.DT Trucker Code HPS
LCL.DT_Trucker_Code_HPS_Prior = DB1.DT_Trucker_Code_HPS;

//?******* Plant Dates and Times  *******
//?Validate: Plant Arrival
CASE;

// IF DTL.DT Plt Arrival Date is Entered
IF DTL.DT_Arrive_@_Plant_Date <> *ZERO;

// AND DTL.DT Plt Arrival Time is Entered
AND DTL.DT_Arrive_@_Plant_Time > *ZERO;

CASE;

// IF DTL.DT Plt Arrival Date GT PAR.Current System Date   USR
IF DTL.DT_Arrive_@_Plant_Date > PAR.Current_System_Date_USR;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.DT_Arrive_@_Plant_Date);
MSGPARM(PAR.Current_System_Date_USR);

ENDIF;

CASE;

// IF DTL.DT Source Type is Internal
IF DTL.DT_Source_Type = 'I';

CASE;

// IF DTL.DT Plt Arrival Date LT DTL.DT Frm Depart Date
IF DTL.DT_Arrive_@_Plant_Date < DTL.DT_Leave_Farm_Date;

// OR DTL.DT Plt Arrival Date EQ DTL.DT Frm Depart Date
OR ( DTL.DT_Arrive_@_Plant_Date = DTL.DT_Leave_Farm_Date;

// AND DTL.DT Plt Arrival Time LT DTL.DT Frm Depart Time
AND DTL.DT_Arrive_@_Plant_Time < DTL.DT_Leave_Farm_Time );

// Send information message - 'WARN:Dt/Tm &1 &2 should not be less than previous dt/tm.'
MESSAGE(PRK1060 *INFO);
MSGPARM(DTL.DT_Arrive_@_Plant_Date);
MSGPARM(DTL.DT_Arrive_@_Plant_Time);

ENDIF;

ENDIF;

ENDIF;

//?Get BOL Head shipped -- in case it changed
EXECUTE FUNCTION(Rtv Avg Live Wgt      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1252631;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(LCL.TH_Avg_Live_Wgt);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // AND PAR.TH Avg Live Wgt is EQ Zero
 AND PAR.TH_Avg_Live_Wgt = *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


EXECUTE FUNCTION(Rtv Shipped Head/Spr  RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1303684;
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(LCL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(DTL.DT_Delivered_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.DT Delivered Weight lbs = DTL.DT Delivered Head * LCL.TH Avg Live Wgt *
DTL.DT_Delivered_Weight_lbs = DTL.DT_Delivered_Head * LCL.TH_Avg_Live_Wgt;

// WRK.Display Output Only Usr = CND.Blank
WRK.Display_Output_Only_Usr = *BLANK;

// DTL.Text description = CON.*BLANK
DTL.Text_description = *BLANK;

CASE;

// IF DTL.DT Source Type is Internal
IF DTL.DT_Source_Type = 'I';

// LCL.DT Trucker Code HPS Prior = DB1.DT Trucker Code HPS
LCL.DT_Trucker_Code_HPS_Prior = DB1.DT_Trucker_Code_HPS;

// Call program Val HPS Driver ActOnlyUP.
CALL PROGRAM(Val HPS Driver ActOnlyUP) ('HP292');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.DT_Driver);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(NLL.DT_Transportation_Office);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.DT_Truck_ID);
PARAMETER(NLL.DT_Trailer_ID);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Trucker_Name_Usr_25);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF DTL.DT Trucker Code HPS NE LCL.DT Trucker Code HPS Prior
IF DTL.DT_Trucker_Code_HPS <> LCL.DT_Trucker_Code_HPS_Prior;

CASE;

// IF DB1.DT Trucker Code HPS is Entered
IF DB1.DT_Trucker_Code_HPS <> *BLANK;

// DTL.Text description = CONCAT(CON.Prior Trucker,LCL.DT Trucker Code HPS Prior,CON.1)
DTL.Text_description = 'Prior Trucker' + LCL.DT_Trucker_Code_HPS_Prior (1);

// DTL.Text description = CONCAT(DTL.Text description,CON.User must update,CON.1)
DTL.Text_description = DTL.Text_description + 'User must update' (1);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

//?Validate DT Split Head total
CASE;

// IF DTL.DT Full/Split Load is Split
IF DTL.DT_Full_Split_Load = 'S';

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(WRK.DTS_Delivered_Head);
PARAMETER(WRK.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


CASE;

// IF WRK.DTS Delivered Head NE DTL.DT Delivered Head
IF WRK.DTS_Delivered_Head <> DTL.DT_Delivered_Head;

// Send error message - 'Delv Tracking Split Head must equal the Delivered Head.'
ERROR(PRK1063);
MSGPARM(DTL.DT_Delivered_Head);

ENDIF;

ENDIF;

//?Validate Split exists if changed to Full
CASE;

// IF DTL.DT Full/Split Load is Full
IF DTL.DT_Full_Split_Load = 'F';

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(WRK.DTS_Delivered_Head);
PARAMETER(WRK.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


CASE;

// IF WRK.DTS Delivered Head GT WRK.Zero USR
IF WRK.DTS_Delivered_Head > WRK.Zero_USR;

// Send error message - 'Delivery Tracking Split exists. Cannot change load from Split to Full.'
ERROR(PRK1068);
MSGPARM(DTL.DT_Full_Split_Load);

ENDIF;

ENDIF;

//?Validate Times as military 8/5/2021 negative not allowed
DO;

//?slm 8/06/21 add validation for the military time and do not allow
//?negative time
//?move validation in order of the fields on the delivery tracking
//?data base
//?validate DT Route Start Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Route_Start_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Route_Start_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Route_Start_Time);

ENDIF;

ENDDO;

//?validate DT Arrive @ Farm Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Arrive_@_Farm_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Arrive_@_Farm_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Arrive_@_Farm_Time);

ENDIF;

ENDDO;

//?validate DT Start Loading Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Start_Loading_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Start_Loading_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Start_Loading_Time);

ENDIF;

ENDDO;

//?validate DT Leave Farm Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Leave_Farm_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Leave_Farm_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Leave_Farm_Time);

ENDIF;

ENDDO;

//?validate DT Arrive @ Plant Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Arrive_@_Plant_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Arrive_@_Plant_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Arrive_@_Plant_Time);

ENDIF;

ENDDO;

//?validate DT TrkScl Weigh-In Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_TrkScl_Weigh_In_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_TrkScl_Weigh_In_Time);

ENDIF;

ENDDO;

//?validate DT To Recv Dock Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_To_Recv_Dock_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_To_Recv_Dock_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_To_Recv_Dock_Time);

ENDIF;

ENDDO;

//?validate DT Start Unloading Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_Start_Unloading_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_Start_Unloading_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_Start_Unloading_Time);

ENDIF;

ENDDO;

//?validate DT TrkScl Weigh-Out Time
DO;

EXECUTE FUNCTION(Val Time hhmm NegNALL IF) TYPE(EXCINTFUN)                      AB1370385;
PARAMETER(DTL.DT_TrkScl_Weigh_Out_Time);
PARAMETER(LCL.Status_2);
PARAMETER(LCL.Status_5_Usr);
{
 //?Execute internal function

 // PAR.Status 2 = CND.No
 PAR.Status_2 = 'N';

 // PAR.Status 5 Usr = CND.No
 PAR.Status_5_Usr = 'N';

 //?Military
 CASE;

 // IF PAR.Time USR NE WRK.Zero USR
 IF PAR.Time_USR <> WRK.Zero_USR;

 // WRK.Time MM USR = PAR.Time USR
 WRK.Time_MM_USR = PAR.Time_USR;

 // WRK.Time HH USR = PAR.Time USR / CON.100 *
 WRK.Time_HH_USR = PAR.Time_USR / 100;

 CASE;

 // IF WRK.Time MM USR is gt 59
 IF WRK.Time_MM_USR > 59;

 // OR WRK.Time HH USR is GT 24
 OR WRK.Time_HH_USR > 24;

 // PAR.Status 2 = CND.Yes
 PAR.Status_2 = 'Y';

 ENDIF;

 ENDIF;

 //?Negative not allowed
 CASE;

 // IF PAR.Time USR LT WRK.Zero USR
 IF PAR.Time_USR < WRK.Zero_USR;

 // PAR.Status 5 Usr = CND.Yes
 PAR.Status_5_Usr = 'Y';

 ENDIF;

}


CASE;

// IF LCL.Status 2 is Yes
IF LCL.Status_2 = 'Y';

// Send error message - 'Time entry must be military HHMM.'
ERROR(PRK1085);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Time);

ENDIF;

CASE;

// IF LCL.Status 5 Usr is Yes
IF LCL.Status_5_Usr = 'Y';

// Send error message - 'Time must not be negative'
ERROR(PRK1612);
MSGPARM(DTL.DT_TrkScl_Weigh_Out_Time);

ENDIF;

ENDDO;

ENDDO;

//?Default Route Start Date if >0, into all dates with times 2/11/04
CASE;

// IF DTL.DT Route Start Date is Entered
IF DTL.DT_Route_Start_Date <> *ZERO;

// LCL.Date USR = DTL.DT Route Start Date
LCL.Date_USR = DTL.DT_Route_Start_Date;

//?Default Route Start Date if >0, into all dates with times 2/11/04
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date USR = DTL.DT Delivery Date
LCL.Date_USR = DTL.DT_Delivery_Date;

ENDIF;

//?arrive @ farm
CASE;

// IF DTL.DT Arrive @ Farm Time is Entered
IF DTL.DT_Arrive_@_Farm_Time > *ZERO;

// AND DTL.DT Arrive @ Farm Date is Not Entered
AND DTL.DT_Arrive_@_Farm_Date = *ZERO;

// DTL.DT Arrive @ Farm Date = LCL.Date USR
DTL.DT_Arrive_@_Farm_Date = LCL.Date_USR;

ENDIF;

//?start loading
CASE;

// IF DTL.DT Start Loading Time is Entered
IF DTL.DT_Start_Loading_Time > *ZERO;

// AND DTL.DT Start Loading Date is Not Entered
AND DTL.DT_Start_Loading_Date = *ZERO;

// DTL.DT Start Loading Date = LCL.Date USR
DTL.DT_Start_Loading_Date = LCL.Date_USR;

ENDIF;

//?leave farm
CASE;

// IF DTL.DT Leave Farm Time is Entered
IF DTL.DT_Leave_Farm_Time > 0;

// AND DTL.DT Leave Farm Date is Not Entered
AND DTL.DT_Leave_Farm_Date = *ZERO;

// DTL.DT Leave Farm Date = LCL.Date USR
DTL.DT_Leave_Farm_Date = LCL.Date_USR;

ENDIF;

//?arrive @ plant
CASE;

// IF DTL.DT Arrive @ Plant Time is Entered
IF DTL.DT_Arrive_@_Plant_Time > *ZERO;

// AND DTL.DT Arrive @ Plant Date is Not Entered
AND DTL.DT_Arrive_@_Plant_Date = 0;

// DTL.DT Arrive @ Plant Date = LCL.Date USR
DTL.DT_Arrive_@_Plant_Date = LCL.Date_USR;

ENDIF;

//?trk scl weigh in
CASE;

// IF DTL.DT TrkScl Weigh-In Time is Entered
IF DTL.DT_TrkScl_Weigh_In_Time > *ZERO;

// AND DTL.DT TrkScl Weigh-In Date is Not Entered
AND DTL.DT_TrkScl_Weigh_In_Date = *ZERO;

// DTL.DT TrkScl Weigh-In Date = LCL.Date USR
DTL.DT_TrkScl_Weigh_In_Date = LCL.Date_USR;

ENDIF;

//?to recv dock
CASE;

// IF DTL.DT To Recv Dock Time is Entered
IF DTL.DT_To_Recv_Dock_Time > *ZERO;

// AND DTL.DT To Recv Dock Date is Not Entered
AND DTL.DT_To_Recv_Dock_Date = *ZERO;

// DTL.DT To Recv Dock Date = LCL.Date USR
DTL.DT_To_Recv_Dock_Date = LCL.Date_USR;

ENDIF;

//?start unloading
CASE;

// IF DTL.DT Start Unloading Time is Entered
IF DTL.DT_Start_Unloading_Time > *ZERO;

// AND DTL.DT Start Unloading Date is Not Entered
AND DTL.DT_Start_Unloading_Date = *ZERO;

// DTL.DT Start Unloading Date = LCL.Date USR
DTL.DT_Start_Unloading_Date = LCL.Date_USR;

ENDIF;

//?trk scl weigh out
CASE;

// IF DTL.DT TrkScl Weigh-Out Time is Entered
IF DTL.DT_TrkScl_Weigh_Out_Time > *ZERO;

// AND DTL.DT TrkScl Weigh-Out Date is Not Entered
AND DTL.DT_TrkScl_Weigh_Out_Date = *ZERO;

// DTL.DT TrkScl Weigh-Out Date = LCL.Date USR
DTL.DT_TrkScl_Weigh_Out_Date = LCL.Date_USR;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg DelivTrackingArrivIF) TYPE(EXCINTFUN) FILE(PLAFCPP)        AB1303277;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(DTL.DT_Arrive_@_Plant_Date);
PARAMETER(DTL.DT_Arrive_@_Plant_Time);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Date);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Time);
PARAMETER(DTL.DT_To_Recv_Dock_Date);
PARAMETER(DTL.DT_To_Recv_Dock_Time);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(PAR.TRK_Arrival_Step_Usr);
PARAMETER(PAR.Truck_Auth_Entry_Time_USR);
{
 //?Execute internal function

 //?Modifications and Comments
 DO;

 //?E3503 JJH 11/13/14 - Authorize Gate Entry Violations
 //? Modified the Chg DelivTrackingArrivIF - Buy Order Load function
 //? to create System Generated Buy Order Load Comments when Option
 //? 11=Trucker Call In, 12=Truck Authorized, and 13=Recv Doc Time
 //? are used on the Work With Delivery Receiving function.
 ENDDO;

 CASE;

 // IF PAR.TRK Arrival Step Usr is Trucker Called In
 IF PAR.TRK_Arrival_Step_Usr = 'C';

 EXECUTE FUNCTION(Chg DelivTrackingCallICH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1306485;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(PAR.DT_Arrive_@_Plant_Date);
 PARAMETER(PAR.DT_Arrive_@_Plant_Time);
 {
  //?USER: Processing before Data read

  // WRK.Update Arrival Sts Usr = CND.*Blanks
  WRK.Update_Arrival_Sts_Usr = *BLANK;

  // WRK.DT Arrive @ Plant Date = PAR.DT Arrive @ Plant Date
  WRK.DT_Arrive_@_Plant_Date = PAR.DT_Arrive_@_Plant_Date;

  // WRK.DT Arrive @ Plant Time = PAR.DT Arrive @ Plant Time
  WRK.DT_Arrive_@_Plant_Time = PAR.DT_Arrive_@_Plant_Time;

  //?USER: Processing after Data read

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  CASE;

  // IF DB1.DT Arrive @ Plant Date NE WRK.DT Arrive @ Plant Date
  IF DB1.DT_Arrive_@_Plant_Date <> WRK.DT_Arrive_@_Plant_Date;

  // OR DB1.DT Arrive @ Plant Time NE WRK.DT Arrive @ Plant Time
  OR DB1.DT_Arrive_@_Plant_Time <> WRK.DT_Arrive_@_Plant_Time;

  // WRK.Update Arrival Sts Usr = CND.Arrival Sts
  WRK.Update_Arrival_Sts_Usr = 'A';

  ENDIF;

  //?USER: Processing after Data update

  CASE;

  // IF WRK.Update Arrival Sts Usr is Arrival Sts
  IF WRK.Update_Arrival_Sts_Usr = 'A';

  CASE;

  // IF DB1.DT Arrive @ Plant Date is Entered
  IF DB1.DT_Arrive_@_Plant_Date <> *ZERO;

  //?Arrival
  // Call program Chg Bol Spr - ArvProc XF.
  CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('C');

  // IF DB1.DT Arrive @ Plant Date is Not Entered
  IF DB1.DT_Arrive_@_Plant_Date = 0;

  //?None
  // Call program Chg Bol Spr - ArvProc XF.
  CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

 }

 //?Call in or none
 CASE;

 // IF PAR.DT Arrive @ Plant Date is Entered
 IF PAR.DT_Arrive_@_Plant_Date <> *ZERO;

 //?Call In
 // Call program Chg Bol Spr - ArvProc XF.
 CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('C');

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Call In');
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 //?Call in or none
 // IF PAR.DT Arrive @ Plant Date is Not Entered
 IF PAR.DT_Arrive_@_Plant_Date = 0;

 //?None
 // Call program Chg Bol Spr - ArvProc XF.
 CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(*BLANK);

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Call In Cancelled');
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 ENDIF;

 // IF PAR.TRK Arrival Step Usr is Trucker Arrived
 IF PAR.TRK_Arrival_Step_Usr = 'A';

 EXECUTE FUNCTION(Chg DelivTrackingArrivCH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1303276;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(PAR.DT_Arrive_@_Plant_Date);
 PARAMETER(PAR.DT_Arrive_@_Plant_Time);
 {
  //?USER: Processing before Data read

  // WRK.Update Arrival Sts Usr = CND.*Blanks
  WRK.Update_Arrival_Sts_Usr = *BLANK;

  // WRK.DT Arrive @ Plant Date = PAR.DT Arrive @ Plant Date
  WRK.DT_Arrive_@_Plant_Date = PAR.DT_Arrive_@_Plant_Date;

  // WRK.DT Arrive @ Plant Time = PAR.DT Arrive @ Plant Time
  WRK.DT_Arrive_@_Plant_Time = PAR.DT_Arrive_@_Plant_Time;

  //?USER: Processing after Data read

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  CASE;

  // IF DB1.DT Arrive @ Plant Date NE WRK.DT Arrive @ Plant Date
  IF DB1.DT_Arrive_@_Plant_Date <> WRK.DT_Arrive_@_Plant_Date;

  // OR DB1.DT Arrive @ Plant Time NE WRK.DT Arrive @ Plant Time
  OR DB1.DT_Arrive_@_Plant_Time <> WRK.DT_Arrive_@_Plant_Time;

  // WRK.Update Arrival Sts Usr = CND.Arrival Sts
  WRK.Update_Arrival_Sts_Usr = 'A';

  ENDIF;

  //?USER: Processing after Data update

  CASE;

  // IF WRK.Update Arrival Sts Usr is Arrival Sts
  IF WRK.Update_Arrival_Sts_Usr = 'A';

  CASE;

  // IF DB1.DT Arrive @ Plant Date is Entered
  IF DB1.DT_Arrive_@_Plant_Date <> *ZERO;

  //?Arrival
  // Call program Chg Bol Spr - ArvProc XF.
  CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('A');

  // IF DB1.DT Arrive @ Plant Date is Not Entered
  IF DB1.DT_Arrive_@_Plant_Date = 0;

  //?None
  // Call program Chg Bol Spr - ArvProc XF.
  CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

 }

 //?Arrival or none
 CASE;

 // IF PAR.DT Arrive @ Plant Date is Entered
 IF PAR.DT_Arrive_@_Plant_Date <> *ZERO;

 //?Arrival
 // Call program Chg Bol Spr - ArvProc XF.
 CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('A');

 CASE;

 // IF PAR.Truck Auth Entry Time USR is GT Zero
 IF PAR.Truck_Auth_Entry_Time_USR > *ZERO;

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Authorized until:');
 PARAMETER(*BLANK);
 PARAMETER('Y');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Authorized');
 PARAMETER(*BLANK);
 PARAMETER('Y');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 ENDIF;

 //?Arrival or none
 // IF PAR.DT Arrive @ Plant Date is Not Entered
 IF PAR.DT_Arrive_@_Plant_Date = 0;

 //?None
 // Call program Chg Bol Spr - ArvProc XF.
 CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(*BLANK);

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Truck Authorized Cancelle');
 PARAMETER('d');
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 ENDIF;

 // IF PAR.TRK Arrival Step Usr is Trucker at Rec Doc
 IF PAR.TRK_Arrival_Step_Usr = 'R';

 //?Receiving Dock place in weight in if weight is empty
 DO;

 // LCL.DT TrkScl Weigh-In Date = PAR.DT TrkScl Weigh-In Date
 LCL.DT_TrkScl_Weigh_In_Date = PAR.DT_TrkScl_Weigh_In_Date;

 // LCL.DT TrkScl Weigh-In Time = PAR.DT TrkScl Weigh-In Time
 LCL.DT_TrkScl_Weigh_In_Time = PAR.DT_TrkScl_Weigh_In_Time;

 //?Trk Weigh in Dte & tm populated by Receiving at Dock if empty
 CASE;

 // IF PAR.DT TrkScl Weigh-In Date is Not Entered
 IF PAR.DT_TrkScl_Weigh_In_Date = *ZERO;

 // AND PAR.DT TrkScl Weigh-In Time is Not Entered
 AND PAR.DT_TrkScl_Weigh_In_Time = *ZERO;

 // LCL.DT TrkScl Weigh-In Date = PAR.DT To Recv Dock Date
 LCL.DT_TrkScl_Weigh_In_Date = PAR.DT_To_Recv_Dock_Date;

 // LCL.DT TrkScl Weigh-In Time = PAR.DT To Recv Dock Time
 LCL.DT_TrkScl_Weigh_In_Time = PAR.DT_To_Recv_Dock_Time;

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(Chg DelivTrackingRDOCKCH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1305191;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Date);
 PARAMETER(LCL.DT_TrkScl_Weigh_In_Time);
 PARAMETER(PAR.DT_To_Recv_Dock_Date);
 PARAMETER(PAR.DT_To_Recv_Dock_Time);
 {
  //?USER: Processing before Data read

  // WRK.Update Arrival Sts Usr = CND.*Blanks
  WRK.Update_Arrival_Sts_Usr = *BLANK;

  // WRK.DT Arrive @ Plant Date = PAR.DT Arrive @ Plant Date
  WRK.DT_Arrive_@_Plant_Date = PAR.DT_Arrive_@_Plant_Date;

  // WRK.DT Arrive @ Plant Time = PAR.DT Arrive @ Plant Time
  WRK.DT_Arrive_@_Plant_Time = PAR.DT_Arrive_@_Plant_Time;

  //?USER: Processing after Data read

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  CASE;

  // IF DB1.DT Arrive @ Plant Date NE WRK.DT Arrive @ Plant Date
  IF DB1.DT_Arrive_@_Plant_Date <> WRK.DT_Arrive_@_Plant_Date;

  // OR DB1.DT Arrive @ Plant Time NE WRK.DT Arrive @ Plant Time
  OR DB1.DT_Arrive_@_Plant_Time <> WRK.DT_Arrive_@_Plant_Time;

  // WRK.Update Arrival Sts Usr = CND.Arrival Sts
  WRK.Update_Arrival_Sts_Usr = 'A';

  ENDIF;

  //?USER: Processing after Data update

  CASE;

  // IF WRK.Update Arrival Sts Usr is Arrival Sts
  IF WRK.Update_Arrival_Sts_Usr = 'A';

  CASE;

  // IF DB1.DT Arrive @ Plant Date is Entered
  IF DB1.DT_Arrive_@_Plant_Date <> *ZERO;

  //?Arrival
  // Call program Chg Bol Spr - ArvProc XF.
  CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('A');

  // IF DB1.DT Arrive @ Plant Date is Not Entered
  IF DB1.DT_Arrive_@_Plant_Date = 0;

  //?None
  // Call program Chg Bol Spr - ArvProc XF.
  CALL PROGRAM(Chg Bol Spr - ArvProc XF) ('PLQMXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

 }

 // Call program Crt BOL System Comment XF.
 CALL PROGRAM(Crt BOL System Comment XF) ('PLVZXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER('Recv Dock Time');
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(PAR.Truck_Auth_Entry_Time_USR);

 ENDIF;

}


//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

CASE;

// IF WRK.Trk Individual Process is Trc Recv Dock Time
IF WRK.Trk_Individual_Process = 'R';

// Call program Exc Clc DT Wait perDt XF.
CALL PROGRAM(Exc Clc DT Wait perDt XF) ('PLC8XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);

ENDIF;

ENDIF;

