// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWIXFR
// ?Date: 14.08.2025 Time: 03:44:20
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?* Update RIN rcd with RIN if it isnt already there.
EXECUTE FUNCTION(Rtv Gen RIN At Inv Tm RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1891294;
PARAMETER(PAR.COA_Shipping_Company);
PARAMETER(PAR.Process_Cust_Types_Usr);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER(PAR.Actual_Shipped_Date);
{
 //?USER: Initialize routine

 //?E2273 9/27/2012 RMC All 3rd party SELs from internal whses are to
 //?   be FIFO now. It was just 3rd party from ext whses that were.
 //?control by outputting this: LCL.COA EMTS Batch Nbr = CON.*ZERO
 // PAR.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
 PAR.RFS_Volume_Corr_Mthd_USR = 'A';

 //?USER: Process Data record

 EXECUTE FUNCTION(SEL Inv to Crt RIN-HPB RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1891917;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(LCL.Order_Type_Print_Status);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Process_Cust_Types_Usr);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 {
  //?USER: Initialize routine

  //?FP1110 RMC 7/18/08
  //?This was copied from *SEL Invc to Print&Post RT* and modified to set the
  //?Order type print status to Yes if an order passes validations and will
  //?be invoiced in the next step.  The calling routine of this function
  //?updates the Batch RIN with the RIN nbr so its there before the invoices
  //?print
  //?USER: Process Data record

  // PAR.Order Type Print Status = CND.no
  PAR.Order_Type_Print_Status = 'N';

  // PAR.Actual Ship Date Usr = DB1.Actual Shipped Date
  PAR.Actual_Ship_Date_Usr = DB1.Actual_Shipped_Date;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?** If Billing Activity Type = 1 for Invoice
  CASE;

  // IF DB1.Billing Activity Type is Invoice
  IF DB1.Billing_Activity_Type = '1';

  // Call program Sel Customer Type     XF.
  CALL PROGRAM(Sel Customer Type     XF) ('PPUOXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Type_Code);
  PARAMETER(PAR.Process_Cust_Types_Usr);
  PARAMETER(PGM.*Record_selected);

  //?** Process selected Customer Type (Third Party or Inter-Company)
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?** Process record for any possible errors. Flag the header with
  //?** the results so the print program knows whether or not to print
  //?** this invoice.
  //?05/01/18 DN R12926-Removed Absorbed Freight Rate CWT Parm on PPX8XFR.
  // Call program PRT Invc Excpt Select  XF.
  CALL PROGRAM(PRT Invc Excpt Select  XF) ('PPX8XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(LCL.Update_Exception_Status);
  PARAMETER(PGM.*Record_selected);
  PARAMETER(LCL.Print_Pre_Inv_Exception);
  PARAMETER(LCL.Departure_Sts_USR);
  PARAMETER(LCL.System_Value_Numeric);
  PARAMETER(LCL.Manual_Prc_Err_Sts_USR);
  PARAMETER(LCL.Projected_Market_Price);
  PARAMETER(LCL.Average_Ship_Wgt_Err_USR);
  PARAMETER(LCL.InterCo_Price_Err_USR);
  PARAMETER(LCL.Record_Found_USR);
  PARAMETER(PAR.Order_Status);
  PARAMETER(LCL.GTIN_Error_Sts_USR);
  PARAMETER(LCL.GTIN_Error_Item_Code_USR);
  PARAMETER(NLL.Item_Code_USR);
  PARAMETER(NLL.Item_Code);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(LCL.Price_Overage_Override);
  PARAMETER(PAR.Process_Cust_Types_Usr);
  PARAMETER(WRK.USR_Check_Y_N_Status);
  PARAMETER(LCL.D_EDI_INV_PROC_FLAG);

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?** Set Order type print status
  CASE;

  // IF LCL.Print Pre-Inv/Exception is Print on Pre-Invoice Reg
  IF LCL.Print_Pre_Inv_Exception = 'P';

  //?Ready for invoice
  // PAR.Order Type Print Status = CND.yes
  PAR.Order_Type_Print_Status = 'Y';

  //?** Set Order type print status
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?** Update header if record has exceptions
  CASE;

  // IF LCL.Print Pre-Inv/Exception is Print on Exception
  IF LCL.Print_Pre_Inv_Exception = 'E';

  // PAR.Order Type Print Status = CND.no
  PAR.Order_Type_Print_Status = 'N';

  ENDIF;

  ENDIF;

  //?** Final Val for order being priced before allowing Invoic
  CASE;

  // IF PAR.Order Type Print Status is yes
  IF PAR.Order_Type_Print_Status = 'Y';

  //?Order is priced
  CASE;

  // IF DB1.Price Status is Priced
  IF DB1.Price_Status = 'P';

  // PAR.Order Type Print Status = CND.yes
  PAR.Order_Type_Print_Status = 'Y';

  //?Order is priced
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Order Type Print Status = CND.no
  PAR.Order_Type_Print_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(RTV Warehouse Location RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1564246;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF LCL.Warehouse Location is Internal (Plant)
 IF LCL.Warehouse_Location = 'I';

 //?If order in ready to invoice print, gen the rin # and upd the rcd
 CASE;

 // IF LCL.Order Type Print Status is yes
 IF LCL.Order_Type_Print_Status = 'Y';

 // AND DB1.COA RIN Transaction Date is not entered
 AND DB1.COA_RIN_Transaction_Date = *ZERO;

 EXECUTE FUNCTION(RTV for Ship process  RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1858687;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
 PARAMETER(LCL.COA_Batch_Production_Date);
 PARAMETER(NLL.COA_Temperature_Loadout);
 PARAMETER(PAR.COA_Last_RIN_EEEEEEEE);
 PARAMETER(LCL.RFS_Fuel_Code);
 PARAMETER(PAR.COA_RIN_Equivalence_Valu);
 PARAMETER(LCL.COA_BH_RFS_Version_Nbr);
 PARAMETER(PAR.COA_BH_Equiv_Value_f_SEP);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV HPB to Gen RIN    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1891415;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.HPB_Meter_Start_Gallon);
 PARAMETER(LCL.HPB_Meter_Ending_Gallon);
 PARAMETER(LCL.HPB_Meter_Total_Gallon);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Use item code from manifest dtl for property rtval
 // WRK.Item Code 5.0 = LCL.Item Code
 WRK.Item_Code_5_0 = LCL.Item_Code;

 // WRK.Text USR 5 = CVTVAR(WRK.Item Code 5.0)
 WRK.Text_USR_5 = CVTVAR(WRK.Item_Code_5_0);

 // LCL.COA OMS Item Code = WRK.Text USR 5
 LCL.COA_OMS_Item_Code = WRK.Text_USR_5;

 EXECUTE FUNCTION(RTV all used flds/item RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1968337;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
 PARAMETER(NLL.COA_Bio_dsl_Fuel_Cd_Descr);
 PARAMETER(PAR.COA_Producer_Regist_Nbr);
 PARAMETER(PAR.COA_Employer_ID);
 PARAMETER(NLL.COA_Sold_From_Address);
 PARAMETER(LCL.COA_Sold_From_Name);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_ULSD_Facility_#);
 PARAMETER(PAR.COA_RIN_Equivalence_Valu);
 PARAMETER(PAR.COA_RIN_Renewable_Enrgy);
 PARAMETER(PAR.COA_RIN_Type_Flag);
 PARAMETER(NLL.COA_Density_Loadout);
 PARAMETER(NLL.COA_Density_Reference);
 PARAMETER(NLL.COA_Temperature_Loadout);
 PARAMETER(NLL.COA_Temperature_Ref);
 PARAMETER(PAR.COA_BOL_Percent);
 PARAMETER(NLL.COA_Sale_Location);
 PARAMETER(NLL.COA_Active_Whse_Tank_1);
 PARAMETER(NLL.COA_Active_Whse_Tank_2);
 PARAMETER(NLL.COA_Active_Whse_Tank_3);
 PARAMETER(NLL.COA_Active_Whse_Tank_4);
 PARAMETER(NLL.COA_Active_Whse_Tank_5);
 PARAMETER(NLL.COA_Active_Whse_Tank_6);
 PARAMETER(PAR.COA_Temp_Conv_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.COA_Temp_Conv_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(NLL.COA_RFS_Renew_Fuel_Code);
 PARAMETER(NLL.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(LCL.COA_OMS_Item_Code);
 PARAMETER(LCL.Sold_To_Customer_hpb_biod);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?--------------------------------------------------------------
 //?  Create interal IT1 order if appl  --- moved here from below
 //?  because we need the transfer price for the 361 SEL and 369 BUY
 //?Create 361 order shipping from warehouse IT1
 CASE;

 // IF DB1.COA Ship To Warehouse is Blanks
 IF DB1.COA_Ship_To_Warehouse = *BLANK;

 //?*****  Create 361 Order Data with warehouse IT1 = inter company    *****
 //?*****  so this order will go thru the invoice post/accrual process *****
 //?          Files:  OH, OD, OD Pricing, OE
 // Call program Exc HPB Crt Ord f/Inv XF.
 CALL PROGRAM(Exc HPB Crt Ord f/Inv XF) ('PNNTXFR');
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Sold_To_Customer_hpb_biod);

 ENDIF;

 //?--------------------------------------------------------------
 EXECUTE FUNCTION(RTV Prod Temp-HPB     RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1877050;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Product_Temperature);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.COA Temperature Loadout = LCL.Product Temperature
 PAR.COA_Temperature_Loadout = LCL.Product_Temperature;

 // LCL.HPB Ship to Warehouse = DB1.COA Ship To Warehouse
 LCL.HPB_Ship_to_Warehouse = DB1.COA_Ship_To_Warehouse;

 CASE;

 // IF PAR.RFS Volume Corr Mthd  USR is Calculate factor per Prop
 IF PAR.RFS_Volume_Corr_Mthd_USR = 'C';

 //?Calc temperature adjustment which is used to calc the net gallons
 //?Conversion factor 1
 CASE;

 // IF PAR.COA Temp Conv Factor 1 is Entered
 IF PAR.COA_Temp_Conv_Factor_1 <> 0;

 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PGM.*Synon (17,9) work field = PAR.COA Temperature Loadout * PAR.COA Temp Conv Factor 1 *
 PGM.*Synon_179_work_field = PAR.COA_Temperature_Loadout * PAR.COA_Temp_Conv_Factor_1;

 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PGM.*Synon (17,9) work field = PAR.COA Temperature Loadout / PAR.COA Temp Conv Factor 1 *
 PGM.*Synon_179_work_field = PAR.COA_Temperature_Loadout / PAR.COA_Temp_Conv_Factor_1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,9) work field = PAR.COA Temperature Loadout + PAR.COA Temp Conv Factor 1
 PGM.*Synon_179_work_field = PAR.COA_Temperature_Loadout + PAR.COA_Temp_Conv_Factor_1;

 ENDIF;

 //?Conversion factor 1
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,9) work field = PAR.COA Temperature Loadout
 PGM.*Synon_179_work_field = PAR.COA_Temperature_Loadout;

 ENDIF;

 //?Conversion factor 2   -- do to the result of conv factor 1
 CASE;

 // IF PAR.COA Temp Conv Factor 2 is Entered
 IF PAR.COA_Temp_Conv_Factor_2 <> 0;

 //?6/22/10 was using *synon 17,7 work field
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PGM.*Synon (17,9) work field = PGM.*Synon (17,9) work field * PAR.COA Temp Conv Factor 2 *
 PGM.*Synon_179_work_field = PGM.*Synon_179_work_field * PAR.COA_Temp_Conv_Factor_2;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PGM.*Synon (17,9) work field = PGM.*Synon (17,9) work field / PAR.COA Temp Conv Factor 2 *
 PGM.*Synon_179_work_field = PGM.*Synon_179_work_field / PAR.COA_Temp_Conv_Factor_2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,9) work field = PGM.*Synon (17,9) work field + PAR.COA Temp Conv Factor 2
 PGM.*Synon_179_work_field = PGM.*Synon_179_work_field + PAR.COA_Temp_Conv_Factor_2;

 ENDIF;

 ENDIF;

 // LCL.HPB Temperature Adjustmnt = CON.1 * PGM.*Synon (17,9) work field *Rounded
 LCL.HPB_Temperature_Adjustmnt = 1 * PGM.*Synon_179_work_field 'H';

 // IF PAR.RFS Volume Corr Mthd  USR is API Volume Corr Table
 IF PAR.RFS_Volume_Corr_Mthd_USR = 'A';

 // LCL.RFS Loadout Temperature = PAR.COA Temperature Loadout
 LCL.RFS_Loadout_Temperature = PAR.COA_Temperature_Loadout;

 EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
 PARAMETER(30);
 PARAMETER(LCL.RFS_Loadout_Temperature);
 PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
 LCL.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

 ENDIF;

 //?Create RIN from the components
 EXECUTE FUNCTION(HPB Create RIN Nbr    IF) TYPE(EXCINTFUN)                      AC1857543;
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_ULSD_Facility_#);
 PARAMETER(PAR.COA_RIN_Equivalence_Valu);
 PARAMETER(PAR.COA_RIN_Renewable_Enrgy);
 PARAMETER(PAR.COA_RIN_Type_Flag);
 PARAMETER(PAR.COA_BOL_Percent);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(LCL.HPB_Meter_Start_Gallon);
 PARAMETER(LCL.HPB_Meter_Ending_Gallon);
 PARAMETER(LCL.HPB_Meter_Total_Gallon);
 PARAMETER(LCL.HPB_Temperature_Adjustmnt);
 PARAMETER(PAR.COA_Last_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.COA_Batch_Production_Date);
 {
  //?Execute internal function

  //?P00579  RMC 5/13/10 EMTS Processing: pass out the Batch Volume,
  //?  RIN Quantity. Calc rin qty from batch volume as a whole number
  //? because Rin qty must =  batch volume * equiv value.
  //?6/22/2010 added 1 dec place to prop conv factor fields
  //?6/25/2010 added 2 dec place to hpb temperature adjustmnt field. was 7,6
  //?7/13/2010 recalc meter end gallon after rounding to whole nbr
  //?7/14/2010 use new table for api vol corr factor
  //?S00946  RMC 9/24/09 calc EEEEEEEE = (SSSSSSSS + Rin Volume) - 1
  //? instead of adding 1 to the RIN Volume.
  //?  for ex. RIN Vol of 10502 would have rin 00000001 00010502
  //?  which represents 10502 RINS
  //?S00813  RMC 5/21/09 adjust gross gallons to be 99.9% of the gross
  //?which is the amount that is actually renewable fuel. the .1% is petro
  //?  gross gall of renewable fuel = gross gallons * (bol percent/100)
  //? See compute statement below
  //?____________________________________________________
  //?The net gallons are calculated by taking the gross gallons
  //? times a temperature adjustment formula which is stored in the
  //? Property Batch Header
  //?Example:  145 degrees * -.0008008 + 1.048 = temp adjustment
  //?       temp adjustment * gross Gallons = Net Gallons
  //?The 1st RIN for a batch will have SSSSSSSS = 00000001,
  //?The subsequent RINS, will have SSSSSSSS = last RIN EEEEEEEE + 1,
  //?** EEEEEEEE = (Net Total Gallons for that detail) + its SSSSSSSS nbr
  //?** EEEEEEEE = SSSSSSSS nbr if the batch_RIN represents 1 gallon
  //? Equivalence value = 1.5 for now. it is stored in prop hdr as 15
  // LCL.USR Count = CVTVAR(PAR.COA RIN Equivalence Valu)
  LCL.USR_Count = CVTVAR(PAR.COA_RIN_Equivalence_Valu);

  // LCL.HPB Equivalence Value USR = LCL.USR Count / CON.10 *
  LCL.HPB_Equivalence_Value_USR = LCL.USR_Count / 10;

  // LCL.USR Work Field 5A     USR = CVTVAR(PAR.HPB COA Batch Number)
  LCL.USR_Work_Field_5A_USR = CVTVAR(PAR.HPB_COA_Batch_Number);

  //?Temp adjust * start and end gallons to get the Net Gallons
  //?Calc RIN SSSSSSSS nbr
  CASE;

  // IF PAR.COA Last RIN EEEEEEEE is eq 00000000
  IF PAR.COA_Last_RIN_EEEEEEEE = 0;

  // LCL.HPB Meter Start Gallon = CON.1
  LCL.HPB_Meter_Start_Gallon = 1;

  //?Calc RIN SSSSSSSS nbr
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.HPB Meter Start Gallon = PAR.COA Last RIN EEEEEEEE + CON.1
  LCL.HPB_Meter_Start_Gallon = PAR.COA_Last_RIN_EEEEEEEE + 1;

  ENDIF;

  //?Temperature Adjust the Total Gross Gallons to get the Net
  //?S00689    RMC 3/26/09 dont round to zero decimal field yet.
  // Synon (17,7) work field =       * Compu: gross gal*temp adj
  PGM.*Synon_177_work_field = ( PAR.HPB_Meter_Total_Gallon * ( PAR.COA_BOL_Percent / 100 )
  'H' ) * PAR.HPB_Temperature_Adjustmnt;

  //?Calc Volume for the Total Net Gallons using workfield from above calc
  // LCL.HPB Meter Ending Gallon = PGM.*Synon (17,7) work field * LCL.HPB Equivalence Value USR *Rou
  LCL.HPB_Meter_Ending_Gallon = PGM.*Synon_177_work_field * LCL.HPB_Equivalence_Value_USR
  'H';

  //?EMTS: Rin qty must =  batch volume * equiv value.  5/13/2010
  // PAR.COA Batch RIN Volume = CON.1 * PGM.*Synon (17,7) work field *Rounded
  PAR.COA_Batch_RIN_Volume = 1 * PGM.*Synon_177_work_field 'H';

  // PAR.COA RIN Quantity = PAR.COA Batch RIN Volume * LCL.HPB Equivalence Value USR *Rounded
  PAR.COA_RIN_Quantity = PAR.COA_Batch_RIN_Volume * LCL.HPB_Equivalence_Value_USR 'H';

  // LCL.HPB Meter Ending Gallon = PAR.COA Batch RIN Volume * LCL.HPB Equivalence Value USR *Rounded
  LCL.HPB_Meter_Ending_Gallon = PAR.COA_Batch_RIN_Volume * LCL.HPB_Equivalence_Value_USR
  'H';

  // PAR.COA RIN Volume in Gallons = LCL.HPB Meter Ending Gallon
  PAR.COA_RIN_Volume_in_Gallons = LCL.HPB_Meter_Ending_Gallon;

  //?Add Volume to SSSSSSSS nbr to get the EEEEEEEE nbr
  CASE;

  // IF PAR.HPB Meter Total Gallon is Eq 1
  IF PAR.HPB_Meter_Total_Gallon = 1;

  // LCL.HPB Meter Ending Gallon = LCL.HPB Meter Start Gallon
  LCL.HPB_Meter_Ending_Gallon = LCL.HPB_Meter_Start_Gallon;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.HPB Meter Ending Gallon = LCL.HPB Meter Start Gallon + LCL.HPB Meter Ending Gallon
  LCL.HPB_Meter_Ending_Gallon = LCL.HPB_Meter_Start_Gallon + LCL.HPB_Meter_Ending_Gallon;

  // LCL.HPB Meter Ending Gallon = LCL.HPB Meter Ending Gallon - CON.1
  LCL.HPB_Meter_Ending_Gallon = LCL.HPB_Meter_Ending_Gallon - 1;

  ENDIF;

  // PAR.COA RIN SSSSSSSS = LCL.HPB Meter Start Gallon
  PAR.COA_RIN_SSSSSSSS = LCL.HPB_Meter_Start_Gallon;

  // PAR.COA RIN EEEEEEEE = LCL.HPB Meter Ending Gallon
  PAR.COA_RIN_EEEEEEEE = LCL.HPB_Meter_Ending_Gallon;

  // PAR.COA Last RIN EEEEEEEE = LCL.HPB Meter Ending Gallon
  PAR.COA_Last_RIN_EEEEEEEE = LCL.HPB_Meter_Ending_Gallon;

  // LCL.Generic Heading 8 = CVTVAR(LCL.HPB Meter Start Gallon)
  LCL.Generic_Heading_8 = CVTVAR(LCL.HPB_Meter_Start_Gallon);

  // LCL.Generic Heading 9 = CVTVAR(LCL.HPB Meter Ending Gallon)
  LCL.Generic_Heading_9 = CVTVAR(LCL.HPB_Meter_Ending_Gallon);

  //?Use the batch's production year- per tom 9/08/09
  // LCL.Year Code = PAR.COA Batch Production Date *YEAR
  LCL.Year_Code = DATEDTLS(PAR.COA_Batch_Production_Date 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Year Alpha (YYYY) USR = LCL.Year Code
  LCL.Year_Alpha_YYYY_USR = LCL.Year_Code;

  //?Concatenate all fields together
  // LCL.COA Batch Header RIN = CONCAT(PAR.COA RIN Type Flag,LCL.Year Alpha (YYYY) USR,CND.*None)
  LCL.COA_Batch_Header_RIN = PAR.COA_RIN_Type_Flag + LCL.Year_Alpha_YYYY_USR (*ZERO);

  // LCL.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,PAR.COA ULSD Company #,CND.*None)
  LCL.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + PAR.COA_ULSD_Company_# (*ZERO);

  // LCL.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,PAR.COA ULSD Facility #,CND.*None)
  LCL.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + PAR.COA_ULSD_Facility_# (*ZERO);

  // LCL.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,LCL.USR Work Field 5A     USR,CND.*N
  LCL.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + LCL.USR_Work_Field_5A_USR (*ZERO);

  // LCL.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,PAR.COA RIN Equivalence Valu,CND.*No
  LCL.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + PAR.COA_RIN_Equivalence_Valu (*ZERO);

  // LCL.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,PAR.COA RIN Renewable Enrgy,CND.*Non
  LCL.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + PAR.COA_RIN_Renewable_Enrgy (*ZERO);

  // LCL.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,LCL.Generic Heading 8,CND.*None)
  LCL.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + LCL.Generic_Heading_8 (*ZERO);

  // PAR.COA Batch Header RIN = CONCAT(LCL.COA Batch Header RIN,LCL.Generic Heading 9,CND.*None)
  PAR.COA_Batch_Header_RIN = LCL.COA_Batch_Header_RIN + LCL.Generic_Heading_9 (*ZERO);

 }

 //?******
 //?******  Update Batch RIN Record  ***
 //?******   do this always - sel to 369 needs the RIN ******
 //?RMC C0699 use Bill to cust instead of ship to for HPB epa reg#
 EXECUTE FUNCTION(RTV Bilto/Customer     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1735268;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Bill_to_Name);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv HPB Cust Fields   RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1858717;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.HPB_Employer_ID_#);
 PARAMETER(LCL.HPB_ULSD_Company_#);
 PARAMETER(LCL.HPB_ULSD_Facility_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Customer Type     RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1585599;
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(RTV HPB RIN Fields     RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2004047;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(LCL.OHE_HPB_RIN_Price);
 PARAMETER(LCL.OHE_Override_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?**** EMTS processing: Ready to Generate the rin for this order in EMTS
 //?**** and Ready to process the SEL RIN Transaction in EMTS
 //?Update: both EMTS sts, COA Batch RIN Volume,COA RIN Quantity,
 //?   price per gallon - rounded to 2 dec.
 //?If batch is from RFS2, then send to emts & dont upd RIN, else dont send
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 2
 IF DB1.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA GEN EMTS Sts = CND.Not Processed
 LCL.COA_GEN_EMTS_Sts = 0;

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch Header RIN = CON.*BLANK
 LCL.COA_Batch_Header_RIN = *BLANK;

 //?If batch is from RFS2, then send to emts & dont upd RIN, else dont send
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?DONT SEND TO EMTS IF BATCH IF FROM RFS1, do update RIN
 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 ENDIF;

 //?E2013 RMC 3/21/12 output act ship date as rin yr
 // LCL.COA BHR RIN Gen Year = PAR.Actual Ship Date Usr *YEAR
 LCL.COA_BHR_RIN_Gen_Year = DATEDTLS(PAR.Actual_Ship_Date_Usr 'YR' 1111111 'NONE' 'N' 1);

 //?5/12 RMC get transfer price from 361 order OR 369 order
 CASE;

 // IF DB1.COA Ship To Warehouse is Blanks
 IF DB1.COA_Ship_To_Warehouse = *BLANK;

 //?R6965 8/16/16 new hpb plant
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER('HPBPLT');
 PARAMETER(LCL.Company_Number_041405);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Unit Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1991487;
 PARAMETER(LCL.Company_Number_041405);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Unit_Price);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?5/12 RMC get transfer price from 361 order OR 369 order
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Unit Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1991487;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Unit_Price);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // LCL.COA BHR Gallon Price = CON.1 * LCL.Unit Price *Rounded
 LCL.COA_BHR_Gallon_Price = 1 * LCL.Unit_Price 'H';

 //?****
 //?E2013 RMC 3/21/12 output act ship date as rin trans dt
 EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 PARAMETER(JOB.*Job_time);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(DB1.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(DB1.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_Ref_Load_Id);
 PARAMETER(DB1.COA_Reference_Batch_NbrNU);
 PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(DB1.RFS_Transaction_Type);
 PARAMETER(DB1.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(DB1.COA_BHR_RIN_Price);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_EMTS_PTD_Nbr);
 PARAMETER(DB1.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(DB1.COA_EMTS_Trans_Id);
 PARAMETER(DB1.COA_EMTS_Return_Code);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(DB1.COA_BHR_Equiv_Value);
 PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?******  Update Batch Header fields
 EXECUTE FUNCTION(RTV for Upd Gals Used RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1855732;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(PAR.COA_Last_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 {
  //?USER: Process Data record

  // LCL.COA Gallons Used = DB1.COA Gallons Used + PAR.HPB Meter Total Gallon
  LCL.COA_Gallons_Used = DB1.COA_Gallons_Used + PAR.HPB_Meter_Total_Gallon;

  //?Update Header's rin with the Lowest SSSSS rin number, and the last EEEEEEE
  CASE;

  // IF PAR.COA Last RIN EEEEEEEE is eq 00000000
  IF PAR.COA_Last_RIN_EEEEEEEE = 0;

  //?E00382  Dont update Batch RIN or change EEEEEEE if input par is 0
  //?  because customer is a Non Rin customer type
  EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Active_Whse_Tank);
  PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
  PARAMETER(DB1.COA_Date_Open_for_Ship);
  PARAMETER(DB1.COA_Time_Open_for_Ship);
  PARAMETER(DB1.COA_Open_for_Ship_Inits);
  PARAMETER(DB1.COA_Date_Close_from_Ship);
  PARAMETER(DB1.COA_Time_Close_from_Ship);
  PARAMETER(DB1.COA_Close_from_Ship_Inits);
  PARAMETER(LCL.COA_Gallons_Used);
  PARAMETER(DB1.COA_Comment);
  PARAMETER(DB1.COA_Batch_Production_Date);
  PARAMETER(DB1.COA_Batch_Unused_Time);
  PARAMETER(DB1.COA_Specification);
  PARAMETER(DB1.COA_RFS_Program_ID);
  PARAMETER(DB1.COA_Batch_Header_Sts);
  PARAMETER(DB1.COA_Batch_Properties_Cmpl);
  PARAMETER(DB1.COA_Batch_Int_Ext_Company);
  PARAMETER(DB1.COA_Temperature_Loadout);
  PARAMETER(DB1.COA_Batch_Volume);
  PARAMETER(DB1.COA_Batch_Denaturant_Vol);
  PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
  PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
  PARAMETER(DB1.COA_Batch_RIN);
  PARAMETER(DB1.COA_Batch_Export_Volume);
  PARAMETER(DB1.COA_Last_RIN_EEEEEEEE);
  PARAMETER(DB1.COA_Density_Loadout);
  PARAMETER(DB1.COA_Density_Reference);
  PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
  PARAMETER(DB1.COA_Batch_Unused_Date);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(DB1.RFS_Process_Code);
  PARAMETER(DB1.RFS_Fuel_Category_Code);
  PARAMETER(DB1.COA_RIN_Equivalence_Valu);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(DB1.COA_Co_Product_Code);
  PARAMETER(DB1.COA_Co_Product_Comment);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
  PARAMETER(DB1.COA_BH_EMTS_Sts);
  PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
  PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
  PARAMETER(DB1.COA_Reviewed_By);
  PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
  PARAMETER(DB1.COA_BH_Yield_Percent);
  PARAMETER(DB1.COA_BH_Unused_Cde);
  PARAMETER(DB1.COA_Sample_Date);
  PARAMETER(DB1.COA_Sample_Time);
  PARAMETER(DB1.COA_LIMS_ID);
  PARAMETER(DB1.RFS_Feedstock_Code_1);
  PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
  PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
  PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
  PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
  PARAMETER(DB1.COA_BH_Feedstck_comment_1);
  PARAMETER(DB1.RFS_Feedstock_Code_2);
  PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
  PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
  PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
  PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
  PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
  PARAMETER(DB1.RFS_Feedstock_Code_3);
  PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
  PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
  PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
  PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
  PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv 1st Seq for Batch RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1864771;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(*ZERO);
  PARAMETER(LCL.COA_Batch_RIN);
  {
   //?USER: Initialize routine

   // LCL.COA RIN SSSSSSSS = CON.99999999
   LCL.COA_RIN_SSSSSSSS = 99999999;

   //?USER: Processing if Data record not found

   // PAR.COA Batch Header RIN = CON.*BLANK
   PAR.COA_Batch_Header_RIN = *BLANK;

   //?USER: Process Data record

   //?Get lowest Starting rin number for the batch
   CASE;

   // IF DB1.COA RIN SSSSSSSS LT LCL.COA RIN SSSSSSSS
   IF DB1.COA_RIN_SSSSSSSS < LCL.COA_RIN_SSSSSSSS;

   // AND DB1.COA RIN SSSSSSSS is GT 00000000
   AND DB1.COA_RIN_SSSSSSSS > 0;

   // PAR.COA Batch Header RIN = DB1.COA Batch Header RIN
   PAR.COA_Batch_Header_RIN = DB1.COA_Batch_Header_RIN;

   // LCL.COA RIN SSSSSSSS = DB1.COA RIN SSSSSSSS
   LCL.COA_RIN_SSSSSSSS = DB1.COA_RIN_SSSSSSSS;

   ENDIF;

  }

  // Execute function *Move-Right.
  EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
  PARAMETER(LCL.COA_Batch_RIN);
  PARAMETER(PAR.COA_Last_RIN_EEEEEEEE);
  {
   C                     MOVE #IPANA    #OO9NA
  }

  EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Active_Whse_Tank);
  PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
  PARAMETER(DB1.COA_Date_Open_for_Ship);
  PARAMETER(DB1.COA_Time_Open_for_Ship);
  PARAMETER(DB1.COA_Open_for_Ship_Inits);
  PARAMETER(DB1.COA_Date_Close_from_Ship);
  PARAMETER(DB1.COA_Time_Close_from_Ship);
  PARAMETER(DB1.COA_Close_from_Ship_Inits);
  PARAMETER(LCL.COA_Gallons_Used);
  PARAMETER(DB1.COA_Comment);
  PARAMETER(DB1.COA_Batch_Production_Date);
  PARAMETER(DB1.COA_Batch_Unused_Time);
  PARAMETER(DB1.COA_Specification);
  PARAMETER(DB1.COA_RFS_Program_ID);
  PARAMETER(DB1.COA_Batch_Header_Sts);
  PARAMETER(DB1.COA_Batch_Properties_Cmpl);
  PARAMETER(DB1.COA_Batch_Int_Ext_Company);
  PARAMETER(DB1.COA_Temperature_Loadout);
  PARAMETER(DB1.COA_Batch_Volume);
  PARAMETER(DB1.COA_Batch_Denaturant_Vol);
  PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
  PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
  PARAMETER(LCL.COA_Batch_RIN);
  PARAMETER(DB1.COA_Batch_Export_Volume);
  PARAMETER(PAR.COA_Last_RIN_EEEEEEEE);
  PARAMETER(DB1.COA_Density_Loadout);
  PARAMETER(DB1.COA_Density_Reference);
  PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
  PARAMETER(DB1.COA_Batch_Unused_Date);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(DB1.RFS_Process_Code);
  PARAMETER(DB1.RFS_Fuel_Category_Code);
  PARAMETER(DB1.COA_RIN_Equivalence_Valu);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(DB1.COA_Co_Product_Code);
  PARAMETER(DB1.COA_Co_Product_Comment);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
  PARAMETER(DB1.COA_BH_EMTS_Sts);
  PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
  PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
  PARAMETER(DB1.COA_Reviewed_By);
  PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
  PARAMETER(DB1.COA_BH_Yield_Percent);
  PARAMETER(DB1.COA_BH_Unused_Cde);
  PARAMETER(DB1.COA_Sample_Date);
  PARAMETER(DB1.COA_Sample_Time);
  PARAMETER(DB1.COA_LIMS_ID);
  PARAMETER(DB1.RFS_Feedstock_Code_1);
  PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
  PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
  PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
  PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
  PARAMETER(DB1.COA_BH_Feedstck_comment_1);
  PARAMETER(DB1.RFS_Feedstock_Code_2);
  PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
  PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
  PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
  PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
  PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
  PARAMETER(DB1.RFS_Feedstock_Code_3);
  PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
  PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
  PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
  PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
  PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

 //?******  Create more RINS   FP1322  ********
 //?******  Create Batch RIN Record: BUY for  HPB Biodiesel 369  ***
 //? ******   do this always - BUY from 361 needs the RIN ****
 EXECUTE FUNCTION(RTV all used flds/item RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1968337;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
 PARAMETER(NLL.COA_Bio_dsl_Fuel_Cd_Descr);
 PARAMETER(PAR.COA_Producer_Regist_Nbr);
 PARAMETER(PAR.COA_Employer_ID);
 PARAMETER(LCL.COA_Sold_From_Address);
 PARAMETER(LCL.COA_Sold_From_Name);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_ULSD_Facility_#);
 PARAMETER(PAR.COA_RIN_Equivalence_Valu);
 PARAMETER(PAR.COA_RIN_Renewable_Enrgy);
 PARAMETER(PAR.COA_RIN_Type_Flag);
 PARAMETER(NLL.COA_Density_Loadout);
 PARAMETER(NLL.COA_Density_Reference);
 PARAMETER(NLL.COA_Temperature_Loadout);
 PARAMETER(NLL.COA_Temperature_Ref);
 PARAMETER(PAR.COA_BOL_Percent);
 PARAMETER(NLL.COA_Sale_Location);
 PARAMETER(NLL.COA_Active_Whse_Tank_1);
 PARAMETER(NLL.COA_Active_Whse_Tank_2);
 PARAMETER(NLL.COA_Active_Whse_Tank_3);
 PARAMETER(NLL.COA_Active_Whse_Tank_4);
 PARAMETER(NLL.COA_Active_Whse_Tank_5);
 PARAMETER(NLL.COA_Active_Whse_Tank_6);
 PARAMETER(PAR.COA_Temp_Conv_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.COA_Temp_Conv_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(NLL.COA_RFS_Renew_Fuel_Code);
 PARAMETER(NLL.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(LCL.COA_OMS_Item_Code);
 PARAMETER(LCL.Sold_To_Customer_hpb_biod);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?key fields are the same: ulsd/batch/seq but seq sec = seq sec +1
 // LCL.COA Batch Hdr RIN Seq Sec = DB1.COA Batch Hdr RIN Seq Sec + CON.1
 LCL.COA_Batch_Hdr_RIN_Seq_Sec = DB1.COA_Batch_Hdr_RIN_Seq_Sec + 1;

 CASE;

 // IF DB1.COA Ship To Warehouse is Blanks
 IF DB1.COA_Ship_To_Warehouse = *BLANK;

 // LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
 LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

 //?5/04  dont create BUY with net gallons to sell if pickup from plant
 // LCL.HPB Meter Net Gallon = CON.*ZERO
 LCL.HPB_Meter_Net_Gallon = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA RIN SoldFull/Splt Sts = CND.Blank
 LCL.COA_RIN_SoldFull_Splt_Sts = *BLANK;

 ENDIF;

 //?****
 CASE;

 // IF LCL.OHE Override Type Code is No
 IF LCL.OHE_Override_Type_Code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Type Code = LCL.OHE Override Type Code
 LCL.Type_Code = LCL.OHE_Override_Type_Code;

 ENDIF;

 CASE;

 // IF LCL.Type Code is Not RIN Customer
 IF LCL.Type_Code = 'NR';

 // LCL.COA BHR RINs to Sell Sep = LCL.COA RIN Quantity
 LCL.COA_BHR_RINs_to_Sell_Sep = LCL.COA_RIN_Quantity;

 // LCL.COA RIN Gallons Sold = CON.*ZERO
 LCL.COA_RIN_Gallons_Sold = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.COA Ship To Warehouse is Blanks
 IF DB1.COA_Ship_To_Warehouse = *BLANK;

 // LCL.COA RIN Gallons Sold = LCL.COA RIN Quantity
 LCL.COA_RIN_Gallons_Sold = LCL.COA_RIN_Quantity;

 // LCL.COA BHR RINs to Sell Sep = CON.*ZERO
 LCL.COA_BHR_RINs_to_Sell_Sep = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA RIN Gallons Sold = CON.*ZERO
 LCL.COA_RIN_Gallons_Sold = *ZERO;

 // LCL.COA BHR RINs to Sell Sep = CON.*ZERO
 LCL.COA_BHR_RINs_to_Sell_Sep = *ZERO;

 ENDIF;

 ENDIF;

 //?P0579 5/13 create BUY with emts RIN sts = 0 = ready to send to emts
 //?  same COA Batch RIN Volume,COA RIN Quantity, price per gall as above
 //?If batch is from RFS2, then send to emts, else dont
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 2
 IF DB1.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch Header RIN = CON.*BLANK
 LCL.COA_Batch_Header_RIN = *BLANK;

 //?If batch is from RFS2, then send to emts, else dont
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?DONT SEND TO EMTS IF BATCH IF FROM RFS1
 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 ENDIF;

 //?E2013 RMC 3/21/12 output act ship date as rin trans dt
 EXECUTE FUNCTION(Crt COA Batch Hdr RIN CR) TYPE(CRTOBJ) FILE(PMDACPP)           AC1858626;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 PARAMETER(JOB.*Job_time);
 PARAMETER(LCL.COA_Sold_From_Name);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(DB1.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER('BUY');
 PARAMETER(DB1.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(DB1.COA_BHR_RIN_Price);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(DB1.COA_BHR_Equiv_Value);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?******  Create Batch RIN Record for SEL to external cust  *****
 //?******   if not shipping to an external warehouse        *****
 //?SEL/SEP Rin to cust if not ext whse
 CASE;

 // IF DB1.COA Ship To Warehouse is Blanks
 IF DB1.COA_Ship_To_Warehouse = *BLANK;

 EXECUTE FUNCTION(RTV Bilto/Customer     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1735268;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Bill_to_Name);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV HPB RIN Fields     RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2004047;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(LCL.OHE_HPB_RIN_Price);
 PARAMETER(LCL.OHE_Override_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.OHE HPB RIN Equiv Value is EQ 0
 IF LCL.OHE_HPB_RIN_Equiv_Value = *ZERO;

 // LCL.OHE HPB RIN Equiv Value = DB1.COA BHR Equiv Value
 LCL.OHE_HPB_RIN_Equiv_Value = DB1.COA_BHR_Equiv_Value;

 ENDIF;

 CASE;

 // IF LCL.OHE Override Type Code is No
 IF LCL.OHE_Override_Type_Code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Type Code = LCL.OHE Override Type Code
 LCL.Type_Code = LCL.OHE_Override_Type_Code;

 ENDIF;

 EXECUTE FUNCTION(Rtv HPB Cust Fields   RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1858717;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.HPB_Employer_ID_#);
 PARAMETER(LCL.HPB_ULSD_Company_#);
 PARAMETER(LCL.HPB_ULSD_Facility_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.COA Batch Hdr RIN Seq Sec = LCL.COA Batch Hdr RIN Seq Sec + CON.1
 LCL.COA_Batch_Hdr_RIN_Seq_Sec = LCL.COA_Batch_Hdr_RIN_Seq_Sec + 1;

 // LCL.COA RIN SoldFull/Splt Sts = CND.Blank
 LCL.COA_RIN_SoldFull_Splt_Sts = *BLANK;

 //?5/12 RMC get price from 369 order
 EXECUTE FUNCTION(RTV Unit Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1991487;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Unit_Price);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.COA BHR Gallon Price = CON.1 * LCL.Unit Price *Rounded
 LCL.COA_BHR_Gallon_Price = 1 * LCL.Unit_Price 'H';

 //?If batch is from RFS2, then send to emts, else dont
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 2
 IF DB1.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch Header RIN = CON.*BLANK
 LCL.COA_Batch_Header_RIN = *BLANK;

 //?If batch is from RFS2, then send to emts, else dont
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?DONT SEND TO EMTS IF BATCH IF FROM RFS1
 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 ENDIF;

 //?Not RIN Customer then dont output RIN or other specific fields 3/03/2010
 CASE;

 // IF LCL.Type Code is Not RIN Customer
 IF LCL.Type_Code = 'NR';

 // LCL.COA RIN SoldFull/Splt Sts = CND.Fuel Sold Unassigned
 LCL.COA_RIN_SoldFull_Splt_Sts = 'U';

 // LCL.COA Batch Header RIN = CON.*BLANK
 LCL.COA_Batch_Header_RIN = *BLANK;

 // LCL.COA RIN SSSSSSSS = CON.*ZERO
 LCL.COA_RIN_SSSSSSSS = *ZERO;

 // LCL.COA RIN EEEEEEEE = CON.*ZERO
 LCL.COA_RIN_EEEEEEEE = *ZERO;

 // LCL.COA RIN Volume in Gallons = CND.eq 0
 LCL.COA_RIN_Volume_in_Gallons = *ZERO;

 // LCL.COA RIN Quantity = CND.ZERO
 LCL.COA_RIN_Quantity = *ZERO;

 // LCL.COA Batch RIN Volume = CND.Equal to Zero
 LCL.COA_Batch_RIN_Volume = *ZERO;

 //?P0579 RMC 5/13 dont send to emts
 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 //?E1762 RMC 9/3011 dont output trad partner #
 // LCL.HPB ULSD Company # = CND.Not Entered
 LCL.HPB_ULSD_Company_# = *BLANK;

 ENDIF;

 //?E2273 9/27/2012 -- ALL SELs are to be FIFO NOW in EMTS -PER TOM D
 // LCL.COA EMTS Batch Nbr = CON.*ZERO
 LCL.COA_EMTS_Batch_Nbr = *ZERO;

 //?P0579 5/13 create SEL with emts RIN sts = 0 = ready to send to emts
 //?  same COA Batch RIN Volume,COA RIN Quantity, price per gall for 369 order
 //?If Blender, create SEParated RIN Trans, else create SEL @ 1.5
 CASE;

 // IF LCL.Type Code is Blender for Biodiesel
 IF LCL.Type_Code = 'BL';

 //?When sold to a Blender, create SEParated RIN(s) at equiv value 2.5
 // LCL.RFS Transaction Type = CND.Separated
 LCL.RFS_Transaction_Type = 'SEP';

 // PAR.COA RIN Type Flag = CND.Separated
 PAR.COA_RIN_Type_Flag = 2;

 EXECUTE FUNCTION(Rtv Trans Rsn Dft,Dsc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990859;
 PARAMETER(LCL.RFS_Transaction_Type);
 PARAMETER(LCL.RFS_Trans_Reason_Code);
 PARAMETER(NLL.RFS_Trans_Reason_Desc);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.RFS Trans Reason Dft EQ PAR.RFS Trans Reason Dft
  IF DB1.RFS_Trans_Reason_Dft = PAR.RFS_Trans_Reason_Dft;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Equiv Value f/SEP RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC2002735;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(LCL.COA_BH_Equiv_Value_f_SEP);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.COA RIN Equivalence Valu# = CVTVAR(LCL.COA BH Equiv Value f/SEP)
 LCL.COA_RIN_Equivalence_Valu# = CVTVAR(LCL.COA_BH_Equiv_Value_f_SEP);

 CASE;

 // IF LCL.COA RIN Equivalence Valu# is Zero
 IF LCL.COA_RIN_Equivalence_Valu# = *ZERO;

 // LCL.COA RIN Equivalence Valu# = CON.2.5
 LCL.COA_RIN_Equivalence_Valu# = 2.5;

 ENDIF;

 // Call program Exc Gen RIN SEP Trans XF.
 CALL PROGRAM(Exc Gen RIN SEP Trans XF) ('PNT2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(DB1.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.HPB_ULSD_Company_#);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(DB1.COA_Rail_Car);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(DB1.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(PAR.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_Ref_Load_Id);
 PARAMETER(DB1.COA_Reference_Batch_NbrNU);
 PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.RFS_Transaction_Type);
 PARAMETER(LCL.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(LCL.COA_BHR_RIN_Price);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.COA_EMTS_PTD_Nbr);
 PARAMETER(LCL.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 PARAMETER(PAR.Actual_Ship_Date_Usr);

 //?If Blender, create SEParated RIN Trans, else create SEL @ 1.5
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.OHE HPB RIN Equiv Value EQ DB1.COA BHR Equiv Value
 IF LCL.OHE_HPB_RIN_Equiv_Value = DB1.COA_BHR_Equiv_Value;

 // LCL.RFS Transaction Type = CND.Sold or Delivered
 LCL.RFS_Transaction_Type = 'SEL';

 // PAR.COA RIN Type Flag = CND.Assigned
 PAR.COA_RIN_Type_Flag = 1;

 // LCL.RFS Trans Reason Code = DB1.RFS Trans Reason Code
 LCL.RFS_Trans_Reason_Code = DB1.RFS_Trans_Reason_Code;

 //?E2013 RMC 3/21/12 output act ship date as rin yr
 EXECUTE FUNCTION(Crt COA Batch Hdr RIN CR) TYPE(CRTOBJ) FILE(PMDACPP)           AC1858626;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 PARAMETER(JOB.*Job_time);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.HPB_ULSD_Company_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(DB1.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(PAR.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.RFS_Transaction_Type);
 PARAMETER(LCL.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(DB1.COA_BHR_RIN_Price);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(DB1.COA_BHR_Equiv_Value);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.RFS Transaction Type = CND.Sold or Delivered
 LCL.RFS_Transaction_Type = 'SEL';

 // PAR.COA RIN Type Flag = CND.Assigned
 PAR.COA_RIN_Type_Flag = 1;

 EXECUTE FUNCTION(Rtv Trans Rsn Dft,Dsc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990859;
 PARAMETER(LCL.RFS_Transaction_Type);
 PARAMETER(LCL.RFS_Trans_Reason_Code);
 PARAMETER(NLL.RFS_Trans_Reason_Desc);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.RFS Trans Reason Dft EQ PAR.RFS Trans Reason Dft
  IF DB1.RFS_Trans_Reason_Dft = PAR.RFS_Trans_Reason_Dft;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 // Call program Exc Gen RIN SEP Trans XF.
 CALL PROGRAM(Exc Gen RIN SEP Trans XF) ('PNT2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(DB1.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.Bill_to_Name);
 PARAMETER(LCL.HPB_ULSD_Company_#);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(DB1.COA_Rail_Car);
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(DB1.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(PAR.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_Ref_Load_Id);
 PARAMETER(DB1.COA_Reference_Batch_NbrNU);
 PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.RFS_Transaction_Type);
 PARAMETER(LCL.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(LCL.OHE_HPB_RIN_Price);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.COA_EMTS_PTD_Nbr);
 PARAMETER(LCL.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(PAR.Actual_Ship_Date_Usr);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Warehouse Location is External
 IF LCL.Warehouse_Location = 'E';

 //?If order in ready to invoice print, get the rin # and upd the rcd
 CASE;

 // IF LCL.Order Type Print Status is yes
 IF LCL.Order_Type_Print_Status = 'Y';

 // AND DB1.COA RIN SSSSSSSS is eq 0
 AND DB1.COA_RIN_SSSSSSSS = *ZERO;

 // AND DB1.COA RIN Transaction Date is not entered
 AND DB1.COA_RIN_Transaction_Date = *ZERO;

 //?Rtv Key for BUY RIN that was sold to outside from external whse.
 //?  and create SEL RIN from net gallons sold
 EXECUTE FUNCTION(RTV Bilto/Customer     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1735268;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Bill_to_Name);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Customer Type     RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1585599;
 PARAMETER(LCL.Bill_to_Customer);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(RTV HPB to Gen RIN    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1891415;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.HPB_Meter_Start_Gallon);
 PARAMETER(LCL.HPB_Meter_Ending_Gallon);
 PARAMETER(LCL.HPB_Meter_Total_Gallon);
 PARAMETER(LCL.HPB_Meter_Net_Weight);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV RIN Key fields    RT) TYPE(RTVOBJ) FILE(PNFPCPP)           AC1962269;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV HPB RIN Fields     RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2004047;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(LCL.OHE_HPB_RIN_Price);
 PARAMETER(LCL.OHE_Override_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.OHE HPB RIN Equiv Value is EQ 0
 IF LCL.OHE_HPB_RIN_Equiv_Value = *ZERO;

 // LCL.OHE HPB RIN Equiv Value = DB1.COA BHR Equiv Value
 LCL.OHE_HPB_RIN_Equiv_Value = DB1.COA_BHR_Equiv_Value;

 ENDIF;

 CASE;

 // IF LCL.OHE Override Type Code is No
 IF LCL.OHE_Override_Type_Code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Type Code = LCL.OHE Override Type Code
 LCL.Type_Code = LCL.OHE_Override_Type_Code;

 ENDIF;

 //?Not RIN and RIN/Blender  updates
 CASE;

 // IF LCL.Type Code is Not RIN Customer
 IF LCL.Type_Code = 'NR';

 //?RMC 1.16.2020 Use COA Batch Company instead of db1.company number?
 EXECUTE FUNCTION(Rtv Key RIN for SEL   RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1964132;
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_RIN_Type_Flag);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_BHR_Loadout_Temp);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.COA RIN Gallons Sold = LCL.COA RIN Gallons Sold
 WRK.COA_RIN_Gallons_Sold = LCL.COA_RIN_Gallons_Sold;

 EXECUTE FUNCTION(Rtv Equiv Value f/btchRT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1992392;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Exc HPB RIN Gen Split  XF.
 CALL PROGRAM(Exc HPB RIN Gen Split  XF) ('PNOMXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(LCL.COA_Batch_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(LCL.COA_RIN_Volume_New_usr);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 PARAMETER(LCL.COA_Batch_RIN_Volume_new);

 //? upd SEL rin with fuel sold Unassigned "U" sts
 //?E2013 RMC 3/21/12 output act ship date as rin trans dt
 EXECUTE FUNCTION(Chg Sold Fl/Splt/UnStsCH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1976912;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(DB1.COA_Batch_Header_RIN);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 PARAMETER(JOB.*Job_time);
 PARAMETER(*BLANK);
 PARAMETER('U');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?RMC 5/4/10 was wrk.rin gallons sold - need to incr RINS sold
 //?     so they wont be re-sold assigned
 //?RMC 7/13/11 pass in lcl.coa rin quantity to upd rins sold unassgned
 //?  instead of using lcl.rin gallons sold
 EXECUTE FUNCTION(Rtv Upd Ref Ord f/Inv RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1971689;
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.Type_Code);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.COA BHR Net Galls to Sell is Not Entered
  IF PAR.COA_BHR_Net_Galls_to_Sell = *ZERO;

  // LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
  LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.COA RIN SoldFull/Splt Sts = CND.Split
  LCL.COA_RIN_SoldFull_Splt_Sts = 'S';

  ENDIF;

  //?increase unassigned rins sold or rins sold
  CASE;

  // IF PAR.Type Code is Not RIN Customer
  IF PAR.Type_Code = 'NR';

  //?Use rin quantity instead. it was putting the total sold (assgn+unass) in
  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.COA RIN Quantity
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.COA_RIN_Quantity;

  // LCL.COA RIN Volume New usr = DB1.COA RIN Gallons Sold
  LCL.COA_RIN_Volume_New_usr = DB1.COA_RIN_Gallons_Sold;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?update rin adjustment --> excess rins from when ohe equiv is <1.5
  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.RIN Adjustment USR
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.RIN_Adjustment_USR;

  // LCL.COA RIN Volume New usr = PAR.COA RIN Gallons Sold
  LCL.COA_RIN_Volume_New_usr = PAR.COA_RIN_Gallons_Sold;

  ENDIF;

  EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(DB1.COA_Batch_Header_RIN);
  PARAMETER(DB1.COA_RIN_SSSSSSSS);
  PARAMETER(DB1.COA_RIN_EEEEEEEE);
  PARAMETER(DB1.COA_RIN_Volume_in_Gallons);
  PARAMETER(DB1.COA_RIN_Transaction_Date);
  PARAMETER(DB1.COA_RIN_Transaction_Time);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
  PARAMETER(DB1.COA_Retired_RIN_Reason_Cd);
  PARAMETER(DB1.COA_Retired_RIN_Date);
  PARAMETER(DB1.COA_Retired_RIN_Time);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
  PARAMETER(DB1.COA_Rail_Car);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.COA_Date_of_1st_Load);
  PARAMETER(DB1.COA_RIN_Unused_Time);
  PARAMETER(DB1.COA_RIN_Modified_Sts);
  PARAMETER(DB1.COA_RIN_Unused_Text);
  PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
  PARAMETER(LCL.COA_RIN_Volume_New_usr);
  PARAMETER(DB1.COA_Ship_To_Warehouse);
  PARAMETER(DB1.COA_RIN_Type_Flag);
  PARAMETER(DB1.COA_RIN_Customer_PO#);
  PARAMETER(DB1.COA_Shipping_Company);
  PARAMETER(DB1.COA_Ref_Load_Id);
  PARAMETER(DB1.COA_Reference_Batch_NbrNU);
  PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
  PARAMETER(DB1.RFS_Compliance_Period);
  PARAMETER(DB1.RFS_Report_Year);
  PARAMETER(DB1.COA_RIN_Int_Ext_Company);
  PARAMETER(DB1.COA_BHR_Unused_Sts_2);
  PARAMETER(PAR.COA_BHR_Net_Galls_to_Sell);
  PARAMETER(DB1.COA_BHR_Unused_Date_2);
  PARAMETER(DB1.COA_BHR_Unused_Text);
  PARAMETER(DB1.COA_BHR_Loadout_Temp);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(DB1.COA_Batch_RIN_Volume);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(DB1.RFS_Transaction_Type);
  PARAMETER(DB1.RFS_Trans_Reason_Code);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(DB1.COA_BHR_RIN_Gen_Year);
  PARAMETER(DB1.COA_BHR_RIN_Price);
  PARAMETER(DB1.COA_BHR_Gallon_Price);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_RIN_Supporting_Text_1);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
  PARAMETER(DB1.COA_RIN_Supporting_Text_2);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
  PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
  PARAMETER(DB1.COA_GEN_EMTS_Sts);
  PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Sts);
  PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_EMTS_PTD_Nbr);
  PARAMETER(DB1.COA_EMTS_Batch_Nbr);
  PARAMETER(DB1.COA_BHR_Unused_Sts_3);
  PARAMETER(DB1.COA_BHR_Unused_Nbr);
  PARAMETER(DB1.COA_EMTS_Trans_Id);
  PARAMETER(DB1.COA_EMTS_Return_Code);
  PARAMETER(DB1.COA_BHR_Unused_Date_3);
  PARAMETER(DB1.COA_BHR_Equiv_Value);
  PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
  PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Not RIN and RIN/Blender  updates
 // IF LCL.Type Code is Blender for Biodiesel
 IF LCL.Type_Code = 'BL';

 EXECUTE FUNCTION(Rtv Key RIN for SEL   RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1964132;
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_RIN_Type_Flag);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_BHR_Loadout_Temp);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Equiv Value f/btchRT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1992392;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Exc HPB RIN Gen Split  XF.
 CALL PROGRAM(Exc HPB RIN Gen Split  XF) ('PNOMXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(LCL.COA_Batch_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(LCL.COA_RIN_Volume_New_usr);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 PARAMETER(LCL.COA_Batch_RIN_Volume_new);

 // LCL.RIN Adjustment USR = CON.*ZERO
 LCL.RIN_Adjustment_USR = 0;

 //?Calc vol with SEP equiv value
 EXECUTE FUNCTION(Rtv Equiv Value f/SEP RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC2002735;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(PAR.COA_BH_Equiv_Value_f_SEP);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.COA RIN Equivalence Valu# = CVTVAR(PAR.COA BH Equiv Value f/SEP)
 WRK.COA_RIN_Equivalence_Valu# = CVTVAR(PAR.COA_BH_Equiv_Value_f_SEP);

 // LCL.Volume Needed         usr = CON.*ZERO
 LCL.Volume_Needed_usr = *ZERO;

 //?if SEP Equiv value GT batch,adjust volume.
 CASE;

 // IF WRK.COA RIN Equivalence Valu# GT LCL.COA RIN Equivalence Valu#
 IF WRK.COA_RIN_Equivalence_Valu# > LCL.COA_RIN_Equivalence_Valu#;

 //?2/06/12 C1918 chg above NE to GT
 //?Calc new volume for 1st SEP from RIN quantity / 2.5
 //?  Round any dec place to next whole nmbr - so add .5 then round
 // Comp: vol at 2.5 the rins
 LCL.AMOUNT = LCL.COA_RIN_Quantity / WRK.COA_RIN_Equivalence_Valu#;

 // LCL.Decimal Places    usr = LCL.AMOUNT
 LCL.Decimal_Places_usr = LCL.AMOUNT;

 //?chk decimal places>0
 CASE;

 // IF LCL.Decimal Places    usr is GT .00
 IF LCL.Decimal_Places_usr > .00;

 // LCL.AMOUNT = LCL.AMOUNT + CON..5
 LCL.AMOUNT = LCL.AMOUNT + .5;

 ENDIF;

 // LCL.COA Batch RIN Volume = LCL.AMOUNT * CON.1 *Rounded
 LCL.COA_Batch_RIN_Volume = LCL.AMOUNT * 1 'H';

 //?Calc Volume needed =  Orig Volume - Volume at 2.5
 // LCL.Volume Needed         usr = LCL.COA Batch RIN Volume new - LCL.COA Batch RIN Volume
 LCL.Volume_Needed_usr = LCL.COA_Batch_RIN_Volume_new - LCL.COA_Batch_RIN_Volume;

 ENDIF;

 //?P0579 EMTS 5/13/10 RMC Update vol, rin qty, price, year, emts sts
 //?RFS VERSION 1 OR 2
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 2
 IF DB1.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch RIN = CON.*BLANK
 LCL.COA_Batch_RIN = *BLANK;

 //?RFS VERSION 1 OR 2
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?RINs originally created under version rfs 1, are sold outside of EMTS
 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 ENDIF;

 CASE;

 // IF DB1.COA BHR RIN Gen Year is not equal to zero
 IF DB1.COA_BHR_RIN_Gen_Year <> *ZERO;

 // LCL.COA BHR RIN Gen Year = DB1.COA BHR RIN Gen Year
 LCL.COA_BHR_RIN_Gen_Year = DB1.COA_BHR_RIN_Gen_Year;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E2013 RMC 3/21/12 output act ship date as rin trans dt
 // LCL.COA BHR RIN Gen Year = PAR.Actual Ship Date Usr *YEAR
 LCL.COA_BHR_RIN_Gen_Year = DATEDTLS(PAR.Actual_Ship_Date_Usr 'YR' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?use db1.shipping co instead of db1.company
 EXECUTE FUNCTION(RTV Unit Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1991487;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Unit_Price);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.COA BHR Gallon Price = LCL.Unit Price * CON.1 *Rounded
 LCL.COA_BHR_Gallon_Price = LCL.Unit_Price * 1 'H';

 //?  Upd BUY RIN with RIN gallons sold and reduce net galls to sell
 //?RMC 7/13/11 pass in lcl.coa rin quantity to upd rins sold unassgned
 //?  instead of using lcl.rin gallons sold
 EXECUTE FUNCTION(Rtv Upd Ref Ord f/Inv RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1971689;
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.Type_Code);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.COA BHR Net Galls to Sell is Not Entered
  IF PAR.COA_BHR_Net_Galls_to_Sell = *ZERO;

  // LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
  LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.COA RIN SoldFull/Splt Sts = CND.Split
  LCL.COA_RIN_SoldFull_Splt_Sts = 'S';

  ENDIF;

  //?increase unassigned rins sold or rins sold
  CASE;

  // IF PAR.Type Code is Not RIN Customer
  IF PAR.Type_Code = 'NR';

  //?Use rin quantity instead. it was putting the total sold (assgn+unass) in
  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.COA RIN Quantity
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.COA_RIN_Quantity;

  // LCL.COA RIN Volume New usr = DB1.COA RIN Gallons Sold
  LCL.COA_RIN_Volume_New_usr = DB1.COA_RIN_Gallons_Sold;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?update rin adjustment --> excess rins from when ohe equiv is <1.5
  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.RIN Adjustment USR
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.RIN_Adjustment_USR;

  // LCL.COA RIN Volume New usr = PAR.COA RIN Gallons Sold
  LCL.COA_RIN_Volume_New_usr = PAR.COA_RIN_Gallons_Sold;

  ENDIF;

  EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(DB1.COA_Batch_Header_RIN);
  PARAMETER(DB1.COA_RIN_SSSSSSSS);
  PARAMETER(DB1.COA_RIN_EEEEEEEE);
  PARAMETER(DB1.COA_RIN_Volume_in_Gallons);
  PARAMETER(DB1.COA_RIN_Transaction_Date);
  PARAMETER(DB1.COA_RIN_Transaction_Time);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
  PARAMETER(DB1.COA_Retired_RIN_Reason_Cd);
  PARAMETER(DB1.COA_Retired_RIN_Date);
  PARAMETER(DB1.COA_Retired_RIN_Time);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
  PARAMETER(DB1.COA_Rail_Car);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.COA_Date_of_1st_Load);
  PARAMETER(DB1.COA_RIN_Unused_Time);
  PARAMETER(DB1.COA_RIN_Modified_Sts);
  PARAMETER(DB1.COA_RIN_Unused_Text);
  PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
  PARAMETER(LCL.COA_RIN_Volume_New_usr);
  PARAMETER(DB1.COA_Ship_To_Warehouse);
  PARAMETER(DB1.COA_RIN_Type_Flag);
  PARAMETER(DB1.COA_RIN_Customer_PO#);
  PARAMETER(DB1.COA_Shipping_Company);
  PARAMETER(DB1.COA_Ref_Load_Id);
  PARAMETER(DB1.COA_Reference_Batch_NbrNU);
  PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
  PARAMETER(DB1.RFS_Compliance_Period);
  PARAMETER(DB1.RFS_Report_Year);
  PARAMETER(DB1.COA_RIN_Int_Ext_Company);
  PARAMETER(DB1.COA_BHR_Unused_Sts_2);
  PARAMETER(PAR.COA_BHR_Net_Galls_to_Sell);
  PARAMETER(DB1.COA_BHR_Unused_Date_2);
  PARAMETER(DB1.COA_BHR_Unused_Text);
  PARAMETER(DB1.COA_BHR_Loadout_Temp);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(DB1.COA_Batch_RIN_Volume);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(DB1.RFS_Transaction_Type);
  PARAMETER(DB1.RFS_Trans_Reason_Code);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(DB1.COA_BHR_RIN_Gen_Year);
  PARAMETER(DB1.COA_BHR_RIN_Price);
  PARAMETER(DB1.COA_BHR_Gallon_Price);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_RIN_Supporting_Text_1);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
  PARAMETER(DB1.COA_RIN_Supporting_Text_2);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
  PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
  PARAMETER(DB1.COA_GEN_EMTS_Sts);
  PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Sts);
  PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_EMTS_PTD_Nbr);
  PARAMETER(DB1.COA_EMTS_Batch_Nbr);
  PARAMETER(DB1.COA_BHR_Unused_Sts_3);
  PARAMETER(DB1.COA_BHR_Unused_Nbr);
  PARAMETER(DB1.COA_EMTS_Trans_Id);
  PARAMETER(DB1.COA_EMTS_Return_Code);
  PARAMETER(DB1.COA_BHR_Unused_Date_3);
  PARAMETER(DB1.COA_BHR_Equiv_Value);
  PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
  PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?  Upd SEP RIN with RIN gallons sold and volume at SEP equiv value 2.5
 EXECUTE FUNCTION(Rtv Upd Ord f/inv     RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1972087;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_EMTS_Batch_Nbr);
 PARAMETER(WRK.COA_RIN_Equivalence_Valu#);
 PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(LCL.COA_RIN_Volume_New_usr);
 PARAMETER(LCL.COA_Batch_RIN);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(PAR.COA_Batch_RIN);
  PARAMETER(PAR.COA_RIN_SSSSSSSS_New_usr);
  PARAMETER(PAR.COA_RIN_EEEEEEEE_New_usr);
  PARAMETER(PAR.COA_RIN_Volume_New_usr);
  PARAMETER(PAR.Actual_Ship_Date_Usr);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
  PARAMETER(DB1.COA_Retired_RIN_Reason_Cd);
  PARAMETER(DB1.COA_Retired_RIN_Date);
  PARAMETER(DB1.COA_Retired_RIN_Time);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
  PARAMETER(DB1.COA_Rail_Car);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.COA_Date_of_1st_Load);
  PARAMETER(DB1.COA_RIN_Unused_Time);
  PARAMETER(DB1.COA_RIN_Modified_Sts);
  PARAMETER(DB1.COA_RIN_Unused_Text);
  PARAMETER(DB1.COA_RIN_SoldFull_Splt_Sts);
  PARAMETER(DB1.COA_RIN_Gallons_Sold);
  PARAMETER(DB1.COA_Ship_To_Warehouse);
  PARAMETER(DB1.COA_RIN_Type_Flag);
  PARAMETER(DB1.COA_RIN_Customer_PO#);
  PARAMETER(DB1.COA_Shipping_Company);
  PARAMETER(DB1.COA_Ref_Load_Id);
  PARAMETER(DB1.COA_Reference_Batch_NbrNU);
  PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
  PARAMETER(DB1.RFS_Compliance_Period);
  PARAMETER(DB1.RFS_Report_Year);
  PARAMETER(DB1.COA_RIN_Int_Ext_Company);
  PARAMETER(DB1.COA_BHR_Unused_Sts_2);
  PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
  PARAMETER(DB1.COA_BHR_Unused_Date_2);
  PARAMETER(DB1.COA_BHR_Unused_Text);
  PARAMETER(DB1.COA_BHR_Loadout_Temp);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(PAR.COA_Batch_RIN_Volume);
  PARAMETER(PAR.COA_RIN_Quantity);
  PARAMETER(DB1.RFS_Transaction_Type);
  PARAMETER(DB1.RFS_Trans_Reason_Code);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(PAR.COA_BHR_RIN_Gen_Year);
  PARAMETER(DB1.COA_BHR_RIN_Price);
  PARAMETER(PAR.COA_BHR_Gallon_Price);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_RIN_Supporting_Text_1);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
  PARAMETER(DB1.COA_RIN_Supporting_Text_2);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
  PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
  PARAMETER(DB1.COA_GEN_EMTS_Sts);
  PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
  PARAMETER(PAR.COA_RIN_EMTS_Sts);
  PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_EMTS_PTD_Nbr);
  PARAMETER(PAR.COA_EMTS_Batch_Nbr);
  PARAMETER(DB1.COA_BHR_Unused_Sts_3);
  PARAMETER(DB1.COA_BHR_Unused_Nbr);
  PARAMETER(DB1.COA_EMTS_Trans_Id);
  PARAMETER(DB1.COA_EMTS_Return_Code);
  PARAMETER(DB1.COA_BHR_Unused_Date_3);
  PARAMETER(PAR.COA_BHR_Equiv_Value);
  PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
  PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
  PARAMETER(DB1.Record_Status);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Get extra volume f/unassn rins not sold
 CASE;

 // IF LCL.Volume Needed         usr is Greater than Zero
 IF LCL.Volume_Needed_usr > *ZERO;

 // Call program Exc Gen RIN SEP-f/Ext XF.
 CALL PROGRAM(Exc Gen RIN SEP-f/Ext XF) ('PNT8XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(DB1.COA_Rail_Car);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.COA_Date_of_1st_Load);
 PARAMETER(DB1.COA_RIN_Unused_Time);
 PARAMETER(DB1.COA_RIN_Modified_Sts);
 PARAMETER(DB1.COA_RIN_Unused_Text);
 PARAMETER(DB1.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(DB1.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(DB1.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_Ref_Load_Id);
 PARAMETER(DB1.COA_Reference_Batch_NbrNU);
 PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.RFS_Transaction_Type);
 PARAMETER(DB1.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(DB1.COA_BHR_RIN_Price);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(DB1.COA_GEN_EMTS_Sts);
 PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_EMTS_PTD_Nbr);
 PARAMETER(DB1.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(DB1.COA_EMTS_Trans_Id);
 PARAMETER(DB1.COA_EMTS_Return_Code);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(WRK.COA_RIN_Equivalence_Valu#);
 PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
 PARAMETER(LCL.Volume_Needed_usr);
 PARAMETER(PAR.Actual_Ship_Date_Usr);

 ENDIF;

 //?Not RIN and RIN/Blender  updates
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Key RIN for SEL   RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1964132;
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_RIN_Type_Flag);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_BHR_Loadout_Temp);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Equiv Value f/btchRT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1992392;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Exc HPB RIN Gen Split  XF.
 CALL PROGRAM(Exc HPB RIN Gen Split  XF) ('PNOMXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(LCL.COA_Batch_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(LCL.COA_RIN_Volume_New_usr);
 PARAMETER(LCL.HPB_Meter_Net_Gallon);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 PARAMETER(LCL.COA_Batch_RIN_Volume_new);

 // LCL.RIN Adjustment USR = CON.*ZERO
 LCL.RIN_Adjustment_USR = 0;

 // LCL.Volume Needed         usr = CON.*ZERO
 LCL.Volume_Needed_usr = *ZERO;

 //?if SEL Equiv value GT batch,adjust volume.
 CASE;

 // IF LCL.OHE HPB RIN Equiv Value GT LCL.COA RIN Equivalence Valu#
 IF LCL.OHE_HPB_RIN_Equiv_Value > LCL.COA_RIN_Equivalence_Valu#;

 //?2/06/12 C1918 chg above NE to GT
 //?Calc new volume for 1st SEP from RIN quantity / 2.5
 //?  Round any dec place to next whole nmbr - so add .5 then round
 // Comp: vol at 2.5 the rins
 LCL.AMOUNT = LCL.COA_RIN_Quantity / LCL.OHE_HPB_RIN_Equiv_Value;

 // LCL.Decimal Places    usr = LCL.AMOUNT
 LCL.Decimal_Places_usr = LCL.AMOUNT;

 //?chk decimal places>0
 CASE;

 // IF LCL.Decimal Places    usr is GT .00
 IF LCL.Decimal_Places_usr > .00;

 // LCL.AMOUNT = LCL.AMOUNT + CON..5
 LCL.AMOUNT = LCL.AMOUNT + .5;

 ENDIF;

 // LCL.COA Batch RIN Volume = LCL.AMOUNT * CON.1 *Rounded
 LCL.COA_Batch_RIN_Volume = LCL.AMOUNT * 1 'H';

 //?Calc Volume needed =  Orig Volume - Volume at 2.5
 // LCL.Volume Needed         usr = LCL.COA Batch RIN Volume new - LCL.COA Batch RIN Volume
 LCL.Volume_Needed_usr = LCL.COA_Batch_RIN_Volume_new - LCL.COA_Batch_RIN_Volume;

 // LCL.COA RIN Equivalence Valu# = LCL.OHE HPB RIN Equiv Value
 LCL.COA_RIN_Equivalence_Valu# = LCL.OHE_HPB_RIN_Equiv_Value;

 //?if SEL Equiv value GT batch,adjust volume.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA Batch RIN Volume = LCL.COA Batch RIN Volume new
 LCL.COA_Batch_RIN_Volume = LCL.COA_Batch_RIN_Volume_new;

 ENDIF;

 //?if SEL Equiv value LT batch, then put excess in Rins to sell Unssg
 CASE;

 // IF LCL.OHE HPB RIN Equiv Value LT LCL.COA RIN Equivalence Valu#
 IF LCL.OHE_HPB_RIN_Equiv_Value < LCL.COA_RIN_Equivalence_Valu#;

 // LCL.RIN Adjustment USR = LCL.COA RIN Quantity
 LCL.RIN_Adjustment_USR = LCL.COA_RIN_Quantity;

 //?Calc rins needed per OHE Rin equiv value
 // Comp: rins at OHE equiv
 LCL.COA_RIN_Quantity = LCL.HPB_Meter_Net_Gallon * LCL.OHE_HPB_RIN_Equiv_Value 'H';

 // LCL.COA RIN Volume New usr = LCL.COA RIN Quantity
 LCL.COA_RIN_Volume_New_usr = LCL.COA_RIN_Quantity;

 //?Calc Excess RINs  =  Orig RINs - RIN Adjustment which is rins at ohe value
 // LCL.RIN Adjustment USR = LCL.RIN Adjustment USR - LCL.COA RIN Quantity
 LCL.RIN_Adjustment_USR = LCL.RIN_Adjustment_USR - LCL.COA_RIN_Quantity;

 //?reduce rin gallons sold by what is going into rins to sell unassng
 // LCL.COA RIN Gallons Sold = LCL.COA RIN Gallons Sold - LCL.RIN Adjustment USR
 LCL.COA_RIN_Gallons_Sold = LCL.COA_RIN_Gallons_Sold - LCL.RIN_Adjustment_USR;

 // LCL.COA RIN Equivalence Valu# = LCL.OHE HPB RIN Equiv Value
 LCL.COA_RIN_Equivalence_Valu# = LCL.OHE_HPB_RIN_Equiv_Value;

 // LCL.COA RIN EEEEEEEE  New usr = LCL.COA RIN SSSSSSSS  New usr + LCL.COA RIN Quantity
 LCL.COA_RIN_EEEEEEEE_New_usr = LCL.COA_RIN_SSSSSSSS_New_usr + LCL.COA_RIN_Quantity;

 //?Sub 1 for inclusive
 // LCL.COA RIN EEEEEEEE  New usr = LCL.COA RIN EEEEEEEE  New usr - CON.1
 LCL.COA_RIN_EEEEEEEE_New_usr = LCL.COA_RIN_EEEEEEEE_New_usr - 1;

 //?if SEL Equiv value LT batch, then put excess in Rins to sell Unssg
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 //?RMC -- NEW 7-10-15     C4148
 //?IF no rins exist on orig buy rcd 7-10-15, calc batch volume to get
 CASE;

 // IF LCL.COA RIN Quantity is ZERO
 IF LCL.COA_RIN_Quantity = *ZERO;

 CASE;

 // IF LCL.Item Code is B100
 IF LCL.Item_Code = 11000;

 // LCL.COA BOL Percent = CON.100
 LCL.COA_BOL_Percent = 100;

 ENDIF;

 CASE;

 // IF LCL.Item Code is B99.9
 IF LCL.Item_Code = 10999;

 // LCL.COA BOL Percent = CON.99.9
 LCL.COA_BOL_Percent = 99.9;

 ENDIF;

 // Compute:vol needed usr
 LCL.Volume_Needed_usr = LCL.HPB_Meter_Net_Gallon * ( LCL.COA_BOL_Percent / 100 );

 // LCL.COA RIN Equivalence Valu# = LCL.OHE HPB RIN Equiv Value
 LCL.COA_RIN_Equivalence_Valu# = LCL.OHE_HPB_RIN_Equiv_Value;

 ENDIF;

 //?P0579 EMTS 5/13/10 RMC Update vol, rin qty, price, year, emts sts
 //?RFS VERSION 1 OR 2
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 2
 IF DB1.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch RIN = CON.*BLANK
 LCL.COA_Batch_RIN = *BLANK;

 //?RFS VERSION 1 OR 2
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?RINs originally created under version rfs 1, are sold outside of EMTS
 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 ENDIF;

 //?RMC 1/16/2020 use coa shipping company  instead of DB1.company
 EXECUTE FUNCTION(RTV Unit Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1991487;
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Unit_Price);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.COA BHR Gallon Price = LCL.Unit Price * CON.1 *Rounded
 LCL.COA_BHR_Gallon_Price = LCL.Unit_Price * 1 'H';

 //?*************************
 //?Dont output EMTS Batch if GEN date older than 12/21/11       E1868
 //?  So those will process FIFO in EMTS
 // LCL.COA EMTS Batch Nbr = DB1.COA EMTS Batch Nbr
 LCL.COA_EMTS_Batch_Nbr = DB1.COA_EMTS_Batch_Nbr;

 //?R6965 8/16/16 new hpb plant
 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('HPBPLT');
 PARAMETER(LCL.Company_Number_041405);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv GEN Dt for org SELRT) TYPE(RTVOBJ) FILE(PMDACPP)           AC2031994;
 PARAMETER(LCL.Company_Number_041405);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(WRK.COA_BHR_RIN_Gen_Year);
 PARAMETER(LCL.COA_GEN_EMTS_Date_Sent);
 {
  //?USER: Process Data record

  //?Get GEN date... s/only be 1 order for this ulsd/batch/seq
  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?1/03/2012 -- ALL SELs are to be FIFO NOW in EMTS
 // LCL.COA EMTS Batch Nbr = CON.*ZERO
 LCL.COA_EMTS_Batch_Nbr = *ZERO;

 //?1/03/2012 -- output year from orig RIN unless db1 year is entered
 //?BHR RIN Gen Year
 CASE;

 // IF DB1.COA BHR RIN Gen Year is not equal to zero
 IF DB1.COA_BHR_RIN_Gen_Year <> *ZERO;

 // LCL.COA BHR RIN Gen Year = DB1.COA BHR RIN Gen Year
 LCL.COA_BHR_RIN_Gen_Year = DB1.COA_BHR_RIN_Gen_Year;

 //?BHR RIN Gen Year
 // IF WRK.COA BHR RIN Gen Year is not equal to zero
 IF WRK.COA_BHR_RIN_Gen_Year <> *ZERO;

 // LCL.COA BHR RIN Gen Year = WRK.COA BHR RIN Gen Year
 LCL.COA_BHR_RIN_Gen_Year = WRK.COA_BHR_RIN_Gen_Year;

 //?BHR RIN Gen Year
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?E2013 RMC 3/21/12 output act ship date as rin trans dt
 // LCL.COA BHR RIN Gen Year = PAR.Actual Ship Date Usr *YEAR
 LCL.COA_BHR_RIN_Gen_Year = DATEDTLS(PAR.Actual_Ship_Date_Usr 'YR' 1111111 'NONE' 'N' 1);

 ENDIF;

 //?************************
 CASE;

 // IF LCL.COA RIN Quantity is ZERO
 IF LCL.COA_RIN_Quantity = *ZERO;

 //?mark processed so it wont try to go to emts    7-13-15
 // LCL.COA RIN EMTS Sts = CND.Processed
 LCL.COA_RIN_EMTS_Sts = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 ENDIF;

 EXECUTE FUNCTION(Rtv Upd Ord f/inv     RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1972087;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(LCL.COA_EMTS_Batch_Nbr);
 PARAMETER(LCL.COA_RIN_Equivalence_Valu#);
 PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(LCL.COA_RIN_Volume_New_usr);
 PARAMETER(LCL.COA_Batch_RIN);
 PARAMETER(PAR.Actual_Ship_Date_Usr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(PAR.COA_Batch_RIN);
  PARAMETER(PAR.COA_RIN_SSSSSSSS_New_usr);
  PARAMETER(PAR.COA_RIN_EEEEEEEE_New_usr);
  PARAMETER(PAR.COA_RIN_Volume_New_usr);
  PARAMETER(PAR.Actual_Ship_Date_Usr);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
  PARAMETER(DB1.COA_Retired_RIN_Reason_Cd);
  PARAMETER(DB1.COA_Retired_RIN_Date);
  PARAMETER(DB1.COA_Retired_RIN_Time);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
  PARAMETER(DB1.COA_Rail_Car);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.COA_Date_of_1st_Load);
  PARAMETER(DB1.COA_RIN_Unused_Time);
  PARAMETER(DB1.COA_RIN_Modified_Sts);
  PARAMETER(DB1.COA_RIN_Unused_Text);
  PARAMETER(DB1.COA_RIN_SoldFull_Splt_Sts);
  PARAMETER(DB1.COA_RIN_Gallons_Sold);
  PARAMETER(DB1.COA_Ship_To_Warehouse);
  PARAMETER(DB1.COA_RIN_Type_Flag);
  PARAMETER(DB1.COA_RIN_Customer_PO#);
  PARAMETER(DB1.COA_Shipping_Company);
  PARAMETER(DB1.COA_Ref_Load_Id);
  PARAMETER(DB1.COA_Reference_Batch_NbrNU);
  PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
  PARAMETER(DB1.RFS_Compliance_Period);
  PARAMETER(DB1.RFS_Report_Year);
  PARAMETER(DB1.COA_RIN_Int_Ext_Company);
  PARAMETER(DB1.COA_BHR_Unused_Sts_2);
  PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
  PARAMETER(DB1.COA_BHR_Unused_Date_2);
  PARAMETER(DB1.COA_BHR_Unused_Text);
  PARAMETER(DB1.COA_BHR_Loadout_Temp);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(PAR.COA_Batch_RIN_Volume);
  PARAMETER(PAR.COA_RIN_Quantity);
  PARAMETER(DB1.RFS_Transaction_Type);
  PARAMETER(DB1.RFS_Trans_Reason_Code);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(PAR.COA_BHR_RIN_Gen_Year);
  PARAMETER(DB1.COA_BHR_RIN_Price);
  PARAMETER(PAR.COA_BHR_Gallon_Price);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_RIN_Supporting_Text_1);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
  PARAMETER(DB1.COA_RIN_Supporting_Text_2);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
  PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
  PARAMETER(DB1.COA_GEN_EMTS_Sts);
  PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
  PARAMETER(PAR.COA_RIN_EMTS_Sts);
  PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_EMTS_PTD_Nbr);
  PARAMETER(PAR.COA_EMTS_Batch_Nbr);
  PARAMETER(DB1.COA_BHR_Unused_Sts_3);
  PARAMETER(DB1.COA_BHR_Unused_Nbr);
  PARAMETER(DB1.COA_EMTS_Trans_Id);
  PARAMETER(DB1.COA_EMTS_Return_Code);
  PARAMETER(DB1.COA_BHR_Unused_Date_3);
  PARAMETER(PAR.COA_BHR_Equiv_Value);
  PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
  PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
  PARAMETER(DB1.Record_Status);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?  Upd BUY RIN with RIN gallons sold and reduce net galls to sell
 //?RMC 7/13/11 pass in lcl.coa rin quantity to upd rins sold unassgned
 //?  instead of using lcl.rin gallons sold
 EXECUTE FUNCTION(Rtv Upd Ref Ord f/Inv RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1971689;
 PARAMETER(LCL.COA_Batch_Company_Nbr);
 PARAMETER(LCL.COA_ULSD_Company_#);
 PARAMETER(LCL.COA_Batch_Number);
 PARAMETER(LCL.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_RIN_Gallons_Sold);
 PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_RIN_Quantity);
 PARAMETER(LCL.Type_Code);
 PARAMETER(LCL.RIN_Adjustment_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.COA BHR Net Galls to Sell is Not Entered
  IF PAR.COA_BHR_Net_Galls_to_Sell = *ZERO;

  // LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
  LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.COA RIN SoldFull/Splt Sts = CND.Split
  LCL.COA_RIN_SoldFull_Splt_Sts = 'S';

  ENDIF;

  //?increase unassigned rins sold or rins sold
  CASE;

  // IF PAR.Type Code is Not RIN Customer
  IF PAR.Type_Code = 'NR';

  //?Use rin quantity instead. it was putting the total sold (assgn+unass) in
  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.COA RIN Quantity
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.COA_RIN_Quantity;

  // LCL.COA RIN Volume New usr = DB1.COA RIN Gallons Sold
  LCL.COA_RIN_Volume_New_usr = DB1.COA_RIN_Gallons_Sold;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?update rin adjustment --> excess rins from when ohe equiv is <1.5
  // LCL.COA BHR RINs to Sell Sep = DB1.COA BHR RINs to Sell Sep + PAR.RIN Adjustment USR
  LCL.COA_BHR_RINs_to_Sell_Sep = DB1.COA_BHR_RINs_to_Sell_Sep + PAR.RIN_Adjustment_USR;

  // LCL.COA RIN Volume New usr = PAR.COA RIN Gallons Sold
  LCL.COA_RIN_Volume_New_usr = PAR.COA_RIN_Gallons_Sold;

  ENDIF;

  EXECUTE FUNCTION(Chg COA Batch Hdr RIN CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1858627;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.COA_ULSD_Company_#);
  PARAMETER(DB1.COA_Batch_Number);
  PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
  PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
  PARAMETER(DB1.COA_Batch_Header_RIN);
  PARAMETER(DB1.COA_RIN_SSSSSSSS);
  PARAMETER(DB1.COA_RIN_EEEEEEEE);
  PARAMETER(DB1.COA_RIN_Volume_in_Gallons);
  PARAMETER(DB1.COA_RIN_Transaction_Date);
  PARAMETER(DB1.COA_RIN_Transaction_Time);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
  PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
  PARAMETER(DB1.COA_Retired_RIN_Reason_Cd);
  PARAMETER(DB1.COA_Retired_RIN_Date);
  PARAMETER(DB1.COA_Retired_RIN_Time);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
  PARAMETER(DB1.COA_Rail_Car);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.COA_Date_of_1st_Load);
  PARAMETER(DB1.COA_RIN_Unused_Time);
  PARAMETER(DB1.COA_RIN_Modified_Sts);
  PARAMETER(DB1.COA_RIN_Unused_Text);
  PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
  PARAMETER(LCL.COA_RIN_Volume_New_usr);
  PARAMETER(DB1.COA_Ship_To_Warehouse);
  PARAMETER(DB1.COA_RIN_Type_Flag);
  PARAMETER(DB1.COA_RIN_Customer_PO#);
  PARAMETER(DB1.COA_Shipping_Company);
  PARAMETER(DB1.COA_Ref_Load_Id);
  PARAMETER(DB1.COA_Reference_Batch_NbrNU);
  PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
  PARAMETER(DB1.RFS_Compliance_Period);
  PARAMETER(DB1.RFS_Report_Year);
  PARAMETER(DB1.COA_RIN_Int_Ext_Company);
  PARAMETER(DB1.COA_BHR_Unused_Sts_2);
  PARAMETER(PAR.COA_BHR_Net_Galls_to_Sell);
  PARAMETER(DB1.COA_BHR_Unused_Date_2);
  PARAMETER(DB1.COA_BHR_Unused_Text);
  PARAMETER(DB1.COA_BHR_Loadout_Temp);
  PARAMETER(DB1.COA_ULSD_Facility_#);
  PARAMETER(DB1.COA_Batch_RIN_Volume);
  PARAMETER(DB1.COA_RIN_Quantity);
  PARAMETER(DB1.RFS_Transaction_Type);
  PARAMETER(DB1.RFS_Trans_Reason_Code);
  PARAMETER(DB1.RFS_Fuel_Code);
  PARAMETER(DB1.COA_BHR_RIN_Gen_Year);
  PARAMETER(DB1.COA_BHR_RIN_Price);
  PARAMETER(DB1.COA_BHR_Gallon_Price);
  PARAMETER(DB1.COA_Transaction_Comment);
  PARAMETER(DB1.COA_RIN_Supporting_Text_1);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
  PARAMETER(DB1.COA_RIN_Supporting_Text_2);
  PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
  PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
  PARAMETER(DB1.COA_GEN_EMTS_Sts);
  PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Sts);
  PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
  PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
  PARAMETER(DB1.COA_EMTS_PTD_Nbr);
  PARAMETER(DB1.COA_EMTS_Batch_Nbr);
  PARAMETER(DB1.COA_BHR_Unused_Sts_3);
  PARAMETER(DB1.COA_BHR_Unused_Nbr);
  PARAMETER(DB1.COA_EMTS_Trans_Id);
  PARAMETER(DB1.COA_EMTS_Return_Code);
  PARAMETER(DB1.COA_BHR_Unused_Date_3);
  PARAMETER(DB1.COA_BHR_Equiv_Value);
  PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
  PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Get extra volume f/unassn rins not sold
 CASE;

 // IF LCL.Volume Needed         usr is Greater than Zero
 IF LCL.Volume_Needed_usr > *ZERO;

 // Call program Exc Gen RIN SEP-f/Ext XF.
 CALL PROGRAM(Exc Gen RIN SEP-f/Ext XF) ('PNT8XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Batch_Header_RIN_Seq);
 PARAMETER(DB1.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_Header_RIN);
 PARAMETER(LCL.COA_RIN_SSSSSSSS);
 PARAMETER(LCL.COA_RIN_EEEEEEEE);
 PARAMETER(LCL.COA_RIN_Volume_in_Gallons);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Nm);
 PARAMETER(DB1.COA_RIN_Trans_Partner_Id);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Case_Sequence_Number);
 PARAMETER(DB1.COA_Rail_Car);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.COA_Date_of_1st_Load);
 PARAMETER(DB1.COA_RIN_Unused_Time);
 PARAMETER(DB1.COA_RIN_Modified_Sts);
 PARAMETER(DB1.COA_RIN_Unused_Text);
 PARAMETER(DB1.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(DB1.COA_RIN_Gallons_Sold);
 PARAMETER(DB1.COA_Ship_To_Warehouse);
 PARAMETER(DB1.COA_RIN_Type_Flag);
 PARAMETER(DB1.COA_RIN_Customer_PO#);
 PARAMETER(DB1.COA_Shipping_Company);
 PARAMETER(DB1.COA_Ref_Load_Id);
 PARAMETER(DB1.COA_Reference_Batch_NbrNU);
 PARAMETER(DB1.COA_Reference_Btch_Seq_NU);
 PARAMETER(DB1.RFS_Compliance_Period);
 PARAMETER(DB1.RFS_Report_Year);
 PARAMETER(DB1.COA_RIN_Int_Ext_Company);
 PARAMETER(DB1.COA_BHR_Unused_Sts_2);
 PARAMETER(DB1.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(DB1.COA_BHR_Unused_Date_2);
 PARAMETER(DB1.COA_BHR_Unused_Text);
 PARAMETER(DB1.COA_BHR_Loadout_Temp);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(LCL.COA_Batch_RIN_Volume);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.RFS_Transaction_Type);
 PARAMETER(DB1.RFS_Trans_Reason_Code);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(LCL.COA_BHR_RIN_Gen_Year);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_BHR_Gallon_Price);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_RIN_Supporting_Text_1);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_1);
 PARAMETER(DB1.COA_RIN_Supporting_Text_2);
 PARAMETER(DB1.COA_RIN_Supporting_Nbr_2);
 PARAMETER(DB1.COA_BHR_RFS_Version_Nbr);
 PARAMETER(DB1.COA_GEN_EMTS_Sts);
 PARAMETER(DB1.COA_GEN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_GEN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Sts);
 PARAMETER(DB1.COA_RIN_EMTS_Date_Sent);
 PARAMETER(DB1.COA_RIN_EMTS_Time_Sent);
 PARAMETER(DB1.COA_EMTS_PTD_Nbr);
 PARAMETER(DB1.COA_EMTS_Batch_Nbr);
 PARAMETER(DB1.COA_BHR_Unused_Sts_3);
 PARAMETER(DB1.COA_BHR_Unused_Nbr);
 PARAMETER(DB1.COA_EMTS_Trans_Id);
 PARAMETER(DB1.COA_EMTS_Return_Code);
 PARAMETER(DB1.COA_BHR_Unused_Date_3);
 PARAMETER(LCL.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(DB1.COA_BHR_RINs_to_Sell_Sep);
 PARAMETER(DB1.COA_Unassgnd_Txfrd_RINS);
 PARAMETER(LCL.Volume_Needed_usr);
 PARAMETER(PAR.Actual_Ship_Date_Usr);

 ENDIF;

 ENDIF;

 //?******
 ENDIF;

 ENDIF;

}


