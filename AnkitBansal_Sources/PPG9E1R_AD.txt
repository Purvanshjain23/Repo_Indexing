// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPG9E1R
// ?Date: 14.08.2025 Time: 03:40:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

//?***** Change Log
//?** 2/9/2006 LJB
//?** Change the program that is called with F21 to a new program
//?** that prompts for printer parms then submits the print program.
//?*****
//?** 2/17/2006 LJB
//?** Add customer# as incoming parm. Zero out the company#, the
//?** user will need to enter it. This has been removed from the
//?** menu. This program is now called from the WW Customer
//?** Traffic Information program. The Company number will be
//?** entered on the screen.
//?*****
//?USER: Initialize key screen

//?** Initialize the company number to zeros. Users will
//?** have to enter the company they want to maintain.
//?** Default the key screen customer# to the PAR value   2/17/2006 LJB
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// KEY.Company Number = CON.*ZERO
KEY.Company_Number = 0;

ENDIF;

// KEY.Ship To Customer = PAR.USR Ship To Customer
KEY.Ship_To_Customer = PAR.USR_Ship_To_Customer;

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

//?USER: Validate key screen

//?F4 - Select company or customer
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.Company Number
IF PGM.*Cursor_field = KEY.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(KEY.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Selection not allowed on output field.'
ERROR(USR2389);

ENDIF;

ENDIF;

//?02/22/06 PKD Not needed since Customer is output
ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Cust Defaults      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1259916;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(WRK.Federal_Tax_Id);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Email_When_Order_Shipped);
PARAMETER(WRK.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV County Desc.       RT) TYPE(RTVOBJ) FILE(CAECREP)          AC1147093;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Active Carr Name   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1447369;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Validate detail screen relations

EXECUTE FUNCTION(RTV Cust Defaults      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1259916;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(WRK.Telephone_Number_FF);
PARAMETER(WRK.Fax_Number_FF);
PARAMETER(WRK.Federal_Tax_Id);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Email_When_Order_Shipped);
PARAMETER(WRK.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV County Desc.       RT) TYPE(RTVOBJ) FILE(CAECREP)          AC1147093;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Carrier Code NE WRK.BLANK
IF DTL.Carrier_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Active Carr Name   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1447369;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF DTL.USR Carrier Name is not entered
IF DTL.USR_Carrier_Name = *BLANK;

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(DTL.Carrier_Code);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Carrier Name = CON.*BLANK
DTL.USR_Carrier_Name = *BLANK;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Co/Cust Trf Info   IF) TYPE(EXCINTFUN) FILE(CAEOREP)       AC1709219;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Broker);
PARAMETER(DTL.P_O_Required_Flag);
PARAMETER(DTL.Deliver_after_time);
PARAMETER(DTL.Deliver_before_time);
PARAMETER(DTL.Alt_Remittance_Flag);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Mileage_To_Customer);
PARAMETER(DTL.Co_Cust_Overage_Rate_CWT);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Outside_Warehouse_Flag);
PARAMETER(DTL.Customer_Group_Code);
PARAMETER(DTL.Customer_Group_Code_2);
PARAMETER(DTL.G_L_Code);
PARAMETER(DTL.Commodity_Market_Code);
PARAMETER(DTL.Credit_Contact_Name);
PARAMETER(DTL.Credit_Contact_Telephone);
PARAMETER(DTL.Credit_Contact_Bus_Title);
PARAMETER(DTL.Credit_Contact_Fax_Number);
PARAMETER(DTL.Allow_Man_Qt_WO_Approval);
PARAMETER(DTL.Fax_Invoice_Flag);
PARAMETER(DTL.Fax_Invoice_Fax_Number);
PARAMETER(DTL.Fax_Invoice_Contact_Name);
PARAMETER(DTL.Distributor);
PARAMETER(DTL.Default_Shipping_Co_Sts);
{
 //?Execute internal function

 //?1/17/05 * Special Note we * out the process for the
 //?          plant St Joe, until they are ready to start having
 //?          customers for ST Joe, or Orders for ST Joe.
 //?          All coding for Guymon will stay as is, and ST Joe
 //?          will be * out for the present time.
 //?          Please make sure that any code changes that are
 //?          made for the Guymon is done for ST Joe.
 //?          later on Purva will instruct us to un * the St Joe
 //?          a conversion program will create the St Joe Customer
 //?          and we should be up and running.
 //?          so all code that implies company 362 St Joe will be *
 //?          as of 1/17/05 until Purva instructs us to put this part
 //?          back into the system.
 //?9/23/05 SLM FOR St Joe Un *
 //?2/08/06 SLM * out will no longer need to update both companies
 //?              Update only the company that is being changed.
 //?6/18/08 SAZ Add function to updte the updte date in Comp Cust Ext.
 EXECUTE FUNCTION(CHG Co/Cust Trf Info   CO) TYPE(CHGOBJ) FILE(CAEOREP)          AC1447379;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 PARAMETER(PAR.Mileage_To_Customer);
 {
  //?USER: Processing after Data read

  //?Save the Abs Freight prior and then compare for a change
  //?after the update occurs.
  // LCL.Usr Abs Freight Rate = DB1.Absorbed Freight Rate
  LCL.Usr_Abs_Freight_Rate = DB1.Absorbed_Freight_Rate_CWT;

  //?USER: Processing after Data update

  //?** Sales Route Code was added as an incoming parm
  EXECUTE FUNCTION(Rtv Chg Abs Frt Rt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1623337;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Shipping Method is Prepaid
   IF DB1.Shipping_Method = 'PR'/'PT';

   EXECUTE FUNCTION(CHG Abs. Freight Rate  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1461689;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   ENDIF;

  }

  //?** Build email message if absorbed freight rate changes 2/20/06 LJB
  //?** Compare original (sys val num) frt to changed (abs frt rt)
  CASE;

  // IF PAR.Absorbed Freight Rate CWT NE LCL.Usr Abs Freight Rate
  IF PAR.Absorbed_Freight_Rate_CWT <> LCL.Usr_Abs_Freight_Rate;

  //?** Build subject and message strings for the ESNDMAIL command
  DO;

  //?** Retrieve the salesperson's email address
  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(WRK.Salesperson_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
  PARAMETER(WRK.Salesperson_Code);
  PARAMETER(WRK.Email_Address);
  PARAMETER(NLL.EDI_Status_3);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** Build the subject line
  // WRK.Text USR 7 = CVTVAR(PAR.Ship To Customer)
  WRK.Text_USR_7 = CVTVAR(PAR.Ship_To_Customer);

  // WRK.Subject Line USR = CONCAT(CON.Customer,WRK.Text USR 7,CON.1)
  WRK.Subject_Line_USR = 'Customer' + WRK.Text_USR_7 (1);

  // WRK.Subject Line USR = CONCAT(WRK.Subject Line USR,CON.Absorbed Freight changed,CON.1)
  WRK.Subject_Line_USR = WRK.Subject_Line_USR + 'Absorbed Freight changed' (1);

  //?** Build the message line
  // Retrieve message - 'Company &1 Customer &2 has been changed to &3 from &4.'
  LCL.Pager_Msg_256_USR = RTVMSG(USR3621);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(LCL.Usr_Abs_Freight_Rate);

  // Call program CLP Exe ESNDMAIL Cmd   UP.
  CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
  PARAMETER(WRK.Return_Code_Usr);
  PARAMETER(WRK.Email_Address);
  PARAMETER(WRK.Subject_Line_USR);
  PARAMETER(LCL.Pager_Msg_256_USR);

  ENDDO;

  ENDIF;

 }

 EXECUTE FUNCTION(Val Comp/Cust         RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1885784;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Crt Comp/Cust rcd     CR) TYPE(CRTOBJ) FILE(PDNIREP)           AC1885792;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*Job_date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg ABS Frt Rte Date  CH) TYPE(CHGOBJ) FILE(PDNIREP)           AC1885714;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(JOB.*Job_date);
 ENDIF;

}


//?USER: Exit program processing

RETURN;

QUIT;

