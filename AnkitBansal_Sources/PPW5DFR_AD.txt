// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPW5DFR
// ?Date: 14.08.2025 Time: 03:42:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log
DO;

//?LJB 11/20/2012 P002045    Rename this program, it was no longer being
//?   used. Use now to update the TPM Location Code in Customer file
//?   Removed F8 toggle. Added 2=Display TPM Location. Added TPM Location
//?   on the screen, if entered, validate. If entered but not in
//?   TPM Location Master then pop up the data entery screen. Actually,
//?   this should not happen. TPM Master will be uploaded from Logility
//?   every 10 minutes or so.
//?RMC 08/19/2011 E01654 remove move par to db1 in chg obj for comp cust ext
//?JRB 05/29/07 Changed to not use hard coded company numbers
//?TCJ 08/31/2007 - Fixed F8, F10, F11 toggles. Values being checked
//?   are now loaded prior to toggle check
//?SAZ 05/22/08 Fixed Customer name sel, added sel to City, St and added
//?   Ship to flag and sel. Also added Sel to Abs Frt columns.
//?   Took mileage off.  Added F8 toggle.
ENDDO;

// LCL.USR Display field = CND.no
LCL.USR_Display_field = 'N';

SET CURSOR;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// Call program RTV System Value Alpha XF.
CALL PROGRAM(RTV System Value Alpha XF) ('PPJXXFR');
PARAMETER('LIVE W/TPM');
PARAMETER(WRK.System_Value_Alpha);

//?USER: Initialize subfile record from DBF record

CASE;

// IF DB1.Ship To Customer Flag is No Use as Ship to Cust
IF DB1.Ship_To_Customer_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.TPM Location Code = DB1.TPM Location Code (10)
RCD.TPM_Location_Code = DB1.Alpha_Search;

SET CURSOR;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Search on Customer name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Search if customer name is not blanks    E002733
CASE;

// IF CTL.USR Cust Name all caps is Entered
IF CTL.USR_Cust_Name_all_caps <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Customer_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.USR_Cust_Name_all_caps);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Search on City
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Search if City is not blanks
CASE;

// IF CTL.USR City Caps only is Entered
IF CTL.USR_City_Caps_only <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.USR_City_Caps_only);
PARAMETER(20);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?* F4=Select Ship To Customer
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// Call program Zzz Search by Name 2   SR.
CALL PROGRAM(Zzz Search by Name 2   SR) ('PMQXSRR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);

ENDIF;

//?* reload if City positioner in clt is entered         E002733
CASE;

// IF CTL.USR City Caps only EQ WRK.USR City Caps only
IF CTL.USR_City_Caps_only = WRK.USR_City_Caps_only;

//?* reload if City positioner in clt is entered         E002733
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR City Caps only = CTL.USR City Caps only
WRK.USR_City_Caps_only = CTL.USR_City_Caps_only;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?* reload if Name positioner in clt is entered         E002733
CASE;

// IF CTL.USR Cust Name all caps EQ WRK.USR Cust Name all caps
IF CTL.USR_Cust_Name_all_caps = WRK.USR_Cust_Name_all_caps;

//?* reload if Name positioner in clt is entered         E002733
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Cust Name all caps = CTL.USR Cust Name all caps
WRK.USR_Cust_Name_all_caps = CTL.USR_Cust_Name_all_caps;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

SET CURSOR;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?** F22=Print TPM Loc; F11 = TPM Locations
CASE;

// IF CTL.*CMD key is *Print 22
IF CTL.*CMD_key = '22';

// PAR.PRT Description = CON.TPM Location Master Rpt
PAR.PRT_Description = 'TPM Location Master Rpt';

// Call program SBM TPM Loc Master-Sbm CL.
CALL PROGRAM(SBM TPM Loc Master-Sbm CL) ('PBFTUPC');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PBFSPFR');
PARAMETER('OMS');
PARAMETER(1);
PARAMETER('CUSTOMER');

//?** F22=Print TPM Loc; F11 = TPM Locations
// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program DSP TPM Location Mstr  DF.
CALL PROGRAM(DSP TPM Location Mstr  DF) ('PBFMDFR');
PARAMETER('CUSTOMER');
PARAMETER(*BLANK);
PARAMETER(WRK.System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Subfile Selections:
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP TPM Loc Mstr-CUST  DR.
CALL PROGRAM(DSP TPM Loc Mstr-CUST  DR) ('PBFQD1R');
PARAMETER('CUSTOMER');
PARAMETER(RCD.Alpha_Search);
PARAMETER(RCD.Ship_To_Customer);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Selections:
// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?Location code cannot be blank to edit this line
CASE;

// IF RCD.TPM Location Code is NOT ENTERED
IF RCD.TPM_Location_Code = *BLANK;

// Send error message - 'Field cannot be blank'
ERROR(USR3741);
MSGPARM(RCD.TPM_Location_Code);

//?Location code cannot be blank to edit this line
// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT TPM Loc Mstr-CUST  ER.
CALL PROGRAM(EDT TPM Loc Mstr-CUST  ER) ('PBFJE1R');
PARAMETER('CUSTOMER');
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.City);
PARAMETER(RCD.County_Code);
PARAMETER(RCD.Zip_Postal_Code);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(LCL.Credit_Contact_Name);
PARAMETER(RCD.Telephone_Number_FF);
PARAMETER(LCL.Fax_Invoice_Fax_Number);
PARAMETER(LCL.Email_Address);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Ship_To_Customer);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

