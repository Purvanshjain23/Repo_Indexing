// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDY6XFR
// ?Date: 14.08.2025 Time: 03:30:40
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Prc Start Physical Cyc RT) TYPE(RTVOBJ) FILE(PDKACPP)          AC1361099;
{
 //?USER: Initialize routine

 //?DLY029R 05/23/07 JRB Get default co num replacing hard coded co num
 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('OMS');
 PARAMETER(PAR.Company_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.System_Value_Alpha);
 PARAMETER(NLL.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Process Data record

 //?Set first time flag
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.AS Warehouse ID Code = DB1.AS Warehouse ID Code
 PAR.AS_Warehouse_ID_Code = DB1.AS_Warehouse_ID_Code;

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 ENDIF;

 //?Create cycle on warehouse change
 CASE;

 // IF PAR.AS Warehouse ID Code NE DB1.AS Warehouse ID Code
 IF PAR.AS_Warehouse_ID_Code <> DB1.AS_Warehouse_ID_Code;

 EXECUTE FUNCTION(Val Accu-Sort Whse     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1405160;
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Trans Contol AS400/Plant is Plant
  IF DB1.Trans_Contol_AS400_Plant = 'P';

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

 }

 //?If warehouse is valid create physical
 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(Val Co/Whse/Code/Date  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1349236;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?If record does not exists create else change sts to open
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Crt Physical Count     CR) TYPE(CRTOBJ) FILE(OMHCCPP)          AC1217193;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?If record does not exists create else change sts to open
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Cncl Old Physical  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1418232;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 PARAMETER('O');
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Physical Start Date NE PAR.Physical Start Date
  IF DB1.Physical_Start_Date <> PAR.Physical_Start_Date;

  EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Physical_Start_Date);
  PARAMETER(DB1.Cycle_Count_Code);
  PARAMETER('C');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 //? Update all Item Balance Detail records with Physical count date
 //? and save start qty on hand
 EXECUTE FUNCTION(Upd Physical Start Dt  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER('WP');
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Process Data record

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  EXECUTE FUNCTION(Upd Phys. Start Dt/Qty RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1152144;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.USR_From_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Phys. Start Qty.   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1152145;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER('P');
   PARAMETER(DB1.Quantity_on_Hand_Weight);
   PARAMETER(DB1.Quantity_on_Hand_UOM1);
   PARAMETER(DB1.Quantity_on_Hand_UOM2);
   PARAMETER(DB1.Quantity_on_Hand_UOM3);
   PARAMETER(PAR.USR_From_Date);
   {
    //?USER: Processing before Data update

    // DB1.Physical Count Weight = CON.*ZERO
    DB1.Physical_Count_Weight = *ZERO;

    // DB1.Physical Count Qty - U/M1 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM1 = *ZERO;

    // DB1.Physical Count Qty - U/M2 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM2 = *ZERO;

    // DB1.Physical Count Qty - U/M3 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM3 = *ZERO;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 ENDIF;

 // PAR.AS Warehouse ID Code = DB1.AS Warehouse ID Code
 PAR.AS_Warehouse_ID_Code = DB1.AS_Warehouse_ID_Code;

 ENDIF;

 //?USER: Exit processing

 //?Process last record
 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?If warehouse is valid create physical
 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(Val Co/Whse/Code/Date  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1349236;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?If record does not exists create else change sts to open
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Crt Physical Count     CR) TYPE(CRTOBJ) FILE(OMHCCPP)          AC1217193;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?If record does not exists create else change sts to open
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 PARAMETER('O');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Cncl Old Physical  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1418232;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER('WP');
 PARAMETER('O');
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Physical Start Date NE PAR.Physical Start Date
  IF DB1.Physical_Start_Date <> PAR.Physical_Start_Date;

  EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Physical_Start_Date);
  PARAMETER(DB1.Cycle_Count_Code);
  PARAMETER('C');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 //? Update all Item Balance Detail records with Physical count date
 //? and save start qty on hand
 EXECUTE FUNCTION(Upd Physical Start Dt  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AS_Warehouse_ID_Code);
 PARAMETER('WP');
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Process Data record

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  EXECUTE FUNCTION(Upd Phys. Start Dt/Qty RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1152144;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.USR_From_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Phys. Start Qty.   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1152145;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER('P');
   PARAMETER(DB1.Quantity_on_Hand_Weight);
   PARAMETER(DB1.Quantity_on_Hand_UOM1);
   PARAMETER(DB1.Quantity_on_Hand_UOM2);
   PARAMETER(DB1.Quantity_on_Hand_UOM3);
   PARAMETER(PAR.USR_From_Date);
   {
    //?USER: Processing before Data update

    // DB1.Physical Count Weight = CON.*ZERO
    DB1.Physical_Count_Weight = *ZERO;

    // DB1.Physical Count Qty - U/M1 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM1 = *ZERO;

    // DB1.Physical Count Qty - U/M2 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM2 = *ZERO;

    // DB1.Physical Count Qty - U/M3 = CON.*ZERO
    DB1.Physical_Count_Qty_UOM3 = *ZERO;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 ENDIF;

}


