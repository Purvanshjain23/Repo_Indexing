// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPYJPVR
// ?Date: 14.08.2025 Time: 03:42:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?03/27/17 DN R9700-Commented out. Set Company Number.
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

//?03/27/17 DN R9700-Commented out & Set Company from User Profile.
// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?03/27/17 DN R9700-Commented out RTV Revenue Dates     UP & moved below.
//?03/27/17 DN R9700-Validate Company & Set From/Thru Ship Date.
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(DTL.Company_Number);
PARAMETER('ICPRGROUP');
PARAMETER(LCL.Description);
PARAMETER(LCL.Inter_Company_Group_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Inter Company Grp Dsc USR = CONCAT(LCL.Inter Company Group USR,LCL.Description,CON.1)
DTL.Inter_Company_Grp_Dsc_USR = LCL.Inter_Company_Group_USR + LCL.Description (1);

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Inter Company Grp Dsc USR = CON.*BLANK
DTL.Inter_Company_Grp_Dsc_USR = *BLANK;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number);

QUIT;

ENDIF;

// Call program Vry Fees & Payments PrcXF.
CALL PROGRAM(Vry Fees & Payments PrcXF) ('PMHPXFR');
PARAMETER(DTL.Company_Number);
PARAMETER('FEEPAYPROC');
PARAMETER(LCL.Fees_Payments_Prc_Usr);

CASE;

// IF LCL.Fees & Payments Prc Usr is *No/Blank
IF LCL.Fees_Payments_Prc_Usr = *BLANK/'N';

// OR LCL.Fees & Payments Prc Usr is Inter-Company
OR LCL.Fees_Payments_Prc_Usr = 'I';

//?Company not live with FEEPAYPROC or assigned as 'I' then get
//?prior week Sun/Sat dates.
EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
PARAMETER(DTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(DTL.To_Date_USR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Out = DB1.Post to G/L Date
 PAR.Date_Out = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.To_Date_USR);
PARAMETER(DTL.From_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);

ENDIF;

ENDIF;

//?USER: Validate fields

//?03/27/17 DN R9700-F4=Select Plant Company.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Company Number
AND PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

ENDIF;

//?03/27/17 DN R9700-Validate Company & Set From/Thru Ship Date.
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(DTL.Company_Number);
PARAMETER('ICPRGROUP');
PARAMETER(LCL.Description);
PARAMETER(LCL.Inter_Company_Group_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Inter Company Grp Dsc USR = CONCAT(LCL.Inter Company Group USR,LCL.Description,CON.1)
DTL.Inter_Company_Grp_Dsc_USR = LCL.Inter_Company_Group_USR + LCL.Description (1);

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Inter Company Grp Dsc USR = CON.*BLANK
DTL.Inter_Company_Grp_Dsc_USR = *BLANK;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number);

QUIT;

ENDIF;

// Call program Vry Fees & Payments PrcXF.
CALL PROGRAM(Vry Fees & Payments PrcXF) ('PMHPXFR');
PARAMETER(DTL.Company_Number);
PARAMETER('FEEPAYPROC');
PARAMETER(LCL.Fees_Payments_Prc_Usr);

CASE;

// IF LCL.Fees & Payments Prc Usr is *No/Blank
IF LCL.Fees_Payments_Prc_Usr = *BLANK/'N';

// OR LCL.Fees & Payments Prc Usr is Inter-Company
OR LCL.Fees_Payments_Prc_Usr = 'I';

//?Company not live with FEEPAYPROC or assigned as 'I' then get
//?prior week Sun/Sat dates.
EXECUTE FUNCTION(Rtv Prior Saturday    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1618543;
PARAMETER(DTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(DTL.To_Date_USR);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Out = DB1.Post to G/L Date
 PAR.Date_Out = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.To_Date_USR);
PARAMETER(DTL.From_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Revenue Dates     UP.
CALL PROGRAM(RTV Revenue Dates     UP) ('TF817');
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);

ENDIF;

ENDIF;

//?USER: User defined action

// PAR.PRT Description = CON.IC Transfer Price Update
PAR.PRT_Description = 'IC Transfer Price Update';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// PAR.PRT Number of Copies = CON.01
PAR.PRT_Number_of_Copies = 01;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Submit the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

// PAR.From Date Pass        USR = DTL.From Date             USR
PAR.From_Date_Pass_USR = DTL.From_Date_USR;

// PAR.Thru Date Pass        USR = DTL.To Date               USR
PAR.Thru_Date_Pass_USR = DTL.To_Date_USR;

// PAR.System Value Numeric = PAR.PRT Number of Copies * CON.1 *
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies * 1;

//?Submit the Error Report and the Transfer Price Update and Report
// WRK.Process Cust Types Usr = CND.Inter-Co Customer's
WRK.Process_Cust_Types_Usr = 'IC';

//?03/27/17 DN R9700-Added Inter Company Group Flag as Input Parm.
// Call program PRT IC ErrRpt & PrcUpd UP.
SBMJOB;
CALL PROGRAM(PRT IC ErrRpt & PrcUpd UP) ('PPYKUPC');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER(WRK.Process_Cust_Types_Usr);
PARAMETER('TRNSPRCUPD');
PARAMETER(LCL.Inter_Company_Group_USR);
SBMJOBOVR JOB(PRTINTERCO);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDDO;

ENDIF;

