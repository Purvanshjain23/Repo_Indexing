// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMKPDFR
// ?Date: 14.08.2025 Time: 03:43:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Code and Comments
DO;

//? 6/10/19 JBB E15106 - Remove all prompting from Purge screens
//?                      Remove + sign and F4=Prompt+ from screen.
//?                      Comment out F4 processing in action diagram.
//?E6218 JJH 08/01/16 - Change *SFLSEL to Field Exit = 'Blank'
//?** 01/29/2008 LJB FP1009 Post Install
//?** Purge From Library field added, and associated programming
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// WRK.USR Blank 10 = CON.*BLANK
WRK.USR_Blank_10 = *BLANK;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.PCG Code = CND.*Blanks
CTL.PCG_Code = *BLANK;

// CTL.PCG From Library = CND.*Blanks
CTL.PCG_From_Library = *BLANK;

// CTL.PCG Purge To Library = CND.*Blanks
CTL.PCG_Purge_To_Library = *BLANK;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?** Select Group Code
CASE;

// IF CTL.PCG Code is Not Blank
IF CTL.PCG_Code <> *BLANK;

CASE;

// IF DB1.PCG Code NE CTL.PCG Code
IF DB1.PCG_Code <> CTL.PCG_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select by Library
CASE;

// IF CTL.PCG Library NE WRK.USR Blank 10
IF CTL.PCG_From_Library <> WRK.USR_Blank_10;

CASE;

// IF DB1.PCG Library NE CTL.PCG Library
IF DB1.PCG_From_Library <> CTL.PCG_From_Library;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?** F6=Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program EDT Purge Ctl Group    E1.
CALL PROGRAM(EDT Purge Ctl Group    E1) ('PMKQE1R');
PARAMETER(CTL.PCG_Code);
PARAMETER(CTL.PCG_From_Library);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selection is *all
//?** F21=Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PRT Purge Control Info PF.
CALL PROGRAM(PRT Purge Control Info PF) ('PMRHPFR');

// Send information message - 'Report has been printed.'
MESSAGE(USR2100 *INFO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selection is from the CTL fields
//?** F22=Print List *sel from control fields
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Call program PRT Purge Ctl Info Sel PF.
CALL PROGRAM(PRT Purge Ctl Info Sel PF) ('PBBWPFR');
PARAMETER(CTL.PCG_Code);
PARAMETER(CTL.PCG_From_Library);

// Send information message - 'Report has been printed.'
MESSAGE(USR2100 *INFO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?** If Delete is requested, first see if records matching Group Code
//?** exist in the Purge Control Application or Purge Control File
//?** files. If yes to either, then set the Record Status to Inactive.
//?** If no to both then Delete.
//?** 4 = Delete if no PCA and no PCF, else set to inactive
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(RTV Val PCA Exists     RT) TYPE(RTVOBJ) FILE(PDLPREP)          AC1839588;
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?** If PCA record exists, set to inactive
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// RCD.Record Status = CND.Inactive
RCD.Record_Status = 'I';

// Send error message - 'Cannot Delete - Detail records exist. Set to Inactive.'
ERROR(USR3809);
MSGPARM(PGM.*Record_selected);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** If PCA record exists, set to inactive
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Val Purge Files    RT) TYPE(RTVOBJ) FILE(PDLQREP)          AC1839703;
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);
PARAMETER(*BLANK);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?** If no PCA or PCF record then delete the purge ctl group record
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(Delete Purge Control Grou) TYPE(DLTOBJ) FILE(PMBEREP)          AC1839411;
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);

// Send information message - 'Record Deleted'
MESSAGE(USR3810 *INFO);
MSGPARM(PGM.*Record_selected);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** If no PCA or PCF record then delete the purge ctl group record
// IF *OTHERWISE
IF *OTHERWISE;

//?** If PCF record exists, set to inactive
// RCD.Record Status = CND.Inactive
RCD.Record_Status = 'I';

// Send error message - 'Cannot Delete - Detail records exist. Set to Inactive.'
ERROR(USR3809);
MSGPARM(PGM.*Record_selected);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** 2=Edit PCF
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program EDT Purge Ctl Group    E1.
CALL PROGRAM(EDT Purge Ctl Group    E1) ('PMKQE1R');
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?** 7=Edit Application
CASE;

// IF RCD.*SFLSEL is *7
IF RCD.*SFLSEL = '7';

// Call program WW Purge Ctl Applic    DF.
CALL PROGRAM(WW Purge Ctl Applic    DF) ('PMK3DFR');
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);
PARAMETER(WRK.Purge_Application_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

