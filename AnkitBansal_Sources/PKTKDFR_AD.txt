// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTKDFR
// ?Date: 14.08.2025 Time: 02:52:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Name_Producer_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.Name_Producer_Loc_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.ET Error Sts is Balance
IF CTL.ET_Error_Sts = 'B';

// IF CTL.ET Error Sts is Error
IF CTL.ET_Error_Sts = 'E';

// CTL.RS Record Status = LCL.Blank USR
CTL.RS_Record_Status = LCL.Blank_USR;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Errs on EvTrn/Tatt RT) TYPE(RTVOBJ) FILE(PKBVCPP)          AB1182008;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(WRK.Error_Type_Found);
{
 //?USER: Processing if Data record not found

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 //?USER: Process Data record

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 QUIT;

}


CASE;

// IF WRK.Error Type Found is Critical Error
IF WRK.Error_Type_Found = 'Y';

// CTL.ET Error Sts = CND.Error
CTL.ET_Error_Sts = 'E';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.ET Error Sts = CND.Balance
CTL.ET_Error_Sts = 'B';

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

// RCD.Error Type 1 Usr = CND.No
RCD.Error_Type_1_Usr = 'N';

// RCD.Error Type 2 Usr = CND.No
RCD.Error_Type_2_Usr = 'N';

// RCD.Error Type 3 Usr = CND.No
RCD.Error_Type_3_Usr = 'N';

// RCD.Error Type 4 Usr = CND.No
RCD.Error_Type_4_Usr = 'N';

// RCD.Error Type 5 Usr = CND.No
RCD.Error_Type_5_Usr = 'N';

// RCD.Error Type 6 Usr = CND.No
RCD.Error_Type_6_Usr = 'N';

// RCD.Error Type 7 Usr = CND.No
RCD.Error_Type_7_Usr = 'N';

EXECUTE FUNCTION(RTV Check for Error   RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1111032;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');
PARAMETER(RCD.Error_Type_1_Usr);
PARAMETER(RCD.Error_Type_2_Usr);
PARAMETER(RCD.Error_Type_3_Usr);
PARAMETER(RCD.Error_Type_4_Usr);
PARAMETER(RCD.Error_Type_5_Usr);
PARAMETER(WRK.Error_Type_Found);
PARAMETER(RCD.Error_Type_6_Usr);
PARAMETER(RCD.Error_Type_7_Usr);
{
 //?USER: Initialize routine

 // PAR.Error Type 1 Usr = CND.No
 PAR.Error_Type_1_Usr = 'N';

 // PAR.Error Type 2 Usr = CND.No
 PAR.Error_Type_2_Usr = 'N';

 // PAR.Error Type 3 Usr = CND.No
 PAR.Error_Type_3_Usr = 'N';

 // PAR.Error Type 4 Usr = CND.No
 PAR.Error_Type_4_Usr = 'N';

 // PAR.Error Type 5 Usr = CND.No
 PAR.Error_Type_5_Usr = 'N';

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 // PAR.Error Type 6 Usr = CND.No
 PAR.Error_Type_6_Usr = 'N';

 // PAR.Error Type 7 Usr = CND.No
 PAR.Error_Type_7_Usr = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Eval Val Error    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1111051;
 PARAMETER(DB1.KV_Error_Code);
 PARAMETER(WRK.EV_Description);
 PARAMETER(WRK.EV_Minimum);
 PARAMETER(WRK.EV_Maximum);
 PARAMETER(WRK.EV_Type);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Minimum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Maximum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Type = *BLANK;

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for Type of Error to Send back Flag
 CASE;

 // IF WRK.EV Type is Carcass Weights
 IF WRK.EV_Type = 'C';

 // PAR.Error Type 1 Usr = CND.Critical Error
 PAR.Error_Type_1_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Rule for Head Killed
 IF WRK.EV_Type = 'P';

 // PAR.Error Type 5 Usr = CND.Critical Error
 PAR.Error_Type_5_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Lean
 IF WRK.EV_Type = 'L';

 // PAR.Error Type 2 Usr = CND.Critical Error
 PAR.Error_Type_2_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Yield
 IF WRK.EV_Type = 'Y';

 // OR DB1.KV Error Code is Yield Parameter Error
 OR DB1.KV_Error_Code = 'YLD';

 // PAR.Error Type 3 Usr = CND.Critical Error
 PAR.Error_Type_3_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Missing Transaction
 IF WRK.EV_Type = 'B';

 // PAR.Error Type 4 Usr = CND.Critical Error
 PAR.Error_Type_4_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Backfat
 IF WRK.EV_Type = 'F';

 // PAR.Error Type 6 Usr = CND.Critical Error
 PAR.Error_Type_6_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Loin Eye
 IF WRK.EV_Type = 'E';

 // PAR.Error Type 7 Usr = CND.Critical Error
 PAR.Error_Type_7_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 ENDIF;

}


CASE;

// IF RCD.ET Record Add/Del Sts is Add
IF RCD.ET_Record_Add_Del_Sts = 'A';

// AND RCD.ET Adjust/Add Type is None
AND RCD.ET_Adjust_Add_Type = *BLANK;

// RCD.ET Adjust/Add Type = CND.Add w/Average Carcass
RCD.ET_Adjust_Add_Type = 'AVG';

ENDIF;

//?CALC: Subfile control function fields

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(CTL.Name_Producer_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Name Producer Loc DRV) TYPE(DRVFLD)                            AB1110027;
PARAMETER(CTL.Name_Producer_Loc_DRV);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Name_Producer_Loc_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?E9815 JBB  3/30/17  Check if company excluded from subfile option.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('XCOPAYHIST');
PARAMETER(LCL.Exclude_Flag);

//?If Exclude Company from Payment History/Average flag <> No
CASE;

// IF LCL.Exclude Flag is Yes
IF LCL.Exclude_Flag = 'Y';

// Send error message - 'Company &1 is not allowed to Pay with Historical Average'
ERROR(PRK1420);
MSGPARM(PAR.BOH_Company_Number);

//?If Exclude Company from Payment History/Average flag <> No
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt Pay w/Hist Avgs   PV.
CALL PROGRAM(Pmt Pay w/Hist Avgs   PV) ('PKTNPVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(CTL.TH_Head_Accepted);
PARAMETER(CTL.TH_Adj_Actual_Yield);
PARAMETER(CTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(CTL.TH_Avg_Lean_EXC_ADD);
PARAMETER(CTL.TH_Head_Identified);
PARAMETER(CTL.TH_Percent_Identified);
PARAMETER(CTL.TH_Percent_Accepted);
PARAMETER(CTL.TH_PHA_Add_Type);
PARAMETER(CTL.TH_PHA_Average_Type);
PARAMETER(CTL.TH_PHA_Add_Reason);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);

ENDIF;

// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

// Call program Dsp Prcdr Histrcl Avg DF.
CALL PROGRAM(Dsp Prcdr Histrcl Avg DF) ('PKT0DFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is Display Error
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Error             DF.
CALL PROGRAM(Dsp Error             DF) ('PKEUDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

