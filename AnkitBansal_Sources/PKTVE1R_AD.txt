// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTVE1R
// ?Date: 14.08.2025 Time: 02:51:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?History log of changes
DO;

//?100496  CHANGES TO HPE046 REMOVE SHIP WEIGHT FROM BEING
//?        CHANGE OR VALIDATED.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

//?USER: Initialize detail screen (existing record)

// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.UOM_Desc_2_USR = RTVCND(DB1.TH_Resale_UOM);

// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.UOM_Desc_Usr = RTVCND(DB1.TH_Live_Purchase_UOM);

//?Save input fields to check for changes later
// *MO.VE             1183529*Bu = ilt. in functions
WRK.TH_Live_Purchase_UOM = DTL.TH_Live_Purchase_UOM;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.TH_Live_Purchase_Price = DTL.TH_Live_Purchase_Price;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.TH_Shipped_Weight = DTL.TH_Shipped_Weight;

//?USER: Validate detail screen fields

//?If Resale UOM or price entered, both must be entered
CASE;

// IF DTL.TH Resale UOM NE WRK.Blank USR
IF DTL.TH_Resale_UOM <> WRK.Blank_USR;

// OR DTL.TH Resale Price NE WRK.Zero USR
OR DTL.TH_Recalc_Live_Wgt_Yld <> WRK.Zero_USR;

CASE;

// IF DTL.TH Recalc Live Wgt Yld is EQ 0
IF DTL.TH_Recalc_Live_Wgt_Yld = 0;

// Send error message - 'Resale Price required if Resale UOM is entered.'
ERROR(PRK0460);

ENDIF;

CASE;

// IF DTL.TH Resale UOM EQ WRK.Blank USR
IF DTL.TH_Resale_UOM = WRK.Blank_USR;

// Send error message - 'Resale UOM is required if Resale Price is entered.'
ERROR(PRK0461);

ENDIF;

//?If Resale UOM or price entered, both must be entered
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.TH_Resale_Spread_Sts = *BLANK;

ENDIF;

//?If not paid already, Validate live price and UOM
CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

//?If not paid already, Validate live price and UOM
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate live price and live price UOM
CASE;

// IF DTL.TH Live Purchase Price is Not Zeros
IF DTL.TH_Live_Purchase_Price <> *ZERO;

// OR DTL.TH Live Purchase UOM NE WRK.Blank USR
OR DTL.TH_Live_Purchase_UOM <> WRK.Blank_USR;

CASE;

// IF DTL.TH Live Purchase Price is Zeros
IF DTL.TH_Live_Purchase_Price = *ZERO;

// Send error message - 'Live Price required if Live Price UOM is entered.'
ERROR(PRK0381);

ENDIF;

CASE;

// IF DTL.TH Live Purchase UOM EQ WRK.Blank USR
IF DTL.TH_Live_Purchase_UOM = WRK.Blank_USR;

// Send error message - 'Live Price UOM is required if Live Price is entered.'
ERROR(PRK0382);

ENDIF;

ENDIF;

ENDIF;

//?Shipped Weight Validation
CASE;

// IF DTL.TH Live Purchase UOM is Shipped Weight
IF DTL.TH_Live_Purchase_UOM = 'SW';

CASE;

// IF WRK.Held Over Records Y/N is Yes
IF WRK.Held_Over_Records_Y_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

//?hpe046 changes
//?per Alice 100496
//?Remove entry of shipped weight/and validation
//?this information will be entered in the Edt Buy Order Load
//?by the scale house.
ENDIF;

//?Shipped Weight Validation
// IF DTL.TH Shipped Weight GT WRK.Zero USR
IF DTL.TH_Shipped_Weight > WRK.Zero_USR;

//?hpe046 changes
//?per Alice 100496
//?Remove entry of shipped weight/and validation
//?this information will be entered in the Edt Buy Order Load
//?by the scale house.
ENDIF;

//?Changes in ship information to require reprint of scale ticket
CASE;

// IF DTL.TH Shipped Weight NE WRK.TH Shipped Weight
IF DTL.TH_Shipped_Weight <> WRK.TH_Shipped_Weight;

// OR DTL.TH Live Purchase UOM is Shipped Weight
OR DTL.TH_Live_Purchase_UOM = 'SW';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.@Print_Status = 'S';

//?Changes in ship information to require reprint of scale ticket
// IF DTL.TH Live Purchase UOM NE WRK.TH Live Purchase UOM
IF DTL.TH_Live_Purchase_UOM <> WRK.TH_Live_Purchase_UOM;

// AND DTL.TH Live Purchase UOM is Shipped Weight
AND DTL.TH_Live_Purchase_UOM = 'SW';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.@Print_Status = 'S';

ENDIF;

//?CALC: Detail screen function fields

// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.UOM_Desc_2_USR = RTVCND(DTL.TH_Resale_UOM);

// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.UOM_Desc_Usr = RTVCND(DTL.TH_Live_Purchase_UOM);

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Ship_Wgt_Allow_Ent_Usr = 'Y';

//?Test of allow ship weight to be input/output
CASE;

// IF DTL.TH Payment Sts is Paid Anything
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

//?Test of allow ship weight to be input/output
// IF DTL.TH Held Over is greater than 0
IF DTL.TH_Held_Over > *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

//?Test of allow ship weight to be input/output
// IF DTL.TH Held Over Record is Yes
IF DTL.TH_Held_Over_Record = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Held_Over_Records_Y_N = 'Y';

ENDIF;

//?Test of held over quanity
CASE;

// IF DTL.TH Held Over is greater than 0
IF DTL.TH_Held_Over > *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Held_Over_Records_Y_N = 'Y';

ENDIF;

//?USER: Validate detail screen relations

CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TH Live Purchase UOM is Live Payment
IF DTL.TH_Live_Purchase_UOM = 'FL'/'LW'/'NH'/'NL'/'SW'/'LX'/'SX';

CASE;

// IF DTL.TH Source Type is External
IF DTL.TH_Source_Type = 'E';

// *MO.VE             1183529*Bu = ilt. in functions
DTL.TH_Payment_Sts = 'SL';

// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.TH_Payment_Sts = 'IL';

ENDIF;

ENDIF;

//?If UOM or price changes, set Status to Recalulate net
CASE;

// IF DTL.TH Live Purchase UOM NE WRK.TH Live Purchase UOM
IF DTL.TH_Live_Purchase_UOM <> WRK.TH_Live_Purchase_UOM;

// OR DTL.TH Live Purchase Price NE WRK.TH Live Purchase Price
OR DTL.TH_Live_Purchase_Price <> WRK.TH_Live_Purchase_Price;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.TH_Calc_Net_Sts = 'R';

// *MO.VE             1183529*Bu = ilt. in functions
DTL.TH_Payment_Type = WRK.Blank_USR;

ENDIF;

ENDIF;

//?USER: Change DBF record

// Call program Zzz/Chg Ttt's Rsl,Lv   XF.
CALL PROGRAM(Zzz/Chg Ttt's Rsl,Lv   XF) ('PKTWXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Live_Gross_Amt);
PARAMETER(DTL.TH_LIve_Net_Amt);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Adj_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Adj_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Market_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Payment_Gross);
PARAMETER(DTL.Th_Payment_Net_Amt);
PARAMETER(DTL.TH_AP_Voucher_Document#);
PARAMETER(DTL.TH_Freight_Amount);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Calc_Net_Sts);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Head_Excluded);
PARAMETER(DTL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(DTL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(DTL.TH_CM_Gross_Live_CWT);
PARAMETER(DTL.TH_CM_Gross_Carc_CWT);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Scale_Ticket_Sts);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.TH_Posted_to_HPS_Flag);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.TH_Shift_Held_Over);
PARAMETER(DTL.TH_Shift_Held_Over_Head);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.THP_Process_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);

