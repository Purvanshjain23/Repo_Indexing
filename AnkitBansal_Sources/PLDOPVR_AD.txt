// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLDOPVR
// ?Date: 14.08.2025 Time: 02:53:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?----------------------------------------------------------------
//?11/08/2016 Brad Baden E7823 - Allow for Multi-Company users
//?- If User Application record allows for Multi-Company processing,
//?  then make Company field input capable and allow valid companies.
//?- If User Application record does not allow for Multi-Company
//?  processing, then protect the Company field and load user company.
//?----------------------------------------------------------------
//?E2423 Mtech Live or Not Live
//?Removed any reference to the Transportation office or load type
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?11/08/2016 Brad Baden E7823 - Allow for Multi-Company users
//?Determine whether or not to protect Company field
CASE;

// IF PAR.Oms Allow Multi-Company is Yes
IF PAR.Oms_Allow_Multi_Company = 'Y';

// LCL.Display Output Only Usr = CND.No
LCL.Display_Output_Only_Usr = 'N';

//?Determine whether or not to protect Company field
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Output Only Usr = CND.Yes
LCL.Display_Output_Only_Usr = 'Y';

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.Company Number USR = WRK.CC Company Number
DTL.Company_Number_USR = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// DTL.Exception Status USR = CND.No
DTL.Exception_Status_USR = 'N';

// DTL.Tracking Report Type USR = CND.Tracking Times
DTL.Tracking_Report_Type_USR = 'T';

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.Company_Number_USR);
PARAMETER(DTL.Oms_Name);
PARAMETER(LCL.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

ENDIF;

// DTL.Condition Name 2 USR = Condition name of DTL.Exception Status USR
DTL.Condition_Name_2_USR = RTVCND(DTL.Exception_Status_USR);

// DTL.Condition Name 3 USR = Condition name of DTL.Tracking Report Type USR
DTL.Condition_Name_3_USR = RTVCND(DTL.Tracking_Report_Type_USR);

// DTL.HPS Trans Ofc Desc USR = Condition name of DTL.DT Transportation Office
DTL.HPS_Trans_Ofc_Desc_USR = RTVCND(DTL.DT_Transportation_Office);

//?USER: Validate fields

//?Val Company
CASE;

// IF DTL.Company Number USR is *ZERO
IF DTL.Company_Number_USR = *ZERO;

// Send error message - 'Value Required.'
ERROR(PRK1406);
MSGPARM(DTL.Company_Number_USR);

//?Val Company
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.Company_Number_USR);
PARAMETER(DTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


ENDIF;

//?Prompt Producer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PD Producer Code
AND PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

//?Val Producer
CASE;

// IF DTL.PD Producer Code is Entered
IF DTL.PD_Producer_Code <> *BLANK;

EXECUTE FUNCTION(Val Prod Existance    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1176016;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Producer not found.'
ERROR(PRK0009);

ENDIF;

ENDIF;

//?E2423 SLM 02252013 - Transportation office is now a condition
//?regardless of mtech live or not live
//?Prompt Trucker
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.DT Trucker Code HPS
AND PGM.*Cursor_field = DTL.DT_Trucker_Code_HPS;

// Call program Sel HPS Trucker       UP.
CALL PROGRAM(Sel HPS Trucker       UP) ('HP538');
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(DTL.Condition_Name_USR);
PARAMETER(NLL.MTech_Trucker_Ref);

ENDIF;

//?VAL:  Trucker Code
CASE;

// IF DTL.DT Trucker Code HPS is Entered
IF DTL.DT_Trucker_Code_HPS <> *BLANK;

// Call program Val HPS Trucker       UP.
CALL PROGRAM(Val HPS Trucker       UP) ('HP275');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(DTL.Condition_Name_USR);
PARAMETER(LCL.HPS_Trucker_Type);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(NLL.MTech_Trucker_Ref);

CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Trucker &1 not found.'
ERROR(PRK1064);
MSGPARM(DTL.DT_Trucker_Code_HPS);

ENDIF;

ENDIF;

//?Prompt Driver
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.DT Driver
AND PGM.*Cursor_field = DTL.DT_Driver;

// Call program Sel HPS Driver        UP.
CALL PROGRAM(Sel HPS Driver        UP) ('HP574');
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.DT_Driver);
PARAMETER(DTL.Condition_Name_1_USR);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(WRK.UnUsed_Fld_5_Usr);
PARAMETER(WRK.UnUsed_Txt_25_Usr);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

ENDIF;

//?VAL:  Driver
CASE;

// IF DTL.DT Driver is Entered
IF DTL.DT_Driver <> *BLANK;

// Call program Val HPS Driver        UP.
CALL PROGRAM(Val HPS Driver        UP) ('HP272');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.DT_Driver);
PARAMETER(NLL.HPS_Driver_Name);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(NLL.DT_Truck_ID);
PARAMETER(NLL.DT_Trailer_ID);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(NLL.DT_Trucker_Name_Usr_25);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Driver &1 not found.'
ERROR(PRK1066);
MSGPARM(DTL.DT_Driver);

ENDIF;

ENDIF;

// DTL.HPS Trans Ofc Desc USR = Condition name of DTL.DT Transportation Office
DTL.HPS_Trans_Ofc_Desc_USR = RTVCND(DTL.DT_Transportation_Office);

//?CALC: Screen function fields

// DTL.Int/External Desc Usr = Condition name of DTL.SR Type
DTL.Int_External_Desc_Usr = RTVCND(DTL.SR_Type);

// DTL.Report Type Desc Usr = Condition name of DTL.Receiving Rpt Type    USR
DTL.Report_Type_Desc_Usr = RTVCND(DTL.Receiving_Rpt_Type_USR);

// DTL.Condition Name 2 USR = Condition name of DTL.Exception Status USR
DTL.Condition_Name_2_USR = RTVCND(DTL.Exception_Status_USR);

// DTL.Condition Name 3 USR = Condition name of DTL.Tracking Report Type USR
DTL.Condition_Name_3_USR = RTVCND(DTL.Tracking_Report_Type_USR);

// DTL.HPS Trans Ofc Desc USR = Condition name of DTL.DT Transportation Office
DTL.HPS_Trans_Ofc_Desc_USR = RTVCND(DTL.DT_Transportation_Office);

//?USER: User defined action

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Print Tracking Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');
PARAMETER(1);

CASE;

// IF DTL.Tracking Report Type USR is Tracking Exceptions
IF DTL.Tracking_Report_Type_USR = 'E';

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.Company Number USR)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.Company_Number_USR);

// WRK.Date Alpha USR = CVTVAR(DTL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Date_To_USR);

// DTL.TH Hog Class Type = WRK.Blank USR
DTL.TH_Hog_Class_Type = WRK.Blank_USR;

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.Farm Site USR)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.Farm_Site_USR);

// Execute command - 'SBM Prt DT Exceptions Report'
EXECUTE COMMAND(PRK1093);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(DTL.SR_Type);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.PD_Producer_Code);

// DTL.Description 30 USR = WRK.Blank USR
DTL.Description_30_USR = WRK.Blank_USR;

// DTL.Int/External Desc Usr = WRK.Blank USR
DTL.Int_External_Desc_Usr = WRK.Blank_USR;

ENDIF;

// IF DTL.Tracking Report Type USR is Tracking Times
IF DTL.Tracking_Report_Type_USR = 'T';

// OR DTL.Tracking Report Type USR is Tracking Summary
OR DTL.Tracking_Report_Type_USR = 'S';

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(PRK0812);
PARAMETER('DLVTRKTMS');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*NO);

// Call program PRT Tracking Times    CL.
SBMJOB;
CALL PROGRAM(PRT Tracking Times    CL) ('PLD9UPC');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(DTL.Company_Number_USR);
PARAMETER(DTL.DT_Trucker_Code_HPS);
PARAMETER(DTL.DT_Driver);
PARAMETER(DTL.DT_Transportation_Office);
PARAMETER(DTL.SR_Type);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.Tracking_Report_Type_USR);
PARAMETER(DTL.Exception_Status_USR);
PARAMETER(DTL.Date_From_USR);
PARAMETER(DTL.Date_To_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);
SBMJOBOVR JOB(DLVTRKTMS);
SBMJOBOVR LOG(4;
SBMJOBOVR 99;
SBMJOBOVR *SECLVL);
SBMJOBOVR LOGCLPGM(*YES);
SBMJOBEND;

ENDIF;

ENDIF;

ENDIF;

