// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBLFXFR
// ?Date: 14.08.2025 Time: 03:48:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.Accounting Year = PAR.Accounting Year - CON.1
LCL.Accounting_Year = PAR.Accounting_Year - 1;

EXECUTE FUNCTION(Rtv Acct Qtr B/E Dte  RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC2101740;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Accounting_Year);
PARAMETER(PAR.Accounting_Quarter);
PARAMETER(PAR.Period_Beginning_Date);
PARAMETER(PAR.Period_Ending_Date);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 // LCL.Day NBR USR = CON.*ZERO
 LCL.Day_NBR_USR = *ZERO;

 // LCL.Accounting Quarter = CON.*ZERO
 LCL.Accounting_Quarter = *ZERO;

 //?USER: Process Data record

 //?FIRST TIME
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.Count USR = CON.1
 LCL.Count_USR = 1;

 // LCL.Day NBR USR = CON.1
 LCL.Day_NBR_USR = 1;

 // LCL.HPS Calendar Week = DB1.HPS Calendar Week
 LCL.HPS_Calendar_Week = DB1.HPS_Calendar_Week;

 // PAR.Period Beginning Date = DB1.Post to G/L Date
 PAR.Period_Beginning_Date = DB1.Post_to_G_L_Date;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?CHG: HPS Calendar Week
 CASE;

 // IF DB1.HPS Calendar Week NE LCL.HPS Calendar Week
 IF DB1.HPS_Calendar_Week <> LCL.HPS_Calendar_Week;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 // LCL.Day NBR USR = CON.1
 LCL.Day_NBR_USR = 1;

 // LCL.HPS Calendar Week = DB1.HPS Calendar Week
 LCL.HPS_Calendar_Week = DB1.HPS_Calendar_Week;

 CASE;

 // IF LCL.Count USR is One
 IF LCL.Count_USR = 1;

 // PAR.Period Beginning Date = DB1.Post to G/L Date
 PAR.Period_Beginning_Date = DB1.Post_to_G_L_Date;

 ENDIF;

 //?CHG: HPS Calendar Week
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Day NBR USR = LCL.Day NBR USR + CON.1
 LCL.Day_NBR_USR = LCL.Day_NBR_USR + 1;

 ENDIF;

 //?Last Day of the 13th Week
 CASE;

 // IF LCL.Count USR is Thirteen
 IF LCL.Count_USR = 13;

 // AND LCL.Day NBR USR is Seven
 AND LCL.Day_NBR_USR = 7;

 // LCL.Accounting Quarter = LCL.Accounting Quarter + CON.1
 LCL.Accounting_Quarter = LCL.Accounting_Quarter + 1;

 CASE;

 // IF LCL.Accounting Quarter EQ PAR.Accounting Quarter
 IF LCL.Accounting_Quarter = PAR.Accounting_Quarter;

 // PAR.Period Ending Date = DB1.Post to G/L Date
 PAR.Period_Ending_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 ENDIF;

 //?USER: Exit processing

 // PAR.Period Ending Date = DB1.Post to G/L Date
 PAR.Period_Ending_Date = DB1.Post_to_G_L_Date;

}


// PAR.Sales Volume Prior Yr Act = CON.*ZERO
PAR.Prior_Year_Actual_Volume = *ZERO;

EXECUTE FUNCTION(Rtv Mkt SlsVol b/FcsGp RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC2080388;
PARAMETER(PAR.Market_Code);
PARAMETER(PAR.Product_Type_Code);
PARAMETER(PAR.Period_Ending_Date);
PARAMETER(PAR.Prior_Year_Actual_Volume);
PARAMETER(PAR.Period_Beginning_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Mkt SlsVol b/FcsGp RT) TYPE(RTVOBJ) FILE(PME3CPP)          AC2080700;
 PARAMETER(PAR.Product_Type_Code);
 PARAMETER(PAR.Customer_Market_Code);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Prior_Year_Actual_Volume);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Period_Beginning_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Item Market Code  RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2101753;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Item_Market_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Item Market Code is Entered
  IF LCL.Item_Market_Code <> *BLANK;

  // AND LCL.Item Market Code NE PAR.Market Code
  AND LCL.Item_Market_Code <> PAR.Market_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Mkt SlsVol b/FcsGp RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC2080402;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Period_Ending_Date);
  PARAMETER(PAR.Period_Beginning_Date);
  PARAMETER(PAR.Prior_Year_Actual_Volume);
  {
   //?USER: Process Data record

   // LCL.*Record selected = CND.*YES
   LCL.*Record_selected = 'Y';

   //?QUIT: Actual Ship Date < Period Begin Date
   CASE;

   // IF DB1.Actual Shipped Date LT PAR.Period Beginning Date
   IF DB1.Actual_Shipped_Date < PAR.Period_Beginning_Date;

   QUIT;

   ENDIF;

   //?OMT: Employee and Inter-Plant Sales
   CASE;

   // IF DB1.Type Code is Inter-Plant Transfer
   IF DB1.Type_Code = 'IP';

   // OR DB1.Type Code is Employee Sale
   OR DB1.Type_Code = 'EM';

   // LCL.*Record selected = CND.*NO
   LCL.*Record_selected = 'N';

   ENDIF;

   //?Process Record
   CASE;

   // IF LCL.*Record selected is *YES
   IF LCL.*Record_selected = 'Y';

   EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(LCL.Billing_Activity_Type);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Billing Activity Type is Invoice or Debit Memo
   IF LCL.Billing_Activity_Type = '3'/'1';

   // PAR.Sales Volume Prior Yr Act = PAR.Sales Volume Prior Yr Act + DB1.Weight Billed
   PAR.Prior_Year_Actual_Volume = PAR.Prior_Year_Actual_Volume + DB1.Weight_Billed;

   // IF LCL.Billing Activity Type is Credit Memo
   IF LCL.Billing_Activity_Type = '2';

   CASE;

   // IF DB1.Affect Sales Pnds Status is yes
   IF DB1.Affect_Sales_Pnds_Status = 'Y';

   // LCL.Weight Billed = DB1.Weight Billed * CON.-1 *Rounded
   LCL.Weight_Billed = DB1.Weight_Billed * -1 'H';

   ENDIF;

   // PAR.Sales Volume Prior Yr Act = PAR.Sales Volume Prior Yr Act + LCL.Weight Billed
   PAR.Prior_Year_Actual_Volume = PAR.Prior_Year_Actual_Volume + LCL.Weight_Billed;

   ENDIF;

   ENDIF;

  }

  ENDIF;

 }

}


