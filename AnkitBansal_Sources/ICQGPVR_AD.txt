// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICQGPVR
// ?Date: 14.08.2025 Time: 03:26:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

//?USER: Load screen

// DTL.Dtl/Sum/Ttl/Typ Sts   USR = CND.Summary
DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'S';

// DTL.Date Type = CND.Transaction Date
DTL.Date_Type_USR = 'T';

// DTL.USR From Time 4.0 = CON.*ZERO
DTL.USR_From_Time_4_0 = *ZERO;

// DTL.USR To Time 4.0 = CON.2359
DTL.USR_To_Time_4_0 = 2359;

// DTL.Company Number = PAR.Accounting Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.Warehouse Code PASS   USR = PAR.Warehouse Code
DTL.Warehouse_Code_PASS_USR = PAR.Warehouse_Code;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Dtl/Sum/Ttl/Typ Sts   USR
DTL.Condition_Desc_1_USR = RTVCND(DTL.Dtl_Sum_Ttl_Typ_Sts_USR);

// DTL.Condition Desc. 2  USR = Condition name of DTL.Date Type
DTL.Condition_Desc_2_USR = RTVCND(DTL.Date_Type_USR);

// DTL.Availability Group Code = CON.ALL
DTL.Availability_Group_Code = 'ALL';

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(DTL.Availability_Group_Code);
PARAMETER(DTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?** L70124A LJB Add "Include Zero Quantities" to the screen and
//?**             default the initial value to "N"
// DTL.Yes/No Selection      USR = PAR.Status - Y or N
DTL.Yes_No_Selection_USR = PAR.Status_Y_or_N;

//?** E00160 LJB Default email format to Excel spreadsheet, allow change
//?** E00320 SLM Project  E00160 was using the above field but this func
//?was never generated, changes were made 05/08 but gen dates 02/07
//?This field is not used anywhere else--- decided to * this out
//?USER: Validate fields

//?Select Co/PA Grp/whse/item/type/group/class/reason codes/user
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

//?Allow multi-company must be yes
CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(WRK.Name);

//?Allow multi-company must be yes
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// IF PGM.*Cursor field <IS> DTL.Availability Group Code
IF PGM.*Cursor_field = DTL.Availability_Group_Code;

// Call program SEL Avail Group        SR.
CALL PROGRAM(SEL Avail Group        SR) ('PDDVSRR');
PARAMETER(DTL.Availability_Group_Code);

// IF PGM.*Cursor field <IS> DTL.Warehouse Code PASS   USR
IF PGM.*Cursor_field = DTL.Warehouse_Code_PASS_USR;

//?02/13/18 DN S12531-Change to Call PMCQSRR SELRCD.
// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.Company_Number_CDE);

// IF PGM.*Cursor field <IS> DTL.Item Code Number 7.0  USR
IF PGM.*Cursor_field = DTL.Item_Code_Number_7_0_USR;

CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

// Call program Sel Item              SR.
CALL PROGRAM(Sel Item              SR) ('CAOSSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Item_Code_Number_7_0_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel Item Number No Co. SR.
CALL PROGRAM(Sel Item Number No Co. SR) ('PDRJSRR');
PARAMETER(DTL.Item_Code_Number_7_0_USR);

ENDIF;

// IF PGM.*Cursor field <IS> DTL.Item Structure Type Code
IF PGM.*Cursor_field = DTL.Item_Structure_Type_Code;

// Call program SEL Item Type Active   SR.
CALL PROGRAM(SEL Item Type Active   SR) ('PDENSRR');
PARAMETER(DTL.Item_Structure_Type_Code);

// IF PGM.*Cursor field <IS> DTL.Item Structure Group Code
IF PGM.*Cursor_field = DTL.Item_Structure_Group_Code;

// Call program SEL Item Group Active  SR.
CALL PROGRAM(SEL Item Group Active  SR) ('PDEMSRR');
PARAMETER(DTL.Item_Structure_Group_Code);

// IF PGM.*Cursor field <IS> DTL.Item Structure Class Code
IF PGM.*Cursor_field = DTL.Item_Structure_Class_Code;

// Call program SEL Item Class Active  SR.
CALL PROGRAM(SEL Item Class Active  SR) ('PDELSRR');
PARAMETER(DTL.Item_Structure_Class_Code);

// IF PGM.*Cursor field <IS> DTL.Reason Code 1 PASS    USR
IF PGM.*Cursor_field = DTL.Reason_Code_1_PASS_USR;

// Call program SEL Active Reason Cd   SL.
CALL PROGRAM(SEL Active Reason Cd   SL) ('CAMWSRR');
PARAMETER(DTL.Reason_Code_1_PASS_USR);

// IF PGM.*Cursor field <IS> DTL.Reason Code 2 PASS    USR
IF PGM.*Cursor_field = DTL.Reason_Code_2_PASS_USR;

// Call program SEL Active Reason Cd   SL.
CALL PROGRAM(SEL Active Reason Cd   SL) ('CAMWSRR');
PARAMETER(DTL.Reason_Code_2_PASS_USR);

// IF PGM.*Cursor field <IS> DTL.Reason Code 3 PASS    USR
IF PGM.*Cursor_field = DTL.Reason_Code_3_PASS_USR;

// Call program SEL Active Reason Cd   SL.
CALL PROGRAM(SEL Active Reason Cd   SL) ('CAMWSRR');
PARAMETER(DTL.Reason_Code_3_PASS_USR);

// IF PGM.*Cursor field <IS> DTL.Reason Code 4 PASS    USR
IF PGM.*Cursor_field = DTL.Reason_Code_4_PASS_USR;

// Call program SEL Active Reason Cd   SL.
CALL PROGRAM(SEL Active Reason Cd   SL) ('CAMWSRR');
PARAMETER(DTL.Reason_Code_4_PASS_USR);

// IF PGM.*Cursor field <IS> DTL.USR User ID Selected
IF PGM.*Cursor_field = DTL.USR_User_ID_Selected;

// Call program SEL User Profile Contr SR.
CALL PROGRAM(SEL User Profile Contr SR) ('CAXPSRR');
PARAMETER(PAR.USR_User_ID_Selected);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

//?Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number &1 not found'
ERROR(USR2008);
MSGPARM(DTL.Company_Number_CDE);

ENDIF;

ENDIF;

//?Validate PA Group
CASE;

// IF DTL.Availability Group Code is NE Blank
IF DTL.Availability_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(DTL.Availability_Group_Code);
PARAMETER(DTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?** If F&W selected, email address with *XLS must be entered as well
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Availability Group not found.'
ERROR(USR2215);

ENDIF;

//?Validate PA Group
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Availability Group Code = CON.ALL
DTL.Availability_Group_Code = 'ALL';

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(DTL.Availability_Group_Code);
PARAMETER(DTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?Validate warehouse if entered
CASE;

// IF DTL.Warehouse Code PASS   USR is Warehouse Code not Blank
IF DTL.Warehouse_Code_PASS_USR <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_Code_PASS_USR);

ENDIF;

ENDIF;

//?Validate Company for Warehouse - 02/13/18 DN S12531
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

// AND DTL.Warehouse Code PASS   USR is Not Blanks
AND DTL.Warehouse_Code_PASS_USR <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE DTL.Company Number CDE
IF LCL.Accounting_Company <> DTL.Company_Number_CDE;

// LCL.Company Number = DTL.Company Number CDE
LCL.Company_Number = DTL.Company_Number_CDE;

ENDIF;

ENDIF;

//?Validate item if entered
CASE;

// IF DTL.Item Code Number 7.0  USR is Entered
IF DTL.Item_Code_Number_7_0_USR <> *ZERO;

CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Item desc/type     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1128573;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Item_Code_Number_7_0_USR);
PARAMETER(DTL.Item_Description);
PARAMETER(WRK.Production_Date_Control);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not found.'
ERROR(USR2009);
MSGPARM(DTL.Company_Number_CDE);
MSGPARM(DTL.Item_Code_Number_7_0_USR);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
PARAMETER(DTL.Item_Code_Number_7_0_USR);
PARAMETER(DTL.Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not found.'
ERROR(USR2009);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Item_Code_Number_7_0_USR);

ENDIF;

ENDIF;

ENDIF;

//?Validate item structure type if entered
CASE;

// IF DTL.Item Structure Type Code is Entered
IF DTL.Item_Structure_Type_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Structure Type not found.'
ERROR(USR1166);

ENDIF;

ENDIF;

//?Validate item structure group if entered
CASE;

// IF DTL.Item Structure Group Code is Entered
IF DTL.Item_Structure_Group_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Structure Group not found.'
ERROR(USR1168);

ENDIF;

ENDIF;

//?Validate item structure class if entered
CASE;

// IF DTL.Item Structure Class Code is Entered
IF DTL.Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Structure Class not found.'
ERROR(USR1170);

ENDIF;

ENDIF;

//?Validate date range
CASE;

// IF DTL.USR From Date GT DTL.USR To Date
IF DTL.USR_From_Date > DTL.USR_To_Date;

// Send error message - 'Through date must be greater than the from date'
ERROR(USR0032);

ENDIF;

//?Validate time range
CASE;

// IF DTL.USR From Date EQ DTL.USR To Date
IF DTL.USR_From_Date = DTL.USR_To_Date;

CASE;

// IF DTL.USR From Time 4.0 GT DTL.USR To Time 4.0
IF DTL.USR_From_Time_4_0 > DTL.USR_To_Time_4_0;

// Send error message - 'Through time must be greater than the from time'
ERROR(USR2830);
MSGPARM(DTL.USR_To_Time_4_0);

ENDIF;

ENDIF;

//?Check for valid reason code number 1
CASE;

// IF DTL.Reason Code 1 PASS    USR is Entered
IF DTL.Reason_Code_1_PASS_USR <> *BLANK;

EXECUTE FUNCTION(Val Reason Code        RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1212465;
PARAMETER(DTL.Reason_Code_1_PASS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Reason Code not found.'
ERROR(USR0858);
MSGPARM(DTL.Reason_Code_1_PASS_USR);

ENDIF;

ENDIF;

//?Check for valid reason code number 2
CASE;

// IF DTL.Reason Code 2 PASS    USR is Entered
IF DTL.Reason_Code_2_PASS_USR <> *BLANK;

EXECUTE FUNCTION(Val Reason Code        RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1212465;
PARAMETER(DTL.Reason_Code_2_PASS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Reason Code not found.'
ERROR(USR0858);
MSGPARM(DTL.Reason_Code_2_PASS_USR);

ENDIF;

ENDIF;

//?Check for valid reason code number 3
CASE;

// IF DTL.Reason Code 3 PASS    USR is Entered
IF DTL.Reason_Code_3_PASS_USR <> *BLANK;

EXECUTE FUNCTION(Val Reason Code        RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1212465;
PARAMETER(DTL.Reason_Code_3_PASS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Reason Code not found.'
ERROR(USR0858);
MSGPARM(DTL.Reason_Code_3_PASS_USR);

ENDIF;

ENDIF;

//?Check for valid reason code number 4
CASE;

// IF DTL.Reason Code 4 PASS    USR is Entered
IF DTL.Reason_Code_4_PASS_USR <> *BLANK;

EXECUTE FUNCTION(Val Reason Code        RT) TYPE(RTVOBJ) FILE(CAEFREP)          AC1212465;
PARAMETER(DTL.Reason_Code_4_PASS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Reason Code not found.'
ERROR(USR0858);
MSGPARM(DTL.Reason_Code_4_PASS_USR);

ENDIF;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Dtl/Sum/Ttl/Typ Sts   USR
DTL.Condition_Desc_1_USR = RTVCND(DTL.Dtl_Sum_Ttl_Typ_Sts_USR);

// DTL.Condition Desc. 2  USR = Condition name of DTL.Date Type
DTL.Condition_Desc_2_USR = RTVCND(DTL.Date_Type_USR);

//?Validate user
CASE;

// IF DTL.USR User ID Selected is Not Entered
IF DTL.USR_User_ID_Selected = *BLANK;

//?Validate user
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Profile Desc.      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1253264;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send completion message - 'User profile not found for user &1'
MESSAGE(USR0811 *COMPLETION);
MSGPARM(DTL.USR_User_ID_Selected);

ENDIF;

ENDIF;

//?USER: User defined action

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR To Date
PAR.Date_2_PASS_USR = DTL.USR_To_Date;

// WRK.Time 1           PASS USR = DTL.USR From Time 4.0 * CON.100 *
WRK.Time_1_PASS_USR = DTL.USR_From_Time_4_0 * 100;

// WRK.Time 2           PASS USR = DTL.USR To Time 4.0 * CON.100 *
WRK.Time_2_PASS_USR = DTL.USR_To_Time_4_0 * 100;

// PAR.Item Code PASS        USR = DTL.Item Code Number 7.0  USR
PAR.Item_Code_PASS_USR = DTL.Item_Code_Number_7_0_USR;

// PAR.Item Str Type PASS    USR = DTL.Item Structure Type Code
PAR.Item_Str_Type_PASS_USR = DTL.Item_Structure_Type_Code;

// PAR.Item Str Group PASS   USR = DTL.Item Structure Group Code
PAR.Item_Str_Group_PASS_USR = DTL.Item_Structure_Group_Code;

// PAR.Item Str Class PASS   USR = DTL.Item Structure Class Code
PAR.Item_Str_Class_PASS_USR = DTL.Item_Structure_Class_Code;

// PAR.Status - Y or N = DTL.Yes/No Selection      USR
PAR.Status_Y_or_N = DTL.Yes_No_Selection_USR;

//?Determine program name for passing based on report type
CASE;

// IF DTL.Dtl/Sum/Ttl/Typ Sts   USR is Adjustment Transactions
IF DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'A';

// PAR.USR Program Name 2 = CON.PPHNPFR
PAR.USR_Program_Name_2 = 'PPHNPFR';

//?Determine program name for passing based on report type
// IF DTL.Dtl/Sum/Ttl/Typ Sts   USR is Detail
IF DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'D';

// AND DTL.Date Type             USR is Transaction Date
AND DTL.Date_Type_USR = 'T';

// PAR.USR Program Name 2 = CON.ICQHPFR
PAR.USR_Program_Name_2 = 'ICQHPFR';

//?Determine program name for passing based on report type
// IF DTL.Dtl/Sum/Ttl/Typ Sts   USR is Detail
IF DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'D';

// AND DTL.Date Type             USR is Production Date
AND DTL.Date_Type_USR = 'P';

// PAR.USR Program Name 2 = CON.PDZ1PFR
PAR.USR_Program_Name_2 = 'PDZ1PFR';

//?Determine program name for passing based on report type
// IF DTL.Dtl/Sum/Ttl/Typ Sts   USR is Summary
IF DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'S';

// PAR.USR Program Name 2 = CON.OMHCPFR
PAR.USR_Program_Name_2 = 'OMHCPFR';

//?Determine program name for passing based on report type
// IF DTL.Dtl/Sum/Ttl/Typ Sts   USR is Total
IF DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'T';

// PAR.USR Program Name 2 = CON.OMQGPFR
PAR.USR_Program_Name_2 = 'OMQGPFR';

//?Determine program name for passing based on report type
// IF DTL.Dtl/Sum/Ttl/Typ Sts   USR is Type/Group/Class
IF DTL.Dtl_Sum_Ttl_Typ_Sts_USR = 'G';

// PAR.USR Program Name 2 = CON.PDRVPFR
PAR.USR_Program_Name_2 = 'PDRVPFR';

ENDIF;

CASE;

// IF DTL.Warehouse Code PASS   USR is Blanks
IF DTL.Warehouse_Code_PASS_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(PAR.Company_Number_Pass_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?E2516      3.21.13 RMC
// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('JOBQLONG');
PARAMETER(PAR.PRT_Night_Queue);

// Call program PRT Inventory Trans Jr UP.
CALL PROGRAM(PRT Inventory Trans Jr UP) ('PDRCUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('I/C');
PARAMETER('PDRCCLP');
PARAMETER(PAR.USR_Program_Name_2);
PARAMETER('Inventory Trans Journal');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(PAR.Item_Code_PASS_USR);
PARAMETER(DTL.Trans_Type_1_PASS_USR);
PARAMETER(DTL.Trans_Type_2_PASS_USR);
PARAMETER(DTL.Trans_Type_3_PASS_USR);
PARAMETER(DTL.Trans_Type_4_PASS_USR);
PARAMETER(DTL.Reason_Code_1_PASS_USR);
PARAMETER(DTL.Reason_Code_2_PASS_USR);
PARAMETER(DTL.Reason_Code_3_PASS_USR);
PARAMETER(DTL.Reason_Code_4_PASS_USR);
PARAMETER(DTL.USR_User_ID_Selected);
PARAMETER(PAR.Item_Str_Class_PASS_USR);
PARAMETER(PAR.Item_Str_Group_PASS_USR);
PARAMETER(PAR.Item_Str_Type_PASS_USR);
PARAMETER(DTL.Dtl_Sum_Ttl_Typ_Sts_USR);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER(DTL.Date_Type_USR);
PARAMETER(DTL.Shift_Number);
PARAMETER(DTL.Export_Domestic);
PARAMETER(DTL.Availability_Group_Code);
PARAMETER(WRK.Time_1_PASS_USR);
PARAMETER(WRK.Time_2_PASS_USR);
PARAMETER(DTL.Inventory_Trans_ID);
PARAMETER(DTL.Email_Address);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

