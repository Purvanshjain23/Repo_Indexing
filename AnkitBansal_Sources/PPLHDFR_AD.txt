// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPLHDFR
// ?Date: 14.08.2025 Time: 03:41:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?This is the Select and the Created of the A/R Claim Products
//?from the Order to the Claim Products.
//?***** Change Log and Comments
DO;

//?** E00094 LJB
//?** First Time Flag is used to pass the New or Existing Claim flag
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

CASE;

// IF PAR.Product or Resale Product is Product
IF PAR.Product_or_Resale_Product = 'P';

// CTL.Text-17               USR = CON.Products
CTL.Text_17_USR = 'Products';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text-17               USR = CON.Resale Products
CTL.Text_17_USR = 'Resale Products';

ENDIF;

EXECUTE FUNCTION(RTV Name RT) TYPE(RTVOBJ) FILE(CABBREP)                        AC1546878;
PARAMETER(PAR.Claim_Ship_to_Customer);
PARAMETER(CTL.Claim_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name RT) TYPE(RTVOBJ) FILE(CABBREP)                        AC1546878;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Order Number NE RCD.Order Number
IF CTL.Order_Number <> RCD.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF DB1.Detail Line Status is Complete
IF DB1.Detail_Line_Status = 'C';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF DB1.Detail Line Status is Confirmed
IF DB1.Detail_Line_Status = 'R';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Item desc/type     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1128573;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Product.
DO;

EXECUTE FUNCTION(VAL Exist Claim ItemsOdRT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1740813;
PARAMETER(PAR.Claim_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDDO;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Order Number is Equal to zeros
IF CTL.Order_Number = *ZERO;

// Send error message - 'Order Number must be entered.'
ERROR(USR1936);
MSGPARM(CTL.Order_Number);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

//?Claim Product
DO;

EXECUTE FUNCTION(RTV Last Prod Line No  RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1525696;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Claim_Item_Line_Number);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Claim Item Line Number = PAR.Claim Item Line Number + CON.1
PAR.Claim_Item_Line_Number = PAR.Claim_Item_Line_Number + 1;

//?Load Unit Price if Price is Price Audited.
CASE;

// IF RCD.Price Audit is Manually Price Audited
IF RCD.Price_Audit = 'M';

// OR RCD.Price Audit is Automatically Price Audit
OR RCD.Price_Audit = 'A';

// PAR.Claim Item Unit Price = RCD.Unit Price
PAR.Claim_Item_Unit_Price = RCD.Unit_Price;

// PAR.Claim Item Quantity = RCD.Quantity Shipped Total
PAR.Claim_Item_Quantity = RCD.Quantity_Shipped_Total;

// PAR.Claim Item Weight = RCD.Weight Shipped Total
PAR.Claim_Item_Weight = RCD.Weight_Shipped_Total;

//?Load Unit Price if Price is Price Audited.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Claim Item Unit Price = CON.*ZERO
PAR.Claim_Item_Unit_Price = *ZERO;

// PAR.Claim Item Quantity = CON.*ZERO
PAR.Claim_Item_Quantity = *ZERO;

// PAR.Claim Item Weight = CON.*ZERO
PAR.Claim_Item_Weight = *ZERO;

ENDIF;

EXECUTE FUNCTION(Rtv Item Type/Ownershp RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1723907;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.TF_Co_Ownership_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
CASE;

// IF PAR.Claim Item Unit Price is Greater than zero
IF PAR.Claim_Item_Unit_Price > *ZERO;

// Call program Clc OrdDtl Ext Amt    XF.
CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
PARAMETER(PAR.Claim_Item_Amount);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(PAR.Claim_Item_Quantity);
PARAMETER(PAR.Claim_Item_Weight);
PARAMETER(PAR.Claim_Item_Unit_Price);

ENDIF;

EXECUTE FUNCTION(CRT A/R Claim ProductSACR) TYPE(CRTOBJ) FILE(PDMOCPP)          AC1877156;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Claim_Item_Line_Number);
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(*BLANK);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(*BLANK);
PARAMETER(PAR.Claim_Department_Code);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Claim_Item_Quantity);
PARAMETER(PAR.Claim_Item_Weight);
PARAMETER(PAR.Claim_Item_Unit_Price);
PARAMETER(PAR.Claim_Item_Amount);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(PAR.Inventory_Value);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(PAR.Claim_Responsibility);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Claim_Memo_Number);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Claim_Product_Reason_Type);
PARAMETER(PAR.CP_Require_CM_Approval);
PARAMETER(PAR.Clm_Item_TF_Exempt_Code);
PARAMETER(PAR.CP_Unused_Sts_4);
PARAMETER(PAR.CP_Unused_Sts_5);
PARAMETER(PAR.CP_Unused_Sts_6);
PARAMETER(PAR.CP_Unused_Price_1);
PARAMETER(PAR.CP_Unused_Price_2);
PARAMETER(PAR.CP_Unused_Price_3);
PARAMETER(PAR.CP_Unused_Price_4);
PARAMETER(PAR.CP_Unused_Price_5);
PARAMETER(PAR.CP_Unused_Value_1);
PARAMETER(PAR.CP_Unused_Value_2);
PARAMETER(PAR.CP_Unused_Value_3);
PARAMETER(PAR.CP_Unused_Value_4);
PARAMETER(PAR.CP_Unused_Value_5);
PARAMETER(PAR.TF_Co_Ownership_Sts);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
 PARAMETER(DB1.Claim_Department_Code);
 PARAMETER(NLL.Claim_Department_Desc);
 PARAMETER(DB1.Claim_Responsibility);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?OVERRIDE: Claim Responsibility
 CASE;

 // IF DB1.Clm Item TF Exempt Code is Exempt Customer
 IF DB1.Clm_Item_TF_Exempt_Code = 'EC';

 // OR DB1.Clm Item TF Exempt Code is Exempt Product
 OR DB1.Clm_Item_TF_Exempt_Code = 'EP';

 // OR DB1.Clm Item TF Exempt Code is Pre Commencement
 OR DB1.Clm_Item_TF_Exempt_Code = 'PC';

 // OR PAR.Accounting Company is Seaboard Triumph Foods
 OR PAR.Accounting_Company = 440;

 //?RMC Change to check ACCTNG CO = STF 11/16/18 S13578
 //?RMC Added STF 9/10/18 S13578
 // DB1.Claim Responsibility = CND.Company
 DB1.Claim_Responsibility = 'C';

 //?OVERRIDE: Claim Responsibility
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Affect Sales Pounds = Y
 CASE;

 // IF DB1.Affect Sales Pnds Status is yes
 IF DB1.Affect_Sales_Pnds_Status = 'Y';

 // DB1.Claim Responsibility = CND.Company
 DB1.Claim_Responsibility = 'C';

 ENDIF;

 //?TFS037:  If the Item is Co-Owned, the responsibility is always
 //?         Shared.
 //?Item Co-Ownership = S or T
 CASE;

 // IF PAR.Item Co-Ownership Sts is Co-Owned
 IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

 // DB1.Claim Responsibility = CND.Shared
 DB1.Claim_Responsibility = 'S';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Claim product was created
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Claim Product Created');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


ENDDO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Final processing (Pre-confirm)

// Call program EDT Calc Claim Amts    XF.
CALL PROGRAM(EDT Calc Claim Amts    XF) ('PPOCXFR');
PARAMETER(PAR.Claim_Number);
PARAMETER(LCL.Claim_Type);
PARAMETER(LCL.Claim_Amount);
PARAMETER(LCL.Claim_Net_Loss);

CASE;

// IF PGM.*Reload subfile is *YES
IF PGM.*Reload_subfile = 'Y';

CASE;

// IF PAR.Product or Resale Product is Product
IF PAR.Product_or_Resale_Product = 'P';

// PAR.Clm Program USR = CND.Edit Claim Product
PAR.Clm_Program_USR = 'ECP';

ENDIF;

RETURN;

ENDIF;

//?USER: Exit program processing

//?F3=Exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

CASE;

// IF PAR.Product or Resale Product is Product
IF PAR.Product_or_Resale_Product = 'P';

// PAR.Clm Program USR = CND.Edit Claim Product
PAR.Clm_Program_USR = 'ECP';

// IF PAR.Product or Resale Product is Resale Product
IF PAR.Product_or_Resale_Product = 'R';

// PAR.Clm Program USR = CND.Edit Resale Product
PAR.Clm_Program_USR = 'ERP';

ENDIF;

RETURN;

ENDIF;

