// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBSGXFR
// ?Date: 14.08.2025 Time: 03:49:13
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Get the PFS Prod Sched Batch Hdr information.
EXECUTE FUNCTION(Rtv PFS Prd Sch Bt Hd RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2110176;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);
PARAMETER(LCL.PFS_Baseline_Schedule);
PARAMETER(NLL.PFS_Batch_Sent_Date);
PARAMETER(NLL.PFS_Batch_Sent_Time);
PARAMETER(NLL.PFS_Record_Status);
PARAMETER(NLL.PFS_Process_Status);
PARAMETER(NLL.PFS_Error_Reason);
PARAMETER(NLL.PFS_Create_Date);
PARAMETER(NLL.PFS_Create_Time);
PARAMETER(NLL.PFS_Change_Date);
PARAMETER(NLL.PFS_Change_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Process all PFS Prod Sched Batch Sel records.
EXECUTE FUNCTION(Snd PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(PBB3CPP)           AC2110278;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);
PARAMETER(LCL.PFS_Baseline_Schedule);
PARAMETER(LCL.PFS_Batch_Seq);
{
 //?USER: Initialize routine

 //?Modifications and Comments
 DO;

 //?E15568 JBB 10/04/19 - Change Date Calculation to exlude certain days
 //?- Change the calculation of Date0, Date1, and Date2 to use the
 //?  Calendar file to exclude non-Kill Dates.  Also, when the dates
 //?  compared to the ship dates, make all comparisons to be "LE".
 //?E13982 JJH 10/25/18 - Exclude Order/Items from Production Schedule
 //?- If Combo Order/Item has Prod Qty to Fill = ZERO
 //?- Same logic apples to Current Production Day and Work Ahead
 //?R11918 JJH 01/25/18 - Do not place Item on Prodution Schedule if
 //?                      Alocation Method on Company Item Ext = I.
 ENDDO;

 // LCL.PFS Batch Seq = CON.*ZERO
 LCL.PFS_Batch_Seq = *ZERO;

 //?USER: Process Data record

 //?Set Date and Times to be used for PFS Prod Sched Batch Dtl
 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
 PARAMETER(LCL.System_Date_USR);
 PARAMETER(LCL.PFS_Production_Date);
 {
  //?Execute internal function

  // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
  LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

  // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
  LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

  // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
  LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

  // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
  PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

  // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
  PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

  // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
  PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

 }

 // LCL.PFS Create Date = LCL.PFS Production Date
 LCL.PFS_Create_Date = LCL.PFS_Production_Date;

 // LCL.PFS Create Time = JOB.*Job time
 LCL.PFS_Create_Time = JOB.*Job_time;

 //?Set PFS Fill Qty Ship Date 0, 1, 2
 //?E15568 JBB 10/04/19 - Change Date Calc to exlude certain days
 EXECUTE FUNCTION(Calc Day0,Day1,Day2   IF) TYPE(EXCINTFUN)                      AC2176942;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Date_0);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Date_1);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Date_2);
 {
  //?Execute internal function

  //?Initialize output parameters
  // PAR.PFS Fill Qty Ship Date 0 = CON.*ZERO
  PAR.PFS_Fill_Qty_Ship_Date_0 = *ZERO;

  // PAR.PFS Fill Qty Ship Date 1 = CON.*ZERO
  PAR.PFS_Fill_Qty_Ship_Date_1 = *ZERO;

  // PAR.PFS Fill Qty Ship Date 2 = CON.*ZERO
  PAR.PFS_Fill_Qty_Ship_Date_2 = *ZERO;

  //?Day0 is always current job date
  // LCL.Post to G/L Date = JOB.*Job date
  LCL.Post_to_G_L_Date = JOB.*Job_date;

  // LCL.PFS Fill Qty Ship Date 0 = JOB.*Job date
  LCL.PFS_Fill_Qty_Ship_Date_0 = JOB.*Job_date;

  //?Loop to populate Day1 and Day2 dates (production dates only)
  // DOW LCL.PFS Fill Qty Ship Date 2 is Zero
  DOW LCL.PFS_Fill_Qty_Ship_Date_2 = *ZERO;

  // LCL.Post to G/L Date = LCL.Post to G/L Date + CON.1 *DAYS
  LCL.Post_to_G_L_Date = DATEINCR(LCL.Post_to_G_L_Date 1 'DY' 1111111 'NONE' 'N' 1);

  EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(LCL.Post_to_G_L_Date);
  PARAMETER(LCL.Kill_Day_Status);
  PARAMETER(LCL.Production_Day_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Production Day Status is Yes
  CASE;

  // IF LCL.Production Day Status is yes
  IF LCL.Production_Day_Status = 'Y';

  //?Load appropriate PFS Fill Qty Ship Date
  CASE;

  // IF LCL.PFS Fill Qty Ship Date 1 is Zero
  IF LCL.PFS_Fill_Qty_Ship_Date_1 = *ZERO;

  // LCL.PFS Fill Qty Ship Date 1 = LCL.Post to G/L Date
  LCL.PFS_Fill_Qty_Ship_Date_1 = LCL.Post_to_G_L_Date;

  //?Load appropriate PFS Fill Qty Ship Date
  // IF LCL.PFS Fill Qty Ship Date 2 is Zero
  IF LCL.PFS_Fill_Qty_Ship_Date_2 = *ZERO;

  // LCL.PFS Fill Qty Ship Date 2 = LCL.Post to G/L Date
  LCL.PFS_Fill_Qty_Ship_Date_2 = LCL.Post_to_G_L_Date;

  ENDIF;

  ENDIF;

  ENDDO;

  //?Load output parameters
  // PAR.PFS Fill Qty Ship Date 0 = LCL.PFS Fill Qty Ship Date 0
  PAR.PFS_Fill_Qty_Ship_Date_0 = LCL.PFS_Fill_Qty_Ship_Date_0;

  // PAR.PFS Fill Qty Ship Date 1 = LCL.PFS Fill Qty Ship Date 1
  PAR.PFS_Fill_Qty_Ship_Date_1 = LCL.PFS_Fill_Qty_Ship_Date_1;

  // PAR.PFS Fill Qty Ship Date 2 = LCL.PFS Fill Qty Ship Date 2
  PAR.PFS_Fill_Qty_Ship_Date_2 = LCL.PFS_Fill_Qty_Ship_Date_2;

 }

 //?Get PFS Warehouse from Company Control
 //?E6225 JJH 06/23/16 - Use RTVOBJ on Comapny Values that utilizes
 //?  the Company Number
 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('PFSWHSE');
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Create the PFS Prod Sched Batch Dtl records from Company Item
 EXECUTE FUNCTION(Snd PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2110279;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Item_Structure_Type);
 PARAMETER(DB1.PFS_Item_Structure_Group);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(LCL.PFS_Production_Date);
 PARAMETER(PAR.PFS_Baseline_Schedule);
 PARAMETER(LCL.PFS_Create_Date);
 PARAMETER(LCL.PFS_Create_Time);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Date_0);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Date_1);
 PARAMETER(LCL.PFS_Fill_Qty_Ship_Date_2);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.PFS_Batch_Seq);
 {
  //?USER: Initialize routine

  //?Modifications and Comments
  DO;

  //?E13982 JJH 10/25/18 - Exclude Order/Items from Production Schedule
  //?- If Combo Order/Item has Prod Qty to Fill = ZERO
  //?- Same logic apples to Current Production Day and Work Ahead
  ENDDO;

  // LCL.PFS Batch Seq = PAR.PFS Batch Seq
  LCL.PFS_Batch_Seq = PAR.PFS_Batch_Seq;

  //?USER: Process Data record

  CASE;

  // IF DB1.Item Prod Sched Send PFS is Yes
  IF DB1.Item_Prod_Sched_Send_PFS = 'Y';

  // AND DB1.Record Status is Active
  AND DB1.Record_Status = 'A';

  // AND DB1.Base/Conv/Loss Item is Base/Converted
  AND DB1.Base_Conv_Loss_Item = 'B'/'C';

  // AND DB1.Item Type Code is FG/WP
  AND DB1.Item_Type_Code = 'FG'/'WP';

  // AND DB1.U/M - Primary is EQ Boxes
  AND ( DB1.UOM_Primary = 'BX';

  // OR DB1.U/M - Primary is Combos
  OR DB1.UOM_Primary = 'CB' );

  //?R11918 JJH 01/25/18 - Do not place Item on Prodution Schedule if
  //?                      Alocation Method on Company Item Ext = I.
  EXECUTE FUNCTION(Rtv Alloc Method  RT) TYPE(RTVOBJ) FILE(PMFDREP)               AC2146364;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Allocation_Method);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Allocation Method = DB1.Allocation Method
   PAR.Allocation_Method = DB1.Allocation_Method;

  }

  CASE;

  // IF NOT LCL.Allocation Method is Suspended-Inventory Only
  IF ! LCL.Allocation_Method = 'I';

  //?PFS Fresh/Frozen
  CASE;

  // IF DB1.Sold 100% Frozen is yes
  IF DB1.Sold_100_Percent_Frozen = 'Y';

  // LCL.PFS Fresh/Frozen = CND.Frozen
  LCL.PFS_Fresh_Frozen = 'FZ';

  //?PFS Fresh/Frozen
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PFS Fresh/Frozen = CND.Fresh
  LCL.PFS_Fresh_Frozen = 'FR';

  ENDIF;

  CASE;

  // IF DB1.U/M - Primary is EQ Boxes
  IF DB1.UOM_Primary = 'BX';

  //?10/07/2020 PKD/RMC Dropped db1.Company Number as key 1.
  EXECUTE FUNCTION(Snd PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC2110739;
  PARAMETER('S');
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.PFS_Batch_Date);
  PARAMETER(PAR.PFS_Batch_Time);
  PARAMETER(PAR.PFS_User_ID);
  PARAMETER(LCL.PFS_Batch_Seq);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Label_Type);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.UOM_Primary);
  PARAMETER(LCL.PFS_Fresh_Frozen);
  PARAMETER(DB1.Base_Conv_Loss_Item);
  PARAMETER(PAR.PFS_Baseline_Schedule);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Unit_Weight);
  PARAMETER(DB1.Piece_Count_Item);
  PARAMETER(DB1.Pieces_Per_Bag);
  PARAMETER(DB1.Bags_Per_Unit);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_1);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_2);
  {
   //?USER: Initialize routine

   //?E3787 JJH 12/07/15 - Modify this RTVOBJ to sum the records by the
   //?  Production Warehouse instead of the Warehouse.
   //?PFS Batch Seq
   // LCL.PFS Batch Seq = PAR.PFS Batch Seq
   LCL.PFS_Batch_Seq = PAR.PFS_Batch_Seq;

   //?Initialize Fields
   // LCL.PFS Fill Qty Prod Sum = CON.*ZERO
   LCL.PFS_Fill_Qty_Prod_Sum = *ZERO;

   //?USER: Process Data record

   //?PFS Fill Qty Prod
   //?Weight Scheduled and Pieces Scheduled for Base/Converted
   CASE;

   // IF PAR.PFS Base/Converted is Base
   IF PAR.PFS_Base_Converted = 'B';

   // LCL.Weight Sched Prod USR = DB1.PS Weight Prod Allocated
   LCL.Weight_Sched_Prod_USR = DB1.PS_Weight_Prod_Allocated;

   // LCL.Pieces Scheduled = DB1.PS Pieces Prod Allocated
   LCL.Pieces_Scheduled = DB1.PS_Pieces_Prod_Allocated;

   //?Weight Scheduled and Pieces Scheduled for Base/Converted
   // IF PAR.PFS Base/Converted is Converted
   IF PAR.PFS_Base_Converted = 'C';

   // Weight Sched Prod USR
   LCL.Weight_Sched_Prod_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
   - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

   // Pieces Scheduled
   LCL.Pieces_Scheduled = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
   - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

   ENDIF;

   //?PFS Fill Qty Prod for Piece Count Y/N
   CASE;

   // IF PAR.Piece Count Item is yes
   IF PAR.Piece_Count_Item = 'Y';

   CASE;

   // IF PAR.Pieces Per Bag is EQ Zero
   IF PAR.Pieces_Per_Bag = *ZERO;

   // OR PAR.Bags Per Unit is EQ Zero
   OR PAR.Bags_Per_Unit = *ZERO;

   // LCL.PFS Fill Qty Prod = CON.*ZERO
   LCL.PFS_Fill_Qty_Prod = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PFS Fill Qty Prod
   LCL.PFS_Fill_Qty_Prod = LCL.Pieces_Scheduled / ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit );

   ENDIF;

   //?PFS Fill Qty Prod for Piece Count Y/N
   // IF PAR.Piece Count Item is no
   IF PAR.Piece_Count_Item = 'N';

   CASE;

   // IF PAR.Unit Weight is Equal to zero
   IF PAR.Unit_Weight = *ZERO;

   // LCL.PFS Fill Qty Prod = CON.*ZERO
   LCL.PFS_Fill_Qty_Prod = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PFS Fill Qty Prod
   LCL.PFS_Fill_Qty_Prod = LCL.Weight_Sched_Prod_USR / PAR.Unit_Weight;

   ENDIF;

   ENDIF;

   //?Sum Totals for each PS Prod Item Schedule record
   // LCL.PFS Fill Qty Prod Sum = LCL.PFS Fill Qty Prod + LCL.PFS Fill Qty Prod Sum
   LCL.PFS_Fill_Qty_Prod_Sum = LCL.PFS_Fill_Qty_Prod + LCL.PFS_Fill_Qty_Prod_Sum;

   //?USER: Exit processing

   //?Create PFS Prod Sched Bt Dtl
   //?Record Selection Processing based on PFS Fill Qty Prod
   CASE;

   // IF LCL.PFS Fill Qty Prod Sum is LE ZERO
   IF LCL.PFS_Fill_Qty_Prod_Sum <= *ZERO;

   // LCL.PFS Fill Qty Prod Sum = CND.Zero
   LCL.PFS_Fill_Qty_Prod_Sum = *ZERO;

   EXECUTE FUNCTION(Rtv PFSPrdSchBtDt Ext RT) TYPE(RTVOBJ) FILE(PBB1CPP)           AC2110948;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Item_Code);
   {
    //?USER: Initialize routine

    //?E3787 JJH 08/26/15 - The purpose of this function is to determine
    //?if there are any records that exist for this Co/Batch Date/Item.
    //?If a record exists for a Baseline update on the same Co/Batch Date/
    //?Item, then we will allow a Zero Qty PFS Prod Sched Batch Dtl
    //?record to be created.
    //?USER: Process Data record

    QUIT;

   }

   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   ENDIF;

   //?Record Selection Processing based on PFS Fill Qty Prod
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PGM.*Record selected = CND.*YES
   PGM.*Record_selected = 'Y';

   ENDIF;

   //?If record selected, create PFS Prod Sched Bt Dtl
   CASE;

   // IF PGM.*Record selected is *YES
   IF PGM.*Record_selected = 'Y';

   //?PFS Fill Qty Ship Day 0, 1, 2 from Order Detail Schedule
   //?What are we making today that is shipping today, today +1, today +2
   //?10/07/2020 PKD/RMC - Changed db1.company number to par.pfs company number
   //?                     for Accounting Company
   //?This will pick up the Transfer Orders for External Warehouses
   EXECUTE FUNCTION(RTV PFS FillQtyShipDy RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC2110772;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_1);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_2);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_2);
   {
    //?USER: Initialize routine

    //?Modification history
    DO;

    //?E15568 JBB 10/08/19 - Change Date Calculation to exlude certain days
    //?- When the dates are compared to the ship dates, make all
    //?  comparisons to be "LE".
    ENDDO;

    // LCL.PFS Fill Qty Ship Day 0 = CON.*ZERO
    LCL.PFS_Fill_Qty_Ship_Day_0 = *ZERO;

    // LCL.PFS Fill Qty Ship Day 1 = CON.*ZERO
    LCL.PFS_Fill_Qty_Ship_Day_1 = *ZERO;

    // LCL.PFS Fill Qty Ship Day 2 = CON.*ZERO
    LCL.PFS_Fill_Qty_Ship_Day_2 = *ZERO;

    //?USER: Process Data record

    //?E15568 JBB 10/08/19 - Change Date Calculation to exlude certain days
    //?New code to accumulate quantities to the correct day
    CASE;

    // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 0
    IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_0;

    // LCL.PFS Fill Qty Ship Day 0 = LCL.PFS Fill Qty Ship Day 0 + DB1.OD Qty/Cnsmd Pieces Sched
    LCL.PFS_Fill_Qty_Ship_Day_0 = LCL.PFS_Fill_Qty_Ship_Day_0
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    //?New code to accumulate quantities to the correct day
    // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 1
    IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_1;

    // LCL.PFS Fill Qty Ship Day 1 = LCL.PFS Fill Qty Ship Day 1 + DB1.OD Qty/Cnsmd Pieces Sched
    LCL.PFS_Fill_Qty_Ship_Day_1 = LCL.PFS_Fill_Qty_Ship_Day_1
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    //?New code to accumulate quantities to the correct day
    // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 2
    IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_2;

    // LCL.PFS Fill Qty Ship Day 2 = LCL.PFS Fill Qty Ship Day 2 + DB1.OD Qty/Cnsmd Pieces Sched
    LCL.PFS_Fill_Qty_Ship_Day_2 = LCL.PFS_Fill_Qty_Ship_Day_2
    + DB1.OD_Qty_Cnsmd_Pieces_Sched;

    ENDIF;

    //?USER: Exit processing

    // PAR.PFS Fill Qty Ship Day 0 = LCL.PFS Fill Qty Ship Day 0
    PAR.PFS_Fill_Qty_Ship_Day_0 = LCL.PFS_Fill_Qty_Ship_Day_0;

    // PAR.PFS Fill Qty Ship Day 1 = LCL.PFS Fill Qty Ship Day 1
    PAR.PFS_Fill_Qty_Ship_Day_1 = LCL.PFS_Fill_Qty_Ship_Day_1;

    // PAR.PFS Fill Qty Ship Day 2 = LCL.PFS Fill Qty Ship Day 2
    PAR.PFS_Fill_Qty_Ship_Day_2 = LCL.PFS_Fill_Qty_Ship_Day_2;

   }

   //?PFS Batch Seq
   // LCL.PFS Batch Seq = CON.1 + LCL.PFS Batch Seq
   LCL.PFS_Batch_Seq = 1 + LCL.PFS_Batch_Seq;

   //?Create the PFS Prod Sched Batch Dtl
   //?R15794 DN 11/22/19-Set New DB Fields to Blank.
   //?10/07/2020 PKD/RMC Send PAR.PFS Company Number instead of par.Company Num.
   EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt CR) TYPE(CRTOBJ) FILE(PBB1CPP)           AC2109265;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   PARAMETER(PAR.PFS_Production_Date);
   PARAMETER(PAR.PFS_Item_Code);
   PARAMETER(PAR.PFS_Label_Type);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.PFS_Fill_Qty_Prod_Sum);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_2);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.PFS_Item_Structure_Type);
   PARAMETER(PAR.PFS_Item_Structure_Group);
   PARAMETER(PAR.PFS_Item_Structure_Class);
   PARAMETER(PAR.PFS_Primary_UOM);
   PARAMETER(PAR.PFS_Fresh_Frozen);
   PARAMETER(PAR.PFS_Base_Converted);
   PARAMETER(PAR.PFS_Baseline_Schedule);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*BLANK);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   ENDIF;

   //?PFS Batch Seq
   // PAR.PFS Batch Seq = LCL.PFS Batch Seq
   PAR.PFS_Batch_Seq = LCL.PFS_Batch_Seq;

  }

  // IF DB1.U/M - Primary is Combos
  IF DB1.UOM_Primary = 'CB';

  //?Combo Orders - Today's Production Date
  EXECUTE FUNCTION(Snd PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC2110541;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
  PARAMETER(PAR.PFS_Batch_Date);
  PARAMETER(PAR.PFS_Batch_Time);
  PARAMETER(PAR.PFS_User_ID);
  PARAMETER(LCL.PFS_Batch_Seq);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(DB1.Label_Type);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.UOM_Primary);
  PARAMETER(LCL.PFS_Fresh_Frozen);
  PARAMETER(DB1.Base_Conv_Loss_Item);
  PARAMETER(PAR.PFS_Baseline_Schedule);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_1);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_2);
  {
   //?USER: Initialize routine

   //?Modifications and Comments
   DO;

   //?E15568 JBB 10/04/19 - Change Date Calculation to exlude certain days
   //?- When the dates are compared to the ship dates, make all
   //?  comparisons to be "LE".
   //?E13982 JJH 10/25/18 - Exclude Order/Items from Production Schedule
   //?- If Combo Order/Item has Prod Qty to Fill = ZERO
   //?- Same logic apples to Current Production Day and Work Ahead
   ENDDO;

   // LCL.PFS Batch Seq = PAR.PFS Batch Seq
   LCL.PFS_Batch_Seq = PAR.PFS_Batch_Seq;

   //?USER: Process Data record

   //?PFS Batch Seq
   // LCL.PFS Batch Seq = CON.1 + LCL.PFS Batch Seq
   LCL.PFS_Batch_Seq = 1 + LCL.PFS_Batch_Seq;

   //?PFS Fill Qty Ship Day 0, 1, 2 from Order Detail Schedule
   // LCL.PFS Fill Qty Ship Day 0 = CON.*ZERO
   LCL.PFS_Fill_Qty_Ship_Day_0 = *ZERO;

   // LCL.PFS Fill Qty Ship Day 1 = CON.*ZERO
   LCL.PFS_Fill_Qty_Ship_Day_1 = *ZERO;

   // LCL.PFS Fill Qty Ship Day 2 = CON.*ZERO
   LCL.PFS_Fill_Qty_Ship_Day_2 = *ZERO;

   //?E15568 JBB 10/04/19 - Change Date Calc to exlude certain day
   //?E15568 JBB 10/04/19 - New code
   CASE;

   // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 0
   IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_0;

   // LCL.PFS Fill Qty Ship Day 0 = DB1.OD Qty/Cnsmd Pieces Sched
   LCL.PFS_Fill_Qty_Ship_Day_0 = DB1.OD_Qty_Cnsmd_Pieces_Sched;

   //?E15568 JBB 10/04/19 - New code
   // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 1
   IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_1;

   // LCL.PFS Fill Qty Ship Day 1 = DB1.OD Qty/Cnsmd Pieces Sched
   LCL.PFS_Fill_Qty_Ship_Day_1 = DB1.OD_Qty_Cnsmd_Pieces_Sched;

   //?E15568 JBB 10/04/19 - New code
   // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 2
   IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_2;

   // LCL.PFS Fill Qty Ship Day 2 = DB1.OD Qty/Cnsmd Pieces Sched
   LCL.PFS_Fill_Qty_Ship_Day_2 = DB1.OD_Qty_Cnsmd_Pieces_Sched;

   ENDIF;

   //?PFS Ordered Qty from Order Detail
   //?R15794 DN 11/26/19-Get Addt'l Info from OD to Create PFS Prod Sched Dtl.
   EXECUTE FUNCTION(Rtv for Prod Sched Dtl RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2111580;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(LCL.PFS_Order_Line_Sts);
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.PFS_Ordered_Qty);
   PARAMETER(LCL.OD_Pallet_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?5/24/16 E4119 RMC REMOVE LIVE WITH TPM CHECK
   //?PFS Load Id
   //?R15794 DN 11/26/19-Changed to Get Ship To Customer Name.
   EXECUTE FUNCTION(Rtv PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2110883;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(LCL.Ship_To_Name);
   PARAMETER(LCL.PFS_Load_ID);
   PARAMETER(NLL.Load_Truck_Departure_Date);
   PARAMETER(NLL.Load_Truck_Departure_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?PFS Loading Sequence, PFS Load Deadline Date/Time from Load Header
   EXECUTE FUNCTION(RTV ScSeq/DeadDptDtTm RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2110675;
   PARAMETER(LCL.PFS_Load_ID);
   PARAMETER(LCL.PFS_Loading_Sequence);
   PARAMETER(LCL.Deadline_Departure_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(LCL.Deadline_Departure_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Date);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   CASE;

   // IF LCL.PFS Load Deadline Time is EQ 240000
   IF LCL.PFS_Load_Deadline_Time = 240000;

   // LCL.PFS Load Deadline Time = CON.235959
   LCL.PFS_Load_Deadline_Time = 235959;

   ENDIF;

   //?Create the PFS Prod Sched Batch Dtl
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(LCL.PFS_Scheduled_Ship_Date);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   //?E13982 JJH 10/25/18 - Exclude Order/Items from Production Schedule
   //?- If Combo Order/Item has Prod Qty to Fill = ZERO
   CASE;

   // IF DB1.OD Qty/Cnsmd Pieces Sched is Greater than zero
   IF DB1.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   //?R15794 DN 11/22/19-Set New DB Fields from OD & OH Files.
   EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt CR) TYPE(CRTOBJ) FILE(PBB1CPP)           AC2109265;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   PARAMETER(PAR.PFS_Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.PFS_Label_Type);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(LCL.PFS_Order_Line_Sts);
   PARAMETER(LCL.PFS_Ordered_Qty);
   PARAMETER(DB1.OD_Quantity_Inv_Sched);
   PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_2);
   PARAMETER(LCL.PFS_Load_ID);
   PARAMETER(LCL.PFS_Loading_Sequence);
   PARAMETER(LCL.PFS_Scheduled_Ship_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Time);
   PARAMETER(PAR.PFS_Item_Structure_Type);
   PARAMETER(PAR.PFS_Item_Structure_Group);
   PARAMETER(PAR.PFS_Item_Structure_Class);
   PARAMETER(PAR.PFS_Primary_UOM);
   PARAMETER(PAR.PFS_Fresh_Frozen);
   PARAMETER(PAR.PFS_Base_Converted);
   PARAMETER(PAR.PFS_Baseline_Schedule);
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.Ship_To_Name);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   ENDIF;

   //?USER: Exit processing

   // PAR.PFS Batch Seq = LCL.PFS Batch Seq
   PAR.PFS_Batch_Seq = LCL.PFS_Batch_Seq;

  }

  //?Combo Orders - Work Ahead Production Date
  EXECUTE FUNCTION(Snd PFS Prd Sch Bt Dt2RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC2111917;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_1);
  PARAMETER(PAR.PFS_Batch_Date);
  PARAMETER(PAR.PFS_Batch_Time);
  PARAMETER(PAR.PFS_User_ID);
  PARAMETER(LCL.PFS_Batch_Seq);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(DB1.Label_Type);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.UOM_Primary);
  PARAMETER(LCL.PFS_Fresh_Frozen);
  PARAMETER(DB1.Base_Conv_Loss_Item);
  PARAMETER(PAR.PFS_Baseline_Schedule);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_0);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_1);
  PARAMETER(PAR.PFS_Fill_Qty_Ship_Date_2);
  PARAMETER(DB1.Fresh_Chilling_Time);
  {
   //?USER: Initialize routine

   //?Modifications and Comments
   DO;

   //?E15568 JBB 10/04/19 - Change Date Calc to exlude certain days
   //?- When the dates are compared to the ship dates, make all
   //?  comparisons to be "LE".
   //?E13982 JJH 10/25/18 - Exclude Order/Items from Production Schedule
   //?- If Combo Order/Item has Prod Qty to Fill = ZERO
   //?- Same logic apples to Current Production Day and Work Ahead
   //?E6625 JJH 07/15/16 - Correct Combo Workahead
   //?- Change I  OD Production Date  POS to RST
   ENDDO;

   //?The purpose of this routine is to create a PFS Prod Sched Batch Dtl
   //?record for Combo Orders with a Work Ahead.  A Work Ahead Order
   //?must have a Production Date GT today's Date and Today's Date must
   //?be included in the "Fresheness Date" Date Range.
   // LCL.PFS Batch Seq = PAR.PFS Batch Seq
   LCL.PFS_Batch_Seq = PAR.PFS_Batch_Seq;

   //?USER: Process Data record

   //?Get Production Ovr AgeDte To/Fr from Order Detail
   EXECUTE FUNCTION(Rtv PrdOv AgeDt To/Fm RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2111924;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(LCL.Item_Age_Days);
   PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
   PARAMETER(LCL.Production_Ovr_AgeDte_To);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Get Warehouse Std Chill Time & Warehouse Chill Time from Warehouse
   EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(NLL.Warehouse_Type);
   PARAMETER(LCL.Warehouse_Std_Chill_Time);
   PARAMETER(LCL.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?RMC s15557 added 10.2.19
   EXECUTE FUNCTION(RTV Warehouse Inv/Max RT) TYPE(RTVOBJ) FILE(CAADREP)           AC2049533;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
   PARAMETER(LCL.WHS_Inventory_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Get Schedule Ship Date & Requested Delivery Date from Order Header TRG
   //?E16768 JJH 08/21/20 - Add Rtv Block Order Flag
   EXECUTE FUNCTION(RTV SSD/Tm/SpIn/BO/RDlvRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2187096;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(NLL.Special_Instructions);
   PARAMETER(NLL.Special_Instructions_2);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(LCL.Requested_Delivery_Date);
   PARAMETER(LCL.Block_Order_Flag);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Calc Chill Time USR
   CASE;

   // IF LCL.Warehouse Std Chill Time is yes
   IF LCL.Warehouse_Std_Chill_Time = 'Y';

   //?RMC s15557 added 10.2.19
   // LCL.Chill Time USR = LCL.WHS Inventory Chill Time
   LCL.Chill_Time_USR = LCL.WHS_Inventory_Chill_Time;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Chill Time USR = PAR.Fresh Chilling Time
   LCL.Chill_Time_USR = PAR.Fresh_Chilling_Time;

   ENDIF;

   //?Calculate Production Ovr AgeDte To/Fr
   // Call program CLC PA Age FrmToDates XF.
   CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(LCL.Chill_Time_USR);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(LCL.Requested_Delivery_Date);
   PARAMETER(LCL.Item_Age_Days);
   PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
   PARAMETER(LCL.Production_Ovr_AgeDte_To);
   PARAMETER(LCL.Production_AgeDte_Fr);
   PARAMETER(LCL.Production_AgeDte_To);

   //?Determine if Combo Order in Age Date Range
   CASE;

   // IF LCL.Production AgeDte Fr is Entered
   IF LCL.Production_AgeDte_Fr <> *ZERO;

   // AND LCL.Production AgeDte To is Entered
   AND LCL.Production_AgeDte_To <> *ZERO;

   CASE;

   // IF PAR.PFS Fill Qty Ship Date 0 GE LCL.Production AgeDte Fr
   IF PAR.PFS_Fill_Qty_Ship_Date_0 >= LCL.Production_AgeDte_Fr;

   // AND PAR.PFS Fill Qty Ship Date 0 LE LCL.Production AgeDte To
   AND PAR.PFS_Fill_Qty_Ship_Date_0 <= LCL.Production_AgeDte_To;

   // LCL.Work Ahead Combo OrderUSR = CND.Yes
   LCL.Work_Ahead_Combo_OrderUSR = 'Y';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Work Ahead Combo OrderUSR = CND.No
   LCL.Work_Ahead_Combo_OrderUSR = 'N';

   ENDIF;

   //?Determine if Combo Order in Age Date Range
   // IF *OTHERWISE
   IF *OTHERWISE;

   ENDIF;

   CASE;

   // IF LCL.Work Ahead Combo OrderUSR is Yes
   IF LCL.Work_Ahead_Combo_OrderUSR = 'Y';

   //?PFS Batch Seq
   // LCL.PFS Batch Seq = CON.1 + LCL.PFS Batch Seq
   LCL.PFS_Batch_Seq = 1 + LCL.PFS_Batch_Seq;

   //?PFS Fill Qty Ship Day 0, 1, 2 from Order Detail Schedule
   // LCL.PFS Fill Qty Ship Day 0 = CON.*ZERO
   LCL.PFS_Fill_Qty_Ship_Day_0 = *ZERO;

   // LCL.PFS Fill Qty Ship Day 1 = CON.*ZERO
   LCL.PFS_Fill_Qty_Ship_Day_1 = *ZERO;

   // LCL.PFS Fill Qty Ship Day 2 = CON.*ZERO
   LCL.PFS_Fill_Qty_Ship_Day_2 = *ZERO;

   //?E15568 JBB 10/04/19 - Change Date Calc to exlude certain days
   //?E15568 JBB 10/04/19 - New Code
   CASE;

   // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 0
   IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_0;

   // LCL.PFS Fill Qty Ship Day 0 = DB1.OD Qty/Cnsmd Pieces Sched
   LCL.PFS_Fill_Qty_Ship_Day_0 = DB1.OD_Qty_Cnsmd_Pieces_Sched;

   //?E15568 JBB 10/04/19 - New Code
   // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 1
   IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_1;

   // LCL.PFS Fill Qty Ship Day 1 = DB1.OD Qty/Cnsmd Pieces Sched
   LCL.PFS_Fill_Qty_Ship_Day_1 = DB1.OD_Qty_Cnsmd_Pieces_Sched;

   //?E15568 JBB 10/04/19 - New Code
   // IF DB1.Scheduled Ship Date LE PAR.PFS Fill Qty Ship Date 2
   IF DB1.Scheduled_Ship_Date <= PAR.PFS_Fill_Qty_Ship_Date_2;

   // LCL.PFS Fill Qty Ship Day 2 = DB1.OD Qty/Cnsmd Pieces Sched
   LCL.PFS_Fill_Qty_Ship_Day_2 = DB1.OD_Qty_Cnsmd_Pieces_Sched;

   ENDIF;

   //?PFS Ordered Qty from Order Detail
   //?R15794 DN 11/26/19-Get Addt'l Info from OD to Create PFS Prod Sched Dtl.
   EXECUTE FUNCTION(Rtv for Prod Sched Dtl RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2111580;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(LCL.PFS_Order_Line_Sts);
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.PFS_Ordered_Qty);
   PARAMETER(LCL.OD_Pallet_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?PFS Load Fields
   //?5/24/16 E4119 RMC Remove live with tpm
   //?PFS Load Id
   //?R15794 DN 11/26/19-Changed to Get Ship To Customer Name.
   EXECUTE FUNCTION(Rtv PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2110883;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(LCL.Ship_To_Name);
   PARAMETER(LCL.PFS_Load_ID);
   PARAMETER(NLL.Load_Truck_Departure_Date);
   PARAMETER(NLL.Load_Truck_Departure_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?PFS Loading Sequence, PFS Load Deadline Date/Time from Load Header
   //?E3787 JJH 10/26/15 - If Work Ahead, set Deadline Departure
   //?  Date/Time to ZERO.
   EXECUTE FUNCTION(RTV ScSeq/DeadDptDtTm RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2110675;
   PARAMETER(LCL.PFS_Load_ID);
   PARAMETER(LCL.PFS_Loading_Sequence);
   PARAMETER(LCL.Deadline_Departure_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // LCL.PFS Load Deadline Date = CON.*ZERO
   LCL.PFS_Load_Deadline_Date = *ZERO;

   // LCL.PFS Load Deadline Time = CON.*ZERO
   LCL.PFS_Load_Deadline_Time = *ZERO;

   //?Create the PFS Prod Sched Batch Dtl
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(LCL.PFS_Scheduled_Ship_Date);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   //?E13982 JJH 10/25/18 - Exclude Order/Items from Production Schedule
   //?E16768 JJH 08/21/20 - Prevent Combo Work Ahead if Block Order
   //?- If Combo Order/Item has Prod Qty to Fill = ZERO
   CASE;

   // IF DB1.OD Qty/Cnsmd Pieces Sched is Greater than zero
   IF DB1.OD_Qty_Cnsmd_Pieces_Sched > *ZERO;

   // AND LCL.Block Order Flag is Not Block Order
   AND LCL.Block_Order_Flag = *BLANK/'F'/'N'/'Y';

   //?R15794 DN 11/22/19-Set New DB Fields from OD & OH Files.
   EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt CR) TYPE(CRTOBJ) FILE(PBB1CPP)           AC2109265;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   PARAMETER(PAR.PFS_Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.PFS_Label_Type);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(LCL.PFS_Order_Line_Sts);
   PARAMETER(LCL.PFS_Ordered_Qty);
   PARAMETER(DB1.OD_Quantity_Inv_Sched);
   PARAMETER(DB1.OD_Qty_Cnsmd_Pieces_Sched);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(LCL.PFS_Fill_Qty_Ship_Day_2);
   PARAMETER(LCL.PFS_Load_ID);
   PARAMETER(LCL.PFS_Loading_Sequence);
   PARAMETER(LCL.PFS_Scheduled_Ship_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Date);
   PARAMETER(LCL.PFS_Load_Deadline_Time);
   PARAMETER(PAR.PFS_Item_Structure_Type);
   PARAMETER(PAR.PFS_Item_Structure_Group);
   PARAMETER(PAR.PFS_Item_Structure_Class);
   PARAMETER(PAR.PFS_Primary_UOM);
   PARAMETER(PAR.PFS_Fresh_Frozen);
   PARAMETER(PAR.PFS_Base_Converted);
   PARAMETER('W');
   PARAMETER(LCL.Palletize);
   PARAMETER(LCL.OD_Pallet_Type);
   PARAMETER(LCL.Slip_Sheet);
   PARAMETER(LCL.Ship_To_Name);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   ENDIF;

   ENDIF;

   //?USER: Exit processing

   // PAR.PFS Batch Seq = LCL.PFS Batch Seq
   PAR.PFS_Batch_Seq = LCL.PFS_Batch_Seq;

  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  // PAR.PFS Batch Seq = LCL.PFS Batch Seq
  PAR.PFS_Batch_Seq = LCL.PFS_Batch_Seq;

 }

 // PAR.PFS Batch Seq = LCL.PFS Batch Seq
 PAR.PFS_Batch_Seq = LCL.PFS_Batch_Seq;

}


//?E5496 JJH 03/30/16 - Combine Daily Production onto Work Ahead
// Call program Ext Add Alc Qty WkAhd XF.
CALL PROGRAM(Ext Add Alc Qty WkAhd XF) ('PBWTXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);

//?E5496 JJH 03/31/16 - Remove records with PFS Fill Qty Prod = 0
// Call program Ext Dlt FillQtyProd=0 XF.
CALL PROGRAM(Ext Dlt FillQtyProd=0 XF) ('PBWUXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);

//?R9035 JJH 01/30/17 - Correct Double Scheduled records
// Call program Ext Deallocated Combo XF.
CALL PROGRAM(Ext Deallocated Combo XF) ('PBWSXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);
PARAMETER(LCL.PFS_Batch_Seq);

//?Convert PFS Change Date to YYYYMMDD
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Change_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


//?PFS Process Status = Ready to Send
EXECUTE FUNCTION(Chg PFS Process Sts   RT) TYPE(CHGOBJ) FILE(PBB2CPP)           AC2110677;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Batch_Date);
PARAMETER(PAR.PFS_Batch_Time);
PARAMETER(PAR.PFS_User_ID);
PARAMETER(6);
PARAMETER(LCL.PFS_Change_Date);
PARAMETER(JOB.*Job_time);

