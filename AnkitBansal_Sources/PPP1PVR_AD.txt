// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPP1PVR
// ?Date: 14.08.2025 Time: 03:41:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?R9083 02/13/17 DN-Default Company/Warehouse.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

ENDIF;

//?USER: Load screen

//?R9083 02/13/17 DN-Set Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// DTL.ISC Warehouse Company = LCL.Company Number
DTL.ISC_Warehouse_Company = LCL.Company_Number;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.ISC Warehouse Code = LCL.Warehouse Code
DTL.ISC_Warehouse_Code = LCL.Warehouse_Code;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?R9083 06/28/17 DN-Set ISC WE Date.
// DTL.ISC Week Ending Date = CND.eq 20991231
DTL.ISC_Week_Ending_Date = 20991231;

ENDIF;

// LCL.ISC Warehouse Company = DTL.ISC Warehouse Company
LCL.ISC_Warehouse_Company = DTL.ISC_Warehouse_Company;

//?Default Grouping with User Company Default if Blanks.
CASE;

// IF LCL.ISC Warehouse Company is Equal to zero
IF LCL.ISC_Warehouse_Company = *ZERO;

// LCL.ISC Warehouse Company = LCL.Company Number
LCL.ISC_Warehouse_Company = LCL.Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER('IVFGROUP');
PARAMETER(DTL.Inv_Valuation_Group_Desc);
PARAMETER(DTL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R9083 06/28/17 DN-Get Latest WE Date.
EXECUTE FUNCTION(Rtv Last Week in file RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742385;
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get the latest week ending date in the file
 // PAR.ISC Week Ending Date = DB1.ISC Week Ending Date
 PAR.ISC_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 QUIT;

}


ENDIF;

//?USER: Validate fields

//?F4=prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.ISC Warehouse Company
IF PGM.*Cursor_field = DTL.ISC_Warehouse_Company;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.ISC_Warehouse_Company);

// IF PGM.*Cursor field <IS> DTL.ISC Warehouse Code
IF PGM.*Cursor_field = DTL.ISC_Warehouse_Code;

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(WRK.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Sel User Whse         SL.
CALL PROGRAM(Sel User Whse         SL) ('PPP2SRR');
PARAMETER(WRK.User_Code_Model);
PARAMETER(DTL.ISC_Warehouse_Code);

ENDIF;

ENDIF;

//?05/11/07 JRB Removed hard coded companies
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// OR DTL.ISC Warehouse Company is Equal to zero
OR DTL.ISC_Warehouse_Company = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

CASE;

// IF DTL.ISC Warehouse Code is Warehouse Code not Blank
IF DTL.ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER('I');
PARAMETER('R');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF DTL.ISC Warehouse Code is Warehouse Code not Blank
IF DTL.ISC_Warehouse_Code <> *BLANK;

// AND DTL.ISC Warehouse Company is not equal to zero
AND DTL.ISC_Warehouse_Company <> *ZERO;

//?PK0040 RMC 12/7/6 get Accounting Co instead of Shipping Co
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(WRK.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Accounting Company NE DTL.ISC Warehouse Company
IF WRK.Accounting_Company <> DTL.ISC_Warehouse_Company;

// Send error message - 'Warehouse &1 and Acctng Company &2 combo invalid.'
ERROR(USR3675);
MSGPARM(DTL.ISC_Warehouse_Code);
MSGPARM(DTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

//?R9083 02/13/17 DN-Set Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.ISC Warehouse Company = DTL.ISC Warehouse Company
LCL.ISC_Warehouse_Company = DTL.ISC_Warehouse_Company;

//?Default Grouping with User Company Default if Blanks.
CASE;

// IF LCL.ISC Warehouse Company is Equal to zero
IF LCL.ISC_Warehouse_Company = *ZERO;

// AND DTL.ISC Warehouse Code is Blanks
AND DTL.ISC_Warehouse_Code = *BLANK;

// LCL.ISC Warehouse Company = LCL.Company Number
LCL.ISC_Warehouse_Company = LCL.Company_Number;

ENDIF;

CASE;

// IF DTL.ISC Warehouse Code is Not Blanks
IF DTL.ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(WRK.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.ISC Warehouse Company = WRK.Accounting Company
LCL.ISC_Warehouse_Company = WRK.Accounting_Company;

ENDIF;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER('IVFGROUP');
PARAMETER(DTL.Inv_Valuation_Group_Desc);
PARAMETER(DTL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R9083 06/28/17 DN-Validate WE Date.
CASE;

// IF DTL.ISC Week Ending Date is Not Entered
IF DTL.ISC_Week_Ending_Date = *ZERO;

// DTL.ISC Week Ending Date = CND.eq 20991231
DTL.ISC_Week_Ending_Date = 20991231;

EXECUTE FUNCTION(Rtv Last Week in file RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742385;
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get the latest week ending date in the file
 // PAR.ISC Week Ending Date = DB1.ISC Week Ending Date
 PAR.ISC_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 QUIT;

}


//?R9083 06/28/17 DN-Validate WE Date.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Val Date Exists   RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742375;
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(LCL.Return_Code_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Return Code Usr = CND.Record Found
 PAR.Return_Code_Usr = 'RCDFND';

 QUIT;

}


//?Date Not Found, Throw Error Msg.
CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// LCL.Generic Message 80 USR = CONCAT(CON.ISC Week Ending Date,CON.not found.,CON.1)
LCL.Generic_Message_80_USR = 'ISC Week Ending Date' + 'not found.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Inventory Warehouse Price');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('I/C');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

// WRK.Status Flag 1  Y/N = CND.Yes
WRK.Status_Flag_1_Y_N = 'Y';

ENDIF;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.Company Number Pass   USR = DTL.ISC Warehouse Company
PAR.Company_Number_Pass_USR = DTL.ISC_Warehouse_Company;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = DTL.ISC Week Ending Date
LCL.Date_Out_80_USR = DTL.ISC_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// WRK.APR             PASS  USR = DTL.ISC End Inv Final Lbs
WRK.APR_PASS_USR = DTL.ISC_Ending_Inv_Final_Lbs;

//?R9083 02/13/17 DN-Added ISC Valuation Grouping & Desc as Input Parm.
// Call program Prt Warehouse Prices  UP.
SBMJOB;
CALL PROGRAM(Prt Warehouse Prices  UP) ('PPP3UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER(WRK.APR_PASS_USR);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.Inv_Valuation_Group_Desc);
SBMJOBOVR JOB(PRT_WHSPRC);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

