// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POU2PFR
// ?Date: 14.08.2025 Time: 12:06:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification/Changes
//?080505 slm --- Replace Item Level with the TF Class
//?Also new prompt to select this report.
//?Replace Item Level with TF Classification
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/A');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

//?Replace Item Level with TF Classification
//?SEL: Item Structure Type
CASE;

// IF PAR.Item Structure Type Code is Entered
IF PAR.Item_Structure_Type_Code <> *ZERO;

// AND PAR.Item Structure Type Code NE DB1.Item Structure Type Code
AND PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Item Structure Group
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

// AND PAR.Item Structure Group Code NE DB1.Item Structure Group Code
AND PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Item Structure Class
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

// AND PAR.Item Structure Class Code NE DB1.Item Structure Class Code
AND PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Item Type Code
CASE;

// IF DB1.Item Type Code is Packaging and Supplies
IF DB1.Item_Type_Code = 'PS';

// OR DB1.Item Type Code NE PAR.Item Type Code
OR ( DB1.Item_Type_Code <> PAR.Item_Type_Code;

// AND PAR.Item Type Code is Entered
AND PAR.Item_Type_Code <> *BLANK );

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Base/Converted/Loss
CASE;

// IF PAR.Base/Conv/Loss Item is Valid Entries
IF PAR.Base_Conv_Loss_Item = 'B'/'C'/'F'/'L';

// AND PAR.Base/Conv/Loss Item NE DB1.Base/Conv/Loss Item
AND PAR.Base_Conv_Loss_Item <> DB1.Base_Conv_Loss_Item;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: G/L Sub Code
CASE;

// IF PAR.G/L Sub Code is Entered
IF PAR.GL_Sub_Code > *BLANK;

// AND DB1.G/L Sub Code NE PAR.G/L Sub Code
AND DB1.GL_Sub_Code <> PAR.GL_Sub_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Item TF Classfication
CASE;

// IF PAR.Item TF Classification is Entered
IF PAR.Item_TF_Classification <> *BLANK;

// AND PAR.Item TF Classification NE DB1.Item TF Classification
AND PAR.Item_TF_Classification <> DB1.Item_TF_Classification;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Credit Item Status
CASE;

// IF PAR.Credit Item Status is yes
IF PAR.Credit_Item_Status = 'Y';

// AND DB1.Credit Item Status NE PAR.Credit Item Status
AND DB1.Credit_Item_Status <> PAR.Credit_Item_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Value Added Sts
CASE;

// IF PAR.Value Added Sts is yes
IF PAR.Value_Added_Sts = 'Y';

// AND DB1.Value Added Sts NE PAR.Value Added Sts
AND DB1.Value_Added_Sts <> PAR.Value_Added_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Print on Realization Sts
CASE;

// IF PAR.Print on Realization Rpt is Yes
IF PAR.Print_on_Realization_Rpt = 'Y';

// AND DB1.Print on Realization Rpt NE PAR.Print on Realization Rpt
AND DB1.Print_on_Realization_Rpt <> PAR.Print_on_Realization_Rpt;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Piece count item
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// AND DB1.Piece Count Item NE PAR.Piece Count Item
AND DB1.Piece_Count_Item <> PAR.Piece_Count_Item;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Record Status
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

// AND DB1.Record Status NE PAR.Record Status
AND DB1.Record_Status <> PAR.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Class
CASE;

// IF 1PG.Item Structure Class Code is Entered
IF X1PG_Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(X1PG_Item_Str_Class_Desc_DRV);
PARAMETER(X1PG_Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Class
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Str Class Desc DRV = CON.*All
X1PG_Item_Str_Class_Desc_DRV = *All;

ENDIF;

//?Item Structure Group
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(X1PG_Item_Str_Group_Desc_DRV);
PARAMETER(X1PG_Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Group
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Str Group Desc DRV = CON.*All
X1PG_Item_Str_Group_Desc_DRV = *All;

ENDIF;

//?Item Structure Type
CASE;

// IF 1PG.Item Structure Type Code is Entered
IF X1PG_Item_Structure_Type_Code <> *ZERO;

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(X1PG_Item_Str_Type_Desc_DRV);
PARAMETER(X1PG_Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Structure Type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Str Type Desc DRV = CON.*All
X1PG_Item_Str_Type_Desc_DRV = *All;

ENDIF;

//?G/L Sub Code
CASE;

// IF 1PG.G/L Sub Code is Entered
IF X1PG_GL_Sub_Code > *BLANK;

EXECUTE FUNCTION(G/L Sub Code Desc DRV) TYPE(DRVFLD)                            AC1705176;
PARAMETER(X1PG_G_L_Sub_Code_Desc_DRV);
PARAMETER(X1PG_Company_Number);
PARAMETER(4);
PARAMETER(PAR.GL_Sub_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Ctg Desc     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627391;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.G_L_Sub_Code_Desc_DRV);
 PARAMETER(NLL.Item_Category_Type_Number);
 PARAMETER(NLL.Item_Category_Type_Code);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?G/L Sub Code
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.G/L Sub Code Desc DRV = CON.*All
X1PG_G_L_Sub_Code_Desc_DRV = *All;

ENDIF;

//?TF Classification
CASE;

// IF 1PG.Item TF Classification is Entered
IF X1PG_Item_TF_Classification <> *BLANK;

EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
PARAMETER(X1PG_Item_TF_Classification);
PARAMETER(X1PG_TF_Classification_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?TF Classification
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.TF Classification Desc = CON.*All
X1PG_TF_Classification_Desc = *All;

ENDIF;

//?Base/Converted/Loss Item
CASE;

// IF 1PG.Base/Conv/Loss Item is Blank
IF X1PG_Base_Conv_Loss_Item = *BLANK;

// 1PG.Condition Desc. 1  USR = CON.*All
X1PG_Condition_Desc_1_USR = *All;

//?Base/Converted/Loss Item
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Base/Conv/Loss Item
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Base_Conv_Loss_Item);

ENDIF;

//?Credit Item Status
CASE;

// IF 1PG.Credit Item Status is blank
IF X1PG_Credit_Item_Status = *BLANK;

// 1PG.Condition Desc. 2  USR = CON.*All
X1PG_Condition_Desc_2_USR = *All;

//?Credit Item Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Credit Item Status
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Credit_Item_Status);

ENDIF;

//?Print on Realization
CASE;

// IF 1PG.Print on Realization Rpt EQ WRK.BLANK
IF X1PG_Print_on_Realization_Rpt = WRK.BLANK;

// 1PG.Condition Desc. 3  USR = CON.*All
X1PG_Condition_Desc_3_USR = *All;

//?Print on Realization
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Print on Realization Rpt
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Print_on_Realization_Rpt);

ENDIF;

//?Piece Count Item
CASE;

// IF 1PG.Piece Count Item is blank
IF X1PG_Piece_Count_Item = *BLANK;

// 1PG.Condition Desc. 4  USR = CON.*ALL
X1PG_Condition_Desc_4_USR = *ALL;

//?Piece Count Item
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 4  USR = Condition name of 1PG.Piece Count Item
X1PG_Condition_Desc_4_USR = RTVCND(X1PG_Piece_Count_Item);

ENDIF;

//?Value Added Sts
CASE;

// IF 1PG.Value Added Sts is blank
IF X1PG_Value_Added_Sts = *BLANK;

// 1PG.Condition Desc. 5  USR = CON.*ALL
X1PG_Condition_Desc_5_USR = *ALL;

//?Value Added Sts
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 5  USR = Condition name of 1PG.Value Added Sts
X1PG_Condition_Desc_5_USR = RTVCND(X1PG_Value_Added_Sts);

ENDIF;

//?Item type code
CASE;

// IF 1PG.Item Type Code is Blank
IF X1PG_Item_Type_Code = *BLANK;

// 1PG.Condition Name USR = CON.*ALL
X1PG_Condition_Name_USR = *ALL;

//?Item type code
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Name USR = Condition name of 1PG.Item Type Code
X1PG_Condition_Name_USR = RTVCND(X1PG_Item_Type_Code);

ENDIF;

//?Record Status
CASE;

// IF 1PG.Record Status is *blank
IF X1PG_Record_Status = *BLANK;

// 1PG.Condition Desc. 6  USR = CON.*ALL
X1PG_Condition_Desc_6_USR = *ALL;

//?Record Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 6  USR = Condition name of 1PG.Record Status
X1PG_Condition_Desc_6_USR = RTVCND(X1PG_Record_Status);

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Item Structure Type Code header format

// SUPPRESSED PRINT Item Structure Group Code header format

CASE;

IF NEW Item_Structure_Class_Code;
EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Class Desc) TYPE(RTVOBJ) FILE(OMFAREP)                     AC1663397;
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Dept/Line         RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1664090;
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.Department_Code);
PARAMETER(CUR.Production_Line_Code);
PARAMETER(CUR.Usage_Department_Code);
PARAMETER(CUR.Usage_Production_Line);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.Item Structure Type Code EQ LCL.Item Structure Type Code
IF CUR.Item_Structure_Type_Code = LCL.Item_Structure_Type_Code;

// AND CUR.Item Structure Group Code EQ LCL.Item Structure Group Code
AND CUR.Item_Structure_Group_Code = LCL.Item_Structure_Group_Code;

// AND CUR.Item Structure Class Code EQ LCL.Item Structure Class Code
AND CUR.Item_Structure_Class_Code = LCL.Item_Structure_Class_Code;

// CUR.Item Structure Type Code = CON.*ZERO
CUR.Item_Structure_Type_Code = *ZERO;

// CUR.Item Structure Type Desc = CON.*BLANK
CUR.Item_Structure_Type_Desc = *BLANK;

// CUR.Item Structure Group Code = CON.*ZERO
CUR.Item_Structure_Group_Code = *ZERO;

// CUR.Item Structure Group Desc = CON.*BLANK
CUR.Item_Structure_Group_Desc = *BLANK;

// CUR.Item Structure Class Code = CON.*ZERO
CUR.Item_Structure_Class_Code = *ZERO;

// CUR.Item Structure Class Desc = CON.*BLANK
CUR.Item_Structure_Class_Desc = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Item Structure Type Code = DB1.Item Structure Type Code
CUR.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

// LCL.Item Structure Type Code = DB1.Item Structure Type Code
LCL.Item_Structure_Type_Code = DB1.Item_Structure_Type_Code;

// CUR.Item Structure Group Code = DB1.Item Structure Group Code
CUR.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

// LCL.Item Structure Group Code = DB1.Item Structure Group Code
LCL.Item_Structure_Group_Code = DB1.Item_Structure_Group_Code;

// CUR.Item Structure Class Code = DB1.Item Structure Class Code
CUR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

// LCL.Item Structure Class Code = DB1.Item Structure Class Code
LCL.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

ENDIF;

// Print Item Structure Class Code header format
PRINT Item Structure Class Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Item Structure Class Code totals format

// SUPPRESSED PRINT Item Structure Group Code totals format

// SUPPRESSED PRINT Item Structure Type Code totals format

// SUPPRESSED PRINT Company Number totals format

