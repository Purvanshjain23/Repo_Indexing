// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUXTPFR
// ?Date: 14.08.2025 Time: 12:07:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***NOTE: Function was cloned from POK7PFR. Report is maintained
//?         specifically for Co 440 STF. Any changes here should
//?         consider changes in POK7PFR, if applicable.
//?W113879 DN 11/11/22-Get Live with PHIS Flag.
EXECUTE FUNCTION(Rtv Live with PHIS    RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC2160999;
PARAMETER(PAR.Company_Number);
PARAMETER('A');
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT ED Export Document Type header format

//?USER: Process before print of detail format

CASE;

// IF DB1.ED Document Date is Not entered
IF DB1.ED_Document_Date = *ZERO;

// CUR.Date                  USR = JOB.*Job date
CUR.Date_USR = JOB.*Job_date;

//?W113879 DN 11/11/22-Display 4 Digit Year.
// CUR.ED Document Date D8# USR = JOB.*Job date
CUR.ED_Document_Date_D8#_USR = JOB.*Job_date;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Date                  USR = DB1.ED Document Date
CUR.Date_USR = DB1.ED_Document_Date;

//?W113879 DN 11/11/22-Display 4 Digit Year.
// CUR.ED Document Date D8# USR = DB1.ED Document Date
CUR.ED_Document_Date_D8#_USR = DB1.ED_Document_Date;

ENDIF;

// LCL.Date                  USR = CUR.Date                  USR
LCL.Date_USR = CUR.Date_USR;

//?S008623 JM 11/14/23 - START
//?Print Date issued in MM/DD/YYYY
CASE;

// IF CUR.ED Document Date D8# USR is Present
IF CUR.ED_Document_Date_D8#_USR <> *ZERO;

// LCL.@Date YYYYMMDD = CVTVAR(CUR.ED Document Date D8# USR)
LCL.@Date_YYYYMMDD = CVTVAR(CUR.ED_Document_Date_D8#_USR);

// LCL.Month (Char) USR = SUBSTRING(LCL.@Date YYYYMMDD,CON.5,CON.2)
LCL.Month_Char_USR = SUBSTRING(LCL.@Date_YYYYMMDD:5:2);

// CUR.Date MM/DD/YYYY     USR = CONCAT(CUR.Date MM/DD/YYYY     USR,LCL.Month (Char) USR,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = CUR.Date_MM_DD_YYYY_USR + LCL.Month_Char_USR (*ZERO);

// CUR.Date MM/DD/YYYY     USR = CONCAT(CUR.Date MM/DD/YYYY     USR,CON./,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = CUR.Date_MM_DD_YYYY_USR + '/' (*ZERO);

// LCL.Day (Alpha) USR = SUBSTRING(LCL.@Date YYYYMMDD,CON.7,CON.2)
LCL.Day_Alpha_USR = SUBSTRING(LCL.@Date_YYYYMMDD:7:2);

// CUR.Date MM/DD/YYYY     USR = CONCAT(CUR.Date MM/DD/YYYY     USR,LCL.Day (Alpha) USR,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = CUR.Date_MM_DD_YYYY_USR + LCL.Day_Alpha_USR (*ZERO);

// CUR.Date MM/DD/YYYY     USR = CONCAT(CUR.Date MM/DD/YYYY     USR,CON./,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = CUR.Date_MM_DD_YYYY_USR + '/' (*ZERO);

// CUR.Date MM/DD/YYYY     USR = CONCAT(CUR.Date MM/DD/YYYY     USR,LCL.@Date YYYYMMDD,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = CUR.Date_MM_DD_YYYY_USR + LCL.@Date_YYYYMMDD (*ZERO);

ENDIF;

//?S008623 JM 11/14/23 - END
//?W113879 DN 11/11/22-Commented Out & Moved Below.
//?W114608 DN 12/12/22-Do NOT Populate the 3 Char Certif. Commented Out.
// CUR.USR Uom = CON.LBS
CUR.USR_Uom = 'LBS';

// WRK.ED Export Certificate Nbr = CUR.ED Export Certificate Nbr
WRK.ED_Export_Certificate_Nbr = CUR.ED_Export_Certificate_Nbr;

//?W113879 DN 11/11/22-Display Leading Zeros for Certificate #.
// CUR.ED Export Certif Nbr Txt = CVTVAR(CUR.ED Export Certificate Nbr)
CUR.ED_Export_Certif_Nbr_Txt = CVTVAR(CUR.ED_Export_Certificate_Nbr);

// WRK.ED Shipping Marks Txt = CUR.ED Shipping Marks Txt
WRK.ED_Shipping_Marks_Txt = CUR.ED_Shipping_Marks_Txt;

// WRK.ED Inspector Name = DB1.ED Inspector Name
WRK.ED_Inspector_Name = DB1.ED_Inspector_Name;

//?E04945 - Print uom "Boxes"   2.12.16
CASE;

// IF DB1.ED Total Package UOM EQ WRK.Blank for 4           USR
IF DB1.ED_Total_Package_UOM = WRK.Blank_for_4_USR;

EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1429488;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(WRK.ED_Total_Package_UOM);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Sum for later check
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
 LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = DB1.U/M - Ordered
 PAR.USR_Unit_of_Measure = DB1.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.U/M - Ordered EQ PAR.USR Unit of Measure
 IF DB1.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


// CUR.UOM Description 10  USR = Condition name of WRK.ED Total Package UOM
CUR.UOM_Description_10_USR = RTVCND(WRK.ED_Total_Package_UOM);

//?E04945 - Print uom "Boxes"   2.12.16
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.UOM Description 10  USR = Condition name of DB1.ED Total Package UOM
CUR.UOM_Description_10_USR = RTVCND(DB1.ED_Total_Package_UOM);

ENDIF;

//?S011215 JM  03/20/24 -Print Box instead of Boxes
CASE;

// IF DB1.ED Total Package UOM is Boxes
IF DB1.ED_Total_Package_UOM = 'BX';

// CUR.UOM Description 10  USR = CON.Box
CUR.UOM_Description_10_USR = 'Box';

//?S011215 JM  03/20/24 -Print Box instead of Boxes
// IF WRK.ED Total Package UOM is Boxes
IF WRK.ED_Total_Package_UOM = 'BX';

// CUR.UOM Description 10  USR = CON.Box
CUR.UOM_Description_10_USR = 'Box';

ENDIF;

EXECUTE FUNCTION(Clc Weight to Kilogram IF) TYPE(EXCINTFUN)                     AC2145548;
PARAMETER(DB1.ED_Total_Net_Weight_lbs);
PARAMETER(CUR.USR_Weight_9_1);
{
 //?Execute internal function

 //?Round Case Weight to 1 Decimal Place.
 //?RMC 10/14/19 increase precision - DO NOT DO THIS  10/16/19 PER AARON C
 // LCL.Net Weight Kg USR 11.4 = PAR.Case Weight * CON..45359 *
 LCL.Net_Weight_Kg_USR_11_4 = PAR.Case_Weight * .45359;

 // LCL.Net Weight Kilograms = LCL.Net Weight Kg USR 11.4 * CON.1 *Rounded
 LCL.Net_Weight_Kilograms = LCL.Net_Weight_Kg_USR_11_4 * 1 'H';

 // PAR.Manifest Net Weight - Kg = LCL.Net Weight Kilograms
 PAR.Manifest_Net_Weight_Kg = LCL.Net_Weight_Kilograms;

}


// CUR.Text 3 Length USR = CON.KGS
CUR.Text_3_Length_USR = 'KGS';

//?USER: On print of detail format

//?R16637 DN 10/13/20-Suppress Consignee Blank Address Lines.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.ED Consignee Addr 3 USR = CUR.ED Consignee Addr 3
CUR.ED_Consignee_Addr_3_USR = CUR.ED_Consignee_Addr_3;

EXECUTE FUNCTION(Fmt Suppress Addr LineCHN) TYPE(EXCINTFUN)                     AC2219301;
PARAMETER(CUR.ED_Consignor_Addr_2);
PARAMETER(CUR.ED_Consignor_Addr_3);
PARAMETER(CUR.ED_Consignor_Addr_4);
PARAMETER(CUR.ED_Consignor_State);
PARAMETER(CUR.ED_Consignor_Postal);
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3_USR);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
PARAMETER(CUR.Consignor_Country_Desc_U);
PARAMETER(CUR.Consignee_Country_Desc_U);
{
 //?Execute internal function

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignor Addr 2 is Not Blank
 IF PAR.ED_Consignor_Addr_2 <> *BLANK;

 // AND PAR.ED Consignor Addr 3 is Not Blank
 AND PAR.ED_Consignor_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignor Addr 4 is Not Blank
 IF PAR.ED_Consignor_Addr_4 <> *BLANK;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,CON.,,CON.*ZERO)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + ',' (*ZERO);

 EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1287387;
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(LCL.Description_30_usr_CAPS);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program CVT to Upper w/SpclChr XF.
 CALL PROGRAM(CVT to Upper w/SpclChr XF) ('PMREXFR');
 PARAMETER(LCL.Description_30_usr_CAPS);
 PARAMETER(LCL.ALT_After_Value_Alpha);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,LCL.ALT After Value Alpha,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + LCL.ALT_After_Value_Alpha (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignor Addr 2 is eq blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 3 = CON.*BLANK
 PAR.ED_Consignor_Addr_3 = *BLANK;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,CON.,,CON.*ZERO)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + ',' (*ZERO);

 EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1287387;
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(LCL.Description_30_usr_CAPS);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program CVT to Upper w/SpclChr XF.
 CALL PROGRAM(CVT to Upper w/SpclChr XF) ('PMREXFR');
 PARAMETER(LCL.Description_30_usr_CAPS);
 PARAMETER(LCL.ALT_After_Value_Alpha);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,LCL.ALT After Value Alpha,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + LCL.ALT_After_Value_Alpha (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignor Addr 2 is Blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 // IF PAR.ED Consignor Addr 3 is Blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_3 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignee Addr 2 is Not Blank
 IF PAR.ED_Consignee_Addr_2 <> *BLANK;

 // AND PAR.ED Consignee Addr 3 is Not Blank
 AND PAR.ED_Consignee_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignee Addr 4 is Not Blank
 IF PAR.ED_Consignee_Addr_4 <> *BLANK;

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignee Addr 2 is eq blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 3 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_3 = LCL.USR_Blank_Field;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 //?S17055 DN 04/06/21-Concat Consignee State & Zip if Entered.
 CASE;

 // IF PAR.ED Consignee Postal is Entered
 IF PAR.ED_Consignee_Postal <> *BLANK;

 //?Get State for Domestic Address Else Concat Only Zip Code.
 CASE;

 // IF PAR.ED Consignee State is State code not Blanks
 IF PAR.ED_Consignee_State <> *BLANK;

 // AND PAR.ED Consignee State is Not International
 AND PAR.ED_Consignee_State <> '.';

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee State
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_State;

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 //?Get State for Domestic Address Else Concat Only Zip Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee Postal
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Postal;

 ENDIF;

 //?Concat State/Zip to Last Non Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 3 is Not Blank
 IF PAR.ED_Consignee_Addr_3 <> *BLANK;

 // PAR.ED Consignee Addr 3 = CONCAT(PAR.ED Consignee Addr 3,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3 + LCL.ED_Consignee_Addr_4 (1);

 //?Concat State/Zip to Last Non Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Must Concat on Address 2 Line.
 // PAR.ED Consignee Addr 2 = CONCAT(PAR.ED Consignee Addr 2,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2 + LCL.ED_Consignee_Addr_4 (1);

 ENDIF;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignee Addr 2 is Blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 // IF PAR.ED Consignee Addr 3 is Blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_3 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Get Consignor Country Desc.
 CASE;

 // IF PAR.ED Consignor Country Code is Entered
 IF PAR.ED_Consignor_Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.Consignor_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Country Code = CND.USA
 LCL.Country_Code = 'USA';

 //?Print full country UNITED STATES.
 CASE;

 // IF PAR.Consignor Country Desc U EQ LCL.Country Code
 IF PAR.Consignor_Country_Desc_U = LCL.Country_Code;

 // PAR.Consignor Country Desc U = CON.UNITED STATES
 PAR.Consignor_Country_Desc_U = 'UNITED STATES';

 ENDIF;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignor Addr 3 is eq blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_3 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 // PAR.ED Consignor Addr 4 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_4 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

 //?Get Consignee Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is Entered
 IF PAR.ED_Consignee_Country_Code <> *BLANK;

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is China
 IF PAR.ED_Consignee_Country_Code = 'CHN';

 // PAR.Consignee Country Desc U = CONCAT(CON.THE PEOPLE'S REPUBLIC OF,CON.CHINA,CON.1)
 PAR.Consignee_Country_Desc_U = 'THE PEOPLE'S REPUBLIC OF' + 'CHINA' (1);

 // PAR.ED Consignee Addr 3 = CONCAT(PAR.ED Consignee Addr 3,PAR.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3 + PAR.ED_Consignee_Addr_4 (1);

 CASE;

 // IF PAR.ED Consignee Addr 3 is eq blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_3 = PAR.Consignee_Country_Desc_U;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignee Addr 4 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_4 = PAR.Consignee_Country_Desc_U;

 ENDIF;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.Consignee_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignee Addr 3 is eq blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_3 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 // PAR.ED Consignee Addr 4 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_4 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt MPD Dtlw/oMtLGLCmbCHN
EXECUTE FUNCTION(Prt MPD Dtlw/oMtLGLCmbCHN) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Shipping_Marks_Txt);
PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(PAR.USR_Overflow);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT ED Export Document Type totals format

CASE;

IF NEW Order_Number;
// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

CASE;

IF NEW Company_Number;
// CUR.ED Inspector Name = WRK.ED Inspector Name
CUR.ED_Inspector_Name = WRK.ED_Inspector_Name;

// CUR.ED Certify that the meat = CND.Not Entered
CUR.ED_Certify_that_the_meat = *BLANK;

// Print Company Number totals format
PRINT Company Number totals format;

//?Embedded PRTOBJ : Prt MPD Dtl Overfl CmbCHN
EXECUTE FUNCTION(Prt MPD Dtl Overfl CmbCHN) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(WRK.ED_Shipping_Marks_Txt);
PARAMETER(CUR.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(WRK.ED_Export_Certificate_Nbr);
PARAMETER(LCL.Date_USR);
PARAMETER(CUR.ED_Inspector_Name);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

