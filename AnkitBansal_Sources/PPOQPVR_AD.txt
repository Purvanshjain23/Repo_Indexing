// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPOQPVR
// ?Date: 14.08.2025 Time: 03:41:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
PARAMETER(WRK.Name);
PARAMETER(WRK.System_Value_Alpha);
PARAMETER(WRK.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


//?USER: Load screen

CASE;

// IF DTL.ISC Warehouse Company is Equal to zero
IF DTL.ISC_Warehouse_Company = *ZERO;

// DTL.ISC Warehouse Company = WRK.Company Number
DTL.ISC_Warehouse_Company = WRK.Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(DTL.Company_Name_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process command keys

//?R9083 02/21/17 DN-Commented Out Company Prompt Capability.
//?USER: Validate fields

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(DTL.Company_Name_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R9083 02/21/17 DN-Modified to Also RST by Inv Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Status-1st   RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1738968;
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(WRK.ISC_Post_Balance_Sts);
PARAMETER(WRK.ISC_Post_Warehouse_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?get the 1st rcds status. all should be the same per co
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Inventory Stock Closing not found.'
ERROR(USR3529);

ENDIF;

CASE;

// IF WRK.ISC Post Balance Sts is Posted
IF WRK.ISC_Post_Balance_Sts = 'P';

//?RMC 10/10/07 ok to repost UNTIL IVF is posted.
ENDIF;

// LCL.ISC Week Ending Date = DTL.ISC Week Ending Date + CON.-7 *DAYS
LCL.ISC_Week_Ending_Date = DATEINCR(DTL.ISC_Week_Ending_Date '-7' 'DY' 1111111 'NONE'              +
'N' 1);

//?R9083 02/21/17 DN-Modified to Also RST by Inv Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Status-1st   RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1738968;
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(LCL.ISC_Week_Ending_Date);
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(LCL.ISC_Post_Balance_Sts);
PARAMETER(LCL.ISC_Post_Warehouse_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?get the 1st rcds status. all should be the same per co
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Check last week's post sts
CASE;

// IF LCL.ISC Post Balance Sts is Open
IF LCL.ISC_Post_Balance_Sts = 'O';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Error: Post has not been done for previous week &1, group &2.'
ERROR(USR3540);
MSGPARM(LCL.ISC_Week_Ending_Date);
MSGPARM(DTL.ISC_Valuation_Grouping);

ENDIF;

//?Weekly Prod Rev Close must be Posted (final)   : Sts = Y = posted
//?Uncommented 12/22/05 RMC per AMB
// Call program VRY Dte is Closed Rev UP.
CALL PROGRAM(VRY Dte is Closed Rev UP) ('TF812');
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(WRK.Status_Flag_1_Y_N);

CASE;

// IF WRK.Status Flag 1  Y/N is Yes
IF WRK.Status_Flag_1_Y_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?RMC - new 01/10/07  can repost until IVF posted
// WRK.IVF Post Inventory Sts = CND.Open
WRK.IVF_Post_Inventory_Sts = 'O';

//?R9083 02/21/17 DN-Modified to Also RST by Inv Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Inv Sts-1st  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740674;
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(WRK.IVF_Post_Inventory_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Post Inventory Sts is Posted or Reposted
IF WRK.IVF_Post_Inventory_Sts = 'P'/'R';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Invalid Option. Inventory Value File has been posted for group &2.'
ERROR(USR3614);
MSGPARM(WRK.*SFLSEL);
MSGPARM(DTL.ISC_Valuation_Grouping);

ENDIF;

//?USER: User defined action

//?R9083 05/09/17 DN-Added IVG as Input Parm.
// Call program Exc Post Closing Bal  XF.
CALL PROGRAM(Exc Post Closing Bal  XF) ('PPOOXFR');
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(PAR.Week_End_Date);

// PAR.Post Flag USR = CND.Yes
PAR.Post_Flag_USR = 'Y';

