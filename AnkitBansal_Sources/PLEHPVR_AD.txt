// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLEHPVR
// ?Date: 14.08.2025 Time: 02:53:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.BOH Company Number = WRK.CC Company Number
DTL.BOH_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Deferral Dtl/Sum Usr = CND.Detail
DTL.Deferral_Dtl_Sum_Usr = 'D';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// DTL.Oms Name = WRK.Oms Name
DTL.Oms_Name = WRK.Oms_Name;

// DTL.Deferred Payment Dsc Usr = Condition name of DTL.Deferral Dtl/Sum Usr
DTL.Deferred_Payment_Dsc_Usr = RTVCND(DTL.Deferral_Dtl_Sum_Usr);

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.DED D/A Code
AND PGM.*Cursor_field = DTL.DED_D_A_Code;

// Call program Sel D/A               SR.
CALL PROGRAM(Sel D/A               SR) ('PKCUSRR');
PARAMETER(DTL.DED_D_A_Code);
PARAMETER('Y');

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Producer Code         USR
AND PGM.*Cursor_field = DTL.Producer_Code_USR;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.Producer_Code_USR);

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.Producer_Code_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// WRK.DED Deferred Payment = CND.No
WRK.DED_Deferred_Payment = 'N';

//?Validate From Kill date.
CASE;

// IF DTL.TH Kill Date is Enter Kill Date
IF DTL.TH_Kill_Date > *ZERO;

// AND PGM.*Record selected is *YES
AND PGM.*Record_selected = 'Y';

CASE;

// IF DTL.TH Kill Date LE DTL.Kill Date Usr
IF DTL.TH_Kill_Date <= DTL.Kill_Date_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.TH_Kill_Date);
MSGPARM(DTL.Kill_Date_Usr);

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?find out if this is a error
ENDIF;

//?Validate From Kill date.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date is required.'
ERROR(PRK0772);
MSGPARM(DTL.TH_Kill_Date);

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?find out if this is a error
ENDIF;

//?Validate to Kill date.
CASE;

// IF DTL.Kill Date Usr is Entered
IF DTL.Kill_Date_Usr <> 0;

// AND PGM.*Record selected is *YES
AND PGM.*Record_selected = 'Y';

CASE;

// IF DTL.Kill Date Usr GE DTL.TH Kill Date
IF DTL.Kill_Date_Usr >= DTL.TH_Kill_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - '&1 must be less than or equal to &2'
MESSAGE(PRK1084 *INFO);
MSGPARM(DTL.TH_Kill_Date);
MSGPARM(DTL.Kill_Date_Usr);

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Validate to Kill date.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date is required.'
ERROR(PRK0772);
MSGPARM(DTL.TH_Kill_Date);

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Def Pay W/O BO    Rtv) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1259035;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.DED_D_A_Code);
PARAMETER(WRK.Deferral_Payment_USR);
{
 //?USER: Initialize routine

 // PAR.Deferral Payment USR = CON.*ZERO
 PAR.Deferral_Payment_USR = *ZERO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.DED D/A Code EQ PAR.DED D/A Code
 IF DB1.DED_D_A_Code = PAR.DED_D_A_Code;

 CASE;

 // IF DB1.TH Kill Date LT PAR.TH Kill Date
 IF DB1.TH_Kill_Date < PAR.TH_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF DB1.TH Kill Date GT PAR.Kill Date Usr
 IF DB1.TH_Kill_Date > PAR.Kill_Date_Usr;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 QUIT;

 ENDIF;

 // IF DB1.DED D/A Code NE PAR.DED D/A Code
 IF DB1.DED_D_A_Code <> PAR.DED_D_A_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Deferral Payment Amt  Usr = DB1.THD Ded/Add Amount + PAR.Deferral Payment Amt  Usr
 PAR.Deferral_Payment_USR = DB1.THD_Ded_Add_Amount + PAR.Deferral_Payment_USR;

 ENDIF;

}


CASE;

// IF WRK.Deferral Payment USR EQ WRK.Zero USR
IF WRK.Deferral_Payment_USR = WRK.Zero_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Deferral Payments Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(PRK0812);
PARAMETER('PRTDEFPAY');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*NO);

// Call program Zzz Deferral Payments CL.
SBMJOB;
CALL PROGRAM(Zzz Deferral Payments CL) ('PLEJUPC');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.Producer_Code_USR);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.DED_D_A_Code);
PARAMETER(DTL.Deferral_Dtl_Sum_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.Oms_Name);
SBMJOBEND;

ENDIF;

