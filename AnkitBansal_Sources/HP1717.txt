      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1717
      * TITLE:       Maintain Order Request
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     07/14/04
      *
      *
      * FUNCTION: Because of the 'Hold an Order' requirement, we had to make 2 different
      *           sets of rules for orders. So, we have 2 different Maintenance programs.
      *
      *           The program is used to:
      *             1) create ALL new orders
      *             2) maintain HOLD orders
      *             3) maintain ERROR orders
      *
      *           This program is called from:
      *                HP4718-Work with Order Requests.
      *
      *           It does not have selectors or positioners.
      *           It has F4-Prompt logic.
      *           It uses the standard message handling program.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      *
      * 02/14/05  LeAnne Fedor
      *           Rewrote.
      *
      * 04/04/05  LeAnne Fedor
      *           Recompile only (we changed the screen heading in the DSPF).
      *           This program is now used to maintain both HOLD and ERROR requests.
      *
      * 01/17/06  LeAnne Fedor
      *           The users do not want to enter the Request Date. We will populate it
      *           with the System Date.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1717   cf   e             workstn sfile(hp1717S1:hdrrn1)
     F                                     infds(iofeed)
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsp181    if   e           k disk
      *    Item
      *
      *
     Fhsj189j   if   e           k disk
      *    Farm budget detail + farm budget header
      *
      *
     Fhsp190    if   e           k disk
      *    Override reason codes
      *
      *
     Fhsp192    uf a e           k disk
      *    Request header
      *
      *
     Fhsl192a   if   e           k disk    rename(qhrec:qhreca)
      *    Request header
      *
      *
     Fhsl193d   uf a e           k disk
      *    Request detail
      *
      *
     Fhsp194    if   e           k disk
      *    Request status codes
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D itcd            s              6    dim(100)
     D bgit            s             25    dim(100)
     D apqt            s             11  4 dim(100)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D reset           s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
      *
      *
      * Workfields
      *
     D wkitcd          s                   like(qditcd)
     D wklnno          s                   like(qdlnno)
     D wkrqqt          s                   like(qdrqqt)
     D wkapqt          s                   like(qdrqqt)
     D wkrqscd         s                   like(qdrqscd)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkdiff          s                   like(count)
     D wkrmdr          s                   like(count)
     D wkfld           s                   like(count)
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      *
      * Control fields
      *
     D holdfl          s              1
     D entryfl         s              1
     D norecs          s              1    inz('N')
     D warmsg          s              2  0
      *
      *
      *
      * Work fields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkrqdt          s              8  0
     D wkcrupdt        s              8  0
     D wkcrupmdy       s              6  0
      *
      *
      *
      * Parms
      *
     D xxrqsn          s                   like(qdrqsn)
     D xxalphfscd      s              5
      *
     D xxaist          s              1
     D xxfscd          s                   like(fsfscd)
     D xxfsnm          s                   like(fsfsnm)
      *
     D xxitcd          s                   like(d1itcd)
     D xxitds          s                   like(d1itds)
      *
     D xxorcd          s                   like(d1orcd)
     D xxords          s                   like(orords)
      *
     D xxbgqt          s                   like(qdrqqt)
     D xxqt            s                   like(qdrqqt)
     D xxavqt          s                   like(qdrqqt)
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
     D w               s              3  0
     D z               s              3  0
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *
      * Definition for external data area 'DARQSN' for assigning the next request number
      *
     Dnextrqsn         s              7  0 dtaara(darqsn)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * If the user is in Create mode, clear the control record fields.
      * AND, default the System Date into the Request Date field.
      *
     C                   select
     C                   when      mode = create                                When create
     C                   move      *blank        c1wo
     C                   z-add     0             c1fscd
     C                   move      *blank        c1fsnm
     C                   z-add     wkcrupmdy     c1mdy
     C                   z-add     wkcrupdt      wkrqdt
     C                   move      *blank        c1com
      *
      * Verify that the Request the user selected still exists.
      * If it still exists, get descrptions to display; otherwise,
      * issue an error message
      *
     C                   when      mode = revise
     C     xxrqsn        chain(n)  hsp192                             92
     C                   if        *in92 = *off                                 If found
     C                   move      qhwo          c1wo
     C                   z-add     qhfscd        c1fscd
     C                   move      qhcom         c1com
     C                   move      qhrqscd       wkrqscd
     C                   exsr      $desc
     C                   else
      *
     C                   move      yes           norecs
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif
     C                   endif                                                  If found
     C                   endsl
      *
      * Clear/fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the page of the subfile to display
      *
     C                   select
     C                   when      wkflow = 0 and error = 0
     C                   z-add     1             hdpag1
      *
     C                   when      reset = yes and wkflow <= hdrrn1
     C                   z-add     wkflow        hdpag1
     C                   endsl
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     hp1717k1
     C                   write     hp1717ec
     C                   exfmt     hp1717c1
      *
      * Set off the error indicators in the control record
      *
     C                   setoff                                       303252
      *
      * Set off the error indicators in the subfile
      *
     C                   exsr      $sfloff
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   z-add     idflow        wkflow
     C                   move      no            reset
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      norecs = yes
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   if        error = 0 or error = warmsg
     C                   exsr      $accept
     C                   endif
      *
     C                   when      *in11 = *on                                  F11-delete
     C                   exsr      $dlthdr
     C                   exsr      $dltdtl
     C                   eval      rtncd = '00'
     C                   eval      routne = exit
      *
     C                   when      *in14 = *on                                  F14-open hdr
     C                   setoff                                       63
     C                   eval      routne = scrn1
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   seton                                        63
     C                   eval      wkdiff = idflow + wkplin
     C                   if        hdrrn1 >= wkdiff                             If something
     C                   else
     C                   eval      hdrrn1 = count
     C                   exsr      $sfloff
     C                   exsr      $clrln
     C                   do        wkplin                                       Do fill
     C                   exsr      $blank
     C                   enddo                                                  Do fill
     C                   endif                                                  If something
     C                   eval      routne = scrn1
     C                   other
      *
      * User pressed ENTER
      *
     C                   exsr      $edit1
     C                   movel     scrn1         routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Subroutine to edit input fields on screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Edit the control record
      *
     C                   exsr      $edc1
      *
      * Edit the subfile if there are no errors in the control record.
      * If there are errors in the control record, you need to rewrite
      * all subfile records with the error indicators off.
      *
     C                   if        error = 0
     C                   exsr      $eds1
     C                   else
     C                   exsr      $rewrtsfl
     C                   endif
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Control record edits
      *---------------------------------------------------------------
      *
     C     $edc1         begsr
      *
     C                   setoff                                       63
      * Validate:
      *     Work order number
      *     Farm site
      *
     C                   exsr      $wo
     C                   exsr      $fscd
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Work Order number
      *----------------------------------------------------------------
      *
     C     $wo           begsr
      *
     C                   select
     C                   when      c1wo = *blank
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
      * Work Order number cannot already exist in the Request Header file.
      *
     C     c1wo          chain     hsl192a                            92
     C                   if        *in92 = *off and qhrqsn <> xxrqsn
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04773'     mgid(e)
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Farm Site
      *----------------------------------------------------------------
      *
     C     $fscd         begsr
      *
     C                   move      *blank        c1fsnm
      *
     C                   select
     C                   when      c1fscd = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
      *
     C                   when      c1fscd < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
      * Check that farm site exists
      *
     C     c1fscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00131'     mgid(e)
     C                   clear                   mgw
     C                   move      c1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   else
      *
     C                   movel(p)  fsfsnm        c1fsnm
      *
      * Farm site must be 'Active'
      *
     C                   if        fsaist <> 'A'                                If not active
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04760'     mgid(e)
     C                   clear                   mgw
     C                   move      c1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not active
      *
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Retrieve descriptions for various fields in the Control Record
      *----------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Retrieve Farm Site name
      *
     C     c1fscd        chain     hsp018                             92
     C                   if        *in92 = *off                                 If found
     C                   movel(p)  fsfsnm        c1fsnm
     C                   else
     C                   eval      c1fsnm = 'Unknown'
     C                   endif                                                  If found
      *
      * Flip Request Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 qhrqdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      qhrqdt        wkcymdiso
     C     *mdy          move      wkcymdiso     c1mdy
     C                   z-add     qhrqdt        wkrqdt
     C                   endif                                                  If OK date
      *
      *
      * Retrieve Request Status description
      *
     C     wkrqscd       chain     hsp194                             92
     C                   if        *in92 = *off                                 If found
     C                   move      rqrqsds       c1rqsds
     C                   else
     C                   eval      c1rqsds = 'Unknown'
     C                   endif                                                  If found
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Edit subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $eds1         begsr
      *
      * Initialize the item array
      *
     C                   move      *blank        itcd
     C                   z-add     0             y
     C                   z-add     0             x
      *
     C                   move      *blank        bgit
     C                   z-add     0             apqt
     C                   z-add     0             w
     C                   z-add     0             z
      *
      * Set the flag that will determine whether the user keyed any subfile entries.
      * And, initialize the field sued to count 'warning' messages.
      *
     C                   move      no            holdfl
     C                   move      no            entryfl
     C                   z-add     0             warmsg
      *
      *
      * Read/process all changed subfile records
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp1717s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set on MDT
      * Set off error indicators in the subfile
      *
     C                   seton                                        85
     C                   exsr      $sfloff
      *
      *
      * If there are no user entries for the subfile record, clear the line.
      *
     C                   if        d1itcd = *blank and                          If entry
     C                             d1rqqt = 0 and
     C                             d1orcd = *blank and
     C                             d1com  = *blank
     C                   exsr      $clrln
     C                   else
      *
     C                   move      yes           entryfl
     C                   z-add     0             d1avqt
      *
      * Validate Item
     C                   exsr      $itcd
      *
      * If Item was valid, validate:
      *  1) quantity
      *  2) override reason
      *
     C                   if        *in33 = *off
     C                   exsr      $rqqt
     C                   exsr      $orcd
     C                   endif
     C                   endif                                                  If entry
      *
      * Reset indicators
     C                   exsr      $ind
     C                   exsr      $sflorcd
     C                   exsr      $sflapqt
     C                   update    hp1717s1
     C                   exsr      $sfloff
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      * Set MDT
     C                   setoff                                       85
      *
      *---------------------------------------------------------------
      * After all subfile records have been edited, issue an error
      * message if there are no subfile entries.
      *---------------------------------------------------------------
      *
     C                   if        entryfl = no and                             If nothing
     C                             error < maxmsg
     C                   add       1             error
     C                   movel     'HS04775'     mgid(e)
     C                   endif                                                  If nothing
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------
      * Validate Item
      *-------------------------------------------------------------------
      *
     C     $itcd         begsr
      *
     C                   select
     C                   when      d1itcd = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Item must exist in Item Master
      *
     C                   move      *blank        d1itds
     C                   movel(p)  d1itcd        wkitcd
     C     wkitcd        chain     hsp181                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04776'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      * Item is valid in the Item Master, so continue other validations.
      *
      * Item cannot be Inactive
      *
     C                   move      imitds        d1itds
     C                   if        imaist = 'I'                                 If inactive
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04777'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If inactive
      *
      *
      * If budgetable, item must be on a currently ACTIVE budget for
      * the Farm.
     C                   if        imbgfl = yes                                 If budgetable
     C                   exsr      $actbud
     C                   endif                                                  If budgetable
      *
      * Item cannot be keyed twice in the subfile.
      *
     C                   if        *in33 = *off                                 If OK so far
     C                   z-add     1             x
     C     d1itcd        lookup    itcd(x)                                92
     C                   if        *in92 = *off                                 If not there
     C                   move      imbgfl        d1bgfl
     C                   move      imcritfl      d1critfl
     C                   z-add     imvol         hdvol
     C                   move      imbgit        hdbgit
     C                   add       1             y
     C                   move      d1itcd        itcd(y)
      *
     C                   if        d1itcd <> hditcd
     C                   move      d1itcd        hditcd
     C                   z-add     0             d1apqt
     C                   endif
      *
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04779'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not there
     C                   endif                                                  If OK so far
      *
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Check that an Item is on an Active Budget for the Farm
      *-------------------------------------------------------------------
      *
     C     $actbud       begsr
      *
     C     key01         chain     hsj189j                            92
     C                   if        *in92 = *off                                 If active
     C                   z-add     jhfbsn        hdfbsn
     C                   else
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04780'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If active
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Quantity
      *-------------------------------------------------------------------
      *
     C     $rqqt         begsr
      *
     C                   if        hdrqqt <> d1rqqt
     C                   z-add     0             d1apqt
     C                   z-add     d1rqqt        hdrqqt
     C                   endif
      *
     C                   select
     C                   when      d1rqqt < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1rqqt = 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Check available quantities for budgetable items.
      *
     C                   if        d1bgfl = yes
     C                   exsr      $avail
     C                   else
     C                   z-add     d1rqqt        d1apqt
     C                   z-add     0             d1avqt
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Available Quantity
      *-------------------------------------------------------------------
      *
     C     $avail        begsr
      *
      * Call the program to see whats been used on other requisitions.
      *
     C                   call      'HP8700'
     C                   parm                    hdfbsn
     C                   parm                    hdbgit
     C                   parm                    wkrqdt
     C                   parm      0             xxbgqt
     C                   parm      0             xxqt
     C                   parm      0             xxavqt
      *
      * The above gives you data from existing work orders. Now,
      * retrieve/subtract Approved Quantities on records already entered in the
      * subfile for a 'Budget Item'.
      *
     C                   z-add     1             w
     C     hdbgit        lookup    bgit(w)                                92
     C                   if        *in92 = *on                                  If in array
     C                   sub       apqt(w)       xxavqt
     C                   endif                                                  If in array
      *
      * If this Item involves 'Volume':
      *   Do the "unvolume" thing on the Available Quantity for display.
      *   Do the "volume"   thing on the Requested Quantity for calcs.
      *
     C                   if        hdvol = 0
     C                   z-add     xxavqt        d1avqt
     C                   z-add     d1rqqt        wkrqqt
     C                   else
     C                   eval      d1avqt = xxavqt / hdvol
     C                   eval      wkrqqt = d1avqt * hdvol
     C                   endif
      *
      *
      * Base the next editing logic on whether this Item is:
      *  1) critical
      *  2) not critical
      *
     C                   if        d1critfl = yes
     C                   exsr      $critical
     C                   else
     C                   exsr      $notcrit
     C                   endif
      *
      *
      * Always load the Approved Quantity from the subfile into the array
      * (after doing the 'volume' thing).
      *
     C                   if        hdvol = 0
     C                   z-add     d1apqt        wkapqt
     C                   else
     C     hdvol         mult      d1apqt        wkapqt
     C                   endif
      *
     C                   z-add     1             w
     C     hdbgit        lookup    bgit(w)                                92
     C                   if        *in92 = *on                                  If in array
     C                   add       wkapqt        apqt(w)
     C                   else
     C                   add       1             z
     C                   move      hdbgit        bgit(z)
     C                   z-add     wkapqt        apqt(z)
     C                   endif                                                  If in array
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate a 'critical' item
      *-------------------------------------------------------------------
      *
     C     $critical     begsr
      *
      *
      * We don't know how many times this line has already been edited. So, here
      * we are trying to decide whether a value in the 'approved quantity' field is
      * one the user entered or one that we defaulted in.
      * So, when:
      *   1)  'Approved Qty' is zero, or
      *   2)  'Requested Qty' is different from the hidden requested quantity, or
      *   3)  'Item Code' is different from the hidden item code
      * Default the Requested Qty into the Approved Qty field.
      *
     C                   select
     C                   when      d1apqt = 0 or
     C                             d1rqqt <> hdrqqt or
     C                             d1itcd <> hditcd
     C                   z-add     d1rqqt        d1apqt
     C                   other
      *
      * If you are here, edit the Approved Quantity---cause we think this is
      * a value that the user keyed in.
      *
     C                   exsr      $apqt
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Item is overbudget but NOT critical
      *-------------------------------------------------------------------
      *
     C     $notcrit      begsr
      *
      * When there is NO available quantity
      *
     C                   if        xxavqt <= 0                                  If non available
     C                   z-add     0             d1apqt
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04790'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      * If the Requested Qty is less than/equal to the Available Qty,
      * set the Approved Qty equal to the Requested Qty.
      *
     C                   select
     C                   when      wkrqqt <=  xxavqt
     C                   z-add     d1rqqt        d1apqt
      *
      * We don't know how many times this line has already been edited. So, if:
      *   'Approved Qty' is zero
      *   'Requested Qty' is different from the hidden qty in the subfile line
      *   'Item Code' is different from the hidden item code in the subfile line
      * then default the Available Qty into the Approved Qty field and issue an
      * FYI mesage.
      *
     C                   when      d1apqt = 0 or
     C                             d1rqqt <> hdrqqt or
     C                             d1itcd <> hditcd
     C                   exsr      $fyimsg
     C                   other
      *
      * If you are here, edit the Approved Quantity---cause we think the user
      * keyed over any value we defaulted into it.
      *
     C                   exsr      $apqt
     C                   endsl
      *
     C                   endif                                                  If non available
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------
      * Default the Available into the Approved Qty and give the FYI message
      *----------------------------------------------------------------------
      *
     C     $fyimsg       begsr
      *
      * Do an unvolume thing (if necessary)
      *
     C                   if        hdvol = 0
     C                   z-add     xxavqt        d1apqt
     C                   else
     C                   eval      d1apqt = xxavqt / hdvol
     C                   endif
      *
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   add       1             warmsg
     C                   eval      mgid(e) = 'HS04789'
     C                   exsr      $err1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------
      * Edit the Approved Quantity value keyed by the user
      *----------------------------------------------------------------------
      *
      * This subroutine is used for both 'critical' and 'not critical' items.
      *
     C     $apqt         begsr
      *
     C                   select
     C                   when      d1apqt < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   exsr      $err1
     C                   endif
      *
      * This Item is Not Critical and the Approved Quantity that they
      * have keyed is greater than the Available Quantity.
      *
     C                   when      d1apqt > d1avqt and
     C                             d1critfl <> yes
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   add       1             warmsg
     C                   eval      mgid(e) = 'HS04789'
     C                   exsr      $err1
     C                   endif
      *
      *
      * This Item is Critical; so, they can get as much as they want.
      * BUT, the Approved Quantity that they have keyed is greater than
      * the Requested Quantity that they keyed.
      *
     C                   when      d1apqt > d1rqqt and
     C                             d1critfl = yes
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   add       1             warmsg
     C                   eval      mgid(e) = 'HS04802'
     C                   exsr      $err1
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Override Reason
      *-------------------------------------------------------------------
      *
     C     $orcd         begsr
      *
     C                   select
     C                   when      d1apqt <= d1avqt or
     C                             d1critfl = no or
     C                             d1bgfl = no
     C                   move      *blank        d1orcd
      *
      *
     C                   when      d1critfl = yes and
     C                             d1apqt > d1avqt and
     C                             d1orcd = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             warmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04793'
     C                   exsr      $err1
     C                   endif
     C                   endsl
      *
      * If there are no errors so far and the user has entered a value,
      * check that it is valid in the master file.
      *
     C                   if        *in35 = *off and d1orcd <> *blank            If check file
     C     d1orcd        chain     hsp190                             92
     C                   if        *in92 = *on
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04765'
     C                   exsr      $err1
     C                   endif
     C                   endif
     C                   endif                                                  If check file
      *
      * If a Critical Item is Over-budget and the user:
      *   Did not enter an Override Reason, set the Hold Flag to YES
      *
     C                   if        d1critfl = yes and                           If crit/over
     C                             d1apqt > d1avqt and
     C                             d1orcd = *blank
     C                   move      yes           holdfl
     C                   endif                                                  If crit/over
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   eval      hdrrn1 = 0
     C                   eval      count = 0
      *
     C                   clear                   hp1717s1
     C                   seton                                        83        sflclr
     C                   write     hp1717c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set indicators to control/protect screen fields
      *
     C                   exsr      $ind
      *
      * Loading the sbufile in this program is different than subfiles in
      * Work With programs and depends on the 'MODE'.
      * For CREATE mode, load a page of blank lines.
      * For REVISE mode, load a page of database records and, if you hit EOF,
      *                  finish loading the page with blank lines.
      *
     C                   select
     C                   when      mode = create
     C                   exsr      $sfloff
     C                   exsr      $clrln
     C                   do        wkplin
     C                   exsr      $blank
     C                   enddo
      *
     C                   when      mode = revise
     C     xxrqsn        setll     hsl193d
     C                   dou       *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
      * Fill up the subfile page with blank lines if necessary
      *
     C                   if        wkplin <> 0 and wkplin <> count
     C     count         div       wkplin        wkfld
     C                   mvr                     wkrmdr
     C                   eval      wkdiff = wkplin - wkrmdr
     C                   exsr      $sfloff
     C                   exsr      $clrln
     C                   do        wkdiff
     C                   exsr      $blank
     C                   enddo
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Retrieve request detail records.
      *
     C     xxrqsn        reade(n)  hsl193d                                82
     C                   if        *in82 = *off                                 If not EOF
     C                   seton                                        85
      *
     C                   z-add     0             d1avqt
      *
      * Set up line number fields--a workfield in case you have to fill the
      * rest of the page with blank lines and a hidden field on the subfile record
      *
     C                   z-add     qdlnno        wklnno
     C                   z-add     qdlnno        hdlnno
     C                   z-add     qdrqqt        hdrqqt
      *
     C                   movel(p)  qditcd        d1itcd
     C                   z-add     qdrqqt        d1rqqt
     C                   z-add     qdapqt        d1apqt
     C                   move      qdorcd        d1orcd
     C                   move      qdcom         d1com
     C                   move      qdrqscd       d1rqscd
      *
      * Retrieve the Item Description and Budget flags
      *
     C                   movel(p)  qditcd        wkitcd
     C     wkitcd        chain     hsp181                             92
     C                   if        *in92 = *off
     C                   move      imitds        d1itds
     C                   move      imcritfl      d1critfl
     C                   move      imbgfl        d1bgfl
     C                   z-add     imvol         hdvol
     C                   move      imbgit        hdbgit
     C                   movel     wkitcd        hditcd
     C                   endif
      *
      *
      * Reset indicators
      *
     C                   exsr      $ind
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   exsr      $sflorcd
     C                   exsr      $sflapqt
     C                   write     hp1717s1
     C                   exsr      $sfloff
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If not EOF
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load blank subfile records for screen 1
      *---------------------------------------------------------------
      *
     C     $blank        begsr
      *
     C                   exsr      $ind
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   exsr      $sflorcd
     C                   exsr      $sflapqt
     C                   write     hp1717s1
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile line
      *---------------------------------------------------------------
      *
     C     $clrln        begsr
      *
     C                   move      *blank        d1itcd
     C                   z-add     0             d1rqqt
     C                   z-add     0             d1apqt
     C                   z-add     0             d1avqt
     C                   move      *blank        d1orcd
     C                   move      *blank        d1critfl
     C                   move      *blank        d1bgfl
     C                   move      *blank        d1com
     C                   move      *blank        d1rqscd
     C                   move      *blank        d1itds
      *
     C                   z-add     0             hdlnno
     C                   z-add     0             hdfbsn
     C                   z-add     0             hdvol
     C                   z-add     0             hdrqqt
     C                   move      *blank        hditcd
     C                   move      *blank        hdbgit
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Reset indicators in the control record
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
      * If the record was deleted out from under the user, then set indicators
      * to control available function keys and input fields.
      *
     C                   if        norecs = yes                                  If not found
     C                   seton                                        62
     C                   else
      *
      *  Set up for user's action
      *
     C                   select
     C                   when      c1mode = revise
     C                   seton                                        60
     C                   when      c1mode = create
     C                   seton                                        61
     C                   when      c1mode = delete
     C                   seton                                        62
     C                   endsl
      *
     C                   endif                                                  If not found
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set off all subfile indicators
      *----------------------------------------------------------------
      *
     C     $sfloff       begsr
      *
     C                   setoff                                       333435
     C                   setoff                                       365355
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Protect the Override Reason Code field on the subfile line.
      *----------------------------------------------------------------
      *
     C     $sflorcd      begsr
      *
      * We are almost always protecting this field. So, set on the indicator
      * to protect it.
     C                   seton                                        64
      *
      * The only time we will allow entry into this field is when it is a
      * 1) critical item and 2) the user is forced to enter a reason (ie:
      * the approved quantity exceeds the available quantity.
      *
     C                   if        d1critfl = yes and
     C                             d1apqt > d1avqt
     C                   setoff                                       64
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Protect the Approved Quantity field on the subfile line.
      *----------------------------------------------------------------
      *
     C     $sflapqt      begsr
      *
     C                   setoff                                       66
      *
     C                   if        d1bgfl <> yes
     C                   seton                                        66
     C                   endif
      *
     C                   if        d1critfl = yes and
     C                             d1apqt <= d1avqt
     C                   seton                                        66
     C                   endif
      *
     C                   if        d1critfl = no and
     C                             (d1avqt = 0 or d1apqt < d1avqt)
     C                   seton                                        66
     C                   endif
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * User took F9 to accept his entries
      *--------------------------------------------------------------------------------------
      *
     C     $accept       begsr
      *
      * Create or Update the Request Header.
      *
     C                   if        mode = create                                If creating
     C                   exsr      $crthdr
     C                   else
     C                   exsr      $updhdr
     C                   endif                                                  If creating
      *
      * You will always just delete/create detail records.
      *
     C                   exsr      $dltdtl
     C                   z-add     0             wklnno
      *
     C                   dou       *in80 = *on                                  Do loop
     C                   readc     hp1717s1                               80
     C                   if        *in80 = *off and d1itcd <> *blank            If read
      *
     C                   z-add     qhrqsn        qdrqsn
     C                   add       1             wklnno
     C                   z-add     wklnno        qdlnno
     C                   movel(p)  d1itcd        qditcd
     C                   z-add     d1rqqt        qdrqqt
     C                   z-add     d1apqt        qdapqt
     C                   move      d1orcd        qdorcd
     C                   move      d1com         qdcom
      *
     C                   if        d1critfl = yes and
     C                             d1apqt > d1avqt and
     C                             d1orcd = *blank
     C                   move      'H'           qdrqscd
     C                   else
     C                   move      'O'           qdrqscd
     C                   endif
      *
     C                   z-add     hdfbsn        qdfbsn
     C                   z-add     0             qdusqt
     C                   z-add     0             qdcpuam
      *
     C                   write     qdrec
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do loop
      *
      * Set next routine
     C                   select
     C                   when      mode = create
     C                   if        error = 0 or error = warmsg
     C                   exsr      $clmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04791'
     C                   clear                   mgw
     C                   movea     c1wo          mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   eval      routne = set1
     c                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   other
     C                   move      exit          routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete the request header
      *----------------------------------------------------------------
      *
     C     $dlthdr       begsr
      *
     C     xxrqsn        chain     hsp192                             92
     C                   if        *in92 = *off
     C                   delete    qhrec
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Delete the request detail records
      *----------------------------------------------------------------
      *
     C     $dltdtl       begsr
      *
     C     xxrqsn        setll     hsl193d
      *
     C                   dou       *in91 = *on                                  Do delete
     C     xxrqsn        reade     hsl193d                                91
     C                   if        *in91 = *off
     C                   delete    qdrec
     C                   endif
     C                   enddo                                                  Do delete
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Create a request header record
      *----------------------------------------------------------------
      *
     C     $crthdr       begsr
      *
      * Get the next system-assigned 'request number' from the Data Area
      *
     C     *lock         in        nextrqsn
     C                   add       1             nextrqsn
     C                   eval      qhrqsn = nextrqsn
     C                   out       nextrqsn
      *
     C                   if        holdfl = yes
     C                   move      'H'           qhrqscd
     C                   else
     C                   move      'O'           qhrqscd
     C                   endif
      *
     C                   z-add     c1fscd        qhfscd
     C                   move      c1wo          qhwo
     C                   move      c1com         qhcom
      *
     C                   z-add     wkcrupdt      qhrqdt
     C                   z-add     wkcrupdt      qhcrdt
     C                   time                    qhcrtm
     C                   move      sdusr         qhuscd
     C                   z-add     0             qhupdt
     C                   z-add     0             qhuptm
      *
     C                   write     qhrec
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Update the request header record
      *----------------------------------------------------------------
      *
     C     $updhdr       begsr
      *
     C     xxrqsn        chain     hsp192                             92
     C                   if        *in92 = *off                                 If found
      *
     C                   z-add     wkrqdt        qhrqdt
     C                   z-add     c1fscd        qhfscd
     C                   move      c1wo          qhwo
     C                   move      c1com         qhcom
      *
     C                   z-add     wkcrupdt      qhupdt
     C                   time                    qhuptm
     C                   move      sdusr         qhuscd
      *
     C                   if        holdfl = yes
     C                   move      'H'           qhrqscd
     C                   else
     C                   move      'O'           qhrqscd
     C                   endif
      *
     C                   update    qhrec
     C                   endif                                                  If found
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      *
      * Set off prompt indicators in all subfile records.
      *
     C                   exsr      $rewrtsfl
      *
      *---------------------------------------------------------------
      * Control record prompts
      *---------------------------------------------------------------
      *
      * Farm site
      *
     C                   select
     C                   when      fld = 'C1FSCD' and *in63 = *off
     C                   call      'HP5040'
     C                   parm      'A'           xxaist
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   seton                                        52
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
      *
      *
      *----------------------------------------------------------------
      * Subfile record prompts
      *----------------------------------------------------------------
      *
      * Item
     C                   when      fld = 'D1ITCD'
     C                   call      'HP5055'
     C                   parm      'A'           xxaist
     C                   parm      *blank        xxitcd
     C                   parm      *blank        xxitds
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                 If hit
     C                   if        xxitcd <> *blank
     C                   movel(p)  xxitcd        d1itcd
     C                   move      xxitds        d1itds
     C                   endif
     C                   exsr      $sflorcd
     C                   exsr      $sflapqt
     C                   seton                                        8553
     C                   update    hp1717s1
     C                   setoff                                       8553
     C                   exsr      $synchrrn
     C                   endif                                                  If hit
      *
      * Override reason
     C                   when      fld = 'D1ORCD'
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                 If got it
     C                   if        d1critfl = yes and                           If open
     C                             d1apqt > d1avqt
     C                   call      'HP5056'
     C                   parm      *blank        xxorcd
     C                   parm      *blank        xxords
     C                   if        xxorcd <> *blank
     C                   move      xxorcd        d1orcd
     C                   endif
     C                   seton                                        8555
     C                   exsr      $sflorcd
     C                   exsr      $sflapqt
     C                   update    hp1717s1
     C                   setoff                                       8555
     C                   exsr      $synchrrn
     C                   else
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endif                                                  If open
     C                   endif                                                  If got it
     C                   other
      *
      * F4 not valid for this field. So, issue message and reset the
      * subfile relative record number.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------------
      * Synch up the relative record number after an F4 prompt in the subfile
      *----------------------------------------------------------------------
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (It will be out-of-synch if the user has
      * selected a record-- thus causing the subfile record to be
      * retrieved and updated.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C     $synchrrn     begsr
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Rewrite the subfile records with the indicators off
      *----------------------------------------------------------------
      *
      * This subroutine keeps the cursor from being in the subfile while
      * the displayed error message is for the control record.
      *
     C     $rewrtsfl     begsr
      *
      * Read/process all the changed subfile records
      *
     C                   dou       *in80 = *on                                  Do indicators off
     C                   readc     hp1717s1                               80
     C                   if        *in80 = *off                                 If rec read
      * Seton MDT
     C                   seton                                        85
      *
      * Set of the error indicators in the subfile and the reset the control
      *
     C                   exsr      $sfloff
     C                   exsr      $ind
     C                   exsr      $sflorcd
     C                   exsr      $sflapqt
      *
     C                   update    hp1717s1
     C                   endif                                                  If rec read
     C                   enddo                                                  Do indicators off
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Find/retrieve the subfile record to update when returning from a select program
      *------------------------------------------------------------------------------------
      *
      * HDRR1 is the hidden field associated with the keyword SFLCSRRRN
      * on the control record in the DSPF.
      * HDRRN1 is the value associated with the keyword 'SFILE' in
      * the F-specs for the workstation.
      *
     C     $rrn1         begsr
      *
     C                   setoff                                       97
      *
     C                   if        hdrr1 <> 0
     C                   z-add     hdrr1         hdrrn1
     C     hdrrn1        chain     hp1717s1                           97
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors
      *---------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     c1mode        parm                    mode
     C                   parm                    xxrqsn
     C                   parm                    rtncd
      *
      *
      * Key lists
      *
      *
     C     key01         klist
     C                   kfld                    c1fscd
     C                   kfld                    imbgit
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin
     C     wkplin        sub       1             wkrlin
      *
      *
      * Save System Date for record stamp and for Request Date on new orders
      *
     C     *mdy          move      udate         wkcymdiso
     C                   move      wkcymdiso     wkcrupdt
     C                   move      udate         wkcrupmdy
      *
      *
      * The user can come into this program several different ways. Check
      * the entry mode and set the appropriate indicators to control the screen.
      * When you are deleting, just delete and get out---don't show any screens.
      *
     C                   select
     C                   when      mode = create
     C                   eval      routne = set1
     C                   seton                                        61
      *
     C                   when      mode = revise
     C                   eval      routne = set1
     C                   seton                                        60
      *
     C                   when      mode = delete
     C                   exsr      $dlthdr
     C                   exsr      $dltdtl
     C                   eval      routne = exit
     C                   endsl
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
