// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPEKDFR
// ?Date: 14.08.2025 Time: 03:40:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


//?Set Publish Access based on Status
CASE;

// IF PAR.User Department is Production
IF PAR.User_Department = 'PR';

CASE;

// IF PAR.YDL Process Status is 03=Yield Approved PR
IF PAR.YDL_Process_Status = '03';

// OR PAR.YDL Process Status is 04=Yield Approved AC
OR PAR.YDL_Process_Status = '04';

// PAR.Publish Yield USR = CND.no
PAR.Publish_Yield_USR = 'N';

ENDIF;

//?Set Publish Access based on Status
// IF PAR.User Department is Accounting
IF PAR.User_Department = 'AC';

CASE;

// IF PAR.YDL Process Status is 04=Yield Approved AC
IF PAR.YDL_Process_Status = '04';

// PAR.Publish Yield USR = CND.no
PAR.Publish_Yield_USR = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile control

MOVE *ALL (To: CTL From: PAR);

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

EXECUTE FUNCTION(Rtv Dept Info         RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1671635;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Head_Cut);
PARAMETER(CTL.Cold_Weight);
PARAMETER(CTL.Avg_Cold_Weight);
PARAMETER(CTL.Production_Standard_Yld);
PARAMETER(CTL.Actual_Yield);
PARAMETER(CTL.Yield_Variance);
PARAMETER(CTL.Weight_Variance);
PARAMETER(CTL.Total_Line_Weight);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Dept Total Wgt    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1671636;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?USER: Process Data record

  // PAR.Total Line Weight = PAR.Total Line Weight + DB1.Total Line Weight
  PAR.Total_Line_Weight = PAR.Total_Line_Weight + DB1.Total_Line_Weight;

 }

}


EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
PARAMETER(CTL.Company_Number);
PARAMETER('CUT');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Head_Cut);
PARAMETER(CTL.Cold_Weight);
PARAMETER(CTL.Avg_Cold_Weight);
PARAMETER(NLL.Start_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(NLL.Head_Cut);
PARAMETER(NLL.Cold_Weight);
PARAMETER(NLL.Avg_Cold_Weight);
PARAMETER(LCL.Start_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Line Yld Info     RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1670640;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Start_Weight);
PARAMETER(CTL.Start_Pieces);
PARAMETER(CTL.Pct_Pieces_Converted);
PARAMETER(CTL.Total_Line_Weight);
PARAMETER(CTL.Production_Standard_Yld);
PARAMETER(CTL.Actual_Yield);
PARAMETER(CTL.Yield_Variance);
PARAMETER(CTL.Weight_Variance);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(CTL.Production_Line_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Comp Desc         RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1670001;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(RCD.Yld_Component_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Yield Variance = RCD.YDL Yld Mix Percent - RCD.YDL Yld Standard Pct
RCD.Yield_Variance = RCD.YDL_Yld_Mix_Percent - RCD.YDL_Yld_Standard_Pct;

CASE;

// IF RCD.Department Code is Loin Boning
IF RCD.Department_Code = 'LOINS';

//?SAVE BONLESS LOIN STRAP OFF AMOUNTS
CASE;

// IF DB1.Yld Component Code is Boneless Loin-Strap Off
IF DB1.Yld_Component_Code = 'BNLSSTROFF';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// LCL.YDL Yld Comp Weight = DB1.YDL Yld Comp Weight
LCL.YDL_Yld_Comp_Weight = DB1.YDL_Yld_Comp_Weight;

// LCL.YDL Yld Mix Percent = DB1.YDL Yld Mix Percent
LCL.YDL_Yld_Mix_Percent = DB1.YDL_Yld_Mix_Percent;

// LCL.YDL Yld Standard Pct = DB1.YDL Yld Standard Pct
LCL.YDL_Yld_Standard_Pct = DB1.YDL_Yld_Standard_Pct;

// LCL.YDL Yld Weight Diff = DB1.YDL Yld Weight Diff
LCL.YDL_Yld_Weight_Diff = DB1.YDL_Yld_Weight_Diff;

ENDIF;

//?COMBINE BONLESS LOIN STRAP OFF WITH BONELS LOIN STRAP ON
CASE;

// IF DB1.Yld Component Code is Boneless Loin-Strap On
IF DB1.Yld_Component_Code = 'BNLSSTRON';

// RCD.YDL Yld Mix Percent = LCL.YDL Yld Mix Percent + DB1.YDL Yld Mix Percent
RCD.YDL_Yld_Mix_Percent = LCL.YDL_Yld_Mix_Percent + DB1.YDL_Yld_Mix_Percent;

// RCD.YDL Yld Comp Weight = LCL.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
RCD.YDL_Yld_Comp_Weight = LCL.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

// LCL.Weight Rate 1 =       *
LCL.Unused_Weight_Rate_1 = LCL.YDL_Yld_Comp_Weight * ( LCL.YDL_Yld_Standard_Pct / 100 );

// LCL.Weight Rate 2 =       *
LCL.Unused_Weight_Rate_2 = DB1.YDL_Yld_Comp_Weight * ( DB1.YDL_Yld_Standard_Pct / 100 );

// LCL.Weight Rate 1 = LCL.Weight Rate 1 + LCL.Weight Rate 2
LCL.Unused_Weight_Rate_1 = LCL.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_2;

CASE;

// IF RCD.YDL Yld Comp Weight is Not equal zero
IF RCD.YDL_Yld_Comp_Weight <> *ZERO;

// Comp:Std combined
RCD.YDL_Yld_Standard_Pct = ( LCL.Unused_Weight_Rate_1 / RCD.YDL_Yld_Comp_Weight 'H' )              +
* 100 'H';

ENDIF;

// RCD.Yield Variance = RCD.YDL Yld Mix Percent - RCD.YDL Yld Standard Pct
RCD.Yield_Variance = RCD.YDL_Yld_Mix_Percent - RCD.YDL_Yld_Standard_Pct;

// Compute: Weight Diff
RCD.YDL_Yld_Weight_Diff = CTL.Start_Weight * ( RCD.Yield_Variance / 100 ) 'H';

ENDIF;

ENDIF;

CASE;

// IF RCD.Department Code is Belly
IF RCD.Department_Code = 'BELLY';

//?SAVE EXPBLYTRSH   (export belly trim keyed in for item 64000)
CASE;

// IF DB1.Yld Component Code is Export Trim Item 64000
IF DB1.Yld_Component_Code = 'EXPBLYTRSH';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// LCL.YDL Yld Comp Weight = DB1.YDL Yld Comp Weight
LCL.YDL_Yld_Comp_Weight = DB1.YDL_Yld_Comp_Weight;

// LCL.YDL Yld Mix Percent = DB1.YDL Yld Mix Percent
LCL.YDL_Yld_Mix_Percent = DB1.YDL_Yld_Mix_Percent;

// LCL.YDL Yld Standard Pct = DB1.YDL Yld Standard Pct
LCL.YDL_Yld_Standard_Pct = DB1.YDL_Yld_Standard_Pct;

// LCL.YDL Yld Weight Diff = DB1.YDL Yld Weight Diff
LCL.YDL_Yld_Weight_Diff = DB1.YDL_Yld_Weight_Diff;

ENDIF;

//?COMBINE EXPBLYTRSH with EXPTRM
CASE;

// IF DB1.Production Line Code is Sheet Belly
IF DB1.Production_Line_Code = 'SHTBEL';

// AND DB1.Yld Component Code is Export Trim
AND DB1.Yld_Component_Code = 'EXPTRM';

// RCD.YDL Yld Mix Percent = LCL.YDL Yld Mix Percent + DB1.YDL Yld Mix Percent
RCD.YDL_Yld_Mix_Percent = LCL.YDL_Yld_Mix_Percent + DB1.YDL_Yld_Mix_Percent;

// RCD.YDL Yld Comp Weight = LCL.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
RCD.YDL_Yld_Comp_Weight = LCL.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

// LCL.Weight Rate 1 =       *
LCL.Unused_Weight_Rate_1 = LCL.YDL_Yld_Comp_Weight * ( LCL.YDL_Yld_Standard_Pct / 100 );

// LCL.Weight Rate 2 =       *
LCL.Unused_Weight_Rate_2 = DB1.YDL_Yld_Comp_Weight * ( DB1.YDL_Yld_Standard_Pct / 100 );

// LCL.Weight Rate 1 = LCL.Weight Rate 1 + LCL.Weight Rate 2
LCL.Unused_Weight_Rate_1 = LCL.Unused_Weight_Rate_1 + LCL.Unused_Weight_Rate_2;

CASE;

// IF RCD.YDL Yld Comp Weight is Not equal zero
IF RCD.YDL_Yld_Comp_Weight <> *ZERO;

// Comp:Std combined
RCD.YDL_Yld_Standard_Pct = ( LCL.Unused_Weight_Rate_1 / RCD.YDL_Yld_Comp_Weight 'H' )              +
* 100 'H';

ENDIF;

// RCD.Yield Variance = RCD.YDL Yld Mix Percent - RCD.YDL Yld Standard Pct
RCD.Yield_Variance = RCD.YDL_Yld_Mix_Percent - RCD.YDL_Yld_Standard_Pct;

// Compute: Weight Diff
RCD.YDL_Yld_Weight_Diff = CTL.Start_Weight * ( RCD.Yield_Variance / 100 ) 'H';

ENDIF;

ENDIF;

//?USER: Process command keys

//?F8=NEXT
CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.YDL Process Status is Yield Not Calculated
IF PAR.YDL_Process_Status = *BLANK/'01';

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM(CTL.Department_Code);
MSGPARM(CTL.Production_Line_Code);
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Publish Yield USR is yes
IF PAR.Publish_Yield_USR = 'Y';

CASE;

// IF PAR.User Department is Production
IF PAR.User_Department = 'PR';

EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(03);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF PAR.User Department is Accounting
IF PAR.User_Department = 'AC';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DOW PGM.*Return code is *Normal
DOW PGM.*Return_code = *BLANK;

// Call program Zzz Next Date/Shift   PV.
CALL PROGRAM(Zzz Next Date/Shift   PV) ('POWKPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);

ENDDO;

EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('P');
PARAMETER(04);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Rtv Dept Open Line    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1673376;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.YDL Post Status is Open
 IF DB1.YDL_Post_Status = 'O';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Chg Post Status       RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1673260;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('P');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Post Status       CH) TYPE(CHGOBJ) FILE(POCRCPP)           AC1673261;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.YDH_Post_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

//?************ Perform Auto End Of Shift for Cut TRIM/MISC     4/1/04
CASE;

// IF CTL.Department Code is CUT
IF CTL.Department_Code = 'CUT';

// Call program Zzz Auto End Of Shift XF.
CALL PROGRAM(Zzz Auto End Of Shift XF) ('PPEDXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

ENDIF;

//?************
// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

//?F7=BACK
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

CASE;

// IF PAR.YDL Post Status is Posted
IF PAR.YDL_Post_Status = 'P';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Yld Program USR = CND.Yield Calculation
PAR.Yld_Program_USR = 'YC';

ENDIF;

RETURN;

ENDIF;

//?F10=DSP DETAIL
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program Zzz Yield App Detail  DF.
CALL PROGRAM(Zzz Yield App Detail  DF) ('PPELDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

