// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKKSD1R
// ?Date: 14.08.2025 Time: 02:49:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

// PAR.CMP Program Code = CON.S19
PAR.CMP_Program_Code = 'S19';

EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
PARAMETER(PAR.CMP_Program_Code);
PARAMETER(WRK.#Txt_USR);
PARAMETER(PAR.CMP_Grading_Type);
PARAMETER(PAR.CMP_Sort_Basis);
PARAMETER(PAR.CMP_Carc_Wgt_Type);
PARAMETER(PAR.CMP_Std_Lean_Percent);
PARAMETER(PAR.CMP_Lean_Factor);
PARAMETER(PAR.CMP_Optimal_Row_Nbr_f_srt);
PARAMETER(PAR.CMP_Type);
PARAMETER(WRK.CMP_Market_Add_Deduct);
PARAMETER(WRK.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Load detail screen from DBF record

//?Calc MPR Sort Loss   5/23/03
CASE;

// IF PAR.CMP Optimal Row Nbr f/srt NE WRK.Blank Usr 1 fld Usr
IF PAR.CMP_Optimal_Row_Nbr_f_srt <> WRK.Blank_Usr_1_fld_Usr;

// LCL.Num NU USR = CVTVAR(PAR.CMP Optimal Row Nbr f/srt)
LCL.Num_NU_USR = CVTVAR(PAR.CMP_Optimal_Row_Nbr_f_srt);

// LCL.CMMR Row Number = LCL.Num NU USR
LCL.CMMR_Row_Number = LCL.Num_NU_USR;

EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
PARAMETER(PAR.CMP_Program_Code);
PARAMETER(LCL.CMMR_Row_Number);
PARAMETER(DB1.CD_Lean_Percent);
PARAMETER(LCL.Optimal_Lean_Percent_USR);
PARAMETER(WRK.Record_Found_CMMC_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Record_Found_CMMC_USR = 'N';

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Record_Found_CMMC_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv StdYld/SortDisc   RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1116828;
PARAMETER(PAR.CMP_Program_Code);
PARAMETER(LCL.CMMR_Row_Number);
PARAMETER(DB1.CD_Carcass_Hot_Weight);
PARAMETER(LCL.CMMR_Std_Dressing_Yield);
PARAMETER(LCL.CD_Sort_Loss);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.CD Sort Loss = DB1.CMMR Sort Discount
 PAR.CD_Sort_Loss = DB1.CMMR_Sort_Discount;

 QUIT;

}


EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
PARAMETER(PAR.CMP_Program_Code);
PARAMETER(LCL.CMMR_Row_Number);
PARAMETER(DB1.CD_Lean_Percent);
PARAMETER(LCL.CMMC_Premium_Value);
PARAMETER(WRK.Record_Found_CMMC_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Record_Found_CMMC_USR = 'N';

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Record_Found_CMMC_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Sort Total % = LCL.CMMC Premium Value - LCL.Optimal Lean Percent USR
DTL.Sort_Total = LCL.CMMC_Premium_Value - LCL.Optimal_Lean_Percent_USR;

CASE;

// IF PAR.CMP Grading Type is Lean Percent NPPC $Prem
IF PAR.CMP_Grading_Type = 'D';

//?If grading type is D , the lean premium values are dollars $
// Comp: CD Mpr Sort Loss-D
DTL.CD_MPR_Sort_Loss = ( LCL.CMMC_Premium_Value - LCL.Optimal_Lean_Percent_USR ) (                 +
DB1.CD_Carcass_Hot_Weight / 100 );

// IF *OTHERWISE
IF *OTHERWISE;

//?Original Calc done for all grading types         06/28/04
ENDIF;

//?(note--sort loss s/be negative.)
ENDIF;

