      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP7001
      * TITLE:       View BGF Farrowing and Pregnancy Check Data
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     08/05/00
      *
      *
      * FUNCTION: This is a View that displays the records in the BGF Farrowing and Pregnancy
      *           Check Events file.
      *
      *           Restrictors:
      *               Business office code
      *
      *           Positioners:
      *               Event year  (descending)
      *               Event week  (descending)
      *
      *           Selectors:
      *               Cell
      *               Farm site
      *               Event flag  (ie: pregnancy/farrowing)
      *               Serviced year
      *               Serviced week
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 09/14/00  LeAnne Fedor
      *           Renamed fields in file. Changed program logic accordingly.
      *
      * 03/06/01  LeAnne Fedor
      *           Added gilt event head.
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/28/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 10/02/01  LeAnne Fedor
      *           Pass 'selectors' in control record into listing submission report.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd7001   cf   e             workstn
     F                                     sfile(hp7001s1:hdrrn1)
     F                                     infds(iofeed)
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl093b   if   e           k disk
     F                                     infds(dbfeed)
      *    BGF farrowing and pregnancy check events
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC - F7-list
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D termfl          s              1
      *
      *
      * Control fields
      *
     D procfl          s              1
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svfsbo          s                   like(c1fsbo)
     D svbods          s                   like(c1bods)
     D svfscd          s                   like(c1fscd)
     D svcell          s                   like(c1cell)
     D svevyr          s                   like(c1evyr)
     D svevwk          s                   like(c1evwk)
     D svdvcd          s                   like(oudvcd)
     D svevfl          s                   like(c1evfl)
     D svsvyr          s                   like(c1svyr)
     D svsvwk          s                   like(c1svwk)
      *
      *
      * Parm fields
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
      *
     D xxevyr          s                   like(c1evyr)
     D xxevwk          s                   like(c1evwk)
     D xxevfl          s                   like(c1evfl)
     D xxfscd          s                   like(c1fscd)
     D xxfsbo          s                   like(c1fsbo)
     D xxfsnm          s                   like(fsfsnm)
     D xxbods          s                   like(c1bods)
     D xxcell          s                   like(c1cell)
     D xxsvyr          s                   like(c1svyr)
     D xxsvwk          s                   like(c1svwk)
      *
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *
      *
      * Workfields
      *
     D wkfncd          s                   like(sdpgm)
      *
      * Work fields for standard security checks that involve business office.
      *
     D wkbobo          s                   like(c1fsbo)
     D wkbods          s                   like(c1bods)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldevyr                 1      4  0
     D  ldevwk                 5      6  0
     D  ldevfl                 7      7
     D  ldfscd                 8     12  0
     D  ldcell                13     14  0
     D  ldsvyr                15     18  0
     D  ldsvwk                19     20  0
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   if        termfl = no
     C                   exsr      $clr1
     C                   exsr      $frsh1
     C                   endif
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If the user failed the initial security checks, set on indicator to
      * protect input fields and invalidate function keys.
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp7001k1
     C                   write     hp7001ec
     C                   exfmt     hp7001c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on or termfl = yes                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-PROMPT
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1FSBO' and c1fsbo <> svfsbo
     C                   movel(p)  'HP7001'      wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   movel     svfsbo        c1fsbo
     C                   movel     svbods        c1bods
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F7-LISTING
     C                   exsr      $listopts
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-PRINT OPT
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-WRKSPLF
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svfsbo <> c1fsbo or                          IF RESTRICT
     C                             svevyr <> c1evyr or
     C                             svevwk <> c1evwk or
     C                             svfscd <> c1fscd or
     C                             svevfl <> c1evfl or
     C                             svcell <> c1cell or
     C                             svsvyr <> c1svyr or
     C                             svsvwk <> c1svwk
      *
     C                   if        svfsbo <> c1fsbo
     C                   move      *blank        c1bods
     C                   movel(P)  'HP7001'      wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
     C                   if        error = 0                                    If authority error
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If authority error
      *
     C                   when      *in25 = *on                                  F25-ROLLUP
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chksv - Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   movel     c1fsbo        svfsbo
     C                   movel     c1bods        svbods
     C                   movel     c1cell        svcell
     C                   movel     c1evfl        svevfl
      *
     C                   z-add     c1fscd        svfscd
     C                   z-add     c1evyr        svevyr
     C                   z-add     c1evwk        svevwk
      *
     C                   z-add     c1svyr        svsvyr
     C                   z-add     c1svwk        svsvwk
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clr1  - clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp7001s1
     C                   seton                                        83        sflclr
     C                   write     hp7001c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $frsh1 - refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   select
     C                   when      c1evyr = 0
     C     *hival        setll     hsl093b
     C                   other
     C     key01         setll     hsl093b
     C                   endsl
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $load1- load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      hsl093b                                82
     C                   if        *in82 = *off                                 If read
      *
      * Retrieve business office and cell associated with farm site.
      *
     C     befscd        chain     hsp018                             92
     C                   if        *in92 = *off and                             If found
     C                             fsfsbo = c1fsbo
     C                   movel     yes           procfl
     C                   z-add     fscell        d1cell
     C                   else
     C                   movel     no            procfl
     C                   z-add     0             d1cell
     C                   endif                                                  If found
      *
      *
     C                   if        procfl = yes                                 If process
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1fscd <> 0 and                               If farm
     C                             c1fscd <> befscd
     C                   else
      *
     C                   if        c1cell <> 0 and                               If cell
     C                             c1cell <> fscell
     C                   else
      *
     C                   if        c1evfl <> *blank and                          If type
     C                             c1evfl <> beevfl
     C                   else
      *
     C                   if        c1svyr <> 0 and                               If serviced year
     C                             c1svyr <> besvyr
     C                   else
      *
     C                   if        c1svwk <> 0 and                               If serviced week
     C                             c1svwk <> besvwk
     C                   else
      *
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   z-add     beevyr        d1evyr
     C                   z-add     beevwk        d1evwk
     C                   z-add     befscd        d1fscd
     C                   move      beevfl        d1evfl
     C                   z-add     besvyr        d1svyr
     C                   z-add     besvwk        d1svwk
     C                   z-add     beglevhd      d1glevhd
     C                   z-add     beevhd        d1evhd
      *
     C                   write     hp7001s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If serviced week
     C                   endif                                                  If serviced year
     C                   endif                                                  If type
     C                   endif                                                  If cell
     C                   endif                                                  If farm
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $chkbo - Check the business office entered as a restrictor
      *----------------------------------------------------------------
      *
      * The business office entered must:
      * 1) be valid in the business office master
      * 2) be a 'live production' division office
      * 3) have a security location to which the user is authorized
      *
     C     $chkbo        begsr
      *
      * Clear subfile
      *
     C                   exsr      $clr1
      *
      * Check the user's security to this business office.
      * Set INDVFL to yes to tell the security program to compare the function
      * division code to the B.O. division code.
      *
     C                   movel     yes           indvfl
     C                   exsr      $sec
     C                   if        oubofl = yes
     C                   seton                                        31
     C                   endif
      *
     C                   movel     no            indvfl
     C                   movel     oubods        c1bods
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $listopts - Logic for F7-Listing
      *---------------------------------------------------------------
      *
     C     $listopts     begsr
      *
      * If business office has changed, validate user's authority to office.
      *
     C                   if        c1fsbo <> svfsbo
     C                   movel(P)  'HP7001'      wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
      * If user is authorized to business office, check his authority to the
      * listing function.
      *
     C                   if        error = 0                                    If authorized
     C                   movel     c1fsbo        svfsbo
     C                   movel     c1bods        svbods
     C                   movel(p)  'HP6001'      wkfncd
     C                   exsr      $sec
     C                   if        error = 0                                    If OK function
      *
      * Call the pop-up window to allow user to enter listing options.
      *
     C                   call      'HP4414'
     C                   parm      c1evyr        xxevyr
     C                   parm      c1evwk        xxevwk
     C                   parm      c1evfl        xxevfl
     C                   parm      c1fscd        xxfscd
     C                   parm      c1cell        xxcell
     C                   parm      c1svyr        xxsvyr
     C                   parm      c1svwk        xxsvwk
     C                   parm      *blank        rtncd
      *
      * If the user took the function key in the pop-up window to submit
      * the listing.
      *
     C                   if        rtncd = '08'
     C                   exsr      $list
     C                   endif
      *
     C                   endif                                                  If OK function
     C                   endif                                                  If authorized
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $list - Print listing
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
      * Move submission values into LDA
      *
     C                   z-add     xxevyr        ldevyr
     C                   z-add     xxevwk        ldevwk
     C                   move      xxevfl        ldevfl
     C                   z-add     xxfscd        ldfscd
     C                   z-add     xxcell        ldcell
     C                   z-add     xxsvyr        ldsvyr
     C                   z-add     xxsvwk        ldsvwk
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $f4s1 - F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      *
      * Business office
      *
     C                   select
     C                   when      fld = 'C1FSBO'
     C                   call      'HP503'
     C                   parm      *blank        XXFSBO
     C                   parm      *blank        XXBODS
     C                   parm                    svdvcd
     C                   seton                                        51
     C                   if        xxfsbo <> *blank
     C                   movel     xxfsbo        c1fsbo
     C                   movel     xxbods        c1bods
     C                   endif
      *
      * Farm site
      *
     C                   when      fld = 'C1FSCD'
     C                   call      'HP591'
     C                   parm      c1fsbo        xxfsbo
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   eval      *in52 = *on
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $sec - Security Program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Set up the fields to send into the security program
      *
     C                   movel     wkfncd        infncd                         PGM NAME
     C                   movel     c1fsbo        inbobo                         SCREEN BO
      *
     C                   move      *blank        oubobo                         BO CODE
     C                   move      *blank        oubods                         BO DESC
     C                   move      *blank        oudvcd                         FUNCTION DIV
     C                   movel     no            termfl                         TERMINAL FLG
      *
     C                   call      'HPSEC  '
      **** IN
     C                   parm                    mgid                           MSGID ARRAY
     C                   parm                    mgdt                           MSGDTA DATA
     C                   parm                    error                          # OF errorS
     C                   parm                    infncd                         FUNC CODE
     C                   parm                    inbobo                         BO CODE
     C                   parm                    indvfl                         CHECK DIV?
     C                   parm                    inbofl                         CHECK B.O.?
      **** OUT
     C     wkbobo        parm                    oubobo                         BO CODE
     C     wkbods        parm                    oubods                         BO DESC.
     C                   parm                    oudvcd                         DIV CODE
     C                   parm                    secfl                          SEC ERR FLAG
     C                   parm                    oubofl                         B.O. ERR FLG
     C                   parm                    ourmfl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    c1evyr
     C                   kfld                    c1evwk
      *
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      * Get this functions' number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     13            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Execute the security routine to determine the user's authorizations.
      *
     C                   movel(p)  sdpgm         wkfncd
      *
      * Set INBOFL flag to NO to tell HPSEC not to validate the IN_B.O.
      * sent, but to send back the default B.O. for this user.
      *
     C                   movel     no            inbofl
     C                   exsr      $sec
     C                   movel     yes           inbofl
      *
      * If errors on the initial call, set the terminal flag to yes.
      *
     C                   if        secfl = yes
     C                   movel     yes           termfl
     C                   endif
      *
      * Move returned fields to control record
      *
     C                   movel     wkbobo        c1fsbo
     C                   movel     wkbobo        svfsbo
     C                   movel     wkbods        c1bods
     C                   movel     wkbods        svbods
      *
      * Save this function's division code
      *
     C                   movel     oudvcd        svdvcd
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(HP7001CL)) JOB(LISTPREG) JOBQ(__________)
