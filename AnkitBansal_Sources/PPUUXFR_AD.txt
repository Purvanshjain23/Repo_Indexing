// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPUUXFR
// ?Date: 14.08.2025 Time: 03:41:59
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Price is being changed from the Inter-Co processing
//?        This section is to process the order detail as if the
//?         user entered the price override from the screen
//?         as in the price audit, then after this
//?         process of f13 accept pricing.
// LCL.Unit Price Last = PAR.Unit Price
LCL.Unit_Price_Last = PAR.Unit_Price;

// LCL.Price Status Last = PAR.Price Status
LCL.Price_Status_Last = PAR.Price_Status;

// LCL.Extended Amount Last = PAR.Extended Amount
LCL.Extended_Amount_Last = PAR.Extended_Amount;

// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Price_Detail_Sequence);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(02);

//?RMC 6/17/09 FP1054 pass qty/wgt ordered
EXECUTE FUNCTION(CLC Price,Ext,U/M1Prc  IF) TYPE(EXCINTFUN)                     AC1356112;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.Quantity_Shipped_Total);
PARAMETER(PAR.Weight_Shipped_Total);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Event_Code);
PARAMETER('PM');
PARAMETER(PAR.Type_Code);
PARAMETER(PAR.Company_Organization);
{
 //?Execute internal function

 //?*********************************************************************
 //?Calculate "Price Per Pound", "Extended Amount", "Primary U/M Price"
 //?*********************************************************************
 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // PAR.U/M - Pricing = CND.Not Entered
 PAR.UOM_Pricing = *BLANK;

 // PAR.Catch Weight Status = CND.blank
 PAR.Catch_Weight_Status = *BLANK;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 CASE;

 // IF PAR.Quantity Shipped Total is Equal to zero
 IF PAR.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = PAR.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status  c2742 -0- shped
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = PAR.Quantity Ordered
 PAR.USR_Quantity = PAR.Quantity_Ordered;

 // PAR.USR Weight = PAR.Weight Ordered
 PAR.USR_Weight = PAR.Weight_Ordered;

 //?Set quantity and weight according to order status  c2742 -0- shped
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = PAR.Weight Shipped Total
 PAR.USR_Weight = PAR.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 //?Check retrieve Unit Weight & C/W error
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Catch Weight Status is Y/N Values
 AND PAR.Catch_Weight_Status = 'N'/'Y';

 // AND PAR.Unit Weight is Not equal zero
 AND PAR.Unit_Weight <> *ZERO;

 //?Check retrieve Unit Weight & C/W error
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'Send Price MSG to SEABOARD'
 EXECUTE COMMAND(USR2306);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(*ZERO);

 ENDIF;

 CASE;

 // IF PAR.Price Method Code is Extended
 IF PAR.Price_Method_Code = 'EXT';

 // PAR.Extended Amount = PAR.Price Overage Override
 PAR.Extended_Amount = PAR.Price_Overage_Override;

 //?Calculate Unit Price for Extended
 CASE;

 // IF PAR.USR Weight is Not equal zero
 IF PAR.USR_Weight <> *ZERO;

 // PAR.Unit Price = PAR.Extended Amount / PAR.USR Weight *Rounded
 PAR.Unit_Price = PAR.Extended_Amount / PAR.USR_Weight 'H';

 ENDIF;

 //?Calculate Pricing U/M Price for Extended
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Extend price with unit price credit if not zeros
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF ( PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 // AND PAR.Unit Price - Credit is Not Zeros
 AND PAR.Unit_Price_Credit <> *ZERO;

 // AND PAR.Price Audit is Not Manually Price Audit
 AND PAR.Price_Audit = 'A'/'N'/*BLANK;

 // AND PAR.Pricing Event Called From is No Price With Credit Pric
 AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

 //?07/07/08 PKD Replaced w/consideration for .01 manual price
 //?Extend Price using Price Overage Override or Unit Price-Credit
 CASE;

 // IF PAR.Price Method Code is Deviated
 IF PAR.Price_Method_Code = 'DEV';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is High Plains Biodiesel
 AND PAR.Company_Organization = 'H';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is Not HPB
 AND PAR.Company_Organization = 'D'/'S';

 //?----- USE: Price Overage Override OR Unit Price-Credit
 CASE;

 // IF PAR.Type Code is Inter Company
 IF PAR.Type_Code = 'IC';

 // OR PAR.Type Code is Is Promotional/Samples
 OR PAR.Type_Code = 'PS';

 // OR PAR.Primal Group Code is Samples or Cut Loss
 OR PAR.Primal_Group_Code = 'UNID';

 // OR PAR.Primal Group Code is Other
 OR PAR.Primal_Group_Code = 'OTHER';

 // OR PAR.Price Overage Override is GT .01
 OR PAR.Price_Overage_Override > .01;

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?----- USE: Price Overage Override OR Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?----- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?---- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend price with unit price credit if not zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
 //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
 //?** Added Not .01 to force these orders to use Credit Chk Price.
 CASE;

 // IF PAR.Unit Price is Not Zeros
 IF PAR.Unit_Price <> *ZERO;

 // AND PAR.Unit Price is Not .01
 AND PAR.Unit_Price <> .01;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price);

 //?Unit Price Ordered U/M
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 ENDIF;

 ENDIF;

 //?*********************************************************************
}


EXECUTE FUNCTION(CHG OM Price Maint     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1202345;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Price_Status);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(PAR.Price_Code);
PARAMETER(*ZERO);
{
 //?USER: Processing after Data read

 //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
 CASE;

 // IF DB1.OD MPR Sent to USDA Sts is yes
 IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

 //?If price type changes, then create type: ORDPRT
 CASE;

 // IF DB1.OD Price Type NE PAR.OD Price Type
 IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

 //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

 // LCL.Change Log New Value = PAR.OD Price Type
 LCL.Change_Log_New_Value = PAR.OD_Price_Type;

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDPRT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Ord  Prt,Prc Sts   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1341906;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('N');
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?If price status or unit price changes write to log
CASE;

// IF PAR.Price Status NE LCL.Price Status Last
IF PAR.Price_Status <> LCL.Price_Status_Last;

// OR PAR.Unit Price NE LCL.Unit Price Last
OR PAR.Unit_Price <> LCL.Unit_Price_Last;

EXECUTE FUNCTION(RTV Next Audit Seq #   RT) TYPE(RTVOBJ) FILE(PDK3CPP)          AC1429793;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(999);
PARAMETER(WRK.USR_Sequence_Num_New_ATR);
{
 //?USER: Processing if Data record not found

 // PAR.USR Sequence Num. New ATR = CON.1
 PAR.USR_Sequence_Num_New_ATR = 1;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.USR Sequence Num. New ATR = DB1.Audit Sequence Number + CON.1
 PAR.USR_Sequence_Num_New_ATR = DB1.Audit_Sequence_Number + 1;

 QUIT;

}


EXECUTE FUNCTION(CRT Price Change Audit CR) TYPE(CRTOBJ) FILE(PDK3CPP)          AC1429780;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(WRK.USR_Sequence_Num_New_ATR);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Extended_Amount);
PARAMETER(LCL.Extended_Amount_Last);
PARAMETER(PAR.Price_Status);
PARAMETER(LCL.Price_Status_Last);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(PAR.Unit_Price);
PARAMETER(LCL.Unit_Price_Last);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Event_Code);
PARAMETER('PM');
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER('PM');
PARAMETER(WRK.Unused_Parm_Value_USR);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

//?*----------------------------------------------------------------*
// Call program CLC Tot Ord Val Ship   XF.
CALL PROGRAM(CLC Tot Ord Val Ship   XF) ('PDP1XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(WRK.USR_Production);
PARAMETER(WRK.USR_Update_Flag);

//?*----------------------------------------------------------------*
//?*--THIS IS THE SECTION OF THE F13 accept pricing ----------------*
//?*--from the Price Audit Order,  Purva wants this process after the
//?*--above
//?*----------------------------------------------------------------*
EXECUTE FUNCTION(UPD Accept Price Audit RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1311690;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV Next Audit Seq #   RT) TYPE(RTVOBJ) FILE(PDK3CPP)          AC1429793;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(999);
 PARAMETER(WRK.USR_Sequence_Num_New_ATR);
 {
  //?USER: Processing if Data record not found

  // PAR.USR Sequence Num. New ATR = CON.1
  PAR.USR_Sequence_Num_New_ATR = 1;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.USR Sequence Num. New ATR = DB1.Audit Sequence Number + CON.1
  PAR.USR_Sequence_Num_New_ATR = DB1.Audit_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(CRT Price Change Audit CR) TYPE(CRTOBJ) FILE(PDK3CPP)          AC1429780;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(WRK.USR_Sequence_Num_New_ATR);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(DB1.Detail_Line_Status_Last);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Price_Status);
 PARAMETER('M');
 PARAMETER(*BLANK);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Audit_Reason_Code);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Unit_Price);
 PARAMETER(DB1.Unit_Price_Credit);
 PARAMETER(DB1.Unit_Price_Credit);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Event_Code);
 PARAMETER('PA');
 PARAMETER(JOB.*PROGRAM);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Price Audit        CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1307906;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('M');
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// LCL.Price Audit = CND.Manually Price Audited
LCL.Price_Audit = 'M';

EXECUTE FUNCTION(CRT Price Audit Log    CR) TYPE(CRTOBJ) FILE(PDKXCPP)          AC1409016;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('PAU');
PARAMETER(LCL.Price_Audit);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

}


EXECUTE FUNCTION(CHG Price Audit        CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1309247;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Price_Audit);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?*----------------------------------------------------------------*
