// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTKPFR
// ?Date: 14.08.2025 Time: 12:04:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Adjustment Type Code
CASE;

// IF PAR.Adjustment Type Code is Entered
IF PAR.Adjustment_Type_Code <> *BLANK;

CASE;

// IF PAR.Adjustment Type Code EQ DB1.Adjustment Type Code
IF PAR.Adjustment_Type_Code = DB1.Adjustment_Type_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Enter G/L Status
CASE;

// IF PAR.User Enter G/L Status is Y/N Values
IF PAR.User_Enter_G_L_Status = 'N'/'Y';

CASE;

// IF PAR.User Enter G/L Status EQ DB1.User Enter G/L Status
IF PAR.User_Enter_G_L_Status = DB1.User_Enter_G_L_Status;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?System Control Value
CASE;

// IF PAR.System Control is *ALL values
IF PAR.System_Control = 'S'/'U';

CASE;

// IF PAR.System Control EQ DB1.System Control
IF PAR.System_Control = DB1.System_Control;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Record Status Code
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

CASE;

// IF PAR.Record Status EQ DB1.Record Status
IF PAR.Record_Status = DB1.Record_Status;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Adjustment Type Code
CASE;

// IF PAR.Adjustment Type Code is Entered
IF PAR.Adjustment_Type_Code <> *BLANK;

// 1PG.Adjustment Type Code = PAR.Adjustment Type Code
X1PG_Adjustment_Type_Code = PAR.Adjustment_Type_Code;

EXECUTE FUNCTION(RTV Adj Limits         RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1334715;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Adjustment_Type_Code);
PARAMETER(X1PG_Adjustment_Description);
PARAMETER(WRK.Effect_on_Account);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(WRK.Adjustment_Limit_Amount);
PARAMETER(WRK.Cash_Adj);
PARAMETER(X1PG_User_Enter_G_L_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Adjustment Type Code
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Adjustment Description = CON.*All
X1PG_Adjustment_Description = *All;

ENDIF;

// 1PG.User Enter G/L Status = PAR.User Enter G/L Status
X1PG_User_Enter_G_L_Status = PAR.User_Enter_G_L_Status;

//?System Control
CASE;

// IF PAR.System Control is *ALL values
IF PAR.System_Control = 'S'/'U';

// WRK.USR Flag 1 = CND.Blank
WRK.USR_Flag_1 = *BLANK;

// 1PG.System Control = PAR.System Control
X1PG_System_Control = PAR.System_Control;

//?System Control
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

//?Record Status
CASE;

// IF PAR.Record Status is *blank
IF PAR.Record_Status = *BLANK;

// 1PG.Status Description = CON.*All
X1PG_Status_Description = *All;

//?Record Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Record Status = PAR.Record Status
X1PG_Record_Status = PAR.Record_Status;

// 1PG.Status Description = Condition name of 1PG.Record Status
X1PG_Status_Description = RTVCND(X1PG_Record_Status);

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Accounting Company Number header format

ENDIF;

//?USER: On print of detail format

//?02/23/2010 LJB E000512  parm added
// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(CUR.G_L_ID_Code_JDE);
PARAMETER(CUR.Cost_Center);
PARAMETER(CUR.Object_Account);
PARAMETER(CUR.Subsidiary);
PARAMETER(CUR.USR_G_L_Account_Desc);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(LCL.JDE_Posting_Edit_Code_USR);
PARAMETER(LCL.Error_Return_text);

//?USER: Process after print of detail format

// NXT.USR Counter = NXT.USR Counter + CON.1
NXT.USR_Counter = NXT.USR_Counter + 1;

//?USER: Print required level totals

// SUPPRESSED PRINT Accounting Company Number totals format

NXT.Total_Count = CNT();

