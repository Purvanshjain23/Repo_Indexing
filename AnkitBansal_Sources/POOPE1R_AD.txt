// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POOPE1R
// ?Date: 14.08.2025 Time: 03:38:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


CASE;

// IF PAR.Sequence Number is zero
IF PAR.Sequence_Number = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Rtv Last Used Seq     RT) TYPE(RTVOBJ) FILE(POBUREP)           AC1640262;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Invoice_Number);
PARAMETER(KEY.Invoice_Suffix);
PARAMETER(KEY.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.*ZERO
 PAR.Sequence_Number = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// KEY.Sequence Number = KEY.Sequence Number + CON.1
KEY.Sequence_Number = KEY.Sequence_Number + 1;

// LCL.Sequence Number = KEY.Sequence Number
LCL.Sequence_Number = KEY.Sequence_Number;

ENDIF;

//?USER: Validate key screen

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Val Record Exists     RT) TYPE(RTVOBJ) FILE(POBUREP)           AC1640266;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Invoice_Number);
PARAMETER(KEY.Invoice_Suffix);
PARAMETER(KEY.Note_Date);
PARAMETER(KEY.Sequence_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'A/R Header Notes OLD already exists.'
ERROR(USR3123);
MSGPARM(KEY.Sequence_Number);

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Invoice_Number);
PARAMETER(KEY.Invoice_Suffix);
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Aged Inv Info RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1392617;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(NLL.City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.Parent_Customer);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Note Type = CND.AR Aging Note
DTL.Note_Type = 'AR';

// DTL.Note Date = JOB.*Job date
DTL.Note_Date = JOB.*Job_date;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Cust. by Inv.      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345722;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Invoice_Number);
PARAMETER(KEY.Invoice_Suffix);
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

CASE;

// IF DTL.USR Sequence Num. New ATR is not equal to zero
IF DTL.USR_Sequence_Num_New_ATR <> *ZERO;

// OR DTL.USR Date - ATR is Entered
OR DTL.USR_Date_ATR <> *ZERO;

//?Check note date
CASE;

// IF DTL.USR Date - ATR is Entered
IF DTL.USR_Date_ATR <> *ZERO;

// LCL.Note Date = DTL.USR Date - ATR
LCL.Note_Date = DTL.USR_Date_ATR;

//?Check note date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Note Date = DTL.Note Date
LCL.Note_Date = DTL.Note_Date;

ENDIF;

//?Check seq nbr
CASE;

// IF DTL.USR Sequence Num. New ATR is not equal to zero
IF DTL.USR_Sequence_Num_New_ATR <> *ZERO;

// LCL.Sequence Number = DTL.USR Sequence Num. New ATR
LCL.Sequence_Number = DTL.USR_Sequence_Num_New_ATR;

//?Check seq nbr
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Sequence Number = DTL.Sequence Number
LCL.Sequence_Number = DTL.Sequence_Number;

ENDIF;

EXECUTE FUNCTION(Val Record Exists     RT) TYPE(RTVOBJ) FILE(POBUREP)           AC1640266;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(LCL.Note_Date);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'A/R Header Notes OLD already exists.'
ERROR(USR3123);
MSGPARM(DTL.USR_Sequence_Num_New_ATR);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt A/R Header Notes  CR) TYPE(CRTOBJ) FILE(POBUREP)           AC1640123;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Note_Date);
PARAMETER(DTL.Sequence_Number);
PARAMETER(DTL.Note_Type);
PARAMETER(DTL.Follow_up_Date);
PARAMETER(DTL.Initials);
PARAMETER(DTL.Note_Line_1);
PARAMETER(DTL.Note_Line_2);
PARAMETER(DTL.Remaining_Balance_Due_Sts);
PARAMETER(DTL.Notes_Unused_Sts_1);
PARAMETER(DTL.Notes_Unused_Sts_2);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.USR_Sequence_Num_New_ATR);
PARAMETER(DTL.USR_Date_ATR);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.USR Date - ATR is Entered
 IF PAR.USR_Date_ATR <> *ZERO;

 // DB1.Note Date = PAR.USR Date - ATR
 DB1.Note_Date = PAR.USR_Date_ATR;

 ENDIF;

 CASE;

 // IF PAR.USR Sequence Num. New ATR is not equal to zero
 IF PAR.USR_Sequence_Num_New_ATR <> *ZERO;

 // DB1.Sequence Number = PAR.USR Sequence Num. New ATR
 DB1.Sequence_Number = PAR.USR_Sequence_Num_New_ATR;

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg A/R Header Notes  IF) TYPE(EXCINTFUN) FILE(POBUREP)        AC1640678;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Note_Date);
PARAMETER(DTL.Sequence_Number);
PARAMETER(DTL.Note_Type);
PARAMETER(DTL.Follow_up_Date);
PARAMETER(DTL.Initials);
PARAMETER(DTL.Note_Line_1);
PARAMETER(DTL.Note_Line_2);
PARAMETER(DTL.Remaining_Balance_Due_Sts);
PARAMETER(DTL.Notes_Unused_Sts_1);
PARAMETER(DTL.Notes_Unused_Sts_2);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.USR_Sequence_Num_New_ATR);
PARAMETER(DTL.USR_Date_ATR);
{
 //?Execute internal function

 CASE;

 // IF PAR.USR Sequence Num. New ATR is not equal to zero
 IF PAR.USR_Sequence_Num_New_ATR <> *ZERO;

 // OR PAR.USR Date - ATR is Entered
 OR PAR.USR_Date_ATR <> *ZERO;

 EXECUTE FUNCTION(Rtv to change Seq nbr RT) TYPE(RTVOBJ) FILE(POBUREP)           AC1640679;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Note_Date);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Note_Type);
 PARAMETER(PAR.Follow_up_Date);
 PARAMETER(PAR.Initials);
 PARAMETER(PAR.Note_Line_1);
 PARAMETER(PAR.Note_Line_2);
 PARAMETER(PAR.Remaining_Balance_Due_Sts);
 PARAMETER(PAR.Notes_Unused_Sts_1);
 PARAMETER(PAR.Notes_Unused_Sts_2);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.USR_Sequence_Num_New_ATR);
 PARAMETER(PAR.USR_Date_ATR);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt A/R Header Notes  CR) TYPE(CRTOBJ) FILE(POBUREP)           AC1640123;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Note_Date);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(PAR.Note_Type);
  PARAMETER(PAR.Follow_up_Date);
  PARAMETER(PAR.Initials);
  PARAMETER(PAR.Note_Line_1);
  PARAMETER(PAR.Note_Line_2);
  PARAMETER(PAR.Remaining_Balance_Due_Sts);
  PARAMETER(PAR.Notes_Unused_Sts_1);
  PARAMETER(PAR.Notes_Unused_Sts_2);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.USR_Sequence_Num_New_ATR);
  PARAMETER(PAR.USR_Date_ATR);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.USR Date - ATR is Entered
   IF PAR.USR_Date_ATR <> *ZERO;

   // DB1.Note Date = PAR.USR Date - ATR
   DB1.Note_Date = PAR.USR_Date_ATR;

   ENDIF;

   CASE;

   // IF PAR.USR Sequence Num. New ATR is not equal to zero
   IF PAR.USR_Sequence_Num_New_ATR <> *ZERO;

   // DB1.Sequence Number = PAR.USR Sequence Num. New ATR
   DB1.Sequence_Number = PAR.USR_Sequence_Num_New_ATR;

   ENDIF;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Del A/R Header Notes  DO) TYPE(DLTOBJ) FILE(POBUREP)           AC1640125;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Note_Date);
  PARAMETER(DB1.Sequence_Number);
  EXECUTE FUNCTION(Crt A/R Header Notes  CR) TYPE(CRTOBJ) FILE(POBUREP)           AC1640123;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Note_Date);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(PAR.Note_Type);
  PARAMETER(PAR.Follow_up_Date);
  PARAMETER(PAR.Initials);
  PARAMETER(PAR.Note_Line_1);
  PARAMETER(PAR.Note_Line_2);
  PARAMETER(PAR.Remaining_Balance_Due_Sts);
  PARAMETER(PAR.Notes_Unused_Sts_1);
  PARAMETER(PAR.Notes_Unused_Sts_2);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.USR_Sequence_Num_New_ATR);
  PARAMETER(PAR.USR_Date_ATR);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.USR Date - ATR is Entered
   IF PAR.USR_Date_ATR <> *ZERO;

   // DB1.Note Date = PAR.USR Date - ATR
   DB1.Note_Date = PAR.USR_Date_ATR;

   ENDIF;

   CASE;

   // IF PAR.USR Sequence Num. New ATR is not equal to zero
   IF PAR.USR_Sequence_Num_New_ATR <> *ZERO;

   // DB1.Sequence Number = PAR.USR Sequence Num. New ATR
   DB1.Sequence_Number = PAR.USR_Sequence_Num_New_ATR;

   ENDIF;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg A/R Header Notes  CH) TYPE(CHGOBJ) FILE(POBUREP)           AC1640124;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Note_Date);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Note_Type);
 PARAMETER(PAR.Follow_up_Date);
 PARAMETER(PAR.Initials);
 PARAMETER(PAR.Note_Line_1);
 PARAMETER(PAR.Note_Line_2);
 PARAMETER(PAR.Remaining_Balance_Due_Sts);
 PARAMETER(PAR.Notes_Unused_Sts_1);
 PARAMETER(PAR.Notes_Unused_Sts_2);
 PARAMETER(PAR.Ship_To_Customer);
 ENDIF;

}


