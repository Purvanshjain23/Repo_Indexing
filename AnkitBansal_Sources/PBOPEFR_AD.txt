// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBOPEFR
// ?Date: 14.08.2025 Time: 03:48:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

//?Modificaitons and Comments
DO;

//?*****
//?** 04/08/2015 LJB E004082
//?**  Add Catch Weight to the screen. Change CTL to fit Seaboard
//?**  standards. Add positioner fields at the top of each column
//?*****
//?E3313 JJH 08/25/14 - Item Default Extension
//?  Maintain the 14-character GTIN
//?This screen only allows records with an Item Type Code = FG.
//?*****
ENDDO;

//?USER: Initialize subfile header

//?Default Active Records & Records with a GTIN
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// CTL.GTIN/All Text USR = CON.GTIN Only
CTL.GTIN_All_Text_USR = 'GTIN Only';

// LCL.GTIN/All Flag USR = CND.GTIN Only
LCL.GTIN_All_Flag_USR = 'G';

// CTL.Description Line One = LCL.Description Line One
CTL.Description_Line_One = LCL.Description_Line_One;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Select what displays on the screen
//?Select Item Type = Finished Goods, skip if not
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Item Type/Desc/CW  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2098250;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(*MISSING);
PARAMETER(LCL.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Item Type Code is Not Finished Good
IF LCL.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Set Record Selection = No if GTIN Not Populated
CASE;

// IF LCL.GTIN/All Flag USR is GTIN Only
IF LCL.GTIN_All_Flag_USR = 'G';

CASE;

// IF DB1.IDE GTIN is Entered
IF DB1.IDE_GTIN <> *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select matching GTIN, if changed or not blanks
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.IDE GTIN is Blank
IF CTL.IDE_GTIN = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.IDE GTIN EQ DB1.IDE GTIN
IF CTL.IDE_GTIN = DB1.IDE_GTIN;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Set matching Record Status if entered
CASE;

// IF CTL.Record Status is *blank
IF CTL.Record_Status = *BLANK;

//?Set matching Record Status if entered
//?Set matching Record Status if entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Record Status EQ CTL.Record Status
IF DB1.Record_Status = CTL.Record_Status;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select Description if it contains anything            E004082
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Description 1 usr is not equal to blanks
IF CTL.Description_1_usr <> *BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Description_1_usr);
PARAMETER(CTL.Description_1_usr);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Description_Line_One);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Description_1_usr);
PARAMETER(15);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select matching Catch Weight
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?* select matching CWT if not blanks        E004082
CASE;

// IF CTL.U/M - Third Dft is Not Entered
IF CTL.UOM_Third_Dft = *BLANK;

//?* select matching CWT if not blanks        E004082
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Item Type/Desc/CW  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2098250;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(LCL.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.U/M - Third Dft EQ LCL.U/M - Third Dft
IF CTL.UOM_Third_Dft = LCL.UOM_Third_Dft;

// RCD.U/M - Third Dft = LCL.U/M - Third Dft
RCD.UOM_Third_Dft = LCL.UOM_Third_Dft;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?F10=GTIN//All
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF LCL.GTIN/All Flag USR is GTIN Only
IF LCL.GTIN_All_Flag_USR = 'G';

// CTL.GTIN/All Text USR = CON.*BLANK
CTL.GTIN_All_Text_USR = *BLANK;

// LCL.GTIN/All Flag USR = CND.All Records
LCL.GTIN_All_Flag_USR = 'R';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.GTIN/All Text USR = CON.GTIN Only
CTL.GTIN_All_Text_USR = 'GTIN Only';

// LCL.GTIN/All Flag USR = CND.GTIN Only
LCL.GTIN_All_Flag_USR = 'G';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?Validate GTIN - All 14 characters must be in 0-9 range.
CASE;

// IF RCD.IDE GTIN is Blank
IF RCD.IDE_GTIN = *BLANK;

//?Do Nothing
//?Validate GTIN - All 14 characters must be in 0-9 range.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.IDE GTIN Postion-1 = SUBSTRING(RCD.IDE GTIN,CON.1,CON.1)
LCL.IDE_GTIN_Postion_1 = SUBSTRING(RCD.IDE_GTIN:1:1);

CASE;

// IF LCL.IDE GTIN Postion-1 is Range 0-9
IF LCL.IDE_GTIN_Postion_1 >= '0';
AND LCL.IDE_GTIN_Postion_1 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-2 = SUBSTRING(RCD.IDE GTIN,CON.2,CON.1)
LCL.IDE_GTIN_Postion_2 = SUBSTRING(RCD.IDE_GTIN:2:1);

CASE;

// IF LCL.IDE GTIN Postion-2 is Range 0-9
IF LCL.IDE_GTIN_Postion_2 >= '0';
AND LCL.IDE_GTIN_Postion_2 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-3 = SUBSTRING(RCD.IDE GTIN,CON.3,CON.1)
LCL.IDE_GTIN_Postion_3 = SUBSTRING(RCD.IDE_GTIN:3:1);

CASE;

// IF LCL.IDE GTIN Postion-3 is Range 0-9
IF LCL.IDE_GTIN_Postion_3 >= '0';
AND LCL.IDE_GTIN_Postion_3 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-4 = SUBSTRING(RCD.IDE GTIN,CON.4,CON.1)
LCL.IDE_GTIN_Postion_4 = SUBSTRING(RCD.IDE_GTIN:4:1);

CASE;

// IF LCL.IDE GTIN Postion-4 is Range 0-9
IF LCL.IDE_GTIN_Postion_4 >= '0';
AND LCL.IDE_GTIN_Postion_4 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-5 = SUBSTRING(RCD.IDE GTIN,CON.5,CON.1)
LCL.IDE_GTIN_Postion_5 = SUBSTRING(RCD.IDE_GTIN:5:1);

CASE;

// IF LCL.IDE GTIN Postion-5 is Range 0-9
IF LCL.IDE_GTIN_Postion_5 >= '0';
AND LCL.IDE_GTIN_Postion_5 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-6 = SUBSTRING(RCD.IDE GTIN,CON.6,CON.1)
LCL.IDE_GTIN_Postion_6 = SUBSTRING(RCD.IDE_GTIN:6:1);

CASE;

// IF LCL.IDE GTIN Postion-6 is Range 0-9
IF LCL.IDE_GTIN_Postion_6 >= '0';
AND LCL.IDE_GTIN_Postion_6 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-7 = SUBSTRING(RCD.IDE GTIN,CON.7,CON.1)
LCL.IDE_GTIN_Postion_7 = SUBSTRING(RCD.IDE_GTIN:7:1);

CASE;

// IF LCL.IDE GTIN Postion-7 is Range 0-9
IF LCL.IDE_GTIN_Postion_7 >= '0';
AND LCL.IDE_GTIN_Postion_7 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-8 = SUBSTRING(RCD.IDE GTIN,CON.8,CON.1)
LCL.IDE_GTIN_Postion_8 = SUBSTRING(RCD.IDE_GTIN:8:1);

CASE;

// IF LCL.IDE GTIN Postion-8 is Range 0-9
IF LCL.IDE_GTIN_Postion_8 >= '0';
AND LCL.IDE_GTIN_Postion_8 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-9 = SUBSTRING(RCD.IDE GTIN,CON.9,CON.1)
LCL.IDE_GTIN_Postion_9 = SUBSTRING(RCD.IDE_GTIN:9:1);

CASE;

// IF LCL.IDE GTIN Postion-9 is Range 0-9
IF LCL.IDE_GTIN_Postion_9 >= '0';
AND LCL.IDE_GTIN_Postion_9 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-10 = SUBSTRING(RCD.IDE GTIN,CON.10,CON.1)
LCL.IDE_GTIN_Postion_10 = SUBSTRING(RCD.IDE_GTIN:10:1);

CASE;

// IF LCL.IDE GTIN Postion-10 is Range 0-9
IF LCL.IDE_GTIN_Postion_10 >= '0';
AND LCL.IDE_GTIN_Postion_10 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-11 = SUBSTRING(RCD.IDE GTIN,CON.11,CON.1)
LCL.IDE_GTIN_Postion_11 = SUBSTRING(RCD.IDE_GTIN:11:1);

CASE;

// IF LCL.IDE GTIN Postion-11 is Range 0-9
IF LCL.IDE_GTIN_Postion_11 >= '0';
AND LCL.IDE_GTIN_Postion_11 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-12 = SUBSTRING(RCD.IDE GTIN,CON.12,CON.1)
LCL.IDE_GTIN_Postion_12 = SUBSTRING(RCD.IDE_GTIN:12:1);

CASE;

// IF LCL.IDE GTIN Postion-12 is Range 0-9
IF LCL.IDE_GTIN_Postion_12 >= '0';
AND LCL.IDE_GTIN_Postion_12 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-13 = SUBSTRING(RCD.IDE GTIN,CON.13,CON.1)
LCL.IDE_GTIN_Postion_13 = SUBSTRING(RCD.IDE_GTIN:13:1);

CASE;

// IF LCL.IDE GTIN Postion-13 is Range 0-9
IF LCL.IDE_GTIN_Postion_13 >= '0';
AND LCL.IDE_GTIN_Postion_13 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

//?----------------------------------------------------------------------
// LCL.IDE GTIN Postion-14 = SUBSTRING(RCD.IDE GTIN,CON.14,CON.1)
LCL.IDE_GTIN_Postion_14 = SUBSTRING(RCD.IDE_GTIN:14:1);

CASE;

// IF LCL.IDE GTIN Postion-14 is Range 0-9
IF LCL.IDE_GTIN_Postion_14 >= '0';
AND LCL.IDE_GTIN_Postion_14 <= '9';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid GTIN - All 14-Positions must be numeric (0-9).'
ERROR(USR4751);
MSGPARM(RCD.IDE_GTIN);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item Default Ext  CH) TYPE(CHGOBJ) FILE(PBBTREP)           AC2094782;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.IDE_GTIN);
PARAMETER(RCD.IDE_Forecast_in_DP);
PARAMETER(RCD.IDE_Unused_Sts_1_2);
PARAMETER(RCD.IDE_Report_to_USDA_MPR);
PARAMETER(RCD.IDE_Regulation_Code_ID);
PARAMETER(RCD.IDE_Unused_Sts_2_3);
PARAMETER(RCD.IDE_Unused_Sts_2_4);
PARAMETER(RCD.IDE_Pallet_Tiers);
PARAMETER(RCD.IDE_Pallet_Blocks);
PARAMETER(RCD.Spanish_Description);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 // DB1.Change Date = JOB.*Job date
 DB1.Change_Date = JOB.*Job_date;

 // DB1.Change Time = JOB.*Job time
 DB1.Change_Time = JOB.*Job_time;

 // DB1.Change User = JOB.*USER
 DB1.Change_User = JOB.*USER;

 // DB1.Change Program = JOB.*PROGRAM
 DB1.Change_Program = JOB.*PROGRAM;

}


