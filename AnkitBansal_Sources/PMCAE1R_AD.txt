// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCAE1R
// ?Date: 14.08.2025 Time: 03:42:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?** Force *ADD mode if no Aging Code is entered
CASE;

// IF PAR.A/R Aging Code is Not Entered
IF PAR.A_R_Aging_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

CASE;

// IF PAR.A/R Aging Code is Entered
IF PAR.A_R_Aging_Code <> *BLANK;

// KEY.A/R Aging Code = PAR.A/R Aging Code
KEY.A_R_Aging_Code = PAR.A_R_Aging_Code;

ENDIF;

//?USER: Initialize detail screen (new record)

//?** Set default values for screen fields
// KEY.A/R Aging Code = DTL.A/R Aging Code
KEY.A_R_Aging_Code = DTL.A_R_Aging_Code;

// PAR.A/R Aging Code = DTL.A/R Aging Code
PAR.A_R_Aging_Code = DTL.A_R_Aging_Code;

// DTL.Age by Trans or Due Date = CND.Due Date
DTL.Age_by_Trans_or_Due_Date = 'D';

// DTL.Default Y/N = CND.no
DTL.Default_Y_N = 'N';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize detail screen (existing record)

// KEY.A/R Aging Code = DTL.A/R Aging Code
KEY.A_R_Aging_Code = DTL.A_R_Aging_Code;

MOVE *ALL (To: PAR From: DB1);

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?USER: Delete DBF record

EXECUTE FUNCTION(Delete A/R Aging Control) TYPE(DLTOBJ) FILE(PMADCPP)           AC1800477;
PARAMETER(DTL.A_R_Aging_Code);

//?USER: Validate detail screen fields

//?** Toggle *ADD and *Change modes
CASE;

// IF DTL.*CMD key is *Change mode
IF DTL.*CMD_key = '09';

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

// DTL.Age by Trans or Due Date = CND.Due Date
DTL.Age_by_Trans_or_Due_Date = 'D';

// DTL.Default Y/N = CND.no
DTL.Default_Y_N = 'N';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Test Default record - flag if changed to Yes
CASE;

// IF DTL.Default Y/N is yes
IF DTL.Default_Y_N = 'Y';

CASE;

// IF DTL.Default Y/N NE PAR.Default Y/N
IF DTL.Default_Y_N <> PAR.Default_Y_N;

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

ENDIF;

ENDIF;

//?** Validate a/r aging code ranges
CASE;

// IF DTL.A/R Aging Code is Entered
IF DTL.A_R_Aging_Code <> *BLANK;

//?** Edit the aging code ranges:
// Execute function EDT Aging Days Edit    US.
EXECUTE FUNCTION(EDT Aging Days Edit    US) TYPE(EXCUSRSRC) ('USAGDAY');
PARAMETER(DTL.A_R_Aging_Days_1);
PARAMETER(DTL.A_R_Aging_Days_2);
PARAMETER(DTL.A_R_Aging_Days_3);
PARAMETER(DTL.A_R_Aging_Days_4);
PARAMETER(WRK.test);
PARAMETER(WRK.test_field_two);
{
 C                     Z-ADD0         UWKTST  20
 C                     Z-ADD0         UGTRP   20
 C                     Z-ADD#IARDY    UAGDY1  30
 C                     Z-ADD#IASDY    UAGDY2  30
 C                     Z-ADD#IATDY    UAGDY3  30
 C                     Z-ADD#IAUDY    UAGDY4  30
 *
 C                     EXSR UCHKDA
 C           UWKTST    IFEQ 4
 C                     EXSR UTSTDA
 C                     END
 *
 C                     Z-ADDUWKTST    #OEPNB
 C                     Z-ADDUGTRP     #OEUNB
 C           UCHKDA    BEGSR
 *  Test to see if any of the aging buckets have not been entered.
 *  If one has been entered, then all must be entered.
 C           UAGDY1    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UAGDY2    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UAGDY3    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UAGDY4    IFNE 0
 C                     ADD  1         UWKTST
 C                     END
 C           UCHKEN    ENDSR
 /EJECT
 C           UTSTDA    BEGSR
 *   Aging buckets must be greater than the previous bucket.
 *
 C           UAGDY2    IFLT UAGDY1
 C           UAGDY3    ORLT UAGDY2
 C           UAGDY4    ORLT UAGDY3
 C                     Z-ADD1         UGTRP
 C                     END
 C           UTSTEN    ENDSR
 /EJECT
}


CASE;

// IF WRK.test is equal to zero
IF WRK.test = *ZERO;

// Send error message - 'A/R Aging code requires ranges, please enter aging buckets.'
ERROR(USR3669);
MSGPARM(DTL.A_R_Aging_Days_1);
MSGPARM(DTL.A_R_Aging_Days_2);
MSGPARM(DTL.A_R_Aging_Days_3);
MSGPARM(DTL.A_R_Aging_Days_4);

ENDIF;

CASE;

// IF WRK.test is not equal to four
IF WRK.test <> 4;

// Send error message - 'All four A/R Aging Days buckets must be entered.'
ERROR(USR0062);
MSGPARM(DTL.A_R_Aging_Days_1);
MSGPARM(DTL.A_R_Aging_Days_2);
MSGPARM(DTL.A_R_Aging_Days_3);
MSGPARM(DTL.A_R_Aging_Days_4);

ENDIF;

CASE;

// IF WRK.test field two is equal to 1
IF WRK.test_field_two = 1;

// Send error message - 'A/R Aging Day Bucket must be greater than previous A/R Aging Day Bucket.'
ERROR(USR0068);
MSGPARM(DTL.A_R_Aging_Days_1);
MSGPARM(DTL.A_R_Aging_Days_2);
MSGPARM(DTL.A_R_Aging_Days_3);
MSGPARM(DTL.A_R_Aging_Days_4);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Create A/R Aging Control) TYPE(CRTOBJ) FILE(PMADCPP)           AC1800475;
PARAMETER(DTL.A_R_Aging_Code);
PARAMETER(DTL.A_R_Aging_Days_1);
PARAMETER(DTL.A_R_Aging_Days_2);
PARAMETER(DTL.A_R_Aging_Days_3);
PARAMETER(DTL.A_R_Aging_Days_4);
PARAMETER(DTL.Age_by_Trans_or_Due_Date);
PARAMETER(DTL.Default_Y_N);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.unused_status_2);
PARAMETER(DTL.unused_status_3);
PARAMETER(DTL.Unused_Number_1);
PARAMETER(DTL.Unused_Date_2);
PARAMETER(DTL.Unused_Date);
PARAMETER(DTL.Unused_Text_1);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Change A/R Aging Control) TYPE(CHGOBJ) FILE(PMADCPP)           AC1800476;
PARAMETER(DTL.A_R_Aging_Code);
PARAMETER(DTL.A_R_Aging_Days_1);
PARAMETER(DTL.A_R_Aging_Days_2);
PARAMETER(DTL.A_R_Aging_Days_3);
PARAMETER(DTL.A_R_Aging_Days_4);
PARAMETER(DTL.Age_by_Trans_or_Due_Date);
PARAMETER(DTL.Default_Y_N);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.unused_status_2);
PARAMETER(DTL.unused_status_3);
PARAMETER(DTL.Unused_Number_1);
PARAMETER(DTL.Unused_Date_2);
PARAMETER(DTL.Unused_Date);
PARAMETER(DTL.Unused_Text_1);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


//?USER: Exit program processing

//?** Exit processing
CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

//?** Update file if Default Record has changed.
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(UPD A/R Aging Default  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800593;
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(KEY.A_R_Aging_Code);
{
 //?USER: Process Data record

 //?** Update Default record with "Y" and all others with "N"
 CASE;

 // IF DB1.A/R Aging Code EQ PAR.A/R Aging Code Usr
 IF DB1.A_R_Aging_Code = PAR.A_R_Aging_Code_Usr;

 EXECUTE FUNCTION(Change A/R Aging Control) TYPE(CHGOBJ) FILE(PMADCPP)           AC1800476;
 PARAMETER(DB1.A_R_Aging_Code);
 PARAMETER(DB1.A_R_Aging_Days_1);
 PARAMETER(DB1.A_R_Aging_Days_2);
 PARAMETER(DB1.A_R_Aging_Days_3);
 PARAMETER(DB1.A_R_Aging_Days_4);
 PARAMETER(DB1.Age_by_Trans_or_Due_Date);
 PARAMETER('Y');
 PARAMETER(DB1.SSI_Download_Flag);
 PARAMETER(DB1.unused_status_2);
 PARAMETER(DB1.unused_status_3);
 PARAMETER(DB1.Unused_Number_1);
 PARAMETER(DB1.Unused_Date_2);
 PARAMETER(DB1.Unused_Date);
 PARAMETER(DB1.Unused_Text_1);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?** Update Default record with "Y" and all others with "N"
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Change A/R Aging Control) TYPE(CHGOBJ) FILE(PMADCPP)           AC1800476;
 PARAMETER(DB1.A_R_Aging_Code);
 PARAMETER(DB1.A_R_Aging_Days_1);
 PARAMETER(DB1.A_R_Aging_Days_2);
 PARAMETER(DB1.A_R_Aging_Days_3);
 PARAMETER(DB1.A_R_Aging_Days_4);
 PARAMETER(DB1.Age_by_Trans_or_Due_Date);
 PARAMETER('N');
 PARAMETER(DB1.SSI_Download_Flag);
 PARAMETER(DB1.unused_status_2);
 PARAMETER(DB1.unused_status_3);
 PARAMETER(DB1.Unused_Number_1);
 PARAMETER(DB1.Unused_Date_2);
 PARAMETER(DB1.Unused_Date);
 PARAMETER(DB1.Unused_Text_1);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


ENDIF;

ENDIF;

