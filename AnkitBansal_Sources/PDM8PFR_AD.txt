// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDM8PFR
// ?Date: 14.08.2025 Time: 12:04:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// WRK.USR Total Number Records = CND.Not Entered
WRK.USR_Total_Number_Records = *ZERO;

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?***** Change Log and Comments
//?*****
//?** 09/06/2007 LJB FP1122
//?**   Add logic to calculate report fields based on either one
//?** company or all companies. This requires 2 different RTV's from
//?** the A/R Summary file.
//?**   Remove column headings above every customer and place them
//?** at top of page only. Change selection criteria to print at top
//?** of first page only.
//?*****
//?USER: Record selection processing

CASE;

// IF DB1.Ship To Customer EQ DB1.A/R Customer Number
IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

//?** Check for Co#.                               9/06/2007 LJB FP1122
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

//?** Retrieve for one company (co# is not zeros). 9/06/2007 LJB FP1122
EXECUTE FUNCTION(RTV Credit Info        RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1298556;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(PAR.Value_of_Open_Orders);
PARAMETER(PAR.Date_of_First_Shipment);
PARAMETER(PAR.Date_of_Last_Shipment);
PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
PARAMETER(PAR.Number_of_Payments);
PARAMETER(PAR.Last_YTD_Nbr_of_Payments);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(PAR.YTD_Sales_Invoiced);
PARAMETER(PAR.Last_Year_Sales_Invoiced);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Check for Co#.                               9/06/2007 LJB FP1122
// IF *OTHERWISE
IF *OTHERWISE;

//?** Retrieve for all companies (co# is zeros).   9/06/2007 LJB FP1122
EXECUTE FUNCTION(RTV Credit Info-Custmr RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1845641;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Age_Due_Current_CB);
PARAMETER(LCL.Age_Due_Aging_1_CB);
PARAMETER(LCL.Age_Due_Aging_2_CB);
PARAMETER(LCL.Age_Due_Aging_3_CB);
PARAMETER(LCL.Age_Due_Aging_4_CB);
PARAMETER(LCL.Age_Due_Aging_5_CB);
PARAMETER(LCL.Age_Due_Current_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_1_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_2_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_3_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_4_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_5_W_O_CB);
PARAMETER(PAR.Value_of_Open_Orders);
PARAMETER(LCL.Time_of_Last_Aging);
PARAMETER(PAR.Date_of_First_Shipment);
PARAMETER(PAR.Date_of_Last_Shipment);
PARAMETER(LCL.Amount_of_Last_Shipment);
PARAMETER(LCL.Date_of_Last_Payment);
PARAMETER(LCL.Amount_of_Last_Payment);
PARAMETER(LCL.Date_of_Highest_A_R_Bal);
PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
PARAMETER(LCL.Number_of_Invoices_YTD);
PARAMETER(LCL.Number_of_Orders_YTD);
PARAMETER(LCL.Number_of_Credits_YTD);
PARAMETER(PAR.Number_of_Payments);
PARAMETER(LCL.Date_of_Last_Aging);
PARAMETER(LCL.Last_YTD_Nbr_of_Orders);
PARAMETER(LCL.Last_YTD_Nbr_of_Credits);
PARAMETER(PAR.Last_YTD_Nbr_of_Payments);
PARAMETER(LCL.Last_YTD_Nbr_of_Invoices);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(PAR.YTD_Sales_Invoiced);
PARAMETER(PAR.Last_Year_Sales_Invoiced);
PARAMETER(LCL.Current_Month);
{
 //?USER: Initialize routine

 // WRK.Company count = CON.*ZERO
 WRK.Company_count = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Skip out if company passed in and db1.company doesn't match
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 QUIT;

 ENDIF;

 ENDIF;

 //?** For 'All' companies, determine 1st and last dates for display.
 //?** Determine Date of Last Aging across companies
 CASE;

 // IF DB1.Date of Last Aging GT PAR.Date of Last Aging
 IF DB1.Date_of_Last_Aging > PAR.Date_of_Last_Aging;

 // PAR.Date of Last Aging = DB1.Date of Last Aging
 PAR.Date_of_Last_Aging = DB1.Date_of_Last_Aging;

 ENDIF;

 //?** Determine Time of Last Aging across companies
 CASE;

 // IF DB1.Time of Last Aging GT PAR.Time of Last Aging
 IF DB1.Time_of_Last_Aging > PAR.Time_of_Last_Aging;

 // PAR.Time of Last Aging = DB1.Time of Last Aging
 PAR.Time_of_Last_Aging = DB1.Time_of_Last_Aging;

 ENDIF;

 //?** Determine Date of First Sale across companies
 CASE;

 // IF PAR.Date of First Shipment is not entered
 IF PAR.Date_of_First_Shipment = *ZERO;

 // PAR.Date of First Shipment = DB1.Date of First Shipment
 PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

 //?** Determine Date of First Sale across companies
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Determine if this date is earlier than a previous date
 CASE;

 // IF DB1.Date of First Shipment is entered
 IF DB1.Date_of_First_Shipment <> *ZERO;

 CASE;

 // IF DB1.Date of First Shipment LT PAR.Date of First Shipment
 IF DB1.Date_of_First_Shipment < PAR.Date_of_First_Shipment;

 // PAR.Date of First Shipment = DB1.Date of First Shipment
 PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

 ENDIF;

 //?** Determine if this date is earlier than a previous date
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDIF;

 //?** Determine Date and Amount of Last Sale across companies
 CASE;

 // IF DB1.Date of Last Shipment GT PAR.Date of Last Shipment
 IF DB1.Date_of_Last_Shipment > PAR.Date_of_Last_Shipment;

 // PAR.Date of Last Shipment = DB1.Date of Last Shipment
 PAR.Date_of_Last_Shipment = DB1.Date_of_Last_Shipment;

 // PAR.Amount of Last Shipment = DB1.Amount of Last Shipment
 PAR.Amount_of_Last_Shipment = DB1.Amount_of_Last_Shipment;

 ENDIF;

 //?** Determine Date and Amount of Last Payment across companies
 CASE;

 // IF DB1.Date of Last Payment GT PAR.Date of Last Payment
 IF DB1.Date_of_Last_Payment > PAR.Date_of_Last_Payment;

 // PAR.Date of Last Payment = DB1.Date of Last Payment
 PAR.Date_of_Last_Payment = DB1.Date_of_Last_Payment;

 // PAR.Amount of Last Payment = DB1.Amount of Last Payment
 PAR.Amount_of_Last_Payment = DB1.Amount_of_Last_Payment;

 ENDIF;

 //?** Determine Amount of Highest A/R Balance across companies
 CASE;

 // IF DB1.Amount of Highest A/R Bal GT PAR.Amount of Highest A/R Bal
 IF DB1.Amount_of_Highest_A_R_Bal > PAR.Amount_of_Highest_A_R_Bal;

 // PAR.Date of Highest A/R Bal. = DB1.Date of Highest A/R Bal.
 PAR.Date_of_Highest_A_R_Bal = DB1.Date_of_Highest_A_R_Bal;

 // PAR.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal
 PAR.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal;

 ENDIF;

 //?** Accumulate number of invoices, etc.
 // PAR.Number of Invoices YTD = DB1.Number of Invoices YTD + PAR.Number of Invoices
 PAR.Number_of_Invoices_YTD = DB1.Number_of_Invoices_YTD + PAR.Number_of_Invoices_YTD;

 // PAR.Number of Orders YTD = DB1.Number of Orders YTD + PAR.Number of Orders YTD
 PAR.Number_of_Orders_YTD = DB1.Number_of_Orders_YTD + PAR.Number_of_Orders_YTD;

 // PAR.Number of Credits YTD = DB1.Number of Credits YTD + PAR.Number of Credits YT
 PAR.Number_of_Credits_YTD = DB1.Number_of_Credits_YTD + PAR.Number_of_Credits_YTD;

 // PAR.Number of Payments = DB1.Number of Payments + PAR.Number of Payments
 PAR.Number_of_Payments = DB1.Number_of_Payments + PAR.Number_of_Payments;

 // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.Value of Open Orders
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.Value_of_Open_Orders;

 // PAR.Last YTD Nbr of Orders = PAR.Last YTD Nbr of Orders + DB1.Last YTD Nbr of Or
 PAR.Last_YTD_Nbr_of_Orders = PAR.Last_YTD_Nbr_of_Orders + DB1.Last_YTD_Nbr_of_Orders;

 // PAR.Last YTD Nbr of Credits = PAR.Last YTD Nbr of Credits + DB1.Last YTD Nbr of
 PAR.Last_YTD_Nbr_of_Credits = PAR.Last_YTD_Nbr_of_Credits + DB1.Last_YTD_Nbr_of_Credits;

 // PAR.Last YTD Nbr of Payments = PAR.Last YTD Nbr of Payments + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Payments = PAR.Last_YTD_Nbr_of_Payments
 + DB1.Last_YTD_Nbr_of_Payments;

 // PAR.Last YTD Nbr of Invoices = PAR.Last YTD Nbr of Invoices + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Invoices = PAR.Last_YTD_Nbr_of_Invoices
 + DB1.Last_YTD_Nbr_of_Invoices;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + DB1.MTD Invoices Paid
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + DB1.MTD_Invoices_Paid;

 // PAR.YTD Invoices Paid = PAR.YTD Invoices Paid + DB1.YTD Invoices Paid
 PAR.YTD_Invoices_Paid = PAR.YTD_Invoices_Paid + DB1.YTD_Invoices_Paid;

 // PAR.MTD Days Paid = PAR.MTD Days Paid + DB1.MTD Days Paid
 PAR.MTD_Days_Paid = PAR.MTD_Days_Paid + DB1.MTD_Days_Paid;

 // PAR.YTD Days Paid = PAR.YTD Days Paid + DB1.YTD Days Paid
 PAR.YTD_Days_Paid = PAR.YTD_Days_Paid + DB1.YTD_Days_Paid;

 // PAR.Last Year Sales Invoiced = PAR.Last Year Sales Invoiced + DB1.Last Year Sale
 PAR.Last_Year_Sales_Invoiced = PAR.Last_Year_Sales_Invoiced
 + DB1.Last_Year_Sales_Invoiced;

 // PAR.YTD Sales Invoiced = PAR.YTD Sales Invoiced + DB1.YTD Sales Invoiced
 PAR.YTD_Sales_Invoiced = PAR.YTD_Sales_Invoiced + DB1.YTD_Sales_Invoiced;

 // PAR.Current Month = DB1.Current Month
 PAR.Current_Month = DB1.Current_Month;

 //?** Sum Aging Due $
 DO;

 // PAR.Age $ Due - Current - CB = PAR.Age $ Due - Current - CB + DB1.Age $ Due - Cu
 PAR.Age_Due_Current_CB = PAR.Age_Due_Current_CB + DB1.Age_Due_Current_CB;

 // PAR.Age $ Due - Aging 1 - CB = PAR.Age $ Due - Aging 1 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_1_CB = PAR.Age_Due_Aging_1_CB + DB1.Age_Due_Aging_1_CB;

 // PAR.Age $ Due - Aging 2 - CB = PAR.Age $ Due - Aging 2 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_2_CB = PAR.Age_Due_Aging_2_CB + DB1.Age_Due_Aging_2_CB;

 // PAR.Age $ Due - Aging 3 - CB = PAR.Age $ Due - Aging 3 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_3_CB = PAR.Age_Due_Aging_3_CB + DB1.Age_Due_Aging_3_CB;

 // PAR.Age $ Due - Aging 4 - CB = PAR.Age $ Due - Aging 4 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_4_CB = PAR.Age_Due_Aging_4_CB + DB1.Age_Due_Aging_4_CB;

 // PAR.Age $ Due - Aging 5 - CB = PAR.Age $ Due - Aging 5 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_5_CB = PAR.Age_Due_Aging_5_CB + DB1.Age_Due_Aging_5_CB;

 // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Curr
 PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_1_W_O_CB = PAR.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_1_W_O_CB;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.Age $ Due-Aging 2-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_2_W_O_CB = PAR.Age_Due_Aging_2_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.Age $ Due-Aging 3-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_3_W_O_CB = PAR.Age_Due_Aging_3_W_O_CB + DB1.Age_Due_Aging_3_W_O_CB;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.Age $ Due-Aging 4-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_4_W_O_CB = PAR.Age_Due_Aging_4_W_O_CB + DB1.Age_Due_Aging_4_W_O_CB;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.Age $ Due-Aging 5-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_5_W_O_CB = PAR.Age_Due_Aging_5_W_O_CB + DB1.Age_Due_Aging_5_W_O_CB;

 ENDDO;

 // WRK.Company count = CON.1 + WRK.Company count
 WRK.Company_count = 1 + WRK.Company_count;

}


ENDIF;

//?** check record status if record exists
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?** check record status if record exists
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select Record Status                 8/26/02  RMC
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

// AND PAR.Record Status NE DB1.Record Status
AND PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

//?** *All or Company Name                      9/06/2007 LJB FP1122
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// TOP.Name = CON.*All
TOP_Name = *All;

//?** *All or Company Name                      9/06/2007 LJB FP1122
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// TOP.Record Status = PAR.Record Status
TOP_Record_Status = PAR.Record_Status;

//?** *All or Record Status name
CASE;

// IF TOP.Record Status is *blank
IF TOP_Record_Status = *BLANK;

// TOP.Condition Desc. 1  USR = CON.*All
TOP_Condition_Desc_1_USR = *All;

//?** *All or Record Status name
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Record Status
TOP_Condition_Desc_1_USR = RTVCND(TOP_Record_Status);

ENDIF;

//?USER: On print of first page format

//?** Move all 1pg to top format              09/06/2007 LJB FP1122
//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Customer_Name;
// SUPPRESSED PRINT Customer Name header format

ENDIF;

CASE;

IF NEW Ship_To_Customer;
//?IF DELETED AND INACTIVE
CASE;

// IF DB1.Record Status is Deleted & Inactive
IF DB1.Record_Status = 'D'/'I';

// CUR.Condition Name 10 USR = Condition name of DB1.Record Status
CUR.Condition_Name_10_USR = RTVCND(DB1.Record_Status);

//?IF DELETED AND INACTIVE
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Condition Name 10 USR = CND.NOT ENTERED
CUR.Condition_Name_10_USR = *BLANK;

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.USR_Parent_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(WRK.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?ORDER ENTRY HOLD  Y/N
CASE;

// IF DB1.Order Entry Hold is New Order Hold
IF DB1.Order_Entry_Hold = 'Y';

// CUR.Hold Description Field = CND.*Hold*
CUR.Hold_Description_Field = '*Hold*';

//?ORDER ENTRY HOLD  Y/N
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Hold Description Field = CND.Blank
CUR.Hold_Description_Field = *BLANK;

ENDIF;

// Print Ship To Customer header format
PRINT Ship To Customer header format;

ENDIF;

//?USER: On print of detail format

//?** 09/06/2007 LJB FP1122 - Calc report fields based on whether
//?** all companies or just one company is being processed.
//?** Process for single company or for all companies
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Credit Info        RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1298556;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(PAR.Value_of_Open_Orders);
PARAMETER(CUR.Date_of_First_Shipment);
PARAMETER(CUR.Date_of_Last_Shipment);
PARAMETER(CUR.Amount_of_Highest_A_R_Bal);
PARAMETER(CUR.Number_of_Payments);
PARAMETER(CUR.Last_YTD_Nbr_of_Payments);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(CUR.YTD_Sales_Invoiced);
PARAMETER(CUR.Last_Year_Sales_Invoiced);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Process for single company or for all companies
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Credit Info-Custmr RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1845641;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(LCL.Age_Due_Current_CB);
PARAMETER(LCL.Age_Due_Aging_1_CB);
PARAMETER(LCL.Age_Due_Aging_2_CB);
PARAMETER(LCL.Age_Due_Aging_3_CB);
PARAMETER(LCL.Age_Due_Aging_4_CB);
PARAMETER(LCL.Age_Due_Aging_5_CB);
PARAMETER(LCL.Age_Due_Current_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_1_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_2_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_3_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_4_W_O_CB);
PARAMETER(LCL.Age_Due_Aging_5_W_O_CB);
PARAMETER(PAR.Value_of_Open_Orders);
PARAMETER(LCL.Time_of_Last_Aging);
PARAMETER(CUR.Date_of_First_Shipment);
PARAMETER(CUR.Date_of_Last_Shipment);
PARAMETER(LCL.Amount_of_Last_Shipment);
PARAMETER(LCL.Date_of_Last_Payment);
PARAMETER(LCL.Amount_of_Last_Payment);
PARAMETER(LCL.Date_of_Highest_A_R_Bal);
PARAMETER(CUR.Amount_of_Highest_A_R_Bal);
PARAMETER(LCL.Number_of_Invoices_YTD);
PARAMETER(LCL.Number_of_Orders_YTD);
PARAMETER(LCL.Number_of_Credits_YTD);
PARAMETER(CUR.Number_of_Payments);
PARAMETER(LCL.Date_of_Last_Aging);
PARAMETER(LCL.Last_YTD_Nbr_of_Orders);
PARAMETER(LCL.Last_YTD_Nbr_of_Credits);
PARAMETER(CUR.Last_YTD_Nbr_of_Payments);
PARAMETER(LCL.Last_YTD_Nbr_of_Invoices);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(CUR.YTD_Sales_Invoiced);
PARAMETER(CUR.Last_Year_Sales_Invoiced);
PARAMETER(LCL.Current_Month);
{
 //?USER: Initialize routine

 // WRK.Company count = CON.*ZERO
 WRK.Company_count = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Skip out if company passed in and db1.company doesn't match
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 QUIT;

 ENDIF;

 ENDIF;

 //?** For 'All' companies, determine 1st and last dates for display.
 //?** Determine Date of Last Aging across companies
 CASE;

 // IF DB1.Date of Last Aging GT PAR.Date of Last Aging
 IF DB1.Date_of_Last_Aging > PAR.Date_of_Last_Aging;

 // PAR.Date of Last Aging = DB1.Date of Last Aging
 PAR.Date_of_Last_Aging = DB1.Date_of_Last_Aging;

 ENDIF;

 //?** Determine Time of Last Aging across companies
 CASE;

 // IF DB1.Time of Last Aging GT PAR.Time of Last Aging
 IF DB1.Time_of_Last_Aging > PAR.Time_of_Last_Aging;

 // PAR.Time of Last Aging = DB1.Time of Last Aging
 PAR.Time_of_Last_Aging = DB1.Time_of_Last_Aging;

 ENDIF;

 //?** Determine Date of First Sale across companies
 CASE;

 // IF PAR.Date of First Shipment is not entered
 IF PAR.Date_of_First_Shipment = *ZERO;

 // PAR.Date of First Shipment = DB1.Date of First Shipment
 PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

 //?** Determine Date of First Sale across companies
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Determine if this date is earlier than a previous date
 CASE;

 // IF DB1.Date of First Shipment is entered
 IF DB1.Date_of_First_Shipment <> *ZERO;

 CASE;

 // IF DB1.Date of First Shipment LT PAR.Date of First Shipment
 IF DB1.Date_of_First_Shipment < PAR.Date_of_First_Shipment;

 // PAR.Date of First Shipment = DB1.Date of First Shipment
 PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

 ENDIF;

 //?** Determine if this date is earlier than a previous date
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDIF;

 //?** Determine Date and Amount of Last Sale across companies
 CASE;

 // IF DB1.Date of Last Shipment GT PAR.Date of Last Shipment
 IF DB1.Date_of_Last_Shipment > PAR.Date_of_Last_Shipment;

 // PAR.Date of Last Shipment = DB1.Date of Last Shipment
 PAR.Date_of_Last_Shipment = DB1.Date_of_Last_Shipment;

 // PAR.Amount of Last Shipment = DB1.Amount of Last Shipment
 PAR.Amount_of_Last_Shipment = DB1.Amount_of_Last_Shipment;

 ENDIF;

 //?** Determine Date and Amount of Last Payment across companies
 CASE;

 // IF DB1.Date of Last Payment GT PAR.Date of Last Payment
 IF DB1.Date_of_Last_Payment > PAR.Date_of_Last_Payment;

 // PAR.Date of Last Payment = DB1.Date of Last Payment
 PAR.Date_of_Last_Payment = DB1.Date_of_Last_Payment;

 // PAR.Amount of Last Payment = DB1.Amount of Last Payment
 PAR.Amount_of_Last_Payment = DB1.Amount_of_Last_Payment;

 ENDIF;

 //?** Determine Amount of Highest A/R Balance across companies
 CASE;

 // IF DB1.Amount of Highest A/R Bal GT PAR.Amount of Highest A/R Bal
 IF DB1.Amount_of_Highest_A_R_Bal > PAR.Amount_of_Highest_A_R_Bal;

 // PAR.Date of Highest A/R Bal. = DB1.Date of Highest A/R Bal.
 PAR.Date_of_Highest_A_R_Bal = DB1.Date_of_Highest_A_R_Bal;

 // PAR.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal
 PAR.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal;

 ENDIF;

 //?** Accumulate number of invoices, etc.
 // PAR.Number of Invoices YTD = DB1.Number of Invoices YTD + PAR.Number of Invoices
 PAR.Number_of_Invoices_YTD = DB1.Number_of_Invoices_YTD + PAR.Number_of_Invoices_YTD;

 // PAR.Number of Orders YTD = DB1.Number of Orders YTD + PAR.Number of Orders YTD
 PAR.Number_of_Orders_YTD = DB1.Number_of_Orders_YTD + PAR.Number_of_Orders_YTD;

 // PAR.Number of Credits YTD = DB1.Number of Credits YTD + PAR.Number of Credits YT
 PAR.Number_of_Credits_YTD = DB1.Number_of_Credits_YTD + PAR.Number_of_Credits_YTD;

 // PAR.Number of Payments = DB1.Number of Payments + PAR.Number of Payments
 PAR.Number_of_Payments = DB1.Number_of_Payments + PAR.Number_of_Payments;

 // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.Value of Open Orders
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.Value_of_Open_Orders;

 // PAR.Last YTD Nbr of Orders = PAR.Last YTD Nbr of Orders + DB1.Last YTD Nbr of Or
 PAR.Last_YTD_Nbr_of_Orders = PAR.Last_YTD_Nbr_of_Orders + DB1.Last_YTD_Nbr_of_Orders;

 // PAR.Last YTD Nbr of Credits = PAR.Last YTD Nbr of Credits + DB1.Last YTD Nbr of
 PAR.Last_YTD_Nbr_of_Credits = PAR.Last_YTD_Nbr_of_Credits + DB1.Last_YTD_Nbr_of_Credits;

 // PAR.Last YTD Nbr of Payments = PAR.Last YTD Nbr of Payments + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Payments = PAR.Last_YTD_Nbr_of_Payments
 + DB1.Last_YTD_Nbr_of_Payments;

 // PAR.Last YTD Nbr of Invoices = PAR.Last YTD Nbr of Invoices + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Invoices = PAR.Last_YTD_Nbr_of_Invoices
 + DB1.Last_YTD_Nbr_of_Invoices;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + DB1.MTD Invoices Paid
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + DB1.MTD_Invoices_Paid;

 // PAR.YTD Invoices Paid = PAR.YTD Invoices Paid + DB1.YTD Invoices Paid
 PAR.YTD_Invoices_Paid = PAR.YTD_Invoices_Paid + DB1.YTD_Invoices_Paid;

 // PAR.MTD Days Paid = PAR.MTD Days Paid + DB1.MTD Days Paid
 PAR.MTD_Days_Paid = PAR.MTD_Days_Paid + DB1.MTD_Days_Paid;

 // PAR.YTD Days Paid = PAR.YTD Days Paid + DB1.YTD Days Paid
 PAR.YTD_Days_Paid = PAR.YTD_Days_Paid + DB1.YTD_Days_Paid;

 // PAR.Last Year Sales Invoiced = PAR.Last Year Sales Invoiced + DB1.Last Year Sale
 PAR.Last_Year_Sales_Invoiced = PAR.Last_Year_Sales_Invoiced
 + DB1.Last_Year_Sales_Invoiced;

 // PAR.YTD Sales Invoiced = PAR.YTD Sales Invoiced + DB1.YTD Sales Invoiced
 PAR.YTD_Sales_Invoiced = PAR.YTD_Sales_Invoiced + DB1.YTD_Sales_Invoiced;

 // PAR.Current Month = DB1.Current Month
 PAR.Current_Month = DB1.Current_Month;

 //?** Sum Aging Due $
 DO;

 // PAR.Age $ Due - Current - CB = PAR.Age $ Due - Current - CB + DB1.Age $ Due - Cu
 PAR.Age_Due_Current_CB = PAR.Age_Due_Current_CB + DB1.Age_Due_Current_CB;

 // PAR.Age $ Due - Aging 1 - CB = PAR.Age $ Due - Aging 1 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_1_CB = PAR.Age_Due_Aging_1_CB + DB1.Age_Due_Aging_1_CB;

 // PAR.Age $ Due - Aging 2 - CB = PAR.Age $ Due - Aging 2 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_2_CB = PAR.Age_Due_Aging_2_CB + DB1.Age_Due_Aging_2_CB;

 // PAR.Age $ Due - Aging 3 - CB = PAR.Age $ Due - Aging 3 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_3_CB = PAR.Age_Due_Aging_3_CB + DB1.Age_Due_Aging_3_CB;

 // PAR.Age $ Due - Aging 4 - CB = PAR.Age $ Due - Aging 4 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_4_CB = PAR.Age_Due_Aging_4_CB + DB1.Age_Due_Aging_4_CB;

 // PAR.Age $ Due - Aging 5 - CB = PAR.Age $ Due - Aging 5 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_5_CB = PAR.Age_Due_Aging_5_CB + DB1.Age_Due_Aging_5_CB;

 // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Curr
 PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_1_W_O_CB = PAR.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_1_W_O_CB;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.Age $ Due-Aging 2-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_2_W_O_CB = PAR.Age_Due_Aging_2_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.Age $ Due-Aging 3-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_3_W_O_CB = PAR.Age_Due_Aging_3_W_O_CB + DB1.Age_Due_Aging_3_W_O_CB;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.Age $ Due-Aging 4-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_4_W_O_CB = PAR.Age_Due_Aging_4_W_O_CB + DB1.Age_Due_Aging_4_W_O_CB;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.Age $ Due-Aging 5-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_5_W_O_CB = PAR.Age_Due_Aging_5_W_O_CB + DB1.Age_Due_Aging_5_W_O_CB;

 ENDDO;

 // WRK.Company count = CON.1 + WRK.Company count
 WRK.Company_count = 1 + WRK.Company_count;

}


ENDIF;

// Call program CLC Avg Days to Pay    XF.
CALL PROGRAM(CLC Avg Days to Pay    XF) ('PDNAXFR');
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(CUR.MTD_Avg_Days_to_Pay);
PARAMETER(CUR.YTD_Avg_Days_to_Pay);

// WRK.USR Total Number Records = CON.1 + WRK.USR Total Number Records
WRK.USR_Total_Number_Records = 1 + WRK.USR_Total_Number_Records;

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?USER: Print required level totals

CASE;

IF NEW Ship_To_Customer;
// SUPPRESSED PRINT Ship To Customer totals format

ENDIF;

CASE;

IF NEW Customer_Name;
// Print Customer Name totals format
PRINT Customer Name totals format;

ENDIF;

//?USER: On print of final totals format

// CUR.USR Total Number Records = WRK.USR Total Number Records
CUR.USR_Total_Number_Records = WRK.USR_Total_Number_Records;

