// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMMXDFR
// ?Date: 14.08.2025 Time: 03:43:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Program Notes
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Created by  :  ISTADAM
//?Date        :  Sept 10th 2007
//?Project     :  DLY029T
//?Description : Display records from the Company Item file
//?              showing pricing information. The pricing is based on
//?              the Market Price Date that the user can set.
//?              They can also filter the subfile based on various
//?              fields from the Company Item file.
//?E3199 JJH 07/27/14 Override the Default Commod Mark basis (Comm
//?      Mkt) with the OE Dft Commodity Market from the IP Cust
//?      Pricing Dtlt (PNF4REP) file.  This will then be used in the
//?      calculation of the Published Price.
ENDIF;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Item Code = PAR.Item Code
CTL.Item_Code = PAR.Item_Code;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Carrier Code      RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1849149;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Carrier Code is Buyer's Truck
IF LCL.Carrier_Code = 'BUY';

// CTL.Description = CON.COLLECT
CTL.Description = 'COLLECT';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Description = CON.PREPAID
CTL.Description = 'PREPAID';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?E3199 JJH 07/27/14 Override the Default Commod Mark basis (Comm
//?      Mkt) with the OE Dft Commodity Market from the IP Cust
//?      Pricing Dtlt (PNF4REP) file.  This will then be used in the
//?      calculation of the Published Price.
CASE;

// IF RCD.Item Type Code is Not Finished Good
IF RCD.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pricing Defaults  RT) TYPE(RTVOBJ) FILE(PNF4REP)           AC1994285;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.OE_Dft_Commodity_Market);
PARAMETER(NLL.OE_Dft_Price_Method_Code);
PARAMETER(NLL.OE_Dft_Market_Date_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.OE Dft Commodity Market is Entered
IF LCL.OE_Dft_Commodity_Market <> *BLANK;

// RCD.Default Commod Mark basis = LCL.OE Dft Commodity Market
RCD.Default_Commod_Mark_basis = LCL.OE_Dft_Commodity_Market;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Market Price Date NE LCL.Market Price Date
IF CTL.Market_Price_Date <> LCL.Market_Price_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// LCL.Market Price Date = CTL.Market Price Date
LCL.Market_Price_Date = CTL.Market_Price_Date;

ENDIF;

//?CALC: Subfile record function fields

//?Get Published Price
//?Set date to use for retrieving price
CASE;

// IF CTL.Market Price Date is Entered
IF CTL.Market_Price_Date > *ZERO;

// LCL.Market Pricing Date = CTL.Market Price Date
LCL.Market_Pricing_Date = CTL.Market_Price_Date;

//?Set date to use for retrieving price
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Market Pricing Date = JOB.*Job date
LCL.Market_Pricing_Date = JOB.*Job_date;

ENDIF;

EXECUTE FUNCTION(RTV Pricing: MKTPRC   IF) TYPE(EXCINTFUN)                      AC1283243;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(RCD.Published_Price_USR);
PARAMETER(99);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(LCL.OD_Market_Begin_Date);
PARAMETER(LCL.OD_Market_Ending_Date);
PARAMETER(LCL.Error_Return);
{
 //?Execute internal function

 //?Conversion Documentation
 DO;

 //?Market Price will be converted to CWT because Overages will be
 //?by CWT if it is Customer Overage, and Market Price may not be.
 ENDDO;

 //?E3947 2/23/2015 RMC
 //? If commodity price group is TPA, use item code as the group instead
 // PAR.Commodity Price Group USR = PAR.Commodity Price Group
 PAR.Commodity_Price_Group_USR = PAR.Commodity_Price_Group;

 //?*** Price Routine was call on or after Shipping, Calculate Price
 CASE;

 // IF PAR.Event Called From is All Values
 IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

 CASE;

 // IF PAR.Commodity Price Group is Third Party Avg
 IF PAR.Commodity_Price_Group = 'TPA';

 // LCL.Item Code Txt = CVTVAR(PAR.Item Code)
 LCL.Item_Code_Txt = CVTVAR(PAR.Item_Code);

 // PAR.Commodity Price Group USR = LCL.Item Code Txt
 PAR.Commodity_Price_Group_USR = LCL.Item_Code_Txt;

 ENDIF;

 //?*** Calculate Date Method Price if Selected
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // Call program CLC Date Method        XF.
 CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group_USR);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Item_Code);

 //?*** Calculate Date Method Price if Selected
 // IF PAR.OD Market Begin Date is Entered
 IF ( PAR.OD_Market_Begin_Date <> *ZERO;

 // AND PAR.OD Market Ending Date is Entered
 AND PAR.OD_Market_Ending_Date <> *ZERO );

 EXECUTE FUNCTION(Rtv Date Range Avg Cd RT) TYPE(RTVOBJ) FILE(PDIPREP)           AC1998797;
 PARAMETER('O');
 PARAMETER('R');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Date_Method_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Call program CLC Date Method        XF.
 CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Date_Method_Code);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group_USR);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Item_Code);

 //?*** Calculate Date Method Price if Selected
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*** Load Date used for calculation (to retrieve Market date)
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Date Used for Calculation = PAR.Market Pricing Date
 PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

 //?*** Load Date used for calculation (to retrieve Market date)
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Date Used for Calculation is not entered
 IF PAR.Date_Used_for_Calculation = *ZERO;

 CASE;

 // IF PAR.Actual Shipped Date is entered
 IF PAR.Actual_Shipped_Date <> *ZERO;

 // PAR.Date Used for Calculation = PAR.Actual Shipped Date
 PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Date Used for Calculation = PAR.Requested Ship Date
 PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group_USR);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 //?Flag as Unpriced if Price Date doesn't match Market date entered
 CASE;

 // IF PAR.Pricing Date Used NE PAR.Date Used for Calculation
 IF PAR.Pricing_Date_Used <> PAR.Date_Used_for_Calculation;

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.Price Status = CND.Unpriced
 PAR.Price_Status = 'U';

 //?If no pricing record was found then flag as pricing error.
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Return = CND.MKTPRC Error
 PAR.Error_Return = 'MKT';

 ENDIF;

 ENDIF;

 //?If record not found use default commodity market from company/item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Call program RTV Dflt Comm Mrkt     XF.
 CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group_USR);
 PARAMETER(PAR.Date_Used_for_Calculation);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Pricing_Date_Used);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(NLL.Commodity_Price_Group);
 PARAMETER(LCL.Market_Percent);
 PARAMETER(NLL.Market_Prem_Ded);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 // AND LCL.Market Percent is not equal to zeros
 AND LCL.Market_Percent <> *ZERO;

 // Pricing Retrieved Amount
 PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * ( LCL.Market_Percent / 100
 'H' ) 'H';

 ENDIF;

 ENDIF;

 //?Convert Price to CWT
 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Price_Adjustment_Amount);

 // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
 PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

 ENDIF;

}


//?Get Absorbed Freight
EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(RCD.Absorbed_Freight_7_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Accruals
EXECUTE FUNCTION(RTV Pricing: ACCRLS   IF) TYPE(EXCINTFUN)                      AC1824980;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Default);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(RCD.Accrual_Pricing_USR);
PARAMETER(99);
PARAMETER(LCL.Error_Return);
PARAMETER(LCL.Order_Number);
{
 //?Execute internal function

 //?** Routine to Accumulate Accrual Rate
 CASE;

 // IF PAR.Event Called From is All Values
 IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

 // LCL.Accrual Rate = CON.*ZERO
 LCL.Accrual_Rate = *ZERO;

 //?** This will read all accrual codes that are setup for the
 //?** ShipTo customer and accumulate the Accrual Rates.
 //?** If Actual Shipped Date is zeros, use Requested Ship Date
 CASE;

 // IF PAR.Actual Shipped Date is entered
 IF PAR.Actual_Shipped_Date <> *ZERO;

 // WRK.USR Date Shipped = PAR.Actual Shipped Date
 WRK.USR_Date_Shipped = PAR.Actual_Shipped_Date;

 //?** If Actual Shipped Date is zeros, use Requested Ship Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.USR Date Shipped = PAR.Requested Ship Date
 WRK.USR_Date_Shipped = PAR.Requested_Ship_Date;

 ENDIF;

 EXECUTE FUNCTION(Rtv Accrual Info      RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1626347;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(WRK.Accrual_Code);
 PARAMETER(1);
 PARAMETER(WRK.USR_Date_Shipped);
 PARAMETER(WRK.Period_Ending_Date);
 PARAMETER(WRK.Accrual_Rate);
 PARAMETER(NLL.All_Products_Y_N);
 PARAMETER(NLL.Accrual_Rate_Type);
 PARAMETER(NLL.Comm_Threshold_Period);
 PARAMETER(NLL.CAH_Unused_Date_1);
 PARAMETER(NLL.CAH_Unused_Date_2);
 PARAMETER(NLL.Comm_Min_Amt_Period);
 PARAMETER(NLL.Comm_Retroactive_Sts);
 PARAMETER(NLL.Accrual_Detail_Search);
 PARAMETER(NLL.Broker_Code);
 PARAMETER(NLL.Max_Accrual_Amount);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 {
  //?USER: Initialize routine

  // PAR.Pricing Retrieved Amount = CON.*ZERO
  PAR.Pricing_Retrieved_Amount = *ZERO;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?** The par.period begin date is either the Actual Shipped date
  //?** from the Order Detail file unless it is zeros, then it is
  //?** replaced by the Requested Ship Date.
  //?** Select the record where the ASD is within the date range
  CASE;

  // IF PAR.Period Beginning Date GE DB1.Period Beginning Date
  IF PAR.Period_Beginning_Date >= DB1.Period_Beginning_Date;

  // AND PAR.Period Beginning Date LE DB1.Period Ending Date
  AND PAR.Period_Beginning_Date <= DB1.Period_Ending_Date;

  EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(NLL.Accrual_Description);
  PARAMETER(NLL.Automatic_Accrual_Y_N);
  PARAMETER(NLL.Print_On_Invoice_Y_N);
  PARAMETER(NLL.Rate_Usage);
  PARAMETER(LCL.Add_on_Allowance);
  PARAMETER(NLL.Accrual_Type);
  PARAMETER(NLL.Sub_Ledger_Code);
  PARAMETER(NLL.Reverse_Accrual_Code);
  PARAMETER(NLL.UOM_Primary_Dft);
  PARAMETER(NLL.G_L_Code_Dr);
  PARAMETER(NLL.G_L_Code_Cr);
  PARAMETER(NLL.G_L_Sub_Account_Code);
  PARAMETER(NLL.Sales_History_Exp_Bucket);
  PARAMETER(NLL.Post_to_G_L_Y_N);
  PARAMETER(NLL.All_Products_Y_N);
  PARAMETER(NLL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  PARAMETER(NLL.Accrual_Detail_Search);
  PARAMETER(NLL.Standard_Schedule_Y_N);
  PARAMETER(NLL.Affect_Sales_Realz_Rpt);
  PARAMETER(LCL.Affect_Invoice_Price);
  PARAMETER(NLL.Invoice_Print_Type);
  PARAMETER(NLL.Max_Accrual_Amount);
  PARAMETER(NLL.Max_Accrual_Amount_Type);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Affect Invoice Price is yes
  IF LCL.Affect_Invoice_Price = 'Y';

  //?** Accumulate rate based on All Products Y/N value
  CASE;

  // IF DB1.All Products (Y/N) is Yes
  IF DB1.All_Products_Y_N = 'Y';

  // LCL.Accrual Rate = DB1.Accrual Rate
  LCL.Accrual_Rate = DB1.Accrual_Rate;

  //?** If YES, then use the rate from the Customer Accrual record
  CASE;

  // IF LCL.Add-on/Allowance is Allowance
  IF LCL.Add_on_Allowance = 'S';

  // LCL.Accrual Rate = CON.*ZERO - DB1.Accrual Rate
  LCL.Accrual_Rate = *ZERO - DB1.Accrual_Rate;

  ENDIF;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

  //?** Accumulate rate based on All Products Y/N value
  // IF DB1.All Products (Y/N) is Yes + Exceptions
  IF DB1.All_Products_Y_N = 'X';

  //?** If YES + Exceptions, then add the rate from either the Customer
  //?** Accrual Str or Customer Accrual Item file. The value in
  //?** the Accrual Detail Search field will determine which file.
  //?** If no record in either file then add the Customer Accural rate
  //?Retrieve Accrual Rate
  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Accrual_Rate);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve Accrual Rate
  // IF DB1.Accrual Detail Search is Item Structure
  IF DB1.Accrual_Detail_Search = 'S';

  //?** Retrieve the Item Structure fields from the Order Detail
  EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.Price_Overage_Override);
  PARAMETER(NLL.Contract_Number);
  PARAMETER(NLL.Price_Status);
  PARAMETER(NLL.U_M_Ordered);
  PARAMETER(NLL.Unit_Price);
  PARAMETER(NLL.Unit_Price_Credit);
  PARAMETER(NLL.Unit_Price_Ordered_U_M);
  PARAMETER(NLL.Unit_Weight_Ordered_U_M);
  PARAMETER(NLL.Actual_Shipped_Date);
  PARAMETER(NLL.Affect_Inventory_Status);
  PARAMETER(NLL.Affect_Sales_Doll_Status);
  PARAMETER(NLL.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(NLL.Affect_Trade_Fund);
  PARAMETER(NLL.Affect_Commission);
  PARAMETER(NLL.Affect_Pricing);
  PARAMETER(NLL.Ord_TF_Exempt_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?PKD/SZ 07/20/09 Should check with Type/Group/Class first then just
  //?                Type/Group.
  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  //?SZ 07/17/09 commented out. was overlaying when the accrual exception was 0
  //?PKD/SZ 07/20/09 -- Needed to check if the Item was found or not.
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?PKD/SZ 07/20/09 -- Needed to check if the Item was found or not.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Accrual Rate = DB1.Accrual Rate
  LCL.Accrual_Rate = DB1.Accrual_Rate;

  ENDIF;

  CASE;

  // IF LCL.Add-on/Allowance is Allowance
  IF LCL.Add_on_Allowance = 'S';

  // LCL.Accrual Rate = CON.*ZERO - LCL.Accrual Rate
  LCL.Accrual_Rate = *ZERO - LCL.Accrual_Rate;

  ENDIF;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

  //?** Accumulate rate based on All Products Y/N value
  // IF DB1.All Products (Y/N) is No
  IF DB1.All_Products_Y_N = 'N';

  //?** If NO, then only accumulate the rate if there is a record
  //?** in either the Customer Accrual Str or Customer Accrual Item
  //?** file. If no record in either file, just add zeros.
  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Accrual_Rate);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF DB1.Accrual Detail Search is Item Structure
  IF DB1.Accrual_Detail_Search = 'S';

  EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.Price_Overage_Override);
  PARAMETER(NLL.Contract_Number);
  PARAMETER(NLL.Price_Status);
  PARAMETER(NLL.U_M_Ordered);
  PARAMETER(NLL.Unit_Price);
  PARAMETER(NLL.Unit_Price_Credit);
  PARAMETER(NLL.Unit_Price_Ordered_U_M);
  PARAMETER(NLL.Unit_Weight_Ordered_U_M);
  PARAMETER(NLL.Actual_Shipped_Date);
  PARAMETER(NLL.Affect_Inventory_Status);
  PARAMETER(NLL.Affect_Sales_Doll_Status);
  PARAMETER(NLL.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(NLL.Affect_Trade_Fund);
  PARAMETER(NLL.Affect_Commission);
  PARAMETER(NLL.Affect_Pricing);
  PARAMETER(NLL.Ord_TF_Exempt_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Item Structure Type Code is Not Entered
  IF PAR.Item_Structure_Type_Code = *ZERO;

  // OR PAR.Item Structure Group Code is Not Entered
  OR PAR.Item_Structure_Group_Code = *ZERO;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Add-on/Allowance is Allowance
  IF LCL.Add_on_Allowance = 'S';

  // LCL.Accrual Rate = CON.*ZERO - LCL.Accrual Rate
  LCL.Accrual_Rate = *ZERO - LCL.Accrual_Rate;

  ENDIF;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  EXECUTE FUNCTION(RTV Item Pricing Info  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1412083;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Conversion_Factor_1);
  PARAMETER(NLL.Operation_Factor_1);
  PARAMETER(NLL.UOM_Second);
  PARAMETER(NLL.Conversion_Factor_2);
  PARAMETER(NLL.Operation_Factor_2);
  PARAMETER(NLL.UOM_Third);
  PARAMETER(LCL.UOM_Pricing);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Production_Date_Control);
  PARAMETER(NLL.Catch_Weight_Status);
  PARAMETER(NLL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Commodity_Price_Group);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.U/M - Pricing is Carcass Hundred Weight
  IF LCL.UOM_Pricing = 'CW';

  // OR LCL.U/M - Pricing is Thousand
  OR LCL.UOM_Pricing = 'M';

  // OR LCL.U/M - Pricing is Tons
  OR LCL.UOM_Pricing = 'TN';

  //?Hundred Weight
  CASE;

  // IF LCL.U/M - Pricing is Hundred Weight
  IF LCL.UOM_Pricing = 'CW';

  // PAR.Pricing Retrieved Amount =       *
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 100 'H';

  ENDIF;

  //?Thousand
  CASE;

  // IF LCL.U/M - Pricing is Thousand
  IF LCL.UOM_Pricing = 'M';

  // PAR.Pricing Retrieved Amount =       *
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 1000 'H';

  ENDIF;

  //?Tons
  CASE;

  // IF LCL.U/M - Pricing is Tons
  IF LCL.UOM_Pricing = 'TN';

  // PAR.Pricing Retrieved Amount =       *
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 2000 'H';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?** Convert Price to CWT
 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Price_Adjustment_Amount);

 // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
 PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

 ENDIF;

 //?Conversion Documentation
 DO;

 //?*****
 //?** 05/25/2007 LJB DLY029
 //?** Accumulate rate for all Accrual Codes for this Ship To
 //?** Customer based on the value in the All Products Y/N field
 //?**
 //?** If Actual Shipped Date is zeros, use the Requested Ship Date.
 //?**
 //?** If YES, then use the rate from the Customer Accrual record.
 //?**
 //?** If YES + EXCEPTIONS, then use the rate from either the Customer
 //?** Accrual Structure or Customer Accrual Item file which is based
 //?** on the value in Accrual Detail Search field. If no record in
 //?** either file, then use the rate in the Customer Accrual record.
 //?**
 //?** If NO, then only accumulate the rate if there is a record
 //?** in either the Customer Accrual Str or Customer Accrual Item
 //?** file. If no record in either file, just add zeros.
 //?**
 //?** Price will be converted to CWT
 //?*****
 ENDDO;

}


// Call program CLC Cvt Price-From CW  XF.
CALL PROGRAM(CLC Cvt Price-From CW  XF) ('PDZ2XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Accrual_Pricing_USR);
PARAMETER(RCD.Accrual_Pricing_USR);

//?***
// LCL.USR Value = RCD.Published Price       USR * CON.1 *Rounded
LCL.USR_Value = RCD.Published_Price_USR * 1 'H';

// RCD.Published Price       USR = LCL.USR Value
RCD.Published_Price_USR = LCL.USR_Value;

// LCL.USR Value = RCD.Accrual (Pricing)     USR * CON.1 *Rounded
LCL.USR_Value = RCD.Accrual_Pricing_USR * 1 'H';

// RCD.Accrual (Pricing)     USR = LCL.USR Value
RCD.Accrual_Pricing_USR = LCL.USR_Value;

CASE;

// IF RCD.U/M - Pricing is Cases
IF RCD.UOM_Pricing = 'CS';

// Published Price
RCD.Published_Price_USR = ( RCD.Published_Price_USR / 100 'H' ) * RCD.Unit_Weight 'H';

// Absorbed Freight
RCD.Absorbed_Freight_7_2_USR = ( RCD.Absorbed_Freight_7_2_USR / 100 'H' )                          +
* RCD.Unit_Weight 'H';

// Accruals
RCD.Accrual_Pricing_USR = RCD.Accrual_Pricing_USR * RCD.Unit_Weight 'H';

ENDIF;

//?***
// Calc Customer Price
RCD.Customer_Price_9_4_USR = ( RCD.Published_Price_USR + RCD.Absorbed_Freight_7_2_USR )            +
+ RCD.Accrual_Pricing_USR;

//?Look in Customer Price Header/Detail for Deviated price
EXECUTE FUNCTION(Rtv get deviated price RT) TYPE(RTVOBJ) FILE(POC6REP)          AC1846391;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Deviated_Price_USR);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(NLL.Price_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Price Start Date LE PAR.Pricing Date Used
 IF DB1.Price_Start_Date <= PAR.Pricing_Date_Used;

 // AND DB1.Price End Date GE PAR.Pricing Date Used
 AND DB1.Price_End_Date >= PAR.Pricing_Date_Used;

 // AND DB1.Record Status is Active
 AND DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Rtv Max Wt and price  RT) TYPE(RTVOBJ) FILE(POC7REP)           AC1677837;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Price_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Maximum_Contract_Units);
 PARAMETER(PAR.Customer_Price_UM_Prc);
 PARAMETER(LCL.Commodity_Market_Code);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(LCL.Date_Method_Code);
 PARAMETER(LCL.Contract_Unit_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 ENDIF;

 // PAR.Price Code = DB1.Price Code
 PAR.Price_Code = DB1.Price_Code;

}


//?USER: Process subfile record (Pre-confirm)

//?5=Display Item Detail
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Company Item Spc   DR.
CALL PROGRAM(Dsp Company Item Spc   DR) ('PPJPD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program SEL Item Default       SR.
CALL PROGRAM(SEL Item Default       SR) ('OMZ8SRR');
PARAMETER(CTL.Item_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Commodity Price Group
IF PGM.*Cursor_field = CTL.Commodity_Price_Group;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(CTL.Commodity_Price_Group);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.U/M - Pricing
IF PGM.*Cursor_field = CTL.UOM_Pricing;

// Call program SEL Unit of Measure    SR.
CALL PROGRAM(SEL Unit of Measure    SR) ('CAB5SRR');
PARAMETER(CTL.UOM_Pricing);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Price Method Default
IF PGM.*Cursor_field = CTL.Price_Method_Default;

// Call program SEL PD Price Meth Head SR.
CALL PROGRAM(SEL PD Price Meth Head SR) ('PDZDSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Default);

ENDIF;

ENDIF;

//?8=Display Accruals
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program WW Cust Accruals-Dsp  DF.
CALL PROGRAM(WW Cust Accruals-Dsp  DF) ('PPB2DFR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

