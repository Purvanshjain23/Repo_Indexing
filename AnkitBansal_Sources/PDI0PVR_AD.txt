// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDI0PVR
// ?Date: 14.08.2025 Time: 03:34:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Documentation/change log
DO;

//?This program was created to work like an edit record, without a
//?key screen.  It will be used by dispatchers, which is a very fast-
//?paced environment, so they need fewer key strokes.
//?E004079 LJB 07/13/2015  Exports will be assigned Containers that
//? are owned by Ship Line. Rtv sts by Carrier which will be the Ship
//? Line and Trailer which will be the Container#
//?E002966 LJB 02/18/2014  When adding a trailer, if it is already
//? assigned to a load, change Assigned = Y, Available = N, and
//? allow the trailer to be added (not an error)
//?LJB 12/22/2011  Recompile only for chgobj function change
//?RMC 10/2/06 when on yard is entered, if user is multi-comp=N,
//? chg company to user's dft company.
//?RMC 10/13/06 when on yard is changed, if user is multi-comp=N,
//? chg company to user's dft company.
ENDDO;

// PAR.USR Carrier Code = PAR.Carrier Code
PAR.USR_Carrier_Code = PAR.Carrier_Code;

// PAR.Trailer ID USR = PAR.Trailer Id
PAR.Trailer_ID_USR = PAR.Trailer_Id;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

//?* Determine pgm mode-*add if not in trailer, but on load or not on load
CASE;

// IF PAR.Trailer Id is Entered
IF PAR.Trailer_Id <> *BLANK;

// DTL.Trailer ID USR = PAR.Trailer Id
DTL.Trailer_ID_USR = PAR.Trailer_Id;

//?Convert lower case trailer id to upper case           E004079
CASE;

// IF DTL.Trailer Id is Entered
IF DTL.Trailer_Id <> *BLANK;

// LCL.Case Sensitive Field = PAR.Trailer Id
LCL.Case_Sensitive_Field = PAR.Trailer_Id;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer ID USR = LCL.Case Upper Field
DTL.Trailer_ID_USR = LCL.Case_Upper_Field;

ENDIF;

// DTL.USR Carrier Code = PAR.Carrier Code
DTL.USR_Carrier_Code = PAR.Carrier_Code;

EXECUTE FUNCTION(VAL Carr/Trlr Exists   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1508020;
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?* Change mode - trailer already in the trailer file
//?Change mode initialize
CASE;

// IF PAR.Carrier Code NE WRK.BLANK
IF PAR.Carrier_Code <> WRK.BLANK;

// AND PAR.Trailer Id NE WRK.BLANK
AND PAR.Trailer_Id <> WRK.BLANK;

// DTL.Carrier Code = PAR.Carrier Code
DTL.Carrier_Code = PAR.Carrier_Code;

// DTL.Trailer Id = PAR.Trailer Id
DTL.Trailer_Id = PAR.Trailer_Id;

// DTL.USR Carrier Code = DTL.Carrier Code
DTL.USR_Carrier_Code = DTL.Carrier_Code;

//?Convert lower case trailer id to upper case           E004079
CASE;

// IF DTL.Trailer Id is Entered
IF DTL.Trailer_Id <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer Id
LCL.Case_Sensitive_Field = DTL.Trailer_Id;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer Id = LCL.Case Upper Field
DTL.Trailer_Id = LCL.Case_Upper_Field;

ENDIF;

EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Trailer_Type);
PARAMETER(DTL.Seaboard_Owned_Status);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);
PARAMETER(DTL.Not_Available_Reason_Code);
PARAMETER(DTL.Comment_Line);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

//?error and quit if record not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?error and quit if record not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Trailer Master not found.'
ERROR(USR2598);
MSGPARM(DTL.Trailer_ID_USR);

QUIT;

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

//?Save to check for change later.
// PAR.USR On Yard Date = DTL.On Yard Date
PAR.USR_On_Yard_Date = DTL.On_Yard_Date;

// PAR.USR Time = DTL.On Yard Time
PAR.USR_Time = DTL.On_Yard_Time;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?* Add mode - trailer is not yet in the trailer file
//?* but was assigned to a load                          E002966
CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Carrier Code = PAR.Carrier Code
DTL.Carrier_Code = PAR.Carrier_Code;

// DTL.Trailer Id = PAR.Trailer Id
DTL.Trailer_Id = PAR.Trailer_Id;

//?Convert lower case trailer id to upper case           E004079
CASE;

// IF DTL.Trailer Id is Entered
IF DTL.Trailer_Id <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer Id
LCL.Case_Sensitive_Field = DTL.Trailer_Id;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer Id = LCL.Case Upper Field
DTL.Trailer_Id = LCL.Case_Upper_Field;

ENDIF;

// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

// DTL.USR Carrier Code = PAR.Carrier Code
DTL.USR_Carrier_Code = PAR.Carrier_Code;

// DTL.Load Type = CND.Regular
DTL.Load_Type = 'R';

// DTL.Trailer Type = CND.Reefer
DTL.Trailer_Type = 'R';

// DTL.Seaboard Owned Status = CND.no
DTL.Seaboard_Owned_Status = 'N';

// DTL.Assigned Status = CND.yes
DTL.Assigned_Status = 'Y';

// DTL.Available Status = CND.no
DTL.Available_Status = 'N';

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

// DTL.On Yard Date = WRK.Current System Date
DTL.On_Yard_Date = WRK.Current_System_Date;

// DTL.On Yard Time = WRK.Current System Time
DTL.On_Yard_Time = WRK.Current_System_Time;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// DTL.On Yard Status = CND.yes
DTL.On_Yard_Status = 'Y';

// DTL.Comment Line = CON.*BLANK
DTL.Comment_Line = *BLANK;

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// PAR.USR On Yard Date = DTL.On Yard Date
PAR.USR_On_Yard_Date = DTL.On_Yard_Date;

// PAR.USR Time = DTL.On Yard Time
PAR.USR_Time = DTL.On_Yard_Time;

// WRK.Status Flag 10 Y/N = CND.Yes
WRK.Status_Flag_10_Y_N = 'Y';

ENDIF;

//?* Determine pgm mode-*add if not in trailer, but on load or not on load
// IF *OTHERWISE
IF *OTHERWISE;

//?* Add mode - trailer not yet in trailer file & not assigned to load
//?Add mode initialize
CASE;

// IF PAR.Carrier Code EQ WRK.BLANK
IF PAR.Carrier_Code = WRK.BLANK;

// AND PAR.Trailer Id EQ WRK.BLANK
AND PAR.Trailer_Id = WRK.BLANK;

CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Carrier Code = PAR.Carrier Code
DTL.Carrier_Code = PAR.Carrier_Code;

// DTL.Trailer Id = PAR.Trailer Id
DTL.Trailer_Id = PAR.Trailer_Id;

//?Convert lower case trailer id to upper case           E004079
CASE;

// IF DTL.Trailer Id is Entered
IF DTL.Trailer_Id <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer Id
LCL.Case_Sensitive_Field = DTL.Trailer_Id;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer Id = LCL.Case Upper Field
DTL.Trailer_Id = LCL.Case_Upper_Field;

ENDIF;

// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

// DTL.USR Carrier Code = PAR.Carrier Code
DTL.USR_Carrier_Code = PAR.Carrier_Code;

// DTL.Load Type = CND.Regular
DTL.Load_Type = 'R';

// DTL.Trailer Type = CND.Reefer
DTL.Trailer_Type = 'R';

// DTL.Seaboard Owned Status = CND.no
DTL.Seaboard_Owned_Status = 'N';

// DTL.Assigned Status = CND.no
DTL.Assigned_Status = 'N';

// DTL.Available Status = CND.yes
DTL.Available_Status = 'Y';

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

// DTL.On Yard Date = WRK.Current System Date
DTL.On_Yard_Date = WRK.Current_System_Date;

// DTL.On Yard Time = WRK.Current System Time
DTL.On_Yard_Time = WRK.Current_System_Time;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// DTL.On Yard Status = CND.yes
DTL.On_Yard_Status = 'Y';

// DTL.Comment Line = CON.*BLANK
DTL.Comment_Line = *BLANK;

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// PAR.USR On Yard Date = DTL.On Yard Date
PAR.USR_On_Yard_Date = DTL.On_Yard_Date;

// PAR.USR Time = DTL.On Yard Time
PAR.USR_Time = DTL.On_Yard_Time;

// WRK.Status Flag 10 Y/N = CND.No
WRK.Status_Flag_10_Y_N = 'N';

ENDIF;

ENDIF;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

//?** Do not allow prompt & select if multi-company is No
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

//?** Do not allow prompt & select if multi-company is No
// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

// IF DTL.*CMD key is *Refresh
IF DTL.*CMD_key = '05';

//?Add mode initialize
CASE;

// IF PAR.Carrier Code EQ WRK.BLANK
IF PAR.Carrier_Code = WRK.BLANK;

// AND PAR.Trailer Id EQ WRK.BLANK
AND PAR.Trailer_Id = WRK.BLANK;

CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Carrier Code = PAR.Carrier Code
DTL.Carrier_Code = PAR.Carrier_Code;

// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

// DTL.Trailer Id = PAR.Trailer Id
DTL.Trailer_Id = PAR.Trailer_Id;

// DTL.USR Carrier Code = PAR.Carrier Code
DTL.USR_Carrier_Code = PAR.Carrier_Code;

// DTL.Load Type = CND.Regular
DTL.Load_Type = 'R';

// DTL.Trailer Type = CND.Reefer
DTL.Trailer_Type = 'R';

// DTL.Seaboard Owned Status = CND.no
DTL.Seaboard_Owned_Status = 'N';

// DTL.Assigned Status = CND.no
DTL.Assigned_Status = 'N';

// DTL.Available Status = CND.yes
DTL.Available_Status = 'Y';

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

// DTL.On Yard Date = WRK.Current System Date
DTL.On_Yard_Date = WRK.Current_System_Date;

// DTL.On Yard Time = WRK.Current System Time
DTL.On_Yard_Time = WRK.Current_System_Time;

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// DTL.Comment Line = CON.*BLANK
DTL.Comment_Line = *BLANK;

// DTL.On Yard Status = CND.yes
DTL.On_Yard_Status = 'Y';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

ENDIF;

//?Change mode initialize
CASE;

// IF PAR.Carrier Code NE WRK.BLANK
IF PAR.Carrier_Code <> WRK.BLANK;

// AND PAR.Trailer Id NE WRK.BLANK
AND PAR.Trailer_Id <> WRK.BLANK;

// DTL.USR Carrier Code = DTL.Carrier Code
DTL.USR_Carrier_Code = DTL.Carrier_Code;

// DTL.Trailer Id = PAR.Trailer Id
DTL.Trailer_Id = PAR.Trailer_Id;

EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Trailer_Id);
PARAMETER(*MISSING);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Trailer_Type);
PARAMETER(DTL.Seaboard_Owned_Status);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);
PARAMETER(DTL.Not_Available_Reason_Code);
PARAMETER(DTL.Comment_Line);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

//?error and quit if record not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?error and quit if record not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Trailer Master not found.'
ERROR(USR2598);
MSGPARM(DTL.Trailer_ID_USR);

QUIT;

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

//?Save to check for change later.
// PAR.USR On Yard Date = DTL.On Yard Date
PAR.USR_On_Yard_Date = DTL.On_Yard_Date;

// PAR.USR Time = DTL.On Yard Time
PAR.USR_Time = DTL.On_Yard_Time;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?USER: Validate fields

// DTL.Carrier Code = DTL.USR Carrier Code
DTL.Carrier_Code = DTL.USR_Carrier_Code;

//?Check if carrier or trailer has been changed (only avail when F6
CASE;

// IF DTL.USR Carrier Code NE PAR.USR Carrier Code
IF DTL.USR_Carrier_Code <> PAR.USR_Carrier_Code;

// OR DTL.Trailer ID USR NE PAR.Trailer ID USR
OR DTL.Trailer_ID_USR <> PAR.Trailer_ID_USR;

EXECUTE FUNCTION(VAL Carr/Trlr Exists   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1508020;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Trailer_Type);
PARAMETER(DTL.Seaboard_Owned_Status);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);
PARAMETER(DTL.Not_Available_Reason_Code);
PARAMETER(DTL.Comment_Line);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.USR On Yard Time = DTL.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DTL.On_Yard_Time / 100;

// PAR.USR Carrier Code = DTL.USR Carrier Code
PAR.USR_Carrier_Code = DTL.USR_Carrier_Code;

// PAR.Trailer ID USR = DTL.Trailer ID USR
PAR.Trailer_ID_USR = DTL.Trailer_ID_USR;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Send information message - 'Trailer already exists.'
MESSAGE(USR2666 *INFO);

ENDIF;

ENDIF;

//?Sel carrier
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Carrier Code
AND PGM.*Cursor_field = DTL.USR_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.USR_Carrier_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Validate carrier code
CASE;

// IF DTL.USR Carrier Code EQ WRK.BLANK
IF DTL.USR_Carrier_Code = WRK.BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.USR_Carrier_Code);

//?Validate carrier code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(DTL.USR_Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(DTL.USR_Carrier_Code);

ENDIF;

ENDIF;

//?validate trailer id
CASE;

// IF DTL.Trailer ID USR EQ WRK.Blank for 12          USR
IF DTL.Trailer_ID_USR = WRK.Blank_for_12_USR;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?validate company number
DO;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/10/07 JRB Removed hard coded companies.
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.Company_Number);

// DTL.Company Name DRV = CON.*BLANK
DTL.Company_Name_DRV = *BLANK;

ENDIF;

ENDDO;

//?Get any open loads for trailer
CASE;

// IF DTL.USR Carrier Code NE WRK.BLANK
IF DTL.USR_Carrier_Code <> WRK.BLANK;

// AND DTL.Trailer ID USR NE WRK.Blank for 12          USR
AND DTL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

EXECUTE FUNCTION(RTV Load for DrpTrlrEx RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2108174;
PARAMETER(PAR.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(PAR.Load_Status);
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(PAR.USR_Load_Type);
PARAMETER(PAR.BOL_Complete_Date);
PARAMETER(PAR.BOL_Complete_Time);
PARAMETER(PAR.Truck_Departure_Date);
PARAMETER(PAR.Truck_Departure_Time);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(PAR.On_Yard_Date);
PARAMETER(PAR.On_Yard_Time);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
PARAMETER(WRK.USR_Active_Load);
{
 //?USER: Initialize routine

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 //?Active load
 MOVE *ALL (To: PAR From: DB1);

 // PAR.USR Active Load = CND.yes
 PAR.USR_Active_Load = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.USR Active Load is no
IF WRK.USR_Active_Load = 'N';

EXECUTE FUNCTION(RTV Load for DrpTrlrRp RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1504531;
PARAMETER(PAR.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(PAR.Load_Status);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(PAR.USR_Load_Type);
PARAMETER(PAR.BOL_Complete_Date);
PARAMETER(PAR.BOL_Complete_Time);
PARAMETER(PAR.Truck_Departure_Date);
PARAMETER(PAR.Truck_Departure_Time);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
PARAMETER(WRK.USR_Active_Load);
{
 //?USER: Initialize routine

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 //?Active load
 MOVE *ALL (To: PAR From: DB1);

 // PAR.USR Active Load = CND.yes
 PAR.USR_Active_Load = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOT Active load
 ENDIF;

}


ENDIF;

//?* Flag if this trailer is already assigned to a load   E002966
CASE;

// IF WRK.USR Active Load is yes
IF WRK.USR_Active_Load = 'Y';

// WRK.Status Flag 10 Y/N = CND.Yes
WRK.Status_Flag_10_Y_N = 'Y';

//?* Flag if this trailer is already assigned to a load   E002966
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Status Flag 10 Y/N = CND.No
WRK.Status_Flag_10_Y_N = 'N';

ENDIF;

ENDIF;

//?Validate Load type
CASE;

// IF PAR.USR Load Type is Bulk & Regular
IF PAR.USR_Load_Type = 'B'/'R';

// AND DTL.Load Type NE PAR.USR Load Type
AND DTL.Load_Type <> PAR.USR_Load_Type;

// Send error message - 'Trailer Load Type &2 disagrees with Load Type &1 on the Load.'
ERROR(USR2613);
MSGPARM(PAR.USR_Load_Type);
MSGPARM(DTL.Load_Type);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?Validate Seaboard Owned Status
CASE;

// IF DTL.Seaboard Owned Status is yes
IF DTL.Seaboard_Owned_Status = 'Y';

CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

// Send information message - 'Seaboard Owned Sts is Yes and the Trailer is assigned to Load &2.'
MESSAGE(USR2604 *INFO);
MSGPARM(DTL.Seaboard_Owned_Status);
MSGPARM(PAR.Load_ID);

ENDIF;

ENDIF;

//?Validate On Yard Date and Time
CASE;

// IF DTL.On Yard Date is GT Zero
IF DTL.On_Yard_Date > *ZERO;

// OR DTL.USR On Yard Time NE WRK.ZERO
OR DTL.USR_On_Yard_Time <> WRK.ZERO;

CASE;

// IF DTL.On Yard Date is not entered
IF DTL.On_Yard_Date = *ZERO;

// OR DTL.USR On Yard Time is Zero
OR DTL.USR_On_Yard_Time = *ZERO;

// Send error message - 'Both On Yard Date and Time must be entered.'
ERROR(USR2602);
MSGPARM(DTL.On_Yard_Date);
MSGPARM(DTL.USR_On_Yard_Time);

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.On Yard Status = CND.yes
DTL.On_Yard_Status = 'Y';

// DTL.Available Status = CND.yes
DTL.Available_Status = 'Y';

//?RMC Chg to user's dft company if ON YD chged, & multi-comp is no  10/13/06
CASE;

// IF PAR.USR On Yard Date NE DTL.On Yard Date
IF PAR.USR_On_Yard_Date <> DTL.On_Yard_Date;

// OR PAR.USR Time NE DTL.USR On Yard Time
OR PAR.USR_Time <> DTL.USR_On_Yard_Time;

//?RMC Chg to user's dft company if multi-comp is no    10/2/06
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

ENDIF;

ENDIF;

//?Validate On Yard Date and Time
// IF *OTHERWISE
IF *OTHERWISE;

//?* Allow trailer to be added when it is in transit     E002966
// DTL.On Yard Status = CND.no
DTL.On_Yard_Status = 'N';

// DTL.Available Status = CND.no
DTL.Available_Status = 'N';

ENDIF;

//?Validate Assigned Status
CASE;

// IF DTL.Assigned Status is no
IF DTL.Assigned_Status = 'N';

CASE;

// IF WRK.USR Active Load is yes
IF WRK.USR_Active_Load = 'Y';

//?Active load
// Send error message - 'Assigned Status cannot be no. Trailer is assigned to Load &2.'
ERROR(USR2603);
MSGPARM(DTL.Assigned_Status);
MSGPARM(PAR.Load_ID);

ENDIF;

//?Validate Assigned Status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.USR Active Load is no
IF WRK.USR_Active_Load = 'N';

// Send error message - 'Assigned Status cannot be yes. Trailer is not assigned to a Load.'
ERROR(USR2606);
MSGPARM(DTL.Assigned_Status);

ENDIF;

ENDIF;

//?Validate Record Status
CASE;

// IF DTL.Record Status is Inactive
IF DTL.Record_Status = 'I';

CASE;

// IF DTL.Assigned Status is yes
IF DTL.Assigned_Status = 'Y';

// Send error message - 'Record Status cannot be Inactive when the Trailer is assigned to a load.'
ERROR(USR2605);
MSGPARM(DTL.Record_Status);

ENDIF;

ENDIF;

//?CALC: Screen function fields

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// DTL.On Yard Time = DTL.USR On Yard Time * CON.100 *
DTL.On_Yard_Time = DTL.USR_On_Yard_Time * 100;

//?USER: User defined action

//?* If trailer is assigned but not on yard, update status'    E002966
CASE;

// IF WRK.Status Flag 10 Y/N is Yes
IF WRK.Status_Flag_10_Y_N = 'Y';

// DTL.Assigned Status = CND.yes
DTL.Assigned_Status = 'Y';

// DTL.Available Status = CND.no
DTL.Available_Status = 'N';

ENDIF;

// DTL.On Yard Time = DTL.USR On Yard Time * CON.100 *
DTL.On_Yard_Time = DTL.USR_On_Yard_Time * 100;

EXECUTE FUNCTION(CRT or Chg Trailer     CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1509415;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Trailer_Type);
PARAMETER(DTL.Seaboard_Owned_Status);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);
PARAMETER(DTL.Not_Available_Reason_Code);
PARAMETER(DTL.Comment_Line);
PARAMETER(DTL.Record_Status);
PARAMETER(PAR.USR_On_Yard_Date);
PARAMETER(PAR.USR_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing if Data record already exists

 EXECUTE FUNCTION(Chg Trailer,Load Hdr   IF) TYPE(EXCINTFUN)                     AC1503459;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER(PAR.Trailer_Type);
 PARAMETER(PAR.Seaboard_Owned_Status);
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Assigned_Status);
 PARAMETER(PAR.Available_Status);
 PARAMETER(PAR.Not_Available_Reason_Code);
 PARAMETER(PAR.Comment_Line);
 PARAMETER(PAR.Status_Unused_1);
 PARAMETER(PAR.Status_Unused_2);
 PARAMETER(PAR.Status_Unused_3);
 PARAMETER(PAR.Status_Unused_4);
 PARAMETER(PAR.Status_Unused_5);
 PARAMETER(PAR.Date_Unused_1);
 PARAMETER(PAR.Date_Unused_2);
 PARAMETER(PAR.Date_Unused_3);
 PARAMETER(PAR.Date_Unused_4);
 PARAMETER(PAR.Date_Unused_5);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.USR_On_Yard_Date);
 PARAMETER(PAR.USR_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Load_Type);
  PARAMETER(PAR.Trailer_Type);
  PARAMETER(PAR.Seaboard_Owned_Status);
  PARAMETER(PAR.On_Yard_Status);
  PARAMETER(PAR.On_Yard_Date);
  PARAMETER(PAR.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(PAR.Not_Available_Reason_Code);
  PARAMETER(PAR.Comment_Line);
  PARAMETER(PAR.Status_Unused_1);
  PARAMETER(PAR.Status_Unused_2);
  PARAMETER(PAR.Status_Unused_3);
  PARAMETER(PAR.Status_Unused_4);
  PARAMETER(PAR.Status_Unused_5);
  PARAMETER(PAR.Date_Unused_1);
  PARAMETER(PAR.Date_Unused_2);
  PARAMETER(PAR.Date_Unused_3);
  PARAMETER(PAR.Date_Unused_4);
  PARAMETER(PAR.Date_Unused_5);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?Change Load Headers not yet departed if the on yard dt/tm changed
  CASE;

  // IF PAR.USR On Yard Date NE PAR.On Yard Date
  IF PAR.USR_On_Yard_Date <> PAR.On_Yard_Date;

  // OR PAR.On Yard Time NE PAR.USR Time
  OR PAR.On_Yard_Time <> PAR.USR_Time;

  EXECUTE FUNCTION(Rtv/Chg On Yard Dt,Tm  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1503451;
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.On_Yard_Date);
  PARAMETER(PAR.On_Yard_Time);
  {
   //?USER: Process Data record

   //?If truck not yet departed, update On Yard DT,Tm on Load Header
   CASE;

   // IF DB1.Truck Departure Date is not entered
   IF DB1.Truck_Departure_Date = *ZERO;

   EXECUTE FUNCTION(Chg On Yard Dt,Tm      CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1503452;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Load_Status);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Seal_1);
   PARAMETER(DB1.Seal_2);
   PARAMETER(DB1.Seal_3);
   PARAMETER(DB1.Total_Load_Order_Weight);
   PARAMETER(DB1.Flat_Amount);
   PARAMETER(DB1.Allocate_Pounds_Miles);
   PARAMETER(DB1.Total_Stops);
   PARAMETER(DB1.Trailer_Id);
   PARAMETER(DB1.Transloader_Carrier_Code);
   PARAMETER(DB1.BOL_Time);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Truck_Size);
   PARAMETER(DB1.Ld_Hdr_Ld_Dtl_Unused);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.Ship_Status);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Number_Pallets_Received);
   PARAMETER(DB1.Number_Pallets_Loaded);
   PARAMETER(DB1.Load_Carrier_Pay_Amt);
   PARAMETER(DB1.Estimated_Arrival_Time);
   PARAMETER(DB1.Actual_Arrival_Date);
   PARAMETER(DB1.Actual_Arrival_Time);
   PARAMETER(DB1.Trailer_IN_Weight);
   PARAMETER(DB1.Trailer_OUT_Weight);
   PARAMETER(DB1.Actual_Departure_Date);
   PARAMETER(DB1.Departure_Time);
   PARAMETER(DB1.Schedule_Sequence_Number);
   PARAMETER(DB1.Product_Temperature);
   PARAMETER(DB1.Number_Spacers_Loaded);
   PARAMETER(DB1.Car_Veh_Initials);
   PARAMETER(DB1.Total_Load_Miles);
   PARAMETER(DB1.Recorder_ID);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Ship_From_Warehouse);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Gross_Weight);
   PARAMETER(DB1.Carrier_Broker);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Actual_Ship_Date);
   PARAMETER(DB1.On_Time_Y_N);
   PARAMETER(DB1.Truck_Ready_Date);
   PARAMETER(DB1.Truck_Ready_Time);
   PARAMETER(DB1.Spotted_Date);
   PARAMETER(DB1.Spotted_Time);
   PARAMETER(DB1.Load_Finished_Date);
   PARAMETER(DB1.Load_Finished_Time);
   PARAMETER(DB1.BOL_Complete_Date);
   PARAMETER(DB1.BOL_Complete_Time);
   PARAMETER(DB1.BOL_Received_Date);
   PARAMETER(DB1.BOL_Received_Time);
   PARAMETER(DB1.Truck_Departure_Date);
   PARAMETER(DB1.Truck_Departure_Time);
   PARAMETER(DB1.Adjusted_Departure_Date);
   PARAMETER(DB1.Adjusted_Departure_Time);
   PARAMETER(DB1.Shipping_Line);
   PARAMETER(DB1.Port_Delv_Terminal);
   PARAMETER(DB1.Vessel_Name);
   PARAMETER(DB1.Voyage);
   PARAMETER(DB1.Sail_Date);
   PARAMETER(DB1.Booking_Number);
   PARAMETER(DB1.Discharge_Port);
   PARAMETER(DB1.Arrival_Date);
   PARAMETER(DB1.Container_Number);
   PARAMETER(DB1.Date_In);
   PARAMETER(DB1.Time_In);
   PARAMETER(DB1.Date_Out);
   PARAMETER(DB1.Time_Out);
   PARAMETER(DB1.Load_Total_Freight);
   PARAMETER(DB1.Scheduled_Delivery_Date);
   PARAMETER(DB1.Scheduled_Delivery_Time);
   PARAMETER(DB1.LH_Unused_Sts);
   PARAMETER(DB1.LH_Carrier_Payment_Sts);
   PARAMETER(DB1.Bring_Back_Miles);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Load_Acceptance_Flag);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.On_Yard_Date);
   PARAMETER(PAR.On_Yard_Time);
   PARAMETER(DB1.Deadline_Departure_Date);
   PARAMETER(DB1.Deadline_Departure_Time);
   PARAMETER(DB1.Load_Held_Over);
   PARAMETER(DB1.Load_Held_Over_Reason);
   PARAMETER(DB1.Ocean_BOL_Number);
   PARAMETER(DB1.Express_Mail_Number);
   PARAMETER(DB1.Express_Mail_Date);
   PARAMETER(DB1.Load_Shag_Flag);
   PARAMETER(DB1.Load_Wash_Flag);
   PARAMETER(DB1.Product_Complete_Date);
   PARAMETER(DB1.Product_Complete_Time);
   PARAMETER(DB1.Load_Confirmation_Time);
   PARAMETER(DB1.Load_Door_1);
   PARAMETER(DB1.Override_Total_Load_Miles);
   PARAMETER(DB1.Load_Door_2);
   PARAMETER(DB1.Partial_Load);
   PARAMETER(DB1.Load_Confirmation_Fax_Sts);
   PARAMETER(DB1.Export_Load_USDA_OK);
   PARAMETER(DB1.Late_Delivery_Email_Flag);
   PARAMETER(DB1.Load_Actual_Freight);
   PARAMETER(DB1.LH_On_Time_Reason_Code);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing after Data read

    //?Save copy of fields written to Load Order Change Log
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Carrier Code = DB1.Carrier Code
    LCL.Carrier_Code = DB1.Carrier_Code;

    // LCL.Scheduled Delivery Date = DB1.Scheduled Delivery Date
    LCL.Scheduled_Delivery_Date = DB1.Scheduled_Delivery_Date;

    ENDIF;

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    //?Check fields for Load Order Header Change Log
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Carrier Code
    CASE;

    // IF PAR.Carrier Code NE LCL.Carrier Code
    IF PAR.Carrier_Code <> LCL.Carrier_Code;

    // Call program CRT Load/Order Chg Log XF.
    CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
    PARAMETER(DB1.Load_ID);
    PARAMETER(*ZERO);
    PARAMETER('CARCHG');
    PARAMETER('TRF');
    PARAMETER(LCL.Carrier_Code);
    PARAMETER(PAR.Carrier_Code);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Company_Number);
    PARAMETER(*ZERO);

    ENDIF;

    //?Scheduled Delivery Date
    CASE;

    // IF PAR.Scheduled Delivery Date NE LCL.Scheduled Delivery Date
    IF PAR.Scheduled_Delivery_Date <> LCL.Scheduled_Delivery_Date;

    //?Convert dates to character
    // LCL.Date From Alpha       USR = CVTVAR(LCL.Scheduled Delivery Date)
    LCL.Date_From_Alpha_USR = CVTVAR(LCL.Scheduled_Delivery_Date);

    // LCL.Date To Alpha         USR = CVTVAR(PAR.Scheduled Delivery Date)
    LCL.Date_To_Alpha_USR = CVTVAR(PAR.Scheduled_Delivery_Date);

    // Call program CRT Load/Order Chg Log XF.
    CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
    PARAMETER(DB1.Load_ID);
    PARAMETER(*ZERO);
    PARAMETER('SCHDLV');
    PARAMETER('TRF');
    PARAMETER(LCL.Date_From_Alpha_USR);
    PARAMETER(LCL.Date_To_Alpha_USR);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Company_Number);
    PARAMETER(*ZERO);

    ENDIF;

    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

 }

}


//?* Trailer was assigned to load before it was on the yard    E002966
CASE;

// IF WRK.Status Flag 10 Y/N is Yes
IF WRK.Status_Flag_10_Y_N = 'Y';

EXECUTE FUNCTION(Rtv/Chg Ld on yd dt/tm RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2083759;
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.USR_Carrier_Code);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
{
 //?USER: Process Data record

 //?If truck not yet departed, update On Yard DT,Tm on Load Header
 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 EXECUTE FUNCTION(Chg On Yard Dt,Tm      CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1503452;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Load_Status);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Seal_1);
 PARAMETER(DB1.Seal_2);
 PARAMETER(DB1.Seal_3);
 PARAMETER(DB1.Total_Load_Order_Weight);
 PARAMETER(DB1.Flat_Amount);
 PARAMETER(DB1.Allocate_Pounds_Miles);
 PARAMETER(DB1.Total_Stops);
 PARAMETER(DB1.Trailer_Id);
 PARAMETER(DB1.Transloader_Carrier_Code);
 PARAMETER(DB1.BOL_Time);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Truck_Size);
 PARAMETER(DB1.Ld_Hdr_Ld_Dtl_Unused);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.Ship_Status);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Number_Pallets_Received);
 PARAMETER(DB1.Number_Pallets_Loaded);
 PARAMETER(DB1.Load_Carrier_Pay_Amt);
 PARAMETER(DB1.Estimated_Arrival_Time);
 PARAMETER(DB1.Actual_Arrival_Date);
 PARAMETER(DB1.Actual_Arrival_Time);
 PARAMETER(DB1.Trailer_IN_Weight);
 PARAMETER(DB1.Trailer_OUT_Weight);
 PARAMETER(DB1.Actual_Departure_Date);
 PARAMETER(DB1.Departure_Time);
 PARAMETER(DB1.Schedule_Sequence_Number);
 PARAMETER(DB1.Product_Temperature);
 PARAMETER(DB1.Number_Spacers_Loaded);
 PARAMETER(DB1.Car_Veh_Initials);
 PARAMETER(DB1.Total_Load_Miles);
 PARAMETER(DB1.Recorder_ID);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Gross_Weight);
 PARAMETER(DB1.Carrier_Broker);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Actual_Ship_Date);
 PARAMETER(DB1.On_Time_Y_N);
 PARAMETER(DB1.Truck_Ready_Date);
 PARAMETER(DB1.Truck_Ready_Time);
 PARAMETER(DB1.Spotted_Date);
 PARAMETER(DB1.Spotted_Time);
 PARAMETER(DB1.Load_Finished_Date);
 PARAMETER(DB1.Load_Finished_Time);
 PARAMETER(DB1.BOL_Complete_Date);
 PARAMETER(DB1.BOL_Complete_Time);
 PARAMETER(DB1.BOL_Received_Date);
 PARAMETER(DB1.BOL_Received_Time);
 PARAMETER(DB1.Truck_Departure_Date);
 PARAMETER(DB1.Truck_Departure_Time);
 PARAMETER(DB1.Adjusted_Departure_Date);
 PARAMETER(DB1.Adjusted_Departure_Time);
 PARAMETER(DB1.Shipping_Line);
 PARAMETER(DB1.Port_Delv_Terminal);
 PARAMETER(DB1.Vessel_Name);
 PARAMETER(DB1.Voyage);
 PARAMETER(DB1.Sail_Date);
 PARAMETER(DB1.Booking_Number);
 PARAMETER(DB1.Discharge_Port);
 PARAMETER(DB1.Arrival_Date);
 PARAMETER(DB1.Container_Number);
 PARAMETER(DB1.Date_In);
 PARAMETER(DB1.Time_In);
 PARAMETER(DB1.Date_Out);
 PARAMETER(DB1.Time_Out);
 PARAMETER(DB1.Load_Total_Freight);
 PARAMETER(DB1.Scheduled_Delivery_Date);
 PARAMETER(DB1.Scheduled_Delivery_Time);
 PARAMETER(DB1.LH_Unused_Sts);
 PARAMETER(DB1.LH_Carrier_Payment_Sts);
 PARAMETER(DB1.Bring_Back_Miles);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Load_Acceptance_Flag);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(DB1.Deadline_Departure_Date);
 PARAMETER(DB1.Deadline_Departure_Time);
 PARAMETER(DB1.Load_Held_Over);
 PARAMETER(DB1.Load_Held_Over_Reason);
 PARAMETER(DB1.Ocean_BOL_Number);
 PARAMETER(DB1.Express_Mail_Number);
 PARAMETER(DB1.Express_Mail_Date);
 PARAMETER(DB1.Load_Shag_Flag);
 PARAMETER(DB1.Load_Wash_Flag);
 PARAMETER(DB1.Product_Complete_Date);
 PARAMETER(DB1.Product_Complete_Time);
 PARAMETER(DB1.Load_Confirmation_Time);
 PARAMETER(DB1.Load_Door_1);
 PARAMETER(DB1.Override_Total_Load_Miles);
 PARAMETER(DB1.Load_Door_2);
 PARAMETER(DB1.Partial_Load);
 PARAMETER(DB1.Load_Confirmation_Fax_Sts);
 PARAMETER(DB1.Export_Load_USDA_OK);
 PARAMETER(DB1.Late_Delivery_Email_Flag);
 PARAMETER(DB1.Load_Actual_Freight);
 PARAMETER(DB1.LH_On_Time_Reason_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing after Data read

  //?Save copy of fields written to Load Order Change Log
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Carrier Code = DB1.Carrier Code
  LCL.Carrier_Code = DB1.Carrier_Code;

  // LCL.Scheduled Delivery Date = DB1.Scheduled Delivery Date
  LCL.Scheduled_Delivery_Date = DB1.Scheduled_Delivery_Date;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  //?Check fields for Load Order Header Change Log
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Carrier Code
  CASE;

  // IF PAR.Carrier Code NE LCL.Carrier Code
  IF PAR.Carrier_Code <> LCL.Carrier_Code;

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER('CARCHG');
  PARAMETER('TRF');
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(*ZERO);

  ENDIF;

  //?Scheduled Delivery Date
  CASE;

  // IF PAR.Scheduled Delivery Date NE LCL.Scheduled Delivery Date
  IF PAR.Scheduled_Delivery_Date <> LCL.Scheduled_Delivery_Date;

  //?Convert dates to character
  // LCL.Date From Alpha       USR = CVTVAR(LCL.Scheduled Delivery Date)
  LCL.Date_From_Alpha_USR = CVTVAR(LCL.Scheduled_Delivery_Date);

  // LCL.Date To Alpha         USR = CVTVAR(PAR.Scheduled Delivery Date)
  LCL.Date_To_Alpha_USR = CVTVAR(PAR.Scheduled_Delivery_Date);

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER('SCHDLV');
  PARAMETER('TRF');
  PARAMETER(LCL.Date_From_Alpha_USR);
  PARAMETER(LCL.Date_To_Alpha_USR);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(*ZERO);

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


ENDIF;

PGM.*Return_code = *BLANK;

RETURN;

