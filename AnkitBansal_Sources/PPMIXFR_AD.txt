// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPMIXFR
// ?Date: 14.08.2025 Time: 03:41:11
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?E4057 JJH 04/22/15 - Delete Credit Manager Approval
//?- This logic was added to remove any Credit Manager Approval
//?  records in the event that they were created, and later not
//?  required due to the change of Department/Reason Codes that do
//?  require Credit Manager Approval.
EXECUTE FUNCTION(Dlt A/R Claim Aprrl C RT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC2104415;
PARAMETER(PAR.Claim_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Approval Person Type is Credit Manager
 IF DB1.Approval_Person_Type = 'C';

 EXECUTE FUNCTION(Dlt A/R Claim Apprl   DO) TYPE(DLTOBJ) FILE(PPAYCPP)           AC1721289;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.Approval_Title_Code);
 PARAMETER(DB1.Sequence_Number);
 ENDIF;

}


//?E4057 JJH 04/22/15 - Create Credit Manager Approval
//?- If a record exists in the A/R Claim Product or A/R Claim Resale
//?  Product file with at least 1 record with Require Credit Manager
//?  = Y(Yes).
EXECUTE FUNCTION(Crt A/R Claim Apprl    RT) TYPE(RTVOBJ) FILE(PPAWREP)          AC1729945;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Claim_Company_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 //?Approval Create Status = Standard
 CASE;

 // IF DB1.Approval Create Sts is Standard
 IF DB1.Approval_Create_Sts = 'S';

 EXECUTE FUNCTION(Rtv Claim Infor/Appr  RT) TYPE(RTVOBJ) FILE(PDMKCPP)           AC1730765;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(LCL.Salesperson_to_Rvw_Claim);
 PARAMETER(LCL.Claim_Amount);
 PARAMETER(LCL.Claim_Net_Loss);
 PARAMETER(LCL.Approved_Net_Loss);
 {
  //?USER: Processing if Data record not found

  // PAR.Claim Amount = CON.*ZERO
  PAR.Claim_Amount = *ZERO;

  // PAR.Claim Net Loss = CON.*ZERO
  PAR.Claim_Net_Loss = *ZERO;

  // PAR.Approved Net Loss = CON.*ZERO
  PAR.Approved_Net_Loss = *ZERO;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?SEL: Claim Amount
 CASE;

 // IF LCL.Claim Amount NE WRK.ZERO
 IF LCL.Claim_Amount <> WRK.ZERO;

 // LCL.Amount Paid = LCL.Claim Amount
 LCL.Amount_Paid = LCL.Claim_Amount;

 //?SEL: Claim Amount
 // IF LCL.Claim Net Loss NE WRK.ZERO
 IF LCL.Claim_Net_Loss <> WRK.ZERO;

 // LCL.Amount Paid = LCL.Claim Net Loss
 LCL.Amount_Paid = LCL.Claim_Net_Loss;

 ENDIF;

 //?SEL: Amount Paid
 CASE;

 // IF LCL.Amount Paid is greater or equal to zero
 IF LCL.Amount_Paid >= *ZERO;

 //?Min Max Validtion applies to claim amount positive side
 DO;

 //?MIN MAX ON CLAIM
 CASE;

 // IF DB1.Minimum Net Loss Amount is not equal to zeros
 IF DB1.Minimum_Net_Loss_Amount <> *ZERO;

 CASE;

 // IF LCL.Amount Paid GE DB1.Minimum Net Loss Amount
 IF LCL.Amount_Paid >= DB1.Minimum_Net_Loss_Amount;

 // AND LCL.Amount Paid LE DB1.Maximum Net Loss Amount
 AND LCL.Amount_Paid <= DB1.Maximum_Net_Loss_Amount;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?MIN MAX ON CLAIM
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDDO;

 //?SEL: Amount Paid
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Max or Min Validtion applies to claim amount negative check
 DO;

 //?Max or min on claim -- Neg check
 CASE;

 // IF DB1.Minimum Net Loss Amount is not equal to zeros
 IF DB1.Minimum_Net_Loss_Amount <> *ZERO;

 // LCL.Minimum Net Loss Amount = DB1.Minimum Net Loss Amount * CON.-1 *
 LCL.Minimum_Net_Loss_Amount = DB1.Minimum_Net_Loss_Amount * -1;

 // LCL.Maximum Net Loss Amount = DB1.Maximum Net Loss Amount * CON.-1 *
 LCL.Maximum_Net_Loss_Amount = DB1.Maximum_Net_Loss_Amount * -1;

 //?Did not pass Positive Ranage now check Neg Ranage
 CASE;

 // IF LCL.Amount Paid GE LCL.Maximum Net Loss Amount
 IF LCL.Amount_Paid >= LCL.Maximum_Net_Loss_Amount;

 // AND LCL.Amount Paid LE LCL.Minimum Net Loss Amount
 AND LCL.Amount_Paid <= LCL.Minimum_Net_Loss_Amount;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Did not pass Positive Ranage now check Neg Ranage
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Max or min on claim -- Neg check
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDDO;

 ENDIF;

 //?Department Verified only if department was selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND DB1.Claim Department Code is Not Entered
 AND DB1.Claim_Department_Code = *BLANK;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Department Verified only if department was selected
 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND DB1.Claim Department Code is Entered
 AND DB1.Claim_Department_Code <> *BLANK;

 EXECUTE FUNCTION(Vry Clm Prod/Appr     RT) TYPE(RTVOBJ) FILE(PDMOCPP)           AC1730761;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Claim_Company_Number);
 PARAMETER(DB1.Claim_Department_Code);
 PARAMETER(PGM.*Record_selected);
 {
  //?USER: Processing if Data record not found

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  //?USER: Process Data record

  CASE;

  // IF PAR.Claim Department Code EQ DB1.Claim Department Code
  IF PAR.Claim_Department_Code = DB1.Claim_Department_Code;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

 }

 CASE;

 // IF PGM.*Record selected is *NO
 IF PGM.*Record_selected = 'N';

 EXECUTE FUNCTION(Vry Clm ResalePrd/ApprRT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1735311;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Claim_Company_Number);
 PARAMETER(DB1.Claim_Department_Code);
 PARAMETER(PGM.*Record_selected);
 {
  //?USER: Processing if Data record not found

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  //?USER: Process Data record

  CASE;

  // IF PAR.Claim Department Code EQ DB1.Claim Department Code
  IF PAR.Claim_Department_Code = DB1.Claim_Department_Code;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  QUIT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?SEL: Company Number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND DB1.Company Number is Equal to zero
 AND DB1.Company_Number = *ZERO;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?SEL: Company Number
 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND DB1.Company Number is greater than zero
 AND DB1.Company_Number > *ZERO;

 EXECUTE FUNCTION(Vry Clm Prod/Appr CO  RT) TYPE(RTVOBJ) FILE(PDMOCPP)           AC1828034;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PGM.*Record_selected);
 {
  //?USER: Processing if Data record not found

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  //?USER: Process Data record

  // PAR.*Record selected = CND.*YES
  PAR.*Record_selected = 'Y';

  QUIT;

 }

 CASE;

 // IF PGM.*Record selected is *NO
 IF PGM.*Record_selected = 'N';

 EXECUTE FUNCTION(Vry Clm RslPd/Appr CO RT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1828039;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PGM.*Record_selected);
 {
  //?USER: Processing if Data record not found

  // PAR.*Record selected = CND.*NO
  PAR.*Record_selected = 'N';

  //?USER: Process Data record

  // PAR.*Record selected = CND.*YES
  PAR.*Record_selected = 'Y';

  QUIT;

 }

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Approval Create Status = Standard
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.Approval Person Type is Order Salesperson
 IF DB1.Approval_Person_Type = 'O';

 EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
 PARAMETER(LCL.Salesperson_to_Rvw_Claim);
 PARAMETER(LCL.Salesperson_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv All Fields         RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1570242;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(LCL.Email_Address);
 PARAMETER(LCL.Availability_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt A/R Claim ApprlStdRT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729947;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(DB1.Approval_Title_Code);
 PARAMETER(DB1.Approval_Title_Name);
 PARAMETER(LCL.Salesperson_Name);
 PARAMETER(LCL.Email_Address);
 PARAMETER(DB1.Approval_Person_Fax);
 PARAMETER(DB1.Approval_Person_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Approval_Required);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt A/R Claim Apprl   IF) TYPE(EXCINTFUN)                      AC1729954;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(PAR.Approval_Title_Code);
  PARAMETER(LCL.Sequence_Number);
  PARAMETER(PAR.Approval_Title_Name);
  PARAMETER(PAR.Approval_Person);
  PARAMETER(PAR.Approval_Person_Email);
  PARAMETER(PAR.Approval_Person_Fax);
  PARAMETER(PAR.Approval_Person_Type);
  PARAMETER(PAR.Approved_Denied_Date);
  PARAMETER(PAR.Approved_Denied_Time);
  PARAMETER(PAR.Approval_Required);
  PARAMETER(PAR.Approval_Status);
  PARAMETER(PAR.Emailed_Date);
  PARAMETER(PAR.Emailed_Time);
  PARAMETER(PAR.Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729949;
   PARAMETER(PAR.Claim_Number);
   PARAMETER(PAR.Approval_Title_Code);
   PARAMETER(PAR.Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.Sequence Number = CON.1
    PAR.Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.Sequence Number = DB1.Sequence Number + CON.1
    PAR.Sequence_Number = DB1.Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt A/R Claim ApprlSA CR) TYPE(CRTOBJ) FILE(PPAYCPP)           AC1879891;
   PARAMETER(PAR.Claim_Number);
   PARAMETER(PAR.Approval_Title_Code);
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Approval_Title_Name);
   PARAMETER(PAR.Approval_Person);
   PARAMETER(PAR.Approval_Person_Email);
   PARAMETER(PAR.Approval_Person_Fax);
   PARAMETER(PAR.Approval_Person_Type);
   PARAMETER(PAR.Approved_Denied_Date);
   PARAMETER(PAR.Approved_Denied_Time);
   PARAMETER(PAR.Approval_Required);
   PARAMETER(PAR.Approval_Status);
   PARAMETER(PAR.Emailed_Date);
   PARAMETER(PAR.Emailed_Time);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Claim_Audit_Selection_Usr);
   PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
   PARAMETER(PAR.Approval_Claim_Audit_Eml);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

    //?USER: Processing after Data update

    CASE;

    // IF PAR.Claim Audit Selection Usr is yes
    IF PAR.Claim_Audit_Selection_Usr = 'Y';

    //?System generated action notes
    //?Claim approval was added
    // Call program Crt A/R Claim ExpComSG XF.
    CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
    PARAMETER(PAR.Claim_Number);
    PARAMETER('Claim approval was added');
    PARAMETER('S');
    PARAMETER('CLMCHANGE');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('CAR');

    ENDIF;

   }

  }

 }

 //?E4057 JJH 04/22/15 - Create Credit Manager Approval
 // IF DB1.Approval Person Type is Credit Manager
 IF DB1.Approval_Person_Type = 'C';

 EXECUTE FUNCTION(Crt A/R Claim Aprl CRM IF) TYPE(EXCINTFUN)                     AC2104366;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Claim_Company_Number);
 PARAMETER(DB1.Approval_Title_Code);
 PARAMETER(DB1.Approval_Title_Name);
 PARAMETER(DB1.Approval_Person);
 PARAMETER(DB1.Approval_Person_Email);
 PARAMETER(DB1.Approval_Person_Fax);
 PARAMETER(DB1.Approval_Person_Type);
 PARAMETER(DB1.Minimum_Net_Loss_Amount);
 PARAMETER(DB1.Maximum_Net_Loss_Amount);
 PARAMETER(DB1.Approval_Required);
 PARAMETER(DB1.Approval_Create_Sts);
 PARAMETER(DB1.Claim_Department_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Record_Status);
 {
  //?Execute internal function

  //?E4057 JJH 04/22/15 - Create Credit Manager Approval
  //?- If a record exists in the A/R Claim Product or A/R Claim Resale
  //?  Product file with at least 1 record with Require Credit Manager
  //?  = Y(Yes).
  EXECUTE FUNCTION(Rtv Require CM Apv    RT) TYPE(RTVOBJ) FILE(PDMOCPP)           AC2104367;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(LCL.*Record_selected);
  {
   //?USER: Initialize routine

   // PAR.*Record selected = CND.*NO
   PAR.*Record_selected = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.CP Require CM Approval is Approval Required
   IF DB1.CP_Require_CM_Approval = 'Y';

   // PAR.*Record selected = CND.*YES
   PAR.*Record_selected = 'Y';

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.*Record selected is *YES
  IF LCL.*Record_selected = 'Y';

  EXECUTE FUNCTION(Crt A/R Claim ApprlStdRT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729947;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(PAR.Approval_Title_Code);
  PARAMETER(PAR.Approval_Title_Name);
  PARAMETER(PAR.Approval_Person);
  PARAMETER(PAR.Approval_Person_Email);
  PARAMETER(PAR.Approval_Person_Fax);
  PARAMETER(PAR.Approval_Person_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Approval_Required);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt A/R Claim Apprl   IF) TYPE(EXCINTFUN)                      AC1729954;
   PARAMETER(PAR.Claim_Number);
   PARAMETER(PAR.Approval_Title_Code);
   PARAMETER(LCL.Sequence_Number);
   PARAMETER(PAR.Approval_Title_Name);
   PARAMETER(PAR.Approval_Person);
   PARAMETER(PAR.Approval_Person_Email);
   PARAMETER(PAR.Approval_Person_Fax);
   PARAMETER(PAR.Approval_Person_Type);
   PARAMETER(PAR.Approved_Denied_Date);
   PARAMETER(PAR.Approved_Denied_Time);
   PARAMETER(PAR.Approval_Required);
   PARAMETER(PAR.Approval_Status);
   PARAMETER(PAR.Emailed_Date);
   PARAMETER(PAR.Emailed_Time);
   PARAMETER(PAR.Record_Status);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729949;
    PARAMETER(PAR.Claim_Number);
    PARAMETER(PAR.Approval_Title_Code);
    PARAMETER(PAR.Sequence_Number);
    {
     //?USER: Processing if Data record not found

     // PAR.Sequence Number = CON.1
     PAR.Sequence_Number = 1;

     //?USER: Process Data record

     // PAR.Sequence Number = DB1.Sequence Number + CON.1
     PAR.Sequence_Number = DB1.Sequence_Number + 1;

     QUIT;

    }

    EXECUTE FUNCTION(Crt A/R Claim ApprlSA CR) TYPE(CRTOBJ) FILE(PPAYCPP)           AC1879891;
    PARAMETER(PAR.Claim_Number);
    PARAMETER(PAR.Approval_Title_Code);
    PARAMETER(PAR.Sequence_Number);
    PARAMETER(PAR.Approval_Title_Name);
    PARAMETER(PAR.Approval_Person);
    PARAMETER(PAR.Approval_Person_Email);
    PARAMETER(PAR.Approval_Person_Fax);
    PARAMETER(PAR.Approval_Person_Type);
    PARAMETER(PAR.Approved_Denied_Date);
    PARAMETER(PAR.Approved_Denied_Time);
    PARAMETER(PAR.Approval_Required);
    PARAMETER(PAR.Approval_Status);
    PARAMETER(PAR.Emailed_Date);
    PARAMETER(PAR.Emailed_Time);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Claim_Audit_Selection_Usr);
    PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
    PARAMETER(PAR.Approval_Claim_Audit_Eml);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Create_Date);
     PARAMETER(DB1.Create_Time);
     PARAMETER(DB1.Create_User);
     PARAMETER(DB1.Create_Program);
     PARAMETER(DB1.Change_Date);
     PARAMETER(DB1.Change_Time);
     PARAMETER(DB1.Change_User);
     PARAMETER(DB1.Change_Program);
     {
      //?Execute internal function

      //?*** Set RECORD STATUS field. ***
      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      //?*** Set CREATE fields. ***
      // PAR.Create Date = JOB.*Job date
      PAR.Create_Date = JOB.*Job_date;

      // PAR.Create Time = JOB.*Job time
      PAR.Create_Time = JOB.*Job_time;

      // PAR.Create User = JOB.*USER
      PAR.Create_User = JOB.*USER;

      // PAR.Create Program = JOB.*PROGRAM
      PAR.Create_Program = JOB.*PROGRAM;

      //?*** Set CHANGE fields. ***
      // PAR.Change Date = CON.*ZERO
      PAR.Change_Date = *ZERO;

      // PAR.Change Time = CON.*ZERO
      PAR.Change_Time = *ZERO;

      // PAR.Change User = CON.*BLANK
      PAR.Change_User = *BLANK;

      // PAR.Change Program = CON.*BLANK
      PAR.Change_Program = *BLANK;

     }

     //?USER: Processing after Data update

     CASE;

     // IF PAR.Claim Audit Selection Usr is yes
     IF PAR.Claim_Audit_Selection_Usr = 'Y';

     //?System generated action notes
     //?Claim approval was added
     // Call program Crt A/R Claim ExpComSG XF.
     CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
     PARAMETER(PAR.Claim_Number);
     PARAMETER('Claim approval was added');
     PARAMETER('S');
     PARAMETER('CLMCHANGE');
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER('CAR');

     ENDIF;

    }

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Require CM Apv) TYPE(RTVOBJ) FILE(PDMPCPP)                 AC2104368;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(LCL.*Record_selected);
  {
   //?USER: Initialize routine

   // PAR.*Record selected = CND.*NO
   PAR.*Record_selected = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.CRP Require CM Approval is Approval Required
   IF DB1.CRP_Require_CM_Approval = 'Y';

   // PAR.*Record selected = CND.*YES
   PAR.*Record_selected = 'Y';

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.*Record selected is *YES
  IF LCL.*Record_selected = 'Y';

  EXECUTE FUNCTION(Crt A/R Claim ApprlStdRT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729947;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(PAR.Approval_Title_Code);
  PARAMETER(PAR.Approval_Title_Name);
  PARAMETER(PAR.Approval_Person);
  PARAMETER(PAR.Approval_Person_Email);
  PARAMETER(PAR.Approval_Person_Fax);
  PARAMETER(PAR.Approval_Person_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Approval_Required);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt A/R Claim Apprl   IF) TYPE(EXCINTFUN)                      AC1729954;
   PARAMETER(PAR.Claim_Number);
   PARAMETER(PAR.Approval_Title_Code);
   PARAMETER(LCL.Sequence_Number);
   PARAMETER(PAR.Approval_Title_Name);
   PARAMETER(PAR.Approval_Person);
   PARAMETER(PAR.Approval_Person_Email);
   PARAMETER(PAR.Approval_Person_Fax);
   PARAMETER(PAR.Approval_Person_Type);
   PARAMETER(PAR.Approved_Denied_Date);
   PARAMETER(PAR.Approved_Denied_Time);
   PARAMETER(PAR.Approval_Required);
   PARAMETER(PAR.Approval_Status);
   PARAMETER(PAR.Emailed_Date);
   PARAMETER(PAR.Emailed_Time);
   PARAMETER(PAR.Record_Status);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729949;
    PARAMETER(PAR.Claim_Number);
    PARAMETER(PAR.Approval_Title_Code);
    PARAMETER(PAR.Sequence_Number);
    {
     //?USER: Processing if Data record not found

     // PAR.Sequence Number = CON.1
     PAR.Sequence_Number = 1;

     //?USER: Process Data record

     // PAR.Sequence Number = DB1.Sequence Number + CON.1
     PAR.Sequence_Number = DB1.Sequence_Number + 1;

     QUIT;

    }

    EXECUTE FUNCTION(Crt A/R Claim ApprlSA CR) TYPE(CRTOBJ) FILE(PPAYCPP)           AC1879891;
    PARAMETER(PAR.Claim_Number);
    PARAMETER(PAR.Approval_Title_Code);
    PARAMETER(PAR.Sequence_Number);
    PARAMETER(PAR.Approval_Title_Name);
    PARAMETER(PAR.Approval_Person);
    PARAMETER(PAR.Approval_Person_Email);
    PARAMETER(PAR.Approval_Person_Fax);
    PARAMETER(PAR.Approval_Person_Type);
    PARAMETER(PAR.Approved_Denied_Date);
    PARAMETER(PAR.Approved_Denied_Time);
    PARAMETER(PAR.Approval_Required);
    PARAMETER(PAR.Approval_Status);
    PARAMETER(PAR.Emailed_Date);
    PARAMETER(PAR.Emailed_Time);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Claim_Audit_Selection_Usr);
    PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
    PARAMETER(PAR.Approval_Claim_Audit_Eml);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Create_Date);
     PARAMETER(DB1.Create_Time);
     PARAMETER(DB1.Create_User);
     PARAMETER(DB1.Create_Program);
     PARAMETER(DB1.Change_Date);
     PARAMETER(DB1.Change_Time);
     PARAMETER(DB1.Change_User);
     PARAMETER(DB1.Change_Program);
     {
      //?Execute internal function

      //?*** Set RECORD STATUS field. ***
      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      //?*** Set CREATE fields. ***
      // PAR.Create Date = JOB.*Job date
      PAR.Create_Date = JOB.*Job_date;

      // PAR.Create Time = JOB.*Job time
      PAR.Create_Time = JOB.*Job_time;

      // PAR.Create User = JOB.*USER
      PAR.Create_User = JOB.*USER;

      // PAR.Create Program = JOB.*PROGRAM
      PAR.Create_Program = JOB.*PROGRAM;

      //?*** Set CHANGE fields. ***
      // PAR.Change Date = CON.*ZERO
      PAR.Change_Date = *ZERO;

      // PAR.Change Time = CON.*ZERO
      PAR.Change_Time = *ZERO;

      // PAR.Change User = CON.*BLANK
      PAR.Change_User = *BLANK;

      // PAR.Change Program = CON.*BLANK
      PAR.Change_Program = *BLANK;

     }

     //?USER: Processing after Data update

     CASE;

     // IF PAR.Claim Audit Selection Usr is yes
     IF PAR.Claim_Audit_Selection_Usr = 'Y';

     //?System generated action notes
     //?Claim approval was added
     // Call program Crt A/R Claim ExpComSG XF.
     CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
     PARAMETER(PAR.Claim_Number);
     PARAMETER('Claim approval was added');
     PARAMETER('S');
     PARAMETER('CLMCHANGE');
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER('CAR');

     ENDIF;

    }

   }

  }

  ENDIF;

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Crt A/R Claim ApprlStdRT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729947;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(DB1.Approval_Title_Code);
 PARAMETER(DB1.Approval_Title_Name);
 PARAMETER(DB1.Approval_Person);
 PARAMETER(DB1.Approval_Person_Email);
 PARAMETER(DB1.Approval_Person_Fax);
 PARAMETER(DB1.Approval_Person_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Approval_Required);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt A/R Claim Apprl   IF) TYPE(EXCINTFUN)                      AC1729954;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(PAR.Approval_Title_Code);
  PARAMETER(LCL.Sequence_Number);
  PARAMETER(PAR.Approval_Title_Name);
  PARAMETER(PAR.Approval_Person);
  PARAMETER(PAR.Approval_Person_Email);
  PARAMETER(PAR.Approval_Person_Fax);
  PARAMETER(PAR.Approval_Person_Type);
  PARAMETER(PAR.Approved_Denied_Date);
  PARAMETER(PAR.Approved_Denied_Time);
  PARAMETER(PAR.Approval_Required);
  PARAMETER(PAR.Approval_Status);
  PARAMETER(PAR.Emailed_Date);
  PARAMETER(PAR.Emailed_Time);
  PARAMETER(PAR.Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1729949;
   PARAMETER(PAR.Claim_Number);
   PARAMETER(PAR.Approval_Title_Code);
   PARAMETER(PAR.Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.Sequence Number = CON.1
    PAR.Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.Sequence Number = DB1.Sequence Number + CON.1
    PAR.Sequence_Number = DB1.Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt A/R Claim ApprlSA CR) TYPE(CRTOBJ) FILE(PPAYCPP)           AC1879891;
   PARAMETER(PAR.Claim_Number);
   PARAMETER(PAR.Approval_Title_Code);
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(PAR.Approval_Title_Name);
   PARAMETER(PAR.Approval_Person);
   PARAMETER(PAR.Approval_Person_Email);
   PARAMETER(PAR.Approval_Person_Fax);
   PARAMETER(PAR.Approval_Person_Type);
   PARAMETER(PAR.Approved_Denied_Date);
   PARAMETER(PAR.Approved_Denied_Time);
   PARAMETER(PAR.Approval_Required);
   PARAMETER(PAR.Approval_Status);
   PARAMETER(PAR.Emailed_Date);
   PARAMETER(PAR.Emailed_Time);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Claim_Audit_Selection_Usr);
   PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
   PARAMETER(PAR.Approval_Claim_Audit_Eml);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

    //?USER: Processing after Data update

    CASE;

    // IF PAR.Claim Audit Selection Usr is yes
    IF PAR.Claim_Audit_Selection_Usr = 'Y';

    //?System generated action notes
    //?Claim approval was added
    // Call program Crt A/R Claim ExpComSG XF.
    CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
    PARAMETER(PAR.Claim_Number);
    PARAMETER('Claim approval was added');
    PARAMETER('S');
    PARAMETER('CLMCHANGE');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('CAR');

    ENDIF;

   }

  }

 }

 ENDIF;

 ENDIF;

}


