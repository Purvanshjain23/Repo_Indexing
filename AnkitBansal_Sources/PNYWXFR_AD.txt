// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNYWXFR
// ?Date: 14.08.2025 Time: 03:47:07
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** Create the order detail records for 1 Shipping Marks  P001251
EXECUTE FUNCTION(Crt Ord Dtl f/SSIS Upl RT) TYPE(RTVOBJ) FILE(PNHHCPP)          AC2024970;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(1);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.Item_Age_Days);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Group_Code);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Detail_Line_Status_Last);
PARAMETER(PAR.Billing_Detail_Cost_Dol);
PARAMETER(PAR.Billing_Detail_Gross_Dol);
PARAMETER(PAR.Billing_Detail_Net_Dol);
PARAMETER(PAR.Quantity_to_Substitute);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(LCL.Date_Method_Code);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Contract_Number);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(PAR.Work_Confirm_Status);
PARAMETER(PAR.Work_Over_Short_Status);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(PAR.Order_Desc_Line_Two);
PARAMETER(LCL.Age_Code);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Rated_Freight);
PARAMETER(LCL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(LCL.Quantity_Shipped_Total);
PARAMETER(LCL.Weight_Shipped_Total);
PARAMETER(PAR.Unit_Cost_Pricing_U_M);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
PARAMETER(PAR.Tare_Weight_Total);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Level);
PARAMETER(PAR.Quality_Level);
PARAMETER(PAR.Pricing_Product_Class_Rep);
PARAMETER(PAR.Season_Product_Class_Repo);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Reason_Code);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Modified_Flag);
PARAMETER(PAR.Substituted_Flag);
PARAMETER(PAR.OD_Schedule_Override_Sts);
PARAMETER(PAR.Invoice_Unit_Price);
PARAMETER(PAR.Invoice_Extended_Amt);
PARAMETER(PAR.Ham_Group_Number);
PARAMETER(PAR.OD_Adj_Type_Override);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(PAR.OD_Pallet_Type);
PARAMETER(PAR.Production_Warehouse);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(PAR.Warehouse_Pallets_Loaded);
PARAMETER(PAR.Consumed_Item_Code);
PARAMETER(PAR.Deadline_Depart_Date_LH);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.OD_Firm_Date);
PARAMETER(PAR.Deadline_Depart_Time_LH);
PARAMETER(PAR.Maximum_Net_Weight);
PARAMETER(PAR.Substitution_Line_Number);
PARAMETER(PAR.Max_Qty_to_sched_per_day);
PARAMETER(PAR.Warehouse_Pallet_Tare);
PARAMETER(PAR.Warehouse_Avg_Pallet_Tare);
PARAMETER(PAR.OD_Item_Target_Price);
PARAMETER(PAR.OD_Estimated_Gross_Weight);
PARAMETER(PAR.OD_Maximum_Unit_Weight);
PARAMETER(PAR.Order_Gate_Final_Price);
PARAMETER(PAR.OD_Ceiling_Price);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Line_Error_Type);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Total_Weight_Ordered_USR);
PARAMETER(PAR.Requested_Delivery_Date);
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 // LCL.Order Sequence Number = CND.Equal to zero
 LCL.Order_Sequence_Number = *ZERO;

 //?***** Changes and comments
 DO;

 //?*****
 //?* 08/18/2015 LJB E004172
 //?* Don't flag Product Availability errors here. It is being done
 //?* too early in the process and is causing unnecessary problems.
 //?*****
 ENDDO;

 //?USER: Processing if Data record not found

 //?** Error if no detail records in the Work File
 EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  //?** Chg line status to Entered when errors so Order will be reviewed
  // DB1.Header Status = CND.Entered
  DB1.Header_Status = 'E';

 }

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Populate Order Detail Fields & create OD record
 DO;

 // LCL.Order Line Error Type = PAR.Order Line Error Type
 LCL.Order_Line_Error_Type = PAR.Order_Line_Error_Type;

 // LCL.Order Sequence Number = LCL.Order Sequence Number + CND.One
 LCL.Order_Sequence_Number = LCL.Order_Sequence_Number + 1;

 // PAR.Order Secondary Line Seq = CON.1
 PAR.Order_Secondary_Line_Seq = 1;

 // Call program RTV for Ord.Detail     XF.
 CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(LCL.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Transportation_Temp);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Default_Warehouse);
 PARAMETER(LCL.Price_Method_Default);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(LCL.Variety_Rendered_Cut);
 PARAMETER(LCL.Item_Target_Price);
 PARAMETER(LCL.Error_Status);

 EXECUTE FUNCTION(RTV Primal Grp Code   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1854737;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Def/TFExp/CO RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1962838;
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 PARAMETER(LCL.Item_TF_Exempt_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Item Code = DB1.Item Code
 LCL.Item_Code = DB1.Item_Code;

 EXECUTE FUNCTION(Set/Val OH TF Exempt  IF) TYPE(EXCINTFUN)                      AC1960076;
 PARAMETER(PAR.OH_TF_Exempt_Code);
 PARAMETER(LCL.Ord_TF_Exempt_Code);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Error_Status);
 PARAMETER(LCL.Customer_TF_Exempt_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 {
  //?Execute internal function

  //?Set / Validate TF Exempt code values              RMC 8/24/05
  CASE;

  // IF PAR.OH TF Exempt Code is Blank
  IF PAR.OH_TF_Exempt_Code = *BLANK;

  //?VAL: Customer Exempt Code  w/Item Exempt Code
  CASE;

  // IF PAR.Customer TF Exempt Code is Not Exempt
  IF PAR.Customer_TF_Exempt_Code = 'NE';

  //?VAL: Item Exempt Code
  CASE;

  // IF PAR.Ord TF Exempt Code is Item Codes
  IF PAR.Ord_TF_Exempt_Code = 'EP'/'NE';

  // PAR.OH TF Exempt Code = PAR.Ord TF Exempt Code
  PAR.OH_TF_Exempt_Code = PAR.Ord_TF_Exempt_Code;

  ENDIF;

  //?VAL: Customer Exempt Code  w/Item Exempt Code
  // IF PAR.Customer TF Exempt Code is Exempt Customer
  IF PAR.Customer_TF_Exempt_Code = 'EC';

  // PAR.OH TF Exempt Code = PAR.Customer TF Exempt Code
  PAR.OH_TF_Exempt_Code = PAR.Customer_TF_Exempt_Code;

  //?VAL: Item Exempt Code
  CASE;

  // IF PAR.Ord TF Exempt Code is Not Exempt
  IF PAR.Ord_TF_Exempt_Code = 'NE';

  CASE;

  // IF PAR.TF Co-Ownership Sts is Co-Owned
  IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

  //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
  // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
  ERROR(USR4203);
  MSGPARM(PAR.Item_Code);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Customer
  PAR.Ord_TF_Exempt_Code = 'EC';

  ENDIF;

  //?VAL: Item Exempt Code
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Product
  PAR.Ord_TF_Exempt_Code = 'EP';

  ENDIF;

  ENDIF;

  //?Set / Validate TF Exempt code values              RMC 8/24/05
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Validate after 1 line item has been entered
  //?If not Pre-Commencement, set exempt code
  CASE;

  // IF PAR.OH TF Exempt Code is Not Pre-Commencement
  IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

  //?VAL: Customer Exempt Code w/Item Exempt Code
  CASE;

  // IF PAR.Customer TF Exempt Code is Not Exempt
  IF PAR.Customer_TF_Exempt_Code = 'NE';

  //?Line item must eq whats in the header, else Error
  CASE;

  // IF PAR.OH TF Exempt Code NE PAR.Ord TF Exempt Code
  IF PAR.OH_TF_Exempt_Code <> PAR.Ord_TF_Exempt_Code;

  // Send error message - 'Tf Exempt error - cant mix exempt & non-exempt items for customer.'
  ERROR(USR3588);
  MSGPARM(PAR.Item_Code);

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  //?VAL: Customer Exempt Code w/Item Exempt Code
  // IF PAR.Customer TF Exempt Code is Exempt Customer
  IF PAR.Customer_TF_Exempt_Code = 'EC';

  //?VAL: Item Exempt Code
  CASE;

  // IF PAR.Ord TF Exempt Code is Not Exempt
  IF PAR.Ord_TF_Exempt_Code = 'NE';

  CASE;

  // IF PAR.TF Co-Ownership Sts is Co-Owned
  IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

  //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
  // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
  ERROR(USR4203);
  MSGPARM(PAR.Item_Code);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Customer
  PAR.Ord_TF_Exempt_Code = 'EC';

  ENDIF;

  //?VAL: Item Exempt Code
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Product
  PAR.Ord_TF_Exempt_Code = 'EP';

  ENDIF;

  ENDIF;

  //?If not Pre-Commencement, set exempt code
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Pre Commencement
  PAR.Ord_TF_Exempt_Code = 'PC';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Fresh_Chilling_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(PAR.Company_Number);
  PARAMETER('FZNCHLTME');
  PARAMETER(PAR.System_Value_Numeric);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Fresh Chilling Time = PAR.System Value Numeric
  PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

  ENDIF;

 }

 // Call program Val ItmBal.Unit Cst    XF.
 CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(LCL.Error_Status);

 EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv Plan Prod Sts     XF.
 CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.OD_Production_Plan_Sts);

 EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.OD Price Type Ref Num = CVTVAR(PAR.Price Code)
 LCL.OD_Price_Type_Ref_Num = CVTVAR(PAR.Price_Code);

 // WRK.Detail Line Status = PAR.Detail Line Status
 WRK.Detail_Line_Status = PAR.Detail_Line_Status;

 // Call program Rtv Max Wt and price  XF.
 CALL PROGRAM(Rtv Max Wt and price  XF) ('PNTBXFR');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Maximum_Contract_Units);
 PARAMETER(LCL.Customer_Price_UM_Prc);
 PARAMETER(LCL.Commodity_Market_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(LCL.Contract_Unit_Type);

 //?02/01/21 DN R17013-Set Pricing Info for Mexico Orders.
 CASE;

 // IF PAR.Country Code is Mexico
 IF PAR.Country_Code = 'MEX';

 CASE;

 // IF PAR.Price Method Code is Blank
 IF PAR.Price_Method_Code = *BLANK;

 //?Record not found, set Pricing defaults.
 // PAR.Price Method Code = CND.Manual
 PAR.Price_Method_Code = 'MAN';

 // LCL.Customer Price /UM Prc = CON..01
 LCL.Customer_Price_UM_Prc = .01;

 // IF PAR.Price Method Code is Market-Auto Audit
 IF PAR.Price_Method_Code = 'MKA';

 //?POPOETR process doesn't allow to set Commodity Market Code='USD'
 //?if NOT Price Type is 'Ceiling Price' hence set it here.
 // PAR.Commodity Market Code = CND.Default Market Code(USD)
 PAR.Commodity_Market_Code = 'USD';

 //?Populate Market Pricing Date by Requested Delivery Date.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOTE: In future, we should have the Market Pricing Date in the
 //?      SSIS XLS instead of hard coding it here.
 EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(NLL.Julian_Date);
 PARAMETER(NLL.Accounting_Year_Code);
 PARAMETER(NLL.Accounting_Period_Code);
 PARAMETER(NLL.OM_Week);
 PARAMETER(LCL.Day_of_Week);
 PARAMETER(NLL.Week_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Use Non-Holiday & Business Week Days Only.
 CASE;

 // IF LCL.Day of Week is Monday
 IF LCL.Day_of_Week = '2';

 //?Use prior Thursday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(3);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Tuesday
 IF LCL.Day_of_Week = '3';

 //?Use prior Thursday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Wednesday
 IF LCL.Day_of_Week = '4';

 //?Use prior Friday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Thursday
 IF LCL.Day_of_Week = '5';

 //?Use prior Monday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Friday
 IF LCL.Day_of_Week = '6';

 //?Use prior Tuesday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Saturday
 IF LCL.Day_of_Week = '7';

 //?Use prior Tuesday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(5);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Sunday
 IF LCL.Day_of_Week = '1';

 //?Use prior Tuesday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(6);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // LCL.Price Overage Override = LCL.Customer Price /UM Prc
 LCL.Price_Overage_Override = LCL.Customer_Price_UM_Prc;

 // LCL.Error Status = CND.no
 LCL.Error_Status = 'N';

 EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(NLL.Commodity_Market_Code);
 PARAMETER(NLL.Date_Method_Code);
 PARAMETER(NLL.Price_Method_Code);
 PARAMETER(NLL.Price_Overage_Override);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Price_Code);
 PARAMETER(LCL.OD_Ceiling_Price);
 PARAMETER(LCL.Error_Status);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);
 {
  //?Execute internal function

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
  LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

  // Call program CLC Sum Ship/Ord Unit XF.
  CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Total_Weight_Ordered_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Total_Quantity_Ordered);

  // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
  PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

  // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
  PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

  //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
  // Call program Rtv Cust Prc hdr/dtl  XF.
  CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(WRK.Price_Start_Date);
  PARAMETER(WRK.Price_End_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Maximum_Contract_Units);
  PARAMETER(PAR.Customer_Price_UM_Prc);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Contract_Unit_Type);

  // PAR.Price Method Code = LCL.Price Method Code
  PAR.Price_Method_Code = LCL.Price_Method_Code;

  EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Price_Method_Type);
  PARAMETER(PAR.PMH_Price_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
  //?Use Contract Unit Type to check Qty or Weight-Lbs
  //?VAL: Total Weight and Quantity w/Maximum
  CASE;

  // IF PAR.Contract Unit Type is Weight-LB
  IF PAR.Contract_Unit_Type = 'W';

  CASE;

  // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
  IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  //?VAL: Total Weight and Quantity w/Maximum
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Contract Unit type = Quantity
  CASE;

  // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
  IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  ENDIF;

  //?Original code
  //?OUT: No Errors
  CASE;

  // IF PAR.Error Status is no
  IF PAR.Error_Status = 'N';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  CASE;

  // IF PAR.PMH Price Type is Invoice Price
  IF PAR.PMH_Price_Type = 'I';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  // PAR.OD Ceiling Price = CON.*ZERO
  PAR.OD_Ceiling_Price = *ZERO;

  // IF PAR.PMH Price Type is Ceiling Price
  IF PAR.PMH_Price_Type = 'C';

  // PAR.Price Overage Override = CON.*ZERO
  PAR.Price_Overage_Override = *ZERO;

  // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
  PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

  ENDIF;

  ENDIF;

 }

 //?** Flag if Price Code Weight maximum has been reached
 CASE;

 // IF LCL.Error Status is yes
 IF LCL.Error_Status = 'Y';

 // LCL.Order Line Error Type = CND.Price Code Wgt Exceeded
 LCL.Order_Line_Error_Type = 'WT';

 // LCL.Order Requires Review = CND.Yes
 LCL.Order_Requires_Review = 'Y';

 EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing before Data update

  //?** Chg line status to Entered when errors so Order will be reviewed
  // DB1.Header Status = CND.Entered
  DB1.Header_Status = 'E';

 }

 // LCL.Order Requires Review = CND.No
 LCL.Order_Requires_Review = *BLANK;

 // WRK.Detail Line Status = CND.Entered
 WRK.Detail_Line_Status = 'E';

 ENDIF;

 EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(LCL.Contract_Number);
 PARAMETER(PAR.Pricing_Date_Used);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(LCL.Cntrt_Enter_no_QT_Price);
 PARAMETER(LCL.Cntrt_#_does_not_Exit);
 PARAMETER(LCL.Qty_ordered_Contract);
 PARAMETER(LCL.Contract_Expired);
 PARAMETER(LCL.Price_Override_Required);
 PARAMETER(LCL.Price_Method_QT_Cntrt_0);
 PARAMETER(LCL.Prc_Code_FRM_or_MKT);
 PARAMETER(LCL.Mkt_Pricing_Date_not_0);
 PARAMETER(LCL.Mkt_Meth_and_Date_both);
 PARAMETER(LCL.Price_Override_Req_EXT);
 PARAMETER(LCL.Contract_Exists_for_Item);
 PARAMETER(LCL.Price_Override_not_Allowd);
 PARAMETER(JOB.*Job_date);
 PARAMETER(LCL.Price_Method_Type);
 {
  //?Execute internal function

  // PAR.Contract Exists for Item = CND.blank
  PAR.Contract_Exists_for_Item = *BLANK;

  // PAR.Cntrt Enter no QT Price = CND.blank
  PAR.Cntrt_Enter_no_QT_Price = *BLANK;

  // PAR.Cntrt.# does not Exit = CND.blank
  PAR.Cntrt_#_does_not_Exit = *BLANK;

  // PAR.Qty ordered > Contract = CND.blank
  PAR.Qty_ordered_Contract = *BLANK;

  // PAR.Contract Expired = CND.blank
  PAR.Contract_Expired = *BLANK;

  // PAR.Price Override Required = CND.blank
  PAR.Price_Override_Required = *BLANK;

  // PAR.Price Method QT & Cntrt 0 = CND.blank
  PAR.Price_Method_QT_Cntrt_0 = *BLANK;

  // PAR.Prc Code FRM or MKT = CND.blank
  PAR.Prc_Code_FRM_or_MKT = *BLANK;

  // PAR.Mkt Pricing Date not 0 = CND.blank
  PAR.Mkt_Pricing_Date_not_0 = *BLANK;

  // PAR.Mkt Meth. and Date both = CND.blank
  PAR.Mkt_Meth_and_Date_both = *BLANK;

  // PAR.Price Override Req. EXT = CND.blank
  PAR.Price_Override_Req_EXT = *BLANK;

  // PAR.Price Override not Allowd = CND.blank
  PAR.Price_Override_not_Allowd = *BLANK;

  //?Get Price Method Type
  EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Price_Method_Type);
  PARAMETER('O');
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Check if Contract exists for Item
  //?A Contract Exists for this customer and item.
  CASE;

  // IF PAR.Contract Number is Zero
  IF PAR.Contract_Number = *ZERO;

  EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Order_Date);
  PARAMETER(PAR.Contract_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   CASE;

   // IF PAR.Effective Date GE DB1.Effective Date
   IF PAR.Effective_Date >= DB1.Effective_Date;

   // AND PAR.Effective Date LE DB1.End Date Effective
   AND PAR.Effective_Date <= DB1.End_Date_Effective;

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

   ENDIF;

   // PAR.Contract Number = DB1.Contract Number
   PAR.Contract_Number = DB1.Contract_Number;

  }

  // WRK.Contract Number = PAR.Contract Number
  WRK.Contract_Number = PAR.Contract_Number;

  CASE;

  // IF PGM.*Return code is *Record already exists
  IF PGM.*Return_code = 'Y2U0003';

  // PAR.Contract Exists for Item = CND.yes
  PAR.Contract_Exists_for_Item = 'Y';

  ENDIF;

  ENDIF;

  //?Edit Contract Number
  CASE;

  // IF PAR.Contract Number is Entered
  IF PAR.Contract_Number > *ZERO;

  EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Effective_Date);
  PARAMETER(PAR.End_Date_Effective);
  PARAMETER(PAR.Maximum_Quantity);
  PARAMETER(PAR.Quantity_Sold);
  PARAMETER(PAR.Contract_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set Contract Error Parms
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Cntrt.# does not Exit = CND.yes
  PAR.Cntrt_#_does_not_Exit = 'Y';

  //?Set Contract Error Parms
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Total Quantity Ordered = PAR.Quantity Sold + PAR.Quantity Ordered
  WRK.Total_Quantity_Ordered = PAR.Quantity_Sold + PAR.Quantity_Ordered;

  CASE;

  // IF WRK.Total Quantity Ordered GT PAR.Maximum Quantity
  IF WRK.Total_Quantity_Ordered > PAR.Maximum_Quantity;

  // PAR.Qty ordered > Contract = CND.yes
  PAR.Qty_ordered_Contract = 'Y';

  ENDIF;

  CASE;

  // IF PAR.End Date Effective LE PAR.Order Date
  IF PAR.End_Date_Effective <= PAR.Order_Date;

  // PAR.Contract Expired = CND.yes
  PAR.Contract_Expired = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?Validity Checking
  //?Price Override and Manual Price Method
  CASE;

  // IF PAR.Price Method Type is Manual Pricing
  IF PAR.Price_Method_Type = 'M';

  // AND PAR.Price Overage Override is Equal zero
  AND PAR.Price_Overage_Override = *ZERO;

  // PAR.Price Override Required = CND.yes
  PAR.Price_Override_Required = 'Y';

  ENDIF;

  //?Price override and EXT price method
  CASE;

  // IF PAR.Price Method Type is Extended Pricing
  IF PAR.Price_Method_Type = 'X';

  // AND PAR.Price Overage Override is Equal zero
  AND PAR.Price_Overage_Override = *ZERO;

  // PAR.Price Override Req. EXT = CND.yes
  PAR.Price_Override_Req_EXT = 'Y';

  ENDIF;

  //?FRM / MKT Checks
  CASE;

  // IF PAR.Price Method Type is Market or Formula
  IF PAR.Price_Method_Type = 'F'/'K';

  //?Market Code Must be entered
  CASE;

  // IF PAR.Commodity Market Code is Not Entered
  IF PAR.Commodity_Market_Code = *BLANK;

  // PAR.Prc Code FRM or MKT = CND.yes
  PAR.Prc_Code_FRM_or_MKT = 'Y';

  ENDIF;

  //?Market Price Date field not zero
  CASE;

  // IF PAR.Market Pricing Date is NE Zero
  IF PAR.Market_Pricing_Date <> *ZERO;

  // PAR.Mkt Pricing Date not 0 = CND.yes
  PAR.Mkt_Pricing_Date_not_0 = 'Y';

  ENDIF;

  CASE;

  // IF PAR.Price Overage Override is Not Zeros
  IF PAR.Price_Overage_Override <> *ZERO;

  // PAR.Price Override not Allowd = CND.yes
  PAR.Price_Override_not_Allowd = 'Y';

  ENDIF;

  ENDIF;

  //?MKT date Method entered and Mkt Price Date both entered.
  CASE;

  // IF PAR.Date Method Code is Entered
  IF PAR.Date_Method_Code <> *BLANK;

  // AND PAR.Market Pricing Date is NE Zero
  AND PAR.Market_Pricing_Date <> *ZERO;

  // PAR.Mkt Meth. and Date both = CND.yes
  PAR.Mkt_Meth_and_Date_both = 'Y';

  ENDIF;

 }

 // PAR.Weight Ordered = DB1.Quantity Ordered * PAR.Unit Weight Ordered U/M *
 PAR.Weight_Ordered = DB1.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

 // LCL.Weight Scheduled = CON.*ZERO
 LCL.Weight_Scheduled = *ZERO;

 // LCL.Quantity Scheduled = CON.*ZERO
 LCL.Quantity_Scheduled = *ZERO;

 // LCL.Error Status = CND.no
 LCL.Error_Status = 'N';

 EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(LCL.Error_Status);
 PARAMETER(WRK.Company_Organization);
 PARAMETER('V');
 {
  //?Execute internal function

  // WRK.Error Flag            USR = CND.Blank
  WRK.Error_Flag_USR = *BLANK;

  // PAR.Error Status = CND.blank
  PAR.Error_Status = *BLANK;

  // WRK.Error Reason Descript 1 = CON.*BLANK
  WRK.Error_Reason_Descript_1 = *BLANK;

  // WRK.Error Reason Descript 2 = CON.*BLANK
  WRK.Error_Reason_Descript_2 = *BLANK;

  // WRK.Error Reason Descript 3 = CON.*BLANK
  WRK.Error_Reason_Descript_3 = *BLANK;

  // WRK.Error Reason Descript 4 = CON.*BLANK
  WRK.Error_Reason_Descript_4 = *BLANK;

  // WRK.Error Reason Descript 5 = CON.*BLANK
  WRK.Error_Reason_Descript_5 = *BLANK;

  CASE;

  // IF PAR.Company Organization is Seaboard
  IF PAR.Company_Organization = 'S';

  CASE;

  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // Send error message - 'Requested Delv Date is required'
  ERROR(USR4329);
  MSGPARM(PAR.Requested_Delivery_Date);

  // IF PAR.Scheduled Ship Date is not entered
  IF PAR.Scheduled_Ship_Date = *ZERO;

  // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
  ERROR(USR2230);
  MSGPARM(PAR.Scheduled_Ship_Date);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Val Age information   XF.
  CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Error_Flag_USR);
  PARAMETER(WRK.Error_Reason_Descript_1);
  PARAMETER(WRK.Error_Reason_Descript_2);
  PARAMETER(WRK.Error_Reason_Descript_3);
  PARAMETER(WRK.Error_Reason_Descript_4);
  PARAMETER(WRK.Error_Reason_Descript_5);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);

  //?Verify if message should be sent if validation is required
  CASE;

  // IF WRK.Error Flag            USR is Yes
  IF WRK.Error_Flag_USR = 'Y';

  // AND PAR.Production Dates Sts Usr is Validation routine
  AND PAR.Production_Dates_Sts_Usr = 'V';

  //?message 1 Product is shipped before product is made
  CASE;

  // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

  // Send error message - 'Prd Date is invalid for requested delivery date'
  ERROR(USR4307);
  MSGPARM(PAR.Production_AgeDte_Fr);

  ENDIF;

  //?message 2 Either Days or override date but not both
  CASE;

  // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

  // Send error message - 'Enter Age Days or Dates'
  ERROR(USR4304);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 3 With Chill Days Either Days or Override Dates required
  CASE;

  // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 4 From date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 5 To date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  CASE;

  // IF PAR.Production Ovr AgeDte Fr is not entered
  IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

  // Send error message - 'Invalid Item Age Days'
  ERROR(USR4309);
  MSGPARM(PAR.Item_Age_Days);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send error message - 'Invalid Production Override Age Frm/To Dates'
  ERROR(USR4310);
  MSGPARM(PAR.Production_AgeDte_Fr);
  MSGPARM(PAR.Production_AgeDte_To);

  ENDIF;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?** Flag if Age Days is invalid
 CASE;

 // IF LCL.Error Status is yes
 IF LCL.Error_Status = 'Y';

 // LCL.Order Line Error Type = CND.Invalid Item Age Code
 LCL.Order_Line_Error_Type = 'AC';

 // LCL.Order Requires Review = CND.Yes
 LCL.Order_Requires_Review = 'Y';

 EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing before Data update

  //?** Chg line status to Entered when errors so Order will be reviewed
  // DB1.Header Status = CND.Entered
  DB1.Header_Status = 'E';

 }

 // LCL.Order Requires Review = CND.No
 LCL.Order_Requires_Review = *BLANK;

 // WRK.Detail Line Status = CND.Entered
 WRK.Detail_Line_Status = 'E';

 ENDIF;

 //?** Default Deadline depart date if it is zeros
 CASE;

 // IF PAR.Deadline Depart Date LH is not entered
 IF PAR.Deadline_Depart_Date_LH = *ZERO;

 // LCL.Deadline Depart Date LH = PAR.Scheduled Ship Date
 LCL.Deadline_Depart_Date_LH = PAR.Scheduled_Ship_Date;

 //?** Default Deadline depart date if it is zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Deadline Depart Date LH = PAR.Deadline Depart Date LH
 LCL.Deadline_Depart_Date_LH = PAR.Deadline_Depart_Date_LH;

 ENDIF;

 //?** Default Deadline depart time if it is zeros
 CASE;

 // IF PAR.Deadline Depart Time LH is not entered
 IF PAR.Deadline_Depart_Time_LH = *ZERO;

 // LCL.Deadline Depart Time LH = CON.080000
 LCL.Deadline_Depart_Time_LH = 080000;

 //?** Default Deadline depart time if it is zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Deadline Depart Time LH = PAR.Deadline Depart Time LH
 LCL.Deadline_Depart_Time_LH = PAR.Deadline_Depart_Time_LH;

 ENDIF;

 //?** Allocation
 //?** Don't flag Product Availability errors here        E004172
 //?** Allocate if Production Plan Status = Yes (yes is *blanks)
 CASE;

 // IF PAR.OD Production Plan Sts is Yes
 IF PAR.OD_Production_Plan_Sts = *BLANK;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(LCL.Quantity_Scheduled);
 PARAMETER(LCL.Weight_Scheduled);
 PARAMETER('OA');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);

 //?** Flag error if weight is not scheduled and Prod Plan Sts is Yes
 CASE;

 // IF LCL.Weight Scheduled is Equal to zero
 IF LCL.Weight_Scheduled = *ZERO;

 // LCL.Order Requires Review = CND.No
 LCL.Order_Requires_Review = *BLANK;

 // WRK.Detail Line Status = CND.Entered
 WRK.Detail_Line_Status = 'E';

 ENDIF;

 ENDIF;

 // LCL.Extended Amount = PAR.Weight Ordered * LCL.Price Overage Override *Rounded
 LCL.Extended_Amount = PAR.Weight_Ordered * LCL.Price_Overage_Override 'H';

 //?** MPR Ready if weight ordered and price found
 //?MPR Ready if weight ordered and price found - 2/11/21 DN R17013-Logic Chg.
 CASE;

 // IF LCL.Price Overage Override is GT .01
 IF LCL.Price_Overage_Override > .01;

 // AND PAR.Weight Ordered is Greater than zero
 AND PAR.Weight_Ordered > *ZERO;

 //?02/11/21 DN R17013-Changed Price Overage Override to Check Price > .01
 // LCL.OD MPR Prc Ready to Send = CND.yes
 LCL.OD_MPR_Prc_Ready_to_Send = 'Y';

 //?MPR Ready if weight ordered and price found - 2/11/21 DN R17013-Logic Chg.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.OD MPR Prc Ready to Send = CND.blank
 LCL.OD_MPR_Prc_Ready_to_Send = *BLANK;

 ENDIF;

 //?Get Customer Exclude MPR Flag.
 //?2/11/21 DN R17013-Override OD MPR Sent to USDA Status & Price Code.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Empl/Co-Packer Sle RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC2195038;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Employee_Co_Packer_Sale);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Employee/Co-Packer Sale is Employee
 IF LCL.Employee_Co_Packer_Sale = 'E';

 // LCL.OD MPR Sent to USDA Sts = CND.Exclude
 LCL.OD_MPR_Sent_to_USDA_Sts = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.OD MPR Sent to USDA Sts = CND.blank
 LCL.OD_MPR_Sent_to_USDA_Sts = *BLANK;

 ENDIF;

 //?If Mexico, Do Not Populate Price Code. Keep Price Code for Japan.
 CASE;

 // IF PAR.Country Code is Mexico
 IF PAR.Country_Code = 'MEX';

 // LCL.Price Code = CND.Not Entered
 LCL.Price_Code = *ZERO;

 //?If Mexico, Do Not Populate Price Code. Keep Price Code for Japan.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Price Code = PAR.Price Code
 LCL.Price_Code = PAR.Price_Code;

 ENDIF;

 ENDIF;

 //?07/29/22 RMC 104641 calc credit check price so MEX orders get credit
 //?    checked more accurately
 EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Projected_Market_Price);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Error_Status_3);
 PARAMETER(LCL.Minimum_Price_USR);
 PARAMETER(LCL.Maximum_Price_USR);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?Execute internal function

  //?*---------------------------------------------------------------*
  //?Documentation:
  //?This internal function will determine if a manual price entered
  //?on an order detail line is within the Manual Pricing Acceptance
  //?Percentage from the Company Control file. If it does not fall
  //?within the percentage range then the market price will be used.
  //?If no market price is found then it is a manual price error
  //?*---------------------------------------------------------------*
  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  // PAR.Minimum Price   USR = CON.*ZERO
  PAR.Minimum_Price_USR = *ZERO;

  // PAR.Maximum Price  USR = CON.*ZERO
  PAR.Maximum_Price_USR = *ZERO;

  // PAR.Error Status  3 = CND.Yes
  PAR.Error_Status_3 = 'Y';

  EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Manual_Price_Accept_Prcnt);
  PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Food Service and Co-Pack Items
  CASE;

  // IF PAR.Default Commod Mark basis is Food Service
  IF PAR.Default_Commod_Mark_basis = 'FSV';

  // OR PAR.Default Commod Mark basis is Co-Pack
  OR PAR.Default_Commod_Mark_basis = 'CPK';

  // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
  PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  // Projected Market Price
  PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
  + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

  //?If a market price is found for co/cust market code default
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  //?If a market price is found for co/cust market code default
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If no price for co/cust market code then use co/item market code
  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  ENDIF;

  ENDIF;

 }

 // LCL.Unit Price - Credit = LCL.Projected Market Price
 LCL.Unit_Price_Credit = LCL.Projected_Market_Price;

 CASE;

 // IF LCL.Price Overage Override is GT .01
 IF LCL.Price_Overage_Override > .01;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(LCL.Unit_Price_Credit);

 ENDIF;

 //?** Use qty/wgt scheduled from the Allocation routine
 //?R17029 DN 01/19/21-Changed to set OD Spot Buy='N'.
 //?R17013 DN 2/11/21-Changed to use OD MPR Sent to USDA Sts & Price
 //?       Code from LCL context.
 //?10/06/21 DN W77844-Changed to set OD Spot Buy from 'N' to 'T'urn.
 //?07/29/22 RMC 104641 output lcl.unit price credit instead of *zeros
 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status);
 PARAMETER(*ZERO);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(LCL.Work_Confirm_Status);
 PARAMETER(LCL.Work_Over_Short_Status);
 PARAMETER(PAR.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Palletize);
 PARAMETER('N');
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER('MTH');
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(LCL.Quantity_Scheduled);
 PARAMETER(LCL.Weight_Scheduled);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Cost_Pricing_U_M);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(LCL.Customer_Price_UM_Prc);
 PARAMETER(LCL.Unit_Price_Credit);
 PARAMETER(PAR.Unit_Price_Ordered_U_M);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Date_of_Original_Entry);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Event_Code);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OD_Schedule_Override_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(PAR.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.OD_Price_Type_Ref_Num);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 PARAMETER(LCL.Price_Code);
 PARAMETER(PAR.Maximum_Net_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Maximum_Unit_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(LCL.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER('T');
 PARAMETER(*BLANK);
 PARAMETER(LCL.Order_Line_Error_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + PAR.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + PAR.Weight_Ordered;

 ENDDO;

}


