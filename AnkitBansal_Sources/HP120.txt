      *****************  RPG PROGRAM HEADING  ***********************
     h option(*SRCSTMT:*NODEBUGIO)
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP120
      * TITLE:       MAINTAIN FEED DELIVERY TICKETS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     03/18/94
      *
      * FUNCTION: THIS PROGRAM USES A SUBFILE TO MAINTAIN RECORDS
      *           IN THE FEED TICKET FILES (HEADER AND DETAIL)
      *           FOR DELIVERY TICKETS ONLY.
      *
      *           THE PROGRAM WILL CREATE, DELETE AND UPDATE RECORDS
      *           FOR A PARTICULAR FEED MILL BUSINESS OFFICE.
      *
      *           THIS PROGRAM IS CALLED FROM:
      *                HP420-WORK WITH FEED TICKETS
      *
      *           IT DOES NOT HAVE SELECTORS OR POSITIONERS.
      *           IT HAS F4-PROMPT LOGIC.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 01/30/01  LeAnne Fedor
      *           Production type was removed from the feed ticket files.
      *           So, removed all production type logic from program.
      *
      * 04/17/01  LeAnne Fedor
      *           Change feed mill business office logic. Tickets for a farm
      *           can now be associated with any mill....not just the farm's
      *           default mill in the farm master.
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/26/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      *           Manager and supervisor fields removed from Hog Group file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 01/02/02  LeAnne Fedor
      *           Added new edit. A ration cannot be fed to a group that is older than
      *           the 'maximum age (days)' associated with the ration.
      *
      * 01/07/02  LeAnne Fedor
      *           Added new edit. The user cannot use a ticket number from the block
      *           of numbers reserved for system assignment.
      *
      * 01/28/02  LeAnne Fedor
      *           We added an additional check for determining a shared bin...rooms have
      *           to be 'active' ...not 'inactive'. Also, we now call a generic program
      *           to make the 'shared' bin determination.
      *
      * 07/15/02  LeAnne Fedor
      *           Removed 'production phase' from the Feed Ticket Header file.
      *
      * 07/31/02  LeAnne Fedor
      *           Added logic to populate 'production phase' from the Farm Site master
      *           file on the detail records that are 'to be allocated'.
      *
      * 10/21/02  LeAnne Fedor
      *           Fixed a bug. When loading the subfile with 'direct' detail lines, some
      *           lines were not being written to the subfile...even though their
      *           totals were added into the control record totals.  (The problem had to
      *           do with the comparison of fdlnno to svlnno after the $roll subroutine
      *           had executed.) I added a new flag (directfl) to handle the problem.
      *
      * 12/09/02  LeAnne Fedor
      *           Removed 'production phase' from the Feed Ticket Detail file.
      *
      * 10/20/03  LeAnne Fedor
      *           Added an edit that the Feed Ticket Date cannot be prior to the
      *           Created Date of the group. Alice does not want any feed delivered
      *           to a group before it is created.
      *
      * 01/16/06  LeAnne Fedor
      *           Changed logic using HSP020-Building/Rooms to now use our new file
      *           HSP113-Rooms/Bin Sets.
      *
      * 04/27/09  LeAnne Ramsey
      *           Added 2 new fields/logic to Feed Ticket Header:
      *                 1) costed time
      *                 2) costed user
      *
      *           NOTE: We did not go back and historically populate the new fields.
      *           We will show these new fields on the screen when the Ticket has a Costed Date.
      *
      *           Also, for Adjustment Tickets (which we haven't had since mid-2007), I
      *           am now populating Costed Date as well as Costed Time/User. I could not
      *           see/find any reason why we were not already populating Costed Date--since
      *           the status for an Adjustment Ticket is always CO.
      *
      * 05/12/09  LeAnne Ramsey
      *           Added 1 new field/logic to Feed Ticket Header:
      *                 1) pickup ticket type code
      *
      * 05/21/09  LeAnne Ramsey
      *           We are removing all logic for Adjustment Tickets; this program will now
      *           handle only Delivery Tickets.
      *
      * 07/06/09  LeAnne Ramsey
      *           We added new field 'Continuous Flow Flag' to Hog Group file. If a Group is
      *           a 'Continuous Flow' group, we will NOT do a "max age" check on the Ration.
      *
      * 09/18/09  LeAnne Ramsey
      *           Per Debbie Deen, when REVISING a DELIVERY ticket that was (originally) uploaded,
      *           the total rations/pounds cannot change. You cannot remove/add a ration. In effect,
      *           you can only add/remove Groups eating the ration.  This new edit will not be in
      *           effect for tickets created/entered manually (ie: the COMIL, PIMIL, YUMIL) tickets.
      *           To be able to determine Uploaded/Manual tickets, we added a new field to the
      *           Feed Ticket Header. The field (Upload Date) will be zero for all tickets except
      *           Uploaded Delivery Tickets. (Note: This new field was not populated Historically.)
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      *
      * 10/31/19  Brad Baden     E15736 - Upload Toll Mill Receipts
      *           Added file HSP089 to retrieve the Cost Through System
      *           Flag.  Check if Cost Through System Flag entered on the
      *           screen is the same as the value in the Feed Mill Alias
      *           file HSP089.  If not the same, send a warning message.
      *
      * 03/25/20  Danny Nguyen - P405 - Farm Number Increase
      *           Increased Bin Code (@@BNCD) in HSPREF file from 5A to 6A.
      *           Changed array MGW beginning position for 2nd parm to support Bin Code 6A.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD120    CF   E             WORKSTN SFILE(HP120S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
      *
     FHSP009    IF   E           K DISK
      *    Business office
      *
      *
     FHSP014    IF   E           K DISK
      *    GROUP STATUS CODES
      *
      *
     FHSP015    IF   E           K DISK
      *    FEED TICKET STATUS CODES
      *
      *
     FHSP018    IF   E           K DISK
      *    FARM SITE
      *
      *
     FHSP024    IF   E           K DISK
      *  FEED MANUFACTURING TYPE
      *
      *
     FHSL034D   IF   E           K DISK
      *  HOG GROUPS
      *
      *
     FHSL034E   IF   E           K DISK    RENAME(HGREC:HGRECE)
      *  HOG GROUPS
      *
      *
     Fhsj034w   if   e           k disk    rename(hgrec:hgrecw)
      *  Hog Group + Rooms/Bin sets + Bin Set Bins
      *
      *
     FHSL036B   IF   E           K DISK    RENAME(BNREC:BNRECB)
      *  BIN SET BINS
      *
      *
     FHSJ036A   IF   E           K DISK    RENAME(BNREC:BNRECA)
      *  BIN SET BINS
      *  ROOMS/BINS SETS
      *  HOG GROUPS
      *  HOG GROUP STATUS CODES (SELECT: GSFDFL = Y)
      *
      *
     FHSP037    UF A E           K DISK
      *   FEED TICKET HEADER
      *
      *
     FHSL037A   UF   E           K DISK    RENAME(FHREC:FHRECA)
      *  FEED TICKET HEADER
      *
      *
     FHSL038A   IF   E           K DISK    RENAME(FDREC:FDRECA)
      *   FEED TICKET DETAIL
      *
      *
     FHSL038Q   IF   E           K DISK    RENAME(FDREC:FDRECQ)
      *   FEED TICKET DETAIL
      *   (SELECT: FDTRCD = PICKUP)
      *
      *
     FHSJ038O   IF   E           K DISK    RENAME(FDREC:FDRECO)
      *  FEED TICKET DETAIL + CLOSED HOG GROUPS
      *
      *
     FHSP038    UF A E           K DISK
      *   FEED TICKET DETAIL
      *
      *
     FHSP071    IF   E           K DISK
      *  RATIONS
      *
      *
     FHSP072    IF   E           K DISK
      *  RATION ADDITIVE
      *
      *
     FHSP089    IF   E           K DISK
      *  Feed Mill Alias
      *
      *
     Fhsl113a   if   e           k disk
      *  Rooms/Bin Sets
      *
      *
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *
      *--------------------------------------------------------------------------------
      * Definition for external data area DAFDSN--System-Assigned Feed Ticket Number
      *--------------------------------------------------------------------------------
      *
     D                 ds
     D  dafdsn                 1     29
     D  dabegtkno             11     19  0
     D  daendtkno             21     29  0
      *
      *---------------------------------------------------------------
      *  DEFINITION FOR EXTERNAL DATA AREA 'DAAPER'
      *---------------------------------------------------------------
     D                 DS
     D  DAAPER                 1     24
     D  DACCYY                 1      4
     D  DAPER                  5      6
     D  DABPDT                 7     14  0
     D  DAEPDT                15     22  0
     D  DAPGFL                23     23
     D  DAPPFL                24     24
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D RECOST          C                   CONST('RECOST')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D arinra          s             11    dim(50)                              Ration/Additive
     D arinlb          s              7  0 dim(50)                              Feed Pounds
      *
     D aroutra         s             11    dim(50)                              Ration/Additive
     D aroutlb         s              7  0 dim(50)                              Feed Pounds
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Workfields
      *
     D wktype          s                   like(fhtrcd) inz('D')
     D wkra            s             11
     D wkalphlb        s              7
      *
      *
      * Work fields for date manipulation
      *
     D wkisotkdt       s               D   datfmt(*iso)
     D wkisoopdt       s               D   datfmt(*iso)
     D wkdays          s              3  0
     D wkdaysalph      s              3
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Array indexes
     D x               s              3  0
     D y               s              3  0
      *
     D w               s              3  0
     D z               s              3  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO
      /EJECT
      *----------------------------------------------------------------
      * SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * IF THE USER IS IN CREAT MODE, CLEAR THE FARM SITE AND TICKET
      *    FIELDS
      * IF THE USER IS NOT IN CREAT MODE, VERIFY THAT THE FEED
      *    TICKET THAT THE USER SELECTED STILL EXISTS
      *
     C     MODE          IFEQ      CREATE                                       IF CREATE
     C                   Z-ADD     0             C1FSCD
     C                   MOVE      *BLANK        C1FSNM
     C                   Z-ADD     0             C1TKNO
     C                   MOVE      *BLANK        C1VINO
     C                   ELSE
      *
     C     key03         CHAIN(N)  HSP037                             90
     C                   select
     C                   when      *in90 = *on
     C                   MOVEL     YES           NOTFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00311'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEL     C1TKNO        XXTKNO
     C                   MOVEA     XXTKNO        MGW(1)
     C                   MOVEA     'D'           MGW(10)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
      *
     C                   when      fhcodt <> 0
     C                   z-add     fhcotm        c1cotm
     C                   move      fhcousr       c1cousr
     C     *iso          test(d)                 fhcodt                 92
     C                   if        *in92 = *off
     C                   move      fhcodt        wkisodate
     C     *mdy          move      wkisodate     c1comdy
     C                   endif
     C                   endsl
     C                   ENDIF                                                  IF CREATE
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * SET THE PAGE OF THE SUBFILE TO DISPLAY
      *
     C                   SELECT
      *
     C     WKFLOW        WHENEQ    0
     C     ERROR         ANDEQ     0
     C                   Z-ADD     1             HDPAG1
      *
     C     RESET         WHENEQ    YES
     C     WKFLOW        IFGT      HDRRN1
     C                   ELSE
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   ENDIF
      *
     C                   ENDSL
      *
      *
      * SET THE INDICATORS TO CONTROL SCREEN FIELDS
      *
     C                   EXSR      $IND
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *  WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP120K1
     C                   WRITE     HP120EC
     C                   EXFMT     HP120C1
      *
      * RESET THE COUNT FIELD FOR WARNING MESSAGES
      *
     C                   Z-ADD     0             WARMSG
      *
      * SETOF ALL INDICATORS USED IN THE CONTROL RECORD
      *
     C                   SETOFF                                       363738
     C                   SETOFF                                       3945
     C                   SETOFF                                       555659
      *
      * SETOF ALL INDICATORS USED IN THE SUBFILE RECORD
      *
     C                   EXSR      $SETOF
      *
      * RETRIEVE THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) AND MOVE IT TO A WORK FIELD.  THIS VALUE
      * WILL BE USED LATER TO CONTROL THE REPOSITIONING OF THE SUBFILE.
      *
     C                   Z-ADD     IDFLOW        WKFLOW
     C                   MOVEL     NO            RESET
      *
      * CLEAR ALL MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND RESET STANDARD RESPONSE
      *
     C                   SELECT
      *
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   Z-ADD     SVMDY         C1MDY
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN09         WHENEQ    *ON                                          F9-WHATEVER
      *
     C     MODE          IFEQ      RECOST
     C                   EXSR      $RECTK
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDIF
      *
     C     MODE          IFEQ      REVISE
     C                   EXSR      $EDIT1
     C     ERROR         IFEQ      0
     C     ERROR         OREQ      WARMSG
     C                   EXSR      $REVTK
     C                   MOVEL     EXIT          ROUTNE
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
     C                   ENDIF
      *
     C     MODE          IFEQ      CREATE
     C                   EXSR      $EDIT1
     C     ERROR         IFEQ      0
     C     ERROR         OREQ      WARMSG
     C                   EXSR      $CLMSG
     C                   EXSR      $CRTTK
     C                   MOVEL     SET1          ROUTNE
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
     C                   ENDIF
      *
     C     *IN11         WHENEQ    *ON                                          F11-DELETE
     C                   EXSR      $DLTFH
     C                   EXSR      $DLTFD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C     MODE          IFNE      RECOST                                       IF NOT RECOS
     C     IDFLOW        ADD       WKPLIN        WKDIFF
     C     HDRRN1        IFGE      WKDIFF                                       IF SOMETHING
     C                   ELSE
     C                   Z-ADD     COUNT         HDRRN1
     C                   DO        WKPLIN                                       DO FILL
     C                   EXSR      $BLANK
     C                   ENDDO                                                  DO FILL
     C                   ENDIF                                                  IF SOMETHING
     C                   ENDIF                                                  IF NOT RECOS
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER PRESSED 'ENTER'
      *
     C     HDRRN1        IFEQ      0                                            IF NOTHING
     C     MODE          IFEQ      REVISE
     C     MODE          OREQ      RECOST
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDIF
     C                   ELSE
      *
     C                   EXSR      $EDIT1
     C                   ENDIF                                                  IF NOTHING
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * IF AN EXISTING TICKET IS POSTED, THE USER CANNOT CHANGE ANY
      * INFORMATION.
      *
     C     POSTED        IFEQ      YES                                          IF POSTED
     C                   ELSE
      *
      * Clear the "OUT" arrays for Ration/Additive/Pounds.
      *
     C                   move      *blank        aroutra
     C                   z-add     0             aroutlb
      *
      * CLEAR THE TOTAL ACCUMULATORS AT THE TOP OF THE SCREEN
      * EDIT THE CONTROL RECORD AND THE SUBFILE
      *
     C                   Z-ADD     0             C1FDLB
     C                   Z-ADD     0             C1INAM
     C                   Z-ADD     0             C1MDAM
     C                   Z-ADD     0             C1MFAM
      *
     C                   EXSR      $EDC1
      *
     C     ERROR         IFEQ      0
     c     error         oreq      warmsg
     C                   EXSR      $EDS1
     C     ERROR         IFEQ      0
     C                   Z-ADD     1             HDPAG1
     C                   ENDIF
     C                   ELSE
     C                   EXSR      $OFFSF
     C                   Z-ADD     1             HDPAG1
     C                   ENDIF
      *
     C                   ENDIF                                                  IF POSTED
      *
      * SET THE NEXT ROUTINE. ISSUE AN ERROR MESSAGE IF THE USER HAS
      * NOT KEYED AT LEAST ONE ENTRY IN THE SUBFILE.
      *
     C     WKEDIT        IFEQ      NO                                           IF NO DETAIL
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00314'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NO DETAIL
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDIT THE CONTROL RECORD INFO ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDC1         BEGSR
      *
      * VALIDATE:
      *     FARM SITE
      *     FEED MILL BUSINESS OFFICE (CREATE MODE ONLY)
      *     TICKET NUMBER             (CREATE MODE ONLY)
      *     TICKET DATE
      *     PRODUCED FLAG
      *
     C                   EXSR      $FSCD
      *
      * Ticket number
      *
     C     MODE          IFEQ      CREATE
     C                   EXSR      $FMBO
     C                   EXSR      $TKNO
     C                   ENDIF
      * Ticket date
     C                   EXSR      $TKDT
      *
      * Cost Through System Flag
     c                   EXSR      $csfl
      *
      *
      * IF YOU ARE CREATING, EDIT:
      *    A) PRODUCED FLAG
      *    B) COST THROUGH SYSTEM FLAG
      *    C) Check Cost Through System Flag - Warning only
      *
     C                   if        mode = create                                If creating
      * PRODUCED FLAG
      *
     C     C1PRFL        IFNE      YES                                          IF BAD VALUE
     C     C1PRFL        ANDNE     NO
     C                   SETON                                        39
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09106'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF BAD VALUE
      *
      * COST THROUGH SYSTEM FLAG
      *
     C     C1CSFL        IFNE      YES                                          IF INVALID
     C     C1CSFL        ANDNE     NO
     C                   SETON                                        45
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09106'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF INVALID
      *
      * DELIVERY TICKETS FOR 'PURCHASED' FEED CANNOT BE
      * 'COSTED THROUGH THE SYSTEM'.  VALIDATE USERS
      * COMBINATION OF VALUES.
      *
     C     C1PRFL        IFEQ      NO
     C     C1CSFL        ANDEQ     YES
     C                   SETON                                        45
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00305'     MGID(E)
     C                   ENDIF
     C                   ENDIF
     C                   endif                                                  If creating
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * Validate farm site
      *----------------------------------------------------------------
      *
     C     $fscd         BEGSR
      *
      * FARM SITE ENTERED
      *
     C     C1FSCD        IFEQ      0                                            IF NO FARM
     C                   MOVE      *BLANK        C1FSNM
     C                   SETON                                        36
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
      * CHECK THAT FARM SITE EXISTS IN THE FARM SITE MASTER FILE
      *
     C     C1FSCD        CHAIN     HSP018                             92
     C     *IN92         IFEQ      *OFF                                         IF GOOD FARM
     C                   MOVEL     FSFSNM        C1FSNM
      *
      * INVALID FARM SITE
     C                   ELSE
     C                   MOVE      *BLANK        C1FSNM
     C                   SETON                                        36
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00131'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVE      C1FSCD        XXFSCD
     C                   MOVEA     XXFSCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF GOOD FARM
     C                   ENDIF                                                  IF NO FARM
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * Validate feed mill business office
      *----------------------------------------------------------------
      *
     C     $fmbo         begsr
      *
     C                   move      *blank        c1fmds
      *
     C                   select
     C                   when      c1fmbo = *blank
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   other
     C     c1fmbo        chain     hsp009                             92
     C                   if        *in92 = *off                                 If found
     C                   move      bobods        c1fmds
      *
     C                   if        bodvcd <> ipdvcd                             If not FEED
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00113'
     C                   clear                   mgw
     C                   movea     c1fmbo        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not FEED
      *
     C                   else
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00110'
     C                   clear                   mgw
     C                   movea     c1fmbo        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If found
     C                   endsl
      *
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * EDIT TICKET NUMBER
      *----------------------------------------------------------------
      *
     C     $TKNO         BEGSR
      *
     C                   SELECT
     C     C1TKNO        WHENEQ    0                                            WH NO TICKET
     C                   SETON                                        37
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
      *
     C     C1TKNO        WHENLT    0                                            WH NEG TICK
     C                   SETON                                        37
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09000'     MGID(E)
     C                   ENDIF
     C                   OTHER
      *
     C     key03         CHAIN     HSP037                             95
     C     *IN95         IFEQ      *OFF                                         IF EXISTS
     C                   SETON                                        37
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00310'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEL     C1TKNO        XXTKNO
     C                   MOVEA     XXTKNO        MGW(1)
     C                   MOVEA     'D'           MGW(10)
     C                   MOVEA     C1FMBO        MGW(11)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF EXISTS
      *
      * The ticket number cannot be a number in the block of reserved ticket
      * numbers.
      *
     C                   if        c1tkno >= dabegtkno and                      If reserved
     C                             c1tkno <= daendtkno
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00836'     mgid(e)
     C                   clear                   mgw
     C                   movel     c1tkno        xxtkno
     C                   movea     xxtkno        mgw(1)
     C                   movel     dabegtkno     xxtkno
     C                   movea     xxtkno        mgw(10)
     C                   movel     daendtkno     xxtkno
     C                   movea     xxtkno        mgw(19)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If reserved
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDIT TICKET DATE
      *----------------------------------------------------------------
      *
     C     $TKDT         BEGSR
      *
      * VALIDATE THAT THE TICKET DATE IS VALID AND ADD CENTURY VALUES
      * TO THE WORK FIELD FOR LATER USE IN THE UPDATING ROUTINE.
      *
     C     *mdy          test(d)                 c1mdy                  92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD
      *
     C     *mdy          move      c1mdy         wkisodate
     C                   move      wkisodate     wktkdt
     C                   endif                                                  If bad date
      *
      *
      * IF THE DATE IS VALID,
      *     CHECK THAT IT IS NOT GREATER THAN TODAY'S DATE
      *     CHECK THAT IT IS NOT IN A CLOSED PERIOD
      *     IF IT IS IN THE CURRENT PERIOD,
      *         CHECK THAT THE PERIOD CLOSE PROGRAMS ARE NOT RUNNING
      *
     C     *IN38         IFEQ      *OFF                                         IF GOOD DATE
      *
     C                   SELECT
     C     WKTKDT        WHENGT    WKUDAT
     C                   SETON                                        38
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00426'     MGID(E)
     C                   ENDIF
      *
     C     WKTKDT        WHENLT    DABPDT
     C                   SETON                                        38
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09007'     MGID(E)
     C                   ENDIF
      *
     C     WKTKDT        WHENGE    DABPDT
     C     WKTKDT        ANDLE     DAEPDT
     C     DAPPFL        ANDNE     *BLANK
     C                   SETON                                        38
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09016'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDIF                                                  IF GOOD DATE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * Check Cost Through System Flag - Warning only
      *----------------------------------------------------------------
      *
     c     $csfl         BEGSR
      *
      * 10/31/2019 JBB E15736 - Upload Toll Mill Receipts
      * Check if Cost Through System Flag matches value in HSP089
      * If not matching, issue warning message
      *
     c                   if        c1fmbo <> *blanks                            if c1fmbo <> blanks
     c     c1fmbo        chain     hsp089
     c                   if        %found(hsp089)                               if %found(hsp089)
     c                   if        c1csfl <> macsfl                             if c1csfl <> macsfl
     c                   add       1             error
     c                   add       1             warmsg
     c                   movel     'HS09273'     mgid(e)
     c                   endif                                                  fi c1csfl <> macsfl
     c                   endif                                                  fi %found(hsp089)
     c                   endif                                                  fi c1fmbo <> blanks
      *
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * CLEAR THE SUBFILE ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
      * CLEAR THE TOTAL ACCUMULATORS IN THE CONTROL RECORD
      *
     C                   Z-ADD     0             C1FDLB
     C                   Z-ADD     0             C1INAM
     C                   Z-ADD     0             C1MFAM
     C                   Z-ADD     0             C1MDAM
      *
     C                   Z-ADD     0             HDRRN1
     C                   Z-ADD     0             SVLNNO
     C                   Z-ADD     0             COUNT
      *
     C                   CLEAR                   HP120S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP120C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * REFRESH/FILL THE SUBFILE ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * SET INDICATORS TO CONTROL/PROTECT SCREEN FIELDS
      *
     C                   EXSR      $IND
      *
      * LOADING THE SUBFILE IN THIS PROGRAM IS DIFFERENT THAN IN THE
      * SHELL PROGRAMS AND DEPENDS ON THE 'MODE'.
      * FOR RECOST MODE, WE LOAD THE SUBFILE UNTIL EOF
      * FOR CREATE MODE, WE LOAD A PAGE OF BLANK LINES.
      * FOR REVISE MODE, WE LOAD A PAGE OF DATABASE RECORDS AND, IF WE
      *                  HIT EOF, WE FINISH THE PAGE WITH BLANK LINES.
      *
      * SET POSITION IN DATABASE FILE HSP038-FEED TICKET DETAIL
      *
     C     key03         SETLL     HSP038
      *
     C                   SELECT
     C     MODE          WHENEQ    RECOST
     C     *IN82         DOUEQ     *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C     MODE          WHENEQ    CREATE
     C                   DO        WKPLIN
     C                   EXSR      $BLANK
     C                   ENDDO
      *
     C     MODE          WHENEQ    REVISE
     C     *IN82         DOUEQ     *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
     C                   SETOFF                                       82
      *
      * FILL UP THE SUBFILE PAGE WITH BLANK LINES IF NECESSARY
      *
     C     WKPLIN        IFNE      0
     C     WKPLIN        ANDNE     COUNT
     C     COUNT         DIV       WKPLIN        WKFLD
     C                   MVR                     WKRMDR
     C     WKPLIN        SUB       WKRMDR        WKDIFF
     C                   DO        WKDIFF
     C                   EXSR      $BLANK
     C                   ENDDO
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * LOAD THE SUBFILE ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   MOVE      *BLANK        DFPICK
     C                   MOVE      *BLANK        DFBNCD
     C                   MOVE      *BLANK        DFHGCD
     C                   MOVE      *BLANK        DFRNCD
     C                   MOVE      *BLANK        DFADCD
     C                   MOVE      *BLANK        DFFTCD
     C                   Z-ADD     0             DFFDLB
     C                   Z-ADD     0             DFINAM
     C                   Z-ADD     0             DFMDAM
     C                   Z-ADD     0             DFMFAM
      *
     C                   MOVE      *BLANK        HDDIR
     C                   Z-ADD     0             HDHGSN
     C                   MOVE      *BLANK        HDPPCD
     C                   MOVE      *BLANK        HDRMCD
     C                   MOVE      *BLANK        HDBLCD
      *
      *   RETRIEVE FEED DETAIL RECORDS FOR THE FEED TICKET AND FILL
      *   THE SUBFILE FIELDS USING THE FOLLOWING LOGIC:
      *  1) IF THE ALLOCATED FLAG FOR THE RECORD IS 'DIRECT',
      *        RETRIEVE THE ALPHA HOG GROUP CODE FOR DISPLAY
      *        SET THE DIRECT BIN FLAG TO 'YES'.
      *  2) FOR ALL RECORDS,
      *       ROLL/ACCUMULATE EXPLODED RECORDS INTO 1 RECORD FOR
      *       DISPLAY
      *
     C     key03         READE(N)  HSP038                                 82
     C     *IN82         IFEQ      *OFF                                         IF NOT EOF
     C     FDLNNO        ANDNE     SVLNNO
     C                   SETON                                        85
      *
     C     FDALFL        IFEQ      'D'                                          IF DIRECT
     C                   Z-ADD     FDHGSN        HDHGSN
     C                   EXSR      $GRPCD
     C                   move      yes           directfl
     C                   else
     C                   move      no            directfl
     C                   ENDIF                                                  IF DIRECT
      *
     C                   EXSR      $ROLL1
      *
      * DETERMINE IF YOU NEED TO WRITE ANOTHER SUBFILE RECORD
      *
     C                   MOVEL     NO            WRITFL
      *
     C                   if        fdlnno <> svlnno or directfl = yes
     C                   Z-ADD     FDLNNO        SVLNNO
     C                   MOVEL     YES           WRITFL
     C                   ENDIF
      *
      *  DO YOU NEED TO WRITE A SUBFILE RECORD?
      *
     C     WRITFL        IFEQ      YES                                          IF WRITE
     C                   EXSR      $IND
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
      *
     C                   WRITE     HP120S1
     C                   SETON                                        81
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF                                                  IF WRITE
     C                   ENDIF                                                  IF NOT EOF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * LOAD BLANK SUBFILE RECORDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $BLANK        BEGSR
      *
     C                   MOVE      *BLANK        DFPICK
     C                   MOVE      *BLANK        DFBNCD
     C                   MOVE      *BLANK        DFHGCD
     C                   MOVE      *BLANK        DFRNCD
     C                   MOVE      *BLANK        DFADCD
     C                   MOVE      *BLANK        DFFTCD
     C                   Z-ADD     0             DFFDLB
     C                   Z-ADD     0             DFINAM
     C                   Z-ADD     0             DFMDAM
     C                   Z-ADD     0             DFMFAM
      *
     C                   MOVE      *BLANK        HDDIR
     C                   Z-ADD     0             HDHGSN
     C                   MOVE      *BLANK        HDPPCD
     C                   MOVE      *BLANK        HDRMCD
     C                   MOVE      *BLANK        HDBLCD
      *
     C                   EXSR      $SETOF
     C                   EXSR      $IND
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
      *
     C                   WRITE     HP120S1
     C                   SETON                                        81
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * ROUTINE TO ROLL THE MULTIPLE DETAIL RECORDS BACK UP
      * INTO THE ORIGINAL RECORD THE USER KEYED ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $ROLL1        BEGSR
      *
     C                   MOVEL     YES           FIRSTR
      *
     C     key05         SETLL     HSL038A
      *
     C                   SETOFF                                       93
     C     *IN93         DOUEQ     *ON                                          DO ROLL LOOP
     C     key05         READE     HSL038A                                93
     C     *IN93         IFEQ      *OFF                                         IF NOT EOF
      *
     C     FIRSTR        IFEQ      YES
     C                   MOVEL     FDBNCD        DFBNCD
     C                   MOVEL     FDRNCD        DFRNCD
     C                   MOVEL     FDADCD        DFADCD
     C                   MOVEL     FDFTCD        DFFTCD
     C                   MOVEL     NO            FIRSTR
     C                   ENDIF
      *
     C                   ADD       FDFDLB        DFFDLB
     C                   ADD       FDINAM        DFINAM
     C                   ADD       FDMDAM        DFMDAM
     C                   ADD       FDMFAM        DFMFAM
     C                   ENDIF                                                  IF NOT EOF
     C                   ENDDO                                                  DO ROLL LOOP
      *
      * ACCUMULATE TOTAL VALUES FOR DISPLAY AT THE TOP OF THE SCREEN
      *
     C                   ADD       DFFDLB        C1FDLB
     C                   ADD       DFINAM        C1INAM
     C                   ADD       DFMDAM        C1MDAM
     C                   ADD       DFMFAM        C1MFAM
      *
      * IF THERE ARE ANY PICKUP TICKETS THAT REFERENCE THIS DELIVERY
      * TICKET, CHECK FOR SPECIFIC PICKUPS AGAINST THIS BIN AND
      * RATION/ENERGY CODE IN THE FEED DETAIL FILE
      *
     C                   MOVEL     NO            DFPICK
     C     PICKUP        IFEQ      YES                                          IF PICKUP
     C     key08         CHAIN     HSL038Q                            93
     C     *IN93         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     YES           DFPICK
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF PICKUP
      *
     C                   ENDSR                                                                016
      /EJECT
      *----------------------------------------------------------------
      *  SET OFF ALL INDICATORS IN THE SUBFILE RECORDS
      *----------------------------------------------------------------
      *
      * THIS SUBROUTINE IS USED TO:
      *  1) KEEP THE CURSOR FROM BEING IN THE SUBFILE WHILE THE
      *     DISPLAYED ERROR MESSAGE IS FOR THE CONTROL RECORD, AND
      *  2) KEEP THE CURSOR FROM BEING ON THE WRONG SUBFILE RECORD
      *     WHEN THE USER IS TAKING THE PROMPT IN THE SUBFILE
      *
      *
     C     $OFFSF        BEGSR
      *
     C     *IN80         DOUEQ     *ON
     C                   READC     HP120S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
     C                   SETON                                        85
     C                   EXSR      $SETOF
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
     C                   ENDIF
     C                   ENDDO
      * Set MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * READ AND EDIT CHANGED SUBFILE RECORDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDS1         BEGSR
      *
      * SET THE FLAGS THAT WILL BE USED TO DETERMINE IF THE USER
      * KEYED IN SUBFILE RECORDS--HE MUST KEY AT LEAST ONE RECORD
      *
     C                   MOVEL     NO            WKEDIT
      *
      * READ ALL THE CHANGED SUBFILE RECORDS
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO PROCESS
     C                   READC     HP120S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
      * SETON MDT
     C                   SETON                                        85
     C                   MOVEL     NO            EDITFL
      *
      * SET OFF THE ERROR INDICATORS
      *
     C                   EXSR      $SETOF
      *
      * IF THE USER HAS ENTERED ANY VALUES ON THE SUBFILE LINE,
      * THEN EDIT ENTRIES.
      *
     C     DFBNCD        IFNE      *BLANK
     C     DFHGCD        ORNE      *BLANK
     C     DFRNCD        ORNE      *BLANK
     C     DFADCD        ORNE      *BLANK
     C     DFFTCD        ORNE      *BLANK
     C     DFFDLB        ORNE      0
     C     DFINAM        ORNE      0
     C     DFMDAM        ORNE      0
     C     DFMFAM        ORNE      0
     C                   MOVEL     YES           EDITFL
     C                   ELSE
     C                   MOVE      *BLANK        DFPICK
     C                   ENDIF
      *
     C     EDITFL        IFEQ      YES                                          IF GO EDIT
     C                   MOVEL     YES           WKEDIT
      *
      * ACCUMULATE VALUES FOR TOTALS IN THE CONTROL RECORD
      *
     C                   ADD       DFFDLB        C1FDLB
     C                   ADD       DFINAM        C1INAM
     C                   ADD       DFMDAM        C1MDAM
     C                   ADD       DFMFAM        C1MFAM
      *
      * PERFORM VALIIDATIONS ON:
      *    BIN CODE
      *    HOG GROUP CODE
      *    RATION/ADDITIVE CODE
      *    FEED TYPE CODE
      *    FEED POUNDS
      *    INGREDIENT AMOUNT
      *    MEDICATION AMOUNT
      *    MANUFACTURING AMOUNT
      *
     C                   EXSR      $BNCD
     C                   EXSR      $HGCD
     C                   EXSR      $RACD
     C                   EXSR      $FTCD
      *
      * Validate Pounds and Amounts
      *
     C                   EXSR      $AMT
      *
      *
      * If there were no errors on Ration/Additive, make a couple of more checks.
      *
     C     *IN33         IFEQ      *OFF                                         If ration/add OK
     C     *IN47         ANDEQ     *OFF
      *
      * If this Ticket was originally uploaded and Feed Pounds are valid,
      * build your "out" array of Rations/Additives/Pounds
      *
     C                   if        uploaded = yes and *in34 = *off
     C                   exsr      $arrayout
     C                   endif
      *
      *
      * IF THE GROUP IS A BGF GROUP, THEN:
      * ISSUE A WARNING MESSAGE IF THE PHASE OF A RATION
      * IS DIFFERENT THAN THE PHASE OF THE GROUP.
      * MAKE THIS CHECK THE LAST FOR THE RECORD SO THAT ALL
      * THE TERMINAL ERRORS WILL APPEAR FIRST.
      *
     C     DFRNCD        IFNE      *BLANK                                       IF warning
     C     RNPPCD        ANDNE     HDPPCD
     C     HDPPCD        ANDEQ     'BGF  '
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   ADD       1             WARMSG
     C                   MOVEL     'HS00239'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     RNPPCD        MGW(6)
     C                   MOVEA     DFHGCD        MGW(11)
     C                   MOVEA     HDPPCD        MGW(18)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF warning
     C                   endif                                                  If ration/add OK
      *
     C                   ENDIF                                                  IF GO EDIT
      *
      * RESET INDICATORS
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
      *
      * SET OFF THE ERROR INDICATORS
      *
     C                   EXSR      $SETOF
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO PROCESS
      * SET MDT
     C                   SETOFF                                       85
      *
      * When Revising tickets that were originally uploaded (not manual),
      * verify that the user's Ration/Additive/Pounds match those coming in.
      *
     C                   if        uploaded = yes
     C                   exsr      $match
     C                   endif
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDIT POUNDS AND AMOUNT VALUES
      *----------------------------------------------------------------
      *
     C     $AMT          BEGSR
      *
      * FEED POUNDS IS REQUIRED AND CAN BE NEGATIVE
      *
     C     DFFDLB        IFEQ      0                                            IF NO LBS
     C                   SETON                                        34
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF NO LBS
      *
      * IF YOU ARE IN CREATE MODE AND THE DELIVERY TICKET
      * IS TO BE COSTED THROUGH THE SYSTEM:
      *    THE USER CANNOT KEY AN INGREDIENT AMOUNT
      *    THE USER CANNOT KEY A MEDICATION AMOUNT
      *    THE USER CANNOT KEY A MANUFACTURING AMOUNT
      *
     C     C1CSFL        IFEQ      YES                                          IF COST THRU SYSTEM
     C     MODE          ANDEQ     CREATE
     C     DFINAM        IFNE      0                                               IF INGRED
     C                   SETON                                        35
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00313'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                     IF INGRED
      *
     C     DFMDAM        IFNE      0                                               IF MEDIC
     C                   SETON                                        40
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00315'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                     IF MEDIC
      *
     C     DFMFAM        IFNE      0                                               IF MANUF
     C                   SETON                                        41
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00316'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                     IF MANUF
     C                   ENDIF                                                  IF COST THRU SYSTEM
      *
      *
      * IF THE DELIVERY TICKET IS NOT TO BE COSTED THROUGH
      * THE SYSTEM:
      *    THE USER IS REQUIRED TO KEY AN INGREDIENT AMOUNT
      *    THE USER MAY KEY A MEDICATION AMOUNT
      *    THE USER MAY KEY A MANUFACTURING AMOUNT
      *
     C     C1CSFL        IFEQ      NO                                           IF DON'T COST
      *
     C     DFINAM        IFEQ      0                                            IF NO ING
     C                   SETON                                        35
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00312'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF NO ING
      *
     C                   ENDIF                                                  IF DON'T COST
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDITS FOR BIN ON SCREEN 1
      *----------------------------------------------------------------
      *
     C     $BNCD         BEGSR
      *
      * PERFORM BIN VALIDATIONS
      *   1) CANNOT BE BLANK
      *   2) MUST BE VALID FOR THE FARM SITE
      *   3) MUST BE HAVE A BIN SET THAT IS TIED TO A ROOM
      *   4) MUST HAVE AT LEAST ONE HOG GROUP ELIGIBLE FOR FEED
      *
     C     DFBNCD        IFEQ      *BLANK                                       IF NO BIN
     C                   SETON                                        31
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * CHECK THAT BIN EXISTS FOR FARM SITE IN THE 'BIN SET BINS' FILE
      *
     C     key04         CHAIN     HSL036B                            96
     C     *IN96         IFEQ      *ON                                          IF BAD BIN
     C                   SETON                                        31
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00139'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFBNCD        MGW(1)
     C                   MOVE      C1FSCD        XXFSCD
      ** P405-Changed beginning position of 2nd parm to support Bin Code 6A.
P405 C**                 MOVEA     XXFSCD        MGW(6)
P405 C                   MOVEA     XXFSCD        MGW(7)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * Check that 'bin set' is tied/assigned to at least one Room
      *
     C     key01         chain     hsl113a                            92
     C                   if        *in92 = *on                                  If not assigned
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00163'     mgid(e)
     C                   clear                   mgw
     C                   movea     dfbncd        mgw(1)
      ** P405-Changed beginning position of 2nd parm to support Bin Code 6A.
P405 C**                 movea     bnbicd        mgw(6)
P405 C                   movea     bnbicd        mgw(7)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      * DOES THIS BIN HAVE AT LEAST ONE HOG GROUP ELIGIBLE FOR FEED
      *
     C     key04         CHAIN     HSJ036A                            96
     C     *IN96         IFEQ      *ON                                          IF NO EATERS
     C                   SETON                                        31
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00138'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFBNCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * BIN IS VALID, SO DETERMINE IF IT IS A DIRECT OR SHARED BIN
      *
     C                   EXSR      $SHARED
      *
     C                   ENDIF                                                  IF NO EATERS
     C                   ENDIF                                                  IF NO ROOM
     C                   ENDIF                                                  IF BAD BIN
     C                   ENDIF                                                  IF NO BIN
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SUBROUTINE TO DETERMINE IF A BIN IS DIRECT OR SHARED
      *----------------------------------------------------------------
      *
     C     $shared       begsr
      *
      * Default the hidden 'direct bin' flag to Yes.
      *
     C                   move      yes           hddir
      *
      * Call the generic program to determine if the bin is shared.
      *
     C                   call      'HP8004'
     C                   parm                    bnfscd
     C                   parm                    bnbncd
     C                   parm      no            xxshared
      *
     C                   if        xxshared = yes                               If shared
     C                   movel     no            hddir
     C                   endif                                                  If shared
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * EDITS FOR HOG GROUP ON SCREEN 1
      *----------------------------------------------------------------
      *
      * IF THE BIN ENTERED BY THE USER IS 'DIRECT',
      *    IF THE USER KEYED A GROUP, VALIDATE THAT:
      *        1) IT IS A VALID GROUP FOR THIS FARM SITE
      *        2) THE HOG GROUP IS ELIGIBLE FOR FEED
      *    IF HOG GROUP IS BLANK, DEFAULT IN A GROUP ELIGIBLE FOR FEED
      *       IF ONLY ONE GROUP IS ELIGIBLE; OTHERWISE ISSUE AN ERROR
      *       MESSAGE TELLING THE USER TO TAKE F4 AND SELECT A GROUP
      *
      * IF THE BIN ENTERED BY THE USER IS 'SHARED', GROUP MUST BE BLANK
      *
      *
     C     $HGCD         BEGSR
      *
     C     HDDIR         IFEQ      YES                                          IF DIRECT
     C     DFHGCD        IFEQ      *BLANK                                       IF NO GROUP
     C                   EXSR      $NOGRP
     C                   ELSE
     C                   EXSR      $GROUP
     C                   ENDIF                                                  IF NO GROUP
     C                   ELSE
      *
      * ELSE, THE BIN IS SHARED; SO, HOG GROUP MUST BE BLANK AND
      * YOU NEED TO POPULATE THE HIDDEN PHASE FIELD WITH THE FARM'S
      * DEFAULT PHASE.
     C                   MOVEL     FSPPCD        HDPPCD
      *
     C     DFHGCD        IFNE      *BLANK                                       IF NOT BLANK
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00263'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFBNCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF NOT BLANK
      *
     C                   ENDIF                                                  IF DIRECT
      *
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      *  EDIT THE GROUP ENTERED BY THE USER FOR A DIRECT BIN
      *----------------------------------------------------------------
      *
     C     $GROUP        BEGSR
      *
     C     key06         CHAIN     HSL034E                            94
     C     *IN94         IFEQ      *ON                                          IF BAD GROUP
     C                   SETON                                        32
     C                   Z-ADD     0             HDHGSN
     C                   MOVE      *BLANK        HDPPCD
     C                   MOVE      *BLANK        HDBLCD
     C                   MOVE      *BLANK        HDRMCD
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00265'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFHGCD        MGW(1)
     C                   MOVE      C1FSCD        XXFSCD
     C                   MOVEA     XXFSCD        MGW(8)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * THE GROUP IS VALID FOR THIS FARM, SO PERFORM ADDITIONAL CHECKS
      *
     C                   Z-ADD     HGHGSN        HDHGSN
     C                   MOVE      HGPPCD        HDPPCD
     C                   MOVEL     HGBLCD        HDBLCD
     C                   MOVEL     HGRMCD        HDRMCD
      *
      * DOES THE STATUS EXIST IN THE HOG GROUP STATUS MASTER FILE
      *
     C     HGGSCD        CHAIN     HSP014                             79
     C     *IN79         IFEQ      *ON                                          IF NOT FOUND
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00268'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFHGCD        MGW(1)
     C                   MOVEA     HGGSCD        MGW(8)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * THE GROUP STATUS WAS FOUND. SO, CHECK THE 'FEED FLAG' TO SEE IF
      * THIS IS A STATUS THAT IS ELIGIBLE FOR FEED.
      *
     C     GSFDFL        IFEQ      NO                                           IF NOT ELIG
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00266'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFHGCD        MGW(1)
     C                   MOVEA     HGGSCD        MGW(8)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * THE GROUP IS ELIGIBLE TO EAT FEED, SO CHECK TO SEE IF IT EATS
      * FROM THE BIN KEYED BY THE USER.
      *
     C                   move      no            binfl
     C     hdhgsn        setll     hsj034w
      *
     C                   dou       *in91 = *on or binfl = yes                   Do bin loop
     C     hdhgsn        reade     hsj034w                                91
     C                   if        *in91 = *off and                             If not eof
     C                             bnbncd = dfbncd
     C                   move      yes           binfl
     C                   endif                                                  If not eof
     C                   enddo                                                  Do bin loop
      *
     C                   if        binfl = no                                   If wrong bin
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00269'     mgid(e)
     C                   clear                   mgw
     C                   movea     dfhgcd        mgw(1)
     C                   movea     dfbncd        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If wrong bin
      *
      * Make sure that the 'create date' of the group is on/after the
      * ticket date. Alice does not want any group on a ticket if the ticket
      * date is prior to the group's create date.
      *
     C                   if        wktkdt < hgcrdt
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00388'     mgid(e)
     C                   clear                   mgw
     C                   movea     dfhgcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
     C                   ENDIF                                                  IF NOT ELIG
     C                   ENDIF                                                  IF NOT FOUND
     C                   ENDIF                                                  IF BAD GROUP
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * FIND GROUP WHEN BIN IS DIRECT AND NO GROUP IS ENTERED
      *----------------------------------------------------------------
      *
      * THIS SUBROUTINE IS EXECUTED WHEN A BIN IS DIRECT AND THE USER
      * HAS NOT ENTERED A HOG GROUP.
      *
      * IF ONLY ONE GROUP IS ELIGIBLE FOR FEED, DEFAULT IT IN.
      * BUT, IF MULTIPLE GROUPS ARE ELIGIBLE, ISSUE A MESSAGE TO THE
      * USER TO SELECT A GROUP.
      *
     C     $NOGRP        BEGSR
      *
     C     key04         CHAIN     HSJ036A                            96
     C     *IN96         IFEQ      *OFF                                         IF EATER
      *
      * CHECK TO SEE IF THERE IS ANOTHER GROUP ELIGIBLE FOR FEED
      *
     C     key04         READE     HSJ036A                                96
     C     *IN96         IFEQ      *OFF                                         IF MULT GRP
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00309'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFBNCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * ELSE, ONLY ONE GROUP IS ELIGIBLE; SO DEFAULT ITS VALUES IN.
      *
     C                   MOVEL     HGHGCD        DFHGCD
     C                   Z-ADD     HGHGSN        HDHGSN
     C                   MOVE      HGPPCD        HDPPCD
     C                   MOVEL     HGBLCD        HDBLCD
     C                   MOVEL     HGRMCD        HDRMCD
     C                   ENDIF                                                  IF MULT GRP
     C                   ELSE
      *
      * NO GROUPS ARE ELIGIBLE FOR FEED
      *
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00264'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVE      C1FSCD        XXFSCD
     C                   MOVEA     XXFSCD        MGW(1)
     C                   MOVEA     DFBNCD        MGW(6)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF EATER
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SUBROUTINE TO EDIT RATION ADDITIVE CODES ON SCREEN 1
      *----------------------------------------------------------------
      *
      * RATION VALIDATIONS:
      *    RATION CODE EXISTS IN RATIONS MASTER
      *    RATION CODE IS ACTIVE
      *    FARM SITE PRODUCTION PHASE MATCHES THE PRODUCTION PHASE OF
      *    THE RATION
      *
      * RATION ADDITIVE VALIDATIONS:
      *    RATION ADDITIVE COMBINATION EXISTS IN RATION ADDTIVE FILE
      *    RATION ADDITIVE IS ACTIVE
      *
     C     $RACD         BEGSR
      *
     C     DFRNCD        CHAIN     HSP071                             97
     C     *IN97         IFEQ      *ON                                          IF BAD RAT
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00247'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * RATION CANNOT BE INACTIVE
      *
     C     RNRNST        IFEQ      'I'                                          IF RAT INACT
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00529'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF RAT INACT
      *
      * IF ADDITIVE IS ENTERED, VALIDATE THAT THE RATION
      * ADDITIVE COMBINATION IS VALID.
      *
     C     DFADCD        IFNE      *BLANK                                       IF ADDITIVE
     C     key02         CHAIN     HSP072                             97
     C     *IN97         IFEQ      *ON                                          IF BAD COMBO
     C                   SETON                                        47
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00417'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     DFADCD        MGW(6)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * RATION ADDITIVE COMBINATION CANNOT BE INACTIVE
      *
     C     RARAST        IFEQ      'I'                                          IF INACTIVE
     C                   SETON                                        47
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00530'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFRNCD        MGW(1)
     C                   MOVEA     DFADCD        MGW(6)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF INACTIVE
      *
     C                   ENDIF                                                  IF BAD COMBO
     C                   ENDIF                                                  IF ADDITIVE
     C                   ENDIF                                                  IF BAD RAT
      *
      * If the Ration/Additive combination is valid and this ticket was
      * originally Uploaded, check that the combination existed on the uploaded
      * ticket.
      *
     C                   if        uploaded = yes and *in33 = *off and          If uploaded
     C                             *in47 = *off
     C                   eval      wkra = dfrncd + ' ' + dfadcd
     C                   eval      x = 1
     C     wkra          lookup    arinra(x)                              92
     C                   if        *in92 = *off                                 If not on original
     C                   seton                                        3347
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00522'     mgid(e)
     C                   clear                   mgw
     C                   movea     dfrncd        mgw(1)
     C                   movea     dfadcd        mgw(6)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not on original
     C                   endif                                                  If uploaded
      *
      * If: a) hog group is not blank
      *     b) the group is not a BGF group
      *     c) the group is not a Continuous Flow group
      *     d) the group is valid and
      *     e) the ration code is valid
      * then, check that the group is the correct age for this ration
      *
     C                   if        dfhgcd <> *blank and hgppcd <> 'BGF  '       If OK
     C                             and hgcffl = no and *in32 = *off
     C                             and *in33 = *off
     C                   exsr      $age
     C                   endif                                                  If OK
      *
     C                   ENDSR
      /EJECT
      *-------------------------------------------------------------------------
      * Calculate the 'age' of the group and compare it to the ration max age
      *-------------------------------------------------------------------------
      *
     C     $age          begsr
      *
      * Default the 'age' of the group to the 'average days old in'.
      *
     C                   z-add     hgadoi        wkdays
      *
      * If the 'ticket date' is after the 'open date' of the group,
      * Move the 'ticket date' and the 'open date' of the group to date format fields.
      * Find the number of days between the 'ticket date' and the 'open date'.
      * Add this difference to the 'average days old in'.
      *
      *
     C                   if        wktkdt > hgopdt and hgopdt <> 0              If need to calc
     C     *iso          move      wktkdt        wkisotkdt
     C     *iso          move      hgopdt        wkisoopdt
     C     wkisotkdt     subdur    wkisoopdt     wkdays:*d
     C                   add       hgadoi        wkdays
     C                   endif                                                  If need to calc
      *
      * Check 'age' against ration's max.
      *
     C                   if        rnmaxday < wkdays                            If too old
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00525'     mgid(e)
     C                   clear                   mgw
     C                   movea     dfrncd        mgw(1)
     C                   movel     rnmaxday      wkdaysalph
     C                   movea     wkdaysalph    mgw(6)
     C                   movea     dfhgcd        mgw(9)
     C                   movel     wkdays        wkdaysalph
     C                   movea     wkdaysalph    mgw(16)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If too old
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * EDIT FEED TYPE CODE
      *----------------------------------------------------------------
      *
     C     $FTCD         BEGSR
      *
     C     DFFTCD        CHAIN     HSP024                             97
     C     *IN97         IFEQ      *ON                                          IF BAD TYPE
     C                   SETON                                        48
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00201'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFFTCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * FEED MANUFACTURING TYPE MUST HAVE AN ACTIVE STATUS
      *
     C     FTFTST        IFEQ      'I'
     C                   SETON                                        48
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00208'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFFTCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF
      *
     C                   ENDIF                                                  IF BAD TYPE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * RESET INDICATORS
      *----------------------------------------------------------------
      *
     C     $IND          BEGSR
      *
      * THE DSPATR LOGIC USED IN THE DSPF REQUIRES AT LEAST ONE
      * INDICATOR TO BE ON.
     C                   SETON                                        42
      *
      * IF THE TICKET WAS DELETED OUT FROM UNDER THE USER, THEN SET
      * *IN90 BACK ON TO CONTROL AVAILABLE FUNCTION KEYS AND INPUT
      * FIELDS.
      *
     C     NOTFLG        IFEQ      YES                                          IF NOT FOUND
     C                   SETON                                        90
     C                   ELSE
      *
     C     C1CSFL        IFEQ      YES                                          IF COST THRU SYSTEM
     C     MODE          ANDNE     CREATE
     C                   SETON                                        66
     C                   ELSE
     C                   SETOFF                                       66
     C                   ENDIF                                                  IF COST THRU SYSTEM
      *
      *  SET UP FOR USER'S ACTION
      *
     C                   SELECT
     C     DFMODE        WHENEQ    REVISE                                       WH REVISE
     C                   SETON                                        60
     C     DFMODE        WHENEQ    CREATE                                       WH CREATE
     C                   SETON                                        61
     C     DFMODE        WHENEQ    RECOST                                       WH RECOST
     C                   SETON                                        63
     C                   ENDSL
      *
      *  SET VARIOUS PROTECT INDICATORS
      *
     C     DFPICK        IFEQ      YES                                          IF PICKUPS
     C                   SETON                                        64
     C                   ELSE
     C                   SETOFF                                       64
     C                   ENDIF                                                  IF PICKUPS
      *
     C     POSTED        IFEQ      YES                                          IF POSTED
     C     CLOSED        OREQ      YES
     C                   SETON                                        65
     C                   ELSE
     C                   SETOFF                                       65
     C                   ENDIF                                                  IF POSTED
      *
     C     NOF11         IFEQ      YES                                          IF NO F11
     C                   SETON                                        67
     C                   ELSE
     C                   SETOFF                                       67
     C                   ENDIF                                                  IF NO F11
     C                   ENDIF                                                  IF NOT FOUND
      *
      * If the Ticket has a Costed Date, display the Costed Date/Time/User.
      *
     C                   if        c1comdy <> 0
     C                   seton                                        88
     C                   else
     C                   setoff                                       88
     C                   endif
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * SET OFF THE INDICATORS ON THE SUBFILE RECORD
      *----------------------------------------------------------------
      *
     C     $SETOF        BEGSR
      *
     C                   SETOFF                                       313233
     C                   SETOFF                                       3435
     C                   SETOFF                                       404147
     C                   SETOFF                                       48
     C                   SETOFF                                       515253
     C                   SETOFF                                       5758
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * DELETE THE FEED TICKET HEADER RECORD
      *----------------------------------------------------------------
      *
     C     $DLTFH        BEGSR
      *
     C     key03         CHAIN     HSP037                             95
     C     *IN95         IFEQ      *OFF                                         IF FOUND
     C                   DELETE    FHREC
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * DELETE THE FEED DETAIL RECORDS
      *----------------------------------------------------------------
      *
     C     $DLTFD        BEGSR
      *
     C     key03         SETLL     HSP038
     C                   SETOFF                                       93
     C     *IN93         DOUEQ     *ON                                          DO DETAIL
     C     key03         READE     HSP038                                 93
     C     *IN93         IFEQ      *OFF                                         IF FOUND
     C                   DELETE    FDREC
     C                   ENDIF                                                  IF FOUND
     C                   ENDDO                                                  DO DETAIL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * RECOST FEED TICKET HEADER AND ASSOCIATED PICKUPS
      *----------------------------------------------------------------
      *
     C     $RECTK        BEGSR
      *
      * CHANGE THE STATUS OF THE FEED TICKET HEADER RECORD
      *
     C     key03         CHAIN     HSP037                             95
     C     *IN95         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     'RC'          FHTSCD
     C                   UPDATE    FHREC
     C                   ENDIF                                                  IF FOUND
      *
      * FIND ALL ASSOCIATED PICKUP TICKET HEADER RECORDS THAT HAVE
      * A STATUS OF 'CO=COSTED' AND CHANGE THE STATUS TO 'RC=RECOST'.
      *
     C                   EXSR      $TSCD
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * REVISE A FEED TICKET HEADER AND ASSOCIATED PICKUPS
      *----------------------------------------------------------------
      *
     C     $REVTK        BEGSR
      *
      * DELETE EXISTING FEED HEADER AND FEED DETAIL RECORDS
      *
     C                   EXSR      $DLTFH
     C                   EXSR      $DLTFD
      *
      * CREATE NEW FEED HEADER AND FEED DETAIL RECORDS
      *
     C                   EXSR      $CRTFH
     C                   EXSR      $CRTFD
      *
      * WHEN REVISING A DELIVERY TICKET THAT HAS PICKUP TICKETS,
      * YOU MAY NEED TO REVISE THE ASSOCIATED PICKUP TICKETS.
      *
     C                   if        pickup = yes                                 If pickups
      *
      * IF THE USER HAS CHANGED THE TICKET DATE OF A DELIVERY TICKET,
      * YOU MUST FIND ALL ASSOCIATED PICKUPS THAT REFERENCE THIS
      * DELIVERY TICKET AND CHANGE THEIR 'REFERENCE TICKET DATE'
      *
     C     C1TKDT        IFNE      WKTKDT
     C                   EXSR      $RTDT
     C                   ENDIF
      *
      * IF DOLLARS ARE KEYED ON THE DELIVERY TICKET (IE: IT IS
      * NOT COSTED THROUGH THE SYSTEM), THEN SET THE STATUS OF
      * ASSOCIATED PICKUP TICKETS TO RECOST.
      *
     C     C1CSFL        IFEQ      NO
     C                   EXSR      $TSCD
     C                   ENDIF
     C                   endif                                                  If pickups
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * CREATE NEW FEED TICKET HEADER AND DETAIL RECORDS
      *----------------------------------------------------------------
      *
     C     $CRTTK        BEGSR
      *
      * CREATE THE FEED TICKET HEADER RECORD
      * CREATE ALL DETAIL RECORDS FOR THIS FEED TICKET
      *
     C                   EXSR      $CRTFH
     C                   EXSR      $CRTFD
      *
      * ISSUE THE MESSAGE THAT THE TICKET WAS CREATED
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00317'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEL     C1TKNO        XXTKNO
     C                   MOVEA     XXTKNO        MGW(1)
     C                   MOVEA     'D'           MGW(10)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * CREATE A FEED TICKET HEADER RECORD
      *----------------------------------------------------------------
      *
     C     $CRTFH        BEGSR
      *
     C                   MOVEL     C1FMBO        FHFMBO
     C                   Z-ADD     C1TKNO        FHTKNO
      *
     C                   MOVEL     FSRGCD        FHRGCD
     C                   Z-ADD     FSFSCD        FHFSCD
      *
     C                   Z-ADD     WKTKDT        FHTKDT
      *
     C                   MOVEL     'D'           FHTRCD
     C                   move      *blank        fhputycd
     C                   Z-ADD     0             FHCODT
     C                   z-add     0             fhcotm
     C                   move      *blank        fhcousr
     C                   Z-ADD     0             FHPODT
     C                   Z-ADD     0             FHEPDT
      *
      * Set up Feed Ticket Header fields
      *
     C                   MOVEL     C1PRFL        FHPRFL
     C                   MOVEL     C1CSFL        FHCSFL
     C                   MOVEL     C1VINO        FHVINO
     C                   Z-ADD     C1TKNO        FHRTNO
     C                   Z-ADD     WKTKDT        FHRTDT
      *
      * FOR DELIVERY TICKETS WHERE THE USER HAS ENTERED
      * DOLLARS (IE: COSTED THROUGH SYSTEM IS 'NO')
      *    THE STATUS IS ALWAYS 'CO=COSTED'
      *    THE 'COSTED DATE' IS THE SYSTEM DATE
      *
     C     C1CSFL        IFEQ      NO                                           IF DOLLARS KEYED
     C                   MOVEL     'CO'          FHTSCD
     C                   Z-ADD     WKUDAT        FHCODT
     C                   time                    fhcotm
     C                   move      sdusr         fhcousr
     C                   ELSE
      *
      * DELIVERY TICKETS THAT ARE TO BE COSTED THROUGH
      * THE SYSTEM.
      *
     C     C1TSCD        IFEQ      *BLANK                                       IF CREATE
     C                   MOVEL     'EN'          FHTSCD
     C                   ELSE
     C                   MOVEL     'RC'          FHTSCD
     C                   ENDIF                                                  IF CREATE
     C                   ENDIF                                                  IF DOLLARS KEYED
      *
     C                   WRITE     FHREC
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * CREATE FEED TICKET DETAIL LINES
      *----------------------------------------------------------------
      *
     C     $CRTFD        BEGSR
      *
     C                   Z-ADD     0             WKLNNO
      *
      * FIRST, SETUP THE VALUES FOR FIELDS THAT WON'T CHANGE PER LINE
      *
     C                   MOVEL     'D'           FDTRCD
     C                   MOVEL     C1FMBO        FDFMBO
     C                   Z-ADD     C1TKNO        FDTKNO
     C                   Z-ADD     C1TKNO        FDRTNO
     C                   Z-ADD     WKTKDT        FDTKDT
     C                   Z-ADD     WKTKDT        FDRTDT
      *
     C                   MOVEL     FSRGCD        FDRGCD
     C                   Z-ADD     FSFSCD        FDFSCD
      *
     C                   Z-ADD     0             FDALDT
     C                   Z-ADD     0             FDRCDT
     C                   Z-ADD     0             FDMCDT
     C                   Z-ADD     0             FDDLAM
      *
      *---------------------------------------------------------------
      * READ/PROCESS ALL THE CHANGED SUBFILE RECORDS
      *---------------------------------------------------------------
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO READ C
     C                   READC     HP120S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
     C     DFBNCD        ANDNE     *BLANK
      *
     C                   MOVEL     DFBNCD        FDBNCD
     C                   MOVEL     DFRNCD        FDRNCD
     C                   MOVEL     DFADCD        FDADCD
     C                   MOVEL     DFFTCD        FDFTCD
     C                   Z-ADD     DFFDLB        FDFDLB
     C                   Z-ADD     DFINAM        FDINAM
     C                   Z-ADD     DFMDAM        FDMDAM
     C                   Z-ADD     DFMFAM        FDMFAM
     C                   Z-ADD     HDHGSN        FDHGSN
      *
      * IF THE BIN ENTERED WAS DIRECT, SET THE ALLOCATED FLAG TO 'D'
      * IF THE BIN WAS SHARED, THE ALLOCATED FLAG WILL BE 'T' WHICH
      *    MEANS 'TO BE ALLOCATED'
      *
     C     HDDIR         IFEQ      YES
     C                   MOVEL     'D'           FDALFL
     C                   MOVEL     HDBLCD        FDBLCD
     C                   MOVEL     HDRMCD        FDRMCD
     C                   ELSE
     C                   MOVEL     'T'           FDALFL
     C                   MOVE      *BLANK        FDBLCD
     C                   MOVE      *BLANK        FDRMCD
     C                   ENDIF
      *
     C                   ADD       1             WKLNNO
     C                   Z-ADD     WKLNNO        FDLNNO
     C                   WRITE     FDREC
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO READ C
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * CHANGE THE REFERENCE TICKET DATE ON PICKUP TICKETS
      *----------------------------------------------------------------
      *
      * IF THE USER HAS CHANGED THE DATE OF A DELIVERY TICKET, YOU
      * MUST FIND ALL PICKUP TICKETS THAT REFERENCE THE DELIVERY TICKET
      * AND CHANGE THE REFERENCE TICKET DATE ON THE PICKUP HEADER AND
      * DETAIL RECORDS.
      *
     C     $RTDT         BEGSR
      *
     C                   MOVEL     'P'           WKTRCD
     C     key07         SETLL     HSL037A
     C     *IN95         DOUEQ     *ON                                          DO HEADER
     C     key07         READE     HSL037A                                95
     C     *IN95         IFEQ      *OFF                                         IF PICKUPS
     C                   Z-ADD     WKTKDT        FHRTDT
      *
      * IF THE FEED DELIVERY TICKET HAS A VALUE OF YES FOR
      * 'COST THRU SYSTEM' AND THIS PICKUP TICKET IS NOT
      * ALREADY POSTED, CHANGE THE STATUS TO RECOST.
      *
     C     C1CSFL        IFEQ      YES                                          IF COST THRU SYS
     C     FHTSCD        CHAIN     HSP015                             92
     C     *IN92         IFEQ      *OFF                                         IF POSTED
     C     TSPOFL        ANDEQ     YES
     C                   ELSE
     C                   MOVEL     'RC'          FHTSCD
     C                   ENDIF                                                  IF POSTED
     C                   ENDIF                                                  IF COST THRU SYS
      *
     C                   UPDATE    FHRECA
      *
      * NOW, GO UPDATE THE 'REFERENCE TICKET DATE' FOR ALL THE
      * DETAIL RECORDS FOR THIS PICKUP TICKET IN THE FEED DETAIL FILE
      *
     C                   SETOFF                                       95
     C     key09         SETLL     HSP038
     C     *IN95         DOUEQ     *ON                                          DO DETAIL
     C     key09         READE     HSP038                                 95
     C     *IN95         IFEQ      *OFF                                         IF NOT EOF
     C                   Z-ADD     WKTKDT        FDRTDT
     C                   UPDATE    FDREC
     C                   ENDIF                                                  IF NOT EOF
     C                   ENDDO                                                  DO DETAIL
     C                   ENDIF                                                  IF PICKUPS
     C                   ENDDO                                                  DO HEADER
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      *  UPDATE PICKUP TICKET STATUS
      *----------------------------------------------------------------
      *
      * FIND ALL ASSOCIATED PICKUP TICKET HEADER RECORDS THAT HAVE
      * A STATUS OF 'CO=COSTED' AND CHANGE THE STATUS TO 'RC=RECOST'.
      *
     C     $TSCD         BEGSR
      *
     C                   MOVEL     'P'           WKTRCD
     C     key07         SETLL     HSL037A
     C     *IN95         DOUEQ     *ON                                          DO HEADER
     C     key07         READE     HSL037A                                95
     C     *IN95         IFEQ      *OFF                                         IF PICKUPS
     C     FHTSCD        ANDEQ     'CO'
     C                   MOVEL     'RC'          FHTSCD
     C                   UPDATE    FHRECA
     C                   ENDIF                                                  IF PICKUPS
     C                   ENDDO                                                  DO HEADER
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * F4 PROMPT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
      * SET OFF ALL INDICATORS IN SUBFILE RECORDS.
      *
     C                   EXSR      $OFFSF
      *
     C                   SELECT
      * FARM SITE
      *
     C     FLD           WHENEQ    'C1FSCD'
     C     *IN60         ANDEQ     *OFF
     C     *IN63         ANDEQ     *OFF
     C                   MOVEL     C1FMBO        XXFMBO
     C                   Z-ADD     0             WKFSCD
     C                   MOVE      *BLANK        XXFSNM
     C                   CALL      'HP528'
     C                   PARM                    XXFMBO
     C                   PARM                    WKFSCD
     C                   PARM                    XXFSNM
     C                   SETON                                        56
     C     WKFSCD        IFNE      0                                            IF SELECTED
     C                   Z-ADD     WKFSCD        C1FSCD
     C                   MOVEL     XXFSNM        C1FSNM
      *
     C                   if        c1fmbo = *blank
     C                   movel     xxfmbo        c1fmbo
     C                   endif
      *
     C                   ENDIF                                                  IF SELECTED
      *
      * BUSINESS OFFICE
      *
     C     FLD           WHENEQ    'C1FMBO'
     C                   MOVE      *BLANK        XXFMBO
     C                   MOVE      *BLANK        XXFMDS
     C                   CALL      'HP503'
     C                   PARM                    XXFMBO
     C                   PARM                    XXFMDS
     C                   PARM      'FEED '       XXDVCD
     C                   SETON                                        50
     C     XXFMBO        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXFMBO        C1FMBO
     C                   MOVEL     XXFMDS        C1FMDS
     C                   ENDIF                                                  IF SELECTED
      *
      * PRODUCED FEED FLAG
      *
     C     FLD           WHENEQ    'C1PRFL'
     C     *IN60         ANDEQ     *OFF
     C     *IN63         ANDEQ     *OFF
     C                   MOVE      *BLANK        XXPRFL
     C                   CALL      'HP522'
     C                   PARM                    XXPRFL
     C                   SETON                                        59
     C     XXPRFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXPRFL        C1PRFL
     C                   ENDIF                                                  IF SELECTED
      *
      *
      * IF 'COST THRU SYSTEM FLAG'
      *
     C     FLD           WHENEQ    'C1CSFL'
     C     *IN60         ANDEQ     *OFF
     C     *IN63         ANDEQ     *OFF
     C                   MOVE      *BLANK        XXCSFL
     C                   CALL      'HP522'
     C                   PARM                    XXCSFL
     C                   SETON                                        55
     C     XXCSFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXCSFL        C1CSFL
     C                   ENDIF                                                  IF SELECTED
      *
      *
      *----------------------------------------------------------------
      * PROMPTED FIELDS IN THE SUBFILE
      *----------------------------------------------------------------
      *
      * IF BIN
      *
     C     FLD           WHENEQ    'DFBNCD'
     C                   MOVE      *BLANK        XXBNCD
     C                   MOVE      *BLANK        XXBICD
     C                   CALL      'HP532'
     C                   PARM                    C1FSCD
     C                   PARM                    XXBNCD
     C                   PARM                    XXBICD
     C                   EXSR      $RRN1
      *
     C     *IN78         IFEQ      *OFF                                         IF CHAIN OK
     C     XXBNCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXBNCD        DFBNCD
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8551
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
     C                   SETOFF                                       8551
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     COUNT         HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF                                                  IF CHAIN OK
      *
      *----------------------------------------------------------------
      * IF HOG GROUP, THEN YOU HAVE TO CHAIN TO THE SUBFILE RECORD TO
      * GET THE BIN TO USE AS AN INPUT PARM. AND, F4 IS ONLY ALLOWED
      * FOR DIRECT BINS--SO, RUN YOUR BIN EDITS BEFORE CALLING THE
      * SELECT WINDOW.
      *
     C     FLD           WHENEQ    'DFHGCD'
     C                   MOVE      *BLANK        XXHGCD
     C                   EXSR      $RRN1
     C     *IN78         IFEQ      *OFF                                         IF CHAIN OK
     C                   EXSR      $BNCD
     C                   ENDIF
     C     HDDIR         IFEQ      NO                                           IF SHARED
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00328'     MGID(E)
     C                   ENDIF
     C                   ELSE
     C                   CALL      'HP533'
     C                   PARM                    C1FSCD
     C                   PARM                    DFBNCD
     C                   PARM                    XXHGCD
     C                   EXSR      $RRN1
     C                   ENDIF                                                  IF SHARED
      *
     C     *IN78         IFEQ      *OFF                                         IF CHAIN OK
     C     XXHGCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXHGCD        DFHGCD
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8552
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
     C                   SETOFF                                       855232
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     COUNT         HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF                                                  IF CHAIN OK
      *
      *----------------------------------------------------------------
      * IF RATION CODE
      *
     C     FLD           WHENEQ    'DFRNCD'
     C                   MOVE      *BLANK        XXRNCD
     C                   MOVE      *BLANK        XXRNDS
     C                   CALL      'HP581'
     C                   PARM                    XXRNCD
     C                   PARM                    XXRNDS
     C                   EXSR      $RRN1
      *
     C     *IN78         IFEQ      *OFF                                         IF CHAIN OK
     C     XXRNCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXRNCD        DFRNCD
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8553
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
     C                   SETOFF                                       8553
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     COUNT         HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF                                                  IF CHAIN OK
      *
      *----------------------------------------------------------------
      * IF ADDITIVE CODE
      *
     C     FLD           WHENEQ    'DFADCD'
     C                   MOVEL     DFRNCD        XXRNCD
     C                   MOVE      *BLANK        XXADCD
     C                   MOVE      *BLANK        XXADDS
     C                   CALL      'HP520'
     C                   PARM                    XXRNCD
     C                   PARM                    XXADCD
     C                   PARM                    XXADDS
     C                   EXSR      $RRN1
      *
     C     *IN78         IFEQ      *OFF                                         IF CHAIN OK
     C     XXADCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXRNCD        DFRNCD
     C                   MOVEL     XXADCD        DFADCD
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8557
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
     C                   SETOFF                                       8557
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     COUNT         HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF                                                  IF CHAIN OK
      *
      *----------------------------------------------------------------
      * IF FEED MANUFACTURING TYPE CODE
      *
     C     FLD           WHENEQ    'DFFTCD'
     C                   MOVEL     *BLANK        XXFTCD
     C                   MOVE      *BLANK        XXFTDS
     C                   CALL      'HP518'
     C                   PARM                    XXFTCD
     C                   PARM                    XXFTDS
     C                   EXSR      $RRN1
      *
     C     *IN78         IFEQ      *OFF                                         IF CHAIN OK
     C     XXFTCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXFTCD        DFFTCD
     C                   ENDIF                                                  IF SELECTED
     C                   SETON                                        8558
     C                   EXSR      $IND
     C                   UPDATE    HP120S1
     C                   SETOFF                                       8558
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     COUNT         HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   ENDIF                                                  IF CHAIN OK
      *
      *----------------------------------------------------------------
     C                   OTHER
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG                                       IF FIRST ERR
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C     ERROR         IFEQ      1
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   ENDIF
     C                   ENDIF                                                  IF FIRST ERR
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *-----------------------------------------------------------------
      * SET THE SUBFILE TO REDISPLAY AT THE FIRST SCREEN THAT HAS ERRORS
      *-----------------------------------------------------------------
      *
     C     $ERR1         BEGSR
      *
     C     ERROR         IFEQ      1
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * WRITE ERROR MESSAGES
      *----------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANKS       MGI
     C                   PARM      *BLANKS       MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * ROUTINE TO FIND/RETRIEVE THE SUBFILE RECORD TO UPDATE
      *          WHEN RETURNING FROM A SELECT PROGRAM ON SCREEN 1
      *----------------------------------------------------------------
      *
      * HDRR1 IS THE HIDDEN FIELD ASSOCIATED WITH THE KEYWORD SFLCSRRRN
      * ON THE CONTROL RECORD IN THE DSPF.
      * HDRRN1 IS THE VALUE ASSOCIATED WITH THE KEYWORD 'KSFILE' IN
      * THE F-SPECS FOR THE WORKSTATION.
      *
     C     $RRN1         BEGSR
      *
     C                   SETOFF                                       78
      *
     C     HDRR1         IFNE      0
     C                   Z-ADD     HDRR1         HDRRN1
     C     HDRRN1        CHAIN     HP120S1                            78
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * RETRIEVE THE USER-ASSIGNED ALPHA HOG GROUP CODE
      *----------------------------------------------------------------
      *
      * USING THE SYSTEM-ASSIGNED HOG GROUP CODE FROM THE FEED DETAIL
      * RECORD, RETRIEVE THE ALPHA HOG GROUP CODE FROM THE HOG GROUP
      * MASTER FILE.  DISPLAY THE ALPHA CODE ON THE SCREEN.
      *
     C     $GRPCD        BEGSR
      *
     C     HDHGSN        CHAIN     HSL034D                            94
     C     *IN94         IFEQ      *OFF
     C                   MOVEL     HGHGCD        DFHGCD
     C                   MOVEL     HGPPCD        HDPPCD
     C                   MOVEL     HGBLCD        HDBLCD
     C                   MOVEL     HGRMCD        HDRMCD
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------------------------------------
      * Build the Ration/Additive/Pounds array for the subfile data.
      *---------------------------------------------------------------------------------------------
      *
     C     $arrayout     begsr
      *
     C                   eval      wkra = dfrncd + ' ' + dfadcd
      *
     C                   eval      w = 1
     C     wkra          lookup    aroutra(w)                             92
     C                   if        *in92 = *on                                  If hit
     C                   add       dffdlb        aroutlb(w)
     C                   else
     C                   add       1             z
     C                   move      wkra          aroutra(z)
     C                   z-add     dffdlb        aroutlb(z)
     C                   endif                                                  If hit
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------------
      * Compare the user's Ration/Additive/Pounds with Ration/Additive/Pounds that came in
      *---------------------------------------------------------------------------------------------
      *
      * We have to make 2 edits here:
      *  1) Each Ration/Additive combination that was on the original ticket is in the subfile
      *  2) The total Pounds for each Ration/Additive combination have not changed
      *
     C     $match        begsr
      *
      * Process each element in the "incoming" array
      *
     C                   do        y             x                              Do incoming array
      *
      * Does this Ration/Additive exist in our "outgoing" array?
      *
     C                   z-add     1             w
     C     arinra(x)     lookup    aroutra(w)                             92
      *
     C                   select
      *
      * The user has omitted a Ration/Additive that was on the original ticket
      *
     C                   when      *in92 = *off
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00514'     mgid(e)
     C                   clear                   mgw
     C                   movea     arinra(x)     mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
      *
      * The Pounds of this Ration/Additive do not equal the Pounds on the original ticket.
      *
     C                   when      arinlb(x) <> aroutlb(w)
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00519'     mgid(e)
     C                   clear                   mgw
     C                   movea     arinra(x)     mgw(1)
     C                   move      arinlb(x)     wkalphlb
     C                   movea     wkalphlb      mgw(12)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endsl
     C                   enddo                                                  Do incoming array
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------------
      * When Revising a Ticket that was originally UPLOADED....not manual, retrieve/save Rations/Lbs
      *---------------------------------------------------------------------------------------------
      *
     C     $arrayin      begsr
      *
     C                   move      yes           uploaded
     C     key03         setll     hsp038
      *
     C                   dou       *in92 = *on                                  Do load loop
     C     key03         reade     hsp038                                 92
     C                   if        *in92 = *off                                 If not EOF
      *
      * Check if this Ration/Additive is in our array.
      *
     C                   eval      wkra = fdrncd + ' ' + fdadcd
      *
     C                   eval      x = 1
     C     wkra          lookup    arinra(x)                              92
     C                   if        *in92 = *on                                  If hit
     C                   add       fdfdlb        arinlb(x)
     C                   else
     C                   add       1             y
     C                   move      wkra          arinra(y)
     C                   z-add     fdfdlb        arinlb(y)
     C                   endif                                                  If hit
      *
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do load loop
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
     C     *ENTRY        PLIST
     C                   PARM                    MODE
     C     C1FMBO        PARM                    IPFMBO
     C     C1FSCD        PARM                    IPFSCD
     C     WKRTDT        PARM                    IPRTDT
     C     C1TKNO        PARM                    IPTKNO
     C     C1TKDT        PARM                    IPTKDT
     C     C1MDY         PARM                    IPMDY
     C     C1TSCD        PARM                    IPTSCD
     C     C1PRFL        PARM                    IPPRFL
     C     C1CSFL        PARM                    IPCSFL
     C     C1VINO        PARM                    IPVINO
     C                   PARM                    IPDVCD
     C                   PARM                    RTNCD
      *
      * Key list
      *
     C     key01         klist
     C                   kfld                    bnfscd
     C                   kfld                    bnbicd
      *
     C     key02         KLIST
     C                   KFLD                    DFRNCD
     C                   KFLD                    DFADCD
      *
     C     key03         KLIST
     C                   KFLD                    C1FMBO
     C                   KFLD                    C1TKNO
     C                   KFLD                    WKTYPE
      *
     C     key04         KLIST
     C                   KFLD                    C1FSCD
     C                   KFLD                    DFBNCD
      *
     C     key05         KLIST
     C                   KFLD                    C1FMBO
     C                   KFLD                    C1TKNO
     C                   KFLD                    FDTRCD
     C                   KFLD                    FDLNNO
      *
     C     key06         KLIST
     C                   KFLD                    C1FSCD
     C                   KFLD                    DFHGCD
      *
     C     key07         KLIST
     C                   KFLD                    C1FMBO
     C                   KFLD                    C1TKNO
     C                   KFLD                    WKTRCD
      *
     C     key08         KLIST
     C                   KFLD                    C1FMBO
     C                   KFLD                    C1FSCD
     C                   KFLD                    DFBNCD
     C                   KFLD                    DFRNCD
     C                   KFLD                    DFADCD
     C                   KFLD                    C1TKNO
      *
     C     key09         KLIST
     C                   KFLD                    FHFMBO
     C                   KFLD                    FHTKNO
     C                   KFLD                    FHTRCD
      *
      *
      *  DEFINE INCOMING PARM FIELDS
      *
     C     *LIKE         DEFINE    C1FMBO        IPFMBO
     C     *LIKE         DEFINE    C1FSCD        IPFSCD
     C     *LIKE         DEFINE    WKRTDT        IPRTDT
     C     *LIKE         DEFINE    C1TKNO        IPTKNO
     C     *LIKE         DEFINE    C1TKDT        IPTKDT
     C     *LIKE         DEFINE    C1MDY         IPMDY
     C     *LIKE         DEFINE    C1TSCD        IPTSCD
     C     *LIKE         DEFINE    C1PRFL        IPPRFL
     C     *LIKE         DEFINE    C1CSFL        IPCSFL
     C     *LIKE         DEFINE    C1VINO        IPVINO
     C     *LIKE         DEFINE    BODVCD        IPDVCD
      *
     C                   Z-ADD     IPMDY         SVMDY
      *
      * GLOBAL DEFINES
      *
     C                   MOVEL     *BLANK        PGM              10            USED IN MSG
     C                   MOVEL     *BLANK        MSGFL            10            USED IN MSG
     C                   MOVEL     *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            ERRFLG            1
     C                   MOVEL     NO            NOTFLG            1
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    DFMODE        MODE                           SFL POSITION
     C     *LIKE         DEFINE    IDFLOW        WKFLOW                         SFL POSITION
      *
      * ALPHA FIELDS FOR USE AS PARMS
      *
     C                   MOVE      *BLANK        XXSHARED          1
     C                   MOVE      *BLANK        XXTKNO            9
     C     *LIKE         DEFINE    DFBNCD        XXBNCD
     C     *LIKE         DEFINE    DFHGCD        XXHGCD
     C     *LIKE         DEFINE    RNRNCD        XXRNCD
     C     *LIKE         DEFINE    RNRNDS        XXRNDS
     C     *LIKE         DEFINE    RAADCD        XXADCD
     C     *LIKE         DEFINE    RAADDS        XXADDS
     C     *LIKE         DEFINE    FTFTCD        XXFTCD
     C     *LIKE         DEFINE    FTFTDS        XXFTDS
     C     *LIKE         DEFINE    BOBOBO        XXFMBO
     C     *LIKE         DEFINE    BOBODS        XXFMDS
     C     *LIKE         DEFINE    BODVCD        XXDVCD
     C                   MOVE      *BLANK        XXFSCD            5
     C     *LIKE         DEFINE    C1FSNM        XXFSNM
     C     *LIKE         DEFINE    C1PRFL        XXPRFL
     C     *LIKE         DEFINE    C1CSFL        XXCSFL
     C     *LIKE         DEFINE    BNBICD        XXBICD
      *
      * CONTROL FIELDS, FLAGS, COUNTERS, WORK FIELDS, SAVE FIELDS
      *
     C                   MOVEL     YES           FIRSTR            1            FIRST ROLL
     C                   MOVEL     YES           FIRST             1            FIRST TIME
     C                   MOVEL     NO            WKEDIT            1
     C                   MOVEL     NO            EDITFL            1
     C                   MOVEL     NO            WRITFL            1
     C                   MOVEL     NO            directfl          1
     C                   MOVEL     YES           BINFL             1
     C     *LIKE         DEFINE    C1MDY         SVMDY
     C     *LIKE         DEFINE    FDLNNO        SVLNNO
      *
     C     *LIKE         DEFINE    FHTRCD        WKTRCD
     C     *LIKE         DEFINE    FHTKDT        WKTKDT
     C     *LIKE         DEFINE    FHTKDT        WKUDAT
     C     *LIKE         DEFINE    FDLNNO        WKLNNO
     C     *LIKE         DEFINE    FHRTDT        WKRTDT
     C     *LIKE         DEFINE    C1FSCD        WKFSCD
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     07            WKPLIN            2 0          SFLPAG(0007)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
     C                   Z-ADD     0             COUNT             2 0
     C                   Z-ADD     0             WARMSG            2 0
     C     *LIKE         DEFINE    COUNT         WKDIFF
     C     *LIKE         DEFINE    COUNT         WKRMDR
     C     *LIKE         DEFINE    COUNT         WKFLD
      *
      * THIS PROGRAM DIFFERS FROM THE SHELL PROGRAMS IN THAT F5=REFRESH
      * ALWAYS PLACES THE USER AT THE FIRST PAGE OF THE SUBFILE
      *
     C                   Z-ADD     WKPLIN        MAXRRN
      *
     C                   MOVEL     NO            NOF11             1
     C                   MOVEL     NO            PICKUP            1
     C                   MOVEL     NO            POSTED            1
     C                   MOVEL     NO            CLOSED            1
     C                   MOVEL     NO            UPLOADED          1
      *
      *
      * THE USER CAN COME INTO THIS PROGRAM SEVERAL DIFFERENT WAYS.
      * CHECK THE ENTRY MODE AND SET THE APPROPRIATE INDICATORS TO
      * CONTROL THE SCREEN DISPLAY.
      *
     C                   SELECT
     C     MODE          WHENEQ    CREATE
     C                   MOVEL     CREATE        DFMODE
     C                   SETON                                        61
      *
     C     MODE          WHENEQ    REVISE
     C                   MOVEL     REVISE        DFMODE
     C                   SETON                                        60
      *
     C     MODE          WHENEQ    RECOST
     C                   MOVEL     RECOST        DFMODE
     C                   SETON                                        63
     C                   ENDSL
      *
      * IF THE USER IS CREATING A NEW FEED TICKET
      *    1) RETRIEVE SYSTEM DATE TO DISPLAY ON THE SCREEN
      *    2) DEFAULT A 'YES' TO PRODUCED FLAG
      *
     C     MODE          IFEQ      CREATE                                       IF CREATE
     C                   Z-ADD     UDATE         C1MDY
     C                   Z-ADD     UDATE         SVMDY
     C                   MOVEL     YES           C1PRFL
     C                   ELSE
      *
      * IF THE USER IS NOT CREATING A NEW FEED TICKET:
      *    1) USING THE TICKET STATUS PASSED IN, DETERMINE IF THIS
      *       TICKET HAS A 'POSTED' STATUS. IF POSTED, ALL DISPLAY
      *       FIELDS WILL BE PROTECTED.
      *    2) IF A DELIVERY TICKET IS TO BE COSTED THROUGH THE SYSTEM,
      *       SET ON INDICATOR 66 TO PROTECT THE AMOUNT FIELDS
      *    3) CHECK IF THIS FEED TICKET HAS ANY PICKUPS OR
      *       ADJUSTMENTS AGAINST IT. IF SO, F11-DELETE IS NOT ALLOWED
      *    4) IF THE TICKET HAS ANY CLOSED GROUPS, PROTECT ALL FIELDS
      *       AND DO NOT ALLOW DELETE
      *    5) RETRIEVE NAME OF FARM SITE FOR DISPLAY
      *    6) RETRIEVE FEED MILL BUSINESS OFFICE DESCRIPTION FOR DISPLAY
      *
      * CHECK POSTED STATUS
      *
     C     C1TSCD        CHAIN     HSP015                             92
     C     *IN92         IFEQ      *ON                                          IF POSTED
     C     TSPOFL        OREQ      YES
     C                   MOVEL     YES           POSTED
     C                   SETON                                        65
     C                   ENDIF                                                  IF POSTED
      *
      * CHECK FOR ADJUSTMENTS
      *
     C                   MOVEL     'A'           WKTRCD
     C     key07         SETLL     HSL037A                                95
     C     *IN95         IFEQ      *ON                                          IF ADJUST
     C                   MOVEL     YES           NOF11
     C                   SETON                                        67
     C                   ENDIF                                                  IF ADJUST
      *
      * CHECK FOR PICKUPS
      *
     C                   MOVEL     'P'           WKTRCD
     C     key07         SETLL     HSL037A                                95
     C     *IN95         IFEQ      *ON                                          IF PICKUPS
     C                   MOVEL     YES           NOF11
     C                   MOVEL     YES           PICKUP
     C                   SETON                                        67
     C                   ENDIF                                                  IF PICKUPS
      *
      * When Revising, determine if the Ticket was originally Uploaded
      * instead of being manually entered. If it was uploaded, fill an
      * array with the incoming Rations/Additives/Pounds.
      *
     C                   if        mode = revise                                If revise
     C     key03         chain(n)  hsp037                             92
     C                   if        *in92 = *off and fhuldt <> 0                 If uploaded
     C                   exsr      $arrayin
     C                   endif                                                  If uploaded
     C                   endif                                                  If revise
      *
      * DETERMINE IF THE TICKET IS TO BE COSTED THROUGH THE SYSTEM OR NOT.
      *
     C     C1CSFL        IFEQ      YES
     C                   SETON                                        66
     C                   ENDIF
      *
      *  A FEED TICKET CANNOT BE REVISED OR DELETED IF ANY
      *  FEED DETAIL RECORDS ARE ASSOCIATED WITH CLOSED GROUPS
      *
     C     key03         CHAIN     HSJ038O                            70
     C     *IN70         IFEQ      *OFF
     C                   MOVEL     YES           CLOSED
     C                   SETON                                        65
     C                   ENDIF
      *
      * RETRIEVE THE FARM SITE DESCRIPTION AND PRODUCTION PHASE
      *
     C     C1FSCD        CHAIN     HSP018                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     FSFSNM        C1FSNM
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     C1FSNM
     C                   ENDIF
      *
     C     C1FMBO        CHAIN     HSP009                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     BOBODS        C1FMDS
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     C1FMDS
     C                   ENDIF
     C                   ENDIF                                                  IF CREATE
      *
      * THE SYSTEM DATE IS REQUIRED IN CCYYMMDD FORMAT FOR
      * EDITING AND UPDATING; SO, FLIP THE DATE.
      *
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkudat
      *
      * BRING IN THE DATA AREAS
      *
     C     *DTAARA       DEFINE                  DAAPER
     C     *DTAARA       DEFINE                  DAFDSN
     C                   IN        *DTAARA
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
