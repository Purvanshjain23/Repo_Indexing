// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBY2XFR
// ?Date: 14.08.2025 Time: 03:49:50
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV Ld Frt Chrg Delete RT) TYPE(RTVOBJ) FILE(POBCCPP)          AC2130039;
PARAMETER(PAR.TMS_Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Load Freight Chrg DL) TYPE(DLTOBJ) FILE(POBCCPP)           AC1626762;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.LFC_Sequence_Number);
}


EXECUTE FUNCTION(Rtv Del LFC Cmt       RT) TYPE(RTVOBJ) FILE(PMEYCPP)           AC2130040;
PARAMETER(PAR.TMS_Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del LdFrtChrg Comment DL) TYPE(DLTOBJ) FILE(PMEYCPP)           AC1909061;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.LFC_Sequence_Number);
 PARAMETER(DB1.LFCC_Sequence_Number);
}


EXECUTE FUNCTION(Rtv Del LFC Ref       RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC2130041;
PARAMETER(PAR.TMS_Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del LD Frt Chrg Ref   DL) TYPE(DLTOBJ) FILE(PMDKCPP)           AC1869266;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.LFC_Sequence_Number);
 PARAMETER(DB1.CR_Reference_Code);
}


// LCL.LH Carrier Paid Time = PAR.TMS Extract Time * CON.100 *
LCL.LH_Carrier_Paid_Time = PAR.TMS_Extract_Time * 100;

EXECUTE FUNCTION(Rtv Load to Crt LFC    RT) TYPE(RTVOBJ) FILE(PBCYCPP)          AC2129581;
PARAMETER(PAR.TMS_Load_ID);
PARAMETER(PAR.Date_USR);
PARAMETER(LCL.LH_Carrier_Paid_Time);
{
 //?USER: Initialize routine

 // PAR.Text 3 Length USR = CON.tot
 PAR.Text_3_Length_USR = 'tot';

 // PAR.USR Uom = CON.Tot
 PAR.USR_Uom = 'Tot';

 //?USER: Process Data record

 //?R12849 DN 03/27/18-Commented Out.
 //?R12849 DN 03/27/18-Removed Check of EDI Code 'tot' & 'Tot'.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TMS Charge Desc Parse Txt = DB1.TMS Charge Description
 LCL.TMS_Charge_Desc_Parse_Txt = DB1.TMS_Charge_Description;

 //?If charge desc is 'Stop n:', then get the stop number from it.
 CASE;

 // IF LCL.TMS Charge Desc Parse Txt is *ALL values
 IF LCL.TMS_Charge_Desc_Parse_Txt = 'Stop 1:'/'Stop 2:'/'Stop 3:'/'Stop 4:'/'Stop 5:'
 /'Stop 6:'/'Stop 7:'/'Stop 8:'/'Stop 9:';

 // LCL.Text 1 Length USR = SUBSTRING(LCL.TMS Charge Desc Parse Txt,CON.6,CON.1)
 LCL.Text_1_Length_USR = SUBSTRING(LCL.TMS_Charge_Desc_Parse_Txt:6:1);

 // LCL.Stop Number = CVTVAR(LCL.Text 1 Length USR)
 LCL.Stop_Number = CVTVAR(LCL.Text_1_Length_USR);

 //?If charge desc is 'Stop n:', then get the stop number from it.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Stop Number = CON.*ZERO
 LCL.Stop_Number = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(RTV FC Code from TMS  RT) TYPE(RTVOBJ) FILE(PBC1REP)           AC2129138;
 PARAMETER(LCL.FC_Code);
 PARAMETER(DB1.TMS_EDI_Code);
 PARAMETER(PAR.TMS_Use_FC_Table_Settings);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
 PARAMETER(LCL.FC_Code);
 PARAMETER(LCL.FC_Description);
 PARAMETER(LCL.FC_Rate_Amount);
 PARAMETER(LCL.FC_Unit_of_Measure);
 PARAMETER(LCL.FC_Act_Frt_Include_Sts);
 PARAMETER(LCL.FC_Frt_Add_Deduct);
 PARAMETER(LCL.FC_Load_Type_Select);
 PARAMETER(LCL.FC_State_Select);
 PARAMETER(LCL.FC_Export_Select);
 PARAMETER(LCL.FC_Shag_Wash_Select);
 PARAMETER(LCL.FC_Auto_Calc_Sts);
 PARAMETER(LCL.FC_Charge_Category);
 PARAMETER(LCL.FC_Shag_Wash_Comp);
 PARAMETER(LCL.FC_Edit_Sequence);
 PARAMETER(LCL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(LCL.FC_Special_Type);
 PARAMETER(LCL.FC_ExpInt_FR_FZ_Select);
 PARAMETER(LCL.FC_Reference_Required);
 PARAMETER(LCL.FC_Trans_Mode_Select);
 PARAMETER(LCL.FC_Freight_Rate_Type_Sel);
 PARAMETER(LCL.FC_Company_Select);
 PARAMETER(LCL.FC_Company_Carrier_Select);
 PARAMETER(LCL.FC_Shared_Responsibility);
 PARAMETER(LCL.FC_Unused_Sts_10);
 PARAMETER(LCL.FC_Auto_Calc_Effective);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.TMS Use FC Table Settings is Yes
 IF PAR.TMS_Use_FC_Table_Settings = 'Y';

 //?use freight charge table values for these
 EXECUTE FUNCTION(Crt Load Freight Chrg IF) TYPE(EXCINTFUN)                      AC1869581;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.FC_Code);
 PARAMETER(LCL.LFC_Sequence_Number);
 PARAMETER(DB1.TMS_Charge_Amount);
 PARAMETER(LCL.FC_Act_Frt_Include_Sts);
 PARAMETER(DB1.LFC_Carrier_Code);
 PARAMETER(LCL.LFC_Create_Status);
 PARAMETER(LCL.LFC_Unused_Sts);
 PARAMETER(LCL.FC_Charge_Category);
 PARAMETER(LCL.FC_Shag_Wash_Comp);
 PARAMETER(LCL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(LCL.FC_Special_Type);
 PARAMETER(LCL.LFC_TFP_Processed);
 PARAMETER(LCL.FC_Reference_Required);
 PARAMETER(LCL.LFC_Unused_Sts_5);
 PARAMETER(LCL.LFC_TFP_Carrier_Paid_Date);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq          RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1869586;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LFC Sequence Number = CON.1
   PAR.LFC_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LFC Sequence Number = DB1.LFC Sequence Number + CON.1
   PAR.LFC_Sequence_Number = DB1.LFC_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Load Freight Chrg CR) TYPE(CRTOBJ) FILE(POBCCPP)           AC1626760;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.LFC_Amount);
  PARAMETER(PAR.LFC_Act_Frt_Include_Sts);
  PARAMETER(PAR.LFC_Carrier_Code);
  PARAMETER(PAR.LFC_Create_Status);
  PARAMETER(PAR.LFC_Unused_Sts);
  PARAMETER(PAR.LFC_Charge_Category);
  PARAMETER(PAR.LFC_Shag_Wash_Comp);
  PARAMETER(PAR.LFC_Tot_Freight_Inc_Sts);
  PARAMETER(PAR.LFC_Special_Type);
  PARAMETER(PAR.LFC_TFP_Processed);
  PARAMETER(PAR.LFC_Reference_Required);
  PARAMETER(PAR.LFC_Unused_Sts_5);
  PARAMETER(PAR.LFC_TFP_Carrier_Paid_Date);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

   //?USER: Processing after Data update

   CASE;

   // IF PAR.LFC Reference Required is Yes
   IF PAR.LFC_Reference_Required = 'Y';

   EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC1869955;
   PARAMETER(DB1.FC_Code);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.LFC_Sequence_Number);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    EXECUTE FUNCTION(Rtv Charge Info       RT) TYPE(RTVOBJ) FILE(PMDIREP)           AC1866916;
    PARAMETER(DB1.CR_Reference_Code);
    PARAMETER(NLL.CR_Reference_Desc);
    PARAMETER(LCL.CR_Value_Type);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // LCL.LFCR Numeric Value = CON.*ZERO
    LCL.LFCR_Numeric_Value = *ZERO;

    CASE;

    // IF DB1.CR Reference Code is Company
    IF DB1.CR_Reference_Code = 'COMPNY';

    EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
    PARAMETER(DB1.FC_Code);
    PARAMETER(NLL.FC_Description);
    PARAMETER(NLL.FC_Rate_Amount);
    PARAMETER(NLL.FC_Unit_of_Measure);
    PARAMETER(NLL.FC_Act_Frt_Include_Sts);
    PARAMETER(NLL.FC_Frt_Add_Deduct);
    PARAMETER(NLL.FC_Load_Type_Select);
    PARAMETER(NLL.FC_State_Select);
    PARAMETER(NLL.FC_Export_Select);
    PARAMETER(NLL.FC_Shag_Wash_Select);
    PARAMETER(NLL.FC_Auto_Calc_Sts);
    PARAMETER(NLL.FC_Charge_Category);
    PARAMETER(NLL.FC_Shag_Wash_Comp);
    PARAMETER(NLL.FC_Edit_Sequence);
    PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
    PARAMETER(NLL.FC_Special_Type);
    PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
    PARAMETER(NLL.FC_Reference_Required);
    PARAMETER(NLL.FC_Trans_Mode_Select);
    PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
    PARAMETER(NLL.FC_Company_Select);
    PARAMETER(NLL.FC_Company_Carrier_Select);
    PARAMETER(LCL.FC_Shared_Responsibility);
    PARAMETER(NLL.FC_Unused_Sts_10);
    PARAMETER(NLL.FC_Auto_Calc_Effective);
    PARAMETER(NLL.Record_Status);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.FC Unused Sts 9 is Shared
    IF LCL.FC_Shared_Responsibility = 'S';

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
    PARAMETER(PAR.Load_ID);
    PARAMETER(LCL.Company_Number);
    PARAMETER(LCL.Multi_Company_Load);
    {
     //?USER: Initialize routine

     // PAR.Multi Company Load = CND.no
     PAR.Multi_Company_Load = 'N';

     // PAR.Company Number = CON.*ZERO
     PAR.Company_Number = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF PAR.Company Number is Equal to zero
     IF PAR.Company_Number = *ZERO;

     // PAR.Company Number = DB1.Company Number
     PAR.Company_Number = DB1.Company_Number;

     ENDIF;

     CASE;

     // IF PAR.Company Number NE DB1.Company Number
     IF PAR.Company_Number <> DB1.Company_Number;

     // PAR.Multi Company Load = CND.yes
     PAR.Multi_Company_Load = 'Y';

     QUIT;

     ENDIF;

    }

    CASE;

    // IF LCL.Multi Company Load is no
    IF LCL.Multi_Company_Load = 'N';

    // LCL.LFCR Numeric Value = LCL.Company Number
    LCL.LFCR_Numeric_Value = LCL.Company_Number;

    ENDIF;

    ENDIF;

    ENDIF;

    EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869956;
    PARAMETER(PAR.Load_ID);
    PARAMETER(PAR.FC_Code);
    PARAMETER(PAR.LFC_Sequence_Number);
    PARAMETER(DB1.CR_Reference_Code);
    PARAMETER(LCL.CR_Value_Type);
    PARAMETER(LCL.LFCR_Numeric_Value);
    PARAMETER(DB1.Charge_Reference_Type);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
     PARAMETER(PAR.Load_ID);
     PARAMETER(PAR.FC_Code);
     PARAMETER(PAR.LFC_Sequence_Number);
     PARAMETER(PAR.CR_Reference_Code);
     PARAMETER(PAR.LFCR_Value_Type);
     PARAMETER(PAR.LFCR_Numeric_Value);
     PARAMETER(PAR.LFCR_Alpha_Value);
     PARAMETER(PAR.LFCR_Reference_Type);
     PARAMETER(PAR.Record_Status);
     PARAMETER(PAR.Create_Date);
     PARAMETER(PAR.Create_Time);
     PARAMETER(PAR.Create_User);
     PARAMETER(PAR.Create_Program);
     PARAMETER(PAR.Change_Date);
     PARAMETER(PAR.Change_Time);
     PARAMETER(PAR.Change_User);
     PARAMETER(PAR.Change_Program);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
      PARAMETER(DB1.Record_Status);
      PARAMETER(DB1.Create_Date);
      PARAMETER(DB1.Create_Time);
      PARAMETER(DB1.Create_User);
      PARAMETER(DB1.Create_Program);
      PARAMETER(DB1.Change_Date);
      PARAMETER(DB1.Change_Time);
      PARAMETER(DB1.Change_User);
      PARAMETER(DB1.Change_Program);
      {
       //?Execute internal function

       //?*** Set RECORD STATUS field. ***
       // PAR.Record Status = CND.Active
       PAR.Record_Status = 'A';

       //?*** Set CREATE fields. ***
       // PAR.Create Date = JOB.*Job date
       PAR.Create_Date = JOB.*Job_date;

       // PAR.Create Time = JOB.*Job time
       PAR.Create_Time = JOB.*Job_time;

       // PAR.Create User = JOB.*USER
       PAR.Create_User = JOB.*USER;

       // PAR.Create Program = JOB.*PROGRAM
       PAR.Create_Program = JOB.*PROGRAM;

       //?*** Set CHANGE fields. ***
       // PAR.Change Date = CON.*ZERO
       PAR.Change_Date = *ZERO;

       // PAR.Change Time = CON.*ZERO
       PAR.Change_Time = *ZERO;

       // PAR.Change User = CON.*BLANK
       PAR.Change_User = *BLANK;

       // PAR.Change Program = CON.*BLANK
       PAR.Change_Program = *BLANK;

      }

     }

    }

    ENDIF;

   }

   ENDIF;

  }

 }

 //?Crt refs for shipto and others
 EXECUTE FUNCTION(Crt Ld Frt Chrg R TMS RT) TYPE(RTVOBJ) FILE(PMDJREP)           AC2129645;
 PARAMETER(LCL.FC_Code);
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.LFC_Sequence_Number);
 PARAMETER(LCL.Stop_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  EXECUTE FUNCTION(Rtv Charge Info       RT) TYPE(RTVOBJ) FILE(PMDIREP)           AC1866916;
  PARAMETER(DB1.CR_Reference_Code);
  PARAMETER(NLL.CR_Reference_Desc);
  PARAMETER(LCL.CR_Value_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.LFCR Numeric Value = CON.*ZERO
  LCL.LFCR_Numeric_Value = *ZERO;

  //?CR Reference is Drop
  CASE;

  // IF DB1.CR Reference Code is Drop Number
  IF DB1.CR_Reference_Code = 'DROP';

  // LCL.LFCR Numeric Value = PAR.Stop Number
  LCL.LFCR_Numeric_Value = PAR.Stop_Number;

  ENDIF;

  //?CR Reference is ShipTo
  CASE;

  // IF DB1.CR Reference Code is Ship To
  IF DB1.CR_Reference_Code = 'SHIPTO';

  EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1292489;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Stop_Number);
  PARAMETER(LCL.Customer_Number_NBR);
  {
   //?USER: Processing if Data record not found

   // PAR.Customer Number       NBR = CON.*ZERO
   PAR.Customer_Number_NBR = *ZERO;

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Customer Number    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292494;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Customer_Number_NBR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  // LCL.LFCR Numeric Value = LCL.Customer Number       NBR
  LCL.LFCR_Numeric_Value = LCL.Customer_Number_NBR;

  ENDIF;

  EXECUTE FUNCTION(Crt Ld Frt Chrg/Upd   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC2130472;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(DB1.CR_Reference_Code);
  PARAMETER(LCL.CR_Value_Type);
  PARAMETER(LCL.LFCR_Numeric_Value);
  PARAMETER(DB1.Charge_Reference_Type);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.FC_Code);
   PARAMETER(PAR.LFC_Sequence_Number);
   PARAMETER(PAR.CR_Reference_Code);
   PARAMETER(PAR.LFCR_Value_Type);
   PARAMETER(PAR.LFCR_Numeric_Value);
   PARAMETER(PAR.LFCR_Alpha_Value);
   PARAMETER(PAR.LFCR_Reference_Type);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Create_Date);
   PARAMETER(PAR.Create_Time);
   PARAMETER(PAR.Create_User);
   PARAMETER(PAR.Create_Program);
   PARAMETER(PAR.Change_Date);
   PARAMETER(PAR.Change_Time);
   PARAMETER(PAR.Change_User);
   PARAMETER(PAR.Change_Program);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg LD Frt Chrg Ref   CH) TYPE(CHGOBJ) FILE(PMDKCPP)           AC1869265;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.FC_Code);
   PARAMETER(DB1.LFC_Sequence_Number);
   PARAMETER(DB1.CR_Reference_Code);
   PARAMETER(PAR.LFCR_Value_Type);
   PARAMETER(PAR.LFCR_Numeric_Value);
   PARAMETER(PAR.LFCR_Alpha_Value);
   PARAMETER(PAR.LFCR_Reference_Type);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Create_Date);
   PARAMETER(PAR.Create_Time);
   PARAMETER(PAR.Create_User);
   PARAMETER(PAR.Create_Program);
   PARAMETER(PAR.Change_Date);
   PARAMETER(PAR.Change_Time);
   PARAMETER(PAR.Change_User);
   PARAMETER(PAR.Change_Program);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.CR Reference Code = CND.Blanks
 LCL.CR_Reference_Code = *BLANK;

 // LCL.LFCR Reference Type = WRK.Blank 6 USR
 LCL.LFCR_Reference_Type = WRK.Blank_6_USR;

 // LCL.LFCR Numeric Value = CON.*ZERO
 LCL.LFCR_Numeric_Value = *ZERO;

 //?If Stop number is blank( not on the description)
 CASE;

 // IF LCL.Stop Number is EQ 0
 IF LCL.Stop_Number = 0;

 // LCL.FC Reference Required = CND.No
 LCL.FC_Reference_Required = 'N';

 // LCL.FC Act Frt Include Sts = CND.Yes
 LCL.FC_Act_Frt_Include_Sts = 'Y';

 // LCL.FC Tot Freight Inc Sts = CND.Yes
 LCL.FC_Tot_Freight_Inc_Sts = 'Y';

 ENDIF;

 //?If Stop number is 1 ( on the description)
 CASE;

 // IF LCL.Stop Number is One
 IF LCL.Stop_Number = 1;

 EXECUTE FUNCTION(RTV 1st Company       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2130458;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Company_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.FC Reference Required = CND.Yes
 LCL.FC_Reference_Required = 'Y';

 // LCL.FC Act Frt Include Sts = CND.No
 LCL.FC_Act_Frt_Include_Sts = 'N';

 // LCL.FC Tot Freight Inc Sts = CND.Yes
 LCL.FC_Tot_Freight_Inc_Sts = 'Y';

 // LCL.CR Reference Code = CND.Company
 LCL.CR_Reference_Code = 'COMPNY';

 // LCL.LFCR Reference Type = CND.Charge Responsibility
 LCL.LFCR_Reference_Type = 'R';

 // LCL.LFCR Numeric Value = LCL.Company Number
 LCL.LFCR_Numeric_Value = LCL.Company_Number;

 ENDIF;

 //?If Stop number is >1 ( on the description)
 CASE;

 // IF LCL.Stop Number is GT 1
 IF LCL.Stop_Number > 1;

 // LCL.FC Reference Required = CND.Yes
 LCL.FC_Reference_Required = 'Y';

 // LCL.FC Tot Freight Inc Sts = CND.Yes
 LCL.FC_Tot_Freight_Inc_Sts = 'Y';

 EXECUTE FUNCTION(Val for Stop Frt Chrge RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2130036;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.Stop_Number);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Stop is for a DROP If LD exists
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // LCL.FC Act Frt Include Sts = CND.Yes
 LCL.FC_Act_Frt_Include_Sts = 'Y';

 // LCL.CR Reference Code = CND.Drop Number
 LCL.CR_Reference_Code = 'DROP';

 // LCL.LFCR Numeric Value = LCL.Stop Number
 LCL.LFCR_Numeric_Value = LCL.Stop_Number;

 // LCL.LFCR Reference Type = CND.Charge Allocation
 LCL.LFCR_Reference_Type = 'A';

 //?Stop is for a DROP If LD exists
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Stop is for a PICKUP since LD does not exist
 // LCL.FC Act Frt Include Sts = CND.No
 LCL.FC_Act_Frt_Include_Sts = 'N';

 // LCL.CR Reference Code = CND.Company
 LCL.CR_Reference_Code = 'COMPNY';

 // LCL.LFCR Reference Type = CND.Charge Responsibility
 LCL.LFCR_Reference_Type = 'R';

 // LCL.LFCR Numeric Value = LCL.Company Number
 LCL.LFCR_Numeric_Value = LCL.Company_Number;

 ENDIF;

 ENDIF;

 //?Override Freight Charge table with these values:
 // LCL.LFC Create Status = CND.Auto
 LCL.LFC_Create_Status = 'A';

 // LCL.FC Charge Category = CND.General
 LCL.FC_Charge_Category = 'G';

 // LCL.FC Shag/Wash Comp = CND.Non Shag/Wash
 LCL.FC_Shag_Wash_Comp = 'N';

 // LCL.FC Special Type = CND.Not Special Type
 LCL.FC_Special_Type = 'N';

 // LCL.LFC TFP Processed = CND.Not Processed
 LCL.LFC_TFP_Processed = *BLANK;

 // LCL.LFC TFP Carrier Paid Date = CON.*ZERO
 LCL.LFC_TFP_Carrier_Paid_Date = *ZERO;

 EXECUTE FUNCTION(Crt Load FreightCh TMS IF) TYPE(EXCINTFUN)                     AC2129643;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.FC_Code);
 PARAMETER(LCL.LFC_Sequence_Number);
 PARAMETER(DB1.TMS_Charge_Amount);
 PARAMETER(LCL.FC_Act_Frt_Include_Sts);
 PARAMETER(DB1.LFC_Carrier_Code);
 PARAMETER(LCL.LFC_Create_Status);
 PARAMETER(LCL.LFC_Unused_Sts);
 PARAMETER(LCL.FC_Charge_Category);
 PARAMETER(LCL.FC_Shag_Wash_Comp);
 PARAMETER(LCL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(LCL.FC_Special_Type);
 PARAMETER(LCL.LFC_TFP_Processed);
 PARAMETER(LCL.FC_Reference_Required);
 PARAMETER(LCL.LFC_Unused_Sts_5);
 PARAMETER(LCL.LFC_TFP_Carrier_Paid_Date);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq          RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1869586;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LFC Sequence Number = CON.1
   PAR.LFC_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LFC Sequence Number = DB1.LFC Sequence Number + CON.1
   PAR.LFC_Sequence_Number = DB1.LFC_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Load Freight TMS  CR) TYPE(CRTOBJ) FILE(POBCCPP)           AC2129644;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.LFC_Amount);
  PARAMETER(PAR.LFC_Act_Frt_Include_Sts);
  PARAMETER(PAR.LFC_Carrier_Code);
  PARAMETER(PAR.LFC_Create_Status);
  PARAMETER(PAR.LFC_Unused_Sts);
  PARAMETER(PAR.LFC_Charge_Category);
  PARAMETER(PAR.LFC_Shag_Wash_Comp);
  PARAMETER(PAR.LFC_Tot_Freight_Inc_Sts);
  PARAMETER(PAR.LFC_Special_Type);
  PARAMETER(PAR.LFC_TFP_Processed);
  PARAMETER(PAR.LFC_Reference_Required);
  PARAMETER(PAR.LFC_Unused_Sts_5);
  PARAMETER(PAR.LFC_TFP_Carrier_Paid_Date);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 CASE;

 // IF LCL.CR Reference Code is Blanks
 IF LCL.CR_Reference_Code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Crt Ld Frt Chrg Ref   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1869956;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.FC_Code);
 PARAMETER(1);
 PARAMETER(LCL.CR_Reference_Code);
 PARAMETER('N');
 PARAMETER(LCL.LFCR_Numeric_Value);
 PARAMETER(LCL.LFCR_Reference_Type);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt LD Frt Chrg Ref   CR) TYPE(CRTOBJ) FILE(PMDKCPP)           AC1869264;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.CR_Reference_Code);
  PARAMETER(PAR.LFCR_Value_Type);
  PARAMETER(PAR.LFCR_Numeric_Value);
  PARAMETER(PAR.LFCR_Alpha_Value);
  PARAMETER(PAR.LFCR_Reference_Type);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Crt LdFrtChrg Comment IF) TYPE(EXCINTFUN)                      AC1909083;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.FC_Code);
 PARAMETER(LCL.LFC_Sequence_Number);
 PARAMETER(LCL.LFCC_Sequence_Number);
 PARAMETER(DB1.TMS_Charge_Description);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PMEYCPP)           AC1909082;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.LFCC_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LFCC Sequence Number = CON.1
   PAR.LFCC_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LFCC Sequence Number = DB1.LFCC Sequence Number + CON.1
   PAR.LFCC_Sequence_Number = DB1.LFCC_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt LdFrtChrg Comment CR) TYPE(CRTOBJ) FILE(PMEYCPP)           AC1909059;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.FC_Code);
  PARAMETER(PAR.LFC_Sequence_Number);
  PARAMETER(PAR.LFCC_Sequence_Number);
  PARAMETER(PAR.LFCC_Comment);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 // PAR.Record Created        USR = CND.Yes
 PAR.Record_Created_USR = 'Y';

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(RTV Rated Freight     RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2130205;
 PARAMETER(PAR.TMS_Load_ID);
 PARAMETER(LCL.Rated_Freight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Record Created        USR is Yes
 IF PAR.Record_Created_USR = 'Y';

 // OR LCL.Rated Freight is Not Zero
 OR LCL.Rated_Freight <> *ZERO;

 EXECUTE FUNCTION(Rtv Carrier Payment   RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1628704;
 PARAMETER(PAR.TMS_Load_ID);
 PARAMETER(LCL.Rated_Freight);
 PARAMETER(LCL.Total_Freight_7_2_USR);
 PARAMETER(LCL.Total_Freight_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // PAR.Total Freight 7.2 USR = PAR.Rated Freight
  PAR.Total_Freight_7_2_USR = PAR.Rated_Freight;

  // PAR.Total Freight USR = PAR.Rated Freight
  PAR.Total_Freight_USR = PAR.Rated_Freight;

  //?USER: Process Data record

  CASE;

  // IF DB1.LFC Act Frt Include Sts is Yes
  IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

  // PAR.Total Freight 7.2 USR = PAR.Total Freight 7.2 USR + DB1.LFC Amount
  PAR.Total_Freight_7_2_USR = PAR.Total_Freight_7_2_USR + DB1.LFC_Amount;

  ENDIF;

  CASE;

  // IF DB1.LFC Tot Freight Inc Sts is Yes
  IF DB1.LFC_Tot_Freight_Inc_Sts = 'Y';

  // PAR.Total Freight USR = PAR.Total Freight USR + DB1.LFC Amount
  PAR.Total_Freight_USR = PAR.Total_Freight_USR + DB1.LFC_Amount;

  ENDIF;

 }

 EXECUTE FUNCTION(Upd Ld ActFrt/TotFrt  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2130204;
 PARAMETER(PAR.TMS_Load_ID);
 PARAMETER(LCL.Load_Status);
 PARAMETER(LCL.Total_Freight_USR);
 PARAMETER('P');
 PARAMETER(LCL.Total_Freight_7_2_USR);
 PARAMETER(PAR.LH_Carrier_Paid_Dte);
 PARAMETER(PAR.LH_Carrier_Paid_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Ld ActFrt/TotFrt  CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2130206;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Load_Total_Freight);
  PARAMETER(PAR.LH_Carrier_Payment_Sts);
  PARAMETER(PAR.Load_Actual_Freight);
  PARAMETER(PAR.LH_Carrier_Paid_Dte);
  PARAMETER(PAR.LH_Carrier_Paid_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   CASE;

   // IF PAR.LH Carrier Payment Sts is Paid
   IF PAR.LH_Carrier_Payment_Sts = 'P';

   ENDIF;

  }

  // PAR.Load Status = DB1.Load Status
  PAR.Load_Status = DB1.Load_Status;

 }

 //?rmc  added 1/121/7
 CASE;

 // IF LCL.Load Status is Invoiced
 IF LCL.Load_Status = 'I';

 // Call program UPD Alloc Frt to Hist  XF.
 CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
 PARAMETER(PAR.TMS_Load_ID);
 PARAMETER(LCL.Total_Freight_7_2_USR);
 PARAMETER(LCL.Total_Freight_USR);

 ENDIF;

 ENDIF;

}


