// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMF6PVR
// ?Date: 14.08.2025 Time: 03:43:02
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.PRT Description = CON.TST Invoice Print
LCL.PRT_Description = 'TST Invoice Print';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*YES
PAR.PRT_Save_Output_Sts = *YES;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CND.One
PAR.System_Value_Numeric = 1;

// LCL.Job Name = JOB.*JOB
LCL.Job_Name = JOB.*JOB;

//?USER: Process command keys

MOVE *ALL (To: LCL From: DTL);

// LCL.Company Number Pass   USR = DTL.Company Number
LCL.Company_Number_Pass_USR = DTL.Company_Number;

// LCL.Order Number 2  PASS  USR = LCL.Load ID
LCL.Order_Number_2_PASS_USR = LCL.Load_ID;

// LCL.Order Number 1  PASS  USR = LCL.Order Number
LCL.Order_Number_1_PASS_USR = LCL.Order_Number;

// LCL.Thru Date Pass        USR = LCL.Requested Ship Date
LCL.Thru_Date_Pass_USR = LCL.Requested_Ship_Date;

CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

// Call program PRT Invc Except List   PF.
CALL PROGRAM(PRT Invc Except List   PF) ('PPXSPFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER('TST Invoice');
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Job_Name);
PARAMETER('TP');
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(LCL.USR_Status_Y_N);

// IF DTL.*CMD key is CF12
IF DTL.*CMD_key = '12';

//?3rd party
// Call program Zzz Invc to Print-Fix  XF.
CALL PROGRAM(Zzz Invc to Print-Fix  XF) ('PBWJXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Invoice_Number);
PARAMETER(1);
PARAMETER(LCL.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(LCL.Count_USR);
PARAMETER(DTL.Job_Name);
PARAMETER('TP');
PARAMETER(LCL.USR_Update_Flag);
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(LCL.USR_Status_Y_N);

// IF DTL.*CMD key is CF11
IF DTL.*CMD_key = '11';

//?3rd party
// Call program PRT Invc Register     PF.
CALL PROGRAM(PRT Invc Register     PF) ('PDULPFR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Load_ID);
PARAMETER(1);
PARAMETER('TP');

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

//?Inter Co
// Call program PMT Invoice Except Rpt PV.
CALL PROGRAM(PMT Invoice Except Rpt PV) ('PPXRPVR');
PARAMETER('IC');
PARAMETER('Y');

// IF DTL.*CMD key is CF09
IF DTL.*CMD_key = '09';

//?3rd party
// Call program PMT Invoice Except Rpt PV.
CALL PROGRAM(PMT Invoice Except Rpt PV) ('PPXRPVR');
PARAMETER('TP');
PARAMETER('Y');

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Cancel_Date);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Order_in_Use);
PARAMETER(DTL.Header_Status);
PARAMETER(DTL.Header_Status_Last);
PARAMETER(DTL.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.User_Original_Entry);
PARAMETER(DTL.Date_of_Original_Entry);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER(DTL.Credit_Hold);
PARAMETER(DTL.Production_Hold);
PARAMETER(DTL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Accounts_Receiv_Ent_1);
PARAMETER(DTL.Accounts_Receiv_Ent_2);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Load_Plan_Order);
PARAMETER(DTL.Print_Pick_Slip);
PARAMETER(DTL.Resell_Reference_Number);
PARAMETER(DTL.Special_Comment_1);
PARAMETER(DTL.Special_Comment_2);
PARAMETER(DTL.Affect_Auto_Accruals);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.Reason_for_Price_Audit);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Date);
PARAMETER(DTL.Event_Code);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.A_R_order_Value_Total);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.Order_Certification_Flag);
PARAMETER(DTL.Invoice_Order_Value_Tot);
PARAMETER(DTL.Process_Sts_for_3C);
PARAMETER(DTL.Order_Conf_Fax_Sts);
PARAMETER(DTL.Manifest_Fax_Sts);
PARAMETER(DTL.Invoice_Fax_Sts);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
PARAMETER(DTL.Order_Emailed);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
PARAMETER(DTL.Shipping_Temp_Code_C_F);
PARAMETER(DTL.Broker_Order_Status);
PARAMETER(DTL.Air_Freight_Order);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Export_USDA_Approved);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.JPN_Invoice_Issuance_Date);
PARAMETER(DTL.Load_Actual_Shipped_Date);
PARAMETER(DTL.Load_BOL_Complete_Date);
PARAMETER(DTL.Load_Truck_Departure_Date);
PARAMETER(DTL.Maximum_Gross_Weight);
PARAMETER(DTL.Time_of_Original_Entry);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.Load_BOL_Complete_Time);
PARAMETER(DTL.Load_Truck_Departure_Time);
PARAMETER(DTL.Act_Frt_Reference_Amount);
PARAMETER(DTL.Act_Non_Ref_Frt_Amount);
PARAMETER(DTL.OH_Fuel_Surcharge_Amount);
PARAMETER(DTL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(DTL.OH_Total_Ref_Frt_Amt);
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: User defined action

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

// DTL.Print Pre-Inv/Exception = CND.*BLANK
DTL.Print_Pre_Inv_Exception = *BLANK;

// DTL.Order Status = LCL.Order Status
DTL.Order_Status = LCL.Order_Status;

// DTL.*Record selected = LCL.*Record selected
DTL.*Record_selected = LCL.*Record_selected;

ENDIF;

