// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBR6DFR
// ?Date: 14.08.2025 Time: 03:49:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// Call program Ext Void Unsent Bt Hd RT.
CALL PROGRAM(Ext Void Unsent Bt Hd RT) ('PBS6XFR');

//?USER: Initialize subfile record from DBF record

//?Process Status Description
CASE;

// IF RCD.PFS Process Status is Selection
IF RCD.PFS_Process_Status = 4;

// RCD.Process Status Desc USR = CON.Batch Selection
RCD.Process_Status_Desc_USR = 'Batch Selection';

//?Process Status Description
// IF RCD.PFS Process Status is Not Sent-Voided
IF RCD.PFS_Process_Status = 5;

// RCD.Process Status Desc USR = CON.Not Sent-Voided
RCD.Process_Status_Desc_USR = 'Not Sent-Voided';

//?Process Status Description
// IF RCD.PFS Process Status is Ready to Send
IF RCD.PFS_Process_Status = 6;

// RCD.Process Status Desc USR = CON.Ready To Send
RCD.Process_Status_Desc_USR = 'Ready To Send';

//?Process Status Description
// IF RCD.PFS Process Status is Send InProcess
IF RCD.PFS_Process_Status = 7;

// RCD.Process Status Desc USR = CON.Send InProcess
RCD.Process_Status_Desc_USR = 'Send InProcess';

//?Process Status Description
// IF RCD.PFS Process Status is Sent
IF RCD.PFS_Process_Status = 9;

// RCD.Process Status Desc USR = CON.Sent
RCD.Process_Status_Desc_USR = 'Sent';

//?Process Status Description
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Process Status Desc USR = CON.*BLANK
RCD.Process_Status_Desc_USR = *BLANK;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program Pmt PFS Prd Sch Bt Hd PV.
CALL PROGRAM(Pmt PFS Prd Sch Bt Hd PV) ('PBR9PVR');
PARAMETER(LCL.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(LCL.PFS_Baseline_Schedule);
PARAMETER(LCL.PFS_Prod_Sch_Created_USR);

CASE;

// IF LCL.PFS Prod Sch Created USR is Yes
IF LCL.PFS_Prod_Sch_Created_USR = 'Y';

CASE;

// IF LCL.PFS Baseline Schedule is Baseline
IF LCL.PFS_Baseline_Schedule = 'B';

//?Convert PFS Create Date to YYYYMMDD
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Create_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


// Call program Crt PFS Prd Sch Bt Sl XF.
CALL PROGRAM(Crt PFS Prd Sch Bt Sl XF) ('PBSCXFR');
PARAMETER(LCL.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(LCL.PFS_Create_Date);

ENDIF;

// Call program WW PFS Prd Sch Bt Sl  DF.
CALL PROGRAM(WW PFS Prd Sch Bt Sl  DF) ('PBR8DFR');
PARAMETER(LCL.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(LCL.PFS_Baseline_Schedule);

CASE;

// IF PGM.*Return code is Prod Schd Batch Sent
IF PGM.*Return_code = 'PSBSENT';

// Send information message - 'Production Schedule is Ready to Send.'
MESSAGE(USR4825 *INFO);

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=Dsp Prod Sched
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

//?Convert PFS Batch  Date to YYYYMMDD
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Batch_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


// Call program Dsp PFS Prd Sch Bt Dt DF.
CALL PROGRAM(Dsp PFS Prd Sch Bt Dt DF) ('PBSODFR');
PARAMETER(360);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(115900);
PARAMETER('A');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.PFS User ID EQ JOB.*USER
IF RCD.PFS_User_ID = JOB.*USER;

CASE;

// IF RCD.PFS Process Status is Selection
IF RCD.PFS_Process_Status = 4;

// OR RCD.PFS Process Status is Ready to Send
OR RCD.PFS_Process_Status = 6;

// Call program WW PFS Prd Sch Bt Sl  DF.
CALL PROGRAM(WW PFS Prd Sch Bt Sl  DF) ('PBR8DFR');
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
PARAMETER(RCD.PFS_Baseline_Schedule);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

CASE;

// IF PGM.*Return code is Prod Schd Batch Sent
IF PGM.*Return_code = 'PSBSENT';

// Send information message - 'The requested Production Schedule Batch is being created.'
MESSAGE(USR4827 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Edit only allowed if Process Status is Batch Selection or Ready to Se
MESSAGE(USR4816 *INFO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'You are only allowed to Edit your Production Schedule Batches.'
ERROR(USR4826);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

CASE;

// IF RCD.PFS User ID EQ JOB.*USER
IF RCD.PFS_User_ID = JOB.*USER;

CASE;

// IF RCD.PFS Process Status is Send InProcess
IF RCD.PFS_Process_Status = 7;

// OR RCD.PFS Process Status is Sent
OR RCD.PFS_Process_Status = 9;

// Send information message - 'Delete is not allowed after Production Schedule has been sent.'
MESSAGE(USR4815 *INFO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Delete PFS Prod Sched Batch Sel
EXECUTE FUNCTION(DeA PFS Prd Sch Bt SL RT) TYPE(RTVOBJ) FILE(PBB3CPP)           AC2110103;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
{
 //?USER: Initialize routine

 //?E3787 JJH 08/07/15 - This function deletes all PFS Prod Sched
 //?  Batch Sel records for this PFS Production Schedule Batch.
 //?USER: Process Data record

 EXECUTE FUNCTION(Del PFS Prd Sch Bt Sl DL) TYPE(DLTOBJ) FILE(PBB3CPP)           AC2109270;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(DB1.PFS_Item_Structure_Type);
 PARAMETER(DB1.PFS_Item_Structure_Group);
}


//?Delete PFS Prod Sched Batch Hdr
EXECUTE FUNCTION(Del PFS Prd Sch Bt Hd DL) TYPE(DLTOBJ) FILE(PBB2CPP)           AC2109264;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);

//?E6235 JJH 06/23/16 - Delete all PFS Prod Sched Batch Hdr records.
EXECUTE FUNCTION(DeA PFS Prd Sch Bt Dt RT) TYPE(RTVOBJ) FILE(PBB1CPP)           AC2123640;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del PFS Prd Sch Bt Dt DL) TYPE(DLTOBJ) FILE(PBB1CPP)           AC2109267;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(DB1.PFS_Batch_Seq);
}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'You are only allowed to Delete your Production Schedule Batches.'
ERROR(USR4829);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?5=Dsp Selection
CASE;

// IF RCD.*SFLSEL is *5
IF RCD.*SFLSEL = '5';

// Call program Dsp PFS Prd Sch Bt Sl DF.
CALL PROGRAM(Dsp PFS Prd Sch Bt Sl DF) ('PBSDDFR');
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
PARAMETER(RCD.PFS_Baseline_Schedule);

ENDIF;

//?6=Prt Sched
CASE;

// IF RCD.*SFLSEL is *6
IF RCD.*SFLSEL = '6';

CASE;

// IF RCD.PFS Process Status is Not Sent-Voided
IF RCD.PFS_Process_Status = 5;

// Send information message - 'Production Schedule is Not Sent-Voided.  Report not printed.'
MESSAGE(USR4853 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Prt PFS Prd Sch Bt Dt PF.
CALL PROGRAM(Prt PFS Prd Sch Bt Dt PF) ('PBSTPFR');
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
PARAMETER(RCD.PFS_Baseline_Schedule);
PARAMETER(RCD.PFS_Process_Status);

// Send information message - 'Production Schedule printed.'
MESSAGE(USR4852 *INFO);

ENDIF;

ENDIF;

//?7=Dsp Prod Sched
CASE;

// IF RCD.*SFLSEL is *7
IF RCD.*SFLSEL = '7';

CASE;

// IF RCD.PFS Process Status is Ready to Send
IF RCD.PFS_Process_Status = 6;

// OR RCD.PFS Process Status is Send InProcess
OR RCD.PFS_Process_Status = 7;

// OR RCD.PFS Process Status is Sent
OR RCD.PFS_Process_Status = 9;

// Call program Dsp PFS Prd Sch Bt1Dt DF.
CALL PROGRAM(Dsp PFS Prd Sch Bt1Dt DF) ('PBSSDFR');
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER('S');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'The Production Schedule Batch has not been created.'
MESSAGE(USR4840 *INFO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?8=Send
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

CASE;

// IF RCD.PFS User ID EQ JOB.*USER
IF RCD.PFS_User_ID = JOB.*USER;

CASE;

// IF RCD.PFS Process Status is Ready to Send
IF RCD.PFS_Process_Status = 6;

EXECUTE FUNCTION(Ex1 PFS Prd Sch Bt Sl RT) TYPE(RTVOBJ) FILE(PBB3CPP)           AC2110171;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
{
 //?USER: Initialize routine

 //?This function is used to determine if at least 1 record exists
 //?for the PFS Prod Sched Batch Hdr.
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Convert PFS Change Date to YYYYMMDD
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Batch_Sent_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


//?Initialize PFS Prod Sched Batch Dtl fields
// LCL.PFS Batch Sent Time = JOB.*Job time
LCL.PFS_Batch_Sent_Time = JOB.*Job_time;

// LCL.PFS User ID = JOB.*USER
LCL.PFS_User_ID = JOB.*USER;

// LCL.PFS Change Date = LCL.PFS Batch Sent Date
LCL.PFS_Change_Date = LCL.PFS_Batch_Sent_Date;

// LCL.PFS Change time = LCL.PFS Batch Sent Time
LCL.PFS_Change_Time = LCL.PFS_Batch_Sent_Time;

//?Convert Numeric Fields to Alpha Fields
// LCL.PFS Company Number Alpha = CVTVAR(RCD.PFS Company Number)
LCL.PFS_Company_Number_Alpha = CVTVAR(RCD.PFS_Company_Number);

// LCL.PFS Batch Date Alpha = CVTVAR(RCD.PFS Batch Date)
LCL.PFS_Batch_Date_Alpha = CVTVAR(RCD.PFS_Batch_Date);

// LCL.PFS Batch Time Alpha = CVTVAR(RCD.PFS Batch Time)
LCL.PFS_Batch_Time_Alpha = CVTVAR(RCD.PFS_Batch_Time);

//?CPYF PBB1CPP to PBB1CPPGUY or PBB1CPPSTJ
// Call program IJS PFS Prd Sch Bt Dt CL.
CALL PROGRAM(IJS PFS Prd Sch Bt Dt CL) ('PBS3UPR');
PARAMETER(LCL.PFS_Company_Number_Alpha);
PARAMETER(LCL.PFS_Batch_Date_Alpha);
PARAMETER(LCL.PFS_Batch_Time_Alpha);
PARAMETER(LCL.PFS_User_ID);

//?Update PFS Prod Sched Batch Hdr
EXECUTE FUNCTION(Chg PFS Prd Sch Bt Hd RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2111881;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
PARAMETER(LCL.PFS_Batch_Sent_Date);
PARAMETER(LCL.PFS_Batch_Sent_Time);
PARAMETER(9);
PARAMETER(LCL.PFS_Change_Date);
PARAMETER(LCL.PFS_Change_Time);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg PFS Prd Sch Bt Hd CH) TYPE(CHGOBJ) FILE(PBB2CPP)           AC2109263;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(DB1.PFS_Baseline_Schedule);
 PARAMETER(PAR.PFS_Batch_Sent_Date);
 PARAMETER(PAR.PFS_Batch_Sent_Time);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(DB1.PFS_Error_Reason);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 PARAMETER(PAR.PFS_Change_Date);
 PARAMETER(PAR.PFS_Change_Time);
}


//?Reload subfile and send message
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Send information message - 'Production Schedule Batch sent!'
MESSAGE(USR4854 *INFO);

//?E7663 JJH 10/25/16 - PFS Prod Sched Batch Cgn
EXECUTE FUNCTION(Crt PFS Prd Sch Bt Cg RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2129371;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Batch_Date);
PARAMETER(RCD.PFS_Batch_Time);
PARAMETER(RCD.PFS_User_ID);
{
 //?USER: Initialize routine

 //?Modifications and Comments
 DO;

 //?E12509 JJH 02/07/17 - PFS Prod Sched Batch Cgn
 //?- Add logic to correct Cancellation with a Status of B=Baseline
 //?- Change logic to not write addtional records from the Previous
 //?  batch only if it is the 1st Baseline of the day.
 //?E7663 JJH 10/20/16 - PFS Prod Sched Batch Cgn
 //?- Create a new file that contains all records that are sent in
 //?  the PFS Prod Batch Dtl that is intended to go to COGNOS.
 //?- This new file will be PFS Prod Sched Batch Cgn (PBC3CPP).
 //?- This file will contain all item codes, to include the Partial
 //?  Batch records sent, plus the records from the Previous Batch
 //?  that were not sent.
 //?- Records sent from the Previous Batch will be based on not being
 //?  selected in the PFS Prod Sched Batch Sel.
 //?- This new file will be created when the user selects Option 8=Send.
 //?- Thus, all item codes will be sent to Cognos.
 ENDDO;

 //?USER: Process Data record

 //?Crt all PFS Prod Sched Batch Dtl records into PFS Prod Sched Batch
 //?Cgs file.
 EXECUTE FUNCTION(Crt PFS Prd Sch Bt Cg RT) TYPE(RTVOBJ) FILE(PBB1CPP)           AC2129374;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(LCL.PFS_Batch_Seq);
 PARAMETER(LCL.PFS_Record_Status);
 PARAMETER(LCL.PFS_Process_Status);
 PARAMETER(LCL.PFS_Error_Reason);
 PARAMETER(LCL.PFS_Create_Date);
 PARAMETER(LCL.PFS_Create_Time);
 PARAMETER(LCL.PFS_Change_Date);
 PARAMETER(LCL.PFS_Change_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt Cg) TYPE(CRTOBJ) FILE(PBC3CPP)           AC2129356;
  PARAMETER(DB1.PFS_Company_Number);
  PARAMETER(DB1.PFS_Batch_Date);
  PARAMETER(DB1.PFS_Batch_Time);
  PARAMETER(DB1.PFS_User_ID);
  PARAMETER(DB1.PFS_Batch_Seq);
  PARAMETER(DB1.PFS_Production_Date);
  PARAMETER(DB1.PFS_Item_Code);
  PARAMETER(DB1.PFS_Label_Type);
  PARAMETER(DB1.PFS_Order_Number);
  PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
  PARAMETER(DB1.PFS_Order_Line_Sts);
  PARAMETER(DB1.PFS_Ordered_Qty);
  PARAMETER(DB1.PFS_Inventory_Alloc_Qty);
  PARAMETER(DB1.PFS_Fill_Qty_Prod);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_0);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_1);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_2);
  PARAMETER(DB1.PFS_Load_ID);
  PARAMETER(DB1.PFS_Loading_Sequence);
  PARAMETER(DB1.PFS_Scheduled_Ship_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Time);
  PARAMETER(DB1.PFS_Item_Structure_Type);
  PARAMETER(DB1.PFS_Item_Structure_Group);
  PARAMETER(DB1.PFS_Item_Structure_Class);
  PARAMETER(DB1.PFS_Primary_UOM);
  PARAMETER(DB1.PFS_Fresh_Frozen);
  PARAMETER(DB1.PFS_Base_Converted);
  PARAMETER(DB1.PFS_Baseline_Schedule);
  PARAMETER(DB1.PFS_Palletize);
  PARAMETER(DB1.PFS_Pallet_Type);
  PARAMETER(DB1.PFS_Slip_Sheet);
  PARAMETER(DB1.PFS_Customer_Name);
  PARAMETER(DB1.PFS_Record_Status);
  PARAMETER(DB1.PFS_Process_Status);
  PARAMETER(DB1.PFS_Error_Reason);
  PARAMETER(DB1.PFS_Create_Date);
  PARAMETER(DB1.PFS_Create_Time);
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  //?USER: Exit processing

  MOVE *ALL (To: PAR From: DB1);

 }

 //?E12509 - Change logic to not write addtional records from
 //?  the previous batch only if it is the 1st Baseline of the day.
 //?Determine if we should update PFS Prod Sched Batch Cgn
 CASE;

 // IF DB1.PFS Baseline Schedule is Baseline
 IF DB1.PFS_Baseline_Schedule = 'B';

 EXECUTE FUNCTION(Rtv Baseline Co/PrdDt RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2132364;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(LCL.PFS_Baseline_Schedule_Cnt);
 {
  //?USER: Initialize routine

  // LCL.PFS Baseline Schedule Cnt = CON.*ZERO
  LCL.PFS_Baseline_Schedule_Cnt = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.PFS Baseline Schedule is Baseline
  IF DB1.PFS_Baseline_Schedule = 'B';

  // LCL.PFS Baseline Schedule Cnt = LCL.PFS Baseline Schedule Cnt + CON.1
  LCL.PFS_Baseline_Schedule_Cnt = LCL.PFS_Baseline_Schedule_Cnt + 1;

  ENDIF;

  //?USER: Exit processing

  // PAR.PFS Baseline Schedule Cnt = LCL.PFS Baseline Schedule Cnt
  PAR.PFS_Baseline_Schedule_Cnt = LCL.PFS_Baseline_Schedule_Cnt;

 }

 CASE;

 // IF LCL.PFS Baseline Schedule Cnt is Equal (1)
 IF LCL.PFS_Baseline_Schedule_Cnt = 1;

 //?Do Nothing
 // LCL.Upd Prod Sched Batch CGN = CND.No
 LCL.Upd_Prod_Sched_Batch_CGN = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Upd Prod Sched Batch CGN = CND.Yes
 LCL.Upd_Prod_Sched_Batch_CGN = 'Y';

 ENDIF;

 //?Determine if we should update PFS Prod Sched Batch Cgn
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Upd Prod Sched Batch CGN = CND.Yes
 LCL.Upd_Prod_Sched_Batch_CGN = 'Y';

 ENDIF;

 //?Update PFS Prod Sched Batch Cgn
 CASE;

 // IF LCL.Upd Prod Sched Batch CGN is Yes
 IF LCL.Upd_Prod_Sched_Batch_CGN = 'Y';

 //?Determine the Previous PFS Prod Sched Batch Cgn
 EXECUTE FUNCTION(Rtv Prev ProdSchBtHdr RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2121405;
 PARAMETER(PAR.PFS_Company_Number);
 PARAMETER(PAR.PFS_Batch_Date);
 PARAMETER(235959);
 PARAMETER(LCL.PFS_Company_Number);
 PARAMETER(LCL.PFS_Batch_Date);
 PARAMETER(LCL.PFS_Batch_Time);
 PARAMETER(LCL.PFS_User_ID);
 {
  //?USER: Initialize routine

  // LCL.Count USR = CON.*ZERO
  LCL.Count_USR = 0;

  //?USER: Process Data record

  CASE;

  // IF DB1.PFS Process Status is Sent
  IF DB1.PFS_Process_Status = 9;

  // LCL.Count USR = LCL.Count USR + CON.1
  LCL.Count_USR = LCL.Count_USR + 1;

  CASE;

  // IF LCL.Count USR is EQ 2
  IF LCL.Count_USR = 2;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?Crt all PFS Prod Sched Batch Dtl records into PFS Prod Sched Batch
 //?Cgn file from the Previous Batch that are NOT in the PFS Prod Sched
 //?Sel of Current Batch.
 //?E12509 JJH 05/30/18 - New Logic to create PFS Prod Sched Cgn
 EXECUTE FUNCTION(Crt PFS Prd Sch Bt Cg RT2) TYPE(RTVOBJ) FILE(PBB1CPP)          AC2147736;
 PARAMETER(LCL.PFS_Company_Number);
 PARAMETER(LCL.PFS_Batch_Date);
 PARAMETER(LCL.PFS_Batch_Time);
 PARAMETER(LCL.PFS_User_ID);
 PARAMETER(LCL.PFS_Batch_Seq);
 PARAMETER(LCL.PFS_Record_Status);
 PARAMETER(LCL.PFS_Process_Status);
 PARAMETER(LCL.PFS_Error_Reason);
 PARAMETER(LCL.PFS_Create_Date);
 PARAMETER(LCL.PFS_Create_Time);
 PARAMETER(LCL.PFS_Change_Date);
 PARAMETER(LCL.PFS_Change_Time);
 PARAMETER(PAR.PFS_Company_Number);
 PARAMETER(PAR.PFS_Batch_Date);
 PARAMETER(PAR.PFS_Batch_Time);
 PARAMETER(PAR.PFS_User_ID);
 {
  //?USER: Process Data record

  //?E12509 JJH 05/30/18 - New Logic to create PFS Prod Sched Cgn
  CASE;

  // IF DB1.PFS Baseline Schedule is Baseline
  IF DB1.PFS_Baseline_Schedule = 'B';

  // OR DB1.PFS Baseline Schedule is Not Baseline
  OR DB1.PFS_Baseline_Schedule = *BLANK;

  EXECUTE FUNCTION(Crt PFS Prd Sch Bt Cg-B) TYPE(RTVOBJ) FILE(PBC3CPP)            AC2153801;
  PARAMETER(PAR.PFS_Company_Number_Orig);
  PARAMETER(PAR.PFS_Batch_Date_Orig);
  PARAMETER(PAR.PFS_Batch_Time_Orig);
  PARAMETER(PAR.PFS_User_ID_Orig);
  PARAMETER(DB1.PFS_Item_Code);
  PARAMETER(DB1.PFS_Order_Number);
  PARAMETER(DB1.PFS_Baseline_Schedule);
  PARAMETER(DB1.PFS_Production_Date);
  PARAMETER(DB1.PFS_Label_Type);
  PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
  PARAMETER(DB1.PFS_Order_Line_Sts);
  PARAMETER(DB1.PFS_Ordered_Qty);
  PARAMETER(DB1.PFS_Inventory_Alloc_Qty);
  PARAMETER(DB1.PFS_Fill_Qty_Prod);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_0);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_1);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_2);
  PARAMETER(DB1.PFS_Load_ID);
  PARAMETER(DB1.PFS_Loading_Sequence);
  PARAMETER(DB1.PFS_Scheduled_Ship_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Time);
  PARAMETER(DB1.PFS_Item_Structure_Type);
  PARAMETER(DB1.PFS_Item_Structure_Group);
  PARAMETER(DB1.PFS_Item_Structure_Class);
  PARAMETER(DB1.PFS_Primary_UOM);
  PARAMETER(DB1.PFS_Fresh_Frozen);
  PARAMETER(DB1.PFS_Base_Converted);
  PARAMETER(DB1.PFS_Palletize);
  PARAMETER(DB1.PFS_Pallet_Type);
  PARAMETER(DB1.PFS_Slip_Sheet);
  PARAMETER(DB1.PFS_Customer_Name);
  PARAMETER(DB1.PFS_Record_Status);
  PARAMETER(DB1.PFS_Process_Status);
  PARAMETER(DB1.PFS_Error_Reason);
  PARAMETER(DB1.PFS_Create_Date);
  PARAMETER(DB1.PFS_Create_Time);
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?USER: Processing if Data record not found

   // LCL.PFS Batch Seq = CON.9999999
   LCL.PFS_Batch_Seq = 9999999;

   EXECUTE FUNCTION(Rtv Last PFS Batch SeqRT) TYPE(RTVOBJ) FILE(PBC3CPP)           AC2148741;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.PFS Batch Seq = CON.1
    PAR.PFS_Batch_Seq = 1;

    //?USER: Process Data record

    // PAR.PFS Batch Seq = DB1.PFS Batch Seq + CON.1
    PAR.PFS_Batch_Seq = DB1.PFS_Batch_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt Cg) TYPE(CRTOBJ) FILE(PBC3CPP)           AC2129356;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   PARAMETER(PAR.PFS_Production_Date);
   PARAMETER(PAR.PFS_Item_Code);
   PARAMETER(PAR.PFS_Label_Type);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_Order_Line_Item_Nbr);
   PARAMETER(PAR.PFS_Order_Line_Sts);
   PARAMETER(PAR.PFS_Ordered_Qty);
   PARAMETER(PAR.PFS_Inventory_Alloc_Qty);
   PARAMETER(PAR.PFS_Fill_Qty_Prod);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_2);
   PARAMETER(PAR.PFS_Load_ID);
   PARAMETER(PAR.PFS_Loading_Sequence);
   PARAMETER(PAR.PFS_Scheduled_Ship_Date);
   PARAMETER(PAR.PFS_Load_Deadline_Date);
   PARAMETER(PAR.PFS_Load_Deadline_Time);
   PARAMETER(PAR.PFS_Item_Structure_Type);
   PARAMETER(PAR.PFS_Item_Structure_Group);
   PARAMETER(PAR.PFS_Item_Structure_Class);
   PARAMETER(PAR.PFS_Primary_UOM);
   PARAMETER(PAR.PFS_Fresh_Frozen);
   PARAMETER(PAR.PFS_Base_Converted);
   PARAMETER(PAR.PFS_Baseline_Schedule);
   PARAMETER(PAR.PFS_Palletize);
   PARAMETER(PAR.PFS_Pallet_Type);
   PARAMETER(PAR.PFS_Slip_Sheet);
   PARAMETER(PAR.PFS_Customer_Name);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   //?USER: Process Data record

   //?Do nothing
  }

  // IF DB1.PFS Baseline Schedule is Work Ahead
  IF DB1.PFS_Baseline_Schedule = 'W';

  EXECUTE FUNCTION(Crt PFS Prd Sch Bt Cg-W) TYPE(RTVOBJ) FILE(PBC3CPP)            AC2153803;
  PARAMETER(PAR.PFS_Company_Number_Orig);
  PARAMETER(PAR.PFS_Batch_Date_Orig);
  PARAMETER(PAR.PFS_Batch_Time_Orig);
  PARAMETER(PAR.PFS_User_ID_Orig);
  PARAMETER(DB1.PFS_Item_Code);
  PARAMETER(DB1.PFS_Order_Number);
  PARAMETER(DB1.PFS_Baseline_Schedule);
  PARAMETER(DB1.PFS_Production_Date);
  PARAMETER(DB1.PFS_Label_Type);
  PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
  PARAMETER(DB1.PFS_Order_Line_Sts);
  PARAMETER(DB1.PFS_Ordered_Qty);
  PARAMETER(DB1.PFS_Inventory_Alloc_Qty);
  PARAMETER(DB1.PFS_Fill_Qty_Prod);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_0);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_1);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_2);
  PARAMETER(DB1.PFS_Load_ID);
  PARAMETER(DB1.PFS_Loading_Sequence);
  PARAMETER(DB1.PFS_Scheduled_Ship_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Time);
  PARAMETER(DB1.PFS_Item_Structure_Type);
  PARAMETER(DB1.PFS_Item_Structure_Group);
  PARAMETER(DB1.PFS_Item_Structure_Class);
  PARAMETER(DB1.PFS_Primary_UOM);
  PARAMETER(DB1.PFS_Fresh_Frozen);
  PARAMETER(DB1.PFS_Base_Converted);
  PARAMETER(DB1.PFS_Palletize);
  PARAMETER(DB1.PFS_Pallet_Type);
  PARAMETER(DB1.PFS_Slip_Sheet);
  PARAMETER(DB1.PFS_Customer_Name);
  PARAMETER(DB1.PFS_Record_Status);
  PARAMETER(DB1.PFS_Process_Status);
  PARAMETER(DB1.PFS_Error_Reason);
  PARAMETER(DB1.PFS_Create_Date);
  PARAMETER(DB1.PFS_Create_Time);
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?USER: Processing if Data record not found

   // LCL.PFS Batch Seq = CON.9999999
   LCL.PFS_Batch_Seq = 9999999;

   EXECUTE FUNCTION(Rtv Last PFS Batch SeqRT) TYPE(RTVOBJ) FILE(PBC3CPP)           AC2148741;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.PFS Batch Seq = CON.1
    PAR.PFS_Batch_Seq = 1;

    //?USER: Process Data record

    // PAR.PFS Batch Seq = DB1.PFS Batch Seq + CON.1
    PAR.PFS_Batch_Seq = DB1.PFS_Batch_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt Cg) TYPE(CRTOBJ) FILE(PBC3CPP)           AC2129356;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   PARAMETER(PAR.PFS_Production_Date);
   PARAMETER(PAR.PFS_Item_Code);
   PARAMETER(PAR.PFS_Label_Type);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_Order_Line_Item_Nbr);
   PARAMETER(PAR.PFS_Order_Line_Sts);
   PARAMETER(PAR.PFS_Ordered_Qty);
   PARAMETER(PAR.PFS_Inventory_Alloc_Qty);
   PARAMETER(PAR.PFS_Fill_Qty_Prod);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_2);
   PARAMETER(PAR.PFS_Load_ID);
   PARAMETER(PAR.PFS_Loading_Sequence);
   PARAMETER(PAR.PFS_Scheduled_Ship_Date);
   PARAMETER(PAR.PFS_Load_Deadline_Date);
   PARAMETER(PAR.PFS_Load_Deadline_Time);
   PARAMETER(PAR.PFS_Item_Structure_Type);
   PARAMETER(PAR.PFS_Item_Structure_Group);
   PARAMETER(PAR.PFS_Item_Structure_Class);
   PARAMETER(PAR.PFS_Primary_UOM);
   PARAMETER(PAR.PFS_Fresh_Frozen);
   PARAMETER(PAR.PFS_Base_Converted);
   PARAMETER(PAR.PFS_Baseline_Schedule);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   //?USER: Process Data record

   //?Do nothing
  }

  // IF DB1.PFS Baseline Schedule is Cancelled
  IF DB1.PFS_Baseline_Schedule = 'X';

  EXECUTE FUNCTION(Crt PFS Prd Sch Bt Cg-X) TYPE(RTVOBJ) FILE(PBC3CPP)            AC2153806;
  PARAMETER(PAR.PFS_Company_Number_Orig);
  PARAMETER(PAR.PFS_Batch_Date_Orig);
  PARAMETER(PAR.PFS_Batch_Time_Orig);
  PARAMETER(PAR.PFS_User_ID_Orig);
  PARAMETER(DB1.PFS_Item_Code);
  PARAMETER(DB1.PFS_Order_Number);
  PARAMETER(DB1.PFS_Baseline_Schedule);
  PARAMETER(DB1.PFS_Production_Date);
  PARAMETER(DB1.PFS_Label_Type);
  PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
  PARAMETER(DB1.PFS_Order_Line_Sts);
  PARAMETER(DB1.PFS_Ordered_Qty);
  PARAMETER(DB1.PFS_Inventory_Alloc_Qty);
  PARAMETER(DB1.PFS_Fill_Qty_Prod);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_0);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_1);
  PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_2);
  PARAMETER(DB1.PFS_Load_ID);
  PARAMETER(DB1.PFS_Loading_Sequence);
  PARAMETER(DB1.PFS_Scheduled_Ship_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Date);
  PARAMETER(DB1.PFS_Load_Deadline_Time);
  PARAMETER(DB1.PFS_Item_Structure_Type);
  PARAMETER(DB1.PFS_Item_Structure_Group);
  PARAMETER(DB1.PFS_Item_Structure_Class);
  PARAMETER(DB1.PFS_Primary_UOM);
  PARAMETER(DB1.PFS_Fresh_Frozen);
  PARAMETER(DB1.PFS_Base_Converted);
  PARAMETER(DB1.PFS_Palletize);
  PARAMETER(DB1.PFS_Pallet_Type);
  PARAMETER(DB1.PFS_Slip_Sheet);
  PARAMETER(DB1.PFS_Customer_Name);
  PARAMETER(DB1.PFS_Record_Status);
  PARAMETER(DB1.PFS_Process_Status);
  PARAMETER(DB1.PFS_Error_Reason);
  PARAMETER(DB1.PFS_Create_Date);
  PARAMETER(DB1.PFS_Create_Time);
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?USER: Processing if Data record not found

   // LCL.PFS Batch Seq = CON.9999999
   LCL.PFS_Batch_Seq = 9999999;

   EXECUTE FUNCTION(Rtv Last PFS Batch SeqRT) TYPE(RTVOBJ) FILE(PBC3CPP)           AC2148741;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.PFS Batch Seq = CON.1
    PAR.PFS_Batch_Seq = 1;

    //?USER: Process Data record

    // PAR.PFS Batch Seq = DB1.PFS Batch Seq + CON.1
    PAR.PFS_Batch_Seq = DB1.PFS_Batch_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt Cg) TYPE(CRTOBJ) FILE(PBC3CPP)           AC2129356;
   PARAMETER(PAR.PFS_Company_Number);
   PARAMETER(PAR.PFS_Batch_Date);
   PARAMETER(PAR.PFS_Batch_Time);
   PARAMETER(PAR.PFS_User_ID);
   PARAMETER(LCL.PFS_Batch_Seq);
   PARAMETER(PAR.PFS_Production_Date);
   PARAMETER(PAR.PFS_Item_Code);
   PARAMETER(PAR.PFS_Label_Type);
   PARAMETER(PAR.PFS_Order_Number);
   PARAMETER(PAR.PFS_Order_Line_Item_Nbr);
   PARAMETER(PAR.PFS_Order_Line_Sts);
   PARAMETER(PAR.PFS_Ordered_Qty);
   PARAMETER(PAR.PFS_Inventory_Alloc_Qty);
   PARAMETER(PAR.PFS_Fill_Qty_Prod);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_0);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_1);
   PARAMETER(PAR.PFS_Fill_Qty_Ship_Day_2);
   PARAMETER(PAR.PFS_Load_ID);
   PARAMETER(PAR.PFS_Loading_Sequence);
   PARAMETER(PAR.PFS_Scheduled_Ship_Date);
   PARAMETER(PAR.PFS_Load_Deadline_Date);
   PARAMETER(PAR.PFS_Load_Deadline_Time);
   PARAMETER(PAR.PFS_Item_Structure_Type);
   PARAMETER(PAR.PFS_Item_Structure_Group);
   PARAMETER(PAR.PFS_Item_Structure_Class);
   PARAMETER(PAR.PFS_Primary_UOM);
   PARAMETER(PAR.PFS_Fresh_Frozen);
   PARAMETER(PAR.PFS_Base_Converted);
   PARAMETER(PAR.PFS_Baseline_Schedule);
   PARAMETER(PAR.PFS_Palletize);
   PARAMETER(PAR.PFS_Pallet_Type);
   PARAMETER(PAR.PFS_Slip_Sheet);
   PARAMETER(PAR.PFS_Customer_Name);
   PARAMETER(PAR.PFS_Record_Status);
   PARAMETER(PAR.PFS_Process_Status);
   PARAMETER(PAR.PFS_Error_Reason);
   PARAMETER(PAR.PFS_Create_Date);
   PARAMETER(PAR.PFS_Create_Time);
   PARAMETER(PAR.PFS_Change_Date);
   PARAMETER(PAR.PFS_Change_Time);
   //?USER: Process Data record

   //?Do nothing
  }

  ENDIF;

 }

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send information message - 'Batch not Sent. - No Production Schedule records have been selected.'
MESSAGE(USR4820 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send information message - 'Send is only allowed when Process Status is Ready to Send.'
MESSAGE(USR4819 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Send error message - 'You are only allowed to Send your Production Schedule Batches.'
ERROR(USR4828);

ENDIF;

ENDIF;

