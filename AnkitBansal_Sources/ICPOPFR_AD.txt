// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICPOPFR
// ?Date: 14.08.2025 Time: 12:03:07
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?USER: Record selection processing

//?Validate warehouse match if entered, quit if single company
CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

CASE;

// IF PAR.Warehouse Code NE DB1.Warehouse Code
IF PAR.Warehouse_Code <> DB1.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Company Number - 3 is not equal to zero
IF PAR.Company_Number <> *ZERO;

// Execute function Prt End of File 'A'    US.
EXECUTE FUNCTION(Prt End of File 'A'    US) TYPE(EXCUSRSRC) ('USKXUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE
}


ENDIF;

ENDIF;

ENDIF;

//?Validate cycle count if entered, quit if single co/whse
CASE;

// IF PAR.Cycle Count Code - IB is Entered
IF PAR.Cycle_Count_Code_IB <> *BLANK;

CASE;

// IF PAR.Cycle Count Code - IB NE DB1.Cycle Count Code - IB
IF PAR.Cycle_Count_Code_IB <> DB1.Cycle_Count_Code_IB;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Company Number - 3 is not equal to zero
IF PAR.Company_Number <> *ZERO;

CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

// Execute function Prt End of File 'A'    US.
EXECUTE FUNCTION(Prt End of File 'A'    US) TYPE(EXCUSRSRC) ('USKXUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE
}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Accounting Company Number = PAR.Accounting Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Cycle Count Code = PAR.Cycle Count Code - IB
X1PG_Cycle_Count_Code = PAR.Cycle_Count_Code_IB;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

CASE;

IF NEW Warehouse_Code;
EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// Print Warehouse Code header format
PRINT Warehouse Code header format;

ENDIF;

CASE;

IF NEW Cycle_Count_Code_IB;
// Print Cycle Count Code header format
PRINT Cycle Count Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Print Phys. Count Detail
EXECUTE FUNCTION(Prt Phys Cnt Sheet Dtl PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.UOM_Primary);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

CASE;

IF NEW Item_Code;
// CUR.Unit of Measure. . . . . = PAR.U/M - Primary
CUR.Unit_of_Measure = PAR.UOM_Primary;

// Print Item Code totals format
PRINT Item Code totals format;

ENDIF;

// SUPPRESSED PRINT Cycle Count Code totals format

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Company Number - 3 totals format

