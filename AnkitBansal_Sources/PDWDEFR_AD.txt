// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDWDEFR
// ?Date: 14.08.2025 Time: 03:36:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?***** Change Log and Comments
DO;

//?*****
//?** 05/03/2007 LJB OMS011
//?** Add the record status field to the screen. Default, initially, to
//?** display Active only. Select only matching status.
//?** Pass record status to the printer listing as well.
//?** Change DLT to delete all matching Ham Group Customer and
//?** Ham Group Item records.
//?*****
ENDDO;

//?USER: Initialize subfile header

//?** Default screen to initially display Active only  5/03/2007 LJB
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?** Save ctl context record status
CASE;

// IF CTL.Record Status NE PAR.USR Record Status
IF CTL.Record_Status <> PAR.USR_Record_Status;

// PAR.USR Record Status = CTL.Record Status
PAR.USR_Record_Status = CTL.Record_Status;

ENDIF;

//?USER: Initialize subfile record (existing record)

//?** Don't select if Record Status is entered
CASE;

// IF CTL.Record Status is Valid Entries
IF CTL.Record_Status = 'A'/'D'/'I';

CASE;

// IF DB1.Record Status NE CTL.Record Status
IF DB1.Record_Status <> CTL.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Don't select if Record Status is entered
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?CALC: Subfile control function fields

//?** If Record Status is entered, select only matching
CASE;

// IF CTL.Record Status is Valid Entries
IF CTL.Record_Status = 'A'/'D'/'I';

CASE;

// IF DB1.Record Status NE CTL.Record Status
IF DB1.Record_Status <> CTL.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.Record Status NE PAR.USR Record Status
IF CTL.Record_Status <> PAR.USR_Record_Status;

// PAR.USR Record Status = CTL.Record Status
PAR.USR_Record_Status = CTL.Record_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?** If Record Status is entered, select only matching
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?USER: Validate subfile control

// PAR.Change Modes          USR = CND.No
PAR.Change_Modes_USR = 'N';

CASE;

// IF CTL.Record Status NE PAR.USR Record Status
IF CTL.Record_Status <> PAR.USR_Record_Status;

// PAR.USR Record Status = CTL.Record Status
PAR.USR_Record_Status = CTL.Record_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CALC: Subfile record function fields

//?** Change the Ham Group Customer status if the Ham Group status changes
CASE;

// IF RCD.Record Status is Valid Entries
IF RCD.Record_Status = 'A'/'D'/'I';

EXECUTE FUNCTION(RTV/CHG Ham Group/Cust RT) TYPE(RTVOBJ) FILE(PDNCCPP)          AC1565364;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Record_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Ham Group/Customer CH) TYPE(CHGOBJ) FILE(PDNCCPP)          AC1564692;
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ham_Group_Cust_Reference);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  //?** change from par context                  05/04/2007 LJB OMS011
  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(RTV/CHG Ham Group/Item RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1565365;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Record_Status);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Ham Group/Item     CH) TYPE(CHGOBJ) FILE(PDM1REP)          AC1564647;
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(DB1.Ham_Group_Item_Code);
 PARAMETER(DB1.Ham_Group_Item_Sequence);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  //?** change to update from par context       05/04/2007 LJB OMS011
  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?Validate Ham Group Delete Request.
DO;

EXECUTE FUNCTION(VAL Ham Group on Order RT) TYPE(RTVOBJ) FILE(PDNDCPP)          AC1567575;
PARAMETER(RCD.Ham_Group_Number);
{
 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Ham Group can't be deleted, it has been used on an order.'
ERROR(USR2874);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is *Edit Ham Group Items
IF RCD.*SFLSEL = '7'/'7';

//?Edit Ham Group Items.
DO;

// Call program EDT Ham Group/Item     EF.
CALL PROGRAM(EDT Ham Group/Item     EF) ('PDVTEFR');
PARAMETER(RCD.Ham_Group_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

// IF RCD.*SFLSEL is *Edit Ham Group Cust
IF RCD.*SFLSEL = '8'/'8';

//?Edit Ham Group Customers.
DO;

// Call program EDT Ham Group/Customer EF.
CALL PROGRAM(EDT Ham Group/Customer EF) ('PDVUEFR');
PARAMETER(RCD.Ham_Group_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDDO;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Ham Group          CR) TYPE(CRTOBJ) FILE(PDM0REP)          AC1564600;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Ham_Group_Description);
PARAMETER(RCD.Default_Start_Weight);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 //?** Update fields from parameter list            05/04/2007 LJB OMS011
 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Ham Group(cascade) DL) TYPE(DLTOBJ) FILE(PDM0REP)          AC1565363;
PARAMETER(RCD.Ham_Group_Number);
{
 //?USER: Processing before Data update

 //?Delete related records in other files. (cascading delete)
 DO;

 //?** 05/09/2007 OMS011 LJB  Delete all matching records
 // Call program Zzz/DLT Ham Grp/Cust   XF.
 CALL PROGRAM(Zzz/DLT Ham Grp/Cust   XF) ('PMGWXFR');
 PARAMETER(PAR.Ham_Group_Number);

 // Call program Zzz/DLT Ham Grp/Itm    XF.
 CALL PROGRAM(Zzz/DLT Ham Grp/Itm    XF) ('PMGXXFR');
 PARAMETER(PAR.Ham_Group_Number);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDDO;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Ham Group          CH) TYPE(CHGOBJ) FILE(PDM0REP)          AC1564601;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Ham_Group_Description);
PARAMETER(RCD.Default_Start_Weight);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 //?** Allow change of record status and other fields 05/04/2007 LJB OMS011
 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Extra processing after DBF update

//?** Flag record as "D" - do not delete the record
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PAR.Change Modes          USR = CND.Yes
PAR.Change_Modes_USR = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

//?Toggle Display of Options.
DO;

CASE;

// IF PAR.Display Flag is Yes
IF PAR.Display_Flag = 'Y';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

//?Print Ham Group Master Report.
DO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Ham Group Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

//?Dynamically override SBMJOB with job queue from Print Options.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?Submit the Report.
// Call program Zzz Ham Group Listing  XF.
SBMJOB;
CALL PROGRAM(Zzz Ham Group Listing  XF) ('PDV8XFR');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(CTL.Ham_Group_Number);
PARAMETER(CTL.Record_Status);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

ENDDO;

// IF PAR.Change Modes          USR is Yes
IF PAR.Change_Modes_USR = 'Y';

//?Change Program Mode from "Add" to "Change".
DO;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDDO;

ENDIF;

