// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDQIE1R
// ?Date: 14.08.2025 Time: 03:35:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Validate detail screen fields

CASE;

// IF DTL.Claim Status is Sls Approved
IF DTL.Claim_Status = 'S';

//?Claim is sales person approved.
DO;

// DTL.Claim Approved Amount = DTL.Claim Amount
DTL.Claim_Approved_Amount = DTL.Claim_Amount;

ENDDO;

// IF DTL.Claim Status is Denied
IF DTL.Claim_Status = 'D';

//?Claim is denied.
DO;

// DTL.Claim Approved Amount = CON.*ZERO
DTL.Claim_Approved_Amount = *ZERO;

CASE;

// IF DTL.Claim Resolution Explan. is Blank
IF DTL.Claim_Resolution_Explan = *BLANK;

// Send error message - 'Explanation is required.'
ERROR(USR2827);
MSGPARM(DTL.Claim_Resolution_Explan);

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim Status must be either Sales Approved or Denied.'
ERROR(USR2784);
MSGPARM(DTL.Claim_Status);

ENDIF;

//?CALC: Detail screen function fields

// DTL.Claim Status Desc     USR = Condition name of DTL.Claim Status
DTL.Claim_Status_Desc_USR = RTVCND(DTL.Claim_Status);

//?USER: Validate detail screen relations

CASE;

// IF PGM.*Defer confirm is Proceed to confirm
IF PGM.*Defer_confirm = 'N';

CASE;

// IF DTL.Claim Status is Sls Approved
IF DTL.Claim_Status = 'S';

//?Sales Approved.
DO;

// DTL.Sales Approved Date = JOB.*Job date
DTL.Sales_Approved_Date = JOB.*Job_date;

// DTL.Sales Approved Time = JOB.*Job time
DTL.Sales_Approved_Time = JOB.*Job_time;

// DTL.Sales Approved User = JOB.*USER
DTL.Sales_Approved_User = JOB.*USER;

// DTL.Approved/Denied Date = CON.*ZERO
DTL.Approved_Denied_Date = *ZERO;

// DTL.Approved/Denied Time = CON.*ZERO
DTL.Approved_Denied_Time = *ZERO;

// DTL.Approved/Denied User = CON.*BLANK
DTL.Approved_Denied_User = *BLANK;

// DTL.Claim Resolution Explan. = CON.*BLANK
DTL.Claim_Resolution_Explan = *BLANK;

ENDDO;

// IF DTL.Claim Status is Denied
IF DTL.Claim_Status = 'D';

//?Denied.
DO;

// DTL.Sales Approved Date = CON.*ZERO
DTL.Sales_Approved_Date = *ZERO;

// DTL.Sales Approved Time = CON.*ZERO
DTL.Sales_Approved_Time = *ZERO;

// DTL.Sales Approved User = CON.*BLANK
DTL.Sales_Approved_User = *BLANK;

// DTL.Approved/Denied Date = JOB.*Job date
DTL.Approved_Denied_Date = JOB.*Job_date;

// DTL.Approved/Denied Time = JOB.*Job time
DTL.Approved_Denied_Time = JOB.*Job_time;

// DTL.Approved/Denied User = JOB.*USER
DTL.Approved_Denied_User = JOB.*USER;

ENDDO;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG SalesApprv/Denied  CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1534191;
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Approved_Amount);
PARAMETER(DTL.Sales_Approved_Date);
PARAMETER(DTL.Sales_Approved_Time);
PARAMETER(DTL.Sales_Approved_User);
PARAMETER(DTL.Approved_Denied_Date);
PARAMETER(DTL.Approved_Denied_Time);
PARAMETER(DTL.Approved_Denied_User);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


