// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPN3XFR
// ?Date: 14.08.2025 Time: 03:41:18
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(PFS Inventory Adj     RT) TYPE(RTVOBJ) FILE(PPBGCPP)           AC1734586;
PARAMETER(PAR.PFS_Inv_Adj_Prc_Ship_USR);
PARAMETER(PAR.PFS_Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // PAR.PFS Process Status = CON.*ZERO
 PAR.PFS_Process_Status = *ZERO;

 // PAR.PFS Error Reason = CND.No Error
 PAR.PFS_Error_Reason = *BLANK;

 //?***** VALIDATION *****
 DO;

 // PAR.Company Number = DB1.PFS Company Number
 PAR.Company_Number = DB1.PFS_Company_Number;

 // PAR.Item Code = DB1.PFS Item Code
 PAR.Item_Code = DB1.PFS_Item_Code;

 // PAR.Warehouse Code = DB1.PFS Warehouse Code
 PAR.Warehouse_Code = DB1.PFS_From_Warehouse_Code;

 //?VAL:  Transaction Type
 CASE;

 // IF DB1.PFS Transaction Type is *ALL values
 IF DB1.PFS_Transaction_Type = 'P04'/'P03'/'P01'/'P02'/'S01'/'S03'/'S02'/'S04'/'S05'
 /'I01'/'I02'/'F01'/'F02'/'F03'/'F04'/'C01'/'C02'/'C03'/'C04'/'B01'/'R01'/'I03'/'I04'
 /'W01'/'P05'/'S06'/'S07';

 //?UPL: Freezer Transactions
 CASE;

 // IF DB1.PFS Transaction Type is Freezer Transactions
 IF DB1.PFS_Transaction_Type = 'F03'/'F01'/'F04'/'F02';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('FRZTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 CASE;

 // IF DB1.PFS Company Number is St. Joseph
 IF DB1.PFS_Company_Number = 960;

 // AND DB1.PFS Location Code is GT 3
 AND DB1.PFS_Location_Code > 3;

 // AND DB1.PFS Pallet Number is Entered
 AND DB1.PFS_Pallet_Number <> *ZERO;

 // AND DB1.PFS Transaction Type is FM: Freezer Putaway
 AND DB1.PFS_Transaction_Type = 'F01';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Duplicate Putaway
 PAR.PFS_Error_Reason = 'DUPPUT';

 ENDIF;

 ENDIF;

 //?UPL: Inventory Transactions (Insight)
 CASE;

 // IF DB1.PFS Transaction Type is Inventory Transactions
 IF DB1.PFS_Transaction_Type = 'I01'/'I02'/'I04'/'I03';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('INVTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Production Transactions (Informer)
 CASE;

 // IF DB1.PFS Transaction Type is Production Transactions
 IF DB1.PFS_Transaction_Type = 'P04'/'P02'/'P01'/'P03'/'P05';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('PRDTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Shipping Transactions
 CASE;

 // IF DB1.PFS Transaction Type is Shipping Transactions
 IF DB1.PFS_Transaction_Type = 'S01'/'S02'/'S03'/'S05'/'S04'/'S07';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('SHPTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Batch Label Printing
 CASE;

 // IF DB1.PFS Transaction Type is Batch Printing
 IF DB1.PFS_Transaction_Type = 'B01';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('BTCPRT');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Cycle Count
 CASE;

 // IF DB1.PFS Transaction Type is Cycle Count Transactions
 IF DB1.PFS_Transaction_Type = 'C02'/'C04'/'C01'/'C03';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('CYCTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Warehouse Transfer
 CASE;

 // IF DB1.PFS Transaction Type is Warehouse Transfer
 IF DB1.PFS_Transaction_Type = 'W01'/'S06';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('WHSTFR');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?VAL:  Transaction Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Transaction Type Error
 PAR.PFS_Error_Reason = 'TRNTYP';

 ENDIF;

 //?VAL:  Production Transaction Tracking Type
 CASE;

 // IF DB1.PFS Transaction Type is Production Transactions
 IF DB1.PFS_Transaction_Type = 'P04'/'P02'/'P01'/'P03'/'P05';

 CASE;

 // IF DB1.PFS Tracking Type is Entered
 IF DB1.PFS_Tracking_Type <> *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Tracking Type
 PAR.PFS_Error_Reason = 'TRKTYP';

 ENDIF;

 ENDIF;

 //?Test Label
 CASE;

 // IF DB1.PFS Tracking Type is Test Label
 IF DB1.PFS_Tracking_Type = 5;

 // OR DB1.PFS Item Code is 2221 - 2223
 OR DB1.PFS_Item_Code >= 2221;
 AND DB1.PFS_Item_Code <= 2223;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Test Label
 PAR.PFS_Error_Reason = 'TSTLBL';

 ENDIF;

 EXECUTE FUNCTION(Val WHS/Rtv ActCo PFS RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801267;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Lot_Tracking_Flag);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?Warehouse Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Warehouse Code
 PAR.PFS_Error_Reason = 'WHSCDE';

 ENDIF;

 //?Location Code & Receive/Located Date
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 CASE;

 // IF DB1.PFS Transaction Type is BP: Batch Label Print
 IF DB1.PFS_Transaction_Type = 'B01';

 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Val Itm/Whs,FG/WP PFS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1740513;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Code Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF ( PGM.*Return_code = 'Y2U0005';

 // AND DB1.PFS Transaction Type is Production Transactions
 AND DB1.PFS_Transaction_Type = 'P04'/'P02'/'P01'/'P03'/'P05' );

 // OR PAR.Primal Group Code is Scale Check
 OR PAR.Primal_Group_Code = 'SCALE';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Item Code
 PAR.PFS_Error_Reason = 'ITMCDE';

 //?Item Code Not Found
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?VAL:  WIP Item Code
 CASE;

 // IF PAR.Item Type Code is Finished Goods
 IF PAR.Item_Type_Code = 'FG';

 // AND DB1.PFS Tracking Type is Work In Process
 AND DB1.PFS_Tracking_Type = 3;

 // PAR.Item Code = DB1.PFS Item Code + CON.9000000
 PAR.Item_Code = DB1.PFS_Item_Code + 9000000;

 EXECUTE FUNCTION(Val Itm/Whs,FG/WP PFS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1740513;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.WIP Item Code
 PAR.PFS_Error_Reason = 'WIPCDE';

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Unit Cost Active   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1413977;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Record not found instead of unit cost check  5.4.6 RMC PFS011
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Item Balance
 PAR.PFS_Error_Reason = 'ITMBAL';

 ENDIF;

 //?Shift Not Entered
 CASE;

 // IF DB1.PFS Shift is Not Entered
 IF DB1.PFS_Shift = *BLANK;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Shift
 PAR.PFS_Error_Reason = 'SHIFT';

 ENDIF;

 //?09/08/09 PKD E00475 Not using Production Date.  Label Date will
 //?             be used as the Production Date.
 //?Label Date Not Entered
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 CASE;

 // IF DB1.PFS Transaction Type is Freezer Transactions
 IF DB1.PFS_Transaction_Type = 'F03'/'F01'/'F04'/'F02';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.PFS Label Date is Not Entered
 IF DB1.PFS_Label_Date = *ZERO;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Label Date
 PAR.PFS_Error_Reason = 'LBLDTE';

 ENDIF;

 ENDIF;

 ENDIF;

 //?09/08/09 PKD E00475 Use Label Date for Production Date.
 //?Production & Label Date
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 //?--- Production Date ---
 //?Convert Production Date
 CASE;

 // IF DB1.PFS Production Date is Entered
 IF DB1.PFS_Production_Date <> *ZERO;

 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.PFS_Production_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 ENDIF;

 //?--- Label Date ---
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Label_Date);
 PARAMETER(DB1.PFS_Label_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 //?INIT: Production Date Not Entered
 CASE;

 // IF DB1.PFS Production Date is Not Entered
 IF DB1.PFS_Production_Date = *ZERO;

 // PAR.Production Date = PAR.Label Date
 PAR.Production_Date = PAR.Label_Date;

 ENDIF;

 //?INIT: Label Date Not Entered
 CASE;

 // IF DB1.PFS Label Date is Not Entered
 IF DB1.PFS_Label_Date = *ZERO;

 // PAR.Label Date = PAR.Production Date
 PAR.Label_Date = PAR.Production_Date;

 ENDIF;

 //?09/08/09 PKD E00475 Use Label Date for Production Date.
 // PAR.Production Date = PAR.Label Date
 PAR.Production_Date = PAR.Label_Date;

 //?Production & Label Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 ENDIF;

 //?VAL:  SM: Ship Regular Order, Ship Transfer Order, Unship
 CASE;

 // IF DB1.PFS Transaction Type is SM: Ship Regular Order
 IF DB1.PFS_Transaction_Type = 'S01';

 // OR DB1.PFS Transaction Type is SM: Transfer Order
 OR DB1.PFS_Transaction_Type = 'S02';

 // OR DB1.PFS Transaction Type is SM: UnShip Reg/Tfr Ord
 OR DB1.PFS_Transaction_Type = 'S03';

 // PAR.Order Number = DB1.PFS Order Number
 PAR.Order_Number = DB1.PFS_Order_Number;

 EXECUTE FUNCTION(RTV Order Info PFS    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1735857;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(NLL.Carrier_Code);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(NLL.Load_ID);
 PARAMETER(PAR.Event_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?VAL:  item type must be FG for shipping trans      RMC 2/25/08
 CASE;

 // IF PAR.Item Type Code is Finished Good
 IF PAR.Item_Type_Code = 'FG';

 // OR DB1.PFS Tracking Type is Finished Goods
 OR DB1.PFS_Tracking_Type = 1;

 //?VAL:  item type must be FG for shipping trans      RMC 2/25/08
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.PFS Error Reason is No Error
 IF PAR.PFS_Error_Reason = *BLANK;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.WIP Item Code
 PAR.PFS_Error_Reason = 'WIPCDE';

 ENDIF;

 ENDIF;

 //?VAL:  Order Number
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?VAL:  Order Number
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Order Number
 PAR.PFS_Error_Reason = 'ORDNUM';

 ENDIF;

 //?***  Performing no validation of Order Status at this time.
 //?     The Shipping Upload will confirm the total are the same
 //?     between Manifest Detail and PFS Ship Order Detail.
 //?Get 1st not cancelled line item's whse    3/30/06 RMC
 EXECUTE FUNCTION(RTV Whse/DLS/Item     RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1944027;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Detail_Line_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 //?RMC 11/8/17 this chk doesnt work with that rtv. so commenting it!
 //?VAL:  Warehouse
 CASE;

 // IF LCL.Warehouse Code NE DB1.PFS Warehouse Code
 IF LCL.Warehouse_Code <> DB1.PFS_From_Warehouse_Code;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Order Warehouse
 PAR.PFS_Error_Reason = 'ORDWHS';

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 EXECUTE FUNCTION(PFS Val Dup Serial#   RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1752340;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.PFS_Serial_Number);
 PARAMETER(PAR.Label_Date);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?DUPLICATE CASE FOUND
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // Retrieve message - 'DUPLICATE CASE: Order &1 Serial# &2.  Please contact IS Support immediately.
 LCL.Office_Message_USR = RTVMSG(USR3596);
 PARAMETER(LCL.Office_Message_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.PFS_Serial_Number);

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('PRKDUPCSE');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program SND Pager Msg (MPLUS) UP.
 CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
 PARAMETER(LCL.System_Value_Alpha);
 PARAMETER(LCL.Office_Message_USR);

 //?DUPLICATE CASE FOUND
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If not duplicate, then move Order's Warehouse for processing
 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.PFS Process Status = CND.Not Processed
 PAR.PFS_Process_Status = *ZERO;

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL:  SM: Transfer Order - Transfer To Warehouse
 CASE;

 // IF DB1.PFS Transaction Type is SM: Transfer Order
 IF DB1.PFS_Transaction_Type = 'S02';

 // OR PAR.Order Type - Sales is Transfer Order
 OR PAR.Order_Type_Sales = 'TR';

 CASE;

 // IF DB1.PFS To Warehouse Code is Not Entered
 IF DB1.PFS_To_Warehouse_Code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Val Warehouse PFS     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1735131;
 PARAMETER(DB1.PFS_To_Warehouse_Code);
 PARAMETER(LCL.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?Warehouse Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Transfer To Warehouse
 PAR.PFS_Error_Reason = 'TFRWHS';

 ENDIF;

 //?Location Code
 CASE;

 // IF LCL.Lot Tracking Flag is yes
 IF LCL.Lot_Tracking_Flag = 'Y';

 //?Location Code
 CASE;

 // IF DB1.PFS To Location Code is Not Entered
 IF DB1.PFS_To_Location_Code = *ZERO;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL:  Warehouse Transfer To Warehouse
 CASE;

 // IF DB1.PFS Transaction Type is WT: Warehouse Transfer
 IF DB1.PFS_Transaction_Type = 'W01';

 CASE;

 // IF DB1.PFS To Warehouse Code is Not Entered
 IF DB1.PFS_To_Warehouse_Code = *BLANK;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Transfer To Warehouse
 PAR.PFS_Error_Reason = 'TFRWHS';

 ENDIF;

 ENDIF;

 //?RMC E00475 dont error this out. in some instances we get the S01 1st
 //?8/13/09    but still want to add the prod to inventory
 //?VAL:  Production P02 Issue- duplicate case   new RMC 4/13/06
 CASE;

 // IF DB1.PFS Transaction Type is PM: Issue
 IF DB1.PFS_Transaction_Type = 'P02';

 EXECUTE FUNCTION(Val DupCase for Issue RT) TYPE(RTVOBJ) FILE(PPBGCPP)           AC1779559;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Serial_Number);
 PARAMETER(DB1.PFS_Label_Date);
 PARAMETER('P02');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Duplicate case
 PAR.PFS_Error_Reason = 'DUPCSE';

 ENDIF;

 ENDIF;

 //?VAL:  ACTIVE TRANSACTION TYPES
 DO;

 //?UPL: Freezer Transactions
 CASE;

 // IF DB1.PFS Transaction Type is Freezer Transactions
 IF DB1.PFS_Transaction_Type = 'F03'/'F01'/'F04'/'F02';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('FRZTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Inventory Transactions (Insight)
 CASE;

 // IF DB1.PFS Transaction Type is Inventory Transactions
 IF DB1.PFS_Transaction_Type = 'I01'/'I02'/'I04'/'I03';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('INVTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Production Transactions (Informer)
 CASE;

 // IF DB1.PFS Transaction Type is Production Transactions
 IF DB1.PFS_Transaction_Type = 'P04'/'P02'/'P01'/'P03'/'P05';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('PRDTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Shipping Transactions
 CASE;

 // IF DB1.PFS Transaction Type is Shipping Transactions
 IF DB1.PFS_Transaction_Type = 'S01'/'S02'/'S03'/'S05'/'S04'/'S07';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('SHPTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Batch Label Printing
 CASE;

 // IF DB1.PFS Transaction Type is Batch Printing
 IF DB1.PFS_Transaction_Type = 'B01';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('BTCPRT');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 //?UPL: Cycle Count
 CASE;

 // IF DB1.PFS Transaction Type is Cycle Count Transactions
 IF DB1.PFS_Transaction_Type = 'C02'/'C04'/'C01'/'C03';

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER('CYCTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is No
 IF LCL.PFS_Carlisle_Active = 'N';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 ENDIF;

 ENDDO;

 //?10/20/06 PKD Changed to use WHS PFS Interface
 EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?VAL:  ACTIVE WAREHOUSE
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND PAR.Warehouse Code is Warehouse Code not Blank
 AND PAR.Warehouse_Code <> *BLANK;

 //?10/20/06 PKD added the following condition
 CASE;

 // IF LCL.WHS PFS Interface is Upload/Both
 IF LCL.WHS_PFS_Interface = 'U'/'B';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 //?VAL:  ACTIVE WAREHOUSE
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 //?11/04/08 PKD They are sending up zero for warehouse
 //?VAL: Warehouse Code
 CASE;

 // IF DB1.PFS Warehouse Code is Not Entered
 IF DB1.PFS_From_Warehouse_Code = *BLANK;

 // OR DB1.PFS Warehouse Code is Not Valid
 OR DB1.PFS_From_Warehouse_Code = '0';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Warehouse Code
 PAR.PFS_Error_Reason = 'WHSCDE';

 ENDIF;

 //?ERROR:  DO NOT SELECT RECORD
 CASE;

 // IF PAR.PFS Process Status is Error
 IF PAR.PFS_Process_Status = 2;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?ERROR:  DO NOT SELECT RECORD
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Non Ship Transactions --- Excluded in the Logical 01/03/13
 CASE;

 // IF PAR.PFS Inv Adj Prc Ship USR is Process Not Ship Trans
 IF PAR.PFS_Inv_Adj_Prc_Ship_USR = *BLANK;

 // AND DB1.PFS Transaction Type is Shipping Non Return Trans
 AND DB1.PFS_Transaction_Type = 'S01'/'S02'/'S03';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Ship Transactions
 CASE;

 // IF PAR.PFS Inv Adj Prc Ship USR is Process Ship Trans
 IF PAR.PFS_Inv_Adj_Prc_Ship_USR = 'S';

 CASE;

 // IF DB1.PFS Transaction Type is Not Shipping Trans
 IF DB1.PFS_Transaction_Type = 'B01'/'C02'/'C04'/'C01'/'C03'/'F03'/'F01'/'F04'/'F02'
 /'I01'/'I02'/'R01'/'P04'/'P02'/'P01'/'P03'/'I04'/'I03'/'P05'/'S04'/'S07'/'S05';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.PFS Order Number NE PAR.PFS Order Number
 IF DB1.PFS_Order_Number <> PAR.PFS_Order_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?OMT: F02, C03
 CASE;

 // IF DB1.PFS Transaction Type is FM: Freezer ReLocate
 IF DB1.PFS_Transaction_Type = 'F02';

 // OR DB1.PFS Transaction Type is CC: Move to Current Loc
 OR DB1.PFS_Transaction_Type = 'C03';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?OMT: F03 QA Hold or F04 QA Hold
 CASE;

 // IF DB1.PFS Transaction Type is FM: Freezer Hold
 IF ( DB1.PFS_Transaction_Type = 'F03';

 // AND DB1.PFS Inv Adj Reason Code is Q1 QA HOLD (Chill-time)
 AND DB1.PFS_Inv_Adj_Reason_Code = '6' );

 // OR DB1.PFS Transaction Type is FM: Freezer Release Hold
 OR ( DB1.PFS_Transaction_Type = 'F04';

 // AND DB1.PFS Inv Adj Reason Code is Q1 QA HOLD (Chill-time)
 AND DB1.PFS_Inv_Adj_Reason_Code = '6' );

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?OMT: Restoration In Progress (08/13/09 PKD E00475)(7/16/14 RMC chg time)
 CASE;

 // IF JOB.*Job time is Between 2:30am & 4:00am
 IF JOB.*Job_time >= 023000;
 AND JOB.*Job_time <= 040000;

 // Call program Exc Rtv Restore Sts   XF.
 CALL PROGRAM(Exc Rtv Restore Sts   XF) ('PBRLXFR');
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(LCL.In_Progress_Sts_USR);

 CASE;

 // IF LCL.In Progress Sts USR is yes
 IF LCL.In_Progress_Sts_USR = 'Y';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?ERROR: Inventory Transactions Only
 CASE;

 // IF DB1.PFS Transaction Type is Ship/Unship Order
 IF DB1.PFS_Transaction_Type = 'S01'/'S02'/'S03';

 //?ERROR: Inventory Transactions Only
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Error Reason = CND.Restoration In Progress
 PAR.PFS_Error_Reason = 'RSTIP';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Exc Restoration Sts   RT.
 CALL PROGRAM(Exc Restoration Sts   RT) ('PBRMXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.In_Progress_Sts_USR);

 CASE;

 // IF LCL.In Progress Sts USR is yes
 IF LCL.In_Progress_Sts_USR = 'Y';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?ERROR: Inventory Transactions Only
 CASE;

 // IF DB1.PFS Transaction Type is Ship/Unship Order
 IF DB1.PFS_Transaction_Type = 'S01'/'S02'/'S03';

 //?ERROR: Inventory Transactions Only
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Error Reason = CND.Restoration In Progress
 PAR.PFS_Error_Reason = 'RSTIP';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?***** PROCESS RECORD *****
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Initialize
 DO;

 // PAR.Partial Item Code = PAR.Item Code
 PAR.Partial_Item_Code = PAR.Item_Code;

 //?--- Transaction Date ---
 // PAR.Transaction Date Code = JOB.*Job date
 PAR.Transaction_Date_Code = JOB.*Job_date;

 //?------------------------
 // PAR.Shift Number = DB1.PFS Shift
 PAR.Shift_Number = DB1.PFS_Shift;

 // PAR.Transaction Quantity = DB1.PFS Transaction Quantity
 PAR.Transaction_Quantity = DB1.PFS_Transaction_Quantity;

 // PAR.Transaction Weight = DB1.PFS Transaction Wgt-Net
 PAR.Transaction_Weight = DB1.PFS_Transaction_Wgt_Net;

 //?LOT TRACKING WAREHOUES
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?----- Location Code -----
 //?01/09/09 PKD Use Default Location of 7777 for all Freezer Inventory
 // PAR.Location Code = CON.7777
 PAR.Location_Code = 7777;

 //?LOT TRACKING WAREHOUES
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Location Code = CVTVAR(CON.*BLANK)
 PAR.Location_Code = CVTVAR(*BLANK);

 ENDIF;

 //?Ship/Unship Order
 CASE;

 // IF DB1.PFS Transaction Type is Ship/Unship Order
 IF DB1.PFS_Transaction_Type = 'S01'/'S02'/'S03';

 // PAR.Order Number = DB1.PFS Order Number
 PAR.Order_Number = DB1.PFS_Order_Number;

 // PAR.Order Sequence Number = DB1.PFS Order Line Item #
 PAR.Order_Sequence_Number = DB1.PFS_Order_Line_Item_Nbr;

 // PAR.Order Secondary Line Seq = CON.1
 PAR.Order_Secondary_Line_Seq = 1;

 ENDIF;

 //?------------------------
 // PAR.Reason Code = CON.*BLANK
 PAR.Reason_Code = *BLANK;

 ENDDO;

 //?***** PRODUCTION & INVENTORY TRANSACTIONS *****
 CASE;

 // IF DB1.PFS Transaction Type is Production Transactions
 IF DB1.PFS_Transaction_Type = 'P04'/'P02'/'P01'/'P03'/'P05';

 // OR DB1.PFS Transaction Type is Inventory Transactions
 OR DB1.PFS_Transaction_Type = 'I01'/'I02'/'I04'/'I03';

 // OR DB1.PFS Transaction Type is Cycle Count Inv Adjust
 OR DB1.PFS_Transaction_Type = 'C02'/'C04'/'C01';

 // OR DB1.PFS Transaction Type is BP: Batch Label Print
 OR DB1.PFS_Transaction_Type = 'B01';

 // OR DB1.PFS Transaction Type is WT: Warehouse Transfer
 OR DB1.PFS_Transaction_Type = 'W01';

 CASE;

 // IF DB1.PFS Transaction Type is PM: Production
 IF DB1.PFS_Transaction_Type = 'P01';

 //?PROCESS: Finished Goods, WIP, & Partial Production
 CASE;

 // IF DB1.PFS Tracking Type is Finished Goods
 IF DB1.PFS_Tracking_Type = 1;

 // OR DB1.PFS Tracking Type is Export
 OR DB1.PFS_Tracking_Type = 2;

 // OR DB1.PFS Tracking Type is Casings
 OR DB1.PFS_Tracking_Type = 7;

 // OR DB1.PFS Tracking Type is Export 2
 OR DB1.PFS_Tracking_Type = 8;

 // OR DB1.PFS Tracking Type is Work In Process
 OR DB1.PFS_Tracking_Type = 3;

 //?CRT: Item Transaction Detail
 // PAR.Inventory Trans. ID = CND.Receipt
 PAR.Inventory_Trans_ID = 'R';

 // PAR.Inventory Trans. Type = CND.Receipt Production
 PAR.Inventory_Trans_Type = 'RR';

 // PAR.Description = CON.Plant Floor Production
 PAR.Description = 'Plant Floor Production';

 // PAR.Reason Code = CND.P01: Production - PFS
 PAR.Reason_Code = 'PRD';

 //?E3014 3.4.14  RMC  New Reason 10 = freezer transfer
 CASE;

 // IF DB1.PFS Inv Adj Reason Code is PFS: Freezer Transfer
 IF DB1.PFS_Inv_Adj_Reason_Code = '10';

 // PAR.Reason Code = CND.P01/P05: Freezer Transfer
 PAR.Reason_Code = 'RWZ';

 // PAR.Description = CON.Rework for Freezer Txfr
 PAR.Description = 'Rework for Freezer Txfr';

 ENDIF;

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 //?RMC E00475 dont crt if exists. in some instances we get the S01 1st
 //?8/13/09    but still want to add the prod to inventory
 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 EXECUTE FUNCTION(Val Prod Trc P01 rcd  RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1778930;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(DB1.PFS_Label_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?UPD:  Product Trace
 CASE;

 // IF PAR.Item Code is Scale Check Item 2222
 IF PAR.Item_Code = 2222;

 //?UPD:  Product Trace
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 // PAR.PT Prod Date YYYYMMDD = DB1.PFS Production Date
 PAR.PT_Prod_Date_YYYYMMDD = DB1.PFS_Production_Date;

 // PAR.PT Production Time = DB1.PFS Transaction Time
 PAR.PT_Production_Time = DB1.PFS_Transaction_Time;

 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 // PAR.PT Inventory Status = CND.Inventory
 PAR.PT_Inventory_Status = 1;

 // PAR.PT Net Weight = DB1.PFS Transaction Wgt-Net
 PAR.PT_Net_Weight = DB1.PFS_Transaction_Wgt_Net;

 // PAR.PT Gross Weight = DB1.PFS Transaction Wgt-Gross
 PAR.PT_Gross_Weight = DB1.PFS_Transaction_Wgt_Gross;

 // PAR.PT Shift Number = DB1.PFS Shift
 PAR.PT_Shift_Number = DB1.PFS_Shift;

 // PAR.PT Warehouse ID Code = DB1.PFS Warehouse Code
 PAR.PT_Warehouse_ID_Code = DB1.PFS_From_Warehouse_Code;

 // PAR.PT Pallet Number = DB1.PFS Pallet Number
 PAR.PT_Pallet_Number = DB1.PFS_Pallet_Number;

 // PAR.PT Product Code = PAR.Item Code
 PAR.PT_Product_Code = PAR.Item_Code;

 //?--- Offset Production Date & Time ---
 // LCL.Text 10A USR = CVTVAR(DB1.PFS Serial Number)
 LCL.Text_10A_USR = CVTVAR(DB1.PFS_Serial_Number);

 // LCL.Scale ID = SUBSTRING(LCL.Text 10A USR,CON.3,CON.2)
 LCL.Scale_ID = SUBSTRING(LCL.Text_10A_USR:3:2);

 EXECUTE FUNCTION(Rtv Line/ID/Ofst p/Dt RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1678379;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Scale_ID);
 PARAMETER(PAR.Label_Date);
 PARAMETER(LCL.CS_Scale_Offset_Minutes);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 {
  //?USER: Processing if Data record not found

  // PAR.CS Scale Offset Minutes = CON.*ZERO
  PAR.CS_Scale_Offset_Minutes = *ZERO;

  // PAR.CS Exclude from ProdTrace = CND.no
  PAR.CS_Include_in_PrdTr_Match = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Prod Trace Offset RT) TYPE(RTVOBJ) FILE(PPABREP)           AC1678376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Line_Code);
  PARAMETER(PAR.CS_Scale_Offset_Minutes);
  PARAMETER(PAR.CS_Include_in_PrdTr_Match);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?RMC 3/15/06 use par.pt prod date yyyymmdd instead of lcl.pt prod date
 // PAR.PT Offset Prod Date = PAR.PT Prod Date YYYYMMDD
 PAR.PT_Offset_Prod_Date = PAR.PT_Prod_Date_YYYYMMDD;

 // LCL.CS Scale Offset Minutes = LCL.CS Scale Offset Minutes * CON.-1 *
 LCL.CS_Scale_Offset_Minutes = LCL.CS_Scale_Offset_Minutes * -1;

 // PAR.PT Offset Prod Time = PAR.PT Production Time + LCL.CS Scale Offset Minutes *MINUTES
 PAR.PT_Offset_Prod_Time = TIMEINCR(PAR.PT_Production_Time LCL.CS_Scale_Offset_Minutes
 'MN');

 CASE;

 // IF PAR.PT Offset Prod Time GT PAR.PT Production Time
 IF PAR.PT_Offset_Prod_Time > PAR.PT_Production_Time;

 // PAR.PT Offset Prod Date = PAR.PT Offset Prod Date + CON.-1 *DAYS
 PAR.PT_Offset_Prod_Date = DATEINCR(PAR.PT_Offset_Prod_Date '-1' 'DY' 1111110 'NONE' 'N'
 1);

 ENDIF;

 //?--- Item Picture Key ---
 EXECUTE FUNCTION(RTV Item Labels        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1646323;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Picture Key
 CASE;

 // IF PAR.Item Category Code 3 is Loint
 IF PAR.Item_Category_Code_3 = 'L61';

 // PAR.PT Item Picture Key = CON.LOINT
 PAR.PT_Item_Picture_Key = 'LOINT';

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Item Picture Key
 CASE;

 // IF PAR.MTO Code is Entered
 IF PAR.Made_to_Order_Code > *BLANK;

 //?PFN
 CASE;

 // IF PAR.MTO Code is PFN
 IF PAR.Made_to_Order_Code = 'PFN';

 // OR PAR.MTO Code is IWG
 OR PAR.Made_to_Order_Code = 'IWG';

 // PAR.PT Item Picture Key = CON.PFN
 PAR.PT_Item_Picture_Key = 'PFN';

 ENDIF;

 //?PFT
 CASE;

 // IF PAR.MTO Code is EHP
 IF PAR.Made_to_Order_Code = 'EHP';

 // OR PAR.MTO Code is KRG
 OR PAR.Made_to_Order_Code = 'KRG';

 // PAR.PT Item Picture Key = CON.PFT
 PAR.PT_Item_Picture_Key = 'PFT';

 ENDIF;

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is BUTT
 IF PAR.Primal_Group_Code = 'BUTT';

 // OR PAR.Primal Group Code is HAM
 OR PAR.Primal_Group_Code = 'HAM';

 // OR PAR.Primal Group Code is LOIN
 OR PAR.Primal_Group_Code = 'LOIN';

 // OR PAR.Primal Group Code is PICNIC
 OR PAR.Primal_Group_Code = 'PICNIC';

 // OR PAR.Primal Group Code is RIBS
 OR PAR.Primal_Group_Code = 'RIBS';

 // PAR.PT Item Picture Key = PAR.Primal Group Code
 PAR.PT_Item_Picture_Key = PAR.Primal_Group_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is HAMC
 IF PAR.Primal_Group_Code = 'HAMC';

 // PAR.PT Item Picture Key = CON.HAM
 PAR.PT_Item_Picture_Key = 'HAM';

 // IF PAR.Primal Group Code is LOINC
 IF PAR.Primal_Group_Code = 'LOINC';

 // PAR.PT Item Picture Key = CON.LOIN
 PAR.PT_Item_Picture_Key = 'LOIN';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Item Picture Key = CON.LOGO
 PAR.PT_Item_Picture_Key = 'LOGO';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?--- Create Product Trace Record ---
 //?slm 01/10/2014 MTech Review Create Object
 EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Prod_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Production_Time);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Offset_Prod_Date);
 PARAMETER(PAR.PT_Offset_Prod_Time);
 PARAMETER(PAR.PT_Inventory_Status);
 PARAMETER(PAR.PT_Net_Weight);
 PARAMETER(PAR.PT_Gross_Weight);
 PARAMETER(PAR.PT_Shift_Number);
 PARAMETER(PAR.PT_Warehouse_ID_Code);
 PARAMETER(PAR.PT_Order_Number);
 PARAMETER(PAR.PT_Pallet_Number);
 PARAMETER(PAR.PT_Product_Code);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 PARAMETER(PAR.PT_Item_Picture_Key);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_6_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 //?PROCESS: Finished Goods, WIP, & Partial Production
 // IF DB1.PFS Tracking Type is Partial
 IF DB1.PFS_Tracking_Type = 4;

 //?CRT: Yld Partial Transaction
 // PAR.Yld Inv Balance Type = CND.Partial
 PAR.Yld_Inv_Balance_Type = 'PT';

 // Call program Prc Crt Partial Rcpt  XF.
 CALL PROGRAM(Prc Crt Partial Rcpt  XF) ('POVAXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Yld_Inv_Balance_Type);

 ENDIF;

 // IF DB1.PFS Transaction Type is PM: Return/Reject
 IF DB1.PFS_Transaction_Type = 'P03';

 //?------ Reject Production ------
 //?02/16/2010 PKD Added creation of the Item Transaction Detail
 //?02/16/2010 PKD E000552 Added creation of the Item Transaction Detail
 //?PROCESS: WIP Reject
 CASE;

 // IF DB1.PFS Tracking Type is Work In Process
 IF DB1.PFS_Tracking_Type = 3;

 //?CRT: Item Transaction Detail
 // PAR.Inventory Trans. ID = CND.Adjustment
 PAR.Inventory_Trans_ID = 'A';

 // PAR.Inventory Trans. Type = CND.Adjustment Quantity
 PAR.Inventory_Trans_Type = 'A';

 // PAR.Description = CON.Return/Reject
 PAR.Description = 'Return/Reject';

 // PAR.Reason Code = CND.P03: Return/Reject
 PAR.Reason_Code = 'RRT';

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 ENDIF;

 // PAR.Yld Inv Balance Type = CND.WIP Reject
 PAR.Yld_Inv_Balance_Type = 'RJ';

 // Call program Prc Crt Partial Rcpt  XF.
 CALL PROGRAM(Prc Crt Partial Rcpt  XF) ('POVAXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Yld_Inv_Balance_Type);

 // IF DB1.PFS Transaction Type is PM: Issue
 IF DB1.PFS_Transaction_Type = 'P02';

 // OR DB1.PFS Transaction Type is PM: Delete
 OR DB1.PFS_Transaction_Type = 'P04';

 // OR DB1.PFS Transaction Type is PM: Rework
 OR DB1.PFS_Transaction_Type = 'P05';

 // PAR.Transaction Quantity = DB1.PFS Transaction Quantity * CON.-1 *
 PAR.Transaction_Quantity = DB1.PFS_Transaction_Quantity * -1;

 // PAR.Transaction Weight = DB1.PFS Transaction Wgt-Net * CON.-1 *
 PAR.Transaction_Weight = DB1.PFS_Transaction_Wgt_Net * -1;

 //?PROCESS: Finished Goods, WIP, Partial, & Reject Issue
 CASE;

 // IF DB1.PFS Tracking Type is Finished Goods
 IF DB1.PFS_Tracking_Type = 1;

 // OR DB1.PFS Tracking Type is Export
 OR DB1.PFS_Tracking_Type = 2;

 // OR DB1.PFS Tracking Type is Casings
 OR DB1.PFS_Tracking_Type = 7;

 // OR DB1.PFS Tracking Type is Export 2
 OR DB1.PFS_Tracking_Type = 8;

 // OR DB1.PFS Tracking Type is Work In Process
 OR DB1.PFS_Tracking_Type = 3;

 // PAR.Inventory Trans. ID = CND.Receipt
 PAR.Inventory_Trans_ID = 'R';

 // PAR.Inventory Trans. Type = CND.Receipt Production
 PAR.Inventory_Trans_Type = 'RR';

 //?Description & Reason
 CASE;

 // IF DB1.PFS Transaction Type is PM: Issue
 IF DB1.PFS_Transaction_Type = 'P02';

 // PAR.Description = CON.Delete for Issue
 PAR.Description = 'Delete for Issue';

 // PAR.Reason Code = CND.P02: Production Issue
 PAR.Reason_Code = 'ISS';

 //?Description & Reason
 // IF DB1.PFS Transaction Type is PM: Rework
 IF DB1.PFS_Transaction_Type = 'P05';

 //?Look at Reason codes too - added 02,09 3.14.18 RMC
 CASE;

 // IF DB1.PFS Inv Adj Reason Code is PFS: Freezer Transfer
 IF DB1.PFS_Inv_Adj_Reason_Code = '10';

 //?E3014 New 3.4.14
 // PAR.Description = CON.Rework for Freezer Txfr
 PAR.Description = 'Rework for Freezer Txfr';

 // PAR.Reason Code = CND.P01/P05: Freezer Transfer
 PAR.Reason_Code = 'RWZ';

 //?Look at Reason codes too - added 02,09 3.14.18 RMC
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rework
 IF DB1.PFS_Inv_Adj_Reason_Code = '02';

 // PAR.Description = CON.Rework
 PAR.Description = 'Rework';

 // PAR.Reason Code = CND.P05: Production Rework
 PAR.Reason_Code = 'RWK';

 //?Look at Reason codes too - added 02,09 3.14.18 RMC
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rework Damage Box
 IF DB1.PFS_Inv_Adj_Reason_Code = '09';

 // PAR.Description = CON.Rework Damaged Box
 PAR.Description = 'Rework Damaged Box';

 // PAR.Reason Code = CND.P05: Prd Rwk Damage Box
 PAR.Reason_Code = 'DMG';

 //?Look at Reason codes too - added 02,09 3.14.18 RMC
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Description = CON.Delete for Rework
 PAR.Description = 'Delete for Rework';

 // PAR.Reason Code = CND.Delete for Rework
 PAR.Reason_Code = 'DLR';

 ENDIF;

 //?Description & Reason
 // IF DB1.PFS Transaction Type is PM: Delete
 IF DB1.PFS_Transaction_Type = 'P04';

 //?Check Reason also  3.14.18 RMC
 CASE;

 // IF DB1.PFS Inv Adj Reason Code is PFS: Rework
 IF DB1.PFS_Inv_Adj_Reason_Code = '02';

 // PAR.Description = CON.Delete for Rework
 PAR.Description = 'Delete for Rework';

 // PAR.Reason Code = CND.Delete for Rework
 PAR.Reason_Code = 'DLR';

 //?Check Reason also  3.14.18 RMC
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rework Damage Box
 IF DB1.PFS_Inv_Adj_Reason_Code = '09';

 // PAR.Description = CON.Delete Rework Damage Box
 PAR.Description = 'Delete Rework Damage Box';

 // PAR.Reason Code = CND.Broken/Damaged Box
 PAR.Reason_Code = 'BD';

 //?Check Reason also  3.14.18 RMC
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Description = CON.Delete from Inventory
 PAR.Description = 'Delete from Inventory';

 // PAR.Reason Code = CND.P04: Delete
 PAR.Reason_Code = 'DEL';

 ENDIF;

 ENDIF;

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 //?PROCESS: Finished Goods, WIP, Partial, & Reject Issue
 // IF DB1.PFS Tracking Type is Partial
 IF DB1.PFS_Tracking_Type = 4;

 // PAR.Yld Inv Balance Type = CND.Partial
 PAR.Yld_Inv_Balance_Type = 'PT';

 // Call program Prc Crt Partial Rcpt  XF.
 CALL PROGRAM(Prc Crt Partial Rcpt  XF) ('POVAXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Yld_Inv_Balance_Type);

 //?PROCESS: Finished Goods, WIP, Partial, & Reject Issue
 // IF DB1.PFS Tracking Type is Reject
 IF DB1.PFS_Tracking_Type = 6;

 // PAR.Yld Inv Balance Type = CND.WIP Reject
 PAR.Yld_Inv_Balance_Type = 'RJ';

 // Call program Prc Crt Partial Rcpt  XF.
 CALL PROGRAM(Prc Crt Partial Rcpt  XF) ('POVAXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Yld_Inv_Balance_Type);

 ENDIF;

 // IF DB1.PFS Transaction Type is IM: Delete
 IF DB1.PFS_Transaction_Type = 'I01';

 // OR DB1.PFS Transaction Type is IM: Undelete
 OR DB1.PFS_Transaction_Type = 'I02';

 // OR DB1.PFS Transaction Type is CC: Delete
 OR DB1.PFS_Transaction_Type = 'C01';

 // OR DB1.PFS Transaction Type is CC: Add
 OR DB1.PFS_Transaction_Type = 'C02';

 // OR DB1.PFS Transaction Type is CC: Add-ProdDate = 0
 OR DB1.PFS_Transaction_Type = 'C04';

 // OR DB1.PFS Transaction Type is BP: Batch Label Print
 OR DB1.PFS_Transaction_Type = 'B01';

 // OR DB1.PFS Transaction Type is IM: Adjust @ Shiping
 OR DB1.PFS_Transaction_Type = 'I03';

 // OR DB1.PFS Transaction Type is IM: Adjust @ Production
 OR DB1.PFS_Transaction_Type = 'I04';

 // OR DB1.PFS Transaction Type is WT: Warehouse Transfer
 OR DB1.PFS_Transaction_Type = 'W01';

 //?... BP: Batch Printing, WT: Warehouse Transfer
 //?Transaction Quantity & Weight
 CASE;

 // IF DB1.PFS Transaction Type is Inventory Delete
 IF DB1.PFS_Transaction_Type = 'C01'/'I01'/'I04'/'W01';

 // PAR.Transaction Quantity = DB1.PFS Transaction Quantity * CON.-1 *
 PAR.Transaction_Quantity = DB1.PFS_Transaction_Quantity * -1;

 // PAR.Transaction Weight = DB1.PFS Transaction Wgt-Net * CON.-1 *
 PAR.Transaction_Weight = DB1.PFS_Transaction_Wgt_Net * -1;

 //?Transaction Quantity & Weight
 // IF DB1.PFS Transaction Type is Inventory Add
 IF DB1.PFS_Transaction_Type = 'C02'/'C04'/'I02'/'B01'/'I03';

 // PAR.Transaction Quantity = DB1.PFS Transaction Quantity
 PAR.Transaction_Quantity = DB1.PFS_Transaction_Quantity;

 // PAR.Transaction Weight = DB1.PFS Transaction Wgt-Net
 PAR.Transaction_Weight = DB1.PFS_Transaction_Wgt_Net;

 ENDIF;

 //?Update Prod Trace for Batch labels too .... RMC 5/26/06
 CASE;

 // IF DB1.PFS Transaction Type is Batch Printing
 IF DB1.PFS_Transaction_Type = 'B01';

 //?UPD:  Product Trace
 CASE;

 // IF PAR.Item Code is Scale Check Item 2222
 IF PAR.Item_Code = 2222;

 //?UPD:  Product Trace
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 // PAR.PT Prod Date YYYYMMDD = DB1.PFS Production Date
 PAR.PT_Prod_Date_YYYYMMDD = DB1.PFS_Production_Date;

 // PAR.PT Production Time = DB1.PFS Transaction Time
 PAR.PT_Production_Time = DB1.PFS_Transaction_Time;

 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 // PAR.PT Inventory Status = CND.Inventory
 PAR.PT_Inventory_Status = 1;

 // PAR.PT Net Weight = DB1.PFS Transaction Wgt-Net
 PAR.PT_Net_Weight = DB1.PFS_Transaction_Wgt_Net;

 // PAR.PT Gross Weight = DB1.PFS Transaction Wgt-Gross
 PAR.PT_Gross_Weight = DB1.PFS_Transaction_Wgt_Gross;

 // PAR.PT Shift Number = DB1.PFS Shift
 PAR.PT_Shift_Number = DB1.PFS_Shift;

 // PAR.PT Warehouse ID Code = DB1.PFS Warehouse Code
 PAR.PT_Warehouse_ID_Code = DB1.PFS_From_Warehouse_Code;

 // PAR.PT Pallet Number = DB1.PFS Pallet Number
 PAR.PT_Pallet_Number = DB1.PFS_Pallet_Number;

 // PAR.PT Product Code = PAR.Item Code
 PAR.PT_Product_Code = PAR.Item_Code;

 //?--- Offset Production Date & Time ---
 // LCL.Text 10A USR = CVTVAR(DB1.PFS Serial Number)
 LCL.Text_10A_USR = CVTVAR(DB1.PFS_Serial_Number);

 // LCL.Scale ID = SUBSTRING(LCL.Text 10A USR,CON.3,CON.2)
 LCL.Scale_ID = SUBSTRING(LCL.Text_10A_USR:3:2);

 EXECUTE FUNCTION(Rtv Line/ID/Ofst p/Dt RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1678379;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Scale_ID);
 PARAMETER(PAR.Label_Date);
 PARAMETER(LCL.CS_Scale_Offset_Minutes);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 {
  //?USER: Processing if Data record not found

  // PAR.CS Scale Offset Minutes = CON.*ZERO
  PAR.CS_Scale_Offset_Minutes = *ZERO;

  // PAR.CS Exclude from ProdTrace = CND.no
  PAR.CS_Include_in_PrdTr_Match = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Prod Trace Offset RT) TYPE(RTVOBJ) FILE(PPABREP)           AC1678376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Line_Code);
  PARAMETER(PAR.CS_Scale_Offset_Minutes);
  PARAMETER(PAR.CS_Include_in_PrdTr_Match);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?RMC 3/15/06 use par.pt prod date yyyymmdd instead of lcl.pt prod date
 // PAR.PT Offset Prod Date = PAR.PT Prod Date YYYYMMDD
 PAR.PT_Offset_Prod_Date = PAR.PT_Prod_Date_YYYYMMDD;

 // LCL.CS Scale Offset Minutes = LCL.CS Scale Offset Minutes * CON.-1 *
 LCL.CS_Scale_Offset_Minutes = LCL.CS_Scale_Offset_Minutes * -1;

 // PAR.PT Offset Prod Time = PAR.PT Production Time + LCL.CS Scale Offset Minutes *MINUTES
 PAR.PT_Offset_Prod_Time = TIMEINCR(PAR.PT_Production_Time LCL.CS_Scale_Offset_Minutes
 'MN');

 CASE;

 // IF PAR.PT Offset Prod Time GT PAR.PT Production Time
 IF PAR.PT_Offset_Prod_Time > PAR.PT_Production_Time;

 // PAR.PT Offset Prod Date = PAR.PT Offset Prod Date + CON.-1 *DAYS
 PAR.PT_Offset_Prod_Date = DATEINCR(PAR.PT_Offset_Prod_Date '-1' 'DY' 1111110 'NONE' 'N'
 1);

 ENDIF;

 //?--- Item Picture Key ---
 EXECUTE FUNCTION(RTV Item Labels        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1646323;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Picture Key
 CASE;

 // IF PAR.Item Category Code 3 is Loint
 IF PAR.Item_Category_Code_3 = 'L61';

 // PAR.PT Item Picture Key = CON.LOINT
 PAR.PT_Item_Picture_Key = 'LOINT';

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Item Picture Key
 CASE;

 // IF PAR.MTO Code is Entered
 IF PAR.Made_to_Order_Code > *BLANK;

 //?PFN
 CASE;

 // IF PAR.MTO Code is PFN
 IF PAR.Made_to_Order_Code = 'PFN';

 // OR PAR.MTO Code is IWG
 OR PAR.Made_to_Order_Code = 'IWG';

 // PAR.PT Item Picture Key = CON.PFN
 PAR.PT_Item_Picture_Key = 'PFN';

 ENDIF;

 //?PFT
 CASE;

 // IF PAR.MTO Code is EHP
 IF PAR.Made_to_Order_Code = 'EHP';

 // OR PAR.MTO Code is KRG
 OR PAR.Made_to_Order_Code = 'KRG';

 // PAR.PT Item Picture Key = CON.PFT
 PAR.PT_Item_Picture_Key = 'PFT';

 ENDIF;

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is BUTT
 IF PAR.Primal_Group_Code = 'BUTT';

 // OR PAR.Primal Group Code is HAM
 OR PAR.Primal_Group_Code = 'HAM';

 // OR PAR.Primal Group Code is LOIN
 OR PAR.Primal_Group_Code = 'LOIN';

 // OR PAR.Primal Group Code is PICNIC
 OR PAR.Primal_Group_Code = 'PICNIC';

 // OR PAR.Primal Group Code is RIBS
 OR PAR.Primal_Group_Code = 'RIBS';

 // PAR.PT Item Picture Key = PAR.Primal Group Code
 PAR.PT_Item_Picture_Key = PAR.Primal_Group_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is HAMC
 IF PAR.Primal_Group_Code = 'HAMC';

 // PAR.PT Item Picture Key = CON.HAM
 PAR.PT_Item_Picture_Key = 'HAM';

 // IF PAR.Primal Group Code is LOINC
 IF PAR.Primal_Group_Code = 'LOINC';

 // PAR.PT Item Picture Key = CON.LOIN
 PAR.PT_Item_Picture_Key = 'LOIN';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Item Picture Key = CON.LOGO
 PAR.PT_Item_Picture_Key = 'LOGO';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?--- Create Product Trace Record ---
 EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Prod_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Production_Time);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Offset_Prod_Date);
 PARAMETER(PAR.PT_Offset_Prod_Time);
 PARAMETER(PAR.PT_Inventory_Status);
 PARAMETER(PAR.PT_Net_Weight);
 PARAMETER(PAR.PT_Gross_Weight);
 PARAMETER(PAR.PT_Shift_Number);
 PARAMETER(PAR.PT_Warehouse_ID_Code);
 PARAMETER(PAR.PT_Order_Number);
 PARAMETER(PAR.PT_Pallet_Number);
 PARAMETER(PAR.PT_Product_Code);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 PARAMETER(PAR.PT_Item_Picture_Key);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_6_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 //?----- Adjust Item Balance & Item Balance Detail -----
 //?PROCESS: Finished Goods & WIP Delete
 CASE;

 // IF DB1.PFS Tracking Type is Finished Goods
 IF DB1.PFS_Tracking_Type = 1;

 // OR DB1.PFS Tracking Type is Export
 OR DB1.PFS_Tracking_Type = 2;

 // OR DB1.PFS Tracking Type is Casings
 OR DB1.PFS_Tracking_Type = 7;

 // OR DB1.PFS Tracking Type is Export 2
 OR DB1.PFS_Tracking_Type = 8;

 // OR DB1.PFS Tracking Type is Work In Process
 OR DB1.PFS_Tracking_Type = 3;

 //?CRT: Item Transaction Detail
 //?Inventory Trans. Type
 CASE;

 // IF DB1.PFS Transaction Type is WT: Warehouse Transfer
 IF DB1.PFS_Transaction_Type = 'W01';

 // PAR.Inventory Trans. ID = CND.Transfer
 PAR.Inventory_Trans_ID = 'T';

 // PAR.Inventory Trans. Type = CND.Transfer Warehouse
 PAR.Inventory_Trans_Type = 'TW';

 // PAR.Description = CON.Warehouse Transfer
 PAR.Description = 'Warehouse Transfer';

 //?Inventory Trans. Type
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rework
 IF DB1.PFS_Inv_Adj_Reason_Code = '02';

 // OR DB1.PFS Inv Adj Reason Code is PFS: QA
 OR DB1.PFS_Inv_Adj_Reason_Code = '01';

 // PAR.Inventory Trans. ID = CND.Receipt
 PAR.Inventory_Trans_ID = 'R';

 // PAR.Inventory Trans. Type = CND.Receipt Production
 PAR.Inventory_Trans_Type = 'RR';

 // PAR.Description = CON.Rework
 PAR.Description = 'Rework';

 //?Inventory Trans. Type
 // IF DB1.PFS Inv Adj Reason Code is PFS: Issue
 IF DB1.PFS_Inv_Adj_Reason_Code = '07';

 // PAR.Inventory Trans. ID = CND.Receipt
 PAR.Inventory_Trans_ID = 'R';

 // PAR.Inventory Trans. Type = CND.Receipt Production
 PAR.Inventory_Trans_Type = 'RR';

 // PAR.Description = CON.Issue Rework
 PAR.Description = 'Issue Rework';

 //?Inventory Trans. Type
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rendering
 IF DB1.PFS_Inv_Adj_Reason_Code = '03';

 // PAR.Inventory Trans. ID = CND.Adjustment
 PAR.Inventory_Trans_ID = 'A';

 // PAR.Inventory Trans. Type = CND.Adjustment Quantity
 PAR.Inventory_Trans_Type = 'A';

 // PAR.Description = CON.Rendering
 PAR.Description = 'Rendering';

 //?Inventory Trans. Type
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rework Damage Box
 IF DB1.PFS_Inv_Adj_Reason_Code = '09';

 //?RMC Added 3/14/18 T12764   - change to R RR inv trans id per BJ/Ken
 // PAR.Inventory Trans. ID = CND.Receipt
 PAR.Inventory_Trans_ID = 'R';

 // PAR.Inventory Trans. Type = CND.Receipt Production
 PAR.Inventory_Trans_Type = 'RR';

 // PAR.Description = CON.Delete Rework Damage Box
 PAR.Description = 'Delete Rework Damage Box';

 //?Inventory Trans. Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inventory Trans. ID = CND.Adjustment
 PAR.Inventory_Trans_ID = 'A';

 // PAR.Inventory Trans. Type = CND.Adjustment Quantity
 PAR.Inventory_Trans_Type = 'A';

 // PAR.Description = CON.Adjustment to Inventory
 PAR.Description = 'Adjustment to Inventory';

 ENDIF;

 //?Reason Code
 CASE;

 // IF DB1.PFS Transaction Type is Batch Printing
 IF DB1.PFS_Transaction_Type = 'B01';

 // PAR.Reason Code = CND.B01: Batch Label Print
 PAR.Reason_Code = 'BLP';

 //?Reason Code
 // IF DB1.PFS Transaction Type is IM: Delete
 IF DB1.PFS_Transaction_Type = 'I01';

 //?Reason Code
 CASE;

 // IF DB1.PFS Inv Adj Reason Code is Rework
 IF DB1.PFS_Inv_Adj_Reason_Code = '02';

 // PAR.Reason Code = CND.I01: DLR Del-Rework
 PAR.Reason_Code = 'DLR';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: Rendering
 IF DB1.PFS_Inv_Adj_Reason_Code = '03';

 // PAR.Reason Code = CND.I01: DLT Del-Rendering
 PAR.Reason_Code = 'DLT';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: Lost Box
 IF DB1.PFS_Inv_Adj_Reason_Code = '04';

 // PAR.Reason Code = CND.I01: DLB Del-Lost Box
 PAR.Reason_Code = 'DLB';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: EE's Sales/5YrAward
 IF DB1.PFS_Inv_Adj_Reason_Code = '05';

 // PAR.Reason Code = CND.I01: DLM Del-EE Sale/Awrd
 PAR.Reason_Code = 'DLM';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: Adjustment
 IF DB1.PFS_Inv_Adj_Reason_Code = '06';

 // PAR.Reason Code = CND.I01: DLA Del-Adjustment
 PAR.Reason_Code = 'DLA';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: Issue
 IF DB1.PFS_Inv_Adj_Reason_Code = '07';

 // PAR.Reason Code = CND.I01: DLI Del-Issue
 PAR.Reason_Code = 'DLI';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: Cycle Count
 IF DB1.PFS_Inv_Adj_Reason_Code = '08';

 // PAR.Reason Code = CND.I01: DCC Del-Cycle Count
 PAR.Reason_Code = 'DCC';

 //?Reason Code
 // IF DB1.PFS Inv Adj Reason Code is PFS: QA
 IF DB1.PFS_Inv_Adj_Reason_Code = '01';

 // PAR.Reason Code = CND.I01: DQA Del-QA
 PAR.Reason_Code = 'DQA';

 ENDIF;

 //?Reason Code
 // IF DB1.PFS Transaction Type is IM: Undelete
 IF DB1.PFS_Transaction_Type = 'I02';

 // PAR.Reason Code = CND.I02: Undelete
 PAR.Reason_Code = 'UDL';

 //?Reason Code
 // IF DB1.PFS Transaction Type is IM: Adjust @ Shiping
 IF DB1.PFS_Transaction_Type = 'I03';

 // PAR.Reason Code = CND.I03: Add
 PAR.Reason_Code = 'ADD';

 //?Reason Code
 // IF DB1.PFS Transaction Type is IM: Adjust @ Production
 IF DB1.PFS_Transaction_Type = 'I04';

 // PAR.Reason Code = CND.I04: Shipping Add
 PAR.Reason_Code = 'SAD';

 //?Reason Code
 // IF DB1.PFS Transaction Type is Cycle Count Inv Adjust
 IF DB1.PFS_Transaction_Type = 'C02'/'C04'/'C01';

 // PAR.Reason Code = CND.Cycle Count Adjustment
 PAR.Reason_Code = 'CCA';

 //?Reason Code
 // IF DB1.PFS Transaction Type is WT: Warehouse Transfer
 IF DB1.PFS_Transaction_Type = 'W01';

 // PAR.Reason Code = CND.S06/W01: Transfer
 PAR.Reason_Code = 'TRF';

 //?Reason Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Reason Code = CON.*BLANK
 PAR.Reason_Code = *BLANK;

 ENDIF;

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 //?TO Warehouse : ONLY CREATE TRANS IF TO WAREHOUSE IS VALID. RMC 5.5.2021
 CASE;

 // IF DB1.PFS Transaction Type is WT: Warehouse Transfer
 IF DB1.PFS_Transaction_Type = 'W01';

 //?RMC 5.5.2021 ADDED WHSE VALIDATION. INV WAREHOUSES WERE GETTING ITEMBAL..
 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(DB1.PFS_To_Warehouse_Code);
 PARAMETER(NLL.Warehouse_Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.PFS_To_Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(DB1.PFS_Transaction_Quantity);
 PARAMETER(DB1.PFS_Transaction_Wgt_Net);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 ENDIF;

 ENDIF;

 ENDIF;

 //?----- Adjust Located Quantity and Weight -----
 //?PROCESS:  Lot Tracking = Y
 CASE;

 // IF DB1.PFS Transaction Type is Batch Printing
 IF DB1.PFS_Transaction_Type = 'B01';

 //?Decision made on 10/05/05---will receive a locate transaction for
 //?batch label and add to located quantity.
 //?PROCESS:  Lot Tracking = Y
 // IF DB1.PFS Transaction Type is WT: Warehouse Transfer
 IF DB1.PFS_Transaction_Type = 'W01';

 //?Warehouse transfers will not adjust located because product
 //?shouldn't be located yet.
 //?PROCESS:  Lot Tracking = Y
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?PROCESS: Finished Goods
 CASE;

 // IF DB1.PFS Tracking Type is Finished Goods
 IF DB1.PFS_Tracking_Type = 1;

 // OR DB1.PFS Tracking Type is Export
 OR DB1.PFS_Tracking_Type = 2;

 // OR DB1.PFS Tracking Type is Casings
 OR DB1.PFS_Tracking_Type = 7;

 // OR DB1.PFS Tracking Type is Export 2
 OR DB1.PFS_Tracking_Type = 8;

 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 // PAR.LLT Trans Type = CND.Adjustment
 PAR.LLT_Transaction_Type = 'A';

 // PAR.ILL Status = CND.Available
 PAR.ILL_Status = 'A';

 // PAR.Inv Hold Reason Code = CND.EQ Blank
 PAR.Inv_Hold_Reason_Code = *BLANK;

 // PAR.ILL Item Qty On-Hand = PAR.Transaction Quantity
 PAR.ILL_Item_Qty_On_Hand = PAR.Transaction_Quantity;

 // PAR.ILl Item Wgt On-Hand = PAR.Transaction Weight
 PAR.ILL_Item_Wgt_On_Hand = PAR.Transaction_Weight;

 EXECUTE FUNCTION(PFS Item Loc/Crt Trn  CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1735166;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(WRK.ILL_Unused_Sts_1);
 PARAMETER(WRK.ILL_Unused_Sts_2);
 PARAMETER(WRK.ILL_Unused_Sts_3);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER(WRK.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.LLT_Transaction_Type);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.ILL Status = CND.Available
  DB1.ILL_Status = 'A';

  CASE;

  // IF DB1.ILL Avail Ship Date is Not Entered
  IF DB1.ILL_Avail_Ship_Date = *ZERO;

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Location_Code);
  PARAMETER(DB1.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  CASE;

  // IF DB1.ILL Avail Ship Date GT JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date > JOB.*Job_date;

  // DB1.ILL Status = CND.Hold
  DB1.ILL_Status = 'H';

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.ILL Unit Weight is Equal to zero
  IF DB1.ILL_Unit_Weight = *ZERO;

  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.ILL_Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(PFS Upd Qty On-Hand   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1735167;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight 1 USR
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_1_USR;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is NE Zero
   IF PAR.ILL_Item_Qty_On_Hand <> *ZERO;

   EXECUTE FUNCTION(PFS Chg Qty/Wgt OnHnd CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1735169;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   ENDIF;

  }

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 //?CRT:  Create Item Balance Detail record if one does not exist
 EXECUTE FUNCTION(Crt Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1743684;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Update_Exception_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** FREEZER TRANSACTIONS    *****
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?Process F01, F02, F03, F04, & C04
 CASE;

 // IF DB1.PFS Transaction Type is FM: Freezer Putaway
 IF DB1.PFS_Transaction_Type = 'F01';

 //?Add to Location for Receipt
 CASE;

 // IF DB1.PFS Warehouse Code is Entered
 IF DB1.PFS_From_Warehouse_Code <> *BLANK;

 // AND DB1.PFS Location Code is Entered
 AND DB1.PFS_Location_Code <> *ZERO;

 // PAR.LLT Trans Type = CND.Receipt
 PAR.LLT_Transaction_Type = 'R';

 // PAR.ILL Item Qty On-Hand = DB1.PFS Transaction Quantity
 PAR.ILL_Item_Qty_On_Hand = DB1.PFS_Transaction_Quantity;

 // PAR.ILl Item Wgt On-Hand = DB1.PFS Transaction Wgt-Net
 PAR.ILL_Item_Wgt_On_Hand = DB1.PFS_Transaction_Wgt_Net;

 EXECUTE FUNCTION(PFS Item Loc/Crt Trn  CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1735166;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(WRK.ILL_Unused_Sts_1);
 PARAMETER(WRK.ILL_Unused_Sts_2);
 PARAMETER(WRK.ILL_Unused_Sts_3);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER(WRK.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.LLT_Transaction_Type);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.ILL Status = CND.Available
  DB1.ILL_Status = 'A';

  CASE;

  // IF DB1.ILL Avail Ship Date is Not Entered
  IF DB1.ILL_Avail_Ship_Date = *ZERO;

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Location_Code);
  PARAMETER(DB1.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  CASE;

  // IF DB1.ILL Avail Ship Date GT JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date > JOB.*Job_date;

  // DB1.ILL Status = CND.Hold
  DB1.ILL_Status = 'H';

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.ILL Unit Weight is Equal to zero
  IF DB1.ILL_Unit_Weight = *ZERO;

  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.ILL_Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(PFS Upd Qty On-Hand   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1735167;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight 1 USR
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_1_USR;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is NE Zero
   IF PAR.ILL_Item_Qty_On_Hand <> *ZERO;

   EXECUTE FUNCTION(PFS Chg Qty/Wgt OnHnd CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1735169;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   ENDIF;

  }

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 //?CRT:  Create Item Balance Detail record if one does not exist
 EXECUTE FUNCTION(Crt Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1743684;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Update_Exception_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

  }

 }

 //?UPD:  Product Trace Warehouse Code
 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 // PAR.PT Warehouse ID Code = DB1.PFS Warehouse Code
 PAR.PT_Warehouse_ID_Code = DB1.PFS_From_Warehouse_Code;

 //?SLM MTECH Review Product Trace - WareHouse only
 EXECUTE FUNCTION(PFS Upd Warehouse     RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1743717;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Warehouse_ID_Code);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.PT Warehouse ID Code NE DB1.PT Warehouse ID Code
  IF PAR.PT_Warehouse_ID_Code <> DB1.PT_Warehouse_ID_Code;

  EXECUTE FUNCTION(Chg Warehouse Code    CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1743718;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(PAR.PT_Warehouse_ID_Code);
  ENDIF;

 }

 ENDIF;

 //?Process F01, F02, F03, F04, & C04
 // IF DB1.PFS Transaction Type is FM: Freezer ReLocate
 IF DB1.PFS_Transaction_Type = 'F02';

 // OR DB1.PFS Transaction Type is CC: Move to Current Loc
 OR DB1.PFS_Transaction_Type = 'C03';

 //?**** check if quantity available in the location. ****
 //?----- Reduce From Location -----
 // PAR.LLT Trans Type = CND.Location Transfer From
 PAR.LLT_Transaction_Type = 'T';

 // PAR.ILL Status = CND.Available
 PAR.ILL_Status = 'A';

 // PAR.Inv Hold Reason Code = CND.EQ Blank
 PAR.Inv_Hold_Reason_Code = *BLANK;

 // LCL.ILL Item Qty On-Hand = DB1.PFS Transaction Quantity * CON.-1 *
 LCL.ILL_Item_Qty_On_Hand = DB1.PFS_Transaction_Quantity * -1;

 // LCL.ILl Item Wgt On-Hand = DB1.PFS Transaction Wgt-Net * CON.-1 *
 LCL.ILL_Item_Wgt_On_Hand = DB1.PFS_Transaction_Wgt_Net * -1;

 EXECUTE FUNCTION(PFS Item Loc/Crt Trn  CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1735166;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.ILL_Item_Qty_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.ILL_Item_Wgt_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(WRK.ILL_Unused_Sts_1);
 PARAMETER(WRK.ILL_Unused_Sts_2);
 PARAMETER(WRK.ILL_Unused_Sts_3);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER(WRK.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.LLT_Transaction_Type);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.ILL Status = CND.Available
  DB1.ILL_Status = 'A';

  CASE;

  // IF DB1.ILL Avail Ship Date is Not Entered
  IF DB1.ILL_Avail_Ship_Date = *ZERO;

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Location_Code);
  PARAMETER(DB1.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  CASE;

  // IF DB1.ILL Avail Ship Date GT JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date > JOB.*Job_date;

  // DB1.ILL Status = CND.Hold
  DB1.ILL_Status = 'H';

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.ILL Unit Weight is Equal to zero
  IF DB1.ILL_Unit_Weight = *ZERO;

  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.ILL_Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(PFS Upd Qty On-Hand   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1735167;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight 1 USR
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_1_USR;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is NE Zero
   IF PAR.ILL_Item_Qty_On_Hand <> *ZERO;

   EXECUTE FUNCTION(PFS Chg Qty/Wgt OnHnd CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1735169;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   ENDIF;

  }

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 //?--- Create Item Balance Detail record if one does not exist ---
 EXECUTE FUNCTION(Crt Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1743684;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Update_Exception_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

  }

 }

 //?-----  Add to Location -----
 //?Transfer Transaction
 CASE;

 // IF DB1.PFS To Warehouse Code is Entered
 IF DB1.PFS_To_Warehouse_Code <> *BLANK;

 // AND DB1.PFS To Location Code is Entered
 AND DB1.PFS_To_Location_Code <> *ZERO;

 // PAR.LLT Trans Type = CND.Location Transfer To
 PAR.LLT_Transaction_Type = 'RT';

 // LCL.Warehouse Code = DB1.PFS To Warehouse Code
 LCL.Warehouse_Code = DB1.PFS_To_Warehouse_Code;

 // LCL.Location Code = CVTVAR(DB1.PFS To Location Code)
 LCL.Location_Code = CVTVAR(DB1.PFS_To_Location_Code);

 // PAR.ILL Item Qty On-Hand = DB1.PFS Transaction Quantity
 PAR.ILL_Item_Qty_On_Hand = DB1.PFS_Transaction_Quantity;

 // PAR.ILl Item Wgt On-Hand = DB1.PFS Transaction Wgt-Net
 PAR.ILL_Item_Wgt_On_Hand = DB1.PFS_Transaction_Wgt_Net;

 EXECUTE FUNCTION(PFS Item Loc/Crt Trn  CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1735166;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(WRK.ILL_Unused_Sts_1);
 PARAMETER(WRK.ILL_Unused_Sts_2);
 PARAMETER(WRK.ILL_Unused_Sts_3);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER(WRK.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.LLT_Transaction_Type);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.ILL Status = CND.Available
  DB1.ILL_Status = 'A';

  CASE;

  // IF DB1.ILL Avail Ship Date is Not Entered
  IF DB1.ILL_Avail_Ship_Date = *ZERO;

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Location_Code);
  PARAMETER(DB1.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  CASE;

  // IF DB1.ILL Avail Ship Date GT JOB.*Job date
  IF DB1.ILL_Avail_Ship_Date > JOB.*Job_date;

  // DB1.ILL Status = CND.Hold
  DB1.ILL_Status = 'H';

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.ILL Unit Weight is Equal to zero
  IF DB1.ILL_Unit_Weight = *ZERO;

  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.ILL_Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(PFS Upd Qty On-Hand   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1735167;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight 1 USR
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_1_USR;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is NE Zero
   IF PAR.ILL_Item_Qty_On_Hand <> *ZERO;

   EXECUTE FUNCTION(PFS Chg Qty/Wgt OnHnd CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1735169;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   ENDIF;

  }

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 //?--- Create Item Balance Detail record if one does not exist ---
 EXECUTE FUNCTION(Crt Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1743684;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Update_Exception_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Job_Date);
   PARAMETER(DB1.Job_Time);

  }

 }

 ENDIF;

 //?Process F01, F02, F03, F04, & C04
 // IF DB1.PFS Transaction Type is FM: Freezer Hold
 IF DB1.PFS_Transaction_Type = 'F03';

 // PAR.ILL Status = CND.Hold
 PAR.ILL_Status = 'H';

 // PAR.Inv Hold Reason Code = DB1.PFS Inv Adj Reason Code
 PAR.Inv_Hold_Reason_Code = DB1.PFS_Inv_Adj_Reason_Code;

 EXECUTE FUNCTION(Upd Location Hold PFS RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1735147;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Location Hold PFS CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1743709;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  PARAMETER(PAR.ILL_Status);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?Process F01, F02, F03, F04, & C04
 // IF DB1.PFS Transaction Type is FM: Freezer Release Hold
 IF DB1.PFS_Transaction_Type = 'F04';

 // PAR.ILL Status = CND.Available
 PAR.ILL_Status = 'A';

 // PAR.Inv Hold Reason Code = CND.EQ Blank
 PAR.Inv_Hold_Reason_Code = *BLANK;

 EXECUTE FUNCTION(Upd Location Hold PFS RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1735147;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Location_Code);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Location Hold PFS CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1743709;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  PARAMETER(PAR.ILL_Status);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 //?***** SHIPPING TRANSACTIONS   *****
 CASE;

 // IF DB1.PFS Transaction Type is SM: Product Return
 IF DB1.PFS_Transaction_Type = 'S04';

 // OR DB1.PFS Transaction Type is SM: Receive Co-Pack Items
 OR DB1.PFS_Transaction_Type = 'S05';

 // OR DB1.PFS Transaction Type is SM: Inter-Plant Tranfer
 OR DB1.PFS_Transaction_Type = 'S06';

 // OR DB1.PFS Transaction Type is SM: Product Return WO/Ord
 OR DB1.PFS_Transaction_Type = 'S07';

 //?----- Increase Item Balance & Item Balance Detail -----
 //?PROCESS: Finished Goods
 CASE;

 // IF DB1.PFS Tracking Type is Finished Goods
 IF DB1.PFS_Tracking_Type = 1;

 // OR DB1.PFS Tracking Type is Export
 OR DB1.PFS_Tracking_Type = 2;

 // OR DB1.PFS Tracking Type is Casings
 OR DB1.PFS_Tracking_Type = 7;

 // OR DB1.PFS Tracking Type is Export 2
 OR DB1.PFS_Tracking_Type = 8;

 //?CRT: Item Transaction Detail
 //?Inventory Trans ID & Inventory Trans Type
 CASE;

 // IF DB1.PFS Transaction Type is SM: Inter-Plant Tranfer
 IF DB1.PFS_Transaction_Type = 'S06';

 // PAR.Inventory Trans. ID = CND.Transfer
 PAR.Inventory_Trans_ID = 'T';

 // PAR.Inventory Trans. Type = CND.Transfer Warehouse
 PAR.Inventory_Trans_Type = 'TW';

 // LCL.Order Alpha = CVTVAR(DB1.PFS Order Number)
 LCL.Order_Alpha = CVTVAR(DB1.PFS_Order_Number);

 // PAR.Description = CONCAT(CON.Inter-Plant Tfr,LCL.Order Alpha,CON.1)
 PAR.Description = 'Inter-Plant Tfr' + LCL.Order_Alpha (1);

 //?Inventory Trans ID & Inventory Trans Type
 // IF DB1.PFS Transaction Type is SM: Receive Co-Pack Items
 IF DB1.PFS_Transaction_Type = 'S05';

 // PAR.Inventory Trans. ID = CND.Transfer
 PAR.Inventory_Trans_ID = 'T';

 // PAR.Inventory Trans. Type = CND.Transfer Warehouse
 PAR.Inventory_Trans_Type = 'TW';

 // PAR.Description = CONCAT(CON.Co-Pack Receipt,CON.*BLANK,CON.1)
 PAR.Description = 'Co-Pack Receipt' + *BLANK (1);

 //?Inventory Trans ID & Inventory Trans Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inventory Trans. ID = CND.Receipt
 PAR.Inventory_Trans_ID = 'R';

 // PAR.Inventory Trans. Type = CND.Receipt Miscellaneous
 PAR.Inventory_Trans_Type = 'R';

 // PAR.Description = CON.PFS: Misc Receipt
 PAR.Description = 'PFS: Misc Receipt';

 ENDIF;

 //?Reason Code
 CASE;

 // IF DB1.PFS Transaction Type is SM: Product Return
 IF DB1.PFS_Transaction_Type = 'S04';

 // OR DB1.PFS Transaction Type is SM: Receive Co-Pack Items
 OR DB1.PFS_Transaction_Type = 'S05';

 // OR DB1.PFS Transaction Type is SM: Product Return WO/Ord
 OR DB1.PFS_Transaction_Type = 'S07';

 // PAR.Reason Code = CND.S04/S05: Return
 PAR.Reason_Code = 'RET';

 //?Reason Code
 // IF DB1.PFS Transaction Type is WT: Inter-Plant Transfer
 IF DB1.PFS_Transaction_Type = 'S06';

 // PAR.Reason Code = CND.S06/W01: Transfer
 PAR.Reason_Code = 'TRF';

 //?Reason Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Reason Code = CON.*BLANK
 PAR.Reason_Code = *BLANK;

 ENDIF;

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Inventory_Trans_ID);
 PARAMETER(PAR.Inventory_Trans_Type);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Description);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);

 CASE;

 // IF DB1.PFS Transaction Type is SM: Receive Co-Pack Items
 IF DB1.PFS_Transaction_Type = 'S05';

 //?UPD:  Product Trace
 CASE;

 // IF PAR.Item Code is Scale Check Item 2222
 IF PAR.Item_Code = 2222;

 //?UPD:  Product Trace
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 // PAR.PT Prod Date YYYYMMDD = DB1.PFS Production Date
 PAR.PT_Prod_Date_YYYYMMDD = DB1.PFS_Production_Date;

 // PAR.PT Production Time = DB1.PFS Transaction Time
 PAR.PT_Production_Time = DB1.PFS_Transaction_Time;

 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 // PAR.PT Inventory Status = CND.Inventory
 PAR.PT_Inventory_Status = 1;

 // PAR.PT Net Weight = DB1.PFS Transaction Wgt-Net
 PAR.PT_Net_Weight = DB1.PFS_Transaction_Wgt_Net;

 // PAR.PT Gross Weight = DB1.PFS Transaction Wgt-Gross
 PAR.PT_Gross_Weight = DB1.PFS_Transaction_Wgt_Gross;

 // PAR.PT Shift Number = DB1.PFS Shift
 PAR.PT_Shift_Number = DB1.PFS_Shift;

 // PAR.PT Warehouse ID Code = DB1.PFS Warehouse Code
 PAR.PT_Warehouse_ID_Code = DB1.PFS_From_Warehouse_Code;

 // PAR.PT Pallet Number = DB1.PFS Pallet Number
 PAR.PT_Pallet_Number = DB1.PFS_Pallet_Number;

 // PAR.PT Product Code = DB1.PFS Item Code
 PAR.PT_Product_Code = DB1.PFS_Item_Code;

 //?--- Offset Production Date & Time ---
 // LCL.Text USR 8 = CVTVAR(DB1.PFS Serial Number)
 LCL.Text_USR_8 = CVTVAR(DB1.PFS_Serial_Number);

 // LCL.Scale ID = SUBSTRING(LCL.Text USR 8,CON.1,CON.2)
 LCL.Scale_ID = SUBSTRING(LCL.Text_USR_8:1:2);

 EXECUTE FUNCTION(Rtv Line/ID/Ofst p/Dt RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1678379;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Scale_ID);
 PARAMETER(PAR.Label_Date);
 PARAMETER(LCL.CS_Scale_Offset_Minutes);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 {
  //?USER: Processing if Data record not found

  // PAR.CS Scale Offset Minutes = CON.*ZERO
  PAR.CS_Scale_Offset_Minutes = *ZERO;

  // PAR.CS Exclude from ProdTrace = CND.no
  PAR.CS_Include_in_PrdTr_Match = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Prod Trace Offset RT) TYPE(RTVOBJ) FILE(PPABREP)           AC1678376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Line_Code);
  PARAMETER(PAR.CS_Scale_Offset_Minutes);
  PARAMETER(PAR.CS_Include_in_PrdTr_Match);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.PT Offset Prod Date = LCL.PT Prod Date YYYYMMDD
 PAR.PT_Offset_Prod_Date = LCL.PT_Prod_Date_YYYYMMDD;

 // LCL.CS Scale Offset Minutes = LCL.CS Scale Offset Minutes * CON.-1 *
 LCL.CS_Scale_Offset_Minutes = LCL.CS_Scale_Offset_Minutes * -1;

 // PAR.PT Offset Prod Time = PAR.PT Production Time + LCL.CS Scale Offset Minutes *MINUTES
 PAR.PT_Offset_Prod_Time = TIMEINCR(PAR.PT_Production_Time LCL.CS_Scale_Offset_Minutes
 'MN');

 CASE;

 // IF PAR.PT Offset Prod Time GT PAR.PT Production Time
 IF PAR.PT_Offset_Prod_Time > PAR.PT_Production_Time;

 // PAR.PT Offset Prod Date = PAR.PT Offset Prod Date + CON.-1 *DAYS
 PAR.PT_Offset_Prod_Date = DATEINCR(PAR.PT_Offset_Prod_Date '-1' 'DY' 1111110 'NONE' 'N'
 1);

 ENDIF;

 //?--- Item Picture Key ---
 EXECUTE FUNCTION(RTV Item Labels        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1646323;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Picture Key
 CASE;

 // IF PAR.Item Category Code 3 is Loint
 IF PAR.Item_Category_Code_3 = 'L61';

 // PAR.PT Item Picture Key = CON.LOINT
 PAR.PT_Item_Picture_Key = 'LOINT';

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Item Picture Key
 CASE;

 // IF PAR.MTO Code is Entered
 IF PAR.Made_to_Order_Code > *BLANK;

 //?PFN
 CASE;

 // IF PAR.MTO Code is PFN
 IF PAR.Made_to_Order_Code = 'PFN';

 // OR PAR.MTO Code is IWG
 OR PAR.Made_to_Order_Code = 'IWG';

 // PAR.PT Item Picture Key = CON.PFN
 PAR.PT_Item_Picture_Key = 'PFN';

 ENDIF;

 //?PFT
 CASE;

 // IF PAR.MTO Code is EHP
 IF PAR.Made_to_Order_Code = 'EHP';

 // OR PAR.MTO Code is KRG
 OR PAR.Made_to_Order_Code = 'KRG';

 // PAR.PT Item Picture Key = CON.PFT
 PAR.PT_Item_Picture_Key = 'PFT';

 ENDIF;

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is BUTT
 IF PAR.Primal_Group_Code = 'BUTT';

 // OR PAR.Primal Group Code is HAM
 OR PAR.Primal_Group_Code = 'HAM';

 // OR PAR.Primal Group Code is LOIN
 OR PAR.Primal_Group_Code = 'LOIN';

 // OR PAR.Primal Group Code is PICNIC
 OR PAR.Primal_Group_Code = 'PICNIC';

 // OR PAR.Primal Group Code is RIBS
 OR PAR.Primal_Group_Code = 'RIBS';

 // PAR.PT Item Picture Key = PAR.Primal Group Code
 PAR.PT_Item_Picture_Key = PAR.Primal_Group_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is HAMC
 IF PAR.Primal_Group_Code = 'HAMC';

 // PAR.PT Item Picture Key = CON.HAM
 PAR.PT_Item_Picture_Key = 'HAM';

 // IF PAR.Primal Group Code is LOINC
 IF PAR.Primal_Group_Code = 'LOINC';

 // PAR.PT Item Picture Key = CON.LOIN
 PAR.PT_Item_Picture_Key = 'LOIN';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Item Picture Key = CON.LOGO
 PAR.PT_Item_Picture_Key = 'LOGO';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?--- Create Product Trace Record ---
 EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Prod_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Production_Time);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Offset_Prod_Date);
 PARAMETER(PAR.PT_Offset_Prod_Time);
 PARAMETER(PAR.PT_Inventory_Status);
 PARAMETER(PAR.PT_Net_Weight);
 PARAMETER(PAR.PT_Gross_Weight);
 PARAMETER(PAR.PT_Shift_Number);
 PARAMETER(PAR.PT_Warehouse_ID_Code);
 PARAMETER(PAR.PT_Order_Number);
 PARAMETER(PAR.PT_Pallet_Number);
 PARAMETER(PAR.PT_Product_Code);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 PARAMETER(PAR.PT_Item_Picture_Key);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_6_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?----- Increase Located Quantity and Weight -----
 //?The Freezer Putaway will increase the Location Inventory
 //?***** SHIPPING TRANSACTIONS   *****
 // IF DB1.PFS Transaction Type is SM: Ship Regular Order
 IF DB1.PFS_Transaction_Type = 'S01';

 // OR DB1.PFS Transaction Type is SM: Transfer Order
 OR DB1.PFS_Transaction_Type = 'S02';

 //?PROCESS:  Ship
 CASE;

 // IF WRK.#Sequence Block is NULL
 IF WRK.#Sequence_Block = *BLANK;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 //?CRT:  Manifest Detail & Order Inv Allocation for Lot Tracking WHS
 EXECUTE FUNCTION(PFS Crt Manifest Dtl  IF) TYPE(EXCINTFUN)                      AC1735847;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.PFS_Transaction_Quantity);
 PARAMETER(DB1.PFS_Transaction_Wgt_Net);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.PFS_Transaction_Wgt_Gross);
 PARAMETER(*BLANK);
 PARAMETER(DB1.PFS_Total_Tare);
 PARAMETER(DB1.PFS_Co_Pack_Lot_Number);
 PARAMETER(DB1.PFS_Pallet_Number);
 PARAMETER(DB1.PFS_Shift);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Lot_Tracking_Flag);
 PARAMETER(DB1.PFS_Substitution_Line_Nbr);
 {
  //?Execute internal function

  //?05/20/10 Moved the Retrieve for ORD DTL Exist inside the XF
  // Call program PFS Crt Order Detail  XF.
  CALL PROGRAM(PFS Crt Order Detail  XF) ('PPN7XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.PFS_Substitution_Line_Nbr);

  EXECUTE FUNCTION(PFS Val Dup Serial#   RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1752340;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.PT_Serial_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?DUPLICATE CASE FOUND
  CASE;

  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // Retrieve message - 'DUPLICATE CASE: Order &1 Serial# &2.  Please contact IS Support immediately
  LCL.Office_Message_USR = RTVMSG(USR3596);
  PARAMETER(LCL.Office_Message_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.PT_Serial_Number);

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('PRKDUPCSE');
  PARAMETER(LCL.System_Value_Alpha);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program SND Pager Msg (MPLUS) UP.
  CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
  PARAMETER(LCL.System_Value_Alpha);
  PARAMETER(LCL.Office_Message_USR);

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Case_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Case Sequence Number = CON.1
   PAR.Case_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
   PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

   QUIT;

  }

  //?R11974 DN 11/01/17-Calc/Update Net Weight in Kg (Kilograms).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Manifest Net Weight - Kg = CON.*ZERO
  PAR.Manifest_Net_Weight_Kg = *ZERO;

  CASE;

  // IF PAR.Case Weight is NE *ZERO
  IF PAR.Case_Weight <> *ZERO;

  EXECUTE FUNCTION(Clc Weight to Kilogram IF) TYPE(EXCINTFUN)                     AC2145548;
  PARAMETER(PAR.Case_Weight);
  PARAMETER(PAR.Manifest_Net_Weight_Kg);
  {
   //?Execute internal function

   //?Round Case Weight to 1 Decimal Place.
   //?RMC 10/14/19 increase precision - DO NOT DO THIS  10/16/19 PER AARON C
   // LCL.Net Weight Kg USR 11.4 = PAR.Case Weight * CON..45359 *
   LCL.Net_Weight_Kg_USR_11_4 = PAR.Case_Weight * .45359;

   // LCL.Net Weight Kilograms = LCL.Net Weight Kg USR 11.4 * CON.1 *Rounded
   LCL.Net_Weight_Kilograms = LCL.Net_Weight_Kg_USR_11_4 * 1 'H';

   // PAR.Manifest Net Weight - Kg = LCL.Net Weight Kilograms
   PAR.Manifest_Net_Weight_Kg = LCL.Net_Weight_Kilograms;

  }

  ENDIF;

  ENDIF;

  //?R11974 DN 11/01/17-Set Manifest Net Weight - Kg.
  //?WI609_2 JM 12/05/24-Added New column Manifest Pallet Nbr 3PL
  EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Case_Sequence_Number);
  PARAMETER(PAR.Case_Quantity);
  PARAMETER(PAR.Case_Weight);
  PARAMETER(PAR.Inventory_Updated_Flag);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.PT_Serial_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Manifest_Gross_Weight);
  PARAMETER(PAR.Manifest_Lot_ID);
  PARAMETER(PAR.Manifest_Total_Tare);
  PARAMETER(PAR.Manifest_Co_Park_Lot_Nbr);
  PARAMETER(PAR.Manifest_Pallet_Number);
  PARAMETER(PAR.Manifest_Shift);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Manifest_Net_Weight_Kg);
  PARAMETER(WRK.Manifest_Unused_Status_1A);
  PARAMETER(WRK.Manifest_Unused_Status_2A);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?** Create Order Inv Allocation ***
  CASE;

  // IF PAR.Lot Tracking Flag is yes
  IF PAR.Lot_Tracking_Flag = 'Y';

  EXECUTE FUNCTION(Crt Order Inv Alloc   IF) TYPE(EXCINTFUN)                      AC1506139;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Case_Quantity);
  PARAMETER(PAR.Case_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.PT_Serial_Number);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(WRK.OIA_Unused_Sts_1);
  PARAMETER(WRK.OIA_Unused_Sts_2);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Location_Code);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1506138;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Allocation_Seq_#);
   {
    //?USER: Processing if Data record not found

    // PAR.Allocation Seq # = CON.1
    PAR.Allocation_Seq_# = 1;

    //?USER: Process Data record

    // PAR.Allocation Seq # = DB1.Allocation Seq # + CON.1
    PAR.Allocation_Seq_# = DB1.Allocation_Seq_# + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Order Inv Alloc   CR) TYPE(CRTOBJ) FILE(PDL8CPP)           AC1505795;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Allocation_Seq_#);
   PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
   PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
   PARAMETER(PAR.OIA_Co_Packer_Lot_Num);
   PARAMETER(PAR.OIA_Serial_Number);
   PARAMETER(PAR.OIA_Create_Sts);
   PARAMETER(PAR.OIA_Modified_Sts);
   PARAMETER(PAR.OIA_Allocation_Sts);
   PARAMETER(PAR.OIA_Loc_Pick_Sts);
   PARAMETER(PAR.OIA_Unused_Sts_1);
   PARAMETER(PAR.OIA_Unused_Sts_2);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

 }

 //?UPD:  Inventory Status and Order Number in Product Trace
 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 // PAR.PT Order Number = DB1.PFS Order Number
 PAR.PT_Order_Number = DB1.PFS_Order_Number;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 EXECUTE FUNCTION(Val Prod Trc P01 rcd  RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1778930;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(DB1.PFS_Label_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 //?Slm 01/10/2014 MTech Review Order number
 //?Slm 01/10/2014 MTech Review Inventory Status
 EXECUTE FUNCTION(PFS Upd Ord/Inv Sts   RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1735848;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(3);
 PARAMETER(PAR.PT_Order_Number);
 {
  //?USER: Process Data record

  //?slm 01/10/2014 MTech Review Product Trace
  //?slm 01/10/2014 MTech Inventory Status, Order Number
  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(PAR.PT_Inventory_Status);
  PARAMETER(PAR.PT_Order_Number);
 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?UPD:  Product Trace ** Create with order # if not found 12/15/06 RMC
 CASE;

 // IF PAR.Item Code is Scale Check Item 2222
 IF PAR.Item_Code = 2222;

 //?UPD:  Product Trace ** Create with order # if not found 12/15/06 RMC
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 // PAR.PT Prod Date YYYYMMDD = DB1.PFS Production Date
 PAR.PT_Prod_Date_YYYYMMDD = DB1.PFS_Production_Date;

 // PAR.PT Production Time = DB1.PFS Transaction Time
 PAR.PT_Production_Time = DB1.PFS_Transaction_Time;

 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 // PAR.PT Inventory Status = CND.Manifested
 PAR.PT_Inventory_Status = 3;

 // PAR.PT Net Weight = DB1.PFS Transaction Wgt-Net
 PAR.PT_Net_Weight = DB1.PFS_Transaction_Wgt_Net;

 // PAR.PT Gross Weight = DB1.PFS Transaction Wgt-Gross
 PAR.PT_Gross_Weight = DB1.PFS_Transaction_Wgt_Gross;

 // PAR.PT Shift Number = DB1.PFS Shift
 PAR.PT_Shift_Number = DB1.PFS_Shift;

 // PAR.PT Warehouse ID Code = DB1.PFS Warehouse Code
 PAR.PT_Warehouse_ID_Code = DB1.PFS_From_Warehouse_Code;

 // PAR.PT Pallet Number = DB1.PFS Pallet Number
 PAR.PT_Pallet_Number = DB1.PFS_Pallet_Number;

 // PAR.PT Product Code = PAR.Item Code
 PAR.PT_Product_Code = PAR.Item_Code;

 //?--- Offset Production Date & Time ---
 // LCL.Text 10A USR = CVTVAR(DB1.PFS Serial Number)
 LCL.Text_10A_USR = CVTVAR(DB1.PFS_Serial_Number);

 // LCL.Scale ID = SUBSTRING(LCL.Text 10A USR,CON.3,CON.2)
 LCL.Scale_ID = SUBSTRING(LCL.Text_10A_USR:3:2);

 EXECUTE FUNCTION(Rtv Line/ID/Ofst p/Dt RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1678379;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Scale_ID);
 PARAMETER(PAR.Label_Date);
 PARAMETER(LCL.CS_Scale_Offset_Minutes);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 {
  //?USER: Processing if Data record not found

  // PAR.CS Scale Offset Minutes = CON.*ZERO
  PAR.CS_Scale_Offset_Minutes = *ZERO;

  // PAR.CS Exclude from ProdTrace = CND.no
  PAR.CS_Include_in_PrdTr_Match = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Prod Trace Offset RT) TYPE(RTVOBJ) FILE(PPABREP)           AC1678376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Line_Code);
  PARAMETER(PAR.CS_Scale_Offset_Minutes);
  PARAMETER(PAR.CS_Include_in_PrdTr_Match);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?RMC 3/15/06 use par.pt prod date yyyymmdd instead of lcl.pt prod date
 // PAR.PT Offset Prod Date = PAR.PT Prod Date YYYYMMDD
 PAR.PT_Offset_Prod_Date = PAR.PT_Prod_Date_YYYYMMDD;

 // LCL.CS Scale Offset Minutes = LCL.CS Scale Offset Minutes * CON.-1 *
 LCL.CS_Scale_Offset_Minutes = LCL.CS_Scale_Offset_Minutes * -1;

 // PAR.PT Offset Prod Time = PAR.PT Production Time + LCL.CS Scale Offset Minutes *MINUTES
 PAR.PT_Offset_Prod_Time = TIMEINCR(PAR.PT_Production_Time LCL.CS_Scale_Offset_Minutes
 'MN');

 CASE;

 // IF PAR.PT Offset Prod Time GT PAR.PT Production Time
 IF PAR.PT_Offset_Prod_Time > PAR.PT_Production_Time;

 // PAR.PT Offset Prod Date = PAR.PT Offset Prod Date + CON.-1 *DAYS
 PAR.PT_Offset_Prod_Date = DATEINCR(PAR.PT_Offset_Prod_Date '-1' 'DY' 1111110 'NONE' 'N'
 1);

 ENDIF;

 //?--- Item Picture Key ---
 EXECUTE FUNCTION(RTV Item Labels        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1646323;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Picture Key
 CASE;

 // IF PAR.Item Category Code 3 is Loint
 IF PAR.Item_Category_Code_3 = 'L61';

 // PAR.PT Item Picture Key = CON.LOINT
 PAR.PT_Item_Picture_Key = 'LOINT';

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Item Picture Key
 CASE;

 // IF PAR.MTO Code is Entered
 IF PAR.Made_to_Order_Code > *BLANK;

 //?PFN
 CASE;

 // IF PAR.MTO Code is PFN
 IF PAR.Made_to_Order_Code = 'PFN';

 // OR PAR.MTO Code is IWG
 OR PAR.Made_to_Order_Code = 'IWG';

 // PAR.PT Item Picture Key = CON.PFN
 PAR.PT_Item_Picture_Key = 'PFN';

 ENDIF;

 //?PFT
 CASE;

 // IF PAR.MTO Code is EHP
 IF PAR.Made_to_Order_Code = 'EHP';

 // OR PAR.MTO Code is KRG
 OR PAR.Made_to_Order_Code = 'KRG';

 // PAR.PT Item Picture Key = CON.PFT
 PAR.PT_Item_Picture_Key = 'PFT';

 ENDIF;

 //?Item Picture Key
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is BUTT
 IF PAR.Primal_Group_Code = 'BUTT';

 // OR PAR.Primal Group Code is HAM
 OR PAR.Primal_Group_Code = 'HAM';

 // OR PAR.Primal Group Code is LOIN
 OR PAR.Primal_Group_Code = 'LOIN';

 // OR PAR.Primal Group Code is PICNIC
 OR PAR.Primal_Group_Code = 'PICNIC';

 // OR PAR.Primal Group Code is RIBS
 OR PAR.Primal_Group_Code = 'RIBS';

 // PAR.PT Item Picture Key = PAR.Primal Group Code
 PAR.PT_Item_Picture_Key = PAR.Primal_Group_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Primal Group Code is HAMC
 IF PAR.Primal_Group_Code = 'HAMC';

 // PAR.PT Item Picture Key = CON.HAM
 PAR.PT_Item_Picture_Key = 'HAM';

 // IF PAR.Primal Group Code is LOINC
 IF PAR.Primal_Group_Code = 'LOINC';

 // PAR.PT Item Picture Key = CON.LOIN
 PAR.PT_Item_Picture_Key = 'LOIN';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PT Item Picture Key = CON.LOGO
 PAR.PT_Item_Picture_Key = 'LOGO';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?--- Create Product Trace Record ---
 EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Prod_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Production_Time);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(PAR.PT_Offset_Prod_Date);
 PARAMETER(PAR.PT_Offset_Prod_Time);
 PARAMETER(PAR.PT_Inventory_Status);
 PARAMETER(PAR.PT_Net_Weight);
 PARAMETER(PAR.PT_Gross_Weight);
 PARAMETER(PAR.PT_Shift_Number);
 PARAMETER(PAR.PT_Warehouse_ID_Code);
 PARAMETER(PAR.PT_Order_Number);
 PARAMETER(PAR.PT_Pallet_Number);
 PARAMETER(PAR.PT_Product_Code);
 PARAMETER(PAR.PT_Item_Label_Line_1);
 PARAMETER(PAR.PT_Item_Label_Line_2);
 PARAMETER(PAR.PT_Fresh_Frozen_Code);
 PARAMETER(PAR.PT_Item_Picture_Key);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.PT_Item_Type_Code);
 PARAMETER(PAR.PT_Item_Str_Class_Code);
 PARAMETER(PAR.PT_Item_Str_Group_Code);
 PARAMETER(PAR.PT_Item_Str_Type_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_6_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PT_Incl_in_Prod_Trc_Match);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** SHIPPING TRANSACTIONS   *****
 // IF DB1.PFS Transaction Type is SM: UnShip Reg/Tfr Ord
 IF DB1.PFS_Transaction_Type = 'S03';

 //?PROCESS:  Unship
 CASE;

 // IF WRK.#Sequence Block is NULL
 IF WRK.#Sequence_Block = *BLANK;

 // PAR.PT Serial Number = DB1.PFS Serial Number
 PAR.PT_Serial_Number = DB1.PFS_Serial_Number;

 //?DEL:  Manifest Detail
 EXECUTE FUNCTION(PFS Del Manifest Dtl  RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1735884;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.Label_Date);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Lot_Tracking_Flag);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT OM Manifest Detail DL) TYPE(DLTOBJ) FILE(OMFNCPP)          AC1183251;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Case_Sequence_Number);
  CASE;

  // IF PAR.Lot Tracking Flag is yes
  IF PAR.Lot_Tracking_Flag = 'Y';

  EXECUTE FUNCTION(PFS Del Order Inv Alc RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1745869;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.PT_Serial_Number);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del Order Inv Alloc   DL) TYPE(DLTOBJ) FILE(PDL8CPP)           AC1505797;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Allocation_Seq_#);
  }

  ENDIF;

 }

 //?UPD:  Inventory Status and Order Number in Product Trace
 // PAR.PT Label Date YYYYMMDD = DB1.PFS Label Date
 PAR.PT_Label_Date_YYYYMMDD = DB1.PFS_Label_Date;

 EXECUTE FUNCTION(PFS Upd Ord/Inv Sts   RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1735848;
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(PAR.PT_Serial_Number);
 PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
 PARAMETER(1);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  //?slm 01/10/2014 MTech Review Product Trace
  //?slm 01/10/2014 MTech Inventory Status, Order Number
  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(PAR.PT_Inventory_Status);
  PARAMETER(PAR.PT_Order_Number);
 }

 //?----- Create Inv Trans Dtl & Update Inv Balance & Detail
 ENDIF;

 ENDIF;

 // PAR.PFS Process Status = CON.1
 PAR.PFS_Process_Status = 1;

 ENDIF;

 //?MARK PROCESSED: Inactive Transaction & Restoration In Progress
 CASE;

 // IF PAR.PFS Error Reason is Inactive Transaction
 IF PAR.PFS_Error_Reason = 'INACTV';

 // OR PAR.PFS Error Reason is Restoration In Progress
 OR PAR.PFS_Error_Reason = 'RSTIP';

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 //?MARK PROCESSED: F02; C03
 CASE;

 // IF DB1.PFS Transaction Type is FM: Freezer ReLocate
 IF DB1.PFS_Transaction_Type = 'F02';

 // OR DB1.PFS Transaction Type is CC: Move to Current Loc
 OR DB1.PFS_Transaction_Type = 'C03';

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 //?MARK PROCESSED: F03 QA Hold or F04 QA Hold
 CASE;

 // IF DB1.PFS Transaction Type is FM: Freezer Hold
 IF ( DB1.PFS_Transaction_Type = 'F03';

 // AND DB1.PFS Inv Adj Reason Code is Q1 QA HOLD (Chill-time)
 AND DB1.PFS_Inv_Adj_Reason_Code = '6' );

 // OR DB1.PFS Transaction Type is FM: Freezer Release Hold
 OR ( DB1.PFS_Transaction_Type = 'F04';

 // AND DB1.PFS Inv Adj Reason Code is Q1 QA HOLD (Chill-time)
 AND DB1.PFS_Inv_Adj_Reason_Code = '6' );

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 CASE;

 // IF PAR.PFS Process Status is Not Processed
 IF PAR.PFS_Process_Status = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg PrcSts/ErrRsn     CH) TYPE(CHGOBJ) FILE(PPBGCPP)           AC1735977;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Inv_Adj_Seq_Nbr);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(PAR.PFS_Error_Reason);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
  PARAMETER(DB1.PFS_Change_Date);
  PARAMETER(DB1.PFS_Change_Time);
  {
   //?Execute internal function

   // PAR.PFS Change Date = JOB.*Job date
   PAR.PFS_Change_Date = JOB.*Job_date;

   // PAR.PFS Change time = JOB.*Job time
   PAR.PFS_Change_Time = JOB.*Job_time;

  }

 }

 ENDIF;

}


