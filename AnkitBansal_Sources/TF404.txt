      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF404
      * TITLE:       Work with Cash Distribution Balance Adjustments
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     10/30/06
      *
      * FUNCTION: This is a Work With that displays the records in the Cash Distribution
      *           Balance Adjustments file.
      *
      *           You cannot revise/delete any existing record--you can only CREATE records.
      *
      *           Restrictors:
      *               None
      *
      *           Positioners:
      *               Revenue week-ending date (descending)
      *
      *           Selectors:
      *               Adjustment date
      *               Exempt record flag
      *               System-assigned number
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 05/27/14  LeAnne Ramsey  (E2991)
      *           This is no longer an IS-Only fucntion. We intend to give it to:
      *           Tim Wood, Kevin Henn, Jeff Sherbondy. I have removed the "IS-Only"
      *           blurb in the screen heading.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd404    cf   e             workstn sfile(tf404s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfl023a   if   e           k disk    infds(dbfeed)
      *    Cash distribution balance adjustments
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svwemdy         s                   like(c1wemdy)
     D svajmdy         s                   like(c1ajmdy)
     D svajsn          s                   like(c1ajsn)
     D svrcexfl        s                   like(c1rcexfl)
      *
      *
      * Parm fields
      *
     D xxynfl          s                   like(c1rcexfl)
     D xxrcexfl        s                   like(c1rcexfl)
     D xxmdy           s                   like(c1wemdy)
     D xxwemdy         s                   like(c1wemdy)
     D xxwedt          s                   like(bawedt)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkwedt          s                   like(bawedt)
     D wkajdt          s                   like(baajdt)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     tf404k1
     C                   write     tf404ec
     C                   exfmt     tf404c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   exsr      $chksv
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   call      'TF4040'
     C                   parm                    c1wemdy
     C                   parm                    c1wemdy
     C                   parm                    c1rcexfl
     C                   parm      *blank        rtncd
      *
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in06 = *on                                  F6-Create
     C                   exsr      $creat
     C                   z-add     wkflow        hdpag1
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svwemdy  <> c1wemdy or
     C                             svajmdy  <> c1ajmdy or
     C                             svrcexfl <> c1rcexfl or
     C                             svajsn   <> c1ajsn
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If empty sfl
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1wemdy       svwemdy
     C                   z-add     c1ajmdy       svajmdy
     C                   z-add     c1ajsn        svajsn
     C                   move      c1rcexfl      svrcexfl
      *
      * Flip Week-ending Date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkwedt
     C                   else
     C     *mdy          move      c1wemdy       wkisodate
     C                   move      wkisodate     wkwedt
     C                   endif                                                  If bad date
      *
      *
      * Flip Adjustment Date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1ajmdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkajdt
     C                   else
     C     *mdy          move      c1ajmdy       wkisodate
     C                   move      wkisodate     wkajdt
     C                   endif                                                  If bad date
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf404s1
     C                   seton                                        83        sflclr
     C                   write     tf404c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   if        c1wemdy = 0
     C     *hival        setll     tfl023a
     C                   else
     C     wkwedt        setll     tfl023a
     C                   endif
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      tfl023a                                82
     C                   if        *in82 = *off                                 If read
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1ajmdy <> 0 and                              If adj date
     C                             wkajdt <> baajdt
     C                   else
      *
     C                   if        c1rcexfl <> *blank and                        If flag
     C                             c1rcexfl <> barcexfl
     C                   else
      *
     C                   if        c1ajsn <> 0 and                               If sys nbr
     C                             c1ajsn <> baajsn
     C                   else
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   z-add     baajsn        d1ajsn
     C                   z-add     bascdbaam     d1scdbaam
     C                   z-add     batcdbaam     d1tcdbaam
     C                   move      barcexfl      d1rcexfl
     C                   move      baajrsn       d1ajrsn
      *
      * Flip week-ending date to MMDDYY format
      *
     C     *iso          test(d)                 bawedt                 92
     C                   if        *in92 = *off
     C                   move      bawedt        wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   endif
      *
      * Flip adjustment date to MMDDYY format
      *
     C     *iso          test(d)                 baajdt                 92
     C                   if        *in92 = *off
     C                   move      baajdt        wkisodate
     C     *mdy          move      wkisodate     d1ajmdy
     C                   endif
      *
     C                   write     tf404s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If sys nbr
     C                   endif                                                  If flag
     C                   endif                                                  If adj date
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Record Exempt Flag
      *
     C                   select
     C                   when      fld = 'C1RCEXFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        50
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1rcexfl
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the create program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'TF104'
     C                   parm      create        mode
     C                   parm      c1wemdy       xxmdy
     C                   parm      c1rcexfl      xxrcexfl
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     c1wemdy       parm                    xxwemdy
     C     wkwedt        parm                    xxwedt
     C     c1rcexfl      parm                    xxrcexfl
      *
     C                   z-add     xxwemdy       svwemdy
     C                   move      xxrcexfl      svrcexfl
      *
      * Key lists
      *   none
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
