// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMQ6DFR
// ?Date: 14.08.2025 Time: 03:27:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?******** Note - there ARE 50 files being used in this pgm ****
//?Change Log
DO;

//?-----------------------------------------------------------
//?******** Note - there ARE 50 files being used in this pgm ****
//?-----------------------------------------------------------
//?  Load Accounting for the Plant and Load Balancing.
//?- Changed 'RTV UM/Whs Code Lmt,Bx RT - Order Detail'.
EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


ENDDO;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Load No. Status    RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1197430;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Auto_Load_Numbering);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set to add mode if load id passed equal zero
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

// WRK.Display File Add/Change = CND.Add
WRK.Display_File_Add_Change = 'A';

//?If auto = Y, retrieve next load #
CASE;

// IF PAR.Auto Load Numbering? is Yes
IF PAR.Auto_Load_Numbering = 'Y';

EXECUTE FUNCTION(RTV Next Load No.      CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1197433;
PARAMETER(*ZERO);
PARAMETER(PAR.Load_ID);
{
 //?USER: Processing before Data update

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.Load ID = DB1.Next Load ID
 PAR.Load_ID = DB1.Next_Load_ID;

 // DB1.Next Load ID = DB1.Next Load ID + CON.1
 DB1.Next_Load_ID = DB1.Next_Load_ID + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

//?Set to add mode if load id passed equal zero
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display File Add/Change = CND.Change
WRK.Display_File_Add_Change = 'C';

// WRK.Stop/Drop Sequence Number = CON.*ZERO
WRK.Stop_Drop_Sequence_Number = *ZERO;

EXECUTE FUNCTION(RTV Stop/Drop Seq.    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197876;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Find the ending sequence number for the load
 CASE;

 // IF DB1.Stop/Drop Sequence Number GT PAR.Stop/Drop Sequence Number
 IF DB1.Stop_Drop_Sequence_Number > PAR.Stop_Drop_Sequence_Number;

 // PAR.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 PAR.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

ENDIF;

//?If auto number is yes or in change mode, make Load ID display only
CASE;

// IF PAR.Auto Load Numbering? is Yes
IF PAR.Auto_Load_Numbering = 'Y';

// OR WRK.Display File Add/Change is Change
OR WRK.Display_File_Add_Change = 'C';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?If auto number is yes or in change mode, make Load ID display only
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

// LCL.Load Create Sts USR = CND.no
LCL.Load_Create_Sts_USR = 'N';

//?PK0302
//?Get Company Value to determine if the Max Sched Ship Wt edit is done.
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('MAXFLAG');
PARAMETER(LCL.Max_Schd_Shp_Wt_Edit_Flg);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// LCL.Status Flag 4  Y/N = CND.blank
LCL.Status_Flag_4_Y_N = *BLANK;

// LCL.First Order Assigned = CND.yes
LCL.First_Order_Assigned = 'Y';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(06);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


// LCL.First time flag 2     USR = CND.Yes
LCL.First_time_flag_2_USR = 'Y';

//?11/04/09 PKD E00519 Warehouse and Item Access by User
EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?The Accusort sts will be Y if live with DOmestic only
// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.Live_with_TPM);

// Call program EXC Rtv Status-AS     XF.
CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_AccuSort_Active);

//?USER: Initialize subfile control

// CTL.Condition Desc. 1  USR = Condition name of WRK.Display File Add/Change
CTL.Condition_Desc_1_USR = RTVCND(WRK.Display_File_Add_Change);

// WRK.Load Added/Deleted     .U = CND.*No
WRK.Load_Added_Deleted_U = 0;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


//?If change mode, update control fields with load header info
CASE;

// IF WRK.Display File Add/Change is Change
IF WRK.Display_File_Add_Change = 'C';

// Call program RTV UPD Ld Abs.Frt/Wgt XF.
CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(CTL.USR_Total_Freight);

//?** Add Override Total Load Miles to the parameters   E00207
//?** Rtv total load miles into total miles field       E00207
EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.USR_Temperature_3_1);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Allocate_Pounds_Miles);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(CTL.Rated_Freight);
PARAMETER(CTL.USR_Load_Type);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Miles);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Load_Acceptance_Flag);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(WRK.Shipping_Temp_C_F_txt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** If Override TLM are entered, put on the screen, else use TLM
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// CTL.Total Load Miles = PAR.Override Total Load Miles
CTL.Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** Highlight the display field if it was replaced
// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

//?** If Override TLM are entered, put on the screen, else use TLM
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Total Load Miles = WRK.Total Miles
CTL.Total_Load_Miles = WRK.Total_Miles;

ENDIF;

//?9/5/2007 slm Populate CTL.Carrier Code
// CTL.Carrier Code = CTL.USR Carrier Code
CTL.Carrier_Code = CTL.USR_Carrier_Code;

// CTL.Shipping Temp Code C/F = WRK.Shipping Temp C/F txt
CTL.Shipping_Temp_Code_C_F = WRK.Shipping_Temp_C_F_txt;

// CTL.USR Total Weight = PAR.Total Weight
CTL.USR_Total_Weight = PAR.Total_Load_Order_Weight;

// PAR.Load Type = CTL.USR Load Type
PAR.Load_Type = CTL.USR_Load_Type;

//?carrier:
EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Carrier_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?broker:
EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Weight = CTL.USR Total Weight
CTL.USR_Weight = CTL.USR_Total_Weight;

// CTL.Total Freight = CTL.USR Total Freight
CTL.Total_Freight = CTL.USR_Total_Freight;

//?** Retrieve DDD/T if on a load                        W288
EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Deadline_Depart_Date_LH);
PARAMETER(CTL.Deadline_Depart_Time_LH);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?If change mode, update control fields with load header info
// IF *OTHERWISE
IF *OTHERWISE;

//?Add mode
// CTL.Load Status = CND.Unlock
CTL.Load_Status = 'U';

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.USR_Load_Type);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?Default rated freight allocation method
CASE;

// IF CTL.USR Load Type is Regular
IF CTL.USR_Load_Type = 'R';

// CTL.Allocate Pounds/Miles = CND.Miles
CTL.Allocate_Pounds_Miles = 'M';

//?Default rated freight allocation method
// IF CTL.USR Load Type is Bulk
IF CTL.USR_Load_Type = 'B';

// CTL.Allocate Pounds/Miles = CND.Ton
CTL.Allocate_Pounds_Miles = 'T';

//?Default rated freight allocation method
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Allocate Pounds/Miles = CND.Miles
CTL.Allocate_Pounds_Miles = 'M';

ENDIF;

ENDIF;

//?DEFAULT: CTL.USR Warehouse Code & USR Load Type
CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

CASE;

// IF CTL.USR Warehouse Code is Blanks
IF CTL.USR_Warehouse_Code = *BLANK;

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(CTL.USR_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

EXECUTE FUNCTION(RTV WhsTyp/Ctrl/LdTyp RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1959790;
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(CTL.USR_Load_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If truck size is blank default it
CASE;

// IF CTL.USR Truck Size is Not Entered
IF CTL.USR_Truck_Size = *BLANK;

//?Set truck default according to load type default
CASE;

// IF CTL.USR Load Type is Regular
IF CTL.USR_Load_Type = 'R';

// CTL.USR Truck Size = CND.Standard
CTL.USR_Truck_Size = 'T';

//?Set truck default according to load type default
// IF CTL.USR Load Type is Bulk
IF CTL.USR_Load_Type = 'B';

// CTL.USR Truck Size = CND.Bulk
CTL.USR_Truck_Size = 'B';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(PAR.Maximum_pounds);
PARAMETER(PAR.Minimum_pounds);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Export Info from the Order Header Extension  FP1101 7/10/2007
// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Export_Status);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(CTL.Shipping_Line);
PARAMETER(CTL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
PARAMETER(CTL.Ship_To_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(CTL.USR_State_Code);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);

//?Edit gross weight
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Trailer_IN_Weight);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


// CTL.Weight Adjust = PAR.Trailer IN Weight
CTL.Weight_Adjust = PAR.Trailer_IN_Weight;

//?Maximum message
CASE;

// IF CTL.Weight Adjust GT PAR.Maximum pounds
IF CTL.Weight_Adjust > PAR.Maximum_pounds;

// AND PAR.Maximum pounds NE WRK.ZERO
AND PAR.Maximum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is greater than maximum pounds allowed.'
MESSAGE(USR1261 *INFO);

ENDIF;

// PAR.USR Stop = CTL.USR Stop
PAR.USR_Stop = CTL.USR_Stop;

// PAR.USR Weight, 9.0 = CTL.USR Weight, 9.0
PAR.USR_Weight_9_0 = CTL.USR_Weight_9_0;

// PAR.Schedule Sequence Number = CTL.Schedule Sequence Number
PAR.Schedule_Sequence_Number = CTL.Schedule_Sequence_Number;

// PAR.Carrier Code = CTL.USR Carrier Code
PAR.Carrier_Code = CTL.USR_Carrier_Code;

//?** Deadline Departure Date/Time Restrictions          W288
CASE;

// IF PAR.Access Limited Sts USR is yes
IF PAR.Access_Limited_Sts_USR = 'Y';

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?Seaboard only
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?** Retrieve the hours that Shipping is restricted from loading
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** Retrieve Deadline Departure Date/Time from Load Header
EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Deadline_Depart_Date_LH);
PARAMETER(WRK.Deadline_Depart_Time_LH);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Validate if hours are entered for a warehouse
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** Validate if hours are entered for a warehouse
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** Validate if hours are entered for a warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?** If SSD = DDD then enforce Restricted Time Range    W288
CASE;

// IF WRK.Deadline Depart Date LH EQ CTL.Scheduled Ship Date USR
IF WRK.Deadline_Depart_Date_LH = CTL.Scheduled_Ship_Date_USR;

//?** Error if DDT is during restriced hours             W288
CASE;

// IF WRK.Deadline Depart Time LH GE WRK.Dock Unavail Start Time
IF WRK.Deadline_Depart_Time_LH >= WRK.Dock_Unavail_Start_Time;

// AND WRK.Deadline Depart Time LH LE WRK.Dock Unavail End Time
AND WRK.Deadline_Depart_Time_LH <= WRK.Dock_Unavail_End_Time;

// Send error message - 'Invalid SSD & DDD/T - during Restricted Hours-chg Dlvry Time, see Schedulin
ERROR(USR4223);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

ENDIF;

ENDIF;

ENDIF;

//?** Error if date puts DDD/T in the past. Truck will not have
//?** time to load and leave. Send an error message.
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?** Error if DDD = Today & DDT is before system time   W288
CASE;

// IF WRK.Deadline Depart Date LH EQ WRK.Current System Date
IF WRK.Deadline_Depart_Date_LH = WRK.Current_System_Date;

// AND WRK.Deadline Depart Time LH LE WRK.Current System Time
AND WRK.Deadline_Depart_Time_LH <= WRK.Current_System_Time;

// Send error message - 'DDD/Time must be later than NOW, Chg Ship Date or Deliv Time'
ERROR(USR4233);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

ENDIF;

EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Deadline_Depart_Date_LH);
PARAMETER(CTL.Deadline_Depart_Time_LH);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

//?If there are orders on load, cannot change load type
EXECUTE FUNCTION(RTV Chk any ords on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1296397;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.USR_Check_Y_N_Status);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 QUIT;

}


//?Can't change to load type/ship mth if locked load (always)
CASE;

// IF CTL.Load Status is Lock
IF CTL.Load_Status = 'L';

// PAR.USR Check Y/N Status = CND.yes
PAR.USR_Check_Y_N_Status = 'Y';

ENDIF;

// CTL.Status Description = Condition name of CTL.Load Status
CTL.Status_Description = RTVCND(CTL.Load_Status);

//?Set CTL stops (first time only)
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// CTL.Scheduled Ship Date = CTL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

// WRK.Scheduled Ship Date = CTL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

//?If change mode update CTL Load fields
CASE;

// IF WRK.Display File Add/Change is Change
IF WRK.Display_File_Add_Change = 'C';

// WRK.USR Carrier Code = CTL.USR Carrier Code
WRK.USR_Carrier_Code = CTL.USR_Carrier_Code;

// WRK.USR Truck Size = CTL.USR Truck Size
WRK.USR_Truck_Size = CTL.USR_Truck_Size;

// WRK.USR Load Type = CTL.USR Load Type
WRK.USR_Load_Type = CTL.USR_Load_Type;

// WRK.USR Shipping Method = CTL.USR Shipping Method
WRK.USR_Shipping_Method = CTL.USR_Shipping_Method;

// WRK.Schedule Sequence Number = CTL.Schedule Sequence Number
WRK.Schedule_Sequence_Number = CTL.Schedule_Sequence_Number;

// WRK.USR State Code = CTL.USR State Code
WRK.USR_State_Code = CTL.USR_State_Code;

ENDIF;

CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// AND WRK.USR Assigned This Load is Blank
AND WRK.USR_Assigned_This_Load = *BLANK;

// CTL.USR Stop = CON.1
CTL.USR_Stop = 1;

// PAR.USR Stop = CTL.USR Stop
PAR.USR_Stop = CTL.USR_Stop;

// WRK.USR Stop = CTL.USR Stop
WRK.USR_Stop = CTL.USR_Stop;

ENDIF;

ENDIF;

// CTL.USR Order Value Change = CON.*ZERO
CTL.USR_Order_Value_Change = *ZERO;

// WRK.USR Output Only Status = CND.no
WRK.USR_Output_Only_Status = 'N';

//?Carrier is output only if Locked-Invoiced or a Trailer is on the load
CASE;

// IF CTL.Load Status is Locked thru Invoiced
IF CTL.Load_Status = 'I'/'L'/'S';

// WRK.USR Output Only Status = CND.yes
WRK.USR_Output_Only_Status = 'Y';

//?Carrier is output only if Locked-Invoiced or a Trailer is on the load
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Trailer Number     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1366270;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Trailer_Id);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Trailer Id NE WRK.BLANK
IF WRK.Trailer_Id <> WRK.BLANK;

// WRK.USR Output Only Status = CND.yes
WRK.USR_Output_Only_Status = 'Y';

ENDIF;

ENDIF;

// CTL.Ship To City = CTL.City 11 USR
CTL.Ship_To_City = CTL.City_11_USR;

//?check plant
CASE;

// IF LCL.First time flag 2     USR is Yes
IF LCL.First_time_flag_2_USR = 'Y';

// LCL.First time flag 2     USR = CND.No
LCL.First_time_flag_2_USR = 'N';

CASE;

// IF CTL.USR Warehouse Code is Warehouse Code Blank
IF CTL.USR_Warehouse_Code = *BLANK;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

CASE;

// IF LCL.Company Organization is Daily's
IF LCL.Company_Organization = 'D';

// CTL.USR Warehouse Code = PAR.Warehouse Code
CTL.USR_Warehouse_Code = PAR.Warehouse_Code;

// WRK.USR Warehouse Code = PAR.Warehouse Code
WRK.USR_Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

ENDIF;

ENDIF;

//?02/09/09 PKD S00660 Initialize Earliest Deadline Departure Date
//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// Execute function Set Off Indicator 48   US.
EXECUTE FUNCTION(Set Off Indicator 48   US) TYPE(EXCUSRSRC) ('PDJ5UFR');
{
 C                     SETOF                     48    SETOFF INDICATO
}


// RCD.USR Status (Y/N) = CND.no
RCD.USR_Status_Y_N = 'N';

// RCD.Month/Day Display     USR = DB1.Requested Delivery Date
RCD.Month_Day_Display_USR = DB1.Requested_Delivery_Date;

//?If add mode only bring in orders that aren't assigned to loads
CASE;

// IF WRK.Display File Add/Change is Add
IF WRK.Display_File_Add_Change = 'A';

// AND DB1.Load ID is Blank
AND DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?If change bring in orders that aren't assigned, and orders for this load
CASE;

// IF WRK.Display File Add/Change is Change
IF WRK.Display_File_Add_Change = 'C';

CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// OR CTL.Load ID EQ DB1.Load ID
OR CTL.Load_ID = DB1.Load_ID;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?RMC --9/26/07 save to test that one order exists with the load start co.
CASE;

// IF RCD.Company Number EQ CTL.Company Number
IF RCD.Company_Number = CTL.Company_Number;

// AND WRK.Status Flag 3  Y/N is No
AND WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.Yes
WRK.Status_Flag_3_Y_N = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Exclude if Order is Confirmed, Complete, or Cancelled
CASE;

// IF DB1.Header Status is Conf/Comp/Canc
IF DB1.Header_Status = 'X'/'C'/'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude orders set to "Non Load"
CASE;

// IF DB1.Load Plan Order is no
IF DB1.Load_Plan_Order = 'N';

// AND DB1.Load ID is Blank
AND DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude orders whose load types don't match existing load type
CASE;

// IF CTL.USR Load Type is Bulk & Regular
IF CTL.USR_Load_Type = 'B'/'R';

CASE;

// IF DB1.Load Type NE CTL.USR Load Type
IF DB1.Load_Type <> CTL.USR_Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude Block Orders
CASE;

// IF DB1.Block Order Flag is Block Order
IF DB1.Block_Order_Flag = 'B';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?ALWAYS select orders on load
CASE;

// IF DB1.Load ID EQ CTL.Load ID
IF DB1.Load_ID = CTL.Load_ID;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?If record is selected, retv. stop #
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?If order Load ID is not zero, retrieve stop number
CASE;

// IF DB1.Load ID is NE Blank
IF DB1.Load_ID <> *ZERO;

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?If order Load ID is not zero, retrieve stop number
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Stop = CON.*ZERO
RCD.USR_Stop = 0;

ENDIF;

EXECUTE FUNCTION(RTV Region for State   RT) TYPE(RTVOBJ) FILE(PDKGREP)          AC1381891;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Region_Code);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?If control stop is entered, select stop GE
CASE;

// IF CTL.USR Stop is Entered
IF CTL.USR_Stop <> *ZERO;

// AND RCD.USR Stop LT CTL.USR Stop
AND RCD.USR_Stop < CTL.USR_Stop;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.USR Weight, 5.0 = DB1.Order Weight Total
RCD.USR_Weight_5_0 = DB1.Order_Weight_Total;

//?If control weight is entered, select only weight LE
CASE;

// IF CTL.USR Weight, 5.0 is NE Zeros
IF CTL.USR_Weight_5_0 <> *ZERO;

// AND RCD.USR Weight, 5.0 GT CTL.USR Weight, 5.0
AND RCD.USR_Weight_5_0 > CTL.USR_Weight_5_0;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If control region code is entered, then select regions equal to
CASE;

// IF CTL.Region Code is Entered
IF CTL.Region_Code <> *BLANK;

// AND RCD.Region Code NE CTL.Region Code
AND RCD.Region_Code <> CTL.Region_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


//?E01488 RMC 5/19/11 rtv appt cnfm flds
// Call program RTV OHE Appt Cnfrm fld XF.
CALL PROGRAM(RTV OHE Appt Cnfrm fld XF) ('PNXQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_Appt_Confirmation_#);
PARAMETER(RCD.OHE_Appt_Confirmation_Nm);

//?Select Warehouse  TRF011  7/27/06
CASE;

// IF CTL.USR Warehouse Code is Warehouse Code not Blank
IF CTL.USR_Warehouse_Code <> *BLANK;

// AND CTL.USR Warehouse Code NE RCD.Warehouse Code
AND CTL.USR_Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select ship to state code PKTR01 8/4/04
CASE;

// IF DB1.Ship To State Code NE CTL.Ship To State Code
IF DB1.Ship_To_State_Code <> CTL.Ship_To_State_Code;

// AND CTL.Ship To State Code is State code not Blanks
AND CTL.Ship_To_State_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If live with tpm, domestic only..,,. then only select INTL orders
CASE;

// IF LCL.Live with TPM is Yes
IF LCL.Live_with_TPM = 'Y';

// AND LCL.PFS AccuSort Active is Yes
AND LCL.PFS_AccuSort_Active = 'Y';

EXECUTE FUNCTION(RTV Type              RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2100377;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.OHE Override Type Code is ES
IF LCL.OHE_Override_Type_Code = 'ES';

// OR RCD.Load ID EQ CTL.Load ID
OR RCD.Load_ID = CTL.Load_ID;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// RCD.USR Picked = CON.*BLANK
RCD.USR_Picked = *BLANK;

//?record selected - additional checks
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.USR_State_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Check Pick Event   RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1198676;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('03');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?If Order has been picked, then mark as picked
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.USR Picked = CON.Picked
RCD.USR_Picked = 'Picked';

ENDIF;

//?Issue error message if order on load, but no stop
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?If order Load ID is not zero, retrieve stop number
CASE;

// IF DB1.Load ID is NE Blank
IF DB1.Load_ID <> *ZERO;

CASE;

// IF RCD.USR Stop is Entered
IF RCD.USR_Stop <> *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Stop Must be Entered'
ERROR(USR1263);
MSGPARM(RCD.USR_Stop);

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

ENDIF;

ENDIF;

//?Issue error message if load type on existing order <> ctl load type
CASE;

// IF DB1.Load Type NE CTL.USR Load Type
IF DB1.Load_Type <> CTL.USR_Load_Type;

// AND DB1.Load ID EQ CTL.Load ID
AND DB1.Load_ID = CTL.Load_ID;

// Send error message - 'Order's load type doesn't match type of load.'
ERROR(USR1876);
MSGPARM(RCD.Order_Number);

ENDIF;

ENDIF;

// RCD.USR Update Flag = CND.No
RCD.USR_Update_Flag = *BLANK;

//?Load up stop customer array
CASE;

// IF RCD.USR Stop NE WRK.ZERO
IF RCD.USR_Stop <> WRK.ZERO;

// AND PGM.*Record selected is *YES
AND PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(CRT Load Plan Stop Cst CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1378310;
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Processing if Data record already exists

 QUIT;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

// RCD.Must Ship Error = CND.No Error
RCD.Must_Ship_Error = *BLANK;

//?------------------------------------------------------------------------
//?C7111: If we do not want to allow stop changes from this program,
//?    a) comment the following code.
// RCD.Stop/Drop = RCD.USR Stop
RCD.Stop_Drop = RCD.USR_Stop;

//?C7111: End -------------------------------------------------------------
// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?CALC: Subfile control function fields

//?Must enter load # if auto numbering = no
CASE;

// IF PAR.Auto Load Numbering? is No
IF PAR.Auto_Load_Numbering = 'N';

// AND WRK.Display File Add/Change is Add
AND WRK.Display_File_Add_Change = 'A';

CASE;

// IF CTL.Load ID is Blank
IF CTL.Load_ID = *ZERO;

// Send error message - 'Automatic numbering not in effect, please enter a Load Number'
ERROR(USR1249);
MSGPARM(CTL.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Load ID already exists'
ERROR(USR1251);
MSGPARM(CTL.Load_ID);

ENDIF;

ENDIF;

ENDIF;

//?Prompt processing
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Carrier
CASE;

// IF PGM.*Cursor field <IS> CTL.USR Carrier Code
IF PGM.*Cursor_field = CTL.USR_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(CTL.USR_Carrier_Code);

ENDIF;

//?usr warehouse code TRF011
CASE;

// IF PGM.*Cursor field <IS> CTL.USR Warehouse Code
IF PGM.*Cursor_field = CTL.USR_Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(CTL.USR_Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

//?Ship to Customer
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?Ship to State (Selector field for subfile)
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To State Code
IF PGM.*Cursor_field = CTL.Ship_To_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(CTL.Ship_To_State_Code);

ENDIF;

//?Carrier broker
CASE;

// IF PGM.*Cursor field <IS> CTL.Carrier Broker
IF PGM.*Cursor_field = CTL.Carrier_Broker;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(CTL.Carrier_Broker);

ENDIF;

//?Truck size
CASE;

// IF PGM.*Cursor field <IS> CTL.USR Truck Size
IF PGM.*Cursor_field = CTL.USR_Truck_Size;

// Call program SEL Truck Size Active  SR.
CALL PROGRAM(SEL Truck Size Active  SR) ('PDEPSRR');
PARAMETER(CTL.USR_Truck_Size);

ENDIF;

//?Ship to State (displayed in the control record)
CASE;

// IF PGM.*Cursor field <IS> CTL.USR State Code
IF PGM.*Cursor_field = CTL.USR_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(CTL.USR_State_Code);

ENDIF;

//?Region code
CASE;

// IF PGM.*Cursor field <IS> CTL.Region Code
IF PGM.*Cursor_field = CTL.Region_Code;

// Call program SEL Active Region      SR.
CALL PROGRAM(SEL Active Region      SR) ('PDDOSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Region_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Validate usr warehouse  TFS011      7/27/06 RMC
CASE;

// IF CTL.USR Warehouse Code is Warehouse Code not Blank
IF CTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(CTL.USR_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(CTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

//?Validate truck size
CASE;

// IF CTL.USR Truck Size is Entered
IF CTL.USR_Truck_Size <> *BLANK;

EXECUTE FUNCTION(Val Truck Size        RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197603;
PARAMETER(CTL.USR_Truck_Size);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Truck size doesn't exists'
ERROR(USR1254);
MSGPARM(CTL.USR_Truck_Size);

ENDIF;

//?Validate truck size
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Truck size must be entered for load &2'
ERROR(USR1255);
MSGPARM(CTL.USR_Truck_Size);
MSGPARM(CTL.Load_ID);

ENDIF;

//?Validate ship to state (selector for subfile)
CASE;

// IF CTL.Ship To State Code NE WRK.BLANK
IF CTL.Ship_To_State_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Validate State Cd  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1201475;
PARAMETER(CTL.Ship_To_State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(CTL.Ship_To_State_Code);

ENDIF;

ENDIF;

//?Validate usr ship to state (displayed in control record)
CASE;

// IF CTL.USR State Code NE WRK.BLANK
IF CTL.USR_State_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Validate State Cd  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1201475;
PARAMETER(CTL.USR_State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(CTL.USR_State_Code);

ENDIF;

ENDIF;

//?Validate region code
CASE;

// IF CTL.Region Code is Entered
IF CTL.Region_Code <> *BLANK;

EXECUTE FUNCTION(VAL Active Region      RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1378942;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Region_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'PD Region not found'
ERROR(USR2225);
MSGPARM(CTL.Company_Number);
MSGPARM(CTL.Region_Code);

ENDIF;

ENDIF;

//?Load type cannot be blank
CASE;

// IF CTL.USR Load Type is Blank
IF CTL.USR_Load_Type = *BLANK;

// Send error message - 'Load Type cannnot be BLANK.'
ERROR(USR1813);
MSGPARM(CTL.USR_Load_Type);

ENDIF;

// PAR.Scheduled Ship Date = CTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

// WRK.USR Assigned This Load = CND.Blank
WRK.USR_Assigned_This_Load = *BLANK;

//?If carrier is entered and broker is not defaul broker
CASE;

// IF CTL.USR Carrier Code is entered
IF CTL.USR_Carrier_Code <> *BLANK;

// AND CTL.Carrier Broker is not entered
AND CTL.Carrier_Broker = *BLANK;

// CTL.Carrier Broker = CTL.USR Carrier Code
CTL.Carrier_Broker = CTL.USR_Carrier_Code;

ENDIF;

//?Validate carrier broker
CASE;

// IF CTL.Carrier Broker is entered
IF CTL.Carrier_Broker <> *BLANK;

EXECUTE FUNCTION(Val Carrier           RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1197583;
PARAMETER(CTL.Carrier_Broker);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier broker not found.'
ERROR(USR2428);
MSGPARM(CTL.Carrier_Broker);

ENDIF;

ENDIF;

//?carrier:
EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Carrier_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?broker:
EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?11/04/09 PKD E00519 Access by Warehouse
//?VAL: CTL.USR Warehouse Code
CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

CASE;

// IF CTL.USR Warehouse Code is Blanks
IF CTL.USR_Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER('TRF');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


// PAR.Shipping Method = CTL.USR Shipping Method
PAR.Shipping_Method = CTL.USR_Shipping_Method;

//?Reload if CTL positioners/selectors changed
CASE;

// IF CTL.Order Number NE WRK.Order Number
IF CTL.Order_Number <> WRK.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Warehouse Code NE WRK.USR Warehouse Code
IF CTL.USR_Warehouse_Code <> WRK.USR_Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Stop NE WRK.USR Stop
IF CTL.USR_Stop <> WRK.USR_Stop;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Scheduled Ship Date NE WRK.Scheduled Ship Date
IF CTL.Scheduled_Ship_Date <> WRK.Scheduled_Ship_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Weight, 5.0 NE WRK.USR Weight, 5.0
IF CTL.USR_Weight_5_0 <> WRK.USR_Weight_5_0;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.LTL Flag NE PAR.LTL Flag
IF CTL.LTL_Flag <> PAR.LTL_Flag;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Region Code NE WRK.Region Code
IF CTL.Region_Code <> WRK.Region_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Reefer Temperature NE WRK.Reefer Temperature
IF CTL.Reefer_Temperature <> WRK.Reefer_Temperature;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Header Status NE WRK.Header Status
IF CTL.Header_Status <> WRK.Header_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Shipping Method NE WRK.Shipping Method
IF CTL.Shipping_Method <> WRK.Shipping_Method;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Ship To Customer NE WRK.Ship To Customer
IF CTL.Ship_To_Customer <> WRK.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Ship To State Code NE WRK.Ship To State Code
IF CTL.Ship_To_State_Code <> WRK.Ship_To_State_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Customer Purchase Order # NE WRK.Customer Purchase Order #
IF CTL.Customer_Purchase_Order_# <> WRK.Customer_Purchase_Order_#;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.City 11 USR NE CTL.Ship To City
IF CTL.City_11_USR <> CTL.Ship_To_City;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Update "last" ctl fields
DO;

// WRK.Order Number = CTL.Order Number
WRK.Order_Number = CTL.Order_Number;

// WRK.USR Warehouse Code = CTL.USR Warehouse Code
WRK.USR_Warehouse_Code = CTL.USR_Warehouse_Code;

// WRK.USR Company Number = CTL.USR Company Number
WRK.USR_Company_Number = CTL.USR_Company_Number;

// WRK.USR Stop = CTL.USR Stop
WRK.USR_Stop = CTL.USR_Stop;

// WRK.Scheduled Ship Date = CTL.Scheduled Ship Date
WRK.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// WRK.Ship To Customer = CTL.Ship To Customer
WRK.Ship_To_Customer = CTL.Ship_To_Customer;

// WRK.Ship To State Code = CTL.Ship To State Code
WRK.Ship_To_State_Code = CTL.Ship_To_State_Code;

// WRK.USR Weight, 5.0 = CTL.USR Weight, 5.0
WRK.USR_Weight_5_0 = CTL.USR_Weight_5_0;

// PAR.LTL Flag = CTL.LTL Flag
PAR.LTL_Flag = CTL.LTL_Flag;

// WRK.Region Code = CTL.Region Code
WRK.Region_Code = CTL.Region_Code;

// WRK.Reefer Temperature = CTL.Reefer Temperature
WRK.Reefer_Temperature = CTL.Reefer_Temperature;

// WRK.Header Status = CTL.Header Status
WRK.Header_Status = CTL.Header_Status;

// WRK.Shipping Method = CTL.Shipping Method
WRK.Shipping_Method = CTL.Shipping_Method;

//?** If collect truck or rail, default carrier to Buy   FP1251
CASE;

// IF CTL.Shipping Method is Collect
IF CTL.Shipping_Method = 'CR'/'CT';

// CTL.Carrier Code = CND.Buyer's Truck
CTL.Carrier_Code = 'BUY';

// CTL.USR Carrier Code = CND.Buyer's Truck
CTL.USR_Carrier_Code = 'BUY';

// CTL.Carrier Broker = CND.Buyer's Truck
CTL.Carrier_Broker = 'BUY';

ENDIF;

// WRK.Customer Purchase Order # = CTL.Customer Purchase Order #
WRK.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

ENDDO;

//?Reconfirm if Load Control fields change
CASE;

// IF CTL.USR Carrier Code NE WRK.USR Carrier Code
IF CTL.USR_Carrier_Code <> WRK.USR_Carrier_Code;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.Carrier Broker NE WRK.Carrier Broker
IF CTL.Carrier_Broker <> WRK.Carrier_Broker;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.USR Truck Size NE WRK.USR Truck Size
IF CTL.USR_Truck_Size <> WRK.USR_Truck_Size;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.USR Load Type NE WRK.USR Load Type
IF CTL.USR_Load_Type <> WRK.USR_Load_Type;

//?oms132:  default to Pounds for Bulk loads, Miles for regular loads
//?Default rated freight allocation method
CASE;

// IF CTL.USR Load Type is Regular
IF CTL.USR_Load_Type = 'R';

// CTL.Allocate Pounds/Miles = CND.Miles
CTL.Allocate_Pounds_Miles = 'M';

//?Default rated freight allocation method
// IF CTL.USR Load Type is Bulk
IF CTL.USR_Load_Type = 'B';

// CTL.Allocate Pounds/Miles = CND.Ton
CTL.Allocate_Pounds_Miles = 'T';

//?Default rated freight allocation method
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Allocate Pounds/Miles = CND.Miles
CTL.Allocate_Pounds_Miles = 'M';

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.USR Shipping Method NE WRK.USR Shipping Method
IF CTL.USR_Shipping_Method <> WRK.USR_Shipping_Method;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.Schedule Sequence Number NE WRK.Schedule Sequence Number
IF CTL.Schedule_Sequence_Number <> WRK.Schedule_Sequence_Number;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.Total Load Miles NE WRK.Total Load Miles
IF CTL.Total_Load_Miles <> WRK.Total_Load_Miles;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.USR State Code NE WRK.USR State Code
IF CTL.USR_State_Code <> WRK.USR_State_Code;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Reconfirm if Load Control fields change
// IF CTL.Flat Amount NE LCL.Flat Amount
IF CTL.Flat_Amount <> LCL.Flat_Amount;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?Update "last" ctl load fields
DO;

// WRK.USR Carrier Code = CTL.USR Carrier Code
WRK.USR_Carrier_Code = CTL.USR_Carrier_Code;

// WRK.Carrier Broker = CTL.Carrier Broker
WRK.Carrier_Broker = CTL.Carrier_Broker;

// WRK.USR Truck Size = CTL.USR Truck Size
WRK.USR_Truck_Size = CTL.USR_Truck_Size;

// WRK.Schedule Sequence Number = CTL.Schedule Sequence Number
WRK.Schedule_Sequence_Number = CTL.Schedule_Sequence_Number;

// WRK.USR State Code = CTL.USR State Code
WRK.USR_State_Code = CTL.USR_State_Code;

// LCL.Flat Amount = CTL.Flat Amount
LCL.Flat_Amount = CTL.Flat_Amount;

//?** Always display override miles if they are entered.   E00207
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// CTL.Total Load Miles = PAR.Override Total Load Miles
CTL.Total_Load_Miles = PAR.Override_Total_Load_Miles;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

ENDDO;

//?Reset total weight, total freight and temp
// CTL.USR Total Freight = CTL.Total Freight
CTL.USR_Total_Freight = CTL.Total_Freight;

// CTL.USR Weight = CTL.USR Total Weight
CTL.USR_Weight = CTL.USR_Total_Weight;

// PAR.Trailer OUT Weight = CON.*ZERO
PAR.Trailer_OUT_Weight = *ZERO;

//?Reset gross weight
// PAR.Weight Adjust = CTL.Weight Adjust
PAR.Weight_Adjust = CTL.Weight_Adjust;

//?F15=If lock load request, check for errors ><
CASE;

// IF CTL.*CMD key is *Lock Load
IF CTL.*CMD_key = '15';

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.USR_Check_Y_N_Status);
PARAMETER(WRK.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


//?** Don't allow lock if errors pending in Order Detail   P001251
EXECUTE FUNCTION(EDT Lock Load Edits    IF) TYPE(EXCINTFUN)                     AC1384547;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.USR_Total_Weight);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(CTL.Load_Acceptance_Flag);
PARAMETER(WRK.*SFLSEL);
PARAMETER(WRK.Error_Status);
PARAMETER(WRK.Block_Order_Flag);
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Orders_on_Load);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Stop/Drop is EQ Zero
  IF DB1.Stop_Drop = *ZERO;

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  QUIT;

  ENDIF;

 }

 //?Validate lock request
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'No orders assigned to load &1; Can't lock'
 ERROR(USR1276);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Validate lock request
 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Status is Locked thru Invoiced
 IF PAR.Load_Status = 'I'/'L'/'S';

 // Send error message - 'Load &2 cannot be locked due to load status'
 ERROR(USR2189);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Carrier Code EQ WRK.BLANK
 IF PAR.Carrier_Code = WRK.BLANK;

 // Send error message - 'Carrier must be entered for load &2'
 ERROR(USR1253);
 MSGPARM(PAR.Carrier_Code);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Truck Size EQ WRK.BLANK
 IF PAR.Truck_Size = WRK.BLANK;

 // Send error message - 'Truck size must be entered for load &2'
 ERROR(USR1255);
 MSGPARM(PAR.Truck_Size);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Shipping Method EQ WRK.BLANK
 IF PAR.Shipping_Method = WRK.BLANK;

 // Send error message - 'Shipping Method required to lock load.'
 ERROR(USR2197);
 MSGPARM(PAR.Shipping_Method);

 //?Validate lock request
 // IF PAR.USR Orders on Load is yes
 IF PAR.USR_Orders_on_Load = 'Y';

 // Send error message - 'Function not allowed; Load &1 has orders tied to it which are not assigned
 ERROR(USR2196);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Acceptance Flag is Load not Accepted
 IF PAR.Load_Acceptance_Flag = 'U';

 // Send error message - 'Load cannot be locked, it is unaccepted.'
 ERROR(USR2514);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  CASE;

  // IF DB1.Header Status is Hold
  IF DB1.Header_Status = 'H';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Header Status is Cancelled
  IF DB1.Header_Status = 'X';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Order in Use is yes
  IF DB1.Order_in_Use = 'Y';

  // PAR.Order in Use = DB1.Order in Use
  PAR.Order_in_Use = DB1.Order_in_Use;

  QUIT;

  ENDIF;

 }

 //?Error if held/cancelled/in use order(s) on load
 CASE;

 // IF PAR.Header Status is Hold
 IF PAR.Header_Status = 'H';

 // Send error message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
 ERROR(USR1921);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Header Status is Cancelled
 IF PAR.Header_Status = 'X';

 // Send error message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
 ERROR(USR2236);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Order in Use is yes
 IF PAR.Order_in_Use = 'Y';

 // Send error message - 'Load &2 has order(s) in use; Load cannot be locked.'
 ERROR(USR2280);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Error if held/cancelled/in use order(s) on load
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Check if Export Order Automation Upload had errors  P001251
 EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Cannot lock if Upload had errors                  P001251
 CASE;

 // IF LCL.Order Requires Review is Yes
 IF LCL.Order_Requires_Review = 'Y';

 // Send error message - 'Order has detail lines that require review'
 ERROR(USR4464);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?** Cannot lock if Upload had errors                  P001251
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Maximum_pounds);
 PARAMETER(PAR.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check minimum and maximum pounds
 CASE;

 // IF PAR.Total Weight LT PAR.Minimum pounds
 IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

 // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
 MESSAGE(USR1262 *INFO);
 MSGPARM(PAR.Load_ID);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 //?Check minimum and maximum pounds
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Total Weight GT PAR.Maximum pounds
 IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

 // Send information message - 'Load weight is greater than maximum allowed for truck size.'
 MESSAGE(USR2231 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Locking load pending'
 MESSAGE(USR1273 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and Comments
 DO;

 //?** 09/20/2011 LJB P001251 Export Order Automation
 //?** Cannot lock if Export Order Automation Upload had errors
 //?** that have not been cleared up
 ENDDO;

}


CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?F16=If unlock load request, check for errors ><
CASE;

// IF CTL.*CMD key is *Unlock Load
IF CTL.*CMD_key = '16';

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.USR_Check_Y_N_Status);
PARAMETER(WRK.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


//?RMC PFs017 new par Allow Unlock if Picked = N
EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Load_Status);
PARAMETER(WRK.*SFLSEL);
PARAMETER(WRK.Error_Status);
PARAMETER(WRK.Block_Order_Flag);
PARAMETER('N');
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 //?check the entry control field too.  4/28/05 so christa can do.
 EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
 PARAMETER(JOB.*USER);
 PARAMETER('O/P');
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Unlock_Load_Authority);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // AND WRK.Unlock Load Authority is Blank
 AND WRK.Unlock_Load_Authority = *BLANK;

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 CASE;

 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 //?  (load contains a block order)
 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // Send error message - 'Load has been shipped can not unlock it'
 ERROR(USR1272);
 MSGPARM(PAR.Load_Status);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?**** Determine if Load has been picked, if yes do not allow unlock
 //?**** This function checks OP Order Events & AS Picked Acknowledgment
 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
 //?  and it isnt shipping doing it.
 // Call program RTV Load Order Picked  XF.
 CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Pick_Status_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Pick_Status_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Pick Status USR = CND.Not Picked
  PAR.Pick_Status_USR = 'N';

  //?USER: Process Data record

  // PAR.Pick Status USR = CND.Picked
  PAR.Pick_Status_USR = 'Y';

  QUIT;

 }

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 CASE;

 // IF WRK.Pick Status USR is Picked
 IF WRK.Pick_Status_USR = 'Y';

 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
 ERROR(USR1999);
 MSGPARM(PAR.Load_Status);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PFS Val Close Ord/Trk XF.
 CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Status_Y_or_N);

 CASE;

 // IF WRK.Status - Y or N is yes
 IF WRK.Status_Y_or_N = 'Y';

 // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
 ERROR(USR3629);
 MSGPARM(PAR.*SFLSEL);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?F18 = Rated Freight, If freight recovery request, check for errors
CASE;

// IF CTL.*CMD key is *Freight Recovery
IF CTL.*CMD_key = '18';

//?Load must be locked
CASE;

// IF CTL.Load Status is Not Locked
IF CTL.Load_Status = 'E'/'S'/'U'/'C'/'I';

// Send error message - 'Freight recovery not allowed due to load status'
ERROR(USR1285);
MSGPARM(CTL.Load_Status);

//?Load must be locked
// IF CTL.USR State Code EQ WRK.BLANK
IF CTL.USR_State_Code = WRK.BLANK;

// Send error message - 'Ship to State required to calculate rated freight.'
ERROR(USR2229);
MSGPARM(CTL.USR_State_Code);

//?Load must be locked
// IF *OTHERWISE
IF *OTHERWISE;

//?** Calc freight using miles on the screen (CTL)   E00207
// Call program EDT Calc Rated Freight ET.
CALL PROGRAM(EDT Calc Rated Freight ET) ('PDYLETR');
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Total_Load_Order_Weight);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Allocate_Pounds_Miles);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Rated_Freight);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(CTL.USR_Carrier_Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?VAL:  Carrier
CASE;

// IF CTL.USR Carrier Code is entered
IF CTL.USR_Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(CTL.USR_Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Record not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(CTL.USR_Carrier_Code);

QUIT;

ENDIF;

ENDIF;

//?VAL:  Can Rated Frt be calc'd for carrier        RMC TRF011 7/27/06
CASE;

// IF CTL.USR Carrier Code is entered
IF CTL.USR_Carrier_Code <> *BLANK;

//?only if it changed                  RMC 9/14/06
CASE;

// IF CTL.USR Carrier Code NE CTL.Carrier Code
IF CTL.USR_Carrier_Code <> CTL.Carrier_Code;

//?TPA 09/18/07  PAR.Carrier Code Changed to CTL Carrier Code
//?TPA 09/20/07  Skip Rated Freight check if Flat Rate entered or
//?if the Carrier Code is Buyer's truck
CASE;

// IF CTL.Flat Amount is GT Zero
IF CTL.Flat_Amount > *ZERO;

// OR CTL.USR Carrier Code is Buyer's Truck
OR CTL.USR_Carrier_Code = 'BUY';

// IF *OTHERWISE
IF *OTHERWISE;

//?** Override TLM will be in CTL context if it was entered
//?** use saved miles since function selects the correct field
// Call program Clc Rated Freight     XF.
CALL PROGRAM(Clc Rated Freight     XF) ('PLAFXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Shipping_Line);
PARAMETER(CTL.Port_Delv_Terminal);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(LCL.Unused_Mile_Rate_1);
PARAMETER(LCL.Status_Flag_1_Y_N);

//?Chk Status instead of Mile Rate 1             RMC 01/23/07 TRF015
CASE;

// IF LCL.Status Flag 1  Y/N is No
IF LCL.Status_Flag_1_Y_N = 'N';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Rated Freight cannot be calculated for Carrier/Region &1'
ERROR(USR3646);
MSGPARM(CTL.USR_Carrier_Code);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// WRK.USR Input 1 = CND.No
WRK.USR_Input_1 = 'N';

// WRK.USR Input 2 = CND.No
WRK.USR_Input_2 = 'N';

EXECUTE FUNCTION(RTV Del All Stop Custs RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378538;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DEL Stop Cust          DL) TYPE(DLTOBJ) ARRAY(Load_Planning_StoAC1378539;
 PARAMETER(DB1.Stop_Drop);
}


//?F20=Add Traffic Comments
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(CTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?If add mode, make confirm yes
CASE;

// IF PAR.Load ID EQ WRK.ZERO
IF PAR.Load_ID = WRK.ZERO;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?set confirm to yes so can create header without adding orders
ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?****** get fresh order information ******
EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_Address_Line_1);
PARAMETER(RCD.Ship_To_Address_Line_2);
PARAMETER(RCD.Ship_To_Address_Line_3);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Ship_To_Zip_Postal_Code);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Bill_to_Address_Line_1);
PARAMETER(RCD.Bill_to_Address_Line_2);
PARAMETER(RCD.Bill_to_Address_Line_3);
PARAMETER(RCD.Bill_to_City);
PARAMETER(RCD.Bill_to_State_Code);
PARAMETER(RCD.Bill_to_Zip_Postal_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Cancel_Date);
PARAMETER(RCD.Terms_Code);
PARAMETER(RCD.Special_Instructions);
PARAMETER(RCD.Special_Instructions_2);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(RCD.Order_Type_Print_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.User_Original_Entry);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Accounts_Receiv_Ent_1);
PARAMETER(RCD.Accounts_Receiv_Ent_2);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Absorbed_Freight_Rate_CWT);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.LTL_Flag);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Shrink_Wrap);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Attach_to_Invoice_Number);
PARAMETER(RCD.Load_Plan_Order);
PARAMETER(RCD.Print_Pick_Slip);
PARAMETER(RCD.Resell_Reference_Number);
PARAMETER(RCD.Special_Comment_1);
PARAMETER(RCD.Special_Comment_2);
PARAMETER(RCD.Affect_Auto_Accruals);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Manager_Level_Code);
PARAMETER(RCD.VP_Level_Code);
PARAMETER(RCD.Attach_to_Order_Number);
PARAMETER(RCD.Reason_for_Price_Audit);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Invoice_Date);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.A_R_order_Value_Total);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(RCD.Order_Certification_Flag);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?*************************************'***
//?PK0302 --Set Fields to null on for Sched Wt Exceeded processing
CASE;

// IF LCL.First Order Assigned is yes
IF LCL.First_Order_Assigned = 'Y';

// LCL.LSSA Load Slot Type = WRK.Blank 6 USR
LCL.LSSA_Load_Slot_Type = WRK.Blank_6_USR;

// LCL.Warehouse Code Assigned = WRK.Blank 6 USR
LCL.Warehouse_Code_Assigned = WRK.Blank_6_USR;

// LCL.Warehouse Type Assigned = WRK.Blank 6 USR
LCL.Warehouse_Type_Assigned = WRK.Blank_6_USR;

// LCL.Order Weight Assigned = CON.*ZERO
LCL.Order_Weight_Assigned = *ZERO;

// LCL.First Order Assigned = CND.no
LCL.First_Order_Assigned = 'N';

ENDIF;

CASE;

// IF RCD.*SFLSEL is *Assign to Load
IF RCD.*SFLSEL = '1';

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

//?Determining that order can arrive on time  (chg 9/24/09 E00495)
CASE;

// IF CTL.USR Shipping Method is Prepaid
IF CTL.USR_Shipping_Method = 'PR'/'PT';

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

//?** This is only done for Seaboard Customers (skip Dailys & High Plains)
//?** the first stop; If not, use Deadline DD/T; and if that is also
//?** blanks then use Sched Ship Date                    E00495
EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Deadline_Depart_DT_HDR);
PARAMETER(WRK.Deadline_Depart_Time_HDR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Deadline Departure Date not found.
CASE;

// IF WRK.Deadline Depart DT    HDR is not entered
IF WRK.Deadline_Depart_DT_HDR = *ZERO;

// WRK.Deadline Depart DT    HDR = RCD.Scheduled Ship Date
WRK.Deadline_Depart_DT_HDR = RCD.Scheduled_Ship_Date;

CASE;

// IF RCD.Scheduled Ship Date EQ JOB.*Job date
IF RCD.Scheduled_Ship_Date = JOB.*Job_date;

// WRK.Deadline Depart Time  HDR = JOB.*Job time
WRK.Deadline_Depart_Time_HDR = JOB.*Job_time;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Deadline Depart Time  HDR = CON.240000
WRK.Deadline_Depart_Time_HDR = 240000;

ENDIF;

ENDIF;

//?** Retrieve the full city name to pass to the clc pgm    FP1251
EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.USR_City);
PARAMETER(NLL.Ship_To_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Warehouse Code PASS   USR = CON.*BLANK
WRK.Warehouse_Code_PASS_USR = *BLANK;

//?** Miles to Next record not found added as an error  FP1251  11/15/2007
//?** Conver 6.0 time to 4.0
// Call program CLC Must Ship Date     XF.
CALL PROGRAM(CLC Must Ship Date     XF) ('PDJBXFR');
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.USR_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Warehouse_Code_PASS_USR);
PARAMETER(WRK.Must_Ship_Date_USR);
PARAMETER(WRK.Must_Ship_Time_USR);

//?Process date order error
CASE;

// IF WRK.Must Ship Error is No Error
IF WRK.Must_Ship_Error = *BLANK;

// OR WRK.Must Ship Error is Req Ship should =Must Shp
OR WRK.Must_Ship_Error = 'RSD';

// OR LCL.Company Organization is Not Seaboard
OR LCL.Company_Organization = 'D'/'H';

// OR WRK.Must Ship Error is Miles to Next=Zeros
OR WRK.Must_Ship_Error = 'MTN';

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

//?Process date order error
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'This order cannot arrive on time.'
ERROR(USR2688);
MSGPARM(RCD.USR_Stop);

ENDIF;

ENDIF;

ENDIF;

//?If assign to load request, display pending message
CASE;

// IF RCD.*SFLSEL is *Assign to Load
IF RCD.*SFLSEL = '1';

//?Check for errors
CASE;

// IF CTL.Load Status is Locked thru Invoiced
IF CTL.Load_Status = 'I'/'L'/'S';

// Send error message - 'This load is locked you cannot assign orders to it'
ERROR(USR1268);
MSGPARM(CTL.Load_Status);
MSGPARM(RCD.USR_Stop);

//?Check for errors
// IF RCD.USR Stop is Not Entered
IF RCD.USR_Stop = *ZERO;

// Send error message - 'Stop number must be entered to assign order to load'
ERROR(USR1256);
MSGPARM(RCD.USR_Stop);

//?Check for errors
// IF RCD.Load ID EQ CTL.Load ID
IF RCD.Load_ID = CTL.Load_ID;

// Send error message - 'Order has already been assigned to this load, you may delete to reassign th
ERROR(USR1267);

//?Check for errors
// IF RCD.Load ID NE CTL.Load ID
IF RCD.Load_ID <> CTL.Load_ID;

// AND RCD.Load ID NE WRK.ZERO
AND RCD.Load_ID <> WRK.ZERO;

// Send error message - 'Order &2 is tied to another load.'
ERROR(USR2281);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Check for errors
// IF RCD.Load Type NE CTL.USR Load Type
IF RCD.Load_Type <> CTL.USR_Load_Type;

// Send error message - 'Load type on order must match load type.'
ERROR(USR1867);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.USR_Stop);

//?Check for errors
// IF PAR.Shipping Method NE WRK.BLANK
IF PAR.Shipping_Method <> WRK.BLANK;

// AND PAR.Shipping Method NE RCD.Shipping Method
AND PAR.Shipping_Method <> RCD.Shipping_Method;

// Send error message - 'Shipping Method on order must match load shipping method.'
ERROR(USR2227);
MSGPARM(RCD.*SFLSEL);

//?Check for errors
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?Check for errors
// IF PAR.Scheduled Ship Date is entered
IF PAR.Scheduled_Ship_Date <> *ZERO;

// AND PAR.Scheduled Ship Date NE RCD.Scheduled Ship Date
AND PAR.Scheduled_Ship_Date <> RCD.Scheduled_Ship_Date;

// Send error message - 'The order schedule ship date does not equal the load schedule ship date.'
ERROR(USR2330);
MSGPARM(RCD.*SFLSEL);

//?Check for errors
//?Check for errors
// IF WRK.STATUS is No
IF WRK.STATUS = 'N';

//?message already sent; this will keep subfile from reloading
//?Check for errors
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1292489;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PAR.Customer Number       NBR = CON.*ZERO
 PAR.Customer_Number_NBR = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Customer Number    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292494;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Customer_Number_NBR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Only 1 customer per stop allowed
CASE;

// IF WRK.Customer Number       NBR is not equal 0
IF WRK.Customer_Number_NBR <> *ZERO;

// AND WRK.Customer Number       NBR NE RCD.Ship To Customer
AND WRK.Customer_Number_NBR <> RCD.Ship_To_Customer;

// Send error message - 'Customer does not match existing customer for selected stop.'
ERROR(USR1853);
MSGPARM(RCD.*SFLSEL);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?Only 1 customer per stop allowed
// IF WRK.Customer Number       NBR EQ WRK.ZERO
IF WRK.Customer_Number_NBR = WRK.ZERO;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378309;
PARAMETER(RCD.USR_Stop);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Error if customer mismatch
CASE;

// IF WRK.Customer Number       NBR NE WRK.ZERO
IF WRK.Customer_Number_NBR <> WRK.ZERO;

// AND WRK.Customer Number       NBR NE RCD.Ship To Customer
AND WRK.Customer_Number_NBR <> RCD.Ship_To_Customer;

// Send error message - 'Customer does not match existing customer for selected stop.'
ERROR(USR1853);
MSGPARM(RCD.*SFLSEL);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

//?PK0302 Gather Data to perform Max Sched Ship Wt edit if flag is Y
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND RCD.Shipping Method is Not Rail
AND RCD.Shipping_Method = 'CT'/'PT';

// LCL.Boxes Day 1 Quantity = CON.*ZERO
LCL.Boxes_Day_1_Quantity = *ZERO;

EXECUTE FUNCTION(RTV UM/Whs Code Lmt,Bx RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625251;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Boxes_Day_1_Quantity);
PARAMETER(WRK.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/09/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/09/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration 6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Scheduled
 PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Scheduled;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(WRK.Warehouse_Type_Assigned);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fresh Orders on a Load make the Load FRESH.
CASE;

// IF WRK.Warehouse Type Assigned is Fresh
IF WRK.Warehouse_Type_Assigned = 'FR';

CASE;

// IF LCL.Warehouse Type Assigned is Frozen
IF LCL.Warehouse_Type_Assigned = 'FZ';

// OR LCL.Warehouse Type Assigned is Equal blank
OR LCL.Warehouse_Type_Assigned = *BLANK;

// LCL.Warehouse Type Assigned = WRK.Warehouse Type Assigned
LCL.Warehouse_Type_Assigned = WRK.Warehouse_Type_Assigned;

// LCL.Warehouse Code Assigned = WRK.Warehouse Code Assigned
LCL.Warehouse_Code_Assigned = WRK.Warehouse_Code_Assigned;

ENDIF;

//?Fresh Orders on a Load make the Load FRESH.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Warehouse Type Assigned is Equal blank
IF LCL.Warehouse_Type_Assigned = *BLANK;

// LCL.Warehouse Type Assigned = WRK.Warehouse Type Assigned
LCL.Warehouse_Type_Assigned = WRK.Warehouse_Type_Assigned;

// LCL.Warehouse Code Assigned = WRK.Warehouse Code Assigned
LCL.Warehouse_Code_Assigned = WRK.Warehouse_Code_Assigned;

ENDIF;

ENDIF;

// LCL.Order Weight Assigned = LCL.Order Weight Assigned + RCD.Order Weight Total
LCL.Order_Weight_Assigned = LCL.Order_Weight_Assigned + RCD.Order_Weight_Total;

// LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + LCL.Boxes Day 1 Quantity
LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + LCL.Boxes_Day_1_Quantity;

EXECUTE FUNCTION(Clc Load Slot Type    IF) TYPE(EXCINTFUN)                      AC1625751;
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(RCD.Export_Status);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?Execute internal function

 //?RMC E2706 9/11/13- No more MX, if MX and boxqty<BOXLOAD Comp value,
 //?   then CB Else BX
 //?Set UM based on Orders to be assgnd- Priority- CB,EX,BX,MX
 CASE;

 // IF PAR.Slot Type f/New Ords USR is Combo
 IF PAR.Slot_Type_f_New_Ords_USR = 'CB';

 // AND PAR.Slot Type f/load USR is Combo
 AND ( PAR.Slot_Type_f_load_USR = 'CB';

 // OR PAR.Slot Type f/load USR EQ WRK.Blank 6 USR
 OR PAR.Slot_Type_f_load_USR = WRK.Blank_6_USR );

 // PAR.Slot Type f/load USR = CND.Combo
 PAR.Slot_Type_f_load_USR = 'CB';

 //?Set UM based on Orders to be assgnd- Priority- CB,EX,BX,MX
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Slot Type f/New Ords USR is Export
 IF PAR.Slot_Type_f_New_Ords_USR = 'EX';

 // OR PAR.Slot Type f/load USR is Export
 OR PAR.Slot_Type_f_load_USR = 'EX';

 // OR PAR.Export Status is yes
 OR PAR.Export_Status = 'Y';

 // PAR.Slot Type f/load USR = CND.Export
 PAR.Slot_Type_f_load_USR = 'EX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Slot Type f/New Ords USR is Box
 IF PAR.Slot_Type_f_New_Ords_USR = 'BX';

 // AND PAR.Slot Type f/load USR is Box
 AND ( PAR.Slot_Type_f_load_USR = 'BX';

 // OR PAR.Slot Type f/load USR EQ WRK.Blank 6 USR
 OR PAR.Slot_Type_f_load_USR = WRK.Blank_6_USR );

 // PAR.Slot Type f/load USR = CND.Box
 PAR.Slot_Type_f_load_USR = 'BX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Slot Type f/load USR = CND.Mixed
 PAR.Slot_Type_f_load_USR = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Slot Type f/load USR is Mixed
 IF PAR.Slot_Type_f_load_USR = 'MX';

 EXECUTE FUNCTION(RTV Default Co No App IF) TYPE(EXCINTFUN)                      AC1628378;
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(JOB.*USER);
  PARAMETER(NLL.Allow_Multi_Company);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(NLL.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Company Number is Equal to zero
  IF LCL.Company_Number = *ZERO;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(LCL.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.Slot Type f/load USR = CND.Combo
 PAR.Slot_Type_f_load_USR = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Slot Type f/load USR = CND.Box
 PAR.Slot_Type_f_load_USR = 'BX';

 ENDIF;

 ENDIF;

}


// LCL.Scheduled Ship Dt Assgnd = RCD.Scheduled Ship Date
LCL.Scheduled_Ship_Dt_Assgnd = RCD.Scheduled_Ship_Date;

ENDIF;

//?RMC --9/26/05 save to test that one order exists with the load start co.
CASE;

// IF RCD.Company Number EQ CTL.Company Number
IF RCD.Company_Number = CTL.Company_Number;

// AND WRK.Status Flag 3  Y/N is No
AND WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.Yes
WRK.Status_Flag_3_Y_N = 'Y';

ENDIF;

//?OMS315: C4121  Must Ship Date edit:  Sched Ship <= Must Ship <= Delivery
CASE;

// IF RCD.Shipping Method is Prepaid
IF RCD.Shipping_Method = 'PR'/'PT';

// WRK.Warehouse Code PASS   USR = CON.*BLANK
WRK.Warehouse_Code_PASS_USR = *BLANK;

// WRK.STATUS = CND.Active
WRK.STATUS = *BLANK;

//?pk0302  Move proposed changed ship date to WRK context for validation.
CASE;

// IF LCL.Status Flag 4  Y/N is yes
IF LCL.Status_Flag_4_Y_N = 'Y';

// AND LCL.Scheduled Ship Date USR is Entered
AND LCL.Scheduled_Ship_Date_USR <> *ZERO;

// WRK.Date From             USR = LCL.Scheduled Ship Date USR
WRK.Date_From_USR = LCL.Scheduled_Ship_Date_USR;

//?pk0302  Move proposed changed ship date to WRK context for validation.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Date From             USR = RCD.Scheduled Ship Date
WRK.Date_From_USR = RCD.Scheduled_Ship_Date;

ENDIF;

//?** Retrieve full city name to pass to the CLC Must Ship routine
EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.USR_City);
PARAMETER(NLL.Ship_To_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Must Ship Date     XF.
CALL PROGRAM(CLC Must Ship Date     XF) ('PDJBXFR');
PARAMETER(RCD.Must_Ship_Error);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.USR_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(WRK.Date_From_USR);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Warehouse_Code_PASS_USR);
PARAMETER(WRK.Must_Ship_Date_USR);
PARAMETER(WRK.Must_Ship_Time_USR);

//?** Error if no Mileage Between Cities record  FP1251 LJB 11/15/2007
//?Can order be delivered on time?
CASE;

// IF RCD.Must Ship Error is No Error
IF RCD.Must_Ship_Error = *BLANK;

//?Can order be delivered on time?
// IF RCD.Must Ship Error is Miles to Next=Zeros
IF RCD.Must_Ship_Error = 'MTN';

//?Can order be delivered on time?
// IF RCD.Must Ship Error is Req Ship should =Must Shp
IF RCD.Must_Ship_Error = 'RSD';

//?Can order be delivered on time?
// IF *OTHERWISE
IF *OTHERWISE;

//?** Don't test unless Seaboard
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

EXECUTE FUNCTION(PMT Must Ship Dt Accpt IF) TYPE(EXCINTFUN)                     AC1510968;
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(WRK.Must_Ship_Date_USR);
PARAMETER(WRK.Must_Ship_Time_USR);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(WRK.STATUS);
PARAMETER(WRK.Date_From_USR);
PARAMETER(RCD.Must_Ship_Error);
PARAMETER(RCD.Order_Number);
{
 //?Execute internal function

 // Call program PMT Must Ship Dt Accpt PV.
 CALL PROGRAM(PMT Must Ship Dt Accpt PV) ('PDJFPVR');
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Must_Ship_Date_USR);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Must_Ship_Time_USR);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(PAR.Must_Ship_Error);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PAR.STATUS is No
 IF PAR.STATUS = 'N';

 // Send error message - 'Order must be shipped by &1 to be delivered on time.'
 ERROR(USR2662);
 MSGPARM(PAR.Must_Ship_Date_USR);

 ENDIF;

}


ENDIF;

ENDIF;

//?OMS315: C4121  Must Ship Date edit:  Sched Ship <= Must Ship <= Delivery
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.STATUS = CND.Active
WRK.STATUS = *BLANK;

ENDIF;

CASE;

// IF WRK.Error Status is blank
IF WRK.Error_Status = *BLANK;

//?calc abs frt rate (usr percent%) for later calculations
CASE;

// IF RCD.USR Update Flag is No
IF RCD.USR_Update_Flag = *BLANK;

// PAR.Trailer OUT Weight = PAR.Trailer OUT Weight + RCD.Order Weight Total
PAR.Trailer_OUT_Weight = PAR.Trailer_OUT_Weight + RCD.Order_Weight_Total;

// WRK.USR Percent Work, 7.4 = RCD.Absorbed Freight Rate CWT / CON.100 *Rounded
WRK.USR_Percent_Work_7_4 = RCD.Absorbed_Freight_Rate_CWT / 100 'H';

// RCD.USR Update Flag = CND.Yes
RCD.USR_Update_Flag = 'Y';

// PAR.USR Weight Accumulated = CON.*ZERO
PAR.USR_Weight_Accumulated = *ZERO;

ENDIF;

//?Fill in shipping method for load
CASE;

// IF PAR.Shipping Method EQ WRK.BLANK
IF PAR.Shipping_Method = WRK.BLANK;

// PAR.Shipping Method = RCD.Shipping Method
PAR.Shipping_Method = RCD.Shipping_Method;

ENDIF;

//?Fill in scheduled ship date for load
CASE;

// IF PAR.Scheduled Ship Date EQ WRK.ZERO
IF PAR.Scheduled_Ship_Date = WRK.ZERO;

// PAR.Scheduled Ship Date = RCD.Scheduled Ship Date
PAR.Scheduled_Ship_Date = RCD.Scheduled_Ship_Date;

ENDIF;

EXECUTE FUNCTION(CRT Load Plan Stop Cst CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1378310;
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Processing if Data record already exists

 QUIT;

}


//?calc freight amt based on % of total weight
// WRK.USR Freight Amount 1 = RCD.Order Weight Total * WRK.USR Percent Work, 7.4 *R
WRK.USR_Freight_Amount_1 = RCD.Order_Weight_Total * WRK.USR_Percent_Work_7_4 'H';

// CTL.USR Total Freight = CTL.USR Total Freight + WRK.USR Freight Amount 1
CTL.USR_Total_Freight = CTL.USR_Total_Freight + WRK.USR_Freight_Amount_1;

// CTL.Rated Freight = CON.*ZERO
CTL.Rated_Freight = *ZERO;

// WRK.USR Input 1 = CND.Yes
WRK.USR_Input_1 = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?If delete from load request, display pending message
CASE;

// IF RCD.*SFLSEL is *Delete from Load
IF RCD.*SFLSEL = '4';

// PAR.Hold Stop/Drop         .U = RCD.USR Stop
PAR.Hold_Stop_Drop_U = RCD.USR_Stop;

EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Pick_Status_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Pick Status USR = CND.Not Picked
 PAR.Pick_Status_USR = 'N';

 //?USER: Process Data record

 // PAR.Pick Status USR = CND.Picked
 PAR.Pick_Status_USR = 'Y';

 QUIT;

}


//?If load is locked, don't allow delete
CASE;

// IF CTL.Load Status is Locked thru Invoiced
IF CTL.Load_Status = 'I'/'L'/'S';

// Send error message - 'This load is locked; Delete is invalid'
ERROR(USR1269);
MSGPARM(CTL.Load_Status);
MSGPARM(RCD.USR_Stop);

//?If load is locked, don't allow delete
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?If load is locked, don't allow delete
// IF WRK.Pick Status USR is Picked
IF WRK.Pick_Status_USR = 'Y';

//?Load may have a Picked order & be unlocked, so check this sts RMC PFS017
// Send error message - 'Invalid option for picked order.'
ERROR(USR3633);
MSGPARM(RCD.*SFLSEL);

//?If load is locked, don't allow delete
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?If order is not assigned to load, will not allow delete
CASE;

// IF RCD.Load ID NE CTL.Load ID
IF RCD.Load_ID <> CTL.Load_ID;

// Send error message - 'Order not assigned to this load'
ERROR(USR1264);
MSGPARM(RCD.USR_Stop);

//?If order is not assigned to load, will not allow delete
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.USR Update Flag is No
IF RCD.USR_Update_Flag = *BLANK;

// PAR.Trailer OUT Weight = PAR.Trailer OUT Weight - RCD.Order Weight Total
PAR.Trailer_OUT_Weight = PAR.Trailer_OUT_Weight - RCD.Order_Weight_Total;

// WRK.USR Percent Work, 7.4 = RCD.Freight Rate Per U/M / CON.100 *Rounded
WRK.USR_Percent_Work_7_4 = RCD.Absorbed_Freight_Rate_CWT / 100 'H';

// RCD.USR Update Flag = CND.Yes
RCD.USR_Update_Flag = 'Y';

// PAR.USR Weight Accumulated = CON.*ZERO
PAR.USR_Weight_Accumulated = *ZERO;

ENDIF;

// RCD.USR Stop = CND.Not Entered
RCD.USR_Stop = *ZERO;

// WRK.USR Freight Amount 1 = RCD.Order Weight Total * WRK.USR Percent Work, 7.4 *R
WRK.USR_Freight_Amount_1 = RCD.Order_Weight_Total * WRK.USR_Percent_Work_7_4 'H';

// CTL.USR Total Freight = CTL.USR Total Freight - WRK.USR Freight Amount 1
CTL.USR_Total_Freight = CTL.USR_Total_Freight - WRK.USR_Freight_Amount_1;

// CTL.Rated Freight = CON.*ZERO
CTL.Rated_Freight = *ZERO;

// WRK.USR Input 2 = CND.Yes
WRK.USR_Input_2 = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?------------------------------------------------------------------------
//?C7111: If we do not want to allow stop changes from this program,
//?    a) comment the following code.
CASE;

// IF RCD.*SFLSEL is *Reset to blank
IF RCD.*SFLSEL = *BLANK;

//?Process update stop (order assigned to load thru order entry)
CASE;

// IF RCD.USR Stop NE RCD.Stop/Drop
IF RCD.USR_Stop <> RCD.Stop_Drop;

// WRK.USR Input 3 = CND.Blank
WRK.USR_Input_3 = *BLANK;

// WRK.Error Status  2 = CND.No
WRK.Error_Status_2 = 'N';

CASE;

// IF RCD.Load ID NE CTL.Load ID
IF RCD.Load_ID <> CTL.Load_ID;

// Send error message - 'Order not assigned to this load'
ERROR(USR1264);
MSGPARM(RCD.USR_Stop);

// WRK.Error Status  2 = CND.Yes
WRK.Error_Status_2 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1292489;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PAR.Customer Number       NBR = CON.*ZERO
 PAR.Customer_Number_NBR = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Customer Number    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292494;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Customer_Number_NBR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Only 1 customer per stop allowed
CASE;

// IF WRK.Customer Number       NBR is not equal 0
IF WRK.Customer_Number_NBR <> *ZERO;

// AND WRK.Customer Number       NBR NE RCD.Ship To Customer
AND WRK.Customer_Number_NBR <> RCD.Ship_To_Customer;

// Send information message - 'Customer does not match existing customer for selected stop.'
MESSAGE(USR2920 *INFO);
MSGPARM(RCD.*SFLSEL);

//?Only 1 customer per stop allowed
// IF WRK.Customer Number       NBR EQ WRK.ZERO
IF WRK.Customer_Number_NBR = WRK.ZERO;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378309;
PARAMETER(RCD.USR_Stop);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Error if customer mismatch
CASE;

// IF WRK.Customer Number       NBR NE WRK.ZERO
IF WRK.Customer_Number_NBR <> WRK.ZERO;

// AND WRK.Customer Number       NBR NE RCD.Ship To Customer
AND WRK.Customer_Number_NBR <> RCD.Ship_To_Customer;

// Send information message - 'Customer does not match existing customer for selected stop.'
MESSAGE(USR2920 *INFO);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF WRK.Error Status  2 is No
IF WRK.Error_Status_2 = 'N';

// WRK.USR Input 3 = CND.Yes
WRK.USR_Input_3 = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?C7111: End -------------------------------------------------------------
//?5=Process view order request
CASE;

// IF RCD.*SFLSEL is *View Order
IF RCD.*SFLSEL = '5';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER('TRF');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=Process view order Detail
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// PAR.Application Code = CND.Order Management
PAR.Application_Code = 'O/M';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Stop required if on a load
CASE;

// IF RCD.Load ID is NE Blank
IF RCD.Load_ID <> *ZERO;

// AND RCD.USR Stop is Not Entered
AND RCD.USR_Stop = *ZERO;

//?Stop not required if deleting from load
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Stop not required if deleting from load
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Stop Must be Entered'
ERROR(USR1263);
MSGPARM(RCD.USR_Stop);

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// CTL.USR Weight = CTL.USR Weight + PAR.Trailer OUT Weight
CTL.USR_Weight = CTL.USR_Weight + PAR.Trailer_OUT_Weight;

// CTL.USR Total Weight = CON.1 * CTL.USR Weight *Rounded
CTL.USR_Total_Weight = 1 * CTL.USR_Weight 'H';

// CTL.Weight Adjust = CON.1 * PAR.Weight Adjust *Rounded
CTL.Weight_Adjust = 1 * PAR.Weight_Adjust 'H';

//?PK0302 Perform Max Sched Ship Wt edit if flag is Y & Shp mth = Truck
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND CTL.Shipping Method is Not Rail
AND ( CTL.Shipping_Method = 'CT'/'PT';

// OR PAR.Shipping Method is Not Rail
OR PAR.Shipping_Method = 'CT'/'PT' );

CASE;

// IF LCL.Order Weight Assigned is Greater than zero
IF LCL.Order_Weight_Assigned > *ZERO;

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?** Add Date Validations, parms to Sel Sched Lds Cnfrm  E001895
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND WRK.Display File Add/Change is Add
AND WRK.Display_File_Add_Change = 'A';

// Call program SEL Sched Loads Cnfrm  PV.
CALL PROGRAM(SEL Sched Loads Cnfrm  PV) ('POJSPVR');
PARAMETER(LCL.Status_Flag_4_Y_N);
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Dt_Assgnd);
PARAMETER(PAR.Deadline_Depart_Date_LH);
PARAMETER(WRK.USR_Return_Code);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Order_Weight_Assigned);
PARAMETER(LCL.Warehouse_Code_Assigned);
PARAMETER(LCL.Warehouse_Type_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(CTL.Order_Number);

ENDIF;

CASE;

// IF WRK.USR Return Code is Exists
IF WRK.USR_Return_Code = 'E';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

// WRK.USR Input 1 = CND.No
WRK.USR_Input_1 = 'N';

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

// Send error message - 'Assign Load Cancelled'
ERROR(USR3038);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

// WRK.USR Input 1 = CND.Yes
WRK.USR_Input_1 = 'Y';

//?Determine if dates are in correct order on load
CASE;

// IF CTL.Shipping Method is Buyers Truck
IF CTL.Shipping_Method = 'CR'/'CT';

//?Determine if dates are in correct order on load
// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

// WRK.Warehouse Code PASS   USR = CON.*BLANK
WRK.Warehouse_Code_PASS_USR = *BLANK;

// Call program CLC Must Ship/Load     XF.
CALL PROGRAM(CLC Must Ship/Load     XF) ('PMQAXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(PAR.Warehouse_Code);

CASE;

// IF WRK.Must Ship Error is No Error
IF WRK.Must_Ship_Error = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Skip Daily's and High Plains Biodiesel
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?Display program will log the deadline errors
// Call program DSP Must Ship Err/Load DF.
CALL PROGRAM(DSP Must Ship Err/Load DF) ('PDMBDFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);

// WRK.USR Exit Program = CND.no
WRK.USR_Exit_Program = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// LCL.First Order Assigned = CND.yes
LCL.First_Order_Assigned = 'Y';

ENDIF;

ENDIF;

//?RMC 9/26/07 - Order not on load matching load start co
CASE;

// IF WRK.Status Flag 3  Y/N is No
IF WRK.Status_Flag_3_Y_N = 'N';

// Send error message - 'Invalid Load set up. Order not found with Load Start Co.'
ERROR(USR3403);
MSGPARM(CTL.Company_Number);

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

//?Min/Max messages
CASE;

// IF CTL.USR Truck Size NE WRK.BLANK
IF CTL.USR_Truck_Size <> WRK.BLANK;

EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(PAR.Maximum_pounds);
PARAMETER(PAR.Minimum_pounds);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If load weight > max, send message
CASE;

// IF CTL.Weight Adjust GT PAR.Maximum pounds
IF CTL.Weight_Adjust > PAR.Maximum_pounds;

// Send information message - 'Load weight is greater than maximum pounds allowed.'
MESSAGE(USR1261 *INFO);

ENDIF;

//?If load weight < min, send message
CASE;

// IF CTL.Weight Adjust LT PAR.Minimum pounds
IF CTL.Weight_Adjust < PAR.Minimum_pounds;

// Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
MESSAGE(USR1262 *INFO);
MSGPARM(CTL.Load_ID);

ENDIF;

ENDIF;

//?Assign load msg
CASE;

// IF WRK.USR Input 1 is Yes
IF WRK.USR_Input_1 = 'Y';

// Send information message - 'Assign load pending'
MESSAGE(USR1258 *INFO);

ENDIF;

//?delete load msg
CASE;

// IF WRK.USR Input 2 is Yes
IF WRK.USR_Input_2 = 'Y';

// Send information message - 'Delete from load pending'
MESSAGE(USR1265 *INFO);

ENDIF;

//?Change Stop Number
CASE;

// IF WRK.USR Input 3 is Yes
IF WRK.USR_Input_3 = 'Y';

// Send information message - 'Stop Chg On Ld Pending'
MESSAGE(USR2913 *INFO);

ENDIF;

//?Check that load id is entered
CASE;

// IF CTL.Load ID EQ WRK.ZERO
IF CTL.Load_ID = WRK.ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.Load_ID);

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Post-confirm)

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?Set load status to unlock if is E or C
CASE;

// IF CTL.Load Status is Entered or Combined
IF CTL.Load_Status = 'E'/'C';

// CTL.Load Status = CND.Unlock
CTL.Load_Status = 'U';

ENDIF;

//?Fill shipping method
CASE;

// IF CTL.USR Shipping Method EQ WRK.BLANK
IF CTL.USR_Shipping_Method = WRK.BLANK;

// CTL.USR Shipping Method = PAR.Shipping Method
CTL.USR_Shipping_Method = PAR.Shipping_Method;

//?Fill shipping method
// IF CTL.USR Shipping Method is Collect
IF CTL.USR_Shipping_Method = 'CR'/'CT';

// CTL.USR Carrier Code = CND.Buyer's Truck
CTL.USR_Carrier_Code = 'BUY';

ENDIF;

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?9/4/2007 Slm FP1061 - WEB030 TRF-Misc Requests for WEB Page Changes
//?  If the Carrier code is being changed, add an entry to the log file
//?Add or change load header
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?** Default Shag & Wash to "NO" for collect, else "Yes"   E00495
CASE;

// IF CTL.USR Shipping Method is Collect
IF CTL.USR_Shipping_Method = 'CR'/'CT';

// WRK.Load Shag Flag = CND.no
WRK.Load_Shag_Flag = 'N';

// WRK.Load Wash Flag = CND.no
WRK.Load_Wash_Flag = 'N';

//?** Default Shag & Wash to "NO" for collect, else "Yes"   E00495
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Load Shag Flag = CND.yes
WRK.Load_Shag_Flag = 'Y';

// WRK.Load Wash Flag = CND.yes
WRK.Load_Wash_Flag = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Load Shag Flag = CND.no
WRK.Load_Shag_Flag = 'N';

// WRK.Load Wash Flag = CND.no
WRK.Load_Wash_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(CRT Load Header        CR) TYPE(CRTOBJ) FILE(OMFJCPP)          AC1183329;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.LTL_Flag);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.USR_Temperature_3_1);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(CTL.USR_Total_Weight);
PARAMETER(*ZERO);
PARAMETER(CTL.Allocate_Pounds_Miles);
PARAMETER(WRK.Total_Stops);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(*ZERO);
PARAMETER(CTL.Rated_Freight);
PARAMETER('O');
PARAMETER(CTL.USR_Load_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(WRK.Total_Miles);
PARAMETER(*BLANK);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
PARAMETER(*ZERO);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Shag_Flag);
PARAMETER(WRK.Load_Wash_Flag);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER('N');
PARAMETER(WRK.BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?***** Change Log and Comments
 DO;

 //?** 06/28/2006 LJB TRF011
 //?** Added 3 char LH On-Time Reason Code as an input parm to
 //?** replace the 1 char On Time Reason parm
 //?*****
 //?** 09/19/2006 LJB PK0036
 //?** Added 3 char LH Heldover Reason Code as an input parm to
 //?** replace the 1 char Held Over Reason parm
 //?*****
 ENDDO;

}


//?9/5/2007 slm On an add move the ctl.usr carrier code
//?             to ctl.carrier code
// CTL.Carrier Code = CTL.USR Carrier Code
CTL.Carrier_Code = CTL.USR_Carrier_Code;

// LCL.Load Create Sts USR = CND.yes
LCL.Load_Create_Sts_USR = 'Y';

//?Add or change load header
// IF *OTHERWISE
IF *OTHERWISE;

//?** Update Total Load Miles with wrk.total miles
//?** Update Override Total Load Miles with PAR context        E00207
//?Calc Load U/M     -- RMC added here for all loads 4/17/14 (not just lckd)
DO;

//?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
// Call program RTV UM/Whs Code,BX Qty XF.
CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Load_U_M);

ENDDO;

EXECUTE FUNCTION(CHG For Load Planning  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1197731;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.LTL_Flag);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.USR_Temperature_3_1);
PARAMETER(CTL.USR_Total_Weight);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Allocate_Pounds_Miles);
PARAMETER(WRK.Total_Stops);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(CTL.Rated_Freight);
PARAMETER(CTL.USR_Load_Type);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Miles);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Export_Status);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(WRK.Multi_Company_Load);
PARAMETER(LCL.Load_U_M);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


CASE;

// IF CTL.USR Carrier Code NE CTL.Carrier Code
IF CTL.USR_Carrier_Code <> CTL.Carrier_Code;

//?9/5/2007 SLM Following statements new for Chg in Carrier
// LCL.Change Log Prior Val Usr1 = CON.*BLANK
LCL.Change_Log_Prior_Val_Usr1 = *BLANK;

// LCL.Change Log New Vl Usr 1 = CON.*BLANK
LCL.Change_Log_New_Vl_Usr_1 = *BLANK;

// LCL.Change Log Prior Val Usr1 = CTL.Carrier Code
LCL.Change_Log_Prior_Val_Usr1 = CTL.Carrier_Code;

// LCL.Change Log New Vl Usr 1 = CTL.USR Carrier Code
LCL.Change_Log_New_Vl_Usr_1 = CTL.USR_Carrier_Code;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER('CARCHG');
PARAMETER('TRF');
PARAMETER(LCL.Change_Log_Prior_Val_Usr1);
PARAMETER(LCL.Change_Log_New_Vl_Usr_1);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

// CTL.Carrier Code = CTL.USR Carrier Code
CTL.Carrier_Code = CTL.USR_Carrier_Code;

ENDIF;

ENDIF;

// CTL.Total Freight = CTL.USR Total Freight
CTL.Total_Freight = CTL.USR_Total_Freight;

// PAR.Schedule Sequence Number = CTL.Schedule Sequence Number
PAR.Schedule_Sequence_Number = CTL.Schedule_Sequence_Number;

//?USER: Process subfile record (Post-confirm)

//?Process assign/delete/update stop
CASE;

// IF RCD.*SFLSEL is *Assign to Load
IF RCD.*SFLSEL = '1';

//?Process assign to load
DO;

CASE;

// IF WRK.STATUS is No
IF WRK.STATUS = 'N';

//?this message gets cleared below, so it doesn't display
// Send error message - 'This order cannot arrive on time.'
ERROR(USR2688);
MSGPARM(RCD.USR_Stop);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Scheduled Ship Date USR = PAR.Scheduled Ship Date
CTL.Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date;

// WRK.Stop/Drop Sequence Number = WRK.Stop/Drop Sequence Number + CON.1
WRK.Stop_Drop_Sequence_Number = WRK.Stop_Drop_Sequence_Number + 1;

// WRK.Stop/Drop = RCD.USR Stop
WRK.Stop_Drop = RCD.USR_Stop;

// RCD.USR Status (Y/N) = CND.yes
RCD.USR_Status_Y_N = 'Y';

EXECUTE FUNCTION(Val Stop Existance    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1554002;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?Load Change Type for log
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PAR.Load Change Type = CND.Add Order/Stop to Load
PAR.Load_Change_Type = 'ADDSTP';

//?Load Change Type for log
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Load Change Type = CND.Add Order to Load
PAR.Load_Change_Type = 'ADDORD';

ENDIF;

//?E01488 RMC 5/19/11 upd Appt conf fields (were going out -0-, blank)
// LCL.LD Carrier Appt Date = CON.*ZERO
LCL.LD_Carrier_Appt_Date = *ZERO;

// LCL.LD Carrier Appt Time = CON.*ZERO
LCL.LD_Carrier_Appt_Time = *ZERO;

//?Output Carrier appt if appt conf was made on order before load tied
CASE;

// IF RCD.OH Appt Confirmation Dt is Entered
IF RCD.OH_Appt_Confirmation_Dt > *ZERO;

// LCL.LD Carrier Appt Date = RCD.Requested Delivery Date
LCL.LD_Carrier_Appt_Date = RCD.Requested_Delivery_Date;

// LCL.LD Carrier Appt Time = CON.100 * RCD.Requested Delivery Time *
LCL.LD_Carrier_Appt_Time = 100 * RCD.Requested_Delivery_Time;

ENDIF;

EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);
PARAMETER(WRK.Stop_Drop);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('O');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.OHE_Appt_Confirmation_#);
PARAMETER(RCD.OHE_Appt_Confirmation_Nm);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(RCD.OH_Appt_Confirmation_Dt);
PARAMETER(*ZERO);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(RCD.OH_Appt_Confirmation_Tm);
PARAMETER(*ZERO);
PARAMETER(WRK.Miles_Error_Sts);
PARAMETER(WRK.LD_Unused_Sts_2);
PARAMETER(WRK.HPB_Transload_Station);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// LCL.Scheduled Ship Dt Assgnd = LCL.Scheduled Ship Date USR
LCL.Scheduled_Ship_Dt_Assgnd = LCL.Scheduled_Ship_Date_USR;

EXECUTE FUNCTION(UPD Load Information   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1325557;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Rated_Freight);
PARAMETER('02');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?** Update OHE with Load ID/Stop Seq if it exists   FP1303
// Call program VAL CHG OHE for ld pln XF.
CALL PROGRAM(VAL CHG OHE for ld pln XF) ('PMDMXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);

EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Initialize routine

 // PAR.Event Number = CON.*ZERO
 PAR.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('01');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('02');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Event Number = PAR.Event Number + CON.1
 PAR.Event_Number = PAR.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER('02');
 PARAMETER(DB1.Invoice_Memo_Company);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Activity_Completion);
 PARAMETER(DB1.Activity_Hold);
 PARAMETER(DB1.Post_Cash_Complete);
 PARAMETER(DB1.Cross_Event_Ref_Comp);
 PARAMETER(DB1.Cross_Event_Ref_Order);
 PARAMETER(DB1.Cross_Event_Ref_Event);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


// WRK.Change Log Prior Value = CON.*BLANK
WRK.Change_Log_Prior_Value = *BLANK;

// WRK.Change Log New Value = CON.*BLANK
WRK.Change_Log_New_Value = *BLANK;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(PAR.Load_Change_Type);
PARAMETER('TRF');
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// CTL.Rated Freight = CON.*ZERO
CTL.Rated_Freight = *ZERO;

//?If no orders already on load and ship mth is collect, fill in carrier
CASE;

// IF PAR.USR Check Y/N Status is Not Yes
IF PAR.USR_Check_Y_N_Status = *BLANK/'N';

CASE;

// IF PAR.Shipping Method is Buyers Truck
IF PAR.Shipping_Method = 'CR'/'CT';

CASE;

// IF CTL.USR Carrier Code EQ WRK.BLANK
IF CTL.USR_Carrier_Code = WRK.BLANK;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('DFTCARRIER');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Carrier Code = WRK.System Value Alpha
CTL.USR_Carrier_Code = WRK.System_Value_Alpha;

// CTL.Carrier Broker = CTL.USR Carrier Code
CTL.Carrier_Broker = CTL.USR_Carrier_Code;

ENDIF;

ENDIF;

ENDIF;

// WRK.Load Added/Deleted     .U = CND.*Added
WRK.Load_Added_Deleted_U = 1;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** Log error if missing Miles to Next (not Dailys or HPB)
CASE;

// IF RCD.Must Ship Error is No Error
IF RCD.Must_Ship_Error = *BLANK;

//?** Log error if missing Miles to Next (not Dailys or HPB)
// IF WRK.STATUS is No
IF WRK.STATUS = 'N';

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

//?** Only log "No Miles" if not an export               E000550
CASE;

// IF RCD.Export Status is Not Yes
IF RCD.Export_Status = *BLANK/'N';

// Call program CRT Load/Order for DD/TXF.
CALL PROGRAM(CRT Load/Order for DD/TXF) ('PDKTXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER('NOMILE');
PARAMETER('TRF');
PARAMETER(PAR.Change_Log_Prior_Value);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

//?** Log error if missing Miles to Next (not Dailys or HPB)
// IF *OTHERWISE
IF *OTHERWISE;

// Call program CRT Load/Order for DD/TXF.
CALL PROGRAM(CRT Load/Order for DD/TXF) ('PDKTXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER('ACCDEA');
PARAMETER('TRF');
PARAMETER(PAR.Change_Log_Prior_Value);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

ENDIF;

ENDDO;

//?Process assign/delete/update stop
// IF RCD.*SFLSEL is *Delete from Load
IF RCD.*SFLSEL = '4';

//?Process delete from load
DO;

// RCD.USR Status (Y/N) = CND.no
RCD.USR_Status_Y_N = 'N';

EXECUTE FUNCTION(DLT Single Load Dtl   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197805;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Dlt Event by Event Cde RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295307;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('02');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT OP Order Events    DL) TYPE(DLTOBJ) FILE(OPEYCPP)          AC1170143;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Event_Number);
 QUIT;

}


EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Event_Number);
PARAMETER(RCD.Event_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(UPD Load Information   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1325557;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Event_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?*------------------------------------------------------*
//?* 07/18/02 PKP When the Order is removed from the Load, change
//?*              the Deadline Departure Date and Time to zero.
EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// WRK.@Blank for 5 = CVTVAR(PAR.Hold Stop/Drop         .U)
WRK.@Blank_for_5 = CVTVAR(PAR.Hold_Stop_Drop_U);

// WRK.@Blank for 5 = CVTVAR(RCD.Stop/Drop)
WRK.@Blank_for_5 = CVTVAR(RCD.Stop_Drop);

// PAR.Change Log Prior Value = WRK.@Blank for 5
PAR.Change_Log_Prior_Value = WRK.@Blank_for_5;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Hold_Stop_Drop_U);
PARAMETER('DELORD');
PARAMETER('TRF');
PARAMETER(PAR.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1485266;
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?** DDD/T are returned as zeros if no Miles Between Cities records
// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(LCL.Requested_Delivery_Date);

EXECUTE FUNCTION(CHG Load Accept Flag   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1476762;
PARAMETER(RCD.Load_ID);
PARAMETER('U');
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

// CTL.Rated Freight = CON.*ZERO
CTL.Rated_Freight = *ZERO;

EXECUTE FUNCTION(RTV Chk any ords on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1296397;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Check_Y_N_Status);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 QUIT;

}


//?If no more orders on load check default carrier & clear schd shp dt
CASE;

// IF WRK.USR Check Y/N Status is Not Yes
IF WRK.USR_Check_Y_N_Status = *BLANK/'N';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('DFTCARRIER');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Carrier Code = WRK.System Value Alpha
WRK.Carrier_Code = WRK.System_Value_Alpha;

//?If carrier EQ default carrier,blank carrier/schd shp dt else just shp dt
CASE;

// IF CTL.USR Carrier Code EQ WRK.Carrier Code
IF CTL.USR_Carrier_Code = WRK.Carrier_Code;

EXECUTE FUNCTION(CHG Carrier/Schd Sp Dt CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1397691;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CTL.USR Carrier Code = CON.*BLANK
CTL.USR_Carrier_Code = *BLANK;

//?9/5/2007 SLM Carrier is being changed to *blanks
// LCL.Change Log Prior Val Usr1 = CON.*BLANK
LCL.Change_Log_Prior_Val_Usr1 = *BLANK;

// LCL.Change Log New Vl Usr 1 = CON.*BLANK
LCL.Change_Log_New_Vl_Usr_1 = *BLANK;

// LCL.Change Log Prior Val Usr1 = CTL.Carrier Code
LCL.Change_Log_Prior_Val_Usr1 = CTL.Carrier_Code;

// LCL.Change Log New Vl Usr 1 = CTL.USR Carrier Code
LCL.Change_Log_New_Vl_Usr_1 = CTL.USR_Carrier_Code;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER('CARCHG');
PARAMETER('TRF');
PARAMETER(LCL.Change_Log_Prior_Val_Usr1);
PARAMETER(LCL.Change_Log_New_Vl_Usr_1);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

// CTL.Carrier Code = CTL.USR Carrier Code
CTL.Carrier_Code = CTL.USR_Carrier_Code;

//?If carrier EQ default carrier,blank carrier/schd shp dt else just shp dt
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Schedule Ship Date CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1411293;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
{
 //?USER: Processing after Data read

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?TPA 09/20/07 - Create Load Ord Chg Log for change in Sceduled Ship Dt
// LCL.Change Log Prior Val Usr1 = CVTVAR(CTL.Scheduled Ship Date USR)
LCL.Change_Log_Prior_Val_Usr1 = CVTVAR(CTL.Scheduled_Ship_Date_USR);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER('SCHSHP');
PARAMETER('TRF');
PARAMETER(LCL.Change_Log_Prior_Val_Usr1);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

// CTL.Scheduled Ship Date USR = CON.*ZERO
CTL.Scheduled_Ship_Date_USR = *ZERO;

ENDIF;

// WRK.Load Added/Deleted     .U = CND.*Deleted
WRK.Load_Added_Deleted_U = 2;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.USR Update Flag = CND.Yes
WRK.USR_Update_Flag = 'Y';

ENDDO;

//?CRT: TMS Order Header Trigger
CASE;

// IF RCD.OH Load Plan Ready is Yes
IF RCD.OH_Load_Plan_Ready = 'Y';

// Call program Rtv Crt OH Trigger    XF.
CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Company_Number);

ENDIF;

//?Process assign/delete/update stop
// IF RCD.*SFLSEL is *Reset to blank
IF RCD.*SFLSEL = *BLANK;

//?Process update stop (order assigned to load thru order entry)
CASE;

// IF RCD.Load ID is NE Blank
IF RCD.Load_ID <> *ZERO;

// AND RCD.USR Stop is Entered
AND RCD.USR_Stop <> *ZERO;

//?RMC FP1251 This was using the stop drop seq from WRK context
//?BUT the wrk.Stop/Drop Sequence Number has the last stop/drop seq on the
//?load so it s/not be changed here. if they changed a stop then added
//?an order, it wouldnt write the load dtl because the wrk.stop/drop
//?seq was already found because this rtv messed it up. i changed it to lcl.
EXECUTE FUNCTION(RTV Sequence Number    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295440;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(LCL.Stop_Drop);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// WRK.Stop/Drop = RCD.USR Stop
WRK.Stop_Drop = RCD.USR_Stop;

//?** Miles here is usually zeros, only a very few have values
EXECUTE FUNCTION(Rtv Miles to Customer  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1291286;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Mileage_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CHG Stop Number        CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1295435;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(WRK.Stop_Drop);
PARAMETER(WRK.Mileage_To_Customer);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


//?------------------------------------------------------------------------
//?C7111: If we do not want to allow stop changes from this program,
//?    a) comment the following code.
//?Load Change Type/Log
CASE;

// IF WRK.Stop/Drop NE LCL.Stop/Drop
IF WRK.Stop_Drop <> LCL.Stop_Drop;

// WRK.Change Log Prior Value = LCL.Stop/Drop
WRK.Change_Log_Prior_Value = LCL.Stop_Drop;

// WRK.Change Log New Value = WRK.Stop/Drop
WRK.Change_Log_New_Value = WRK.Stop_Drop;

// PAR.Load Change Type = CND.Change Order Stop
PAR.Load_Change_Type = 'CHGSTP';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(PAR.Load_Change_Type);
PARAMETER('TRF');
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?E00495 Set this so the deadl dpt will be recalculated.
// WRK.Load Added/Deleted     .U = CND.*Added
WRK.Load_Added_Deleted_U = 1;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?    b) uncomment the following code.
//?C7111: End -------------------------------------------------------------
// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

//?E2625 RMC 10/4/13 added so daily loads created here have req delv dt
CASE;

// IF LCL.Company Organization is Daily's
IF LCL.Company_Organization = 'D';

CASE;

// IF CTL.Requested Delivery Date is not entered
IF CTL.Requested_Delivery_Date = *ZERO;

// Call program UPD Rqs Deliv Date/1st XF.
CALL PROGRAM(UPD Rqs Deliv Date/1st XF) ('PDFFXFR');
PARAMETER(CTL.Load_ID);

ENDIF;

ENDIF;

//?** Deadline Departure Date/Time Restrictions          W288
CASE;

// IF PAR.Access Limited Sts USR is yes
IF PAR.Access_Limited_Sts_USR = 'Y';

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?Seaboard only
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?** Retrieve the hours that Shipping is restricted from loading
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** Retrieve Deadline Departure Date/Time from Load Header
EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Deadline_Depart_Date_LH);
PARAMETER(WRK.Deadline_Depart_Time_LH);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Validate if hours are entered for a warehouse
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** Validate if hours are entered for a warehouse
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** Validate if hours are entered for a warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?** If SSD = DDD then enforce Restricted Time Range    W288
CASE;

// IF WRK.Deadline Depart Date LH EQ CTL.Scheduled Ship Date USR
IF WRK.Deadline_Depart_Date_LH = CTL.Scheduled_Ship_Date_USR;

//?** Error if DDT is during restriced hours             W288
CASE;

// IF WRK.Deadline Depart Time LH GE WRK.Dock Unavail Start Time
IF WRK.Deadline_Depart_Time_LH >= WRK.Dock_Unavail_Start_Time;

// AND WRK.Deadline Depart Time LH LE WRK.Dock Unavail End Time
AND WRK.Deadline_Depart_Time_LH <= WRK.Dock_Unavail_End_Time;

// Send error message - 'Invalid SSD & DDD/T - during Restricted Hours-chg Dlvry Time, see Schedulin
ERROR(USR4223);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Error if date puts DDD/T in the past. Truck will not have
//?** time to load and leave. Send an error message.
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?** Error if DDD = Today & DDT is before system time   W288
CASE;

// IF WRK.Deadline Depart Date LH EQ WRK.Current System Date
IF WRK.Deadline_Depart_Date_LH = WRK.Current_System_Date;

// AND WRK.Deadline Depart Time LH LE WRK.Current System Time
AND WRK.Deadline_Depart_Time_LH <= WRK.Current_System_Time;

// Send error message - 'DDD/Time must be later than NOW, Chg Ship Date or Deliv Time'
ERROR(USR4233);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?PK0302 -- Change sched ship dt
CASE;

// IF LCL.Status Flag 4  Y/N is yes
IF LCL.Status_Flag_4_Y_N = 'Y';

CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

EXECUTE FUNCTION(Rtv/Chg Sched Shp Dt   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1610740;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Schedule Ship Date CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1411293;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// WRK.Load Change Type = CND.Scheduled Ship Date
WRK.Load_Change_Type = 'SCHSHP';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Value = CVTVAR(PAR.Scheduled Ship Date)
WRK.Change_Log_Prior_Value = CVTVAR(PAR.Scheduled_Ship_Date);

// WRK.Change Log New Value = CVTVAR(LCL.Scheduled Ship Date USR)
WRK.Change_Log_New_Value = CVTVAR(LCL.Scheduled_Ship_Date_USR);

// CTL.Scheduled Ship Date USR = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date_USR = LCL.Scheduled_Ship_Date_USR;

//?9/5/2007 slm was using CTL.Carrier Code changed to
//?  use CTL.USR Carrier Code (and crt the log record)
//?06/09/2015 PKD/JH E4122 Changed RTV to include Hdr Sts=A|H|L for
//?                        changing the Requested Ship Date.
EXECUTE FUNCTION(RTV Load for Date Chg  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1610489;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.USR_Carrier_Code);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?06/09/2015 PKD/JH E4122 Changed RTV to include Hdr Sts=A|H|L for
 //?                        changing the Requested Ship Date.
 //?USER: Process Data record

 //?06/09/2015 PKD/JH e4122 Save Requested Ship Date for Change Log.
 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 //?06/09/2015 E4122 Change Req Ship Date for Header Sts=E|A|H|L
 CASE;

 // IF DB1.Header Status is Avail/Alloc/Enter/Hold
 IF DB1.Header_Status = 'L'/'A'/'E'/'H';

 // WRK.Requested Ship Date = PAR.Scheduled Ship Date USR
 WRK.Requested_Ship_Date = PAR.Scheduled_Ship_Date_USR;

 //?06/09/2015 E4122 Change Req Ship Date for Header Sts=E|A|H|L
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Requested Ship Date = DB1.Requested Ship Date
 WRK.Requested_Ship_Date = DB1.Requested_Ship_Date;

 ENDIF;

 //?06/17/2015 Added Deallocate/Allocate process before change to OD.
 EXECUTE FUNCTION(RTV Orders for Dt Chg RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610490;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Initialize routine

  //?06/09/2015 PKD/JH E4122 Added Deallocate and Allocate Process
  //?USER: Process Data record

  //?DEALLOCATE
  // LCL.Quantity Scheduled = DB1.Quantity Scheduled
  LCL.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // LCL.Weight Scheduled = DB1.Weight Scheduled
  LCL.Weight_Scheduled = DB1.Weight_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?ALLOCATE
  // LCL.Quantity Scheduled = CON.*ZERO
  LCL.Quantity_Scheduled = *ZERO;

  // LCL.Weight Scheduled = CON.*ZERO
  LCL.Weight_Scheduled = *ZERO;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  EXECUTE FUNCTION(Chg SchShip/ReqShp Dt CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1702966;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.Scheduled_Ship_Date_USR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(CHG Sch Shp & Req Shp CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1702497;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(PAR.Change_Log_Prior_Value);
 PARAMETER(PAR.Change_Log_New_Value);
 PARAMETER(PAR.*USER);
 PARAMETER(PAR.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 //?06/09/2015 PKD/JH E4122 Added Change Log for Requested Ship Date
 // LCL.Change Log Prior Value = CVTVAR(LCL.Requested Ship Date)
 LCL.Change_Log_Prior_Value = CVTVAR(LCL.Requested_Ship_Date);

 // LCL.Change Log New Value = CVTVAR(WRK.Requested Ship Date)
 LCL.Change_Log_New_Value = CVTVAR(WRK.Requested_Ship_Date);

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER('RQSSHP');
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(PAR.*USER);
 PARAMETER(PAR.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

}


// CTL.Scheduled Ship Date = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date_USR;

// WRK.Scheduled Ship Date = LCL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date_USR;

// CTL.Scheduled Ship Date USR = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date_USR = LCL.Scheduled_Ship_Date_USR;

ENDIF;

ENDIF;

//?If load weight > maximum pounds for truck, LTL for load is N else Y
CASE;

// IF CTL.Weight Adjust GE PAR.Maximum pounds
IF CTL.Weight_Adjust >= PAR.Maximum_pounds;

// WRK.LTL Flag = CND.No
WRK.LTL_Flag = 'N';

//?If load weight > maximum pounds for truck, LTL for load is N else Y
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.LTL Flag = CND.Yes
WRK.LTL_Flag = 'Y';

ENDIF;

// WRK.Total Stops = CON.*ZERO
WRK.Total_Stops = *ZERO;

EXECUTE FUNCTION(RTV No. of Stops      RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197874;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Stops);
PARAMETER(WRK.Multi_Company_Load);
{
 //?USER: Initialize routine

 // PAR.USR Stop = CON.*ZERO
 PAR.USR_Stop = *ZERO;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Stop/Drop NE PAR.USR Stop
 IF DB1.Stop_Drop <> PAR.USR_Stop;

 // PAR.Total Stops = PAR.Total Stops + CON.1
 PAR.Total_Stops = PAR.Total_Stops + 1;

 // PAR.USR Stop = DB1.Stop/Drop
 PAR.USR_Stop = DB1.Stop_Drop;

 ENDIF;

 CASE;

 // IF WRK.Company Number     041405 is Equal to zero
 IF WRK.Company_Number_041405 = *ZERO;

 // WRK.Company Number     041405 = DB1.Company Number
 WRK.Company_Number_041405 = DB1.Company_Number;

 ENDIF;

 //?Multi Company Load?               PKTR01 8/5/04
 CASE;

 // IF DB1.Company Number NE WRK.Company Number     041405
 IF DB1.Company_Number <> WRK.Company_Number_041405;

 // PAR.Multi Company Load = CND.yes
 PAR.Multi_Company_Load = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Min Temp for Load RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1268079;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(CTL.USR_Temperature_3_1);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Temperature 3.1 = CND.Low
 PAR.USR_Temperature_3_1 = -99;

 // PAR.Shipping Temp Code C/F = WRK.Blank for 4           USR
 PAR.Shipping_Temp_Code_C_F = WRK.Blank_for_4_USR;

 //?USER: Process Data record

 //?**** new 7/19/02
 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 CASE;

 // IF PAR.Shipping Temp Code C/F NE WRK.Blank for 4           USR
 IF PAR.Shipping_Temp_Code_C_F <> WRK.Blank_for_4_USR;

 // AND PAR.Shipping Temp Code C/F NE DB1.Shipping Temp Code C/F
 AND PAR.Shipping_Temp_Code_C_F <> DB1.Shipping_Temp_Code_C_F;

 CASE;

 // IF PAR.Shipping Temp Code C/F is Celsius
 IF PAR.Shipping_Temp_Code_C_F = 'C';

 //?Convert DB1 to Celsius
 // Compute Cels from Fahr
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature - 32 ) * 5 ) / 9 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert DB1 to Fahr
 // Compute Fahr from Cels
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature * 9 ) / 5 'H' ) + 32;

 ENDIF;

 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Temperature 3.1 = DB1.Reefer Temperature
 LCL.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 ENDIF;

 CASE;

 // IF LCL.USR Temperature 3.1 GT PAR.USR Temperature 3.1
 IF LCL.USR_Temperature_3_1 > PAR.USR_Temperature_3_1;

 // PAR.USR Temperature 3.1 = DB1.Reefer Temperature
 PAR.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 // PAR.Shipping Temp Code C/F = DB1.Shipping Temp Code C/F
 PAR.Shipping_Temp_Code_C_F = DB1.Shipping_Temp_Code_C_F;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.USR Temperature 3.1 is Low
 IF PAR.USR_Temperature_3_1 = -99;

 // PAR.USR Temperature 3.1 = CON.*ZERO
 PAR.USR_Temperature_3_1 = *ZERO;

 ENDIF;

}


//?Process lock load request
CASE;

// IF CTL.*CMD key is *Lock Load
IF CTL.*CMD_key = '15';

EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 //?Fill in ship from whse deadline depart, if locking load and none entered
 CASE;

 // IF PAR.Ship From Warehouse EQ WRK.BLANK
 IF PAR.Ship_From_Warehouse = WRK.BLANK;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 //?** RTV carrier appt date/time                         E00495
 EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.LD_Carrier_Appt_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 CASE;

 // IF WRK.LD Carrier Appt Date is Entered
 IF WRK.LD_Carrier_Appt_Date > 0;

 // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
 PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?---------------------------------------------------------------
 EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(WRK.Ship_To_Name);
 PARAMETER(WRK.Ship_To_Address_Line_1);
 PARAMETER(WRK.Ship_To_Address_Line_2);
 PARAMETER(WRK.Ship_To_Address_Line_3);
 PARAMETER(WRK.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Ship_To_Zip_Postal_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?---------------------------------------------------------------
 //?OMS132:  Fill in Flat Amount as required
 CASE;

 // IF PAR.Total Stops is One Stop
 IF PAR.Total_Stops = 1;

 // AND PAR.Flat Amount EQ WRK.ZERO
 AND PAR.Flat_Amount = WRK.ZERO;

 //?get flat amount for destination city
 EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(WRK.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // PAR.Destination City = WRK.Destination City
 PAR.Destination_City = WRK.Destination_City;

 EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.Flat_Amount);
 {
  //?USER: Process Data record

  //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
  CASE;

  // IF DB1.CDR Unit of Measure is Flat
  IF DB1.CDR_Unit_of_Measure = 'FL';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 ENDIF;

 //?Calc Load U/M           -- RMC 6/16/06
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?OMS261:  if sched to ship today, print prelim pick at all whses
 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 // PAR.Company Number Pass   USR = PAR.Company Number
 PAR.Company_Number_Pass_USR = PAR.Company_Number;

 // PAR.Order Number 1  PASS  USR = PAR.Load ID
 PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

 // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
 PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

 // WRK.USR Select/Omit Flag = CND.Select
 WRK.USR_Select_Omit_Flag = 'S';

 // WRK.USR Detail or Summary = CND.Detail
 WRK.USR_Detail_or_Summary = 'D';

 // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
 WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

 //?letting all the other parms default in the CL
 //?If warehouse exists for load then print.
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program Pass Pre Pick @LoadLockUP.
 CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER('OMS');
 PARAMETER('PDIZPCLP');
 PARAMETER(WRK.USR_Detail_or_Summary);
 PARAMETER('Auto Print Prelim. Pick');
 PARAMETER(WRK.PRT_Printer_Device);
 PARAMETER(WRK.PRT_Hold_Output_Sts);
 PARAMETER(WRK.PRT_Save_Output_Sts);
 PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
 PARAMETER(WRK.PRT_Night_Queue);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(WRK.System_Value_Numeric);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(WRK.USR_Select_Omit_Flag);
 PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?AccuSort:  Create Order Header and Order Detail
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program Zzz AS Order Hdr/Dtl   XF.
  CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
  // Call program Exc Create EDI f/Lock XF.
  CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
  PARAMETER(PAR.Load_ID);

 }

 CASE;

 // IF JOB.*PROGRAM is PRT Audit Report
 IF JOB.*PROGRAM = 'PDSNPFR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program RTV Warehouse Dflt PrtrXF.
 CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Include_in_Auto_Pre_Pick);

 //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
 CASE;

 // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
 IF LCL.Include_in_Auto_Pre_Pick = 'Y';

 // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
 MESSAGE(USR2565 *INFO);
 MSGPARM(PAR.USR_Warehouse_Code);
 MSGPARM(PAR.USR_CDE_Parm_1);
 MSGPARM(PAR.USR_CDE_Parm_2);
 MSGPARM(PAR.USR_CDE_Parm_3);
 MSGPARM(PAR.USR_CDE_Parm_4);
 MSGPARM(PAR.USR_CDE_Parm_5);
 MSGPARM(PAR.USR_CDE_Parm_6);
 MSGPARM(PAR.USR_CDE_Parm_7);
 MSGPARM(PAR.USR_CDE_Parm_8);
 MSGPARM(PAR.USR_CDE_Parm_9);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Preliminary Pick not printed, no order details.'
 MESSAGE(USR2715 *INFO);

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and comments
 DO;

 //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
 //?** 09/30/2009 LJB E00495
 //?**   Use carrier date/time, if entered, to calc DDD/T
 //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
 //?** zeros if there is no Miles Between Cities record
 ENDDO;

}


// WRK.Load Change Type = CND.Lock Load
WRK.Load_Change_Type = 'LOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log New Value = CON.L
WRK.Change_Log_New_Value = 'L';

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(CTL.Load_Status);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

EXECUTE FUNCTION(RTV Defaulted Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1459694;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Load Status = CND.Lock
CTL.Load_Status = 'L';

ENDIF;

//?Process unlock load request
CASE;

// IF CTL.*CMD key is *Unlock Load
IF CTL.*CMD_key = '16';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// WRK.Load Change Type = CND.Unlock Load
WRK.Load_Change_Type = 'UNLOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log New Value = CON.U
WRK.Change_Log_New_Value = 'U';

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(CTL.Load_Status);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Miles_to_next_stop);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Initialize routine

  //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
  //?                                    to remove Company RST or Pos
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
  //?                              was using the par replace with db1
  EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(*ZERO);
  {
   //?USER: Initialize routine

   //?par.@rated freight is the sum of all the detail rated frt, for adjusting
   // PAR.@Rated Freight = CON.*ZERO
   PAR.@Rated_Freight = *ZERO;

   //?par.usr process status is used to indicate if there are detail present
   // PAR.USR Process status = CND.no
   PAR.USR_Process_status = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Process status = CND.yes
   PAR.USR_Process_status = 'Y';

   CASE;

   // IF PAR.Order Weight Total is Equal to zero
   IF PAR.Order_Weight_Total = *ZERO;

   // OR PAR.Total Rated Freight is Zero
   OR PAR.Total_Rated_Freight = *ZERO;

   // PAR.Rated Freight = CON.*ZERO
   PAR.Rated_Freight = *ZERO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Detail Line Status is Confirmed & Complete
   IF DB1.Detail_Line_Status = 'C'/'R';

   // Synon (17,9) work field =       * Compute Dtl Rated Freight
   PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
   * PAR.Total_Rated_Freight 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Synon (17,9) work field =       * Compute Dtl Rated Freight
   PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
   / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

   ENDIF;

   // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
   PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

   ENDIF;

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Rated_Freight);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
   PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

   // PAR.Order Sequence Number = DB1.Order Sequence Number
   PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

   // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
   PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

   ENDIF;

   //?USER: Exit processing

   //?Adjust totals
   CASE;

   // IF PAR.@Rated Freight NE PAR.Total Rated Freight
   IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

   // AND PAR.USR Process status is yes
   AND PAR.USR_Process_status = 'Y';

   // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
   WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

   // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
   PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

   //?Update last detail line processed
   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Rated_Freight);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

 }

}


EXECUTE FUNCTION(RTV Defaulted Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1459694;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Load Status = CND.Unlock
CTL.Load_Status = 'U';

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?If load status is 'E'(entered) change to 'U'(unlocked)
CASE;

// IF CTL.Load Status is Entered or Combined
IF CTL.Load_Status = 'E'/'C';

// CTL.Load Status = CND.Unlock
CTL.Load_Status = 'U';

ENDIF;

EXECUTE FUNCTION(RTV Export Ords for LD RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448885;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Change export status to yes if export order found on load
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Export Status = CND.no
PAR.Export_Status = 'N';

//?Change export status to yes if export order found on load
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Export Status = CND.yes
PAR.Export_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(CTL.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


//?** Total Load Miles will be zeros if no Miles Between Cities rec
// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);

//?If no orders on load, set ship from whse to ' ',ttl ld miles to 0
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// CTL.Ship From Warehouse = CON.*BLANK
CTL.Ship_From_Warehouse = *BLANK;

// CTL.Total Load Miles = CON.*ZERO
CTL.Total_Load_Miles = *ZERO;

// WRK.Total Miles = CON.*ZERO
WRK.Total_Miles = *ZERO;

ENDIF;

//?** Update DDD/T in the Load Header                    W288
// WRK.USR Load Id ALpha = CVTVAR(CTL.Load ID)
WRK.USR_Load_Id_ALpha = CVTVAR(CTL.Load_ID);

// Call program CLC Depart Date f/web  XF.
CALL PROGRAM(CLC Depart Date f/web  XF) ('PNMAXFR');
PARAMETER(WRK.USR_Load_Id_ALpha);

EXECUTE FUNCTION(RTV Default Load Seq  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1591587;
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(LCL.Default_Load_Sequence);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?default Schedule Sequence Number
CASE;

// IF LCL.Default Load Sequence is yes
IF LCL.Default_Load_Sequence = 'Y';

// CTL.Schedule Sequence Number = CON.1
CTL.Schedule_Sequence_Number = 1;

ENDIF;

//?** CTL tlt miles may have override miles in it. Check before update E00207
//?Calc Load U/M     -- RMC added here for all loads 4/17/14 (not just lckd)
DO;

//?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
// Call program RTV UM/Whs Code,BX Qty XF.
CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Load_U_M);

ENDDO;

EXECUTE FUNCTION(CHG For Load Planning  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1197731;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.LTL_Flag);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.USR_Temperature_3_1);
PARAMETER(CTL.USR_Total_Weight);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Allocate_Pounds_Miles);
PARAMETER(WRK.Total_Stops);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Truck_Size);
PARAMETER(CTL.Rated_Freight);
PARAMETER(CTL.USR_Load_Type);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Miles);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.USR_State_Code);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(WRK.Multi_Company_Load);
PARAMETER(LCL.Load_U_M);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?**************************************************************************
//?*OMS273
//?Send Message that the load was created for current ship date.
CASE;

// IF LCL.Load Create Sts USR is yes
IF LCL.Load_Create_Sts_USR = 'Y';

// LCL.Office Message USR = CON.*BLANK
LCL.Office_Message_USR = *BLANK;

EXECUTE FUNCTION(SndMsg Ld Crt -Cur Dt IF) TYPE(EXCINTFUN)                      AC1591279;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Office_Message_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('LOADMSG');
 PARAMETER(PAR.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // WRK.DL List ID = PAR.System Value Alpha
 WRK.DL_List_ID = PAR.System_Value_Alpha;

 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(Rtv Date Display Fmt  IF) TYPE(EXCINTFUN)                      AC1591295;
 PARAMETER(PAR.Dsp_Date_99_99_99_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 {
  //?Execute internal function

  // LCL.Date (Alpha) USR = CVTVAR(PAR.Date In)
  LCL.Date_Alpha_USR = CVTVAR(PAR.Date_In);

  //?99/
  // LCL.Date Component Alpha  USR = SUBSTRING(LCL.Date (Alpha) USR,CON.4,CON.2)
  LCL.Date_Component_Alpha_USR = SUBSTRING(LCL.Date_Alpha_USR:4:2);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(LCL.Date Component Alpha  USR,CON./,CND.*None)
  PAR.Dsp_Date_99_99_99_USR = LCL.Date_Component_Alpha_USR + '/' (*ZERO);

  //?99/99/
  // LCL.Date Component Alpha  USR = SUBSTRING(LCL.Date (Alpha) USR,CON.6,CON.2)
  LCL.Date_Component_Alpha_USR = SUBSTRING(LCL.Date_Alpha_USR:6:2);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,LCL.Date Component Alpha
  PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + LCL.Date_Component_Alpha_USR (*ZERO);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,CON./,CND.*None)
  PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + '/' (*ZERO);

  //?99/99/99
  // LCL.Date Component Alpha  USR = SUBSTRING(LCL.Date (Alpha) USR,CON.2,CON.2)
  LCL.Date_Component_Alpha_USR = SUBSTRING(LCL.Date_Alpha_USR:2:2);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,LCL.Date Component Alpha
  PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + LCL.Date_Component_Alpha_USR (*ZERO);

 }

 // Retrieve message - 'Load &1 with Scheduled Ship &3 created/changed today for Company &4 by &2.'
 PAR.Office_Message_USR = RTVMSG(USR2945);
 PARAMETER(PAR.Load_ID);
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Dsp_Date_99_99_99_USR);
 PARAMETER(PAR.Company_Number);

 // Call program SND Pager Msg (MPLUS) UP.
 CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
 PARAMETER(WRK.DL_List_ID);
 PARAMETER(PAR.Office_Message_USR);

 ENDIF;

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 06/10/2009 LJB E00328 Pass the formatted message back to
 //?** the calling program to be used by ESEND
 ENDDO;

}


CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

//?** Retrieve ESEND email list by company           E00328
// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER('LOADADDONS');
PARAMETER(LCL.System_Value_Alpha);

CASE;

// IF LCL.System Value Alpha is Not equal to Blank
IF LCL.System_Value_Alpha <> *BLANK;

//?** E00328
CASE;

// IF LCL.Office Message USR NE WRK.Blank for 30          USR
IF LCL.Office_Message_USR <> WRK.Blank_for_30_USR;

// LCL.Subject Line USR = CONCAT(CON.Same Day Load Add-Ons,CON.Notification Alert,CON.1)
LCL.Subject_Line_USR = 'Same Day Load Add-Ons' + 'Notification Alert' (1);

// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(LCL.System_Value_Alpha);
PARAMETER(LCL.Subject_Line_USR);
PARAMETER(LCL.Office_Message_USR);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If in add mode, set flags
CASE;

// IF WRK.Display File Add/Change is Add
IF WRK.Display_File_Add_Change = 'A';

// WRK.Display File Add/Change = CND.Change
WRK.Display_File_Add_Change = 'C';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

ENDIF;

//?Chg load start company to match orders on the load  RMC 9/27/07
// Call program EXC Chg Load Str Co   XF.
CALL PROGRAM(EXC Chg Load Str Co   XF) ('PMNTXFR');
PARAMETER(CTL.Load_ID);

