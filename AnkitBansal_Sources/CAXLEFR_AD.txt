// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for CAXLEFR
// ?Date: 14.08.2025 Time: 03:26:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// WRK.PRT Printer Device = CON.*BLANK
WRK.PRT_Printer_Device = *BLANK;

//?USER: Initialize subfile record (existing record)

//?** Select by System Value Type
CASE;

// IF CTL.System Value Type NE WRK.Blank for 3          USR
IF CTL.System_Value_Type <> WRK.Blank_for_3_USR;

// AND CTL.System Value Type NE DB1.System Value Type
AND CTL.System_Value_Type <> DB1.System_Value_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Allow both a GE and CT on System Value Code
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.System Value Code is Not Blank
IF CTL.System_Value_Code <> *BLANK;

// LCL.First Letter 1 USR = SUBSTRING(CTL.System Value Code,CON.1,CON.1)
LCL.First_Letter_1_USR = SUBSTRING(CTL.System_Value_Code:1:1);

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.System_Value_Code);
PARAMETER(WRK.Case_Upper_Field);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


CASE;

// IF LCL.First Letter 1 USR is *
IF LCL.First_Letter_1_USR = *;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.System_Value_Code);
PARAMETER(10);
PARAMETER(1);
PARAMETER(WRK.Case_Upper_Field);
PARAMETER(10);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(RCD.System_Value_Code);
PARAMETER(RCD.Text_USR);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


CASE;

// IF RCD.Text USR LT WRK.Case Upper Field
IF RCD.Text_USR < WRK.Case_Upper_Field;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?(way too much testing here)
CASE;

// IF DB1.Record Status is Inactive
IF DB1.Record_Status = 'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?(way too much testing here)
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

CASE;

// IF RCD.System Value Code is Auto Customer Numbering
IF RCD.System_Value_Code = 'AUTCST';

// PAR.Auto Customer Numbering? = CVTVAR(RCD.System Value Alpha)
PAR.Auto_Customer_Numbering = CVTVAR(RCD.System_Value_Alpha);

// IF RCD.System Value Code is System Date Format
IF RCD.System_Value_Code = 'DATFMT';

// PAR.System Date Format = CVTVAR(RCD.System Value Alpha)
PAR.System_Date_Format = CVTVAR(RCD.System_Value_Alpha);

// IF RCD.System Value Code is Auto Vendor Numbering
IF RCD.System_Value_Code = 'AUTVND';

// PAR.Auto Vendor Numbering? = CVTVAR(RCD.System Value Alpha)
PAR.Auto_Vendor_Numbering = CVTVAR(RCD.System_Value_Alpha);

// IF RCD.System Value Code is Organization Name
IF RCD.System_Value_Code = 'ORGNAM';

// PAR.Organization Name = CVTVAR(RCD.System Value Alpha)
PAR.Organization_Name = CVTVAR(RCD.System_Value_Alpha);

// IF RCD.System Value Code is Auto Item Numbering
IF RCD.System_Value_Code = 'AUTITM';

// PAR.G/L Posted Code = CVTVAR(RCD.System Value Alpha)
PAR.G_L_Posted_Code = CVTVAR(RCD.System_Value_Alpha);

// IF RCD.System Value Code is BOL Printer
IF RCD.System_Value_Code = 'BOLPRINTER';

// PAR.BOL Printer = CVTVAR(RCD.System Value Alpha)
PAR.BOL_Printer = CVTVAR(RCD.System_Value_Alpha);

ENDIF;

// RCD.Number Value - 7 = RCD.System Value Numeric
RCD.Number_Value_7 = RCD.System_Value_Numeric;

ENDIF;

//?CALC: Subfile control function fields

//?Error if numeric value entered for Alpha Value type
CASE;

// IF RCD.System Value Type is Alpha Values
IF RCD.System_Value_Type = 'A'/'O';

// AND RCD.System Value Numeric is Entered
AND RCD.System_Value_Numeric <> *ZERO;

// Send error message - 'Invalid, numeric value not allowed with Alpha Value type'
ERROR(USR4181);
MSGPARM(RCD.System_Value_Numeric);

ENDIF;

//?Error if alpha value entered for Numeric Value type
CASE;

// IF RCD.System Value Type is Numeric Value Type
IF RCD.System_Value_Type = 'N';

// AND RCD.System Value Alpha is Not equal to Blank
AND RCD.System_Value_Alpha <> *BLANK;

// Send error message - 'Invalid, alpha value not allowed with Numeric Value type'
ERROR(USR4182);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

//?USER: Validate subfile record fields

//?See if ctl system type code has changed
CASE;

// IF CTL.System Value Type NE WRK.Blank for 4           USR
IF CTL.System_Value_Type <> WRK.Blank_for_4_USR;

// AND RCD.System Value Type NE CTL.System Value Type
AND RCD.System_Value_Type <> CTL.System_Value_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Error if numeric value entered for Alpha Value type
CASE;

// IF RCD.System Value Type is Alpha Values
IF RCD.System_Value_Type = 'A'/'O';

// AND RCD.System Value Numeric is Entered
AND RCD.System_Value_Numeric <> *ZERO;

// Send error message - 'Invalid, numeric value not allowed with Alpha Value type'
ERROR(USR4181);
MSGPARM(RCD.System_Value_Numeric);

ENDIF;

//?Error if alpha value entered for Numeric Value type
CASE;

// IF RCD.System Value Type is Numeric Value Type
IF RCD.System_Value_Type = 'N';

// AND RCD.System Value Alpha is Not equal to Blank
AND RCD.System_Value_Alpha <> *BLANK;

// Send error message - 'Invalid, alpha value not allowed with Numeric Value type'
ERROR(USR4182);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

//?System Value Type cannot be blanks   E00000
CASE;

// IF RCD.System Value Type EQ LCL.Blank for 3          USR
IF RCD.System_Value_Type = LCL.Blank_for_3_USR;

// Send error message - 'Field cannot be blank'
ERROR(USR3741);
MSGPARM(RCD.System_Value_Type);

ENDIF;

//?  Validate system values based on code entered
//?  Auto Allocate must be Y/N
CASE;

// IF RCD.System Value Code is Auto Allocation Status
IF RCD.System_Value_Code = 'AUTALO';

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Auto Backorder must be Y/N
CASE;

// IF RCD.System Value Code is Auto Backorder Status
IF RCD.System_Value_Code = 'AUTBCK';

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Auto Customer Numbering must be Y/N
CASE;

// IF RCD.System Value Code is Auto Customer Numbering
IF RCD.System_Value_Code = 'AUTCST';

// PAR.Auto Customer Numbering? = RCD.System Value Alpha
PAR.Auto_Customer_Numbering = RCD.System_Value_Alpha;

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Automatic Vendor Numbering must be Y/N
CASE;

// IF RCD.System Value Code is Auto Vendor Numbering
IF RCD.System_Value_Code = 'AUTVND';

// PAR.Auto Vendor Numbering? = RCD.System Value Alpha
PAR.Auto_Vendor_Numbering = RCD.System_Value_Alpha;

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Automatic Item Numbering must be Y/N
CASE;

// IF RCD.System Value Code is Auto Item Numbering
IF RCD.System_Value_Code = 'AUTITM';

// PAR.G/L Posted Code = RCD.System Value Alpha
PAR.G_L_Posted_Code = RCD.System_Value_Alpha;

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Catchweight Default must be Y/N
CASE;

// IF RCD.System Value Code is Catchweight Default
IF RCD.System_Value_Code = 'DFTCWP';

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Contract Status must be Y/N
CASE;

// IF RCD.System Value Code is Contract Status Default
IF RCD.System_Value_Code = 'DFTCS';

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Catchweight U/M required if catchweight is enabled
CASE;

// IF RCD.System Value Code is Catchweight U/M
IF RCD.System_Value_Code = 'CWGTUM';

//?Catchweight U/M required if catchweight is enabled
CASE;

// IF WRK.Catch Weight Status is yes
IF WRK.Catch_Weight_Status = 'Y';

CASE;

// IF RCD.System Value Alpha is Equal to Blank
IF RCD.System_Value_Alpha = *BLANK;

// Send error message - 'Unit of measure is required.'
ERROR(USR0398);
MSGPARM(WRK.U_M_Catchweight);

ENDIF;

ENDIF;

//?Validate u/m
CASE;

// IF RCD.System Value Alpha is Not equal to Blank
IF RCD.System_Value_Alpha <> *BLANK;

// PAR.U/M - Catchweight = RCD.System Value Alpha
PAR.U_M_Catchweight = RCD.System_Value_Alpha;

EXECUTE FUNCTION(RTV Unit of Measure    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1131036;
PARAMETER(PAR.U_M_Catchweight);

CASE;

// IF PGM.*Return code is Unit of Measure        NF
IF PGM.*Return_code = 'USR0033';

// Send error message - 'Unit of Measure not found.'
ERROR(USR0033);

ENDIF;

ENDIF;

ENDIF;

//?  Promotion Status must be Y/N
CASE;

// IF RCD.System Value Code is Promotion Status Default
IF RCD.System_Value_Code = 'DFTPS';

CASE;

// IF RCD.System Value Alpha is Equal to N
IF RCD.System_Value_Alpha = 'N';

// IF RCD.System Value Alpha is Equal to Y
IF RCD.System_Value_Alpha = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'The System Value for &1 must be Y or N'
ERROR(USR0773);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Enterprise code 1 name must be entered
CASE;

// IF RCD.System Value Code is Enterprise Code 1 Name
IF RCD.System_Value_Code = 'ENTCDE1';

CASE;

// IF RCD.System Value Alpha is Equal to Blank
IF RCD.System_Value_Alpha = *BLANK;

// Send error message - 'Enterprise name must be entered'
ERROR(USR0774);
MSGPARM(RCD.System_Value_Alpha);
MSGPARM(RCD.System_Value_Code);

ENDIF;

ENDIF;

//?  Enterprise code name 2 optional
CASE;

// IF RCD.System Value Code is Enterprise Code 2 Name
IF RCD.System_Value_Code = 'ENTCDE2';

ENDIF;

//?  Data File library must be entered
CASE;

// IF RCD.System Value Code is Data File Library
IF RCD.System_Value_Code = 'DTALIB';

// PAR.@Object Name ATR = RCD.System Value Alpha
PAR.@Object_Name_ATR = RCD.System_Value_Alpha;

// Execute function VAL object existence   US.
EXECUTE FUNCTION(VAL object existence   US) TYPE(EXCUSRSRC) ('JCOBJR');
PARAMETER(PAR.@Object_Name_ATR);
PARAMETER(*LIB);
PARAMETER(PGM.*Return_code);
{
 C                     CALL 'JCOBJC'                   CL PROGRAM
 C                     PARM #IA8VN    UA8VN  10
 C                     PARM #IOBJT    UOBJT  10
 C           W0RTN     PARM           W0RTN
}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - ''&1' is invalid, please re-enter.'
ERROR(USR0280);
MSGPARM(PAR.@Object_Name_ATR);

ENDIF;

ENDIF;

//?  History Data File library must be entered
CASE;

// IF RCD.System Value Code is History File Library
IF RCD.System_Value_Code = 'HISLIB';

// PAR.MST Object Name ATR = RCD.System Value Alpha
PAR.@Object_Name_ATR = RCD.System_Value_Alpha;

// Execute function VAL object existence   US.
EXECUTE FUNCTION(VAL object existence   US) TYPE(EXCUSRSRC) ('JCOBJR');
PARAMETER(PAR.@Object_Name_ATR);
PARAMETER(*LIB);
PARAMETER(PGM.*Return_code);
{
 C                     CALL 'JCOBJC'                   CL PROGRAM
 C                     PARM #IA8VN    UA8VN  10
 C                     PARM #IOBJT    UOBJT  10
 C           W0RTN     PARM           W0RTN
}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - ''&1' is invalid, please re-enter.'
ERROR(USR0280);
MSGPARM(PAR.@Object_Name_ATR);

ENDIF;

ENDIF;

//?  Next available note number must be entered
CASE;

// IF RCD.System Value Code is Next Available Note
IF RCD.System_Value_Code = 'NXTNOT';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Next available Note number cannot be zero'
ERROR(USR0775);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

CASE;

// IF RCD.System Value Type is Numeric Value Type
IF RCD.System_Value_Type = 'N';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

ENDIF;

//?  If Auto Customer Number=Y, Next customer # must be entered
CASE;

// IF RCD.System Value Code is Next Customer Number
IF RCD.System_Value_Code = 'NXTCST';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF PAR.Auto Customer Numbering? is yes
IF PAR.Auto_Customer_Numbering = 'Y';

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Automatic customer numbering = Y, next customer number required.'
ERROR(USR0204);
MSGPARM(RCD.System_Value_Numeric);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

ENDIF;

//?  Next G/L Actual number must be entered
CASE;

// IF RCD.System Value Code is Next G/L Actual
IF RCD.System_Value_Code = 'NXTGLA';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Next G/L Actual must ent.'
ERROR(USR0776);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

//?  If Auto Vendor Number=Y, then Next vendor # must be entered
CASE;

// IF RCD.System Value Code is Next Vendor Number
IF RCD.System_Value_Code = 'NXTVND';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF PAR.Auto Vendor Numbering? is yes
IF PAR.Auto_Vendor_Numbering = 'Y';

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Automatic Vendor numbering = Y, Next Vendor Number required'
ERROR(USR0206);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

ENDIF;

//?  Next temporary vendor number must be entered
CASE;

// IF RCD.System Value Code is Next Vendor Temporary
IF RCD.System_Value_Code = 'NXTVNDTMP';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

ENDIF;

//?  Next Requisition number must be entered
CASE;

// IF RCD.System Value Code is Next Requisition Number
IF RCD.System_Value_Code = 'NXTREQ';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Next requisition number is required'
ERROR(USR1026);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

//?   Next Item Extension must not be zero
CASE;

// IF RCD.System Value Code is Next Item Extension
IF RCD.System_Value_Code = 'NXTITE';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Next Item Extension Number is required'
ERROR(USR0884);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

//?  If Auto Item Number=Y, Next Item # must be entered
CASE;

// IF RCD.System Value Code is Next Item Number
IF RCD.System_Value_Code = 'NXTITM';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF PAR.Auto Item Numbering? is Yes
IF PAR.G_L_Posted_Code = 'Y';

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'If Auto Item Numbering = Y, the Next Item Number is required.'
ERROR(USR1235);
MSGPARM(RCD.System_Value_Numeric);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

ENDIF;

//?   Next Location Code  must not be zero
CASE;

// IF RCD.System Value Code is Next Location Number
IF RCD.System_Value_Code = 'NXTLOC';

// RCD.System Value Numeric = RCD.Number Value - 7
RCD.System_Value_Numeric = RCD.Number_Value_7;

CASE;

// IF RCD.System Value Numeric is Equal to zero
IF RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Next Location Number required'
ERROR(USR0885);
MSGPARM(RCD.Number_Value_7);

ENDIF;

ENDIF;

//?  Organization name must be entered
CASE;

// IF RCD.System Value Code is Organization Name
IF RCD.System_Value_Code = 'ORGNAM';

// PAR.Organization Name = RCD.System Value Alpha
PAR.Organization_Name = RCD.System_Value_Alpha;

CASE;

// IF RCD.System Value Alpha is Equal to Blank
IF RCD.System_Value_Alpha = *BLANK;

// Send error message - 'Organization name must be entered'
ERROR(USR0777);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?  Reference Master name must be entered
CASE;

// IF RCD.System Value Code is Reference Master Name
IF RCD.System_Value_Code = 'REFMSTNAM';

CASE;

// IF RCD.System Value Alpha is Equal to Blank
IF RCD.System_Value_Alpha = *BLANK;

// Send error message - 'Reference Master Name must be entered'
ERROR(USR0778);
MSGPARM(RCD.System_Value_Code);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?   Edit Default Country Code
CASE;

// IF RCD.System Value Code is Default Country Code
IF RCD.System_Value_Code = 'DFTCNTRY';

// WRK.Country Code = RCD.System Value Alpha
WRK.Country_Code = RCD.System_Value_Alpha;

CASE;

// IF WRK.Country Code is Select
IF WRK.Country_Code = '?';

// Call program SEL Select Country     SR.
CALL PROGRAM(SEL Select Country     SR) ('OMZASRR');
PARAMETER(WRK.Country_Code);

ENDIF;

EXECUTE FUNCTION(RTV Chk if valid Cntry RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1198145;
PARAMETER(WRK.Country_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Country Code is not found in Country Master File.'
ERROR(USR1282);
MSGPARM(RCD.System_Value_Alpha);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.System Value Alpha = CON.*BLANK
RCD.System_Value_Alpha = *BLANK;

// RCD.System Value Alpha = WRK.Country Code
RCD.System_Value_Alpha = WRK.Country_Code;

ENDIF;

ENDIF;

//?   Edit Default Credit Code Reason
CASE;

// IF RCD.System Value Code is Credit Hold Reason
IF RCD.System_Value_Code = 'CRDHLD';

// WRK.Reason Code = RCD.System Value Alpha
WRK.Reason_Code = RCD.System_Value_Alpha;

CASE;

// IF WRK.Reason Code is *Select Request
IF WRK.Reason_Code = '?';

EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
PARAMETER(JOB.*USER);
PARAMETER('C/A');
PARAMETER(WRK.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV DFT Read Active    RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1275663;
PARAMETER(WRK.Reason_Code);
PARAMETER(WRK.Description);
{
 //?USER: Initialize routine

 // PAR.Description = CON.*BLANK
 PAR.Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(RTV DFT Read Active    RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1275663;
PARAMETER(WRK.Reason_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Initialize routine

 // PAR.Description = CON.*BLANK
 PAR.Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Reason Code not found.'
ERROR(USR0858);
MSGPARM(RCD.System_Value_Alpha);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.System Value Alpha = CON.*BLANK
RCD.System_Value_Alpha = *BLANK;

// RCD.System Value Alpha = WRK.Reason Code
RCD.System_Value_Alpha = WRK.Reason_Code;

ENDIF;

ENDIF;

//?   Validate BOL Printer
CASE;

// IF RCD.System Value Code is BOL Printer
IF RCD.System_Value_Code = 'BOLPRINTER';

// PAR.BOL Printer = RCD.System Value Alpha
PAR.BOL_Printer = RCD.System_Value_Alpha;

EXECUTE FUNCTION(VAL Printer Device     IF) TYPE(EXCINTFUN)                     AC1277933;
PARAMETER(PAR.BOL_Printer);
{
 //?Execute internal function

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // Execute function VAL object existence   US.
 EXECUTE FUNCTION(VAL object existence   US) TYPE(EXCUSRSRC) ('JCOBJR');
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(*OUTQ);
 PARAMETER(PGM.*Return_code);
 {
  C                     CALL 'JCOBJC'                   CL PROGRAM
  C                     PARM #IA8VN    UA8VN  10
  C                     PARM #IOBJT    UOBJT  10
  C           W0RTN     PARM           W0RTN
 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - ''&1' is invalid, please re-enter.'
 ERROR(USR0280);
 MSGPARM(PAR.PRT_Printer_Device);

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - ''&1' is invalid, please re-enter.'
ERROR(USR0280);
MSGPARM(PAR.BOL_Printer);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Create Sys Values  CR) TYPE(CRTOBJ) FILE(CADPREP)          AC1142313;
PARAMETER(RCD.System_Value_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.System_Value_Type);
PARAMETER(RCD.System_Value_Alpha);
PARAMETER(RCD.System_Value_Numeric);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Change Sys Values  CH) TYPE(CHGOBJ) FILE(CADPREP)          AC1142314;
PARAMETER(RCD.System_Value_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.System_Value_Type);
PARAMETER(RCD.System_Value_Alpha);
PARAMETER(RCD.System_Value_Numeric);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?Print Listing request
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Zzz Generic Prt Prompt UP.
CALL PROGRAM(Zzz Generic Prt Prompt UP) ('PDHOUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/A');
PARAMETER('PDCHCLP');
PARAMETER(WRK.System_Value_Numeric);
PARAMETER('System Values Listing');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

