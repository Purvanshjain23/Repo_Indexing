// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVICXFR
// ?Date: 14.08.2025 Time: 03:52:16
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Cloned from 'Rtv/Crt Dflt f/JCOrdrs RT - Export Doc Defaults'.
EXECUTE FUNCTION(Rtv/Crt Dflt f/JCOrdrs2RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC2236939;
PARAMETER(440);
PARAMETER('CHN');
PARAMETER(2766426);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.USR Blank Field = CND.Blank
 LCL.USR_Blank_Field = *BLANK;

 //?DO2642 DN 11/15/22-Initialize.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // LCL.ED Live with PHIS = DB1.ED Live with PHIS
 LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

 ENDIF;

 //?12/27/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND NOT DB1.ED Xlate Desc to Country is Not Selected
 AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

 // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
 PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

 ENDIF;

 EXECUTE FUNCTION(Val Exp Doc Ordr Exsts RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1528806;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PGM.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?***Create the Exp Doc Order Dtl Records if HDR Exist.***
 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.Bill_to_Customer);
 PARAMETER(WRK.Bill_to_Name);
 PARAMETER(WRK.Bill_to_Address_Line_1);
 PARAMETER(WRK.Bill_to_Address_Line_2);
 PARAMETER(WRK.Bill_to_Address_Line_3);
 PARAMETER(WRK.Bill_to_City);
 PARAMETER(WRK.Bill_to_State_Code);
 PARAMETER(WRK.Bill_to_Zip_Postal_Code);
 PARAMETER(NLL.Customer_Purchase_Order_#);
 PARAMETER(WRK.Order_Date);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(WRK.Actual_Shipped_Date);
 PARAMETER(WRK.Cancel_Date);
 PARAMETER(WRK.Terms_Code);
 PARAMETER(WRK.Special_Instructions);
 PARAMETER(WRK.Special_Instructions_2);
 PARAMETER(WRK.Carrier_Code);
 PARAMETER(WRK.Comment_Print_Acknowledge);
 PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
 PARAMETER(WRK.Comment_Print_Pick_Slip);
 PARAMETER(WRK.Comment_Print_Ship_Doc);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(WRK.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(WRK.Order_Type_Print_Status);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.User_Original_Entry);
 PARAMETER(WRK.Date_of_Original_Entry);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(WRK.Credit_Hold);
 PARAMETER(WRK.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(WRK.Accounts_Receiv_Ent_1);
 PARAMETER(WRK.Accounts_Receiv_Ent_2);
 PARAMETER(WRK.Load_ID);
 PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.LTL_Flag);
 PARAMETER(WRK.Price_Audit);
 PARAMETER(WRK.Price_Status);
 PARAMETER(WRK.Shipping_Method);
 PARAMETER(WRK.Export_Status);
 PARAMETER(WRK.Palletize);
 PARAMETER(WRK.Shrink_Wrap);
 PARAMETER(WRK.Slip_Sheet);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Attach_to_Invoice_Number);
 PARAMETER(WRK.Load_Plan_Order);
 PARAMETER(WRK.Print_Pick_Slip);
 PARAMETER(WRK.Resell_Reference_Number);
 PARAMETER(WRK.Special_Comment_1);
 PARAMETER(WRK.Special_Comment_2);
 PARAMETER(WRK.Affect_Auto_Accruals);
 PARAMETER(WRK.Sales_Route_Code);
 PARAMETER(WRK.Manager_Level_Code);
 PARAMETER(WRK.VP_Level_Code);
 PARAMETER(WRK.Attach_to_Order_Number);
 PARAMETER(WRK.Reason_for_Price_Audit);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER(WRK.Invoice_Suffix);
 PARAMETER(WRK.Invoice_Date);
 PARAMETER(WRK.Event_Code);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(WRK.Billing_Activity_Type);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(WRK.Order_Certification_Flag);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.ED Consignee Addr 2 = PAR.ED Consignee Addr 2
 LCL.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2;

 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 //?** Format address lines 2 & 3 for printing            E004201
 CASE;

 // IF LCL.ED Consignee Addr 2 is Blank
 IF LCL.ED_Consignee_Addr_2 = *BLANK;

 //?** Put line 3 into line 2
 // LCL.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // LCL.ED Consignee Addr 3 = CND.Blank
 LCL.ED_Consignee_Addr_3 = *BLANK;

 //?** Format address lines 2 & 3 for printing            E004201
 // PAR.ED Customer PO # = PAR.Customer Purchase Order #
 PAR.ED_Customer_PO_# = PAR.Customer_Purchase_Order_#;

 // PAR.ED Total Net Weight lbs = PAR.Order Weight Total
 PAR.ED_Total_Net_Weight_lbs = PAR.Order_Weight_Total;

 //?** Calculate Total Unit Price
 // IF PAR.Order Weight Total is Not equal zero
 IF PAR.Order_Weight_Total <> *ZERO;

 // PAR.ED Total Unit Price = PAR.A/R order Value Total / PAR.Order Weight Total *
 PAR.ED_Total_Unit_Price = PAR.A_R_order_Value_Total / PAR.Order_Weight_Total;

 ENDIF;

 //?Read the Order Detail and calc/output required fields
 // PAR.ED Nbr of Packages = CON.*ZERO
 PAR.ED_Nbr_of_Packages = *ZERO;

 // PAR.ED Invoice Total = CON.*ZERO
 PAR.ED_Invoice_Total = *ZERO;

 //?12/27/18 DN R13944-Pass in ED Xlate Desc to Country.
 //?11/15/22 DN DO2642-Pass in ED Live with PHIS.
 EXECUTE FUNCTION(Rtv/Crt Exp Doc        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1529224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(LCL.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Initialize routine

  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  // PAR.ED Total Net Weight MT = CON.*ZERO
  PAR.ED_Total_Net_Weight_MT = *ZERO;

  // PAR.ED Total Net Weight lbs = CON.*ZERO
  PAR.ED_Total_Net_Weight_lbs = *ZERO;

  // PAR.Gross Weight USR 9.1 = CON.*ZERO
  PAR.Gross_Weight_USR_9_1 = *ZERO;

  //?Print max std qty and weight if not shipped, and comp value=Y
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Print max std qty and weight if not shipped, and comp value=Y
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('EXPPRTOQT');
  PARAMETER(LCL.Status_Flag_13_Y_N);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Status Flag 13 Y/N is Yes
  IF LCL.Status_Flag_13_Y_N = 'Y';

  // LCL.Status Flag 14 Y/N = CND.Yes
  LCL.Status_Flag_14_Y_N = 'Y';

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  //?DN 03/18/22 DO2416-Added Country Codes ISO 3 Standard.
  //?Create Detail if required for the document.
  CASE;

  // IF PAR.ED Export Document Type is Health Certificate 9060-5
  IF PAR.ED_Export_Document_Type = 'H';

  // OR PAR.ED Export Document Type is Customs Invoice
  OR PAR.ED_Export_Document_Type = 'C';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // OR DB1.Country Code is Hong Kong
  OR DB1.Country_Code = 'HKG';

  // OR DB1.Country Code is Taiwan
  OR DB1.Country_Code = 'TAI';

  // OR DB1.Country Code is Australia
  OR DB1.Country_Code = 'AUS';

  // OR DB1.Country Code is Honduras
  OR DB1.Country_Code = 'HON';

  // OR DB1.Country Code is Romania
  OR DB1.Country_Code = 'ROM';

  // OR DB1.Country Code is Russia
  OR DB1.Country_Code = 'RUS';

  // OR PAR.ED Export Document Type is Customs Invoice-Willson
  OR PAR.ED_Export_Document_Type = 'W';

  // OR PAR.ED Export Document Type is Form 9060-7 (Casings)
  OR PAR.ED_Export_Document_Type = 'G';

  // OR DB1.Country Code is Chile
  OR ( DB1.Country_Code = 'CHI';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  // OR PAR.ED Export Document Type is Application for Export
  OR PAR.ED_Export_Document_Type = 'A';

  // OR DB1.Country Code is Taiwan - ISO 3
  OR DB1.Country_Code = 'TWN';

  // OR DB1.Country Code is Honduras - ISO 3
  OR DB1.Country_Code = 'HND';

  // OR DB1.Country Code is Romania - ISO 3
  OR DB1.Country_Code = 'ROU';

  // OR DB1.Country Code is Chile - ISO 3
  OR ( DB1.Country_Code = 'CHL';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 06/22/22-Commented Out Old Method of Item Label Formatting.
  //?DO2642 DN 06/22/22-New Method of Item Label Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  // PAR.ED Product Pkg Type = CON.BOXES
  PAR.ED_Product_Pkg_Type = 'BOXES';

  // PAR.ED Product Net Weight lbs = DB1.Weight Shipped Total
  PAR.ED_Product_Net_Weight_lbs = DB1.Weight_Shipped_Total;

  // PAR.ED Product Net Weight MT = DB1.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = DB1.Weight_Shipped_Total / 2204.6;

  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Product Nbr of Pkgs = DB1.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = DB1.Quantity_Shipped_Total;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + DB1.Quantity Shipped Total
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + DB1.Quantity_Shipped_Total;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = DB1.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = DB1.Unit Price
  PAR.ED_Product_Unit_Price = DB1.Unit_Price;

  // PAR.ED Producet Extended Amt = DB1.Extended Amount
  PAR.ED_Producet_Extended_Amt = DB1.Extended_Amount;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?4/30/03 changed Item Str Class validation from 420 to 755-use group insted
  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF PAR.Warehouse Type is Fresh
  IF PAR.Warehouse_Type = 'FR';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  //?do for all plants 2/6/17            R9126
  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  // PAR.ED Product Pkg Type = CON.Boxes
  PAR.ED_Product_Pkg_Type = 'Boxes';

  //? Load default MAX qty and weight if  NOT shipped
  CASE;

  // IF LCL.Status Flag 14 Y/N is Yes
  IF LCL.Status_Flag_14_Y_N = 'Y';

  // AND PAR.ED Export Document Type is Application for Export
  AND PAR.ED_Export_Document_Type = 'A';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  //?S14759 DN 04/08/19-Externalize Combos Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14759 DN 04/08/19-Externalize Box Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  CASE;

  // IF DB1.Weight Shipped Total is Greater than zero
  IF DB1.Weight_Shipped_Total > *ZERO;

  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(PAR.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Misc Tare Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Shipped Total *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Shipped_Total;

  //?Misc Tare Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Scheduled *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Scheduled;

  ENDIF;

  //?Find Box weight for the Item and Subtract for final tare weight
  // PAR.Unit Weight = CON.*ZERO
  PAR.Unit_Weight = *ZERO;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Shipped Total NE WRK.ZERO
  IF DB1.Weight_Shipped_Total <> WRK.ZERO;

  //?S00714 get from manifest dtl.. calc as a back up
  EXECUTE FUNCTION(RTV Sum Gross Wt      RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1927373;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Gross_Weight_USR_9_1);
  {
   //?USER: Initialize routine

   //?RMC 3/17/09  new for exp docs
   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Manifest Gross Weight
   PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Manifest_Gross_Weight;

  }

  CASE;

  // IF PAR.Gross Weight USR 9.1 is not entered
  IF PAR.Gross_Weight_USR_9_1 = *ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Shipped Total * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Shipped_Total * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Scheduled NE WRK.ZERO
  IF DB1.Weight_Scheduled <> WRK.ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Scheduled * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Scheduled * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.ED Product Net Weight lbs
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.ED_Product_Net_Weight_lbs;

  ENDIF;

  //?***  ACCUM PACKAGES AND WEIGHT HERE - SO IT GETS THE DEFAULT MAX
  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.ED Product Nbr of Pkgs
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.ED_Product_Nbr_of_Pkgs;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // PAR.ED Total Net Weight lbs = PAR.ED Total Net Weight lbs + PAR.ED Product Net Weight lbs
  PAR.ED_Total_Net_Weight_lbs = PAR.ED_Total_Net_Weight_lbs
  + PAR.ED_Product_Net_Weight_lbs;

  //?***
  //?Date of Slaughter from processing date
  DO;

  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  // PAR.ED Date of Slaughter Dtl = LCL.Text USR 40
  PAR.ED_Date_of_Slaughter_Dtl = LCL.Text_USR_40;

  //?new for AUS form 9115-2
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // PAR.ED Slaughter Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Slaughter_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Slaughter Date Range = WRK.Date From Alpha       USR
  PAR.ED_Slaughter_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?Date of Production from processing date   RMC 5/3/6 added for russia
  DO;

  //?RMC OMS026 update prod date range for russian 9450
  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('N');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  //?new for RUS form 9450-3
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Production Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Production_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Production Date Range = WRK.Date From Alpha       USR
  PAR.ED_Production_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?12/27/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 06/22/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?06/22/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER('N');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(PAR.ED_Slaughter_Date_Range);
  PARAMETER(PAR.ED_Production_Date_Range);
  PARAMETER(LCL.ED_Product_UID);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(LCL.ED_Unused_Status_1);
  PARAMETER(LCL.ED_Unused_Status_2);
  PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
  PARAMETER(LCL.ED_Nbr_of_Packing_Units);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   //?USER: Processing after Data update

   // Call program Rtv/Chg Hdr Shpd Amts XF.
   CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Crt Dflt f/JCOrdrs2RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC2236939;
PARAMETER(440);
PARAMETER('CHN');
PARAMETER(2774314);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.USR Blank Field = CND.Blank
 LCL.USR_Blank_Field = *BLANK;

 //?DO2642 DN 11/15/22-Initialize.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // LCL.ED Live with PHIS = DB1.ED Live with PHIS
 LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

 ENDIF;

 //?12/27/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND NOT DB1.ED Xlate Desc to Country is Not Selected
 AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

 // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
 PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

 ENDIF;

 EXECUTE FUNCTION(Val Exp Doc Ordr Exsts RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1528806;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PGM.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?***Create the Exp Doc Order Dtl Records if HDR Exist.***
 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.Bill_to_Customer);
 PARAMETER(WRK.Bill_to_Name);
 PARAMETER(WRK.Bill_to_Address_Line_1);
 PARAMETER(WRK.Bill_to_Address_Line_2);
 PARAMETER(WRK.Bill_to_Address_Line_3);
 PARAMETER(WRK.Bill_to_City);
 PARAMETER(WRK.Bill_to_State_Code);
 PARAMETER(WRK.Bill_to_Zip_Postal_Code);
 PARAMETER(NLL.Customer_Purchase_Order_#);
 PARAMETER(WRK.Order_Date);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(WRK.Actual_Shipped_Date);
 PARAMETER(WRK.Cancel_Date);
 PARAMETER(WRK.Terms_Code);
 PARAMETER(WRK.Special_Instructions);
 PARAMETER(WRK.Special_Instructions_2);
 PARAMETER(WRK.Carrier_Code);
 PARAMETER(WRK.Comment_Print_Acknowledge);
 PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
 PARAMETER(WRK.Comment_Print_Pick_Slip);
 PARAMETER(WRK.Comment_Print_Ship_Doc);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(WRK.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(WRK.Order_Type_Print_Status);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.User_Original_Entry);
 PARAMETER(WRK.Date_of_Original_Entry);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(WRK.Credit_Hold);
 PARAMETER(WRK.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(WRK.Accounts_Receiv_Ent_1);
 PARAMETER(WRK.Accounts_Receiv_Ent_2);
 PARAMETER(WRK.Load_ID);
 PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.LTL_Flag);
 PARAMETER(WRK.Price_Audit);
 PARAMETER(WRK.Price_Status);
 PARAMETER(WRK.Shipping_Method);
 PARAMETER(WRK.Export_Status);
 PARAMETER(WRK.Palletize);
 PARAMETER(WRK.Shrink_Wrap);
 PARAMETER(WRK.Slip_Sheet);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Attach_to_Invoice_Number);
 PARAMETER(WRK.Load_Plan_Order);
 PARAMETER(WRK.Print_Pick_Slip);
 PARAMETER(WRK.Resell_Reference_Number);
 PARAMETER(WRK.Special_Comment_1);
 PARAMETER(WRK.Special_Comment_2);
 PARAMETER(WRK.Affect_Auto_Accruals);
 PARAMETER(WRK.Sales_Route_Code);
 PARAMETER(WRK.Manager_Level_Code);
 PARAMETER(WRK.VP_Level_Code);
 PARAMETER(WRK.Attach_to_Order_Number);
 PARAMETER(WRK.Reason_for_Price_Audit);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER(WRK.Invoice_Suffix);
 PARAMETER(WRK.Invoice_Date);
 PARAMETER(WRK.Event_Code);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(WRK.Billing_Activity_Type);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(WRK.Order_Certification_Flag);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.ED Consignee Addr 2 = PAR.ED Consignee Addr 2
 LCL.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2;

 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 //?** Format address lines 2 & 3 for printing            E004201
 CASE;

 // IF LCL.ED Consignee Addr 2 is Blank
 IF LCL.ED_Consignee_Addr_2 = *BLANK;

 //?** Put line 3 into line 2
 // LCL.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // LCL.ED Consignee Addr 3 = CND.Blank
 LCL.ED_Consignee_Addr_3 = *BLANK;

 //?** Format address lines 2 & 3 for printing            E004201
 // PAR.ED Customer PO # = PAR.Customer Purchase Order #
 PAR.ED_Customer_PO_# = PAR.Customer_Purchase_Order_#;

 // PAR.ED Total Net Weight lbs = PAR.Order Weight Total
 PAR.ED_Total_Net_Weight_lbs = PAR.Order_Weight_Total;

 //?** Calculate Total Unit Price
 // IF PAR.Order Weight Total is Not equal zero
 IF PAR.Order_Weight_Total <> *ZERO;

 // PAR.ED Total Unit Price = PAR.A/R order Value Total / PAR.Order Weight Total *
 PAR.ED_Total_Unit_Price = PAR.A_R_order_Value_Total / PAR.Order_Weight_Total;

 ENDIF;

 //?Read the Order Detail and calc/output required fields
 // PAR.ED Nbr of Packages = CON.*ZERO
 PAR.ED_Nbr_of_Packages = *ZERO;

 // PAR.ED Invoice Total = CON.*ZERO
 PAR.ED_Invoice_Total = *ZERO;

 //?12/27/18 DN R13944-Pass in ED Xlate Desc to Country.
 //?11/15/22 DN DO2642-Pass in ED Live with PHIS.
 EXECUTE FUNCTION(Rtv/Crt Exp Doc        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1529224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(LCL.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Initialize routine

  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  // PAR.ED Total Net Weight MT = CON.*ZERO
  PAR.ED_Total_Net_Weight_MT = *ZERO;

  // PAR.ED Total Net Weight lbs = CON.*ZERO
  PAR.ED_Total_Net_Weight_lbs = *ZERO;

  // PAR.Gross Weight USR 9.1 = CON.*ZERO
  PAR.Gross_Weight_USR_9_1 = *ZERO;

  //?Print max std qty and weight if not shipped, and comp value=Y
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Print max std qty and weight if not shipped, and comp value=Y
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('EXPPRTOQT');
  PARAMETER(LCL.Status_Flag_13_Y_N);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Status Flag 13 Y/N is Yes
  IF LCL.Status_Flag_13_Y_N = 'Y';

  // LCL.Status Flag 14 Y/N = CND.Yes
  LCL.Status_Flag_14_Y_N = 'Y';

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  //?DN 03/18/22 DO2416-Added Country Codes ISO 3 Standard.
  //?Create Detail if required for the document.
  CASE;

  // IF PAR.ED Export Document Type is Health Certificate 9060-5
  IF PAR.ED_Export_Document_Type = 'H';

  // OR PAR.ED Export Document Type is Customs Invoice
  OR PAR.ED_Export_Document_Type = 'C';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // OR DB1.Country Code is Hong Kong
  OR DB1.Country_Code = 'HKG';

  // OR DB1.Country Code is Taiwan
  OR DB1.Country_Code = 'TAI';

  // OR DB1.Country Code is Australia
  OR DB1.Country_Code = 'AUS';

  // OR DB1.Country Code is Honduras
  OR DB1.Country_Code = 'HON';

  // OR DB1.Country Code is Romania
  OR DB1.Country_Code = 'ROM';

  // OR DB1.Country Code is Russia
  OR DB1.Country_Code = 'RUS';

  // OR PAR.ED Export Document Type is Customs Invoice-Willson
  OR PAR.ED_Export_Document_Type = 'W';

  // OR PAR.ED Export Document Type is Form 9060-7 (Casings)
  OR PAR.ED_Export_Document_Type = 'G';

  // OR DB1.Country Code is Chile
  OR ( DB1.Country_Code = 'CHI';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  // OR PAR.ED Export Document Type is Application for Export
  OR PAR.ED_Export_Document_Type = 'A';

  // OR DB1.Country Code is Taiwan - ISO 3
  OR DB1.Country_Code = 'TWN';

  // OR DB1.Country Code is Honduras - ISO 3
  OR DB1.Country_Code = 'HND';

  // OR DB1.Country Code is Romania - ISO 3
  OR DB1.Country_Code = 'ROU';

  // OR DB1.Country Code is Chile - ISO 3
  OR ( DB1.Country_Code = 'CHL';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 06/22/22-Commented Out Old Method of Item Label Formatting.
  //?DO2642 DN 06/22/22-New Method of Item Label Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  // PAR.ED Product Pkg Type = CON.BOXES
  PAR.ED_Product_Pkg_Type = 'BOXES';

  // PAR.ED Product Net Weight lbs = DB1.Weight Shipped Total
  PAR.ED_Product_Net_Weight_lbs = DB1.Weight_Shipped_Total;

  // PAR.ED Product Net Weight MT = DB1.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = DB1.Weight_Shipped_Total / 2204.6;

  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Product Nbr of Pkgs = DB1.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = DB1.Quantity_Shipped_Total;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + DB1.Quantity Shipped Total
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + DB1.Quantity_Shipped_Total;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = DB1.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = DB1.Unit Price
  PAR.ED_Product_Unit_Price = DB1.Unit_Price;

  // PAR.ED Producet Extended Amt = DB1.Extended Amount
  PAR.ED_Producet_Extended_Amt = DB1.Extended_Amount;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?4/30/03 changed Item Str Class validation from 420 to 755-use group insted
  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF PAR.Warehouse Type is Fresh
  IF PAR.Warehouse_Type = 'FR';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  //?do for all plants 2/6/17            R9126
  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  // PAR.ED Product Pkg Type = CON.Boxes
  PAR.ED_Product_Pkg_Type = 'Boxes';

  //? Load default MAX qty and weight if  NOT shipped
  CASE;

  // IF LCL.Status Flag 14 Y/N is Yes
  IF LCL.Status_Flag_14_Y_N = 'Y';

  // AND PAR.ED Export Document Type is Application for Export
  AND PAR.ED_Export_Document_Type = 'A';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  //?S14759 DN 04/08/19-Externalize Combos Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14759 DN 04/08/19-Externalize Box Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  CASE;

  // IF DB1.Weight Shipped Total is Greater than zero
  IF DB1.Weight_Shipped_Total > *ZERO;

  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(PAR.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Misc Tare Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Shipped Total *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Shipped_Total;

  //?Misc Tare Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Scheduled *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Scheduled;

  ENDIF;

  //?Find Box weight for the Item and Subtract for final tare weight
  // PAR.Unit Weight = CON.*ZERO
  PAR.Unit_Weight = *ZERO;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Shipped Total NE WRK.ZERO
  IF DB1.Weight_Shipped_Total <> WRK.ZERO;

  //?S00714 get from manifest dtl.. calc as a back up
  EXECUTE FUNCTION(RTV Sum Gross Wt      RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1927373;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Gross_Weight_USR_9_1);
  {
   //?USER: Initialize routine

   //?RMC 3/17/09  new for exp docs
   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Manifest Gross Weight
   PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Manifest_Gross_Weight;

  }

  CASE;

  // IF PAR.Gross Weight USR 9.1 is not entered
  IF PAR.Gross_Weight_USR_9_1 = *ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Shipped Total * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Shipped_Total * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Scheduled NE WRK.ZERO
  IF DB1.Weight_Scheduled <> WRK.ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Scheduled * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Scheduled * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.ED Product Net Weight lbs
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.ED_Product_Net_Weight_lbs;

  ENDIF;

  //?***  ACCUM PACKAGES AND WEIGHT HERE - SO IT GETS THE DEFAULT MAX
  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.ED Product Nbr of Pkgs
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.ED_Product_Nbr_of_Pkgs;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // PAR.ED Total Net Weight lbs = PAR.ED Total Net Weight lbs + PAR.ED Product Net Weight lbs
  PAR.ED_Total_Net_Weight_lbs = PAR.ED_Total_Net_Weight_lbs
  + PAR.ED_Product_Net_Weight_lbs;

  //?***
  //?Date of Slaughter from processing date
  DO;

  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  // PAR.ED Date of Slaughter Dtl = LCL.Text USR 40
  PAR.ED_Date_of_Slaughter_Dtl = LCL.Text_USR_40;

  //?new for AUS form 9115-2
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // PAR.ED Slaughter Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Slaughter_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Slaughter Date Range = WRK.Date From Alpha       USR
  PAR.ED_Slaughter_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?Date of Production from processing date   RMC 5/3/6 added for russia
  DO;

  //?RMC OMS026 update prod date range for russian 9450
  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('N');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  //?new for RUS form 9450-3
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Production Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Production_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Production Date Range = WRK.Date From Alpha       USR
  PAR.ED_Production_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?12/27/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 06/22/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?06/22/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER('N');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(PAR.ED_Slaughter_Date_Range);
  PARAMETER(PAR.ED_Production_Date_Range);
  PARAMETER(LCL.ED_Product_UID);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(LCL.ED_Unused_Status_1);
  PARAMETER(LCL.ED_Unused_Status_2);
  PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
  PARAMETER(LCL.ED_Nbr_of_Packing_Units);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   //?USER: Processing after Data update

   // Call program Rtv/Chg Hdr Shpd Amts XF.
   CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Crt Dflt f/JCOrdrs2RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC2236939;
PARAMETER(960);
PARAMETER('KOR');
PARAMETER(2607806);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.USR Blank Field = CND.Blank
 LCL.USR_Blank_Field = *BLANK;

 //?DO2642 DN 11/15/22-Initialize.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // LCL.ED Live with PHIS = DB1.ED Live with PHIS
 LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

 ENDIF;

 //?12/27/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND NOT DB1.ED Xlate Desc to Country is Not Selected
 AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

 // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
 PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

 ENDIF;

 EXECUTE FUNCTION(Val Exp Doc Ordr Exsts RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1528806;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PGM.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?***Create the Exp Doc Order Dtl Records if HDR Exist.***
 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.Bill_to_Customer);
 PARAMETER(WRK.Bill_to_Name);
 PARAMETER(WRK.Bill_to_Address_Line_1);
 PARAMETER(WRK.Bill_to_Address_Line_2);
 PARAMETER(WRK.Bill_to_Address_Line_3);
 PARAMETER(WRK.Bill_to_City);
 PARAMETER(WRK.Bill_to_State_Code);
 PARAMETER(WRK.Bill_to_Zip_Postal_Code);
 PARAMETER(NLL.Customer_Purchase_Order_#);
 PARAMETER(WRK.Order_Date);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(WRK.Actual_Shipped_Date);
 PARAMETER(WRK.Cancel_Date);
 PARAMETER(WRK.Terms_Code);
 PARAMETER(WRK.Special_Instructions);
 PARAMETER(WRK.Special_Instructions_2);
 PARAMETER(WRK.Carrier_Code);
 PARAMETER(WRK.Comment_Print_Acknowledge);
 PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
 PARAMETER(WRK.Comment_Print_Pick_Slip);
 PARAMETER(WRK.Comment_Print_Ship_Doc);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(WRK.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(WRK.Order_Type_Print_Status);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.User_Original_Entry);
 PARAMETER(WRK.Date_of_Original_Entry);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(WRK.Credit_Hold);
 PARAMETER(WRK.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(WRK.Accounts_Receiv_Ent_1);
 PARAMETER(WRK.Accounts_Receiv_Ent_2);
 PARAMETER(WRK.Load_ID);
 PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.LTL_Flag);
 PARAMETER(WRK.Price_Audit);
 PARAMETER(WRK.Price_Status);
 PARAMETER(WRK.Shipping_Method);
 PARAMETER(WRK.Export_Status);
 PARAMETER(WRK.Palletize);
 PARAMETER(WRK.Shrink_Wrap);
 PARAMETER(WRK.Slip_Sheet);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Attach_to_Invoice_Number);
 PARAMETER(WRK.Load_Plan_Order);
 PARAMETER(WRK.Print_Pick_Slip);
 PARAMETER(WRK.Resell_Reference_Number);
 PARAMETER(WRK.Special_Comment_1);
 PARAMETER(WRK.Special_Comment_2);
 PARAMETER(WRK.Affect_Auto_Accruals);
 PARAMETER(WRK.Sales_Route_Code);
 PARAMETER(WRK.Manager_Level_Code);
 PARAMETER(WRK.VP_Level_Code);
 PARAMETER(WRK.Attach_to_Order_Number);
 PARAMETER(WRK.Reason_for_Price_Audit);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER(WRK.Invoice_Suffix);
 PARAMETER(WRK.Invoice_Date);
 PARAMETER(WRK.Event_Code);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(WRK.Billing_Activity_Type);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(WRK.Order_Certification_Flag);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.ED Consignee Addr 2 = PAR.ED Consignee Addr 2
 LCL.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2;

 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 //?** Format address lines 2 & 3 for printing            E004201
 CASE;

 // IF LCL.ED Consignee Addr 2 is Blank
 IF LCL.ED_Consignee_Addr_2 = *BLANK;

 //?** Put line 3 into line 2
 // LCL.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // LCL.ED Consignee Addr 3 = CND.Blank
 LCL.ED_Consignee_Addr_3 = *BLANK;

 //?** Format address lines 2 & 3 for printing            E004201
 // PAR.ED Customer PO # = PAR.Customer Purchase Order #
 PAR.ED_Customer_PO_# = PAR.Customer_Purchase_Order_#;

 // PAR.ED Total Net Weight lbs = PAR.Order Weight Total
 PAR.ED_Total_Net_Weight_lbs = PAR.Order_Weight_Total;

 //?** Calculate Total Unit Price
 // IF PAR.Order Weight Total is Not equal zero
 IF PAR.Order_Weight_Total <> *ZERO;

 // PAR.ED Total Unit Price = PAR.A/R order Value Total / PAR.Order Weight Total *
 PAR.ED_Total_Unit_Price = PAR.A_R_order_Value_Total / PAR.Order_Weight_Total;

 ENDIF;

 //?Read the Order Detail and calc/output required fields
 // PAR.ED Nbr of Packages = CON.*ZERO
 PAR.ED_Nbr_of_Packages = *ZERO;

 // PAR.ED Invoice Total = CON.*ZERO
 PAR.ED_Invoice_Total = *ZERO;

 //?12/27/18 DN R13944-Pass in ED Xlate Desc to Country.
 //?11/15/22 DN DO2642-Pass in ED Live with PHIS.
 EXECUTE FUNCTION(Rtv/Crt Exp Doc        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1529224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(LCL.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Initialize routine

  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  // PAR.ED Total Net Weight MT = CON.*ZERO
  PAR.ED_Total_Net_Weight_MT = *ZERO;

  // PAR.ED Total Net Weight lbs = CON.*ZERO
  PAR.ED_Total_Net_Weight_lbs = *ZERO;

  // PAR.Gross Weight USR 9.1 = CON.*ZERO
  PAR.Gross_Weight_USR_9_1 = *ZERO;

  //?Print max std qty and weight if not shipped, and comp value=Y
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Print max std qty and weight if not shipped, and comp value=Y
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('EXPPRTOQT');
  PARAMETER(LCL.Status_Flag_13_Y_N);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Status Flag 13 Y/N is Yes
  IF LCL.Status_Flag_13_Y_N = 'Y';

  // LCL.Status Flag 14 Y/N = CND.Yes
  LCL.Status_Flag_14_Y_N = 'Y';

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  //?DN 03/18/22 DO2416-Added Country Codes ISO 3 Standard.
  //?Create Detail if required for the document.
  CASE;

  // IF PAR.ED Export Document Type is Health Certificate 9060-5
  IF PAR.ED_Export_Document_Type = 'H';

  // OR PAR.ED Export Document Type is Customs Invoice
  OR PAR.ED_Export_Document_Type = 'C';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // OR DB1.Country Code is Hong Kong
  OR DB1.Country_Code = 'HKG';

  // OR DB1.Country Code is Taiwan
  OR DB1.Country_Code = 'TAI';

  // OR DB1.Country Code is Australia
  OR DB1.Country_Code = 'AUS';

  // OR DB1.Country Code is Honduras
  OR DB1.Country_Code = 'HON';

  // OR DB1.Country Code is Romania
  OR DB1.Country_Code = 'ROM';

  // OR DB1.Country Code is Russia
  OR DB1.Country_Code = 'RUS';

  // OR PAR.ED Export Document Type is Customs Invoice-Willson
  OR PAR.ED_Export_Document_Type = 'W';

  // OR PAR.ED Export Document Type is Form 9060-7 (Casings)
  OR PAR.ED_Export_Document_Type = 'G';

  // OR DB1.Country Code is Chile
  OR ( DB1.Country_Code = 'CHI';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  // OR PAR.ED Export Document Type is Application for Export
  OR PAR.ED_Export_Document_Type = 'A';

  // OR DB1.Country Code is Taiwan - ISO 3
  OR DB1.Country_Code = 'TWN';

  // OR DB1.Country Code is Honduras - ISO 3
  OR DB1.Country_Code = 'HND';

  // OR DB1.Country Code is Romania - ISO 3
  OR DB1.Country_Code = 'ROU';

  // OR DB1.Country Code is Chile - ISO 3
  OR ( DB1.Country_Code = 'CHL';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 06/22/22-Commented Out Old Method of Item Label Formatting.
  //?DO2642 DN 06/22/22-New Method of Item Label Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  // PAR.ED Product Pkg Type = CON.BOXES
  PAR.ED_Product_Pkg_Type = 'BOXES';

  // PAR.ED Product Net Weight lbs = DB1.Weight Shipped Total
  PAR.ED_Product_Net_Weight_lbs = DB1.Weight_Shipped_Total;

  // PAR.ED Product Net Weight MT = DB1.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = DB1.Weight_Shipped_Total / 2204.6;

  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Product Nbr of Pkgs = DB1.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = DB1.Quantity_Shipped_Total;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + DB1.Quantity Shipped Total
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + DB1.Quantity_Shipped_Total;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = DB1.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = DB1.Unit Price
  PAR.ED_Product_Unit_Price = DB1.Unit_Price;

  // PAR.ED Producet Extended Amt = DB1.Extended Amount
  PAR.ED_Producet_Extended_Amt = DB1.Extended_Amount;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?4/30/03 changed Item Str Class validation from 420 to 755-use group insted
  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF PAR.Warehouse Type is Fresh
  IF PAR.Warehouse_Type = 'FR';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  //?do for all plants 2/6/17            R9126
  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  // PAR.ED Product Pkg Type = CON.Boxes
  PAR.ED_Product_Pkg_Type = 'Boxes';

  //? Load default MAX qty and weight if  NOT shipped
  CASE;

  // IF LCL.Status Flag 14 Y/N is Yes
  IF LCL.Status_Flag_14_Y_N = 'Y';

  // AND PAR.ED Export Document Type is Application for Export
  AND PAR.ED_Export_Document_Type = 'A';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  //?S14759 DN 04/08/19-Externalize Combos Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14759 DN 04/08/19-Externalize Box Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  CASE;

  // IF DB1.Weight Shipped Total is Greater than zero
  IF DB1.Weight_Shipped_Total > *ZERO;

  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(PAR.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Misc Tare Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Shipped Total *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Shipped_Total;

  //?Misc Tare Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Scheduled *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Scheduled;

  ENDIF;

  //?Find Box weight for the Item and Subtract for final tare weight
  // PAR.Unit Weight = CON.*ZERO
  PAR.Unit_Weight = *ZERO;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Shipped Total NE WRK.ZERO
  IF DB1.Weight_Shipped_Total <> WRK.ZERO;

  //?S00714 get from manifest dtl.. calc as a back up
  EXECUTE FUNCTION(RTV Sum Gross Wt      RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1927373;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Gross_Weight_USR_9_1);
  {
   //?USER: Initialize routine

   //?RMC 3/17/09  new for exp docs
   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Manifest Gross Weight
   PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Manifest_Gross_Weight;

  }

  CASE;

  // IF PAR.Gross Weight USR 9.1 is not entered
  IF PAR.Gross_Weight_USR_9_1 = *ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Shipped Total * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Shipped_Total * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Scheduled NE WRK.ZERO
  IF DB1.Weight_Scheduled <> WRK.ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Scheduled * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Scheduled * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.ED Product Net Weight lbs
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.ED_Product_Net_Weight_lbs;

  ENDIF;

  //?***  ACCUM PACKAGES AND WEIGHT HERE - SO IT GETS THE DEFAULT MAX
  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.ED Product Nbr of Pkgs
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.ED_Product_Nbr_of_Pkgs;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // PAR.ED Total Net Weight lbs = PAR.ED Total Net Weight lbs + PAR.ED Product Net Weight lbs
  PAR.ED_Total_Net_Weight_lbs = PAR.ED_Total_Net_Weight_lbs
  + PAR.ED_Product_Net_Weight_lbs;

  //?***
  //?Date of Slaughter from processing date
  DO;

  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  // PAR.ED Date of Slaughter Dtl = LCL.Text USR 40
  PAR.ED_Date_of_Slaughter_Dtl = LCL.Text_USR_40;

  //?new for AUS form 9115-2
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // PAR.ED Slaughter Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Slaughter_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Slaughter Date Range = WRK.Date From Alpha       USR
  PAR.ED_Slaughter_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?Date of Production from processing date   RMC 5/3/6 added for russia
  DO;

  //?RMC OMS026 update prod date range for russian 9450
  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('N');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  //?new for RUS form 9450-3
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Production Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Production_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Production Date Range = WRK.Date From Alpha       USR
  PAR.ED_Production_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?12/27/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 06/22/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?06/22/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER('N');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(PAR.ED_Slaughter_Date_Range);
  PARAMETER(PAR.ED_Production_Date_Range);
  PARAMETER(LCL.ED_Product_UID);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(LCL.ED_Unused_Status_1);
  PARAMETER(LCL.ED_Unused_Status_2);
  PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
  PARAMETER(LCL.ED_Nbr_of_Packing_Units);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   //?USER: Processing after Data update

   // Call program Rtv/Chg Hdr Shpd Amts XF.
   CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


