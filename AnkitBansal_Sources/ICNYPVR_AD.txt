// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICNYPVR
// ?Date: 14.08.2025 Time: 03:26:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

//?Load company if not blank
CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

ENDIF;

//?Load warehouse if not blank
CASE;

// IF DTL.Warehouse Code is Warehouse Code Blank
IF DTL.Warehouse_Code = *BLANK;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// DTL.From Date = JOB.*Job date
DTL.USR_From_Date = JOB.*Job_date;

//?USER: Validate fields

//?Select company and warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Accounting Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Invalid company entered
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Invalid company entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number &1 not found'
ERROR(USR2008);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Validate warehouse if entered
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Validate cycle count code
CASE;

// IF DTL.Cycle Count Code - IB is Entered
IF DTL.Cycle_Count_Code_IB <> *BLANK;

EXECUTE FUNCTION(VAL Cycle Code         RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1353591;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Cycle_Count_Code_IB);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 //?Check for entered warehouse, validate cycle code
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code not Blank
 IF PAR.Warehouse_Code <> *BLANK;

 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 // AND PAR.Cycle Count Code - IB EQ DB1.Cycle Count Code - IB
 AND PAR.Cycle_Count_Code_IB = DB1.Cycle_Count_Code_IB;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 ENDIF;

 //?Check for entered warehouse, validate cycle code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Cycle Count Code - IB EQ DB1.Cycle Count Code - IB
 IF PAR.Cycle_Count_Code_IB = DB1.Cycle_Count_Code_IB;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Display error msg, cycle count code is invalid.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Display error msg, cycle count code is invalid.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cycle count code is invalid.'
ERROR(USR2129);
MSGPARM(DTL.Cycle_Count_Code_IB);

ENDIF;

EXECUTE FUNCTION(Val Co/Whse/Code/Date  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC1349236;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.Cycle_Count_Code_IB);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Display error msg that co/whse/cycle/date have been used
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Company, warehouse, cycle code and date have already been used.'
ERROR(USR2108);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Cycle_Count_Code_IB);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//? Determine if physical start has already begun for selections
EXECUTE FUNCTION(Val Physical Start     RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152137;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Cycle_Count_Code_IB);
PARAMETER(PAR.Physical_Count_Status);
{
 //?USER: Initialize routine

 // PAR.Physical Count Status = CND.Physical not in effect
 PAR.Physical_Count_Status = *BLANK;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?  Validate Company match
 CASE;

 // IF PAR.Accounting Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF DB1.Accounting Company Number NE PAR.Accounting Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 QUIT;

 ENDIF;

 ENDIF;

 //?  Validate Warehouse code
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code not Blank
 IF PAR.Warehouse_Code <> *BLANK;

 CASE;

 // IF DB1.Warehouse Code NE PAR.Warehouse Code
 IF DB1.Warehouse_Code <> PAR.Warehouse_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF PAR.Accounting Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 //?  Validate Cycle Count match
 CASE;

 // IF PAR.Cycle Count Code - IB is Entered
 IF PAR.Cycle_Count_Code_IB <> *BLANK;

 CASE;

 // IF DB1.Cycle Count Code - IB NE PAR.Cycle Count Code - IB
 IF DB1.Cycle_Count_Code_IB <> PAR.Cycle_Count_Code_IB;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF PAR.Accounting Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code not Blank
 IF PAR.Warehouse_Code <> *BLANK;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(Val Physical Startup   RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1152136;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Physical_Count_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Physical Start Date is entered
  IF DB1.Physical_Start_Date <> *ZERO;

  // PAR.Physical Count Status = CND.Physical in progress
  PAR.Physical_Count_Status = 'P';

  QUIT;

  // IF DB1.Physical Count Status is Physical in progress
  IF DB1.Physical_Count_Status = 'P';

  // PAR.Physical Count Status = CND.Physical in progress
  PAR.Physical_Count_Status = 'P';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.Physical Count Status is Physical in progress
 IF PAR.Physical_Count_Status = 'P';

 QUIT;

 ENDIF;

 ENDIF;

}


//?Display error msg if physical count already started
CASE;

// IF PAR.Physical Count Status is Physical in progress
IF PAR.Physical_Count_Status = 'P';

// Send error message - 'Physical Count has already begun for Co. &1, Whse &2, Cycle Count &3'
ERROR(USR0909);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Cycle_Count_Code_IB);

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Crt Physical Count     CR) TYPE(CRTOBJ) FILE(OMHCCPP)          AC1217193;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.Cycle_Count_Code_IB);
PARAMETER('O');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//? Update all Item Balance Detail records with Physical count date
//? and save start qty on hand
// Send status message - 'Item Balance Detail records being updated with Physical Count Start Date'
MESSAGE(USR0910 *STATUS);

EXECUTE FUNCTION(Upd Physical Start Dt  RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1152141;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Cycle_Count_Code_IB);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Process Data record

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(Upd Phys. Start Dt/Qty RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1152144;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_From_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Phys. Start Qty.   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1152145;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER('P');
  PARAMETER(DB1.Quantity_on_Hand_Weight);
  PARAMETER(DB1.Quantity_on_Hand_UOM1);
  PARAMETER(DB1.Quantity_on_Hand_UOM2);
  PARAMETER(DB1.Quantity_on_Hand_UOM3);
  PARAMETER(PAR.USR_From_Date);
  {
   //?USER: Processing before Data update

   // DB1.Physical Count Weight = CON.*ZERO
   DB1.Physical_Count_Weight = *ZERO;

   // DB1.Physical Count Qty - U/M1 = CON.*ZERO
   DB1.Physical_Count_Qty_UOM1 = *ZERO;

   // DB1.Physical Count Qty - U/M2 = CON.*ZERO
   DB1.Physical_Count_Qty_UOM2 = *ZERO;

   // DB1.Physical Count Qty - U/M3 = CON.*ZERO
   DB1.Physical_Count_Qty_UOM3 = *ZERO;

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


// Send information message - 'Physical start for Company &1, Warehouse &2, Cycle &3 completed succe
MESSAGE(USR0924 *INFO);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Cycle_Count_Code_IB);

