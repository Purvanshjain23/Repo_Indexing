// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMSTXFR
// ?Date: 14.08.2025 Time: 03:44:00
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC E00458 07/29/09
//?  Include these adjustment types in the "RR" production bucket:
//?  type "A" "A " Reason= "ADD" (I03 in carlisle), "SAD" (I04 in Carlisle)
//?  See more explanation in lower RTV
//?RMC NEW 3/07/08
//?Create workfile for Pkg FG Variance with FG Items RR, A,AP totals
//? for the Date Range specified.
//?(when the print runs, read this file instead of reading the item
//? trans dtl multiple times for the same FG item.)
//?PAR.Status - Y or N is yes  :  Accum transactions with a trans
//?  date after the production date only
EXECUTE FUNCTION(RTV Crt WF for FG Var RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1871180;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code NE LCL.Item Code
 IF DB1.Item_Code <> LCL.Item_Code;

 // LCL.Item Code = DB1.Item Code
 LCL.Item_Code = DB1.Item_Code;

 EXECUTE FUNCTION(Rtv Trans qty f/Workf RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1871369;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(LCL.Qty_Produced_USR);
 PARAMETER(LCL.Qty_Prod_Adjusted_1_USR);
 PARAMETER(LCL.Qty_Produced_2_USR);
 PARAMETER(LCL.Qty_Prod_Adjusted_2_USR);
 PARAMETER(PAR.Status_Y_or_N);
 {
  //?USER: Initialize routine

  //?E00458 RMC 7/29/09 Add type "A " & reason ADD/SAD to production accum
  //?  These are from carlisle trans I03 and I04, phantom boxes
  //? Phantom Box is a box that was supposed to be rejected but makes it
  //? into storage and is eventually shipped. When carlisle ships them,
  //? trans types I03 and S01 are sent. If the box hits the production system,
  //? trans types P01 and I04 are sent. The I03 and I04 have opposite signs,
  //? so they cancel each other if both are sent. we want to include
  //?the (I04+I03) as production without overstating production.
  //?____________________________________________
  //?PAR.Status - Y or N = yes :  Accum transactions with a trans
  //?   date after the production date only
  MOVE *ALL (To: PAR From: CON);

  // LCL.Production Date = CON.*ZERO
  LCL.Production_Date = 0;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Production Date GE PAR.Date From             USR
  IF DB1.Production_Date >= PAR.Date_From_USR;

  // AND DB1.Production Date LE PAR.Date To               USR
  AND DB1.Production_Date <= PAR.Date_To_USR;

  //?Production Date Break- create workf record
  CASE;

  // IF DB1.Production Date NE LCL.Production Date
  IF DB1.Production_Date <> LCL.Production_Date;

  CASE;

  // IF LCL.Production Date is entered
  IF LCL.Production_Date <> *ZERO;

  EXECUTE FUNCTION(Crt WF ISC Trans Sum  CR) TYPE(CRTOBJ) FILE(PMALCPP)           AC1814050;
  PARAMETER(LCL.Production_Date);
  PARAMETER(DB1.Company_Number);
  PARAMETER('GP1');
  PARAMETER(LCL.Item_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Qty_Produced_USR);
  PARAMETER(PAR.Qty_Prod_Adjusted_2_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Qty_Prod_Adjusted_1_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Qty_Produced_2_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  ENDIF;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  // PAR.Qty Produced          USR = CON.*ZERO
  PAR.Qty_Produced_USR = *ZERO;

  // PAR.Qty Produced 2        USR = CON.*ZERO
  PAR.Qty_Produced_2_USR = *ZERO;

  // PAR.Qty Prod Adjusted 1 USR = CON.*ZERO
  PAR.Qty_Prod_Adjusted_1_USR = *ZERO;

  // PAR.Qty Prod Adjusted 2 USR = CON.*ZERO
  PAR.Qty_Prod_Adjusted_2_USR = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Status - Y or N is Not Yes
  IF PAR.Status_Y_or_N = *BLANK/'N';

  // OR PAR.Status - Y or N is yes
  OR ( PAR.Status_Y_or_N = 'Y';

  // AND DB1.Transaction Date Code GT PAR.Date To               USR
  AND DB1.Transaction_Date_Code > PAR.Date_To_USR );

  //?Accum RR/AP/A/RR-
  CASE;

  // IF DB1.Inventory Trans. Type is Receipt Production
  IF DB1.Inventory_Trans_Type = 'RR';

  CASE;

  // IF DB1.Transaction Quantity is Greater than zero
  IF DB1.Transaction_Quantity > *ZERO;

  // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction Quantity
  PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?rework are -RR
  // PAR.Qty Produced 2        USR = PAR.Qty Produced 2        USR + DB1.Transaction Quantity
  PAR.Qty_Produced_2_USR = PAR.Qty_Produced_2_USR + DB1.Transaction_Quantity;

  ENDIF;

  //?Accum RR/AP/A/RR-
  // IF DB1.Inventory Trans. Type is Adjustment Physical
  IF DB1.Inventory_Trans_Type = 'AP';

  // PAR.Qty Prod Adjusted 1 USR = PAR.Qty Prod Adjusted 1 USR + DB1.Transaction Quantity
  PAR.Qty_Prod_Adjusted_1_USR = PAR.Qty_Prod_Adjusted_1_USR + DB1.Transaction_Quantity;

  //?Accum RR/AP/A/RR-
  // IF DB1.Inventory Trans. Type is Adjustment Quantity
  IF DB1.Inventory_Trans_Type = 'A';

  CASE;

  // IF DB1.Reason Code is I03: Add
  IF DB1.Reason_Code = 'ADD';

  // OR DB1.Reason Code is I04: Shipping Add
  OR DB1.Reason_Code = 'SAD';

  //?E00458 RMC 7/29/09 Add these to production accum
  // PAR.Qty Produced          USR = PAR.Qty Produced          USR + DB1.Transaction Quantity
  PAR.Qty_Produced_USR = PAR.Qty_Produced_USR + DB1.Transaction_Quantity;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Qty Prod Adjusted 2 USR = PAR.Qty Prod Adjusted 2 USR + DB1.Transaction Quantity
  PAR.Qty_Prod_Adjusted_2_USR = PAR.Qty_Prod_Adjusted_2_USR + DB1.Transaction_Quantity;

  ENDIF;

  ENDIF;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Write last rcd
  CASE;

  // IF PAR.Qty Produced          USR is Entered
  IF PAR.Qty_Produced_USR > 0;

  // OR PAR.Qty Prod Adjusted 1 USR is NE Zero
  OR PAR.Qty_Prod_Adjusted_1_USR <> *ZERO;

  // OR PAR.Qty Produced 2        USR is NE 0
  OR PAR.Qty_Produced_2_USR <> *ZERO;

  // OR PAR.Qty Prod Adjusted 2 USR is NE Zero
  OR PAR.Qty_Prod_Adjusted_2_USR <> *ZERO;

  EXECUTE FUNCTION(Crt WF ISC Trans Sum  CR) TYPE(CRTOBJ) FILE(PMALCPP)           AC1814050;
  PARAMETER(LCL.Production_Date);
  PARAMETER(DB1.Company_Number);
  PARAMETER('GP1');
  PARAMETER(LCL.Item_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Qty_Produced_USR);
  PARAMETER(PAR.Qty_Prod_Adjusted_2_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Qty_Prod_Adjusted_1_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Qty_Produced_2_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  ENDIF;

  QUIT;

  ENDIF;

 }

 ENDIF;

}


