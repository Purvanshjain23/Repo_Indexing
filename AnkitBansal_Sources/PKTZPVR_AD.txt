// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTZPVR
// ?Date: 14.08.2025 Time: 02:52:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

// Compute: Net head
DTL.Net_Head_Usr = ( DTL.TH_Head_Received - DTL.TH_Yard_Deads ) - DTL.TH_Head_Condemned;

// DTL.@Status (Yes/No) = CND.No
DTL.@Status_Yes_No = 'N';

//?Get other kill date for the tattoo
EXECUTE FUNCTION(Rtv Held Over KillDt  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227415;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Kill_Date_Usr);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.TH Kill Date NE PAR.Kill Date 1 Usr
 IF DB1.TH_Kill_Date <> PAR.Kill_Date_1_Usr;

 // PAR.Kill Date Usr = DB1.TH Kill Date
 PAR.Kill_Date_Usr = DB1.TH_Kill_Date;

 QUIT;

 ENDIF;

}


//?USER: User defined action

//?Balance the Tattoo?
CASE;

// IF DTL.@Status (Yes/No) is Yes
IF DTL.@Status_Yes_No = 'Y';

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(*BLANK);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1231627;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 //?S13236 RMC 6/12/18 fixed parms on call to rebalance the FROM date. It
 //?  was passing in DB1. which is from the last day's records. it needs to
 //?  pass in the PAR context previousely retrieved.  and only do it if there
 //? are transfer carcasses
 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 // Net Head Usr
 LCL.Net_Head_Usr = ( DB1.TH_Head_Received - DB1.TH_Yard_Deads ) - DB1.TH_Head_Condemned;

 // LCL.Transfer Carcasses    USR = LCL.Net Head Usr - DB1.TH Head Killed
 LCL.Transfer_Carcasses_USR = LCL.Net_Head_Usr - DB1.TH_Head_Killed;

 // LCL.TH Kill Date = DB1.TH Kill Date
 LCL.TH_Kill_Date = DB1.TH_Kill_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Kill Date Usr = DB1.TH Kill Date
 LCL.Kill_Date_Usr = DB1.TH_Kill_Date;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF LCL.Transfer Carcasses    USR is *Zeros
 IF LCL.Transfer_Carcasses_USR = *ZERO;

 // IF LCL.Transfer Carcasses    USR is GT Zero
 IF LCL.Transfer_Carcasses_USR > *ZERO;

 //?Transfer from the Held Over To Date.
 EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227416;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(LCL.Kill_Date_Usr);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(LCL.Transfer_Carcasses_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Transfer Carcasses    USR is GT Zero
  IF PAR.Transfer_Carcasses_USR > *ZERO;

  //?9/29/2010 slm check for deleted record
  //?do not move the record if this is a deleted record
  CASE;

  // IF DB1.RS Record Status is Flag for Purge
  IF DB1.RS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(DB1.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(DB1.ET_Unused_Sts_2);
  PARAMETER(DB1.ET_Adjust_Add_Source);
  PARAMETER(DB1.ET_Unused_Sts_4);
  PARAMETER(DB1.ET_Unused_Sts_5);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  // PAR.Transfer Carcasses    USR = PAR.Transfer Carcasses    USR - CON.1
  PAR.Transfer_Carcasses_USR = PAR.Transfer_Carcasses_USR - 1;

  ENDIF;

  ENDIF;

 }

 //?RMC - moved here from below
 EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?RMC chg to PAR to pick up orig kill date fields
 // Call program Bal/Val Tattoo        XF.
 CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(*BLANK);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(LCL.Balance_First_Day_USR);

 // IF LCL.Transfer Carcasses    USR is LT Zero
 IF LCL.Transfer_Carcasses_USR < *ZERO;

 //?Transfer from the Held Over From Date.
 // LCL.Transfer Carcasses    USR = LCL.Transfer Carcasses    USR * CON.-1 *
 LCL.Transfer_Carcasses_USR = LCL.Transfer_Carcasses_USR * -1;

 EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227416;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(LCL.Kill_Date_Usr);
 PARAMETER(LCL.Transfer_Carcasses_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Transfer Carcasses    USR is GT Zero
  IF PAR.Transfer_Carcasses_USR > *ZERO;

  //?9/29/2010 slm check for deleted record
  //?do not move the record if this is a deleted record
  CASE;

  // IF DB1.RS Record Status is Flag for Purge
  IF DB1.RS_Record_Status = 'D';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.ET_Scale_Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.ET Scale Sequence Number is Entry Allowed
   IF DB1.ET_Scale_Sequence_Number >= 000001;
   AND DB1.ET_Scale_Sequence_Number <= 699999;

   // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
   PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(WRK.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(DB1.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(DB1.ET_Unused_Sts_2);
  PARAMETER(DB1.ET_Adjust_Add_Source);
  PARAMETER(DB1.ET_Unused_Sts_4);
  PARAMETER(DB1.ET_Unused_Sts_5);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  // PAR.Transfer Carcasses    USR = PAR.Transfer Carcasses    USR - CON.1
  PAR.Transfer_Carcasses_USR = PAR.Transfer_Carcasses_USR - 1;

  ENDIF;

  ENDIF;

 }

 //?RMC - moved here from below
 EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(PAR.TH_Bal_to_Kill_Gen);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?RMC chg to PAR to pick up orig kill date fields
 // Call program Bal/Val Tattoo        XF.
 CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Kill_Date);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(PAR.TH_Group_Reference);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Live_Gross_Amt);
 PARAMETER(PAR.TH_LIve_Net_Amt);
 PARAMETER(PAR.TH_Resale_UOM);
 PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(PAR.TH_Pricing_Date);
 PARAMETER(PAR.TH_Resale_Spread_Sts);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Head_Accepted);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Tot_Backfat_Inches);
 PARAMETER(PAR.TH_Tot_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Light_Reflectance);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Std_Yield_Percent);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_Yield_Difference);
 PARAMETER(PAR.TH_Recalc_Live_Wgt);
 PARAMETER(PAR.TH_CM_Market_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Total_Net_WO_Adds);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_AP_Voucher_Document#);
 PARAMETER(PAR.TH_Freight_Amount);
 PARAMETER(PAR.TH_Accrual_Amount);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 PARAMETER(*BLANK);
 PARAMETER(PAR.TH_Commission_A_P_Voucher);
 PARAMETER(PAR.TH_Voucher_Payment_Date);
 PARAMETER(PAR.TH_User_Error_Override);
 PARAMETER(PAR.TH_Held_Over_Record);
 PARAMETER(PAR.TH_Sex);
 PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
 PARAMETER(PAR.TH_Commission_Paid_Date);
 PARAMETER(PAR.TH_Actual_Check_Date);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Kill_Product_Value);
 PARAMETER(PAR.TH_Cut_Product_Value);
 PARAMETER(PAR.TH_Render_Product_Value);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Source_Type);
 PARAMETER(PAR.TH_Scale_Ticket_Sts);
 PARAMETER(PAR.TH_Payment_Type);
 PARAMETER(PAR.TH_HPS_Movement_Ref_#);
 PARAMETER(PAR.TH_Source_Code);
 PARAMETER(PAR.TH_Hog_Class_Type);
 PARAMETER(PAR.TH_Posted_to_HPS_Flag);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(PAR.TH_Shift_Held_Over);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(PAR.THP_Process_Code);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(LCL.Balance_First_Day_USR);

 ENDIF;

 //?Balance Held From Date.
 //?RMC chg to PAR to pick up orig kill date fields - and moved up
 //?     to run only if a transfer is necessary     6/11/18
}


EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

//?Rebalance First Day w/Request by User Balance = Yes
CASE;

// IF LCL.Balance First Day USR is Yes
IF LCL.Balance_First_Day_USR = 'Y';

EXECUTE FUNCTION(Rtv Balance Info      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240551;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.TH PHA Add Type is Historical Avg Balanced
IF LCL.TH_PHA_Add_Type = 'B'/'E';

// LCL.Bal w/History = CND.Prior Week History
LCL.Bal_w_History = 'P';

EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(LCL.PH_Summary_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Adjusted_Yield);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.PH_GA_Lean_Prm_Carc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(LCL.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Bal w/History = CND.*None
LCL.Bal_w_History = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER(LCL.TH_Live_Purchase_UOM);
PARAMETER(LCL.TH_Live_Purchase_Price);
PARAMETER(LCL.TH_Live_Gross_Amt);
PARAMETER(LCL.TH_LIve_Net_Amt);
PARAMETER(LCL.TH_Resale_UOM);
PARAMETER(LCL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(LCL.TH_Pricing_Date);
PARAMETER(LCL.TH_Resale_Spread_Sts);
PARAMETER(LCL.TH_Dead_On_Arrival);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(LCL.TH_Head_Condemned);
PARAMETER(LCL.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(LCL.TH_Head_Accepted);
PARAMETER(LCL.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Tot_Loin_Eye_Depth);
PARAMETER(LCL.TH_Tot_Backfat_Inches);
PARAMETER(LCL.TH_Tot_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Light_Reflectance);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Std_Yield_Percent);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_Yield_Difference);
PARAMETER(LCL.TH_Recalc_Live_Wgt);
PARAMETER(LCL.TH_CM_Market_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Total_Net_WO_Adds);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(LCL.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_AP_Voucher_Document#);
PARAMETER(LCL.TH_Freight_Amount);
PARAMETER(LCL.TH_Accrual_Amount);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.TH_Bal_to_Kill_Gen);
PARAMETER(LCL.TH_Commission_A_P_Voucher);
PARAMETER(LCL.TH_Voucher_Payment_Date);
PARAMETER(LCL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(LCL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(LCL.TH_Commission_Paid_Date);
PARAMETER(LCL.TH_Actual_Check_Date);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Kill_Product_Value);
PARAMETER(LCL.TH_Cut_Product_Value);
PARAMETER(LCL.TH_Render_Product_Value);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Source_Type);
PARAMETER(LCL.TH_Scale_Ticket_Sts);
PARAMETER(LCL.TH_Payment_Type);
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.TH_Source_Code);
PARAMETER(LCL.TH_Hog_Class_Type);
PARAMETER(LCL.TH_Posted_to_HPS_Flag);
PARAMETER(LCL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TH_Shift_Held_Over);
PARAMETER(LCL.DF_Defect_Code);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(LCL.PD_Producer_Code);
PARAMETER(LCL.PL_Location_Code);
PARAMETER(LCL.HB_Buyer_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(LCL.HC_Class_Code);
PARAMETER(LCL.RS_User_Changed);
PARAMETER(LCL.RS_Date_Changed);
PARAMETER(LCL.RS_Time_Changed);
PARAMETER(LCL.RS_Record_Status);
PARAMETER(LCL.RS_Job);
PARAMETER(LCL.RS_Program);
PARAMETER(LCL.RS_User_Added);
PARAMETER(LCL.RS_Date_Added);
PARAMETER(LCL.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('Y');
PARAMETER(LCL.Bal_w_History);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(LCL.PH_GA_Adjusted_Yield);
PARAMETER(LCL.PH_GA_Avg_Lean);
PARAMETER(LCL.PH_GA_Avg_Backfat);
PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
PARAMETER(LCL.PH_GA_Avg_Light_Ref);
PARAMETER(LCL.PH_GA_Lean_Prm_Carc_CWT);
PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

ENDIF;

ENDIF;

