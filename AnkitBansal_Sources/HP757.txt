      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP757
      * TITLE:       VIEW DEATHS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     05/30/95
      *
      * FUNCTION: THIS VIEW PROGRAM DISPLAYS THE DEATHS FOR A FARM.
      *           IT IS CALLED FROM HP450-WORK WITH FARMS.
      *
      *           POSITIONERS:   DEAD DATE
      *           SELECTORS:     MOVEMENT NUMBER
      *                          BUILDING
      *                          ROOM
      *                          HOG GROUP
      *                          DESTROY FLAG
      *                          DEATH REASON CODE
      *
      *           IT HAS F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/01/95  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELD 'GROUP TYPE' ADDED TO
      *           HOG GROUP FILE.
      *
      * 06/03/97  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELDS 'PURGE FLAG' AND 'DATE OF
      *           FIRST PURGE' ADDED TO HOG GROUP FILE.
      *
      * 10/28/99  LEANNE FEDOR
      *           Added buiding/room to subfile.  Removed death reason description.
      *
      * 06/26/01  LeAnne Fedor
      *           Recompile only.
      *           Manager and supervisor fields removed from Hog Group file.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD757    CF   E             WORKSTN SFILE(HP757S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
      *
     FHSJ068A   IF   E           K DISK    INFDS(DBFEED)
      *  KILLED/DEAD HOGS + HOG GROUP
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D VIEW            C                   CONST('VIEW  ')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP757K1
     C                   WRITE     HP757EC
     C                   EXFMT     HP757C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * SAVE THE VALUE OF THE LOWEST SUBFILE RRN ON THE SCREEN FOR
      * LATER REPOSITIONING THE SUBFILE
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES
      * AND PROGRAM MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * INITIALIZE THE RETURN CODE
      *
     C                   MOVEL     '00'          RTNCD
      *
      * GET USER'S ENTRY, SET THE RETURN CODE ACCORDING TO THE FUNCTION
      * KEY TAKEN BY THE USER, SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
      * REPOSITION THE SUBFILE IF THE USER HAS CHANGED ANY OF THE
      * POSITIONERS OR SELECTORS IN THE CONTROL RECORD.
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C     SVMDY         ORNE      C1MDY
     C     SVBLCD        ORNE      C1BLCD
     C     SVRMCD        ORNE      C1RMCD
     C     SVHGCD        ORNE      C1HGCD
     C     SVDSFL        ORNE      C1DSFL
     C     SVDRCD        ORNE      C1DRCD
     C     SVMSCD        ORNE      C1MSCD
     C     SVMVSN        ORNE      C1MVSN
      *
     C     *IN04         IFEQ      *ON
     C                   EXSR      $F4S1
     C                   ENDIF
      *
      * FLIP THE DATE FROM MMDDYY TO CCYYMMDD FOR KEYING PURPOSES
      *
     C     C1MDY         IFNE      SVMDY                                        If different date
     C                   IF        C1MDY = 0                                    If no date
     C                   Z-ADD     0             WKKDDT
     C                   ELSE
     C                   Z-ADD     C1MDY         PFRM8
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK                                       If valid date
     C                   Z-ADD     PTO8          WKKDDT
     C                   ENDIF                                                  If valid date
     C                   ENDIF                                                  If no date
     C                   ENDIF                                                  If different date
      *
     C                   MOVEL     NO            RESET
     C                   MOVEL     SET1          ROUTNE
     C                   Z-ADD     C1MDY         SVMDY
     C                   MOVEL     C1BLCD        SVBLCD
     C                   MOVEL     C1RMCD        SVRMCD
     C                   MOVEL     C1HGCD        SVHGCD
     C                   MOVEL     C1DSFL        SVDSFL
     C                   MOVEL     C1DRCD        SVDRCD
     C                   MOVEL     C1MSCD        SVMSCD
     C                   Z-ADD     C1MVSN        SVMVSN
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER. (NOTE: WE TYPICALLY EXIT
      * FROM A 'VIEW' PROGRAM WHEN THE USER PRESSES ENTER. BUT,
      * IN THIS VIEW THERE ARE SELECTORS. SO, LEAVE THE USER ON
      * THE SCREEN SO THAT HE CAN ENTER SELECTORS.)
      *
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * CLEAR THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP757S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP757C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * REFRESH/FILL THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * POSITION ON FARM SITE AND DEAD DATE
      *
     C     C1MDY         IFEQ      0
     C     C1FSCD        SETLL     HSJ068A
     C                   ELSE
     C     K1L068        SETLL     HSJ068A
     C                   ENDIF
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS.
      * THE NUMBER WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      *
     C                   Z-ADD     0             COUNT
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
     C     C1FSCD        READE     HSJ068A                                82
     C     *IN82         IFEQ      *OFF                                         IF READ
      *
      *   ONLY INCLUDE RECORDS THAT MATCH THE USER'S SELECTORS
      *
     C     C1BLCD        IFNE      *BLANK                                        IF BUILDING
     C     C1BLCD        ANDNE     HGBLCD
     C                   ELSE
      *
     C     C1RMCD        IFNE      *BLANK                                        IF ROOM
     C     C1RMCD        ANDNE     HGRMCD
     C                   ELSE
      *
     C     C1HGCD        IFNE      *BLANK                                        IF GROUP
     C     C1HGCD        ANDNE     HGHGCD
     C                   ELSE
      *
     C     C1DSFL        IFNE      *BLANK                                        IF DESTROY
     C     C1DSFL        ANDNE     KDDSFL
     C                   ELSE
      *
     C     C1DRCD        IFNE      *BLANK                                        IF REASON
     C     C1DRCD        ANDNE     KDDRCD
     C                   ELSE
      *
     C     C1MSCD        IFNE      *BLANK                                        IF STATUS
     C     C1MSCD        ANDNE     KDMSCD
     C                   ELSE
      *
     C     C1MVSN        IFNE      0                                             IF MOVEMENT
     C     C1MVSN        ANDNE     KDMVSN
     C                   ELSE
      *
     C                   MOVEL     HGHGCD        DFHGCD
     C                   MOVEL     HGBLCD        DFBLCD
     C                   MOVEL     HGRMCD        DFRMCD
     C                   Z-ADD     KDKDHD        DFKDHD
     C                   Z-ADD     KDKDLB        DFKDLB
     C                   MOVEL     KDDSFL        DFDSFL
     C                   MOVEL     KDDRCD        DFDRCD
     C                   MOVEL     KDMSCD        DFMSCD
     C                   Z-ADD     KDMVSN        DFMVSN
      *
      * FLIP DEAD DATE TO MMDDYY
      *
     C                   Z-ADD     KDKDDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFMDY
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   WRITE     HP757S1
     C                   SETON                                        81
      *
      * FOR POSITIONING, PLACE THE SUBFILE RELATIVE RECORD NUMBER INTO
      * THE SFLRCDNBR FIELD (HDPAG1)
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDIF                                                  IF MOVEMENT
     C                   ENDIF                                                  IF STATUS
     C                   ENDIF                                                  IF REASON
     C                   ENDIF                                                  IF DESTROY
     C                   ENDIF                                                  IF GROUP
     C                   ENDIF                                                  IF ROOM
     C                   ENDIF                                                  IF BUILDING
     C                   ENDIF                                                  IF READ
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD MESSAGE 'NO DATA TO DISPLAY'.
      *
     C     HDRRN1        IFEQ      0
     C                   MOVEL     YES           NORECS
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ELSE
     C                   MOVEL     NO            NORECS
     C                   ENDIF
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * MANIPULATE DATES WITH DATE UTILITY
      *----------------------------------------------------------------
      *
     C     $DATE         BEGSR
      *
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'MDY '        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * FLIP DATE TO MMDDYY
      *----------------------------------------------------------------
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * F4 PROMPT ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
      * BUILDING
     C                   SELECT
     C                   when      FLD = 'C1BLCD'
     C                   CALL      'HP523'
     C                   PARM                    c1fscd
     C                   PARM      *blank        XXBLCD
     C                   PARM      *blank        XXBLDS
     C                   eval      *in55 = *on
     C                   if        XXBLCD <> *blank
     C                   movel     XXBLCD        C1BLCD
     C                   endif
      *
      * ROOM
     C                   when      FLD = 'C1RMCD'
     C                   CALL      'HP5008'
     C                   PARM                    c1fscd
     C                   PARM      c1blcd        XXBLCD
     C                   PARM      *blank        XXRMCD
     C                   eval      *in56 = *on
     C                   if        XXRMCD <> *blank
     C                   movel     XXRMCD        C1RMCD
     C                   endif
      *
      *
      * HOG GROUP
      *
     C     FLD           WHENEQ    'C1HGCD'
     C                   CALL      'HP5007'
     C                   PARM                    c1fscd
     C                   PARM                    c1fsnm
     C                   PARM      c1blcd        xxblcd
     C                   PARM      c1rmcd        xxrmcd
     C                   PARM      *blank        XXHGCD
     C                   SETON                                        50
     C     XXHGCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXHGCD        C1HGCD
     C                   ENDIF                                                  IF SELECTED
      *
      * DESTROYED FLAG
      *
     C     FLD           WHENEQ    'C1DSFL'
     C                   CALL      'HP522'
     C                   PARM      *blank        XXDSFL
     C                   SETON                                        51
     C     XXDSFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXDSFL        C1DSFL
     C                   ENDIF                                                  IF SELECTED
      *
      * DEATH REASON
      *
     C     FLD           WHENEQ    'C1DRCD'
     C                   CALL      'HP510'
     C                   PARM      *blank        XXDRCD
     C                   PARM      *blank        XXDRDS
     C                   SETON                                        52
     C     XXDRCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXDRCD        C1DRCD
     C                   ENDIF                                                  IF SELECTED
      *
      * MOVEMENT STATUS
      *
     C     FLD           WHENEQ    'C1MSCD'
     C                   CALL      'HP542'
     C                   parm      'D'           XXMTCD
     C                   parm      *BLANK        XXMSCD
     C                   parm      *BLANK        XXMSDS
     C                   SETON                                        54
     C     XXMSCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXMSCD        C1MSCD
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR                                        013
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZERO         ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    XXFSBO
     C                   PARM                    C1FSCD
     C                   PARM                    C1FSNM
     C                   PARM                    RTNCD
      * KEY LIST
      *
      *
     C     K1L068        KLIST
     C                   KFLD                    C1FSCD
     C                   KFLD                    WKKDDT
      *
      *
      * GLOBAL DEFINES
     C                   MOVE      *BLANK        MODE              6            PARM
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            NORECS            1            NO RECORDS
      *
     C     *LIKE         DEFINE    IDFLOW        WKFLOW
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    HDRRN1        SVRRN1
     C                   Z-ADD     0             COUNT             2 0
      *
      *
      * Parms for calls to other programs
      *
     C     *LIKE         DEFINE    hgfsbo        xxfsbo
     C     *LIKE         DEFINE    HGHGCD        XXHGCD
     C     *LIKE         DEFINE    HGBLCD        XXBLCD
     C                   MOVE      *BLANK        XXBLDS           20
     C     *LIKE         DEFINE    HGRMCD        XXRMCD
     C     *LIKE         DEFINE    KDDSFL        XXDSFL
     C     *LIKE         DEFINE    C1DRCD        XXDRCD
     C                   MOVE      *BLANK        XXDRDS           20
     C     *LIKE         DEFINE    C1MSCD        XXMSCD
     C                   MOVE      *BLANK        XXMSDS           20
     C                   MOVE      *BLANK        XXMTCD            1
      *
      * SAVE FIELDS FOR CONTROLLING REPOSITIONING ON
      * POSITIONERS AND SELECTORS
      *
     C     *LIKE         DEFINE    C1HGCD        SVHGCD
     C     *LIKE         DEFINE    C1BLCD        SVBLCD
     C     *LIKE         DEFINE    C1RMCD        SVRMCD
     C     *LIKE         DEFINE    C1DSFL        SVDSFL
     C     *LIKE         DEFINE    C1DRCD        SVDRCD
     C     *LIKE         DEFINE    C1MDY         SVMDY
     C     *LIKE         DEFINE    C1MVSN        SVMVSN
     C     *LIKE         DEFINE    C1MSCD        SVMSCD
     C     *LIKE         DEFINE    KDKDDT        WKKDDT
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     10            WKPLIN            2 0          SFLPAG(0010)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
