// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDLLPFR
// ?Date: 14.08.2025 Time: 12:04:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?***** Change Log
//?** 02/06/2006 LJB
//?** Print *ALL if PAR company number is zeros
//?*****
//?USER: Record selection processing

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

CASE;

// IF PAR.USR Memo Processing is Credit Memos
IF PAR.USR_Memo_Processing = 'C';

CASE;

// IF WRK.Billing Activity Type is Credit Memo
IF WRK.Billing_Activity_Type = '2';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Memo Processing is Debit Memos
IF PAR.USR_Memo_Processing = 'D';

CASE;

// IF WRK.Billing Activity Type is Debit Memo
IF WRK.Billing_Activity_Type = '3';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF PAR.Order Header Reason is Entered
IF PAR.Order_Header_Reason <> *BLANK;

CASE;

// IF PAR.Order Header Reason EQ DB1.Order Detail Reason
IF PAR.Order_Header_Reason = DB1.Order_Detail_Reason;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// PAR.Warehouse Found = CND.*Blank
PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR Select/Omit Flag is *Entered
IF PAR.USR_Select_Omit_Flag = 'O'/'S';

CASE;

// IF PAR.USR Select/Omit Flag is Omit
IF PAR.USR_Select_Omit_Flag = 'O';

//?Warehouse Selection for ommissions.
CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_1 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_2 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_3 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_4 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_5 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_6 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_7 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_8 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_9 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

// PAR.Warehouse Found = CND.Warehouse Not Found
PAR.Warehouse_Found = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is Warehouse Not Found
IF PAR.Warehouse_Found = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Select/Omit Flag is Select
IF PAR.USR_Select_Omit_Flag = 'S';

//?Warehouse Selection for selections.
CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR Warehouse Code is Warehouse Code not Blank
IF PAR.USR_Warehouse_Code <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_1 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_2 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_3 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_4 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_5 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_6 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_7 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_8 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is *Blank
IF PAR.Warehouse_Found = *BLANK;

CASE;

// IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
IF PAR.USR_CDE_Parm_9 <> *BLANK;

CASE;

// IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

// PAR.Warehouse Found = CND.Warehouse Found
PAR.Warehouse_Found = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Warehouse Found is Warehouse Found
IF PAR.Warehouse_Found = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.Company Number = PAR.Company Number CDE
X1PG_Company_Number = PAR.Company_Number_CDE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Shipped Item Code = PAR.Item Code
X1PG_Shipped_Item_Code = PAR.Item_Code;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(PAR.Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Ship To Customer = PAR.USR Ship To Customer
X1PG_USR_Ship_To_Customer = PAR.USR_Ship_To_Customer;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.USR_Ship_To_Customer);
PARAMETER(X1PG_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(PAR.Order_Header_Reason);
PARAMETER(X1PG_Reason_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Sales Route Code = PAR.Salesperson Code
X1PG_Sales_Route_Code = PAR.Salesperson_Code;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(X1PG_Sales_Route_Code);
PARAMETER(X1PG_Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Description 20 = Condition name of 1PG.USR Memo Processing
X1PG_USR_Description_20 = RTVCND(X1PG_USR_Memo_Processing);

//?** Print *ALL if PAR company number is zeros         2/06/2006 LJB
CASE;

// IF PAR.Company Number CDE is Equal to zero
IF PAR.Company_Number_CDE = *ZERO;

// 1PG.Description = CON.*ALL
X1PG_Description = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// PAR.Print Warehouse       USR = CND.Yes
PAR.Print_Warehouse_USR = 'Y';

// SUPPRESSED PRINT Warehouse Code header format

// SUPPRESSED PRINT Actual Ship Date header format

// SUPPRESSED PRINT Order Detail Reason header format

// SUPPRESSED PRINT Load ID header format

// SUPPRESSED PRINT Shipped Item Code header format

// SUPPRESSED PRINT Attach to Order Number header format

//?PRTOBJ calls before print of detail format

//?Embedded PRTOBJ : PRT Blank Line         PO
EXECUTE FUNCTION(PRT Blank Line         PO) TYPE(PRTOBJ);
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: On print of detail format

CASE;

// IF DB1.Attach to Order Number is Equal to zeros
IF DB1.Attach_to_Order_Number = *ZERO;

// CUR.Extended Amount = CON.*ZERO
CUR.Extended_Amount = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Print Warehouse       USR is No
IF PAR.Print_Warehouse_USR = 'N';

// CUR.Warehouse Code = CON.*BLANK
CUR.Warehouse_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Print Warehouse       USR = CND.No
PAR.Print_Warehouse_USR = 'N';

ENDIF;

EXECUTE FUNCTION(RTV ALL                RT) TYPE(RTVOBJ) FILE(PDMICPP)          AC1517246;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Attach_to_Order_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CUR.Actual_Ship_Date);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CUR.BOL_Complete_Date);
PARAMETER(CUR.BOL_Complete_Time);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CUR.BOL Complete Time,4.0 USR = CUR.BOL Complete Time / CON.100 *
CUR.BOL_Complete_Time4_0_USR = CUR.BOL_Complete_Time / 100;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(CUR.Order_Detail_Reason);
PARAMETER(CUR.Text_18_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Special Comments   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1465129;
PARAMETER(NXT.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.USR Description - 15 = WRK.Special Comment 1
CUR.USR_Description_15 = WRK.Special_Comment_1;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Text_1_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.AR_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?**************************************************************************
//?**  The Claims Amount on the report was being re-
//?**  trieved from the OM History file and written
//?**  to the work file this report is written over.
//?**  the Extended Amount was not always correct.  I
//?**  changed this report to retrieve the Claims Amount
//?**  from the A/R Claims file.  J Tremper 12/22/99
// LCL.Claim Number (Alpha) USR = SUBSTRING(CUR.USR Description - 15,CON.9,CON.7)
LCL.Claim_Number_Alpha_USR = SUBSTRING(CUR.USR_Description_15:9:7);

// LCL.Claim Number = CVTVAR(LCL.Claim Number (Alpha) USR)
LCL.Claim_Number = CVTVAR(LCL.Claim_Number_Alpha_USR);

CASE;

// IF DB1.Order Type - Sales is Credit Memo
IF DB1.Order_Type_Sales = 'CM';

// OR DB1.Order Type - Sales is Credit Memo CB
OR DB1.Order_Type_Sales = 'CB';

EXECUTE FUNCTION(RTV Claim Amounts      RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1569708;
PARAMETER(LCL.Claim_Number);
PARAMETER(CUR.Extended_Amount);
PARAMETER(WRK.Claim_Net_Loss);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF DB1.Order Type - Sales is Debit Memo
IF DB1.Order_Type_Sales = 'DM';

// OR DB1.Order Type - Sales is Debit Memo DB
OR DB1.Order_Type_Sales = 'DB';

EXECUTE FUNCTION(RTV Calc Resale Total  RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1535548;
PARAMETER(LCL.Claim_Number);
PARAMETER(CUR.Extended_Amount);
{
 //?USER: Initialize routine

 // PAR.Resale Total Item Amount = CON.*ZERO
 PAR.Resale_Total_Item_Amount = *ZERO;

 //?USER: Process Data record

 // PAR.Resale Total Item Amount = PAR.Resale Total Item Amount + DB1.Resale Item Amount
 PAR.Resale_Total_Item_Amount = PAR.Resale_Total_Item_Amount + DB1.Resale_Item_Amount;

}


ENDIF;

//?**************************************************************************
ENDIF;

//?USER: Process after print of detail format

NXT.Extended_amount_SUM = SUM(CUR.Extended_Amount);

//?USER: Print required level totals

CASE;

IF NEW Attach_to_Order_Number;
// SUPPRESSED PRINT Attach to Order Number totals format

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

CASE;

IF NEW Shipped_Item_Code;
// SUPPRESSED PRINT Shipped Item Code totals format

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

CASE;

IF NEW Load_ID;
// SUPPRESSED PRINT Load ID totals format

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

CASE;

IF NEW Order_Detail_Reason;
CASE;

// IF CUR.Extended amount       SUM is *Zeroes
IF CUR.Extended_amount_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Order Detail Reason totals format
PRINT Order Detail Reason totals format;

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

CASE;

IF NEW Actual_Ship_Date;
CASE;

// IF CUR.Extended amount       SUM is *Zeroes
IF CUR.Extended_amount_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Actual Ship Date totals format
PRINT Actual Ship Date totals format;

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

CASE;

IF NEW Warehouse_Code;
CASE;

// IF CUR.Extended amount       SUM is *Zeroes
IF CUR.Extended_amount_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Warehouse Code totals format
PRINT Warehouse Code totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

