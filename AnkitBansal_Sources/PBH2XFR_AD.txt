// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBH2XFR
// ?Date: 14.08.2025 Time: 03:48:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** This is a summary of basic logic steps for this procedure
DO;

//?** Export Order Automation Documentation
//?** This function is uploaded from a user spreadsheet via
//?**   a Microsoft product called SSIS
//?**   SSIS upload builds work files for header and detail records
//?**   from Sumi's spreadsheet and populates PNHHCPP WF Export Upload
//?**   Detail and PNHGCPP WF Export Upload Header files.
//?**   Orders are validated and if there are errors the
//?**   Order Requires Review flag is set to Y, and it is cleared in
//?**   Order Entry. Default Header Status is set to Available.
//?**   EDT Post Open Orders 2 XF  is executed when an order is complete.
//?** For Company Code = 360
//?**    Warehouse 1 User = GP1 = Fresh
//?** For Company Code = 960
//?**    Warehouse 1 User = SJ1 = Fresh
//?**
//?** 1.  Retrieve the next order number
//?** 2.  Populate the order header and detail fields
//?** 3.  Create the order header record
//?** 4.  Create the order detail record
//?** 5.  Create the order events record
//?** 6.  Create the Export Documents
//?** 7.  Create the Shipping Instructions
//?** 8.  If SSIS Upload, run the POST process
//?**
ENDDO;

//?***** NOTE: When making changes to this function, consider changing
//?            PMV5XFR function if necessary.
//?** Populate Default Order Header, Detail and Event fields
DO;

// PAR.Company Number = PAR.Company Number Pass   USR
PAR.Company_Number = PAR.Company_Number_Pass_USR;

// PAR.Price Code = PAR.Item Code PASS        USR
PAR.Price_Code = PAR.Item_Code_PASS_USR;

// PAR.Warehouse Code = PAR.Warehouse Code PASS   USR
PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

// PAR.Ship To Customer = PAR.Customer Number Pass  USR
PAR.Ship_To_Customer = PAR.Customer_Number_Pass_USR;

//?** Retrieve next Order Number
EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_Order_Number);
{
 //?USER: Processing before Data update

 //?Assumes Credit memo numbers always automatically assigned
 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.USR Next Order Number = DB1.Next Order Number
 PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

 // DB1.Next Order Number = DB1.Next Order Number + CON.1
 DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Order Number = PAR.Next Order Number
PAR.Order_Number = PAR.Next_Order_Number;

// PAR.Order Number 1  PASS  USR = PAR.Next Order Number
PAR.Order_Number_1_PASS_USR = PAR.Next_Order_Number;

//?** Populate the Ship To Information
EXECUTE FUNCTION(RTV Cust Addr, A/R Cst RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263804;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Bill to Customer = PAR.A/R Customer Number
PAR.Bill_to_Customer = PAR.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Special Instructions passed in, using the Customer Name field  P1251
// PAR.Special Instructions = PAR.Customer Name
PAR.Special_Instructions = PAR.Customer_Name;

// PAR.Load Type = CND.Regular
PAR.Load_Type = 'R';

// PAR.Sales Route Code = CND.not entered
PAR.Sales_Route_Code = *BLANK;

EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.P_O_Required_Flag);
PARAMETER(LCL.Deliver_after_time);
PARAMETER(LCL.Type_Code);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Mileage_To_Customer);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Outside_Warehouse_Flag);
PARAMETER(LCL.Customer_Group_Code);
PARAMETER(LCL.Customer_Group_Code_2);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Shipping Method = CND.Prepaid Truck
PAR.Shipping_Method = 'PT';

// Call program Rtv Cust Shipping Tmp XF.
CALL PROGRAM(Rtv Cust Shipping Tmp XF) ('POPRXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Ship_To_Warehouse);
PARAMETER(NLL.Item_Age_Days_Fresh);
PARAMETER(NLL.Item_Age_Days_Frozen);

// PAR.Scheduled Ship Date = PAR.Date 1          PASS  USR
PAR.Scheduled_Ship_Date = PAR.Date_1_PASS_USR;

// PAR.Requested Ship Date = PAR.Date 2          PASS  USR
PAR.Requested_Ship_Date = PAR.Date_2_PASS_USR;

// PAR.Requested Delivery Date = PAR.From Date Pass        USR
PAR.Requested_Delivery_Date = PAR.From_Date_Pass_USR;

// PAR.Requested Delivery Time = CVTVAR(CON.0800)
PAR.Requested_Delivery_Time = CVTVAR(0800);

// PAR.Header Status = CND.Available
PAR.Header_Status = 'A';

// PAR.Load Plan Order = CND.yes
PAR.Load_Plan_Order = 'Y';

// PAR.OH Load Plan Ready = CND.Blank
PAR.OH_Load_Plan_Ready = *BLANK;

// PAR.Print Pick Slip = CND.yes
PAR.Print_Pick_Slip = 'Y';

// PAR.Affect Auto Accruals = CND.Affect Auto Accruals
PAR.Affect_Auto_Accruals = 'Y';

// PAR.Event Code = CND.02 Load Planned
PAR.Event_Code = '02';

// PAR.Export Status = CND.yes
PAR.Export_Status = 'Y';

// PAR.Export Docs Go w/Driver = CND.No
PAR.Export_Docs_Go_w_Driver = 'N';

// WRK.Export Load USDA-OK = CND.Yes
WRK.Export_Load_USDA_OK = 'Y';

// PAR.Order Date = JOB.*Job date
PAR.Order_Date = JOB.*Job_date;

// PAR.Date of Original Entry = JOB.*Job date
PAR.Date_of_Original_Entry = JOB.*Job_date;

// PAR.Time of Original Entry = JOB.*Job time
PAR.Time_of_Original_Entry = JOB.*Job_time;

// PAR.Order Type - Sales = CND.Regular Order
PAR.Order_Type_Sales = 'OR';

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.LTL Flag = CND.No
PAR.LTL_Flag = 'N';

// PAR.Slip Sheet = CND.no
PAR.Slip_Sheet = 'N';

// PAR.Shrink Wrap = CND.no
PAR.Shrink_Wrap = 'N';

// PAR.Email Cust On Order Ship = CND.No
PAR.Email_Cust_On_Order_Ship = 'N';

// PAR.Commodity Market Code = CON.*BLANK
PAR.Commodity_Market_Code = *BLANK;

// PAR.Terms Code = CON.01
PAR.Terms_Code = 01;

// PAR.Order in Use = CND.no
PAR.Order_in_Use = 'N';

// PAR.Order Type Print Status = CND.no
PAR.Order_Type_Print_Status = 'N';

// PAR.Manager Level Code = CON.VP
PAR.Manager_Level_Code = 'VP';

// PAR.VP Level Code = CON.100
PAR.VP_Level_Code = 100;

// PAR.Price Audit = CND.Needs Price Audit
PAR.Price_Audit = 'N';

// PAR.Block Order Flag = CND.Firm Order
PAR.Block_Order_Flag = 'F';

// PAR.Trans Contol AS400/Plant = CND.Plant
PAR.Trans_Contol_AS400_Plant = 'P';

// PAR.Order Certification Flag = CND.No
PAR.Order_Certification_Flag = 'N';

// PAR.Transfer in Storage Ind = CND.No
PAR.Transfer_in_Storage_Ind = 'N';

// PAR.Price Status = CND.Priced
PAR.Price_Status = 'P';

// PAR.Affect Trade Fund = CND.yes
PAR.Affect_Trade_Fund = 'Y';

// PAR.Affect Pricing = CND.yes
PAR.Affect_Pricing = 'Y';

// PAR.Affect Commission = CND.no
PAR.Affect_Commission = 'N';

// PAR.Price Method Code = CND.Deviated
PAR.Price_Method_Code = 'DEV';

// PAR.Date Method Code = CON.*BLANK
PAR.Date_Method_Code = *BLANK;

// PAR.Market Pricing Date = CON.*ZERO
PAR.Market_Pricing_Date = *ZERO;

// PAR.Item Structure Type Code = CON.*ZERO
PAR.Item_Structure_Type_Code = *ZERO;

// PAR.Item Structure Class Code = CON.*ZERO
PAR.Item_Structure_Class_Code = *ZERO;

// WRK.Catch Weight Status = CND.no
WRK.Catch_Weight_Status = 'N';

// PAR.Detail Line Status = CND.Available
PAR.Detail_Line_Status = 'A';

// PAR.Country Code = CND.Japan
PAR.Country_Code = 'JPN';

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.OH_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


// PAR.Palletize = CND.no
PAR.Palletize = 'N';

//?Per Steve Burke, Transfer Orders should always be palletized. E002271
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// PAR.Palletize = CND.yes
PAR.Palletize = 'Y';

// PAR.OD Pallet Type = CND.#1 Pallet
PAR.OD_Pallet_Type = 01;

ENDIF;

// PAR.OD Price Type = CND.Contract
PAR.OD_Price_Type = 'CON';

// PAR.OD Price Type Ref Num = CVTVAR(PAR.Price Code)
PAR.OD_Price_Type_Ref_Num = CVTVAR(PAR.Price_Code);

// PAR.Order Requires Review = CND.No
PAR.Order_Requires_Review = *BLANK;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

// PAR.User Original Entry = CON.SSISUPLOAD
PAR.User_Original_Entry = 'SSISUPLOAD';

ENDDO;

//?** Build/create the Order Header and Event records
DO;

//?** Create the Order Header Record and Load Order Change Log record
EXECUTE FUNCTION(CRT Order Header       CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1113750;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(*ZERO);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Special_Instructions);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(*BLANK);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(PAR.Order_in_Use);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER('N');
PARAMETER('N');
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(*ZERO);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(*BLANK);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(*ZERO);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(PAR.Print_Pick_Slip);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Manager_Level_Code);
PARAMETER(PAR.VP_Level_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*ZERO);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Order_Certification_Flag);
PARAMETER(*ZERO);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(PAR.Transfer_in_Storage_Ind);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(PAR.Export_Docs_Go_w_Driver);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER('N');
PARAMETER('N');
PARAMETER(PAR.Order_Requires_Review);
PARAMETER(PAR.OH_Load_Plan_Ready);
PARAMETER(WRK.Export_Load_USDA_OK);
PARAMETER(*BLANK);
PARAMETER(PAR.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Time_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Time_of_Original_Entry);

 //?USER: Processing if Data record already exists

 //?** Set flag so it can be tested on the return    T075 03/28/2006 LJB
 PGM.*Return_code = 'Y2U0003';

 RETURN;

}


EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Initialize routine

 // PAR.Event Number = CON.*ZERO
 PAR.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('01');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('02');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Event Number = PAR.Event Number + CON.1
 PAR.Event_Number = PAR.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER('02');
 PARAMETER(DB1.Invoice_Memo_Company);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Activity_Completion);
 PARAMETER(DB1.Activity_Hold);
 PARAMETER(DB1.Post_Cash_Complete);
 PARAMETER(DB1.Cross_Event_Ref_Comp);
 PARAMETER(DB1.Cross_Event_Ref_Order);
 PARAMETER(DB1.Cross_Event_Ref_Event);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


//?06/13/18 DN R12926-Pass in Absorbed Freight Rate.
//?01/19/21 DN R17029-Changed to set OHE Spot Buy='N'.
//?09/17/21 DN W77844-Changed to set OHE Spot Buy='T'urn.
EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('T');
PARAMETER(LCL.OHE_PO_ACK_Flag);
PARAMETER(LCL.Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_EDI_943_Action);
PARAMETER(LCL.OHE_EDI_944_Action);
PARAMETER(LCL.OHE_EDI_940_Action);
PARAMETER(LCL.OHE_EDI_945_Action);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER('A');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


// PAR.Order Number 1  PASS  USR = PAR.Order Number
PAR.Order_Number_1_PASS_USR = PAR.Order_Number;

ENDDO;

//?** Populate then create Order Detail Fields & record
DO;

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

// LCL.Prod OvrAge Frm Usr = PAR.Date 4 RGF   Pass
LCL.Prod_OvrAge_Frm_Usr = PAR.Date_4_RGF_Pass;

// LCL.Prod OvrAge To Usr = PAR.Date 4 RGT   Pass
LCL.Prod_OvrAge_To_Usr = PAR.Date_4_RGT_Pass;

// PAR.Order Sequence Number = CON.1
PAR.Order_Sequence_Number = 1;

// PAR.Order Secondary Line Seq = CON.1
PAR.Order_Secondary_Line_Seq = 1;

//?If not Pre-Commencement, set Tf exempt code (EC,EP,NE)
CASE;

// IF PAR.OH TF Exempt Code is Not Pre-Commencement
IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF PAR.OH TF Exempt Code is Exempt Customer
IF PAR.OH_TF_Exempt_Code = 'EC';

CASE;

// IF PAR.Ord TF Exempt Code is Not Exempt
IF PAR.Ord_TF_Exempt_Code = 'NE';

// OR PAR.Ord TF Exempt Code is Exempt Customer
OR PAR.Ord_TF_Exempt_Code = 'EC';

// PAR.Ord TF Exempt Code = CND.Exempt Customer
PAR.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Exempt Product
PAR.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF PAR.OH TF Exempt Code is Not Exempt
IF PAR.OH_TF_Exempt_Code = 'NE';

// AND PAR.Ord TF Exempt Code is Exempt Product
AND PAR.Ord_TF_Exempt_Code = 'EP';

// PAR.OH TF Exempt Code = CND.Exempt Product
PAR.OH_TF_Exempt_Code = 'EP';

ENDIF;

//?If not Pre-Commencement, set Tf exempt code (EC,EP,NE)
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Pre Commencement
PAR.Ord_TF_Exempt_Code = 'PC';

ENDIF;

// PAR.Ord TF Exempt Code = CND.Not Exempt
PAR.Ord_TF_Exempt_Code = 'NE';

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

//?** Validate Price Code dates
// Call program Rtv Cust Prc Str/End  XF.
CALL PROGRAM(Rtv Cust Prc Str/End  XF) ('PNTAXFR');
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Price_Code);
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);

//?check dates
CASE;

// IF LCL.Price Start Date is Not Entered
IF LCL.Price_Start_Date = *ZERO;

// OR LCL.Price End Date is Not Entered
OR LCL.Price_End_Date = *ZERO;

// OR PAR.Scheduled Ship Date LT LCL.Price Start Date
OR PAR.Scheduled_Ship_Date < LCL.Price_Start_Date;

// OR PAR.Scheduled Ship Date GT LCL.Price End Date
OR PAR.Scheduled_Ship_Date > LCL.Price_End_Date;

//?** Flag order to be reviewed if errors                P001251
// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// PAR.Order Line Error Type = CND.Start/End Date
PAR.Order_Line_Error_Type = 'DT';

// PAR.Order Requires Review = CND.Yes
PAR.Order_Requires_Review = 'Y';

EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Requires_Review);
{
 //?USER: Processing before Data update

 //?** Chg line status to Entered when errors so Order will be reviewed
 // DB1.Header Status = CND.Entered
 DB1.Header_Status = 'E';

}


// PAR.Detail Line Status = CND.Entered
PAR.Detail_Line_Status = 'E';

// PAR.Order Requires Review = CND.No
PAR.Order_Requires_Review = *BLANK;

ENDIF;

//?** Get all the detail records for this Customer/PO#
//?** Create the detail records for this order#
//?02/02/21 DN R17013-Renamed Function Name. Logic Change for Mexico Only.
EXECUTE FUNCTION(Crt Ord Dtl f/SSIS Upl RT) TYPE(RTVOBJ) FILE(PNHHCPP)          AC2024970;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(1);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.Days_to_Age_Pass_Usr);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Group_Code);
PARAMETER(PAR.Detail_Line_Status);
PARAMETER(PAR.Detail_Line_Status_Last);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(LCL.Contract_Number);
PARAMETER(PAR.Price_Status);
PARAMETER(*ZERO);
PARAMETER(LCL.Work_Confirm_Status);
PARAMETER(LCL.Work_Over_Short_Status);
PARAMETER(PAR.Order_Desc_Line_One);
PARAMETER(PAR.Order_Desc_Line_Two);
PARAMETER(*BLANK);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(LCL.Price_Audit_Reason_Code);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Weight_Ordered);
PARAMETER(LCL.Quantity_Scheduled);
PARAMETER(LCL.Weight_Scheduled);
PARAMETER(LCL.Quantity_Shipped_Total);
PARAMETER(LCL.Weight_Shipped_Total);
PARAMETER(PAR.Unit_Cost_Pricing_U_M);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(*ZERO);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
PARAMETER(*ZERO);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER('Y');
PARAMETER('Y');
PARAMETER('Y');
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Level);
PARAMETER(LCL.Quality_Level);
PARAMETER(LCL.Pricing_Product_Class_Rep);
PARAMETER(LCL.Season_Product_Class_Repo);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Event_Code);
PARAMETER(LCL.Reason_Code);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*BLANK);
PARAMETER(LCL.OD_Schedule_Override_Sts);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OD_Adj_Type_Override);
PARAMETER(PAR.Affect_Trade_Fund);
PARAMETER(PAR.Affect_Commission);
PARAMETER(PAR.Affect_Pricing);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(PAR.OD_Pallet_Type);
PARAMETER(LCL.Production_Warehouse);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Price_Type_Ref_Num);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Maximum_Net_Weight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Item_Target_Price);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Maximum_Unit_Weight);
PARAMETER(*ZERO);
PARAMETER(LCL.OD_Ceiling_Price);
PARAMETER(LCL.OD_Gate_Final_Price_Adj);
PARAMETER(LCL.OD_Weighted_Avg_Price);
PARAMETER(LCL.OD_Original_Ordered_Qty);
PARAMETER(PAR.Order_Line_Error_Type);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(LCL.Job_Time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
PARAMETER(WRK.Total_Weight_Ordered_USR);
PARAMETER(PAR.Requested_Delivery_Date);
{
 //?USER: Initialize routine

 //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
 // LCL.Order Sequence Number = CND.Equal to zero
 LCL.Order_Sequence_Number = *ZERO;

 //?***** Changes and comments
 DO;

 //?*****
 //?* 08/18/2015 LJB E004172
 //?* Don't flag Product Availability errors here. It is being done
 //?* too early in the process and is causing unnecessary problems.
 //?*****
 ENDDO;

 //?USER: Processing if Data record not found

 //?** Error if no detail records in the Work File
 EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  //?** Chg line status to Entered when errors so Order will be reviewed
  // DB1.Header Status = CND.Entered
  DB1.Header_Status = 'E';

 }

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Populate Order Detail Fields & create OD record
 DO;

 // LCL.Order Line Error Type = PAR.Order Line Error Type
 LCL.Order_Line_Error_Type = PAR.Order_Line_Error_Type;

 // LCL.Order Sequence Number = LCL.Order Sequence Number + CND.One
 LCL.Order_Sequence_Number = LCL.Order_Sequence_Number + 1;

 // PAR.Order Secondary Line Seq = CON.1
 PAR.Order_Secondary_Line_Seq = 1;

 // Call program RTV for Ord.Detail     XF.
 CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(LCL.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Transportation_Temp);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Default_Warehouse);
 PARAMETER(LCL.Price_Method_Default);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(LCL.Variety_Rendered_Cut);
 PARAMETER(LCL.Item_Target_Price);
 PARAMETER(LCL.Error_Status);

 EXECUTE FUNCTION(RTV Primal Grp Code   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1854737;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Def/TFExp/CO RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1962838;
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 PARAMETER(LCL.Item_TF_Exempt_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Item Code = DB1.Item Code
 LCL.Item_Code = DB1.Item_Code;

 EXECUTE FUNCTION(Set/Val OH TF Exempt  IF) TYPE(EXCINTFUN)                      AC1960076;
 PARAMETER(PAR.OH_TF_Exempt_Code);
 PARAMETER(LCL.Ord_TF_Exempt_Code);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Error_Status);
 PARAMETER(LCL.Customer_TF_Exempt_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 {
  //?Execute internal function

  //?Set / Validate TF Exempt code values              RMC 8/24/05
  CASE;

  // IF PAR.OH TF Exempt Code is Blank
  IF PAR.OH_TF_Exempt_Code = *BLANK;

  //?VAL: Customer Exempt Code  w/Item Exempt Code
  CASE;

  // IF PAR.Customer TF Exempt Code is Not Exempt
  IF PAR.Customer_TF_Exempt_Code = 'NE';

  //?VAL: Item Exempt Code
  CASE;

  // IF PAR.Ord TF Exempt Code is Item Codes
  IF PAR.Ord_TF_Exempt_Code = 'EP'/'NE';

  // PAR.OH TF Exempt Code = PAR.Ord TF Exempt Code
  PAR.OH_TF_Exempt_Code = PAR.Ord_TF_Exempt_Code;

  ENDIF;

  //?VAL: Customer Exempt Code  w/Item Exempt Code
  // IF PAR.Customer TF Exempt Code is Exempt Customer
  IF PAR.Customer_TF_Exempt_Code = 'EC';

  // PAR.OH TF Exempt Code = PAR.Customer TF Exempt Code
  PAR.OH_TF_Exempt_Code = PAR.Customer_TF_Exempt_Code;

  //?VAL: Item Exempt Code
  CASE;

  // IF PAR.Ord TF Exempt Code is Not Exempt
  IF PAR.Ord_TF_Exempt_Code = 'NE';

  CASE;

  // IF PAR.TF Co-Ownership Sts is Co-Owned
  IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

  //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
  // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
  ERROR(USR4203);
  MSGPARM(PAR.Item_Code);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Customer
  PAR.Ord_TF_Exempt_Code = 'EC';

  ENDIF;

  //?VAL: Item Exempt Code
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Product
  PAR.Ord_TF_Exempt_Code = 'EP';

  ENDIF;

  ENDIF;

  //?Set / Validate TF Exempt code values              RMC 8/24/05
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Validate after 1 line item has been entered
  //?If not Pre-Commencement, set exempt code
  CASE;

  // IF PAR.OH TF Exempt Code is Not Pre-Commencement
  IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

  //?VAL: Customer Exempt Code w/Item Exempt Code
  CASE;

  // IF PAR.Customer TF Exempt Code is Not Exempt
  IF PAR.Customer_TF_Exempt_Code = 'NE';

  //?Line item must eq whats in the header, else Error
  CASE;

  // IF PAR.OH TF Exempt Code NE PAR.Ord TF Exempt Code
  IF PAR.OH_TF_Exempt_Code <> PAR.Ord_TF_Exempt_Code;

  // Send error message - 'Tf Exempt error - cant mix exempt & non-exempt items for customer.'
  ERROR(USR3588);
  MSGPARM(PAR.Item_Code);

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  //?VAL: Customer Exempt Code w/Item Exempt Code
  // IF PAR.Customer TF Exempt Code is Exempt Customer
  IF PAR.Customer_TF_Exempt_Code = 'EC';

  //?VAL: Item Exempt Code
  CASE;

  // IF PAR.Ord TF Exempt Code is Not Exempt
  IF PAR.Ord_TF_Exempt_Code = 'NE';

  CASE;

  // IF PAR.TF Co-Ownership Sts is Co-Owned
  IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

  //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
  // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
  ERROR(USR4203);
  MSGPARM(PAR.Item_Code);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Customer
  PAR.Ord_TF_Exempt_Code = 'EC';

  ENDIF;

  //?VAL: Item Exempt Code
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Exempt Product
  PAR.Ord_TF_Exempt_Code = 'EP';

  ENDIF;

  ENDIF;

  //?If not Pre-Commencement, set exempt code
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Ord TF Exempt Code = CND.Pre Commencement
  PAR.Ord_TF_Exempt_Code = 'PC';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Fresh_Chilling_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(PAR.Company_Number);
  PARAMETER('FZNCHLTME');
  PARAMETER(PAR.System_Value_Numeric);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Fresh Chilling Time = PAR.System Value Numeric
  PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

  ENDIF;

 }

 // Call program Val ItmBal.Unit Cst    XF.
 CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(LCL.Error_Status);

 EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv Plan Prod Sts     XF.
 CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.OD_Production_Plan_Sts);

 EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.OD Price Type Ref Num = CVTVAR(PAR.Price Code)
 LCL.OD_Price_Type_Ref_Num = CVTVAR(PAR.Price_Code);

 // WRK.Detail Line Status = PAR.Detail Line Status
 WRK.Detail_Line_Status = PAR.Detail_Line_Status;

 // Call program Rtv Max Wt and price  XF.
 CALL PROGRAM(Rtv Max Wt and price  XF) ('PNTBXFR');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Maximum_Contract_Units);
 PARAMETER(LCL.Customer_Price_UM_Prc);
 PARAMETER(LCL.Commodity_Market_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(LCL.Contract_Unit_Type);

 //?02/01/21 DN R17013-Set Pricing Info for Mexico Orders.
 CASE;

 // IF PAR.Country Code is Mexico
 IF PAR.Country_Code = 'MEX';

 CASE;

 // IF PAR.Price Method Code is Blank
 IF PAR.Price_Method_Code = *BLANK;

 //?Record not found, set Pricing defaults.
 // PAR.Price Method Code = CND.Manual
 PAR.Price_Method_Code = 'MAN';

 // LCL.Customer Price /UM Prc = CON..01
 LCL.Customer_Price_UM_Prc = .01;

 // IF PAR.Price Method Code is Market-Auto Audit
 IF PAR.Price_Method_Code = 'MKA';

 //?POPOETR process doesn't allow to set Commodity Market Code='USD'
 //?if NOT Price Type is 'Ceiling Price' hence set it here.
 // PAR.Commodity Market Code = CND.Default Market Code(USD)
 PAR.Commodity_Market_Code = 'USD';

 //?Populate Market Pricing Date by Requested Delivery Date.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOTE: In future, we should have the Market Pricing Date in the
 //?      SSIS XLS instead of hard coding it here.
 EXECUTE FUNCTION(RTV Day/Wk/Prd/Yr     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369048;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(NLL.Julian_Date);
 PARAMETER(NLL.Accounting_Year_Code);
 PARAMETER(NLL.Accounting_Period_Code);
 PARAMETER(NLL.OM_Week);
 PARAMETER(LCL.Day_of_Week);
 PARAMETER(NLL.Week_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Use Non-Holiday & Business Week Days Only.
 CASE;

 // IF LCL.Day of Week is Monday
 IF LCL.Day_of_Week = '2';

 //?Use prior Thursday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(3);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Tuesday
 IF LCL.Day_of_Week = '3';

 //?Use prior Thursday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Wednesday
 IF LCL.Day_of_Week = '4';

 //?Use prior Friday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Thursday
 IF LCL.Day_of_Week = '5';

 //?Use prior Monday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Friday
 IF LCL.Day_of_Week = '6';

 //?Use prior Tuesday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(4);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Saturday
 IF LCL.Day_of_Week = '7';

 //?Use prior Tuesday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(5);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 //?Use Non-Holiday & Business Week Days Only.
 // IF LCL.Day of Week is Sunday
 IF LCL.Day_of_Week = '1';

 //?Use prior Tuesday.
 EXECUTE FUNCTION(RTV End Date for #Days2RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC2195525;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(6);
 PARAMETER(PAR.Market_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.Count USR = CON.1
  PAR.Count_USR = 1;

  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.End Date is a Holiday USR = CND.No
  PAR.End_Date_is_a_Holiday_USR = 'N';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?W79482 DN 05/28/21-Removed 'Public Holiday Status' Check.
  CASE;

  // IF DB1.Day of Week is Week Days
  IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

  //?W79482 DN 05/28/21-Use Next Business Date After End Date was a Holiday.
  CASE;

  // IF PAR.End Date is a Holiday USR is Yes
  IF PAR.End_Date_is_a_Holiday_USR = 'Y';

  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  CASE;

  // IF PAR.Count USR EQ PAR.CTL Number of Times
  IF PAR.Count_USR = PAR.CTL_Number_of_Times;

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  CASE;

  // IF DB1.Public Holiday Status is yes
  IF DB1.Public_Holiday_Status = 'Y';

  //?Get next Business Date & QUIT.
  // PAR.End Date is a Holiday USR = CND.Yes
  PAR.End_Date_is_a_Holiday_USR = 'Y';

  //?W79482 DN 05/28/21-Check if End Date is a Holiday.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date From             USR = DB1.Post to G/L Date
  PAR.Date_From_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

  ENDIF;

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // LCL.Price Overage Override = LCL.Customer Price /UM Prc
 LCL.Price_Overage_Override = LCL.Customer_Price_UM_Prc;

 // LCL.Error Status = CND.no
 LCL.Error_Status = 'N';

 EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(NLL.Commodity_Market_Code);
 PARAMETER(NLL.Date_Method_Code);
 PARAMETER(NLL.Price_Method_Code);
 PARAMETER(NLL.Price_Overage_Override);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Price_Code);
 PARAMETER(LCL.OD_Ceiling_Price);
 PARAMETER(LCL.Error_Status);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);
 {
  //?Execute internal function

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
  LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

  // Call program CLC Sum Ship/Ord Unit XF.
  CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Total_Weight_Ordered_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Total_Quantity_Ordered);

  // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
  PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

  // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
  PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

  //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
  // Call program Rtv Cust Prc hdr/dtl  XF.
  CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(WRK.Price_Start_Date);
  PARAMETER(WRK.Price_End_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Maximum_Contract_Units);
  PARAMETER(PAR.Customer_Price_UM_Prc);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Contract_Unit_Type);

  // PAR.Price Method Code = LCL.Price Method Code
  PAR.Price_Method_Code = LCL.Price_Method_Code;

  EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Price_Method_Type);
  PARAMETER(PAR.PMH_Price_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
  //?Use Contract Unit Type to check Qty or Weight-Lbs
  //?VAL: Total Weight and Quantity w/Maximum
  CASE;

  // IF PAR.Contract Unit Type is Weight-LB
  IF PAR.Contract_Unit_Type = 'W';

  CASE;

  // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
  IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  //?VAL: Total Weight and Quantity w/Maximum
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Contract Unit type = Quantity
  CASE;

  // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
  IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  ENDIF;

  //?Original code
  //?OUT: No Errors
  CASE;

  // IF PAR.Error Status is no
  IF PAR.Error_Status = 'N';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  CASE;

  // IF PAR.PMH Price Type is Invoice Price
  IF PAR.PMH_Price_Type = 'I';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  // PAR.OD Ceiling Price = CON.*ZERO
  PAR.OD_Ceiling_Price = *ZERO;

  // IF PAR.PMH Price Type is Ceiling Price
  IF PAR.PMH_Price_Type = 'C';

  // PAR.Price Overage Override = CON.*ZERO
  PAR.Price_Overage_Override = *ZERO;

  // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
  PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

  ENDIF;

  ENDIF;

 }

 //?** Flag if Price Code Weight maximum has been reached
 CASE;

 // IF LCL.Error Status is yes
 IF LCL.Error_Status = 'Y';

 // LCL.Order Line Error Type = CND.Price Code Wgt Exceeded
 LCL.Order_Line_Error_Type = 'WT';

 // LCL.Order Requires Review = CND.Yes
 LCL.Order_Requires_Review = 'Y';

 EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing before Data update

  //?** Chg line status to Entered when errors so Order will be reviewed
  // DB1.Header Status = CND.Entered
  DB1.Header_Status = 'E';

 }

 // LCL.Order Requires Review = CND.No
 LCL.Order_Requires_Review = *BLANK;

 // WRK.Detail Line Status = CND.Entered
 WRK.Detail_Line_Status = 'E';

 ENDIF;

 EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(LCL.Contract_Number);
 PARAMETER(PAR.Pricing_Date_Used);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(LCL.Cntrt_Enter_no_QT_Price);
 PARAMETER(LCL.Cntrt_#_does_not_Exit);
 PARAMETER(LCL.Qty_ordered_Contract);
 PARAMETER(LCL.Contract_Expired);
 PARAMETER(LCL.Price_Override_Required);
 PARAMETER(LCL.Price_Method_QT_Cntrt_0);
 PARAMETER(LCL.Prc_Code_FRM_or_MKT);
 PARAMETER(LCL.Mkt_Pricing_Date_not_0);
 PARAMETER(LCL.Mkt_Meth_and_Date_both);
 PARAMETER(LCL.Price_Override_Req_EXT);
 PARAMETER(LCL.Contract_Exists_for_Item);
 PARAMETER(LCL.Price_Override_not_Allowd);
 PARAMETER(JOB.*Job_date);
 PARAMETER(LCL.Price_Method_Type);
 {
  //?Execute internal function

  // PAR.Contract Exists for Item = CND.blank
  PAR.Contract_Exists_for_Item = *BLANK;

  // PAR.Cntrt Enter no QT Price = CND.blank
  PAR.Cntrt_Enter_no_QT_Price = *BLANK;

  // PAR.Cntrt.# does not Exit = CND.blank
  PAR.Cntrt_#_does_not_Exit = *BLANK;

  // PAR.Qty ordered > Contract = CND.blank
  PAR.Qty_ordered_Contract = *BLANK;

  // PAR.Contract Expired = CND.blank
  PAR.Contract_Expired = *BLANK;

  // PAR.Price Override Required = CND.blank
  PAR.Price_Override_Required = *BLANK;

  // PAR.Price Method QT & Cntrt 0 = CND.blank
  PAR.Price_Method_QT_Cntrt_0 = *BLANK;

  // PAR.Prc Code FRM or MKT = CND.blank
  PAR.Prc_Code_FRM_or_MKT = *BLANK;

  // PAR.Mkt Pricing Date not 0 = CND.blank
  PAR.Mkt_Pricing_Date_not_0 = *BLANK;

  // PAR.Mkt Meth. and Date both = CND.blank
  PAR.Mkt_Meth_and_Date_both = *BLANK;

  // PAR.Price Override Req. EXT = CND.blank
  PAR.Price_Override_Req_EXT = *BLANK;

  // PAR.Price Override not Allowd = CND.blank
  PAR.Price_Override_not_Allowd = *BLANK;

  //?Get Price Method Type
  EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Price_Method_Type);
  PARAMETER('O');
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Check if Contract exists for Item
  //?A Contract Exists for this customer and item.
  CASE;

  // IF PAR.Contract Number is Zero
  IF PAR.Contract_Number = *ZERO;

  EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Order_Date);
  PARAMETER(PAR.Contract_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   CASE;

   // IF PAR.Effective Date GE DB1.Effective Date
   IF PAR.Effective_Date >= DB1.Effective_Date;

   // AND PAR.Effective Date LE DB1.End Date Effective
   AND PAR.Effective_Date <= DB1.End_Date_Effective;

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

   ENDIF;

   // PAR.Contract Number = DB1.Contract Number
   PAR.Contract_Number = DB1.Contract_Number;

  }

  // WRK.Contract Number = PAR.Contract Number
  WRK.Contract_Number = PAR.Contract_Number;

  CASE;

  // IF PGM.*Return code is *Record already exists
  IF PGM.*Return_code = 'Y2U0003';

  // PAR.Contract Exists for Item = CND.yes
  PAR.Contract_Exists_for_Item = 'Y';

  ENDIF;

  ENDIF;

  //?Edit Contract Number
  CASE;

  // IF PAR.Contract Number is Entered
  IF PAR.Contract_Number > *ZERO;

  EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Effective_Date);
  PARAMETER(PAR.End_Date_Effective);
  PARAMETER(PAR.Maximum_Quantity);
  PARAMETER(PAR.Quantity_Sold);
  PARAMETER(PAR.Contract_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set Contract Error Parms
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Cntrt.# does not Exit = CND.yes
  PAR.Cntrt_#_does_not_Exit = 'Y';

  //?Set Contract Error Parms
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Total Quantity Ordered = PAR.Quantity Sold + PAR.Quantity Ordered
  WRK.Total_Quantity_Ordered = PAR.Quantity_Sold + PAR.Quantity_Ordered;

  CASE;

  // IF WRK.Total Quantity Ordered GT PAR.Maximum Quantity
  IF WRK.Total_Quantity_Ordered > PAR.Maximum_Quantity;

  // PAR.Qty ordered > Contract = CND.yes
  PAR.Qty_ordered_Contract = 'Y';

  ENDIF;

  CASE;

  // IF PAR.End Date Effective LE PAR.Order Date
  IF PAR.End_Date_Effective <= PAR.Order_Date;

  // PAR.Contract Expired = CND.yes
  PAR.Contract_Expired = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?Validity Checking
  //?Price Override and Manual Price Method
  CASE;

  // IF PAR.Price Method Type is Manual Pricing
  IF PAR.Price_Method_Type = 'M';

  // AND PAR.Price Overage Override is Equal zero
  AND PAR.Price_Overage_Override = *ZERO;

  // PAR.Price Override Required = CND.yes
  PAR.Price_Override_Required = 'Y';

  ENDIF;

  //?Price override and EXT price method
  CASE;

  // IF PAR.Price Method Type is Extended Pricing
  IF PAR.Price_Method_Type = 'X';

  // AND PAR.Price Overage Override is Equal zero
  AND PAR.Price_Overage_Override = *ZERO;

  // PAR.Price Override Req. EXT = CND.yes
  PAR.Price_Override_Req_EXT = 'Y';

  ENDIF;

  //?FRM / MKT Checks
  CASE;

  // IF PAR.Price Method Type is Market or Formula
  IF PAR.Price_Method_Type = 'F'/'K';

  //?Market Code Must be entered
  CASE;

  // IF PAR.Commodity Market Code is Not Entered
  IF PAR.Commodity_Market_Code = *BLANK;

  // PAR.Prc Code FRM or MKT = CND.yes
  PAR.Prc_Code_FRM_or_MKT = 'Y';

  ENDIF;

  //?Market Price Date field not zero
  CASE;

  // IF PAR.Market Pricing Date is NE Zero
  IF PAR.Market_Pricing_Date <> *ZERO;

  // PAR.Mkt Pricing Date not 0 = CND.yes
  PAR.Mkt_Pricing_Date_not_0 = 'Y';

  ENDIF;

  CASE;

  // IF PAR.Price Overage Override is Not Zeros
  IF PAR.Price_Overage_Override <> *ZERO;

  // PAR.Price Override not Allowd = CND.yes
  PAR.Price_Override_not_Allowd = 'Y';

  ENDIF;

  ENDIF;

  //?MKT date Method entered and Mkt Price Date both entered.
  CASE;

  // IF PAR.Date Method Code is Entered
  IF PAR.Date_Method_Code <> *BLANK;

  // AND PAR.Market Pricing Date is NE Zero
  AND PAR.Market_Pricing_Date <> *ZERO;

  // PAR.Mkt Meth. and Date both = CND.yes
  PAR.Mkt_Meth_and_Date_both = 'Y';

  ENDIF;

 }

 // PAR.Weight Ordered = DB1.Quantity Ordered * PAR.Unit Weight Ordered U/M *
 PAR.Weight_Ordered = DB1.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

 // LCL.Weight Scheduled = CON.*ZERO
 LCL.Weight_Scheduled = *ZERO;

 // LCL.Quantity Scheduled = CON.*ZERO
 LCL.Quantity_Scheduled = *ZERO;

 // LCL.Error Status = CND.no
 LCL.Error_Status = 'N';

 EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Production_AgeDte_Fr);
 PARAMETER(LCL.Production_AgeDte_To);
 PARAMETER(LCL.Error_Status);
 PARAMETER(WRK.Company_Organization);
 PARAMETER('V');
 {
  //?Execute internal function

  // WRK.Error Flag            USR = CND.Blank
  WRK.Error_Flag_USR = *BLANK;

  // PAR.Error Status = CND.blank
  PAR.Error_Status = *BLANK;

  // WRK.Error Reason Descript 1 = CON.*BLANK
  WRK.Error_Reason_Descript_1 = *BLANK;

  // WRK.Error Reason Descript 2 = CON.*BLANK
  WRK.Error_Reason_Descript_2 = *BLANK;

  // WRK.Error Reason Descript 3 = CON.*BLANK
  WRK.Error_Reason_Descript_3 = *BLANK;

  // WRK.Error Reason Descript 4 = CON.*BLANK
  WRK.Error_Reason_Descript_4 = *BLANK;

  // WRK.Error Reason Descript 5 = CON.*BLANK
  WRK.Error_Reason_Descript_5 = *BLANK;

  CASE;

  // IF PAR.Company Organization is Seaboard
  IF PAR.Company_Organization = 'S';

  CASE;

  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // Send error message - 'Requested Delv Date is required'
  ERROR(USR4329);
  MSGPARM(PAR.Requested_Delivery_Date);

  // IF PAR.Scheduled Ship Date is not entered
  IF PAR.Scheduled_Ship_Date = *ZERO;

  // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
  ERROR(USR2230);
  MSGPARM(PAR.Scheduled_Ship_Date);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Val Age information   XF.
  CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Error_Flag_USR);
  PARAMETER(WRK.Error_Reason_Descript_1);
  PARAMETER(WRK.Error_Reason_Descript_2);
  PARAMETER(WRK.Error_Reason_Descript_3);
  PARAMETER(WRK.Error_Reason_Descript_4);
  PARAMETER(WRK.Error_Reason_Descript_5);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);

  //?Verify if message should be sent if validation is required
  CASE;

  // IF WRK.Error Flag            USR is Yes
  IF WRK.Error_Flag_USR = 'Y';

  // AND PAR.Production Dates Sts Usr is Validation routine
  AND PAR.Production_Dates_Sts_Usr = 'V';

  //?message 1 Product is shipped before product is made
  CASE;

  // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

  // Send error message - 'Prd Date is invalid for requested delivery date'
  ERROR(USR4307);
  MSGPARM(PAR.Production_AgeDte_Fr);

  ENDIF;

  //?message 2 Either Days or override date but not both
  CASE;

  // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

  // Send error message - 'Enter Age Days or Dates'
  ERROR(USR4304);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 3 With Chill Days Either Days or Override Dates required
  CASE;

  // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 4 From date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 5 To date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  CASE;

  // IF PAR.Production Ovr AgeDte Fr is not entered
  IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

  // Send error message - 'Invalid Item Age Days'
  ERROR(USR4309);
  MSGPARM(PAR.Item_Age_Days);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send error message - 'Invalid Production Override Age Frm/To Dates'
  ERROR(USR4310);
  MSGPARM(PAR.Production_AgeDte_Fr);
  MSGPARM(PAR.Production_AgeDte_To);

  ENDIF;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?** Flag if Age Days is invalid
 CASE;

 // IF LCL.Error Status is yes
 IF LCL.Error_Status = 'Y';

 // LCL.Order Line Error Type = CND.Invalid Item Age Code
 LCL.Order_Line_Error_Type = 'AC';

 // LCL.Order Requires Review = CND.Yes
 LCL.Order_Requires_Review = 'Y';

 EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing before Data update

  //?** Chg line status to Entered when errors so Order will be reviewed
  // DB1.Header Status = CND.Entered
  DB1.Header_Status = 'E';

 }

 // LCL.Order Requires Review = CND.No
 LCL.Order_Requires_Review = *BLANK;

 // WRK.Detail Line Status = CND.Entered
 WRK.Detail_Line_Status = 'E';

 ENDIF;

 //?** Default Deadline depart date if it is zeros
 CASE;

 // IF PAR.Deadline Depart Date LH is not entered
 IF PAR.Deadline_Depart_Date_LH = *ZERO;

 // LCL.Deadline Depart Date LH = PAR.Scheduled Ship Date
 LCL.Deadline_Depart_Date_LH = PAR.Scheduled_Ship_Date;

 //?** Default Deadline depart date if it is zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Deadline Depart Date LH = PAR.Deadline Depart Date LH
 LCL.Deadline_Depart_Date_LH = PAR.Deadline_Depart_Date_LH;

 ENDIF;

 //?** Default Deadline depart time if it is zeros
 CASE;

 // IF PAR.Deadline Depart Time LH is not entered
 IF PAR.Deadline_Depart_Time_LH = *ZERO;

 // LCL.Deadline Depart Time LH = CON.080000
 LCL.Deadline_Depart_Time_LH = 080000;

 //?** Default Deadline depart time if it is zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Deadline Depart Time LH = PAR.Deadline Depart Time LH
 LCL.Deadline_Depart_Time_LH = PAR.Deadline_Depart_Time_LH;

 ENDIF;

 //?** Allocation
 //?** Don't flag Product Availability errors here        E004172
 //?** Allocate if Production Plan Status = Yes (yes is *blanks)
 CASE;

 // IF PAR.OD Production Plan Sts is Yes
 IF PAR.OD_Production_Plan_Sts = *BLANK;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(LCL.Quantity_Scheduled);
 PARAMETER(LCL.Weight_Scheduled);
 PARAMETER('OA');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);

 //?** Flag error if weight is not scheduled and Prod Plan Sts is Yes
 CASE;

 // IF LCL.Weight Scheduled is Equal to zero
 IF LCL.Weight_Scheduled = *ZERO;

 // LCL.Order Requires Review = CND.No
 LCL.Order_Requires_Review = *BLANK;

 // WRK.Detail Line Status = CND.Entered
 WRK.Detail_Line_Status = 'E';

 ENDIF;

 ENDIF;

 // LCL.Extended Amount = PAR.Weight Ordered * LCL.Price Overage Override *Rounded
 LCL.Extended_Amount = PAR.Weight_Ordered * LCL.Price_Overage_Override 'H';

 //?** MPR Ready if weight ordered and price found
 //?MPR Ready if weight ordered and price found - 2/11/21 DN R17013-Logic Chg.
 CASE;

 // IF LCL.Price Overage Override is GT .01
 IF LCL.Price_Overage_Override > .01;

 // AND PAR.Weight Ordered is Greater than zero
 AND PAR.Weight_Ordered > *ZERO;

 //?02/11/21 DN R17013-Changed Price Overage Override to Check Price > .01
 // LCL.OD MPR Prc Ready to Send = CND.yes
 LCL.OD_MPR_Prc_Ready_to_Send = 'Y';

 //?MPR Ready if weight ordered and price found - 2/11/21 DN R17013-Logic Chg.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.OD MPR Prc Ready to Send = CND.blank
 LCL.OD_MPR_Prc_Ready_to_Send = *BLANK;

 ENDIF;

 //?Get Customer Exclude MPR Flag.
 //?2/11/21 DN R17013-Override OD MPR Sent to USDA Status & Price Code.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Empl/Co-Packer Sle RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC2195038;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Employee_Co_Packer_Sale);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Employee/Co-Packer Sale is Employee
 IF LCL.Employee_Co_Packer_Sale = 'E';

 // LCL.OD MPR Sent to USDA Sts = CND.Exclude
 LCL.OD_MPR_Sent_to_USDA_Sts = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.OD MPR Sent to USDA Sts = CND.blank
 LCL.OD_MPR_Sent_to_USDA_Sts = *BLANK;

 ENDIF;

 //?If Mexico, Do Not Populate Price Code. Keep Price Code for Japan.
 CASE;

 // IF PAR.Country Code is Mexico
 IF PAR.Country_Code = 'MEX';

 // LCL.Price Code = CND.Not Entered
 LCL.Price_Code = *ZERO;

 //?If Mexico, Do Not Populate Price Code. Keep Price Code for Japan.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Price Code = PAR.Price Code
 LCL.Price_Code = PAR.Price_Code;

 ENDIF;

 ENDIF;

 //?07/29/22 RMC 104641 calc credit check price so MEX orders get credit
 //?    checked more accurately
 EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Projected_Market_Price);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Error_Status_3);
 PARAMETER(LCL.Minimum_Price_USR);
 PARAMETER(LCL.Maximum_Price_USR);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?Execute internal function

  //?*---------------------------------------------------------------*
  //?Documentation:
  //?This internal function will determine if a manual price entered
  //?on an order detail line is within the Manual Pricing Acceptance
  //?Percentage from the Company Control file. If it does not fall
  //?within the percentage range then the market price will be used.
  //?If no market price is found then it is a manual price error
  //?*---------------------------------------------------------------*
  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  // PAR.Minimum Price   USR = CON.*ZERO
  PAR.Minimum_Price_USR = *ZERO;

  // PAR.Maximum Price  USR = CON.*ZERO
  PAR.Maximum_Price_USR = *ZERO;

  // PAR.Error Status  3 = CND.Yes
  PAR.Error_Status_3 = 'Y';

  EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Manual_Price_Accept_Prcnt);
  PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Food Service and Co-Pack Items
  CASE;

  // IF PAR.Default Commod Mark basis is Food Service
  IF PAR.Default_Commod_Mark_basis = 'FSV';

  // OR PAR.Default Commod Mark basis is Co-Pack
  OR PAR.Default_Commod_Mark_basis = 'CPK';

  // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
  PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  // Projected Market Price
  PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
  + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

  //?If a market price is found for co/cust market code default
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  //?If a market price is found for co/cust market code default
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If no price for co/cust market code then use co/item market code
  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  ENDIF;

  ENDIF;

 }

 // LCL.Unit Price - Credit = LCL.Projected Market Price
 LCL.Unit_Price_Credit = LCL.Projected_Market_Price;

 CASE;

 // IF LCL.Price Overage Override is GT .01
 IF LCL.Price_Overage_Override > .01;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(LCL.Unit_Price_Credit);

 ENDIF;

 //?** Use qty/wgt scheduled from the Allocation routine
 //?R17029 DN 01/19/21-Changed to set OD Spot Buy='N'.
 //?R17013 DN 2/11/21-Changed to use OD MPR Sent to USDA Sts & Price
 //?       Code from LCL context.
 //?10/06/21 DN W77844-Changed to set OD Spot Buy from 'N' to 'T'urn.
 //?07/29/22 RMC 104641 output lcl.unit price credit instead of *zeros
 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Comment_Print_Acknowledge);
 PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
 PARAMETER(LCL.Comment_Print_Pick_Slip);
 PARAMETER(LCL.Comment_Print_Ship_Doc);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(LCL.Price_Overage_Override);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Price_Status);
 PARAMETER(*ZERO);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(LCL.Work_Confirm_Status);
 PARAMETER(LCL.Work_Over_Short_Status);
 PARAMETER(PAR.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Palletize);
 PARAMETER('N');
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER('MTH');
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(DB1.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(LCL.Quantity_Scheduled);
 PARAMETER(LCL.Weight_Scheduled);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Unit_Cost_Pricing_U_M);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(LCL.Customer_Price_UM_Prc);
 PARAMETER(LCL.Unit_Price_Credit);
 PARAMETER(PAR.Unit_Price_Ordered_U_M);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER('Y');
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Date_of_Original_Entry);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Event_Code);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(LCL.Modified_Flag);
 PARAMETER(*BLANK);
 PARAMETER(LCL.OD_Schedule_Override_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(PAR.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.OD_Price_Type_Ref_Num);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 PARAMETER(LCL.Price_Code);
 PARAMETER(PAR.Maximum_Net_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(*ZERO);
 PARAMETER(PAR.OD_Maximum_Unit_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(LCL.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER('T');
 PARAMETER(*BLANK);
 PARAMETER(LCL.Order_Line_Error_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + PAR.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + PAR.Weight_Ordered;

 ENDDO;

}


//?** Put OD weight ordered into the OH total weight
// PAR.Order Weight Total = WRK.Total Weight Ordered USR
PAR.Order_Weight_Total = WRK.Total_Weight_Ordered_USR;

//?Update order weight total here, since header has already been created
EXECUTE FUNCTION(CHG Order Value,Wgt    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1403601;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


ENDDO;

//?** Create/Update the Export Document information (F17 in O.E.)
DO;

//?* Pass in Consignee name and address from .xls        E004201
//?* Anything ref'ing Load info will be blank            E004019
//?*  Anything ref'ing the Port of Loading or Item Trans Detail which
//?*  includes Prod Date, Slaughter Date, Proc Date, etc, will
//?*  be blank
//?10/01/20 DN R16637-Passed in New Consignee Fields. (Reinstated)
EXECUTE FUNCTION(Rtv/Crt Dflt f/JCOrdrs RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC1888697;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.ED_Consignee_Name);
PARAMETER(PAR.ED_Consignee_Addr_1);
PARAMETER(PAR.ED_Consignee_Addr_2);
PARAMETER(PAR.ED_Consignee_Addr_3);
PARAMETER(PAR.ED_Consignee_Addr_4);
PARAMETER(PAR.ED_Consignee_State);
PARAMETER(PAR.ED_Consignee_Postal);
PARAMETER(PAR.ED_Consignee_Country_Code);
PARAMETER(PAR.ED_Shipping_Marks_Txt);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.USR Blank Field = CND.Blank
 LCL.USR_Blank_Field = *BLANK;

 //?DO2642 DN 11/15/22-Initialize.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // LCL.ED Live with PHIS = DB1.ED Live with PHIS
 LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

 ENDIF;

 //?12/27/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND NOT DB1.ED Xlate Desc to Country is Not Selected
 AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

 // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
 PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

 ENDIF;

 EXECUTE FUNCTION(Val Exp Doc Ordr Exsts RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1528806;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PGM.*Return_code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?Create the Exp Doc for the order if it doesnt exist
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_Name);
 PARAMETER(LCL.Ship_To_Address_Line_1);
 PARAMETER(LCL.Ship_To_Address_Line_2);
 PARAMETER(LCL.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.Bill_to_Customer);
 PARAMETER(WRK.Bill_to_Name);
 PARAMETER(WRK.Bill_to_Address_Line_1);
 PARAMETER(WRK.Bill_to_Address_Line_2);
 PARAMETER(WRK.Bill_to_Address_Line_3);
 PARAMETER(WRK.Bill_to_City);
 PARAMETER(WRK.Bill_to_State_Code);
 PARAMETER(WRK.Bill_to_Zip_Postal_Code);
 PARAMETER(NLL.Customer_Purchase_Order_#);
 PARAMETER(WRK.Order_Date);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(WRK.Actual_Shipped_Date);
 PARAMETER(WRK.Cancel_Date);
 PARAMETER(WRK.Terms_Code);
 PARAMETER(WRK.Special_Instructions);
 PARAMETER(WRK.Special_Instructions_2);
 PARAMETER(WRK.Carrier_Code);
 PARAMETER(WRK.Comment_Print_Acknowledge);
 PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
 PARAMETER(WRK.Comment_Print_Pick_Slip);
 PARAMETER(WRK.Comment_Print_Ship_Doc);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(WRK.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(WRK.Order_Type_Print_Status);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.User_Original_Entry);
 PARAMETER(WRK.Date_of_Original_Entry);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(WRK.Credit_Hold);
 PARAMETER(WRK.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(WRK.Accounts_Receiv_Ent_1);
 PARAMETER(WRK.Accounts_Receiv_Ent_2);
 PARAMETER(WRK.Load_ID);
 PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.LTL_Flag);
 PARAMETER(WRK.Price_Audit);
 PARAMETER(WRK.Price_Status);
 PARAMETER(WRK.Shipping_Method);
 PARAMETER(WRK.Export_Status);
 PARAMETER(WRK.Palletize);
 PARAMETER(WRK.Shrink_Wrap);
 PARAMETER(WRK.Slip_Sheet);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Attach_to_Invoice_Number);
 PARAMETER(WRK.Load_Plan_Order);
 PARAMETER(WRK.Print_Pick_Slip);
 PARAMETER(WRK.Resell_Reference_Number);
 PARAMETER(WRK.Special_Comment_1);
 PARAMETER(WRK.Special_Comment_2);
 PARAMETER(WRK.Affect_Auto_Accruals);
 PARAMETER(WRK.Sales_Route_Code);
 PARAMETER(WRK.Manager_Level_Code);
 PARAMETER(WRK.VP_Level_Code);
 PARAMETER(WRK.Attach_to_Order_Number);
 PARAMETER(WRK.Reason_for_Price_Audit);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER(WRK.Invoice_Suffix);
 PARAMETER(WRK.Invoice_Date);
 PARAMETER(WRK.Event_Code);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(WRK.Billing_Activity_Type);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(WRK.Order_Certification_Flag);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.ED Consignee Addr 2 = PAR.ED Consignee Addr 2
 LCL.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2;

 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 //?** Format address lines 2 & 3 for printing            E004201
 CASE;

 // IF LCL.ED Consignee Addr 2 is Blank
 IF LCL.ED_Consignee_Addr_2 = *BLANK;

 //?** Put line 3 into line 2
 // LCL.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // LCL.ED Consignee Addr 3 = CND.Blank
 LCL.ED_Consignee_Addr_3 = *BLANK;

 //?** Format address lines 2 & 3 for printing            E004201
 // PAR.ED Customer PO # = PAR.Customer Purchase Order #
 PAR.ED_Customer_PO_# = PAR.Customer_Purchase_Order_#;

 // PAR.ED Total Net Weight lbs = PAR.Order Weight Total
 PAR.ED_Total_Net_Weight_lbs = PAR.Order_Weight_Total;

 //?** Calculate Total Unit Price
 // IF PAR.Order Weight Total is Not equal zero
 IF PAR.Order_Weight_Total <> *ZERO;

 // PAR.ED Total Unit Price = PAR.A/R order Value Total / PAR.Order Weight Total *
 PAR.ED_Total_Unit_Price = PAR.A_R_order_Value_Total / PAR.Order_Weight_Total;

 ENDIF;

 //?Read the Order Detail and calc/output required fields
 // PAR.ED Nbr of Packages = CON.*ZERO
 PAR.ED_Nbr_of_Packages = *ZERO;

 // PAR.ED Invoice Total = CON.*ZERO
 PAR.ED_Invoice_Total = *ZERO;

 //?12/27/18 DN R13944-Pass in ED Xlate Desc to Country.
 //?11/15/22 DN DO2642-Pass in ED Live with PHIS.
 EXECUTE FUNCTION(Rtv/Crt Exp Doc        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1529224;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(LCL.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Initialize routine

  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  // PAR.ED Total Net Weight MT = CON.*ZERO
  PAR.ED_Total_Net_Weight_MT = *ZERO;

  // PAR.ED Total Net Weight lbs = CON.*ZERO
  PAR.ED_Total_Net_Weight_lbs = *ZERO;

  // PAR.Gross Weight USR 9.1 = CON.*ZERO
  PAR.Gross_Weight_USR_9_1 = *ZERO;

  //?Print max std qty and weight if not shipped, and comp value=Y
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Print max std qty and weight if not shipped, and comp value=Y
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('EXPPRTOQT');
  PARAMETER(LCL.Status_Flag_13_Y_N);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Status Flag 13 Y/N is Yes
  IF LCL.Status_Flag_13_Y_N = 'Y';

  // LCL.Status Flag 14 Y/N = CND.Yes
  LCL.Status_Flag_14_Y_N = 'Y';

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  //?DN 03/18/22 DO2416-Added Country Codes ISO 3 Standard.
  //?Create Detail if required for the document.
  CASE;

  // IF PAR.ED Export Document Type is Health Certificate 9060-5
  IF PAR.ED_Export_Document_Type = 'H';

  // OR PAR.ED Export Document Type is Customs Invoice
  OR PAR.ED_Export_Document_Type = 'C';

  // OR DB1.Country Code is China
  OR DB1.Country_Code = 'CHN';

  // OR DB1.Country Code is Hong Kong
  OR DB1.Country_Code = 'HKG';

  // OR DB1.Country Code is Taiwan
  OR DB1.Country_Code = 'TAI';

  // OR DB1.Country Code is Australia
  OR DB1.Country_Code = 'AUS';

  // OR DB1.Country Code is Honduras
  OR DB1.Country_Code = 'HON';

  // OR DB1.Country Code is Romania
  OR DB1.Country_Code = 'ROM';

  // OR DB1.Country Code is Russia
  OR DB1.Country_Code = 'RUS';

  // OR PAR.ED Export Document Type is Customs Invoice-Willson
  OR PAR.ED_Export_Document_Type = 'W';

  // OR PAR.ED Export Document Type is Form 9060-7 (Casings)
  OR PAR.ED_Export_Document_Type = 'G';

  // OR DB1.Country Code is Chile
  OR ( DB1.Country_Code = 'CHI';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  // OR PAR.ED Export Document Type is Application for Export
  OR PAR.ED_Export_Document_Type = 'A';

  // OR DB1.Country Code is Taiwan - ISO 3
  OR DB1.Country_Code = 'TWN';

  // OR DB1.Country Code is Honduras - ISO 3
  OR DB1.Country_Code = 'HND';

  // OR DB1.Country Code is Romania - ISO 3
  OR DB1.Country_Code = 'ROU';

  // OR DB1.Country Code is Chile - ISO 3
  OR ( DB1.Country_Code = 'CHL';

  // AND PAR.ED Export Document Type is Letterhead-Pork to Export
  AND PAR.ED_Export_Document_Type = 'L' );

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 06/22/22-Commented Out Old Method of Item Label Formatting.
  //?DO2642 DN 06/22/22-New Method of Item Label Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  // PAR.ED Product Pkg Type = CON.BOXES
  PAR.ED_Product_Pkg_Type = 'BOXES';

  // PAR.ED Product Net Weight lbs = DB1.Weight Shipped Total
  PAR.ED_Product_Net_Weight_lbs = DB1.Weight_Shipped_Total;

  // PAR.ED Product Net Weight MT = DB1.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = DB1.Weight_Shipped_Total / 2204.6;

  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Product Nbr of Pkgs = DB1.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = DB1.Quantity_Shipped_Total;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + DB1.Quantity Shipped Total
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + DB1.Quantity_Shipped_Total;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = DB1.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = DB1.Unit Price
  PAR.ED_Product_Unit_Price = DB1.Unit_Price;

  // PAR.ED Producet Extended Amt = DB1.Extended Amount
  PAR.ED_Producet_Extended_Amt = DB1.Extended_Amount;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?4/30/03 changed Item Str Class validation from 420 to 755-use group insted
  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF PAR.Warehouse Type is Fresh
  IF PAR.Warehouse_Type = 'FR';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  //?do for all plants 2/6/17            R9126
  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  // PAR.ED Product Pkg Type = CON.Boxes
  PAR.ED_Product_Pkg_Type = 'Boxes';

  //? Load default MAX qty and weight if  NOT shipped
  CASE;

  // IF LCL.Status Flag 14 Y/N is Yes
  IF LCL.Status_Flag_14_Y_N = 'Y';

  // AND PAR.ED Export Document Type is Application for Export
  AND PAR.ED_Export_Document_Type = 'A';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  //?S14759 DN 04/08/19-Externalize Combos Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14759 DN 04/08/19-Externalize Box Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  CASE;

  // IF DB1.Weight Shipped Total is Greater than zero
  IF DB1.Weight_Shipped_Total > *ZERO;

  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(PAR.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Misc Tare Weight
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Shipped Total *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Shipped_Total;

  //?Misc Tare Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Misc Tare Weight = PAR.Misc Tare Weight * DB1.Quantity Scheduled *
  PAR.Misc_Tare_Weight = PAR.Misc_Tare_Weight * DB1.Quantity_Scheduled;

  ENDIF;

  //?Find Box weight for the Item and Subtract for final tare weight
  // PAR.Unit Weight = CON.*ZERO
  PAR.Unit_Weight = *ZERO;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Shipped Total NE WRK.ZERO
  IF DB1.Weight_Shipped_Total <> WRK.ZERO;

  //?S00714 get from manifest dtl.. calc as a back up
  EXECUTE FUNCTION(RTV Sum Gross Wt      RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1927373;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Gross_Weight_USR_9_1);
  {
   //?USER: Initialize routine

   //?RMC 3/17/09  new for exp docs
   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Manifest Gross Weight
   PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Manifest_Gross_Weight;

  }

  CASE;

  // IF PAR.Gross Weight USR 9.1 is not entered
  IF PAR.Gross_Weight_USR_9_1 = *ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Shipped Total * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Shipped_Total * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Gross Weight  - S00714 change to get from manifest dtl if shipped
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Calculate Gross Weight
  CASE;

  // IF DB1.Weight Scheduled NE WRK.ZERO
  IF DB1.Weight_Scheduled <> WRK.ZERO;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Misc Tare Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Misc_Tare_Weight;

  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // PAR.Unit Weight = DB1.Quantity Scheduled * PAR.Unit Weight *Rounded
  PAR.Unit_Weight = DB1.Quantity_Scheduled * PAR.Unit_Weight 'H';

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.Unit Weight
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.Unit_Weight;

  ENDIF;

  ENDIF;

  //?Calc Gross weight is Weight shipped total > 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + PAR.ED Product Net Weight lbs
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + PAR.ED_Product_Net_Weight_lbs;

  ENDIF;

  //?***  ACCUM PACKAGES AND WEIGHT HERE - SO IT GETS THE DEFAULT MAX
  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.ED Product Nbr of Pkgs
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.ED_Product_Nbr_of_Pkgs;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // PAR.ED Total Net Weight lbs = PAR.ED Total Net Weight lbs + PAR.ED Product Net Weight lbs
  PAR.ED_Total_Net_Weight_lbs = PAR.ED_Total_Net_Weight_lbs
  + PAR.ED_Product_Net_Weight_lbs;

  //?***
  //?Date of Slaughter from processing date
  DO;

  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  // PAR.ED Date of Slaughter Dtl = LCL.Text USR 40
  PAR.ED_Date_of_Slaughter_Dtl = LCL.Text_USR_40;

  //?new for AUS form 9115-2
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // PAR.ED Slaughter Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Slaughter_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Slaughter Date Range = WRK.Date From Alpha       USR
  PAR.ED_Slaughter_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?Date of Production from processing date   RMC 5/3/6 added for russia
  DO;

  //?RMC OMS026 update prod date range for russian 9450
  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('N');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  //?new for RUS form 9450-3
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Production Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Production_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Production Date Range = WRK.Date From Alpha       USR
  PAR.ED_Production_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?12/27/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 06/22/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?06/22/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER('N');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(PAR.ED_Slaughter_Date_Range);
  PARAMETER(PAR.ED_Production_Date_Range);
  PARAMETER(LCL.ED_Product_UID);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(LCL.ED_Unused_Status_1);
  PARAMETER(LCL.ED_Unused_Status_2);
  PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
  PARAMETER(LCL.ED_Nbr_of_Packing_Units);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Record Status = CND.Active
   DB1.Record_Status = 'A';

   //?USER: Processing after Data update

   // Call program Rtv/Chg Hdr Shpd Amts XF.
   CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);

  }

  ENDIF;

 }

 CASE;

 // IF WRK.Warehouse Type is Equal blank
 IF WRK.Warehouse_Type = *BLANK;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // PAR.ED Modified Text = DB1.ED Modified Text
 PAR.ED_Modified_Text = DB1.ED_Modified_Text;

 CASE;

 // IF WRK.Warehouse Type is Fresh
 IF WRK.Warehouse_Type = 'FR';

 // PAR.ED Description of Item = CON.Chilled Pork
 PAR.ED_Language_Xlate_Desc_2 = 'Chilled Pork';

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PLTESTNO');
 PARAMETER(PAR.ED_Plant_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?11/20/2018 DN R13944-Set Frozen/Shelf Life Status.
 // LCL.EDE Frozen/Shelf Life Sts = CND.No
 LCL.EDE_Frozen_Shelf_Life_Sts = 'N';

 // IF WRK.Warehouse Type is Frozen
 IF WRK.Warehouse_Type = 'FZ';

 // PAR.ED Description of Item = CON.Frozen Pork
 PAR.ED_Language_Xlate_Desc_2 = 'Frozen Pork';

 //?11/20/2018 DN R13944-Set Frozen/Shelf Life Status.
 // LCL.EDE Frozen/Shelf Life Sts = CND.Yes
 LCL.EDE_Frozen_Shelf_Life_Sts = 'Y';

 //?S00795 RMC 5/08/09
 //?for 360 -  use est no 20343 instead of  20343,I; no change for 960
 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('FZESTNOI');
 PARAMETER(PAR.ED_Plant_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Date of Packing
 DO;

 //?Get oldest and most recent production dates for the order's items
 EXECUTE FUNCTION(Rtv Prod Dt Range f/Or RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1529262;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  //?C4086 RMC 5.5.15 check for zero date
  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.Date To               USR = CON.*ZERO
  PAR.Date_To_USR = *ZERO;

  //?USER: Process Data record

  // LCL.Production Date = CND.not entered
  LCL.Production_Date = *ZERO;

  CASE;

  // IF DB1.Production Date is entered
  IF DB1.Production_Date <> *ZERO;

  //?Dont adjust if getting Processing Date Range
  CASE;

  // IF PAR.Status Flag 4  Y/N is no
  IF PAR.Status_Flag_4_Y_N = 'N';

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  //?Dont adjust if getting Processing Date Range
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Adjust if getting slaughter date range
  EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Variety_Rendered_Cut);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Variety/Rendered/Cut is Cut
  IF LCL.Variety_Rendered_Cut = 'C';

  EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Process Data record

   CASE;

   // IF WRK.First Time Flag is Yes
   IF WRK.First_Time_Flag = 'Y';

   // WRK.First Time Flag = CND.NO
   WRK.First_Time_Flag = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Kill Day Status is yes
   IF DB1.Kill_Day_Status = 'Y';

   // PAR.Kill Date = DB1.Plant Date of Last Order
   PAR.Kill_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Save earliest date   - thats not zero 5.5.15
  CASE;

  // IF PAR.Date From             USR EQ WRK.ZERO
  IF PAR.Date_From_USR = WRK.ZERO;

  // OR LCL.Production Date LT PAR.Date From             USR
  OR ( LCL.Production_Date < PAR.Date_From_USR;

  // AND LCL.Production Date is entered
  AND LCL.Production_Date <> *ZERO );

  // PAR.Date From             USR = LCL.Production Date
  PAR.Date_From_USR = LCL.Production_Date;

  ENDIF;

  //?Save latest date
  CASE;

  // IF LCL.Production Date GT PAR.Date To               USR
  IF LCL.Production_Date > PAR.Date_To_USR;

  // PAR.Date To               USR = LCL.Production Date
  PAR.Date_To_USR = LCL.Production_Date;

  ENDIF;

 }

 // WRK.Year Code = PAR.Date From             USR *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_From_USR 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Month                 USR = PAR.Date From             USR *MONTH
 WRK.Month_USR = DATEDTLS(PAR.Date_From_USR 'MO' 1111111 'NONE' 'N' 1);

 EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
 PARAMETER(WRK.Month_USR);
 PARAMETER(WRK.Month_Description_USR);
 {
  //?Execute internal function

  // PAR.Month Description     USR = CND.NOT ENTERED
  PAR.Month_Description_USR = *BLANK;

  CASE;

  // IF PAR.Month                 USR is January
  IF PAR.Month_USR = 01;

  // PAR.Month Description     USR = CON.January
  PAR.Month_Description_USR = 'January';

  // IF PAR.Month                 USR is February
  IF PAR.Month_USR = 02;

  // PAR.Month Description     USR = CON.February
  PAR.Month_Description_USR = 'February';

  // IF PAR.Month                 USR is March
  IF PAR.Month_USR = 03;

  // PAR.Month Description     USR = CON.March
  PAR.Month_Description_USR = 'March';

  // IF PAR.Month                 USR is April
  IF PAR.Month_USR = 04;

  // PAR.Month Description     USR = CON.April
  PAR.Month_Description_USR = 'April';

  // IF PAR.Month                 USR is May
  IF PAR.Month_USR = 05;

  // PAR.Month Description     USR = CON.May
  PAR.Month_Description_USR = 'May';

  // IF PAR.Month                 USR is June
  IF PAR.Month_USR = 06;

  // PAR.Month Description     USR = CON.June
  PAR.Month_Description_USR = 'June';

  // IF PAR.Month                 USR is July
  IF PAR.Month_USR = 07;

  // PAR.Month Description     USR = CON.July
  PAR.Month_Description_USR = 'July';

  // IF PAR.Month                 USR is August
  IF PAR.Month_USR = 08;

  // PAR.Month Description     USR = CON.August
  PAR.Month_Description_USR = 'August';

  // IF PAR.Month                 USR is September
  IF PAR.Month_USR = 09;

  // PAR.Month Description     USR = CON.September
  PAR.Month_Description_USR = 'September';

  // IF PAR.Month                 USR is October
  IF PAR.Month_USR = 10;

  // PAR.Month Description     USR = CON.October
  PAR.Month_Description_USR = 'October';

  // IF PAR.Month                 USR is November
  IF PAR.Month_USR = 11;

  // PAR.Month Description     USR = CON.November
  PAR.Month_Description_USR = 'November';

  // IF PAR.Month                 USR is December
  IF PAR.Month_USR = 12;

  // PAR.Month Description     USR = CON.December
  PAR.Month_Description_USR = 'December';

  ENDIF;

 }

 //?Format production mo/yr From
 CASE;

 // IF WRK.Year Code is not equal to zero
 IF WRK.Year_Code <> *ZERO;

 // AND WRK.Month Description     USR NE WRK.BLANK
 AND WRK.Month_Description_USR <> WRK.BLANK;

 // Call program CLC Format Month,yr    XF.
 CALL PROGRAM(CLC Format Month,yr    XF) ('PDP2XFR');
 PARAMETER(WRK.Year_Code);
 PARAMETER(WRK.Month_Description_USR);
 PARAMETER(WRK.Text_USR_20);

 // PAR.ED Production mo/yr ln 1 = WRK.Text USR 20
 PAR.ED_Production_mo_yr_ln_1 = WRK.Text_USR_20;

 ENDIF;

 // WRK.Year Code = PAR.Date To               USR *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_To_USR 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Month XX USR = PAR.Date To               USR *MONTH
 WRK.Month_XX_USR = DATEDTLS(PAR.Date_To_USR 'MO' 1111111 'NONE' 'N' 1);

 //?Format production mo/yr TO if diff than from
 CASE;

 // IF WRK.Month XX USR NE WRK.Month                 USR
 IF WRK.Month_XX_USR <> WRK.Month_USR;

 EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
 PARAMETER(WRK.Month_XX_USR);
 PARAMETER(WRK.Month_Description_USR);
 {
  //?Execute internal function

  // PAR.Month Description     USR = CND.NOT ENTERED
  PAR.Month_Description_USR = *BLANK;

  CASE;

  // IF PAR.Month                 USR is January
  IF PAR.Month_USR = 01;

  // PAR.Month Description     USR = CON.January
  PAR.Month_Description_USR = 'January';

  // IF PAR.Month                 USR is February
  IF PAR.Month_USR = 02;

  // PAR.Month Description     USR = CON.February
  PAR.Month_Description_USR = 'February';

  // IF PAR.Month                 USR is March
  IF PAR.Month_USR = 03;

  // PAR.Month Description     USR = CON.March
  PAR.Month_Description_USR = 'March';

  // IF PAR.Month                 USR is April
  IF PAR.Month_USR = 04;

  // PAR.Month Description     USR = CON.April
  PAR.Month_Description_USR = 'April';

  // IF PAR.Month                 USR is May
  IF PAR.Month_USR = 05;

  // PAR.Month Description     USR = CON.May
  PAR.Month_Description_USR = 'May';

  // IF PAR.Month                 USR is June
  IF PAR.Month_USR = 06;

  // PAR.Month Description     USR = CON.June
  PAR.Month_Description_USR = 'June';

  // IF PAR.Month                 USR is July
  IF PAR.Month_USR = 07;

  // PAR.Month Description     USR = CON.July
  PAR.Month_Description_USR = 'July';

  // IF PAR.Month                 USR is August
  IF PAR.Month_USR = 08;

  // PAR.Month Description     USR = CON.August
  PAR.Month_Description_USR = 'August';

  // IF PAR.Month                 USR is September
  IF PAR.Month_USR = 09;

  // PAR.Month Description     USR = CON.September
  PAR.Month_Description_USR = 'September';

  // IF PAR.Month                 USR is October
  IF PAR.Month_USR = 10;

  // PAR.Month Description     USR = CON.October
  PAR.Month_Description_USR = 'October';

  // IF PAR.Month                 USR is November
  IF PAR.Month_USR = 11;

  // PAR.Month Description     USR = CON.November
  PAR.Month_Description_USR = 'November';

  // IF PAR.Month                 USR is December
  IF PAR.Month_USR = 12;

  // PAR.Month Description     USR = CON.December
  PAR.Month_Description_USR = 'December';

  ENDIF;

 }

 //?Format production mo/yr TO. Print on japan cert of exp
 CASE;

 // IF WRK.Year Code is not equal to zero
 IF WRK.Year_Code <> *ZERO;

 // AND WRK.Month Description     USR NE WRK.BLANK
 AND WRK.Month_Description_USR <> WRK.BLANK;

 // Call program CLC Format Month,yr    XF.
 CALL PROGRAM(CLC Format Month,yr    XF) ('PDP2XFR');
 PARAMETER(WRK.Year_Code);
 PARAMETER(WRK.Month_Description_USR);
 PARAMETER(WRK.Text_USR_20);

 // PAR.ED Production mo/yr ln 2 = WRK.Text USR 20
 PAR.ED_Production_mo_yr_ln_2 = WRK.Text_USR_20;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Date From             USR is Entered
 IF PAR.Date_From_USR <> *ZERO;

 // Call program CLC Format Date Range  XF.
 CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Text_USR_40);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Text USR 40 = CON.*BLANK
 PAR.Text_USR_40 = *BLANK;

 ENDIF;

 // PAR.ED Date of Processing = CONCAT(DB1.ED Date of Processing Txt,PAR.Text USR 40
 PAR.ED_Date_of_Processing = DB1.ED_Date_of_Processing_Txt + PAR.Text_USR_40 (1);

 ENDDO;

 //?Date of Slaughter --
 DO;

 EXECUTE FUNCTION(Rtv Prod Dt Range f/Or RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1529262;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  //?C4086 RMC 5.5.15 check for zero date
  // PAR.Date From             USR = CON.*ZERO
  PAR.Date_From_USR = *ZERO;

  // PAR.Date To               USR = CON.*ZERO
  PAR.Date_To_USR = *ZERO;

  //?USER: Process Data record

  // LCL.Production Date = CND.not entered
  LCL.Production_Date = *ZERO;

  CASE;

  // IF DB1.Production Date is entered
  IF DB1.Production_Date <> *ZERO;

  //?Dont adjust if getting Processing Date Range
  CASE;

  // IF PAR.Status Flag 4  Y/N is no
  IF PAR.Status_Flag_4_Y_N = 'N';

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  //?Dont adjust if getting Processing Date Range
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Adjust if getting slaughter date range
  EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Variety_Rendered_Cut);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Variety/Rendered/Cut is Cut
  IF LCL.Variety_Rendered_Cut = 'C';

  EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.Production_Date);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Process Data record

   CASE;

   // IF WRK.First Time Flag is Yes
   IF WRK.First_Time_Flag = 'Y';

   // WRK.First Time Flag = CND.NO
   WRK.First_Time_Flag = 'N';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.Kill Day Status is yes
   IF DB1.Kill_Day_Status = 'Y';

   // PAR.Kill Date = DB1.Plant Date of Last Order
   PAR.Kill_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Save earliest date   - thats not zero 5.5.15
  CASE;

  // IF PAR.Date From             USR EQ WRK.ZERO
  IF PAR.Date_From_USR = WRK.ZERO;

  // OR LCL.Production Date LT PAR.Date From             USR
  OR ( LCL.Production_Date < PAR.Date_From_USR;

  // AND LCL.Production Date is entered
  AND LCL.Production_Date <> *ZERO );

  // PAR.Date From             USR = LCL.Production Date
  PAR.Date_From_USR = LCL.Production_Date;

  ENDIF;

  //?Save latest date
  CASE;

  // IF LCL.Production Date GT PAR.Date To               USR
  IF LCL.Production_Date > PAR.Date_To_USR;

  // PAR.Date To               USR = LCL.Production Date
  PAR.Date_To_USR = LCL.Production_Date;

  ENDIF;

 }

 // WRK.Year Code = PAR.Date From             USR *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_From_USR 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Month                 USR = PAR.Date From             USR *MONTH
 WRK.Month_USR = DATEDTLS(PAR.Date_From_USR 'MO' 1111111 'NONE' 'N' 1);

 EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
 PARAMETER(WRK.Month_USR);
 PARAMETER(WRK.Month_Description_USR);
 {
  //?Execute internal function

  // PAR.Month Description     USR = CND.NOT ENTERED
  PAR.Month_Description_USR = *BLANK;

  CASE;

  // IF PAR.Month                 USR is January
  IF PAR.Month_USR = 01;

  // PAR.Month Description     USR = CON.January
  PAR.Month_Description_USR = 'January';

  // IF PAR.Month                 USR is February
  IF PAR.Month_USR = 02;

  // PAR.Month Description     USR = CON.February
  PAR.Month_Description_USR = 'February';

  // IF PAR.Month                 USR is March
  IF PAR.Month_USR = 03;

  // PAR.Month Description     USR = CON.March
  PAR.Month_Description_USR = 'March';

  // IF PAR.Month                 USR is April
  IF PAR.Month_USR = 04;

  // PAR.Month Description     USR = CON.April
  PAR.Month_Description_USR = 'April';

  // IF PAR.Month                 USR is May
  IF PAR.Month_USR = 05;

  // PAR.Month Description     USR = CON.May
  PAR.Month_Description_USR = 'May';

  // IF PAR.Month                 USR is June
  IF PAR.Month_USR = 06;

  // PAR.Month Description     USR = CON.June
  PAR.Month_Description_USR = 'June';

  // IF PAR.Month                 USR is July
  IF PAR.Month_USR = 07;

  // PAR.Month Description     USR = CON.July
  PAR.Month_Description_USR = 'July';

  // IF PAR.Month                 USR is August
  IF PAR.Month_USR = 08;

  // PAR.Month Description     USR = CON.August
  PAR.Month_Description_USR = 'August';

  // IF PAR.Month                 USR is September
  IF PAR.Month_USR = 09;

  // PAR.Month Description     USR = CON.September
  PAR.Month_Description_USR = 'September';

  // IF PAR.Month                 USR is October
  IF PAR.Month_USR = 10;

  // PAR.Month Description     USR = CON.October
  PAR.Month_Description_USR = 'October';

  // IF PAR.Month                 USR is November
  IF PAR.Month_USR = 11;

  // PAR.Month Description     USR = CON.November
  PAR.Month_Description_USR = 'November';

  // IF PAR.Month                 USR is December
  IF PAR.Month_USR = 12;

  // PAR.Month Description     USR = CON.December
  PAR.Month_Description_USR = 'December';

  ENDIF;

 }

 CASE;

 // IF PAR.Date From             USR is Entered
 IF PAR.Date_From_USR <> *ZERO;

 // Call program CLC Format Date Range  XF.
 CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Text_USR_40);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Text USR 40 = CON.*BLANK
 PAR.Text_USR_40 = *BLANK;

 ENDIF;

 // PAR.ED Date of Slaughter = CONCAT(DB1.ED Date of Slaughter Txt,PAR.Text USR 40,CON.2)
 PAR.ED_Date_of_Slaughter = DB1.ED_Date_of_Slaughter_Txt + PAR.Text_USR_40 (2);

 ENDDO;

 // LCL.ED Remark Constant 5 = DB1.ED Remark Constant 5
 LCL.ED_Remark_Constant_5 = DB1.ED_Remark_Constant_5;

 // LCL.ED Remark Constant 6 = DB1.ED Remark Constant 6
 LCL.ED_Remark_Constant_6 = DB1.ED_Remark_Constant_6;

 // LCL.ED Remark Constant 7 = DB1.ED Remark Constant 7
 LCL.ED_Remark_Constant_7 = DB1.ED_Remark_Constant_7;

 // LCL.ED Remark Constant 8 = DB1.ED Remark Constant 8
 LCL.ED_Remark_Constant_8 = DB1.ED_Remark_Constant_8;

 // PAR.ED Total Gross Weight MT = PAR.ED Total Gross Weight lbs / CON.2204.6 *
 PAR.ED_Total_Gross_Weight_MT = PAR.ED_Total_Gross_Weight_lbs / 2204.6;

 ENDIF;

 // WRK.ED Destination = DB1.ED Destination
 WRK.ED_Destination = DB1.ED_Destination;

 //?R17013 DN 03/11/21-Populate ED Destination if Not Entered.
 CASE;

 // IF WRK.ED Destination is Not Entered
 IF WRK.ED_Destination = *BLANK;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.Country_Code);
 PARAMETER(WRK.ED_Destination);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // LCL.ED Remark Constant 2 = DB1.ED Remark Constant 2
 LCL.ED_Remark_Constant_2 = DB1.ED_Remark_Constant_2;

 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // LCL.Order Alpha = CVTVAR(PAR.Order Number)
 LCL.Order_Alpha = CVTVAR(PAR.Order_Number);

 // LCL.Text-17               USR = CONCAT(CON.Order No.,LCL.Order Alpha,CON.1)
 LCL.Text_17_USR = 'Order No.' + LCL.Order_Alpha (1);

 // Execute function *Move-Right.
 EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
 PARAMETER(LCL.ED_Remark_Constant_2);
 PARAMETER(LCL.Text_17_USR);
 {
  C                     MOVE #IPANA    #OO9NA
 }

 ENDIF;

 //?R17013 DN 03/11/21-Move All Consignor Info to PAR Context.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Name = DB1.ED Consignor Name
 PAR.ED_Consignor_Name = DB1.ED_Consignor_Name;

 // PAR.ED Consignor Addr 1 = DB1.ED Consignor Addr 1
 PAR.ED_Consignor_Addr_1 = DB1.ED_Consignor_Addr_1;

 // PAR.ED Consignor Addr 2 = DB1.ED Consignor Addr 2
 PAR.ED_Consignor_Addr_2 = DB1.ED_Consignor_Addr_2;

 // PAR.ED Consignor Addr 3 = DB1.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_3 = DB1.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 4 = DB1.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_4 = DB1.ED_Consignor_Addr_4;

 // PAR.ED Consignor State = DB1.ED Consignor State
 PAR.ED_Consignor_State = DB1.ED_Consignor_State;

 // PAR.ED Consignor Postal = DB1.ED Consignor Postal
 PAR.ED_Consignor_Postal = DB1.ED_Consignor_Postal;

 // PAR.ED Consignor Country Code = DB1.ED Consignor Country Code
 PAR.ED_Consignor_Country_Code = DB1.ED_Consignor_Country_Code;

 ENDIF;

 //?Override ED Consignee Address Nbr.
 CASE;

 // IF WRK.A/R Customer Number is Itochu
 IF WRK.AR_Customer_Number = 909001;

 // LCL.ED Consignee Address Nbr = CON.72
 LCL.ED_Consignee_Address_Nbr = 72;

 //?Override ED Consignee Address Nbr.
 // IF WRK.A/R Customer Number is Lacto
 IF WRK.AR_Customer_Number = 1204211;

 // LCL.ED Consignee Address Nbr = CON.275
 LCL.ED_Consignee_Address_Nbr = 275;

 //?Override ED Consignee Address Nbr.
 // IF WRK.A/R Customer Number is Maruha
 IF WRK.AR_Customer_Number = 2003201;

 // LCL.ED Consignee Address Nbr = CON.71
 LCL.ED_Consignee_Address_Nbr = 71;

 //?Override ED Consignee Address Nbr.
 // IF WRK.A/R Customer Number is Mitsubishi
 IF WRK.AR_Customer_Number = 1327021;

 // LCL.ED Consignee Address Nbr = CON.1008
 LCL.ED_Consignee_Address_Nbr = 1008;

 //?Override ED Consignee Address Nbr.
 // IF WRK.A/R Customer Number is Uno International LLC
 IF WRK.AR_Customer_Number = 2142051;

 //?R17013 DN 03/11/21-Override to Use 'Uno International' for Consignor Info
 EXECUTE FUNCTION(Rtv Consignee Info    RT) TYPE(RTVOBJ) FILE(POA2REP)           AC2196031;
 PARAMETER(1898);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(NLL.Consignee_Telephone);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?R13944 DN 12/10/18-Rtv/Set Info to Update Export Doc Order Hdr Ext.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Set Attachment Type Text.
 CASE;

 // IF DB1.ED Attachment Type Sts is Not Selected
 IF DB1.ED_Attachment_Type_Sts = *BLANK;

 // LCL.EDE Attachment Type Txt = CND.Not Entered
 LCL.EDE_Attachment_Type_Txt = *BLANK;

 //?Set Attachment Type Text.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE Attachment Type Txt = Condition name of DB1.ED Attachment Type Sts
 LCL.EDE_Attachment_Type_Txt = RTVCND(DB1.ED_Attachment_Type_Sts);

 ENDIF;

 //?Set Attachment Sub Type Text.
 CASE;

 // IF DB1.ED Attachment Subtype is Not Selected
 IF DB1.ED_Attachment_Subtype = *BLANK;

 // LCL.EDE Attachment Sub Type = CND.Not Entered
 LCL.EDE_Attachment_Sub_Type = *BLANK;

 //?Set Attachment Sub Type Text.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE Attachment Sub Type = Condition name of DB1.ED Attachment Subtype
 LCL.EDE_Attachment_Sub_Type = RTVCND(DB1.ED_Attachment_Subtype);

 ENDIF;

 //?Set EDE PHIS Action.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // LCL.EDE PHIS Action = CND.New
 LCL.EDE_PHIS_Action = 'N';

 //?Set EDE PHIS Action.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.EDE PHIS Action = LCL.USR Blank Field
 LCL.EDE_PHIS_Action = LCL.USR_Blank_Field;

 ENDIF;

 //?Process One Time Since Info will be the Same for Order.
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // LCL.EDE I Certify Stmt = CND.Meat
 LCL.EDE_I_Certify_Stmt = 'MEAT';

 // LCL.EDE USDA Export Mark Sts = CND.USDA Export Mark
 LCL.EDE_USDA_Export_Mark_Sts = 1;

 EXECUTE FUNCTION(Rtv Country ISO Code  RT) TYPE(RTVOBJ) FILE(PNHAREP)           AC2151542;
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.EDE_ISO_Alpha_2_code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?R15161 DN 07/29/19-Changed to Get Booking #.
 EXECUTE FUNCTION(RTV for Exp Doc Dflts RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2161322;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.OHE_Booking_Number);
 PARAMETER(LCL.OHE_Discharge_Port_Airprt);
 PARAMETER(NLL.OHE_Sail_Flight_Date);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Info 4/Export Doc RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2161323;
 PARAMETER(WRK.Load_ID);
 PARAMETER(LCL.Seal_1);
 PARAMETER(LCL.Seal_2);
 PARAMETER(LCL.Container_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.EDE Seal Nos = CONCAT(LCL.Seal 1,LCL.Seal 2,CON.1)
 LCL.EDE_Seal_Nos = LCL.Seal_1 + LCL.Seal_2 (1);

 //?Will not populate City/St/Zip/Phone.
 ENDIF;

 ENDIF;

 //?DO2642 DN 06/29/22-Override Consignor Info w/ H Record to Create A Record.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 //?Consignor Address info should always match what's printed on the
 //?Health Certificate & the Application Export documents.
 EXECUTE FUNCTION(Rtv Consignor fm H Doc RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC2206414;
 PARAMETER(PAR.Company_Number);
 PARAMETER('H');
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check Return Code. Some Countries may not have a 'H' Record.
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Check Return Code. Some Countries may not have a 'H' Record.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Name = DB1.ED Consignor Name
 PAR.ED_Consignor_Name = DB1.ED_Consignor_Name;

 // PAR.ED Consignor Addr 1 = DB1.ED Consignor Addr 1
 PAR.ED_Consignor_Addr_1 = DB1.ED_Consignor_Addr_1;

 // PAR.ED Consignor Addr 2 = DB1.ED Consignor Addr 2
 PAR.ED_Consignor_Addr_2 = DB1.ED_Consignor_Addr_2;

 // PAR.ED Consignor Addr 3 = DB1.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_3 = DB1.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 4 = DB1.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_4 = DB1.ED_Consignor_Addr_4;

 // PAR.ED Consignor State = DB1.ED Consignor State
 PAR.ED_Consignor_State = DB1.ED_Consignor_State;

 // PAR.ED Consignor Postal = DB1.ED Consignor Postal
 PAR.ED_Consignor_Postal = DB1.ED_Consignor_Postal;

 // PAR.ED Consignor Country Code = DB1.ED Consignor Country Code
 PAR.ED_Consignor_Country_Code = DB1.ED_Consignor_Country_Code;

 ENDIF;

 ENDIF;

 //?R13944 DN 12/10/18-Send in Seal 1 & 2 from Load Header.
 //?S14766 DN 04/02/19-Send in Container # from Load Header.
 //?R16637 DN 10/01/20-Set New Consignor/Consignee Fields.
 //?R17013 DN 03/11/21-Changed to Populate All Consignor Fields from PAR Ctxt.
 EXECUTE FUNCTION(Crt Exp Doc Order Hdr  CR) TYPE(CRTOBJ) FILE(PDMRREP)          AC1523842;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.ED_Area_Office);
 PARAMETER(WRK.ED_Destination);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.ED_Consignee_Name);
 PARAMETER(PAR.ED_Consignee_Addr_1);
 PARAMETER(LCL.ED_Consignee_Addr_2);
 PARAMETER(LCL.ED_Consignee_Addr_3);
 PARAMETER(PAR.ED_Consignee_Addr_4);
 PARAMETER(PAR.ED_Consignee_State);
 PARAMETER(PAR.ED_Consignee_Postal);
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(DB1.ED_Plant_Location_City);
 PARAMETER(DB1.ED_Plant_Location_State);
 PARAMETER(PAR.ED_Plant_Number);
 PARAMETER(DB1.ED_Processing_Plant_Sts);
 PARAMETER(DB1.ED_Attachment_Subtype);
 PARAMETER(DB1.ED_Attachment_Type_Sts);
 PARAMETER(DB1.ED_Xlate_Desc_to_Country);
 PARAMETER(DB1.ED_Unmarked_Txt);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Date_of_Slaughter);
 PARAMETER(DB1.ED_Place_of_Slaughter_Txt);
 PARAMETER(PAR.ED_Date_of_Processing);
 PARAMETER(DB1.ED_Place_of_processing_Tx);
 PARAMETER(DB1.ED_Continue_Comment_Txt);
 PARAMETER(DB1.ED_Remark_Constant_1);
 PARAMETER(LCL.ED_Remark_Constant_2);
 PARAMETER(DB1.ED_Remark_Constant_3);
 PARAMETER(DB1.ED_Remark_Constant_4);
 PARAMETER(LCL.ED_Remark_Constant_5);
 PARAMETER(LCL.ED_Remark_Constant_7);
 PARAMETER(LCL.ED_Remark_Constant_8);
 PARAMETER(DB1.ED_Certify_that_the_meat);
 PARAMETER(DB1.ED_Inspector_Name);
 PARAMETER(DB1.ED_Origin_Country);
 PARAMETER(DB1.ED_Port_of_Loading);
 PARAMETER(DB1.ED_Transportion);
 PARAMETER(LCL.Seal_1);
 PARAMETER(LCL.Seal_2);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Nm);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_1);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Ad_2);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Fax);
 PARAMETER(DB1.ED_Can_Import_Cntrl_Phne);
 PARAMETER(DB1.ED_Seaboard_Plant_Fax);
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US);
 PARAMETER(DB1.ED_USDA_Cert_Nbr_CA);
 PARAMETER(DB1.ED_Can_Port_of_Entry);
 PARAMETER(DB1.ED_Can_Reinsp_Est_Nbr);
 PARAMETER(DB1.ED_Can_Reinsp_Est_Name);
 PARAMETER(DB1.ED_Can_Reinsp_Est_City);
 PARAMETER(DB1.ED_Herm_Sealed_Cntr_Sts);
 PARAMETER(DB1.ED_Herm_Sealed_Cntr_Type);
 PARAMETER(DB1.ED_Herm_Sealed_Cntr_p_Crt);
 PARAMETER(DB1.ED_Whole_Bird_Sts);
 PARAMETER(DB1.ED_Marked_Sts);
 PARAMETER(DB1.ED_Tamper_Evident_Sts);
 PARAMETER(DB1.ED_Plant_Contact_Name);
 PARAMETER(DB1.ED_Plant_Contact_Phone);
 PARAMETER(PAR.ED_Modified_Text);
 PARAMETER(DB1.ED_Issued_Crt_for_Exp_Txt);
 PARAMETER(DB1.ED_Species);
 PARAMETER(DB1.ED_Slaughter_Plant_Name);
 PARAMETER(DB1.ED_Slaughter_Plant_Addr_1);
 PARAMETER(DB1.ED_Slaughter_Plant_Addr_2);
 PARAMETER(DB1.ED_Packaging_Plant_Name);
 PARAMETER(DB1.ED_Packaging_Plant_Addr_1);
 PARAMETER(DB1.ED_Packaging_Plant_Addr_2);
 PARAMETER(DB1.ED_Manufact_Plant_Name);
 PARAMETER(DB1.ED_Manufact_Plant_Addr_1);
 PARAMETER(DB1.ED_Manufact_Plant_Addr_2);
 PARAMETER(DB1.ED_USDA_Name_1);
 PARAMETER(DB1.ED_USDA_Name_2);
 PARAMETER(DB1.ED_USDA_Name_3);
 PARAMETER(DB1.ED_Title_of_Official);
 PARAMETER(DB1.ED_Letter_of_Credit_Nbr);
 PARAMETER(PAR.ED_Unused_prd_mo_yr);
 PARAMETER(DB1.ED_Nbr_of_prods_on_1st_pg);
 PARAMETER(DB1.ED_Importer_Name);
 PARAMETER(DB1.ED_Importer_Addr_1);
 PARAMETER(DB1.ED_Importer_Addr_2);
 PARAMETER(DB1.ED_Purchaser_Name);
 PARAMETER(DB1.ED_Purchaser_Addr_1);
 PARAMETER(DB1.ED_Purchaser_Addr_2);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.ED_Currency);
 PARAMETER(DB1.ED_Conditions_of_Sale);
 PARAMETER(PAR.ED_Total_Unit_Price);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(DB1.ED_Live_with_PHIS);
 PARAMETER('N');
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.ED_Total_Gross_Weight_MT);
 PARAMETER(DB1.ED_Plant_Number_Dtl);
 PARAMETER(PAR.ED_Language_Xlate_Desc_2);
 PARAMETER(DB1.ED_Slaughter_Date_CofE_3);
 PARAMETER(DB1.ED_Production_mo_yr_ln_3);
 PARAMETER(LCL.ED_Remark_Constant_6);
 PARAMETER(DB1.ED_Allow_Print_bef_Ship);
 PARAMETER(DB1.ED_Cert_of_Orig_Sbd_addr);
 PARAMETER(DB1.ED_Use_item_label_1_2);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(DB1.ED_Total_Package_UOM);
 PARAMETER(DB1.ED_Export_Certificate_Nbr);
 PARAMETER(DB1.ED_Sail_Date);
 PARAMETER(DB1.ED_Sworn_on_Date);
 PARAMETER(LCL.ED_Consignee_Address_Nbr);
 PARAMETER(DB1.ED_Form_Identification_Tx);
 PARAMETER(DB1.ED_Cold_Storage_Name);
 PARAMETER(DB1.ED_Cold_Storage_Addr_1);
 PARAMETER(DB1.ED_Cold_Storage_Addr_2);
 PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
 PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_2);
 PARAMETER(DB1.ED_Booking_Nbr);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ED_Packing_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ED_Packing_Date_To);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(LCL.Container_Number);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_2);
 PARAMETER(PAR.ED_Submit_Status);
 PARAMETER(PAR.EDOH_Unused_Sts_2);
 PARAMETER(PAR.EDOH_Unused_Text_1);
 PARAMETER(PAR.EDOH_Unused_Text_2);
 PARAMETER(PAR.EDOH_Unused_Number_1);
 PARAMETER(PAR.EDOH_Unused_Date_1);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?S14766 DN 04/02/19-Send in Seal Nos.
 //?DO2416 DN 04/15/22-Send in blanks for unused PHIS Info in PUA6CPP.
 EXECUTE FUNCTION(Rtv/Crt from OE       RT) TYPE(RTVOBJ) FILE(PUA6CPP)           AC2151537;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(*BLANK);
 PARAMETER(1);
 PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
 PARAMETER(LCL.EDE_ISO_Alpha_2_code);
 PARAMETER(LCL.EDE_USDA_Export_Mark_Sts);
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.EDE_I_Certify_Stmt);
 PARAMETER(LCL.EDE_Attachment_Type_Txt);
 PARAMETER(LCL.EDE_Attachment_Sub_Type);
 PARAMETER(LCL.Container_Number);
 PARAMETER(LCL.OHE_Discharge_Port_Airprt);
 PARAMETER(0);
 PARAMETER(LCL.EDE_Seal_Nos);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.EDE_PHIS_Action);
 {
  //?USER: Processing if Data record not found

  //?DO2416 DN 04/15/22-Undo Unused Consignee PHIS Fields. Set to Blank.
  EXECUTE FUNCTION(Crt Exp Doc Order Ext CR) TYPE(CRTOBJ) FILE(PUA6CPP)           AC2150707;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.EDE_Reason_f_Replcmnt_Sts);
  PARAMETER(PAR.EDE_Shipment_Type_Sts);
  PARAMETER(PAR.EDE_Frozen_Shelf_Life_Sts);
  PARAMETER(PAR.EDE_ISO_Alpha_2_code);
  PARAMETER(PAR.EDE_USDA_Export_Mark_Sts);
  PARAMETER(LCL.EDE_Special_Printing_Ctl);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.EDE_Country_of_Final_Dest);
  PARAMETER(PAR.EDE_I_Certify_Stmt);
  PARAMETER(PAR.EDE_Attachment_Type_Txt);
  PARAMETER(PAR.EDE_Attachment_Sub_Type);
  PARAMETER(LCL.EDE_Transit_Country);
  PARAMETER(PAR.EDE_Container_Number);
  PARAMETER(LCL.EDE_Unused_Text_25);
  PARAMETER(LCL.EDE_Additional_Stmt);
  PARAMETER(PAR.EDE_Maturity_lt_30_Months);
  PARAMETER(PAR.EDE_Seal_Nos);
  PARAMETER(PAR.EDE_IFS_PHIS_Doc_Filename);
  PARAMETER(PAR.EDE_Port_of_Entry);
  PARAMETER(PAR.EDE_Unused_2);
  PARAMETER(PAR.EDE_Unused_3);
  PARAMETER(LCL.EDE_Unused_4);
  PARAMETER(LCL.EDE_Unused_5);
  PARAMETER(LCL.EDE_Consignee_Tele_PHIS);
  PARAMETER(PAR.EDE_Unused_6);
  PARAMETER(PAR.EDE_Unused_7);
  PARAMETER(LCL.EDE_Unused_8);
  PARAMETER(PAR.EDE_Unused_9);
  PARAMETER(PAR.EDE_Unused_10);
  PARAMETER(PAR.EDE_Unused_11);
  PARAMETER(PAR.EDE_Consignor_Tele_PHIS);
  PARAMETER(LCL.EDE_PHIS_Process_Status);
  PARAMETER(LCL.EDE_ETL_Process_Timestamp);
  PARAMETER(PAR.EDE_PHIS_Action);
  PARAMETER(LCL.EDE_Return_Cde_Error);
  PARAMETER(LCL.EDE_Application_UID);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  //?shipment type
  CASE;

  // IF DB1.EDE Shipment Type Sts NE WRK.Blank for 3          USR
  IF DB1.EDE_Shipment_Type_Sts <> WRK.Blank_for_3_USR;

  // LCL.EDE Shipment Type Sts = DB1.EDE Shipment Type Sts
  LCL.EDE_Shipment_Type_Sts = DB1.EDE_Shipment_Type_Sts;

  //?shipment type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Shipment Type Sts = PAR.EDE Shipment Type Sts
  LCL.EDE_Shipment_Type_Sts = PAR.EDE_Shipment_Type_Sts;

  ENDIF;

  //?replacement reason
  CASE;

  // IF DB1.EDE Reason f/Replcmnt Sts NE WRK.Blank for 3          USR
  IF DB1.EDE_Reason_f_Replcmnt_Sts <> WRK.Blank_for_3_USR;

  // LCL.EDE Reason f/Replcmnt Sts = DB1.EDE Reason f/Replcmnt Sts
  LCL.EDE_Reason_f_Replcmnt_Sts = DB1.EDE_Reason_f_Replcmnt_Sts;

  //?replacement reason
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Reason f/Replcmnt Sts = PAR.EDE Reason f/Replcmnt Sts
  LCL.EDE_Reason_f_Replcmnt_Sts = PAR.EDE_Reason_f_Replcmnt_Sts;

  ENDIF;

  //?shelf life
  CASE;

  // IF DB1.EDE Frozen/Shelf Life Sts NE WRK.Blank for 3          USR
  IF DB1.EDE_Frozen_Shelf_Life_Sts <> WRK.Blank_for_3_USR;

  // LCL.EDE Frozen/Shelf Life Sts = DB1.EDE Frozen/Shelf Life Sts
  LCL.EDE_Frozen_Shelf_Life_Sts = DB1.EDE_Frozen_Shelf_Life_Sts;

  //?shelf life
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Frozen/Shelf Life Sts = PAR.EDE Frozen/Shelf Life Sts
  LCL.EDE_Frozen_Shelf_Life_Sts = PAR.EDE_Frozen_Shelf_Life_Sts;

  ENDIF;

  //?Container Number.                             S14766 DN 04/02/19
  CASE;

  // IF DB1.EDE Container Number is Not Entered
  IF DB1.EDE_Container_Number = *BLANK;

  // LCL.EDE Container Number = PAR.EDE Container Number
  LCL.EDE_Container_Number = PAR.EDE_Container_Number;

  //?Container Number.                             S14766 DN 04/02/19
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Container Number = DB1.EDE Container Number
  LCL.EDE_Container_Number = DB1.EDE_Container_Number;

  ENDIF;

  //?Seal Nos.                                     S14766 DN 04/02/19
  CASE;

  // IF DB1.EDE Seal Nos is Not Entered
  IF DB1.EDE_Seal_Nos = *BLANK;

  // LCL.EDE Seal Nos = PAR.EDE Seal Nos
  LCL.EDE_Seal_Nos = PAR.EDE_Seal_Nos;

  //?Seal Nos.                                     S14766 DN 04/02/19
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Seal Nos = DB1.EDE Seal Nos
  LCL.EDE_Seal_Nos = DB1.EDE_Seal_Nos;

  ENDIF;

  //?IFS PHIS Doc Filename                         DO2416 DN 04/15/22
  CASE;

  // IF DB1.EDE IFS PHIS Doc Filename is Not entered
  IF DB1.EDE_IFS_PHIS_Doc_Filename = *BLANK;

  // LCL.EDE IFS PHIS Doc Filename = PAR.EDE IFS PHIS Doc Filename
  LCL.EDE_IFS_PHIS_Doc_Filename = PAR.EDE_IFS_PHIS_Doc_Filename;

  //?IFS PHIS Doc Filename                         DO2416 DN 04/15/22
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE IFS PHIS Doc Filename = DB1.EDE IFS PHIS Doc Filename
  LCL.EDE_IFS_PHIS_Doc_Filename = DB1.EDE_IFS_PHIS_Doc_Filename;

  ENDIF;

  //?Port of Entry                                 DO2416 DN 04/15/22
  CASE;

  // IF DB1.EDE Port of Entry is Not entered
  IF DB1.EDE_Port_of_Entry = *BLANK;

  // LCL.EDE Port of Entry = PAR.EDE Port of Entry
  LCL.EDE_Port_of_Entry = PAR.EDE_Port_of_Entry;

  //?Port of Entry                                 DO2416 DN 04/15/22
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.EDE Port of Entry = DB1.EDE Port of Entry
  LCL.EDE_Port_of_Entry = DB1.EDE_Port_of_Entry;

  ENDIF;

  EXECUTE FUNCTION(Chg Exp Doc Order Ext CH) TYPE(CHGOBJ) FILE(PUA6CPP)           AC2150708;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(LCL.EDE_Reason_f_Replcmnt_Sts);
  PARAMETER(LCL.EDE_Shipment_Type_Sts);
  PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
  PARAMETER(DB1.EDE_ISO_Alpha_2_code);
  PARAMETER(DB1.EDE_USDA_Export_Mark_Sts);
  PARAMETER(DB1.EDE_Special_Printing_Ctl);
  PARAMETER(DB1.EDE_Appl_Billing_First_Nm);
  PARAMETER(DB1.EDE_Appl_Billing_Last_Nm);
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDE_Country_of_Final_Dest);
  PARAMETER(DB1.EDE_I_Certify_Stmt);
  PARAMETER(DB1.EDE_Attachment_Type_Txt);
  PARAMETER(DB1.EDE_Attachment_Sub_Type);
  PARAMETER(DB1.EDE_Transit_Country);
  PARAMETER(LCL.EDE_Container_Number);
  PARAMETER(DB1.EDE_Unused_Text_25);
  PARAMETER(DB1.EDE_Additional_Stmt);
  PARAMETER(DB1.EDE_Maturity_lt_30_Months);
  PARAMETER(LCL.EDE_Seal_Nos);
  PARAMETER(LCL.EDE_IFS_PHIS_Doc_Filename);
  PARAMETER(LCL.EDE_Port_of_Entry);
  PARAMETER(DB1.EDE_Unused_2);
  PARAMETER(DB1.EDE_Unused_3);
  PARAMETER(DB1.EDE_Unused_4);
  PARAMETER(DB1.EDE_Unused_5);
  PARAMETER(DB1.EDE_Consignee_Tele_PHIS);
  PARAMETER(DB1.EDE_Unused_6);
  PARAMETER(DB1.EDE_Unused_7);
  PARAMETER(DB1.EDE_Unused_8);
  PARAMETER(DB1.EDE_Unused_9);
  PARAMETER(DB1.EDE_Unused_10);
  PARAMETER(DB1.EDE_Unused_11);
  PARAMETER(DB1.EDE_Consignor_Tele_PHIS);
  PARAMETER(DB1.EDE_PHIS_Process_Status);
  PARAMETER(DB1.EDE_ETL_Process_Timestamp);
  PARAMETER(DB1.EDE_PHIS_Action);
  PARAMETER(DB1.EDE_Return_Cde_Error);
  PARAMETER(DB1.EDE_Application_UID);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?R15161 DN 07/29/19-Update Export Doc Order Hdr Ext2 for Booking #.
 EXECUTE FUNCTION(Upd Crt/Chg for Order  IF) TYPE(EXCINTFUN)                     AC2173632;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(LCL.OHE_Booking_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Upd Crt/Chg for Order  RT) TYPE(RTVOBJ) FILE(PUBICPP)          AC2173628;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.EDE2_Booking_Number);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Exp Doc Ord Hdr E2 CR) TYPE(CRTOBJ) FILE(PUBICPP)          AC2172399;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(PAR.EDE2_Booking_Number);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(LCL.Blank_1_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   //?USER: Process Data record

   CASE;

   // IF DB1.EDE2 Booking Number is Not Entered
   IF DB1.EDE2_Booking_Number = *BLANK;

   // LCL.EDE2 Booking Number = PAR.EDE2 Booking Number
   LCL.EDE2_Booking_Number = PAR.EDE2_Booking_Number;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.EDE2 Booking Number = DB1.EDE2 Booking Number
   LCL.EDE2_Booking_Number = DB1.EDE2_Booking_Number;

   ENDIF;

   EXECUTE FUNCTION(Chg Exp Doc Ord Hdr E2 CH) TYPE(CHGOBJ) FILE(PUBICPP)          AC2172400;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);
   PARAMETER(DB1.EDE2_Container_Nbrs);
   PARAMETER(DB1.EDE2_Actual_Shipped_Date);
   PARAMETER(DB1.EDE2_Seal_Nos);
   PARAMETER(DB1.EDE2_Export_Shipper_Name);
   PARAMETER(DB1.EDE2_Unused_Status_1);
   PARAMETER(DB1.EDE2_Unused_Status_2);
   PARAMETER(LCL.EDE2_Booking_Number);
   PARAMETER(DB1.EDE2_Unused_Text_2);
   PARAMETER(DB1.EDE2_Unused_Text_3);
   PARAMETER(DB1.EDE2_Unused_Nbr_1);
   PARAMETER(DB1.EDE2_Unused_Nbr_2);
   PARAMETER(DB1.EDE2_Unused_Date_1);
   PARAMETER(DB1.EDE2_Unused_Date_2);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

}


ENDDO;

//?** Create the Shipping Instructions       (F13 in O.E.)
DO;

// WRK.Shipping Instructions = CONCAT(CON.Marks=,PAR.ED Shipping Marks Txt,CON.*ZERO)
WRK.Shipping_Instructions = 'Marks=' + PAR.ED_Shipping_Marks_Txt (*ZERO);

// Call program CRT JCO Shipping Instr XF.
CALL PROGRAM(CRT JCO Shipping Instr XF) ('PMB1XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Shipping_Instructions);

//?* Add a line to the Shipping Instructions for shipping  E009987
//?10/08/21 DN W85258 - Update Shipping Instructions Verbiage.
// LCL.Description 1 usr = CONCAT(CON.Use DeltaTrak FlashLink,CON.Mini,CON.1)
LCL.Description_1_usr = 'Use DeltaTrak FlashLink' + 'Mini' (1);

// Call program CRT JCO Shipping Instr XF.
CALL PROGRAM(CRT JCO Shipping Instr XF) ('PMB1XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Description_1_usr);

// LCL.Description 2 usr = CONCAT(CON.PDF- Model 31010 temperat,CON.ure,CON.*ZERO)
LCL.Description_2_usr = 'PDF- Model 31010 temperat' + 'ure' (0);

// Call program CRT JCO Shipping Instr XF.
CALL PROGRAM(CRT JCO Shipping Instr XF) ('PMB1XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Description_2_usr);

// LCL.Description 3 usr = CON.recorder on this load
LCL.Description_3_usr = 'recorder on this load';

// Call program CRT JCO Shipping Instr XF.
CALL PROGRAM(CRT JCO Shipping Instr XF) ('PMB1XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Description_3_usr);

ENDDO;

//?** Run the Post for the uploaded orders
DO;

//?* Change to Post that receives Consignee info         E004201
//?10/01/20 DN R16637-Passed in New Consignee Fields. (Reinstated)
// Call program EDT Post Opn Japan Ord XF.
CALL PROGRAM(EDT Post Opn Japan Ord XF) ('PBS4XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('EOA');
PARAMETER(PAR.ED_Consignee_Name);
PARAMETER(PAR.ED_Consignee_Addr_1);
PARAMETER(PAR.ED_Consignee_Addr_2);
PARAMETER(PAR.ED_Consignee_Addr_3);
PARAMETER(PAR.ED_Consignee_Addr_4);
PARAMETER(PAR.ED_Consignee_State);
PARAMETER(PAR.ED_Consignee_Postal);
PARAMETER(PAR.ED_Consignee_Country_Code);

ENDDO;

