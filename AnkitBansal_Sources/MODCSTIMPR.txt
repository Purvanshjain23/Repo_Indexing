**Free
//*****************************************************************************
//‚Company: Seaboard Foods Inc.
//‚Author : Ankit Bansal
//‚Desc   : MODCSTIMPR - Apply Constraints via Implementer
//‚Caller : Implementer - Option 42, F10=*ALL Spec Cmds, IEXCRQSDTL Command
//‚Issue# : Constraints are not implemented via Implementer
//‚Date   : 02/26/2024
//
//‚Compiler Instructions:
//
//*****************************************************************************
// Modification Log
// Date        Author    Issue#     Desc
// MM/DD/YYYY
//*****************************************************************************

//*****************************************************************************
//‚Control Level specifications
//*****************************************************************************
Ctl-Opt AlwNull(*UsrCtl)
        Option(*NoDebugIO:*SrcStmt)
        DftActGrp(*NO);

//*****************************************************************************
//‚File Level specifications
//*****************************************************************************
Dcl-F PVBVREL2 Disk Usage(*Input) Keyed Alias Prefix(L2_);
Dcl-F PVBVREL3 Disk Usage(*Input) Keyed Alias Prefix(L3_);
Dcl-F PVBVREL4 Disk Usage(*Input) Keyed Alias Prefix(L4_);
Dcl-F PVBVREL6 Disk Usage(*Input) Keyed Alias Prefix(L6_);

//*****************************************************************************
//‚Declare program prototypes
//*****************************************************************************
Dcl-PR MODCSTIMPR ExtPgm('MODCSTIMPR');
  P_ObjCod Char(10);
  P_Object Char(10);
  P_TrgEnv Char(10);
  P_EnvLib Char(10);
End-PR;

Dcl-PR QCmdExc ExtPgm('QCMDEXC');
  P_Cmd Char(200) Options(*VarSize) Const;
  P_CmdLen Packed(15:5) Const;
End-PR;

Dcl-PI MODCSTIMPR;
  P_ObjCod Char(10);
  P_Object Char(10);
  P_TrgEnv Char(10);
  P_EnvLib Char(10);
End-PI;

//*****************************************************************************
//‚Declare Standalone Variables
//*****************************************************************************
Dcl-S w_ObjLib Char(10);
Dcl-S w_ModelLibrary Char(10);
Dcl-S w_Cmd Char(800);
Dcl-S w_TableLongName Char(25);
Dcl-S W_FieldShortName Char(25);
Dcl-S W_PrimaryKeys Char(500);
Dcl-S W_ForeignKeys Char(500);
Dcl-S W_RefTableShortName Char(10);
Dcl-S W_RefFieldShortName Char(10);
Dcl-S W_ReferencedFields Char(500);
Dcl-S W_ForeignKeyProcessed Char(1200);
Dcl-S W_ConstraintName Char(110);
Dcl-S W_Error Char(110);

//‚Declare named constants
Dcl-C PRIKEY 'ADDPFCST FILE(&LIB/&FILE) TYPE(*PRIKEY) KEY(&KEYS) +
              CST(&CST_NAME)';
Dcl-C FRNKEY 'ADDPFCST FILE(&LIB/&FILE) TYPE(*REFCST) KEY(&KEYS) +
              CST(&CST_NAME) PRNFILE(&REFLIB/&REFFILE) PRNKEY(&REFKEYS)';

//‚Declare Data Structures

// ****************************************************************************
//‚Processing logic
// ****************************************************************************

ExSr ZApplyConstraints;

ExSr ZPostProcessing;

// Exit from the program
*Inlr = *On;
Return;

//*****************************************************************************
//‚Initialize Subroutine
//*****************************************************************************
BegSr *InzSr;

  //‚Constraints will be applied only on YSQLPF i.e. Table type of objects
  If P_ObjCod <> 'YSQLPF';
    *InLr = *On;
    Return;
  EndIf;

  //‚Only process further when there is any configuration present in PVBVREP file
  Chain P_Object PVBVREL6;
  If %Found;
    W_TableLongName = L6_Table_Name;
    w_ModelLibrary = L6_Model_Library;
  Else;
    *InLr = *On;
    Return;
  EndIf;

  w_ObjLib = P_EnvLib;

EndSr;

//*****************************************************************************
//‚Drop Existing Constraints - Check if it is really required
//*****************************************************************************
BegSr ZDropConstraints;
  w_Cmd = 'RMVPFCST FILE(' + %Trim(W_ObjLib) + '/' + %Trim(P_Object) +
           ') CST(*ALL) TYPE(*ALL)';
  CallP(E) QCmdExc(W_Cmd:%Len(W_Cmd));

EndSr;

//*****************************************************************************
//‚Apply Primary Keys, Foreign Keys and other constraints
//*****************************************************************************
BegSr ZApplyConstraints;

  w_ConstraintName = *Blanks;

  //‚PVBVREL2 only has Primary Key records as 'Primary Key' = 'Y'
  //‚and active records are chosen
  SetLL (w_ModelLibrary:w_TableLongName) PVBVREL2;
  ReadE (w_ModelLibrary:w_TableLongName) PVBVREL2;
  Dow Not %EoF;

    //‚Get the constraint name
    If w_ConstraintName = *Blanks;
      w_ConstraintName = L2_Primary_Key_Name;
    EndIf;

    If L2_Field_Gen_Name = *Blanks;
      w_Error = 'Primary Key fld Name is blank for ' + %Trim(w_TableLongName);
      Leave;
    Else;
      w_FieldShortName = L2_Field_Gen_Name;
    EndIf;

    w_PrimaryKeys = %Trim(w_PrimaryKeys) + ' ' + w_FieldShortName;

    ReadE (w_ModelLibrary:w_TableLongName) PVBVREL2;
  EndDo;

  //‚Finally build the primary key
  If w_PrimaryKeys <> *Blanks;
    W_Cmd = PriKey;
    W_Cmd = %ScanRpl('&LIB':%Trim(W_ObjLib):W_Cmd);
    W_Cmd = %ScanRpl('&FILE':%Trim(P_Object):W_Cmd);
    W_Cmd = %ScanRpl('&KEYS':%Trim(W_PrimaryKeys):W_Cmd);
    W_Cmd = %ScanRpl('&CST_NAME':%Trim(w_ConstraintName):W_Cmd);
    CallP(E) QCmdExc(W_Cmd:%Len(W_Cmd));
  EndIf;

  w_ConstraintName = *Blanks;
  //‚Add 'FOREIGN KEY' Constraint, Read Each foreign key record
  SetLL (w_ModelLibrary:w_TableLongName:'Y') PVBVREL3;
  ReadE (w_ModelLibrary:w_TableLongName:'Y') PVBVREL3;
  Dow Not %EoF;

    //‚Constraint already processed?
    If %Scan(L3_Foreign_Key_Name:W_ForeignKeyProcessed) > 0;
      ReadE (w_ModelLibrary:w_TableLongName:'Y') PVBVREL3;
      Iter;
    EndIf;

    W_ForeignKeys = *Blanks;
    W_Cmd = *Blanks;
    W_ConstraintName = L3_Foreign_Key_Name;
    W_ForeignKeyProcessed = %Trim(W_ForeignKeyProcessed) + ' ' +
                            %Trim(W_ConstraintName);
    If L3_Referenced_Table_Gen_Name = *Blanks;
      w_Error = 'Referred table is blank for constraint ' +
                %Trim(w_ConstraintName);
      Leave;
    Else;
      W_RefTableShortName = L3_Referenced_Table_Gen_Name;
    EndIf;
    W_ReferencedFields = *Blanks;

    //‚Each different foreign key should have a different name,
    //‚process one foreign key fully
    SetLL (w_ModelLibrary:w_TableLongName:w_ConstraintName) PVBVREL4;
    ReadE (w_ModelLibrary:w_TableLongName:w_ConstraintName) PVBVREL4;
    Dow Not %EoF;

      //‚Get Referrring file & field details
      If L4_Field_Gen_Name = *Blanks;
        w_Error = 'Referring field ' + %Trim(L4_Field_Gen_Name) +
                  ' is blank for constraint ' + %Trim(w_ConstraintName);
        Leave;
      Else;
        w_FieldShortName = L4_Field_Gen_Name;
        W_ForeignKeys = %Trim(W_ForeignKeys) + ' ' + %Trim(W_FieldShortName);
      EndIf;

      //‚Get Referred file & field details
      If L4_Referenced_Field_Gen_Name = *Blanks;
        w_Error = 'Referenced field ' + %Trim(L4_Referenced_Field_Gen_Name) +
                  ' is blank for constraint ' + %Trim(w_ConstraintName);
        Leave;
      Else;
        w_RefFieldShortName = L4_Referenced_Field_Gen_Name;
        W_ReferencedFields = %Trim(W_ReferencedFields) + ' ' +
                             %Trim(W_RefFieldShortName);
      EndIf;

      ReadE (w_ModelLibrary:w_TableLongName:w_ConstraintName) PVBVREL4;
    EndDo;

    If w_ForeignKeys <> *Blanks;
      W_Cmd = FrnKey;
      W_Cmd = %ScanRpl('&LIB':%Trim(W_ObjLib):W_Cmd);
      W_Cmd = %ScanRpl('&FILE':%Trim(P_Object):W_Cmd);
      W_Cmd = %ScanRpl('&KEYS':%Trim(W_ForeignKeys):W_Cmd);
      W_Cmd = %ScanRpl('&REFLIB':%Trim(W_ObjLib):W_Cmd);
      W_Cmd = %ScanRpl('&REFFILE':%Trim(W_RefTableShortName):W_Cmd);
      W_Cmd = %ScanRpl('&REFKEYS':%Trim(W_ReferencedFields):W_Cmd);
      W_Cmd = %ScanRpl('&CST_NAME':%Trim(W_ConstraintName):W_Cmd);
      CallP(E) QCmdExc(W_Cmd:%Len(W_Cmd));
    EndIf;

    ReadE (w_ModelLibrary:w_TableLongName:'Y') PVBVREL3;
  EndDo;

EndSr;

//*****************************************************************************
//‚Apply Post-Processing - Update the main source member back from QTEMP version
//*****************************************************************************
BegSr ZPostProcessing;

  //‚Try compiling and see if there is any error
  //w_Cmd = 'YEXCSQL OBJLIB(' + %Trim(w_ObjLib) + ') SRCFILE('+%Trim(w_SrcLib) +
  //        '/' + %Trim(w_SrcFil) + ') MBR(' + %Trim(P_Object) + ')';
  //CallP(E) QCmdExc(W_Cmd:%Len(W_Cmd));

EndSr;
//*****************************************************************************
