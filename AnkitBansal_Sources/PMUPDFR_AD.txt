// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMUPDFR
// ?Date: 14.08.2025 Time: 03:44:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile control

//?FIRST TIME
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// Call program Rtv Week Number       XF.
CALL PROGRAM(Rtv Week Number       XF) ('POEPXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Accounting_Year_Code);
PARAMETER(PAR.Week_Number);

// LCL.Week Number = PAR.Week Number
LCL.Week_Number = PAR.Week_Number;

// LCL.Item Code = CTL.Item Code
LCL.Item_Code = CTL.Item_Code;

//?***** Weekly Sales Toggle
// CTL.Total Sts USR = CND.no
CTL.Total_Sts_USR = 'N';

//?***** Weekly Sales Heading Display
// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

//?***** All/Short Toggle
// LCL.Select Status = CND.yes
LCL.Select_Status = 'Y';

//?***** Reset First Time Flag
// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?VAL: Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Wk Start/End      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1598657;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Accounting_Year_Code);
PARAMETER(PAR.Week_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(NLL.Date_Sun_USR);
PARAMETER(PAR.First_Time_Flag);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 // IF DB1.Day of Week is Monday
 IF DB1.Day_of_Week = '2';

 // PAR.Date Mon USR = DB1.Post to G/L Date
 PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

 // IF DB1.Day of Week is Tuesday
 IF DB1.Day_of_Week = '3';

 // PAR.Date Tue USR = DB1.Post to G/L Date
 PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

 // IF DB1.Day of Week is Wednesday
 IF DB1.Day_of_Week = '4';

 // PAR.Date Wed USR = DB1.Post to G/L Date
 PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

 // IF DB1.Day of Week is Thursday
 IF DB1.Day_of_Week = '5';

 // PAR.Date Thu USR = DB1.Post to G/L Date
 PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

 // IF DB1.Day of Week is Friday
 IF DB1.Day_of_Week = '6';

 // PAR.Date Fri USR = DB1.Post to G/L Date
 PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Date Sat USR = DB1.Post to G/L Date
 PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

 ENDIF;

}


//?Day 1 Output Only
CASE;

// IF CTL.USR Day 1 LT JOB.*Job date
IF CTL.USR_Day_1 < JOB.*Job_date;

// OR CTL.Total Sts USR is yes
OR CTL.Total_Sts_USR = 'Y';

// CTL.Output Only 1 USR = CND.yes
CTL.Output_Only_1_USR = 'Y';

//?Day 1 Output Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is Not Yes
IF LCL.Production_Day_Status = *BLANK/'N';

// CTL.Output Only 1 USR = CND.yes
CTL.Output_Only_1_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Output Only 1 USR = CND.no
CTL.Output_Only_1_USR = 'N';

ENDIF;

ENDIF;

//?Day 2 Output Only
CASE;

// IF CTL.USR Day 2 LT JOB.*Job date
IF CTL.USR_Day_2 < JOB.*Job_date;

// OR CTL.Total Sts USR is yes
OR CTL.Total_Sts_USR = 'Y';

// CTL.Output Only 2 USR = CND.yes
CTL.Output_Only_2_USR = 'Y';

//?Day 2 Output Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is Not Yes
IF LCL.Production_Day_Status = *BLANK/'N';

// CTL.Output Only 2 USR = CND.yes
CTL.Output_Only_2_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Output Only 2 USR = CND.no
CTL.Output_Only_2_USR = 'N';

ENDIF;

ENDIF;

//?Day 3 Output Only
CASE;

// IF CTL.USR Day 3 LT JOB.*Job date
IF CTL.USR_Day_3 < JOB.*Job_date;

// OR CTL.Total Sts USR is yes
OR CTL.Total_Sts_USR = 'Y';

// CTL.Output Only 3 USR = CND.yes
CTL.Output_Only_3_USR = 'Y';

//?Day 3 Output Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is Not Yes
IF LCL.Production_Day_Status = *BLANK/'N';

// CTL.Output Only 3 USR = CND.yes
CTL.Output_Only_3_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Output Only 3 USR = CND.no
CTL.Output_Only_3_USR = 'N';

ENDIF;

ENDIF;

//?Day 4 Output Only
CASE;

// IF CTL.USR Day 4 LT JOB.*Job date
IF CTL.USR_Day_4 < JOB.*Job_date;

// OR CTL.Total Sts USR is yes
OR CTL.Total_Sts_USR = 'Y';

// CTL.Output Only 4 USR = CND.yes
CTL.Output_Only_4_USR = 'Y';

//?Day 4 Output Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is Not Yes
IF LCL.Production_Day_Status = *BLANK/'N';

// CTL.Output Only 4 USR = CND.yes
CTL.Output_Only_4_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Output Only 4 USR = CND.no
CTL.Output_Only_4_USR = 'N';

ENDIF;

ENDIF;

//?Day 5 Output Only
CASE;

// IF CTL.USR Day 5 LT JOB.*Job date
IF CTL.USR_Day_5 < JOB.*Job_date;

// OR CTL.Total Sts USR is yes
OR CTL.Total_Sts_USR = 'Y';

// CTL.Output Only 5 USR = CND.yes
CTL.Output_Only_5_USR = 'Y';

//?Day 5 Output Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is Not Yes
IF LCL.Production_Day_Status = *BLANK/'N';

// CTL.Output Only 5 USR = CND.yes
CTL.Output_Only_5_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Output Only 5 USR = CND.no
CTL.Output_Only_5_USR = 'N';

ENDIF;

ENDIF;

//?Day 6 Output Only
CASE;

// IF CTL.USR Day 6 LT JOB.*Job date
IF CTL.USR_Day_6 < JOB.*Job_date;

// OR CTL.Total Sts USR is yes
OR CTL.Total_Sts_USR = 'Y';

// CTL.Output Only 6 USR = CND.yes
CTL.Output_Only_6_USR = 'Y';

//?Day 6 Output Only
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_6);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is Not Yes
IF LCL.Production_Day_Status = *BLANK/'N';

// CTL.Output Only 6 USR = CND.yes
CTL.Output_Only_6_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Output Only 6 USR = CND.no
CTL.Output_Only_6_USR = 'N';

ENDIF;

ENDIF;

// CTL.Quantity Ordered 1 USR = CON.*ZERO
CTL.Quantity_Ordered_1_USR = *ZERO;

// CTL.Quantity Ordered 2 USR = CON.*ZERO
CTL.Quantity_Ordered_2_USR = *ZERO;

// CTL.Quantity Ordered 3 USR = CON.*ZERO
CTL.Quantity_Ordered_3_USR = *ZERO;

// CTL.Quantity Ordered 4 USR = CON.*ZERO
CTL.Quantity_Ordered_4_USR = *ZERO;

// CTL.Quantity Ordered 5 USR = CON.*ZERO
CTL.Quantity_Ordered_5_USR = *ZERO;

// CTL.Quantity Ordered 6 USR = CON.*ZERO
CTL.Quantity_Ordered_6_USR = *ZERO;

//?DSP: Week Headings
CASE;

// IF CTL.Total Sts USR is yes
IF CTL.Total_Sts_USR = 'Y';

// OR CTL.Item Code is Entered
OR CTL.Item_Code <> *ZERO;

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

//?DSP: Week Headings
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

SET CURSOR;

//?USER: Initialize subfile record from DBF record

//?SEL: Company Number
CASE;

// IF CTL.Company Number NE RCD.Company Number
IF CTL.Company_Number <> RCD.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Selected Record
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Total Scheduled Orders **
EXECUTE FUNCTION(Rtv Tot Frz Qty       RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1881895;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Quantity_Sched_1_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 // AND LCL.Billing Activity Type is Invoice or Transfer
 AND LCL.Billing_Activity_Type = '1'/'4';

 // PAR.Quantity Sched 1 USR = PAR.Quantity Sched 1 USR + DB1.Quantity Scheduled
 PAR.Quantity_Sched_1_USR = PAR.Quantity_Sched_1_USR + DB1.Quantity_Scheduled;

 ENDIF;

}


//?** Total Scheduled Allocation **
EXECUTE FUNCTION(Rtv Sched Allocation  RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882010;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(RCD.Production_Qty);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Qty = PAR.Production Qty + DB1.Production Quantity
 PAR.Production_Qty = PAR.Production_Qty + DB1.Production_Quantity;

}


//?07/15/08 PKD Show all Items that are Make to Order or Sold 100% No
//?***** On-Hand Inventory
EXECUTE FUNCTION(Rtv On-Hand Qty       RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1882146;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Quantity_Inv_On_Hand_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.On Hand U/M1 Summary is Greater than zero
 IF DB1.On_Hand_UOM1_Summary > *ZERO;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.On Hand U/M1 Summary
 PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.On_Hand_UOM1_Summary;

 ENDIF;

 ENDIF;

}


//?***** Daily Scheduled Allocation **
EXECUTE FUNCTION(Rtv Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882330;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Quantity_7_0_USR_1);
PARAMETER(RCD.Quantity_7_0_USR_2);
PARAMETER(RCD.Quantity_7_0_USR_3);
PARAMETER(RCD.Quantity_7_0_USR_4);
PARAMETER(RCD.Quantity_7_0_USR_5);
PARAMETER(RCD.Quantity_7_0_USR_6);
{
 //?USER: Initialize routine

 // PAR.Quantity 7.0 USR 1 = CON.*ZERO
 PAR.Quantity_7_0_USR_1 = *ZERO;

 // PAR.Quantity 7.0 USR 2 = CON.*ZERO
 PAR.Quantity_7_0_USR_2 = *ZERO;

 // PAR.Quantity 7.0 USR 3 = CON.*ZERO
 PAR.Quantity_7_0_USR_3 = *ZERO;

 // PAR.Quantity 7.0 USR 4 = CON.*ZERO
 PAR.Quantity_7_0_USR_4 = *ZERO;

 // PAR.Quantity 7.0 USR 5 = CON.*ZERO
 PAR.Quantity_7_0_USR_5 = *ZERO;

 // PAR.Quantity 7.0 USR 6 = CON.*ZERO
 PAR.Quantity_7_0_USR_6 = *ZERO;

 //?USER: Process Data record

 //?QUIT: Production Date > Day 6
 CASE;

 // IF DB1.Production Date GT PAR.USR Day 6
 IF DB1.Production_Date > PAR.USR_Day_6;

 QUIT;

 ENDIF;

 //?Day 1
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 1
 IF DB1.Production_Date = PAR.USR_Day_1;

 // AND PAR.USR Day 1 GE JOB.*Job date
 AND PAR.USR_Day_1 >= JOB.*Job_date;

 // PAR.Quantity 7.0 USR 1 = DB1.Production Quantity
 PAR.Quantity_7_0_USR_1 = DB1.Production_Quantity;

 ENDIF;

 //?Day 2
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 2
 IF DB1.Production_Date = PAR.USR_Day_2;

 // AND PAR.USR Day 2 GE JOB.*Job date
 AND PAR.USR_Day_2 >= JOB.*Job_date;

 // PAR.Quantity 7.0 USR 2 = DB1.Production Quantity
 PAR.Quantity_7_0_USR_2 = DB1.Production_Quantity;

 ENDIF;

 //?Day 3
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 3
 IF DB1.Production_Date = PAR.USR_Day_3;

 // AND PAR.USR Day 3 GE JOB.*Job date
 AND PAR.USR_Day_3 >= JOB.*Job_date;

 // PAR.Quantity 7.0 USR 3 = DB1.Production Quantity
 PAR.Quantity_7_0_USR_3 = DB1.Production_Quantity;

 ENDIF;

 //?Day 4
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 4
 IF DB1.Production_Date = PAR.USR_Day_4;

 // AND PAR.USR Day 4 GE JOB.*Job date
 AND PAR.USR_Day_4 >= JOB.*Job_date;

 // PAR.Quantity 7.0 USR 4 = DB1.Production Quantity
 PAR.Quantity_7_0_USR_4 = DB1.Production_Quantity;

 ENDIF;

 //?Day 5
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 5
 IF DB1.Production_Date = PAR.USR_Day_5;

 // AND PAR.USR Day 5 GE JOB.*Job date
 AND PAR.USR_Day_5 >= JOB.*Job_date;

 // PAR.Quantity 7.0 USR 5 = DB1.Production Quantity
 PAR.Quantity_7_0_USR_5 = DB1.Production_Quantity;

 ENDIF;

 //?Day 6
 CASE;

 // IF DB1.Production Date EQ PAR.USR Day 6
 IF DB1.Production_Date = PAR.USR_Day_6;

 // AND PAR.USR Day 6 GE JOB.*Job date
 AND PAR.USR_Day_6 >= JOB.*Job_date;

 // PAR.Quantity 7.0 USR 6 = DB1.Production Quantity
 PAR.Quantity_7_0_USR_6 = DB1.Production_Quantity;

 ENDIF;

}


// RCD.Quantity Scheduled 1 USR = RCD.Quantity 7.0 USR 1
RCD.Quantity_Scheduled_1_USR = RCD.Quantity_7_0_USR_1;

// RCD.Quantity Scheduled 2 USR = RCD.Quantity 7.0 USR 2
RCD.Quantity_Scheduled_2_USR = RCD.Quantity_7_0_USR_2;

// RCD.Quantity Scheduled 3 USR = RCD.Quantity 7.0 USR 3
RCD.Quantity_Scheduled_3_USR = RCD.Quantity_7_0_USR_3;

// RCD.Quantity Scheduled 4 USR = RCD.Quantity 7.0 USR 4
RCD.Quantity_Scheduled_4_USR = RCD.Quantity_7_0_USR_4;

// RCD.Quantity Scheduled 5 USR = RCD.Quantity 7.0 USR 5
RCD.Quantity_Scheduled_5_USR = RCD.Quantity_7_0_USR_5;

// RCD.Quantity Scheduled 6 USR = RCD.Quantity 7.0 USR 6
RCD.Quantity_Scheduled_6_USR = RCD.Quantity_7_0_USR_6;

//?***** Retrieve Weekly Shipments **
EXECUTE FUNCTION(Rtv Wkly Frz Qty      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1882487;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Quantity_Ordered_1_USR);
PARAMETER(RCD.Quantity_Ordered_2_USR);
PARAMETER(RCD.Quantity_Ordered_3_USR);
PARAMETER(RCD.Quantity_Ordered_4_USR);
PARAMETER(RCD.Quantity_Ordered_5_USR);
PARAMETER(RCD.Quantity_Ordered_6_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // Call program Rtv Week Number       XF.
 CALL PROGRAM(Rtv Week Number       XF) ('POEPXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(PAR.Week_Number);

 // LCL.Week Number = CON.1
 LCL.Week_Number = 1;

 // DOW LCL.Week Number is LE 6
 DOW LCL.Week_Number <= 6;

 EXECUTE FUNCTION(RTV Wk Start/End      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1598657;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Accounting_Year_Code);
 PARAMETER(PAR.Week_Number);
 PARAMETER(LCL.Date_Mon_USR);
 PARAMETER(NLL.Date_Tue_USR);
 PARAMETER(NLL.Date_Wed_USR);
 PARAMETER(NLL.Date_Thu_USR);
 PARAMETER(NLL.Date_Fri_USR);
 PARAMETER(LCL.Date_Sat_USR);
 PARAMETER(LCL.Date_Sun_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Monday
  IF DB1.Day_of_Week = '2';

  // PAR.Date Mon USR = DB1.Post to G/L Date
  PAR.Date_Mon_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Tuesday
  IF DB1.Day_of_Week = '3';

  // PAR.Date Tue USR = DB1.Post to G/L Date
  PAR.Date_Tue_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Wednesday
  IF DB1.Day_of_Week = '4';

  // PAR.Date Wed USR = DB1.Post to G/L Date
  PAR.Date_Wed_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Thursday
  IF DB1.Day_of_Week = '5';

  // PAR.Date Thu USR = DB1.Post to G/L Date
  PAR.Date_Thu_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Friday
  IF DB1.Day_of_Week = '6';

  // PAR.Date Fri USR = DB1.Post to G/L Date
  PAR.Date_Fri_USR = DB1.Post_to_G_L_Date;

  // IF DB1.Day of Week is Saturday
  IF DB1.Day_of_Week = '7';

  // PAR.Date Sat USR = DB1.Post to G/L Date
  PAR.Date_Sat_USR = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 //?INIT: Date Ranges
 CASE;

 // IF LCL.Week Number is One
 IF LCL.Week_Number = 1;

 // PAR.Date 1 RGF = LCL.Date Mon USR
 PAR.Date_1_RGF = LCL.Date_Mon_USR;

 // PAR.Date 1 RGT = LCL.Date Sat USR + CON.1 *DAYS
 PAR.Date_1_RGT = DATEINCR(LCL.Date_Sat_USR 1 'DY' 1111111 'NONE' 'N' 1);

 //?INIT: Date Ranges
 // IF LCL.Week Number is Two
 IF LCL.Week_Number = 2;

 // PAR.Date 2 RGF = LCL.Date Mon USR
 PAR.Date_2_RGF = LCL.Date_Mon_USR;

 // PAR.Date 2 RGT = LCL.Date Sat USR + CON.1 *DAYS
 PAR.Date_2_RGT = DATEINCR(LCL.Date_Sat_USR 1 'DY' 1111111 'NONE' 'N' 1);

 //?INIT: Date Ranges
 // IF LCL.Week Number is Three
 IF LCL.Week_Number = 3;

 // PAR.Date 3 RGF = LCL.Date Mon USR
 PAR.Date_3_RGF = LCL.Date_Mon_USR;

 // PAR.Date 3 RGT = LCL.Date Sat USR
 PAR.Date_3_RGT = LCL.Date_Sat_USR;

 // PAR.Date 3 RGT = LCL.Date Sat USR + CON.1 *DAYS
 PAR.Date_3_RGT = DATEINCR(LCL.Date_Sat_USR 1 'DY' 1111111 'NONE' 'N' 1);

 //?INIT: Date Ranges
 // IF LCL.Week Number is Four
 IF LCL.Week_Number = 4;

 // PAR.Date 4 RGF = LCL.Date Mon USR
 PAR.Date_4_RGF = LCL.Date_Mon_USR;

 // PAR.Date 4 RGT = LCL.Date Sat USR
 PAR.Date_4_RGT = LCL.Date_Sat_USR;

 // PAR.Date 4 RGT = LCL.Date Sat USR + CON.1 *DAYS
 PAR.Date_4_RGT = DATEINCR(LCL.Date_Sat_USR 1 'DY' 1111111 'NONE' 'N' 1);

 //?INIT: Date Ranges
 // IF LCL.Week Number is Five
 IF LCL.Week_Number = 5;

 // PAR.Date 5 RGF = LCL.Date Mon USR
 PAR.Date_5_RGF = LCL.Date_Mon_USR;

 // PAR.Date 5 RGT = LCL.Date Sat USR + CON.1 *DAYS
 PAR.Date_5_RGT = DATEINCR(LCL.Date_Sat_USR 1 'DY' 1111111 'NONE' 'N' 1);

 //?INIT: Date Ranges
 // IF LCL.Week Number is Six
 IF LCL.Week_Number = 6;

 // PAR.Date 6 RGF = LCL.Date Mon USR
 PAR.Date_6_RGF = LCL.Date_Mon_USR;

 // PAR.Date 6 RGT = LCL.Date Sat USR + CON.1 *DAYS
 PAR.Date_6_RGT = DATEINCR(LCL.Date_Sat_USR 1 'DY' 1111111 'NONE' 'N' 1);

 ENDIF;

 // LCL.Week Number = LCL.Week Number + CON.1
 LCL.Week_Number = LCL.Week_Number + 1;

 // PAR.Week Number = PAR.Week Number + CON.1
 PAR.Week_Number = PAR.Week_Number + 1;

 ENDDO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Billing Activity Type is Invoice or Transfer
 IF LCL.Billing_Activity_Type = '1'/'4';

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 //?Week 1
 CASE;

 // IF DB1.Scheduled Ship Date LE PAR.Date 1 RGT
 IF DB1.Scheduled_Ship_Date <= PAR.Date_1_RGT;

 // PAR.Quantity Ordered 1 USR = PAR.Quantity Ordered 1 USR + DB1.Quantity Scheduled
 PAR.Quantity_Ordered_1_USR = PAR.Quantity_Ordered_1_USR + DB1.Quantity_Scheduled;

 ENDIF;

 //?Week 2
 CASE;

 // IF DB1.Scheduled Ship Date GE PAR.Date 2 RGF
 IF DB1.Scheduled_Ship_Date >= PAR.Date_2_RGF;

 // AND DB1.Scheduled Ship Date LE PAR.Date 2 RGT
 AND DB1.Scheduled_Ship_Date <= PAR.Date_2_RGT;

 // PAR.Quantity Ordered 2 USR = PAR.Quantity Ordered 2 USR + DB1.Quantity Scheduled
 PAR.Quantity_Ordered_2_USR = PAR.Quantity_Ordered_2_USR + DB1.Quantity_Scheduled;

 ENDIF;

 //?Week 3
 CASE;

 // IF DB1.Scheduled Ship Date GE PAR.Date 3 RGF
 IF DB1.Scheduled_Ship_Date >= PAR.Date_3_RGF;

 // AND DB1.Scheduled Ship Date LE PAR.Date 3 RGT
 AND DB1.Scheduled_Ship_Date <= PAR.Date_3_RGT;

 // PAR.Quantity Ordered 3 USR = PAR.Quantity Ordered 3 USR + DB1.Quantity Scheduled
 PAR.Quantity_Ordered_3_USR = PAR.Quantity_Ordered_3_USR + DB1.Quantity_Scheduled;

 ENDIF;

 //?Week 4
 CASE;

 // IF DB1.Scheduled Ship Date GE PAR.Date 4 RGF
 IF DB1.Scheduled_Ship_Date >= PAR.Date_4_RGF;

 // AND DB1.Scheduled Ship Date LE PAR.Date 4 RGT
 AND DB1.Scheduled_Ship_Date <= PAR.Date_4_RGT;

 // PAR.Quantity Ordered 4 USR = PAR.Quantity Ordered 4 USR + DB1.Quantity Scheduled
 PAR.Quantity_Ordered_4_USR = PAR.Quantity_Ordered_4_USR + DB1.Quantity_Scheduled;

 ENDIF;

 //?Week 5
 CASE;

 // IF DB1.Scheduled Ship Date GE PAR.Date 5 RGF
 IF DB1.Scheduled_Ship_Date >= PAR.Date_5_RGF;

 // AND DB1.Scheduled Ship Date LE PAR.Date 5 RGT
 AND DB1.Scheduled_Ship_Date <= PAR.Date_5_RGT;

 // PAR.Quantity Ordered 5 USR = PAR.Quantity Ordered 5 USR + DB1.Quantity Scheduled
 PAR.Quantity_Ordered_5_USR = PAR.Quantity_Ordered_5_USR + DB1.Quantity_Scheduled;

 ENDIF;

 //?Week 6
 CASE;

 // IF DB1.Scheduled Ship Date GE PAR.Date 6 RGF
 IF DB1.Scheduled_Ship_Date >= PAR.Date_6_RGF;

 // PAR.Quantity Ordered 6 USR = PAR.Quantity Ordered 6 USR + DB1.Quantity Scheduled
 PAR.Quantity_Ordered_6_USR = PAR.Quantity_Ordered_6_USR + DB1.Quantity_Scheduled;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?CTL. Weekly Scheduled Orders
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

// AND CTL.Item Code EQ RCD.Item Code
AND CTL.Item_Code = RCD.Item_Code;

// CTL.Quantity Ordered 1 USR = RCD.Quantity Ordered 1 USR
CTL.Quantity_Ordered_1_USR = RCD.Quantity_Ordered_1_USR;

// CTL.Quantity Ordered 2 USR = RCD.Quantity Ordered 2 USR
CTL.Quantity_Ordered_2_USR = RCD.Quantity_Ordered_2_USR;

// CTL.Quantity Ordered 3 USR = RCD.Quantity Ordered 3 USR
CTL.Quantity_Ordered_3_USR = RCD.Quantity_Ordered_3_USR;

// CTL.Quantity Ordered 4 USR = RCD.Quantity Ordered 4 USR
CTL.Quantity_Ordered_4_USR = RCD.Quantity_Ordered_4_USR;

// CTL.Quantity Ordered 5 USR = RCD.Quantity Ordered 5 USR
CTL.Quantity_Ordered_5_USR = RCD.Quantity_Ordered_5_USR;

// CTL.Quantity Ordered 6 USR = RCD.Quantity Ordered 6 USR
CTL.Quantity_Ordered_6_USR = RCD.Quantity_Ordered_6_USR;

ENDIF;

//?Weekly Scheduled Shipments
CASE;

// IF CTL.Total Sts USR is yes
IF CTL.Total_Sts_USR = 'Y';

// RCD.Quantity 7.0 USR 1 = RCD.Quantity Ordered 1 USR
RCD.Quantity_7_0_USR_1 = RCD.Quantity_Ordered_1_USR;

// RCD.Quantity 7.0 USR 2 = RCD.Quantity Ordered 2 USR
RCD.Quantity_7_0_USR_2 = RCD.Quantity_Ordered_2_USR;

// RCD.Quantity 7.0 USR 3 = RCD.Quantity Ordered 3 USR
RCD.Quantity_7_0_USR_3 = RCD.Quantity_Ordered_3_USR;

// RCD.Quantity 7.0 USR 4 = RCD.Quantity Ordered 4 USR
RCD.Quantity_7_0_USR_4 = RCD.Quantity_Ordered_4_USR;

// RCD.Quantity 7.0 USR 5 = RCD.Quantity Ordered 5 USR
RCD.Quantity_7_0_USR_5 = RCD.Quantity_Ordered_5_USR;

// RCD.Quantity 7.0 USR 6 = RCD.Quantity Ordered 6 USR
RCD.Quantity_7_0_USR_6 = RCD.Quantity_Ordered_6_USR;

ENDIF;

//?***** Quantity Short **
// Quantity Short
RCD.USR_Quantity_Shorted = RCD.Quantity_Sched_1_USR - ( RCD.Quantity_Inv_On_Hand_USR               +
+ RCD.Production_Qty );

//?Set Quantity Short to Zero if < 0
CASE;

// IF RCD.USR Quantity Shorted is LT Zero
IF RCD.USR_Quantity_Shorted < *ZERO;

// RCD.USR Quantity Shorted = CON.*ZERO
RCD.USR_Quantity_Shorted = *ZERO;

ENDIF;

//?***** Consumed Item **
// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Consumed_Item_Code);

//?***** Select Short Items Only *****
//?SEL: Short Items Only
CASE;

// IF LCL.Select Status is yes
IF LCL.Select_Status = 'Y';

// AND RCD.USR Quantity Shorted is LE Zero
AND RCD.USR_Quantity_Shorted <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile record (Pre-confirm)

//?8=Display Item Orders
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Name);
PARAMETER(*BLANK);
PARAMETER(LCL.*Initial_call);
PARAMETER('FZ');

ENDIF;

//?CHG: Day 1
CASE;

// IF RCD.Quantity 7.0 USR 1 NE RCD.Quantity Scheduled 1 USR
IF RCD.Quantity_7_0_USR_1 <> RCD.Quantity_Scheduled_1_USR;

EXECUTE FUNCTION(Upd Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882339;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(RCD.Quantity_7_0_USR_1);
PARAMETER(RCD.Consumed_Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Freezer Alloc     CR) TYPE(CRTOBJ) FILE(PMDXCPP)           AC1881876;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Production Quantity is EQ Zero
 IF PAR.Production_Quantity = *ZERO;

 EXECUTE FUNCTION(Del Freezer Alloc     DL) TYPE(DLTOBJ) FILE(PMDXCPP)           AC1881878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Freezer Alloc     CH) TYPE(CHGOBJ) FILE(PMDXCPP)           AC1881877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: Day 2
CASE;

// IF RCD.Quantity 7.0 USR 2 NE RCD.Quantity Scheduled 2 USR
IF RCD.Quantity_7_0_USR_2 <> RCD.Quantity_Scheduled_2_USR;

EXECUTE FUNCTION(Upd Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882339;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_2);
PARAMETER(RCD.Quantity_7_0_USR_2);
PARAMETER(RCD.Consumed_Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Freezer Alloc     CR) TYPE(CRTOBJ) FILE(PMDXCPP)           AC1881876;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Production Quantity is EQ Zero
 IF PAR.Production_Quantity = *ZERO;

 EXECUTE FUNCTION(Del Freezer Alloc     DL) TYPE(DLTOBJ) FILE(PMDXCPP)           AC1881878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Freezer Alloc     CH) TYPE(CHGOBJ) FILE(PMDXCPP)           AC1881877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: Day 3
CASE;

// IF RCD.Quantity 7.0 USR 3 NE RCD.Quantity Scheduled 3 USR
IF RCD.Quantity_7_0_USR_3 <> RCD.Quantity_Scheduled_3_USR;

EXECUTE FUNCTION(Upd Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882339;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_3);
PARAMETER(RCD.Quantity_7_0_USR_3);
PARAMETER(RCD.Consumed_Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Freezer Alloc     CR) TYPE(CRTOBJ) FILE(PMDXCPP)           AC1881876;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Production Quantity is EQ Zero
 IF PAR.Production_Quantity = *ZERO;

 EXECUTE FUNCTION(Del Freezer Alloc     DL) TYPE(DLTOBJ) FILE(PMDXCPP)           AC1881878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Freezer Alloc     CH) TYPE(CHGOBJ) FILE(PMDXCPP)           AC1881877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: Day 4
CASE;

// IF RCD.Quantity 7.0 USR 4 NE RCD.Quantity Scheduled 4 USR
IF RCD.Quantity_7_0_USR_4 <> RCD.Quantity_Scheduled_4_USR;

EXECUTE FUNCTION(Upd Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882339;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_4);
PARAMETER(RCD.Quantity_7_0_USR_4);
PARAMETER(RCD.Consumed_Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Freezer Alloc     CR) TYPE(CRTOBJ) FILE(PMDXCPP)           AC1881876;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Production Quantity is EQ Zero
 IF PAR.Production_Quantity = *ZERO;

 EXECUTE FUNCTION(Del Freezer Alloc     DL) TYPE(DLTOBJ) FILE(PMDXCPP)           AC1881878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Freezer Alloc     CH) TYPE(CHGOBJ) FILE(PMDXCPP)           AC1881877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: Day 5
CASE;

// IF RCD.Quantity 7.0 USR 5 NE RCD.Quantity Scheduled 5 USR
IF RCD.Quantity_7_0_USR_5 <> RCD.Quantity_Scheduled_5_USR;

EXECUTE FUNCTION(Upd Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882339;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Quantity_7_0_USR_5);
PARAMETER(RCD.Consumed_Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Freezer Alloc     CR) TYPE(CRTOBJ) FILE(PMDXCPP)           AC1881876;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Production Quantity is EQ Zero
 IF PAR.Production_Quantity = *ZERO;

 EXECUTE FUNCTION(Del Freezer Alloc     DL) TYPE(DLTOBJ) FILE(PMDXCPP)           AC1881878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Freezer Alloc     CH) TYPE(CHGOBJ) FILE(PMDXCPP)           AC1881877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: Day 6
CASE;

// IF RCD.Quantity 7.0 USR 6 NE RCD.Quantity Scheduled 6 USR
IF RCD.Quantity_7_0_USR_6 <> RCD.Quantity_Scheduled_6_USR;

EXECUTE FUNCTION(Upd Freezer Alloc     RT) TYPE(RTVOBJ) FILE(PMDXCPP)           AC1882339;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Quantity_7_0_USR_6);
PARAMETER(RCD.Consumed_Item_Code);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Freezer Alloc     CR) TYPE(CRTOBJ) FILE(PMDXCPP)           AC1881876;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Production Quantity is EQ Zero
 IF PAR.Production_Quantity = *ZERO;

 EXECUTE FUNCTION(Del Freezer Alloc     DL) TYPE(DLTOBJ) FILE(PMDXCPP)           AC1881878;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Freezer Alloc     CH) TYPE(CHGOBJ) FILE(PMDXCPP)           AC1881877;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Quantity);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

//?F05=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F07=Previous Week
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// IF PAR.Week Number GT LCL.Week Number
IF PAR.Week_Number > LCL.Week_Number;

// PAR.Week Number = PAR.Week Number - CON.1
PAR.Week_Number = PAR.Week_Number - 1;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F08=Next Week
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// PAR.Week Number = PAR.Week Number + CON.1
PAR.Week_Number = PAR.Week_Number + 1;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F09=Item/Warehous Inquiry
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Dsp Item/Whse Inquiry DF.
CALL PROGRAM(Dsp Item/Whse Inquiry DF) ('PDPVDFR');

ENDIF;

//?F10=Weekly Total
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

//?CTL.Total Sts USR
CASE;

// IF CTL.Total Sts USR is yes
IF CTL.Total_Sts_USR = 'Y';

// CTL.Total Sts USR = CND.no
CTL.Total_Sts_USR = 'N';

//?CTL.Total Sts USR
// IF CTL.Total Sts USR is no
IF CTL.Total_Sts_USR = 'N';

// CTL.Total Sts USR = CND.yes
CTL.Total_Sts_USR = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F11=All/Short Toggle
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

//?LCL.Select Status
CASE;

// IF LCL.Select Status is yes
IF LCL.Select_Status = 'Y';

// LCL.Select Status = CND.no
LCL.Select_Status = 'N';

//?LCL.Select Status
// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

// LCL.Select Status = CND.yes
LCL.Select_Status = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

