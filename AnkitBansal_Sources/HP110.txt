      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP110
      * TITLE:       REVISE EXPENSE CLASS
      * PROGRAMMER:  MARY PALMER
      * CREATED:     04/11/94
      *
      * FUNCTION: USES AN EDIT RECORD FORMAT TO ADD/CHANGE/DELETE
      *           EXPENSE CLASS.
      *
      *           THIS PROGRAM IS CALLED FROM HP410 - WORK WITH
      *           EXPENSE CLASSES.
      *
      *           THE FIELD 'MODE' CONTAINS THE VALUE PASSED INTO
      *           THIS PROGRAM FROM THE CALLING PROGRAM.  THE FIELD
      *           'DFMODE' IS THE SCREEN FIELD THAT DISPLAYS THE
      *           VALUE OF 'MODE'.  MODE WILL BE CREATE, REVISE OR
      *           DELETE.           ONCE IN THE PROGRAM, MODE AND
      *           DFMODE WILL NEVER CHANGE.  HOWEVER, THE ACTION
      *           BEING PERFORMED CAN CHANGE DEPENDING ON THE
      *           FUNCTION KEYS THE USER TAKES.
      *
      *           THE USER MAY DELETE AN EXISTING RECORD BY TAKING
      *           F11=DELETE FROM THIS PROGRAM OR OPTION 4=DELETE
      *           FROM WORK WITH EXPENSE CLASS. IF THE USER IS
      *           DELETING WITH 4=DELETE, NO PANEL WILL BE DISPLAYED
      *           FROM THIS PROGRAM (HP110) UNLESS THERE IS AN ERROR
      *           ON THE ATTEMPTED DELETION.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/18/01  LeAnne Fedor
      *           Recompile only.
      *           Expense ticket amount expanded from 7,2 to 9,2.
      *
      * 06/19/03  LeAnne Fedor
      *           Added new field: Sequence.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD110    CF   E             WORKSTN
     F                                     INFDS(IOFEED)
      *
     FHSP040    IF   E           K DISK
      *  ALLOCATION METHOD
      *
     FHSL048D   IF   E           K DISK
      *    EXPENSE TICKET
      *
     FHSP050    UF A E           K DISK
      *    EXPENSE CLASSES
      *
     FHSP051    IF   E           K DISK
      *    EXPENSE SUBCLASS
      *
     FHSL052A   IF   E           K DISK
      *    EXPENSE CODE
      *
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO, DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     UPDATE        $UPD1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      *  CLEAR FIELDS IN THE DISPLAY FILE RECORD
      *
     C                   MOVE      *BLANK        DFECDS
     C                   MOVE      *BLANK        DFAMDS
      *
      * IF INCOMING MODE IS REVISE OR DELETE, THEN RETRIEVE DATABASE
      * RECORD USING THE EXPENSE CLASS TYPE CODE THAT WAS PASSED IN.
      * DO NOT LOCK THE RECORD.  TYPICALLY, IN DELETE MODE THESE
      * RETRIEVED VALUES WILL NOT BE DISPLAYED.  HOWEVER, IF THERE
      * IS AN ERROR ON THE DELETE ACTION, THE PANEL WILL BE DISPLAYED.
      *
     C     MODE          IFEQ      REVISE                                       IF REV/DEL
     C     MODE          OREQ      DELETE
     C     DFECCD        CHAIN(N)  HSP050                             90
     C     *IN90         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     ECECDS        DFECDS
     C                   MOVEL     ECAMCD        DFAMCD
     C                   Z-ADD     ECECSEQ       DFECSEQ
      *
      * RETRIEVE ALLOCATION METHOD DESCRITPION
      *
     C                   EXSR      $AMDS
      *
     C                   ELSE
      * NOT FOUND
     C                   SETON                                        62
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00282'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFECCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF REV/DEL
      *
      * IF YOU COULDN'T FIND THE RECORD, SET TO DISPLAY THE SCREEN
      * WITH THE ERROR MESSAGE. OTHERWISE, IF THE USER IS DELETING,
      * GO ON TO THE UPDATE ROUTINE AND DON'T DISPLAY THE SCREEN.
      * IF HE IS CREATING OR REVISING, DISPLAY THE SCREEN.
      *
     C     ERROR         IFEQ      0
     C     ACTION        ANDEQ     DELETE
     C                   MOVEL     UPDATE        ROUTNE
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      *  WRITE MESSAGES FROM ARRAYS TO MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *  SET DSPF INDICATORS TO CONTROL INPUT/OUT FIELDS AND AVAILABLE
      *  FUNCTION KEYS.
      *
     C                   SELECT
     C     MODE          WHENEQ    REVISE
     C                   SETON                                        60
     C     MODE          WHENEQ    CREATE
     C                   SETON                                        61
     C     MODE          WHENEQ    DELETE
     C                   SETON                                        62
     C                   ENDSL
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP110K1
     C                   WRITE     HP110EC
     C                   EXFMT     HP110R1
      *
      * CLEAR MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * RESET ACTION TO BE EQUAL TO THE INCOMING MODE.
      * THIS IS REQUIRED IN CASE THE USER TOOK F11=DELETE,
      * GOT AN ERROR ON THE DELETION, AND NOW NEEDS TO BE ABLE TO
      * CHANGE THE RECORD AND TAKE AN ACTION OTHER THAN DELETE
      *
     C                   MOVEL     MODE          ACTION
      *
      * GET USER'S INPUT AND SET ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3=EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4=PROMPT
     C                   EXSR      $F4S1
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN11         WHENEQ    *ON                                          F11-DELETE
     C     MODE          OREQ      DELETE
     C                   MOVEL     DELETE        ACTION
     C                   MOVEL     UPDATE        ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER
      *
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * *IN62 WILL BE ON IF THE RECORD THE USER IS TRYING TO ACCESS
      * HAS BEEN DELETED BY ANOTHER USER.  SO, ONLY PERFORM THE
      * EDITS FOR THE FIELDS ON THE SCREEN IF *IN62 IS OFF
      *
     C     *IN62         IFEQ      *OFF                                         IF HERE
      *
      * IF YOU ARE CREATING A NEW RECORD, VALIDATE THAT:
      *  AN EXPENSE CLASS WAS ENTERED
      *  THE CLASS DOES NOT ALREADY EXIST IN THE MASTER
      *
     C     ACTION        IFEQ      CREATE                                       IF CREATE
     C     DFECCD        IFEQ      *BLANK                                       IF BLANK
     C                   SETON                                        31
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
     C     DFECCD        CHAIN(N)  HSP050                             91
     C     *IN91         IFEQ      *OFF                                         IF FOUND
     C                   SETON                                        31
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00280'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFECCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF BLANK
     C                   ENDIF                                                  IF CREATE
      *
      * ALWAYS PERFORM THE FOLLOWING EDITS
      *  1) DESCRIPTION CANNOT BE BLANK
      *
     C     DFECDS        IFEQ      *BLANK
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
      *
      * SEQUENCE CANNOT BE NEGATIVE
      *
     C     DFECSEQ       IFLT      0
     C                   SETON                                        34
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09000'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
      * ALLOCATION METHOD IS REQUIRED
      *
     C                   EXSR      $AMCD
      *
     C                   ENDIF                                                  IF HERE
      *
      * IF THERE ARE NO ERRORS, ATTEMPT THE WRITE/UPDATE; OTHERWISE,
      * REDISPLAY THE SCREEN.  IF A RECORD HAS BEEN DELETED OUT FROM
      * UNDER THE USER (*IN62 IS ON), THEN THE ERROR MESSAGE WILL BE
      * ISSUED IN THE UPDATE SUBROUTINE.  SO, ALWAYS PERFORM THIS CODE.
      *
     C     ERROR         IFEQ      0
     C                   EXSR      $UPD1
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $UPD1  - SUBROUTINE TO WRITE/UPDATE/DELETE DATABASE FILE
      *----------------------------------------------------------------
      *
     C     $UPD1         BEGSR
      *
      * IF THE USER IS DELETING,
      *   PERFORM DELETION INTEGRITY CHECKS
      *
     C     ACTION        IFEQ      DELETE                                       IF DELETE
     C                   EXSR      $DLTCK
     C                   ENDIF                                                  IF DELETE
      *
      * IF USER ACTION IS REVISING OR DELETING, DETERMINE THAT THE
      * RECORD HE IS ACCESSING STILL EXISTS PRIOR TO ATTEMPTING TO
      * UPDATE.  LOCK THE RECORD FOR UPDATE.
      *
     C     ERROR         IFEQ      0                                            IF GOOD
     C     ACTION        IFEQ      DELETE                                       IF D/R
     C     ACTION        OREQ      REVISE
     C     DFECCD        CHAIN     HSP050                             93
     C     *IN93         IFEQ      *ON                                          IF NOT FOUND
     C                   SETON                                        62
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00282'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFECCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NOT FOUND
     C                   ENDIF                                                  IF D/R
     C                   ENDIF                                                  IF GOOD
      *
      *  IF THERE ARE NO ERRORS, DELETE, REVISE OR CREATE THE RECORD
      *
     C     ERROR         IFEQ      0                                            IF NO ERR
      *
     C     ACTION        IFEQ      DELETE                                       IF DELETE
     C                   DELETE    ECREC
     C                   ELSE
      *
      *  MOVE DSPF FIELDS TO DATABASE FILE FIELDS
      *
     C                   MOVEL     DFECCD        ECECCD
     C                   MOVEL     DFECDS        ECECDS
     C                   MOVEL     DFAMCD        ECAMCD
     C                   Z-ADD     DFECSEQ       ECECSEQ
      *
     C     ACTION        IFEQ      CREATE                                       IF CREATE
     C                   WRITE     ECREC
     C                   ELSE
     C                   UPDATE    ECREC
     C                   ENDIF                                                  IF CREATE
     C                   ENDIF                                                  IF DELETE
     C                   ENDIF                                                  IF NO ERR
      *
      *  IF THERE ARE ANY ERRORS, REDISPLAY THE SCREEN; OTHERWISE, EXIT
      *  THE PROGRAM AUTOMATICALLY. (THE USER DOES NOT HAVE TO TAKE
      *  ANY FUNCTION KEY TO EXIT)
      *
     C     ERROR         IFGT      0
     C                   MOVEL     SCRN1         ROUTNE
     C                   ELSE
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $DLTCK - DELETION INTEGRITY CHECKS
      *---------------------------------------------------------------
      *
     C     $DLTCK        BEGSR
      *
      * THE EXPENSE CLASS CANNOT HAVE ALREADY BEEN
      * USED ON ANY EXPENSE TICKET RECORD.
      *
     C     DFECCD        CHAIN     HSL048D                            96
     C     *IN96         IFEQ      *OFF                                         IF FOUND
     C     ERROR         ANDLT     MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00181'     MGID(E)
     C                   ENDIF                                                  IF FOUND
      *
      * AN EXPENSE CLASS RECORD CANNOT BE DELETED IF ANY RECORDS EXIST
      * FOR THIS CLASS IN THE EXPENSE SUBCLASS. THE SUBCLASS RECORDS
      * MUST BE DELETED FIRST BY THE USER.
      *
     C     DFECCD        CHAIN     HSP051                             94
     C     *IN94         IFEQ      *OFF                                         IF FOUND
     C     ERROR         ANDLT     MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00283'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFECCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF                                                  IF FOUND
      *
      * AN EXPENSE CLASS RECORD CANNOT BE DELETED IF ANY RECORDS EXIST
      * FOR THIS CLASS IN THE EXPENSE CODE FILE. THE EXPENSE CLASS
      * RECORDS MUST BE DELETED FIRST.
      *
     C     DFECCD        CHAIN     HSL052A                            95
     C     *IN95         IFEQ      *OFF                                         IF FOUND
     C     ERROR         ANDLT     MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00293'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFECCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $AMDS - RETRIEVE ALLOCATION METHOD DESCRIPTION
      *---------------------------------------------------------------
      *
     C     $AMDS         BEGSR
      *
     C     DFAMCD        CHAIN     HSP040                             92
     C     *IN92         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL(P)  AMAMDS        DFAMDS
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $AMCD - VALIDATE ALLOCATION METHOD CODE
      *---------------------------------------------------------------
      *
     C     $AMCD         BEGSR
      *
     C                   MOVE      *BLANK        DFAMDS
      *
     C                   SELECT
      *
     C     DFAMCD        WHENEQ    *BLANK
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
      *
     C                   OTHER
     C     DFAMCD        CHAIN     HSP040                             92
     C     *IN92         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL(P)  AMAMDS        DFAMDS
     C                   ELSE
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00389'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFAMCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $F4S1 - F4 PROMPT ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * ALLOCATION METHOD
      *
     C     FLD           WHENEQ    'DFAMCD'
     C                   CALL      'HP545'
     C                   PARM      *BLANK        XXAMCD
     C                   PARM      *BLANK        XXAMDS
     C                   SETON                                        53
     C     XXAMCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXAMCD        DFAMCD
     C                   MOVEL     XXAMDS        DFAMDS
     C                   ENDIF                                                  IF SELECTED
      *
      *
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LISTS
      *     NONE
      *
      * PARM LISTS
      *     MODE IS THE MODE COMING IN FROM THE WORK WITH.
      *     THE USER CAN COME IN IN REVISE MODE AND TAKE F11=DELETE
      *     WHICH WILL CHANGE THE PROCESSING TO THE 'DELETE' ACTION.
      *     DFECCD IS THE EXPENSE CLASS PASSED IN FROM THE WORK WITH
      *
     C     *ENTRY        PLIST
     C                   PARM                    MODE
     C                   PARM                    DFECCD
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
      *
     C                   MOVEL     *BLANK        PGM              10            USED IN MSG
     C                   MOVEL     *BLANK        MSGFL            10            USED IN MSG
     C                   MOVEL     *BLANK        ROUTNE            6
     C     *LIKE         DEFINE    DFMODE        ACTION
     C     *LIKE         DEFINE    DFMODE        MODE
     C                   MOVEL     MODE          ACTION
     C                   MOVEL     MODE          DFMODE
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
      *
      *
      * PARM FIELDS
      *
     C     *LIKE         DEFINE    AMAMCD        XXAMCD
     C     *LIKE         DEFINE    AMAMDS        XXAMDS
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
