// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKT5XFR
// ?Date: 14.08.2025 Time: 02:52:54
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?S00251 RMC 5/21/08
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Rtv Excep Deleted Sum RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1223571;
PARAMETER(PAR.ET_Company_Number);
PARAMETER(PAR.ET_Kill_Date);
{
 //?USER: Initialize routine

 //?S00251 RMC 5/21/08  Chg case stmts to compare to GE and LE rather
 //? Rather than GT and LT. Balancing routines use GE and LE so the
 //? min / max values are included in the error range
 //?Set current Min/Max values
 //?Min Max for Hot Weight
 EXECUTE FUNCTION(Rtv Hot Weight Range  IF) TYPE(EXCINTFUN)                      AB1169711;
 PARAMETER(LCL.TH_Min_LT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Max_GT_Hot_Wt_lb);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Carcass is Light Weight
  PAR.EV_Validation_Code = 'CLT';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Carcass has Double Weight
  PAR.EV_Validation_Code = 'CDB';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Min Max for Lean Percent
 EXECUTE FUNCTION(Rtv Lean % Ranage     IF) TYPE(EXCINTFUN)                      AB1270740;
 PARAMETER(LCL.TH_Min_LT_Lean_Pct);
 PARAMETER(LCL.TH_Max_GT_Lean_Pct);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Percent Lean is Low
  PAR.EV_Validation_Code = 'PLL';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Percent Lean is high
  PAR.EV_Validation_Code = 'PLH';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Min Max for Back Fat
 EXECUTE FUNCTION(Rtv Backfat Range     IF) TYPE(EXCINTFUN)                      AB1169712;
 PARAMETER(LCL.TH_Min_LT_Backfat_Inch);
 PARAMETER(LCL.TH_Max_GT_Backfat_Inch);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Backfat is Low
  PAR.EV_Validation_Code = 'BLW';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Backfat is high
  PAR.EV_Validation_Code = 'BHI';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?Min Max for LoinEye
 EXECUTE FUNCTION(Rtv Loin-Eye Range    IF) TYPE(EXCINTFUN)                      AB1169713;
 PARAMETER(LCL.TH_Min_LT_LoinEye_Inch);
 PARAMETER(LCL.TH_Max_GT_LoinEye_Inch);
 {
  //?Execute internal function

  // PAR.EV Validation Code = CND.Loineye is Low
  PAR.EV_Validation_Code = 'LLW';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(WRK.EV_Minimum);
  PARAMETER(PAR.EV_Minimum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.EV Validation Code = CND.Loineye is High
  PAR.EV_Validation_Code = 'LHI';

  EXECUTE FUNCTION(Rtv Min/Max Values    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1169636;
  PARAMETER(PAR.EV_Validation_Code);
  PARAMETER(PAR.EV_Maximum);
  PARAMETER(WRK.EV_Maximum);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

 }

 //?USER: Process Data record

 //?Update TH Ext at Break in Bol/tt
 CASE;

 // IF DB1.BOH Buy Order Number NE LCL.BOH Buy Order Number
 IF DB1.BOH_Buy_Order_Number <> LCL.BOH_Buy_Order_Number;

 // OR DB1.BOL Load Number NE LCL.BOL Load Number
 OR DB1.BOL_Load_Number <> LCL.BOL_Load_Number;

 // OR DB1.TH Tattoo Number NE LCL.TH Tattoo Number
 OR DB1.TH_Tattoo_Number <> LCL.TH_Tattoo_Number;

 CASE;

 // IF LCL.BOH Buy Order Number is NE Zero
 IF LCL.BOH_Buy_Order_Number <> *ZERO;

 EXECUTE FUNCTION(Add/Chg TatHdrExt     RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1270476;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(LCL.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOL_Load_Number);
 PARAMETER(LCL.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_Min_LT_Backfat_Inch);
 PARAMETER(LCL.TH_Min_LT_LoinEye_Inch);
 PARAMETER(LCL.TH_Min_LT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Min_LT_Lean_Pct);
 PARAMETER(LCL.TH_Max_GT_Backfat_Inch);
 PARAMETER(LCL.TH_Max_GT_LoinEye_Inch);
 PARAMETER(LCL.TH_Max_GT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Max_GT_Lean_Pct);
 PARAMETER(LCL.TH_Head_LT_Backfat_In_Min);
 PARAMETER(LCL.TH_Head_LT_LoinEye_In_Min);
 PARAMETER(LCL.TH_Head_LT_Hot_Wt_lb_Min);
 PARAMETER(LCL.TH_Head_LT_Lean_Pct_Min);
 PARAMETER(LCL.TH_Head_GT_Backfat_In_Max);
 PARAMETER(LCL.TH_Head_GT_LoinEye_In_Max);
 PARAMETER(LCL.TH_Head_GT_Hot_Wt_lb_Max);
 PARAMETER(LCL.TH_Head_GT_Lean_Pct_Max);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt TatHdrExt WOPrdSitCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270520;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
  PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
  PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Min_LT_Lean_Pct);
  PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
  PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
  PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Max_GT_Lean_Pct);
  PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
  PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
  PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
  PARAMETER(LCL.TE_Unused_Number_1);
  PARAMETER(LCL.TE_UnUsed_Number_2);
  PARAMETER(LCL.TE_Unused_Number_3);
  PARAMETER(LCL.TE_Unused_Status_1);
  PARAMETER(LCL.TE_Unused_Status_2);
  PARAMETER(LCL.TE_Unused_Status_3);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   // DB1.RS User Changed = CON.*BLANK
   DB1.RS_User_Changed = *BLANK;

   // DB1.RS Date Changed = CON.*ZERO
   DB1.RS_Date_Changed = *ZERO;

   // DB1.RS Time Changed = CON.*ZERO
   DB1.RS_Time_Changed = *ZERO;

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg TatHdrEXT WOPrdSitCH) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1270598;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_CA_Market_Price);
  PARAMETER(DB1.TH_CA_Base_Market_Price);
  PARAMETER(DB1.TH_CA_Base_Mkt_Price_Amt);
  PARAMETER(DB1.TH_CA_Sort_Discount_Amt);
  PARAMETER(DB1.TH_CA_Yield_Gain_Loss_Amt);
  PARAMETER(DB1.TH_CA_Base_Carcass_Value);
  PARAMETER(DB1.TH_CA_Lean_Premium_Amt);
  PARAMETER(DB1.TH_CA_Carcass_Gross_Amt);
  PARAMETER(DB1.TH_CA_Bse_Mkt_Live_CWT);
  PARAMETER(DB1.TH_CA_Bse_Mkt_Carc_CWT);
  PARAMETER(DB1.TH_CA_Srt_Dsc_Live_CWT);
  PARAMETER(DB1.TH_CA_Srt_Dsc_Carc_CWT);
  PARAMETER(DB1.TH_CA_Yld_G_L_Live_CWT);
  PARAMETER(DB1.TH_CA_Yld_G_L_Carc_CWT);
  PARAMETER(DB1.TH_CA_Crc_Val_Live_CWT);
  PARAMETER(DB1.TH_CA_Crc_Val_Carc_CWT);
  PARAMETER(DB1.TH_CA_Lean_Prm_Live_CWT);
  PARAMETER(DB1.TH_CA_Lean_Prm_Carc_CWT);
  PARAMETER(DB1.TH_CA_Gross_Live_CWT);
  PARAMETER(DB1.TH_CA_Gross_Carc_CWT);
  PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
  PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
  PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Min_LT_Lean_Pct);
  PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
  PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
  PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Max_GT_Lean_Pct);
  PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
  PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
  PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 // LCL.BOH Buy Order Number = DB1.BOH Buy Order Number
 LCL.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // LCL.BOL Load Number = DB1.BOL Load Number
 LCL.BOL_Load_Number = DB1.BOL_Load_Number;

 // LCL.TH Tattoo Number = DB1.TH Tattoo Number
 LCL.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

 // LCL.TH Head LT Backfat In Min = CON.*ZERO
 LCL.TH_Head_LT_Backfat_In_Min = *ZERO;

 // LCL.TH Head LT Hot Wt lb Min = CON.*ZERO
 LCL.TH_Head_LT_Hot_Wt_lb_Min = *ZERO;

 // LCL.TH Head LT LoinEye In Min = CON.*ZERO
 LCL.TH_Head_LT_LoinEye_In_Min = *ZERO;

 // LCL.TH Head LT Lean Pct Min = CON.*ZERO
 LCL.TH_Head_LT_Lean_Pct_Min = *ZERO;

 // LCL.TH Head GT Backfat In Max = CON.*ZERO
 LCL.TH_Head_GT_Backfat_In_Max = *ZERO;

 // LCL.TH Head GT Hot Wt lb Max = CON.*ZERO
 LCL.TH_Head_GT_Hot_Wt_lb_Max = *ZERO;

 // LCL.TH Head GT LoinEye In Max = CON.*ZERO
 LCL.TH_Head_GT_LoinEye_In_Max = *ZERO;

 // LCL.TH Head GT Lean Pct Max = CON.*ZERO
 LCL.TH_Head_GT_Lean_Pct_Max = *ZERO;

 ENDIF;

 //?Process Carcass
 CASE;

 // IF DB1.ET Hot Wgt LE LCL.TH Min LT Hot Wt lb
 IF DB1.ET_Hot_Wgt <= LCL.TH_Min_LT_Hot_Wt_lb;

 //?LT 120 Pounds
 // LCL.TH Head LT Hot Wt lb Min = LCL.TH Head LT Hot Wt lb Min + CON.1
 LCL.TH_Head_LT_Hot_Wt_lb_Min = LCL.TH_Head_LT_Hot_Wt_lb_Min + 1;

 //?Process Carcass
 // IF DB1.ET Hot Wgt GE LCL.TH Max GT Hot Wt lb
 IF DB1.ET_Hot_Wgt >= LCL.TH_Max_GT_Hot_Wt_lb;

 //?GT 310 Pounds
 // LCL.TH Head GT Hot Wt lb Max = LCL.TH Head GT Hot Wt lb Max + CON.1
 LCL.TH_Head_GT_Hot_Wt_lb_Max = LCL.TH_Head_GT_Hot_Wt_lb_Max + 1;

 //?Process Carcass
 // IF DB1.ET Lean Percent NPPC LE LCL.TH Min LT Lean Pct
 IF DB1.ET_Lean_Percent_NPPC <= LCL.TH_Min_LT_Lean_Pct;

 //?< 43% Lean
 // LCL.TH Head LT Lean Pct Min = LCL.TH Head LT Lean Pct Min + CON.1
 LCL.TH_Head_LT_Lean_Pct_Min = LCL.TH_Head_LT_Lean_Pct_Min + 1;

 //?Process Carcass
 // IF DB1.ET Lean Percent NPPC GE LCL.TH Max GT Lean Pct
 IF DB1.ET_Lean_Percent_NPPC >= LCL.TH_Max_GT_Lean_Pct;

 //?> 63% Lean
 // LCL.TH Head GT Lean Pct Max = LCL.TH Head GT Lean Pct Max + CON.1
 LCL.TH_Head_GT_Lean_Pct_Max = LCL.TH_Head_GT_Lean_Pct_Max + 1;

 //?Process Carcass
 // IF DB1.ET Backfat Thickness Inch LE LCL.TH Min LT Backfat Inch
 IF DB1.ET_Backfat_Thickness_Inch <= LCL.TH_Min_LT_Backfat_Inch;

 //?< 0.1 Backfat
 // LCL.TH Head LT Backfat In Min = LCL.TH Head LT Backfat In Min + CON.1
 LCL.TH_Head_LT_Backfat_In_Min = LCL.TH_Head_LT_Backfat_In_Min + 1;

 //?Process Carcass
 // IF DB1.ET Backfat Thickness Inch GE LCL.TH Max GT Backfat Inch
 IF DB1.ET_Backfat_Thickness_Inch >= LCL.TH_Max_GT_Backfat_Inch;

 //?> 1.7 Backfat
 // LCL.TH Head GT Backfat In Max = LCL.TH Head GT Backfat In Max + CON.1
 LCL.TH_Head_GT_Backfat_In_Max = LCL.TH_Head_GT_Backfat_In_Max + 1;

 //?Process Carcass
 // IF DB1.ET Loin-Eye Depth Inches LE LCL.TH Min LT LoinEye Inch
 IF DB1.ET_Loin_Eye_Depth_Inches <= LCL.TH_Min_LT_LoinEye_Inch;

 //?< 1.3 LoinEye
 // LCL.TH Head LT LoinEye In Min = LCL.TH Head LT LoinEye In Min + CON.1
 LCL.TH_Head_LT_LoinEye_In_Min = LCL.TH_Head_LT_LoinEye_In_Min + 1;

 //?Process Carcass
 // IF DB1.ET Loin-Eye Depth Inches GE LCL.TH Max GT LoinEye Inch
 IF DB1.ET_Loin_Eye_Depth_Inches >= LCL.TH_Max_GT_LoinEye_Inch;

 //?> 3.2 LoinEye
 // LCL.TH Head GT LoinEye In Max = LCL.TH Head GT LoinEye In Max + CON.1
 LCL.TH_Head_GT_LoinEye_In_Max = LCL.TH_Head_GT_LoinEye_In_Max + 1;

 ENDIF;

}


