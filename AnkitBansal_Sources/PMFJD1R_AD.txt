// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFJD1R
// ?Date: 14.08.2025 Time: 03:44:56
// ?------------------------------------------------------------------------------------------------

//?USER: Load detail screen from DBF record

// DTL.Ship Date USR = DTL.Scheduled Ship Date
DTL.Ship_Date_USR = DTL.Scheduled_Ship_Date;

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(LCL.Credit_Item_Status);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(PAR.Pieces_Per_Head);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Group_for_Packaging);
PARAMETER(LCL.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(LCL.Export_Domestic);
PARAMETER(LCL.Print_On_Schedule);
PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
PARAMETER(LCL.Fresh_Sched_As_Ordered);
PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PAR.ATS Quantity Need USR = DTL.Quantity Ordered - DTL.Quantity Scheduled
PAR.ATS_Quantity_Need_USR = DTL.Quantity_Ordered - DTL.Quantity_Scheduled;

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

// LCL.Days = CON.*ZERO
LCL.Days = *ZERO;

// LCL.Number of Days = CON.*ZERO
LCL.Number_of_Days = *ZERO;

// Call program Rtv Item Prod Yield   XF.
CALL PROGRAM(Rtv Item Prod Yield   XF) ('POQWXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Production_Yield);
PARAMETER(LCL.Record_Found_USR);

CASE;

// IF LCL.Production Yield is not equal to zeros
IF LCL.Production_Yield <> *ZERO;

// Compute: weight need
LCL.SM_Weight_Need_USR = ( PAR.ATS_Quantity_Need_USR * PAR.Unit_Weight ) (                         +
LCL.Production_Yield / 100 );

ENDIF;

//?Pieces Needed
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// SM Pieces Need USR
LCL.SM_Pieces_Need_USR = ( PAR.ATS_Quantity_Need_USR * PAR.Pieces_Per_Bag 'H' )                    +
* PAR.Bags_Per_Unit 'H';

//?Pieces Needed
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.SM Pieces Need USR = CON.*ZERO
LCL.SM_Pieces_Need_USR = *ZERO;

ENDIF;

// LCL.Weight Need USR = LCL.SM Weight Need USR
LCL.Weight_Need_USR = LCL.SM_Weight_Need_USR;

//?Calc prod date rgt:
//?fp1309 new date calculation, item age days or from /to dates
EXECUTE FUNCTION(RTV Requested Dlvry dt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1506764;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Age Limit - Production (PAR Context) (age days or override)
CASE;

// IF LCL.Warehouse Std Chill Time is yes
IF LCL.Warehouse_Std_Chill_Time = 'Y';

//?par.age code=adjusted age code
// PAR.Chilling Time USR = LCL.Warehouse Chill Time
PAR.Chilling_Time_USR = LCL.Warehouse_Chill_Time;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(PAR.Chilling_Time_USR);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(DB1.Item_Age_Days);
PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
PARAMETER(DB1.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

// LCL.USR Aging Days 1 = LCL.Warehouse Chill Time
LCL.USR_Aging_Days_1 = LCL.Warehouse_Chill_Time;

//?Age Limit - Production (PAR Context) (age days or override)
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Chilling Time USR = LCL.Fresh Chilling Time
PAR.Chilling_Time_USR = LCL.Fresh_Chilling_Time;

// Call program CLC PA Age FrmToDates XF.
CALL PROGRAM(CLC PA Age FrmToDates XF) ('PNO7XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(PAR.Chilling_Time_USR);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(DB1.Item_Age_Days);
PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
PARAMETER(DB1.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.Production_Date_RGT);

// LCL.USR Aging Days 1 = LCL.Fresh Chilling Time
LCL.USR_Aging_Days_1 = LCL.Fresh_Chilling_Time;

ENDIF;

// DTL.Production AgeDte Fr = LCL.Production Date RGF
DTL.Production_AgeDte_Fr = LCL.Production_Date_RGF;

// DTL.Production AgeDte To = LCL.Production Date RGT
DTL.Production_AgeDte_To = LCL.Production_Date_RGT;

// LCL.Production Date = LCL.Production Date RGT
LCL.Production_Date = LCL.Production_Date_RGT;

//?Repeat while need > 0
// DOW LCL.SM Weight Need USR is Greater than zero
DOW LCL.SM_Weight_Need_USR > *ZERO;

// AND LCL.Number of Days is < 15
AND LCL.Number_of_Days < 15;

//?Increment date to next production date
EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Production_Date);
PARAMETER(LCL.Production_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Determine Production Type
CASE;

// IF LCL.Production Date EQ JOB.*Job date
IF LCL.Production_Date = JOB.*Job_date;

// PAR.Production Type = CND.Schedule
PAR.Production_Type = 'S';

EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(LCL.Production_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Set to Plan if record not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

//?Determine Production Type
// IF LCL.Production Date GT JOB.*Job date
IF LCL.Production_Date > JOB.*Job_date;

// PAR.Production Type = CND.Plan
PAR.Production_Type = 'P';

ENDIF;

CASE;

// IF PAR.Base/Conv/Loss Item is Converted
IF PAR.Base_Conv_Loss_Item = 'C';

EXECUTE FUNCTION(Clc Allocate Std f/SimRT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1923416;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(PAR.Production_Type);
PARAMETER(LCL.Production_Date);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
PARAMETER(LCL.ATS_Adj_Type_USR_2);
PARAMETER(LCL.SM_Pieces_Need_USR);
PARAMETER(LCL.SM_Weight_Need_USR);
PARAMETER(LCL.RM_Pieces_Avail_USR);
PARAMETER(LCL.RM_Weight_Avail_USR);
{
 //?USER: Initialize routine

 // PAR.100 % Already Used  USR = CND.no
 PAR.X100_Already_Used_USR = 'N';

 // PAR.Pieces Consumed USR = CON.*ZERO
 PAR.Pieces_Consumed_USR = *ZERO;

 // PAR.Weight Consumed USR = CON.*ZERO
 PAR.Weight_Consumed_USR = *ZERO;

 // PAR.RM Weight Need USR = PAR.SM Weight Need USR
 PAR.RM_Weight_Need_USR = PAR.SM_Weight_Need_USR;

 // PAR.RM Pieces Need USR = PAR.SM Pieces Need USR
 PAR.RM_Pieces_Need_USR = PAR.SM_Pieces_Need_USR;

 // PAR.RM Weight Alloc USR = PAR.SM Weight Need USR
 PAR.RM_Weight_Alloc_USR = PAR.SM_Weight_Need_USR;

 // PAR.RM Pieces Alloc USR = PAR.SM Pieces Need USR
 PAR.RM_Pieces_Alloc_USR = PAR.SM_Pieces_Need_USR;

 // PAR.RM Pieces Avail USR = CON.*ZERO
 PAR.RM_Pieces_Avail_USR = *ZERO;

 // PAR.RM Weight Avail USR = CON.*ZERO
 PAR.RM_Weight_Avail_USR = *ZERO;

 //?FP1054 01/20/09 use production warehouse when alloc consumed items
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 //?Consumed Items
 CASE;

 // IF DB1.BOM Type is Consumed - Meat
 IF DB1.BOM_Type = 'C';

 // AND DB1.Consume Priority % is Greater than zero
 AND DB1.Consume_Priority_Percent > *ZERO;

 //?FP1054  use lcl.production warehouse, acctng co
 EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(WRK.Fresh_Chilling_Time);
 PARAMETER(WRK.Base_Conv_Loss_Item);
 PARAMETER(WRK.Variety_Rendered_Cut);
 PARAMETER(WRK.Credit_Item_Status);
 PARAMETER(WRK.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Group_for_Packaging);
 PARAMETER(WRK.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item_USR);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(WRK.Export_Domestic);
 PARAMETER(WRK.Print_On_Schedule);
 PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
 PARAMETER(WRK.Fresh_Sched_As_Ordered);
 PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
 PARAMETER(WRK.Primal_Group_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Warehouse_Location);
 PARAMETER(WRK.Warehouse_Std_Chill_Time);
 PARAMETER(WRK.Warehouse_Chill_Time);
 PARAMETER(WRK.PS_Item_Id);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  PARAMETER(PAR.Warehouse_Location);
  PARAMETER(PAR.Warehouse_Std_Chill_Time);
  PARAMETER(PAR.Warehouse_Chill_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.PS_Item_Id);
  {
   //?Execute internal function

   CASE;

   // IF PAR.Item Type Code is Raw Materials
   IF PAR.Item_Type_Code = 'RM';

   // PAR.PS Item Identification = CND.RM Base
   PAR.PS_Item_Id = 'RMB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Seconds Item is Yes
   IF PAR.Seconds_Item = 'Y';

   // PAR.PS Item Identification = CND.FG Seconds
   PAR.PS_Item_Id = 'FSC';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Variety/Rendered/Cut is Variety
   IF PAR.Variety_Rendered_Cut = 'V';

   // PAR.PS Item Identification = CND.FG Variety
   PAR.PS_Item_Id = 'FVR';

   // IF PAR.Variety/Rendered/Cut is Rendered
   IF PAR.Variety_Rendered_Cut = 'R';

   // PAR.PS Item Identification = CND.FG Rendered
   PAR.PS_Item_Id = 'FRD';

   // IF PAR.Variety/Rendered/Cut is Cut
   IF PAR.Variety_Rendered_Cut = 'C';

   //?Base/Converted/Fabricated
   CASE;

   // IF PAR.Credit Item Status is yes
   IF PAR.Credit_Item_Status = 'Y';

   //?Setup Base/Converted/Fabricated Credit
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base Credit
   PAR.PS_Item_Id = 'FBC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted Credit
   PAR.PS_Item_Id = 'FCC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated Credit
   PAR.PS_Item_Id = 'FFC';

   //?Setup Base/Converted/Fabricated Credit
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss Credit
   PAR.PS_Item_Id = 'FLC';

   ENDIF;

   //?Base/Converted/Fabricated
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Setup Base/Converted/Fabricated
   CASE;

   // IF PAR.Converted/Base Item is Base
   IF PAR.Base_Conv_Loss_Item = 'B';

   // PAR.PS Item Identification = CND.FG Base
   PAR.PS_Item_Id = 'FGB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Converted
   IF PAR.Base_Conv_Loss_Item = 'C';

   // PAR.PS Item Identification = CND.FG Converted
   PAR.PS_Item_Id = 'FCV';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Fabricated
   IF PAR.Base_Conv_Loss_Item = 'F';

   // PAR.PS Item Identification = CND.FG Fabricated
   PAR.PS_Item_Id = 'FFB';

   //?Setup Base/Converted/Fabricated
   // IF PAR.Converted/Base Item is Loss
   IF PAR.Base_Conv_Loss_Item = 'L';

   // PAR.PS Item Identification = CND.FG Loss
   PAR.PS_Item_Id = 'FLS';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

 }

 //?Chilling Time
 CASE;

 // IF WRK.Warehouse Std Chill Time is yes
 IF WRK.Warehouse_Std_Chill_Time = 'Y';

 // PAR.Chilling Time USR = WRK.Warehouse Chill Time
 PAR.Chilling_Time_USR = WRK.Warehouse_Chill_Time;

 //?Chilling Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilling Time USR = WRK.Fresh Chilling Time
 PAR.Chilling_Time_USR = WRK.Fresh_Chilling_Time;

 ENDIF;

 //?FP1054 use lcl.production warehouse, acctng comp for  avail prod
 EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(LCL.RM_Weight_Avail_USR);
 PARAMETER(LCL.RM_Pieces_Avail_USR);
 PARAMETER(PAR.Chilling_Time_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
  //? instead of:
  //?Production = Standard + Prod Adj - Converted
  //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
  CASE;

  // IF DB1.PS Lock Status is NOT LOCKED
  IF DB1.PS_Lock_Status = 'N';

  //?Ship Cut Adjust
  CASE;

  // IF PAR.Chilling Time USR is GT Zero
  IF PAR.Chilling_Time_USR > *ZERO;

  // AND DB1.Production Date EQ JOB.*Job date
  AND DB1.Production_Date = JOB.*Job_date;

  EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
  PARAMETER(DB1.Company_Number);
  PARAMETER('P');
  PARAMETER(DB1.PS_Available_Ship_Date);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
  PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
  // Weight Production
  PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
  + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
  + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // Weight Available
  PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
  + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )
  - DB1.PS_Weight_Prod_Allocated;

  // Pieces Available
  PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
  + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )
  - DB1.PS_Pieces_Prod_Allocated;

  //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
  CASE;

  // IF PAR.ATS Weight Available USR is Less than zero
  IF PAR.ATS_Weight_Available_USR < *ZERO;

  CASE;

  // IF PAR.ATS Pieces Available USR is LE Zero
  IF PAR.ATS_Pieces_Available_USR <= *ZERO;

  // PAR.ATS Weight Available USR = CON.*ZERO
  PAR.ATS_Weight_Available_USR = *ZERO;

  // PAR.ATS Pieces Available USR = CON.*ZERO
  PAR.ATS_Pieces_Available_USR = *ZERO;

  ENDIF;

  ENDIF;

  // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
  PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

  ENDIF;

 }

 // PAR.RM Pieces Avail USR = PAR.RM Pieces Avail USR + LCL.RM Pieces Avail USR
 PAR.RM_Pieces_Avail_USR = PAR.RM_Pieces_Avail_USR + LCL.RM_Pieces_Avail_USR;

 // PAR.RM Weight Avail USR = PAR.RM Weight Avail USR + LCL.RM Weight Avail USR
 PAR.RM_Weight_Avail_USR = PAR.RM_Weight_Avail_USR + LCL.RM_Weight_Avail_USR;

 ENDIF;

 CASE;

 // IF DB1.Production Yield is not equal to zeros
 IF DB1.Production_Yield <> *ZERO;

 ENDIF;

}


// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Avail Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1477682;
PARAMETER(LCL.Accounting_Company);
PARAMETER(PAR.Production_Type);
PARAMETER(LCL.Production_Date);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(PAR.PS_Avg_Piece_Wgt);
PARAMETER(LCL.RM_Weight_Avail_USR);
PARAMETER(LCL.RM_Pieces_Avail_USR);
PARAMETER(PAR.Chilling_Time_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
 //?so calc is: Production = Planned Prod + Standard + Prod Adj - Converted
 //? instead of:
 //?Production = Standard + Prod Adj - Converted
 //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
 CASE;

 // IF DB1.PS Lock Status is NOT LOCKED
 IF DB1.PS_Lock_Status = 'N';

 //?Ship Cut Adjust
 CASE;

 // IF PAR.Chilling Time USR is GT Zero
 IF PAR.Chilling_Time_USR > *ZERO;

 // AND DB1.Production Date EQ JOB.*Job date
 AND DB1.Production_Date = JOB.*Job_date;

 EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
 PARAMETER(DB1.Company_Number);
 PARAMETER('P');
 PARAMETER(DB1.PS_Available_Ship_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?FP1054 06/02/06 add planned prod wt and pieces to Weight Prod & Pieces Prd
 // Weight Production
 PAR.Weight_Production_USR = ( ( ( DB1.PS_Weight_Planned_Prod + DB1.PS_Weight_Standard )
 + DB1.PS_Weight_Prod_Adj ) - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Production
 PAR.Pieces_Production_USR = ( ( ( DB1.PS_Pieces_Planned_Prod + DB1.PS_Pieces_Standard )
 + DB1.PS_Pieces_Prod_Adj ) - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 // Weight Available
 PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
 + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )                                     +
 - DB1.PS_Weight_Prod_Allocated;

 // Pieces Available
 PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
 + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )                                     +
 - DB1.PS_Pieces_Prod_Allocated;

 //?Weight Avail E1971 RMC   2/27/12 change to leave pieces if > 0
 CASE;

 // IF PAR.ATS Weight Available USR is Less than zero
 IF PAR.ATS_Weight_Available_USR < *ZERO;

 CASE;

 // IF PAR.ATS Pieces Available USR is LE Zero
 IF PAR.ATS_Pieces_Available_USR <= *ZERO;

 // PAR.ATS Weight Available USR = CON.*ZERO
 PAR.ATS_Weight_Available_USR = *ZERO;

 // PAR.ATS Pieces Available USR = CON.*ZERO
 PAR.ATS_Pieces_Available_USR = *ZERO;

 ENDIF;

 ENDIF;

 // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
 PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

 ENDIF;

}


ENDIF;

// LCL.SM Weight Need USR = LCL.SM Weight Need USR - LCL.RM Weight Avail USR
LCL.SM_Weight_Need_USR = LCL.SM_Weight_Need_USR - LCL.RM_Weight_Avail_USR;

// LCL.SM Pieces Need USR = LCL.SM Pieces Need USR - LCL.RM Pieces Avail USR
LCL.SM_Pieces_Need_USR = LCL.SM_Pieces_Need_USR - LCL.RM_Pieces_Avail_USR;

//?1st time prod is avail, turn on date counter sts
CASE;

// IF LCL.SM Weight Need USR NE LCL.Weight Need USR
IF LCL.SM_Weight_Need_USR <> LCL.Weight_Need_USR;

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?Add 1 to day counter when product starts being used to comp to age code
CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

// LCL.Days = LCL.Days + CON.1
LCL.Days = LCL.Days + 1;

ENDIF;

//?Force quit after checking 14 days out
// LCL.Number of Days = LCL.Number of Days + CON.1
LCL.Number_of_Days = LCL.Number_of_Days + 1;

ENDDO;

//?Adjust production date to ship date:
// DTL.Ship Date USR = LCL.Production Date + LCL.USR Aging Days 1 *DAYS
DTL.Ship_Date_USR = DATEINCR(LCL.Production_Date LCL.USR_Aging_Days_1 'DY' 1111111                 +
'NONE' 'N' 1);

CASE;

// IF LCL.SM Weight Need USR is Less than or equal zero
IF LCL.SM_Weight_Need_USR <= *ZERO;

// DTL.Text USR 23 = CON.Next Avail Ship
DTL.Text_USR_23 = 'Next Avail Ship';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text USR 23 = CON.No can do for 14 days
DTL.Text_USR_23 = 'No can do for 14 days';

// DTL.Ship Date USR = CON.*ZERO
DTL.Ship_Date_USR = *ZERO;

ENDIF;

//?FP1309 not a condition any more
//?USER: Process command keys

RETURN;

