// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDP7DFR
// ?Date: 14.08.2025 Time: 03:29:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program Rtv Field Security    XF.
CALL PROGRAM(Rtv Field Security    XF) ('PDL1XFR');
PARAMETER(PAR.Display_Flag);

//?***** Changes and comments
DO;

//?** 04/17/20   RMC R16455 Added OHE BOL Sts-is set per ship to
//?** 05/19/16   RMC E4119  remove live with tpm check
//?* 04/07/2015 LJB E004019  If Live w/TPM then get Load ID and
//?    carrier from order header and skip load dtl
//?RMC 10/25/13 E2845 added F9 to see pfs trans
//?RMC  7/15/13 E2625 dsp sched load date text
//?DLY029 07/11/07 JRB Added Claim Number
//?    RMC  Added parm to RTV for Ord vs Shp Inq RT
ENDDO;

//?USER: Initialize subfile control

MOVE *ALL (To: CTL From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV for Ord vs Shp Inq RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1410715;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Requested_Ship_Date);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(CTL.Claim_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Actual Deliv Time 4N = CTL.Actual Delivery time / CON.100 *
CTL.Actual_Deliv_Time_4N = CTL.Actual_Delivery_time / 100;

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** 05/19/16   RMC E4119  remove live with tpm check
EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV ActDlvDte          RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1540282;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Actual_Delivery_Date);
PARAMETER(CTL.Actual_Delivery_time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Delivery Date is Zero
 IF DB1.Actual_Delivery_Date = *ZERO;

 // OR DB1.Actual Delivery time is *Not Entered
 OR DB1.Actual_Delivery_time = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV EMAIL BOL Sts     RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2183962;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.OHE_Email_BOL_Sent);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.Condition Desc. 10 USR = Condition name of CTL.OHE Email BOL/Sent
CTL.Condition_Desc_10_USR = RTVCND(CTL.OHE_Email_BOL_Sent);

//?USER: Initialize subfile record from DBF record

// RCD.USR Status (Y/N) = CND.blank
RCD.USR_Status_Y_N = *BLANK;

//?Exclude line if not from order entry and cancelled.
CASE;

// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

CASE;

// IF DB1.Quantity Ordered EQ WRK.ZERO
IF DB1.Quantity_Ordered = WRK.ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Status (Y/N) = CND.yes
RCD.USR_Status_Y_N = 'Y';

ENDIF;

ENDIF;

// RCD.Quantity Scheduled = DB1.Quantity Scheduled
RCD.Quantity_Scheduled = DB1.Quantity_Scheduled;

// RCD.Weight Scheduled = DB1.Weight Scheduled
RCD.Weight_Scheduled = DB1.Weight_Scheduled;

// RCD.Quantity Shipped Total = DB1.Quantity Shipped Total
RCD.Quantity_Shipped_Total = DB1.Quantity_Shipped_Total;

// RCD.Weight Shipped Total = DB1.Weight Shipped Total
RCD.Weight_Shipped_Total = DB1.Weight_Shipped_Total;

// CTL.Country Code = DB1.Country Code
CTL.Country_Code = DB1.Country_Code;

//?USER: Process subfile control (Pre-confirm)

//?F7=Dsp Dispatch/Tracer     Disable when Live W/TPM   E004019
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

//?** 05/19/16   RMC E4119  remove live with tpm check
CASE;

// IF CTL.Load ID is Blank
IF CTL.Load_ID = *ZERO;

// Send error message - 'Load ID can not be blank for 'Display Dispatch/Tracer'.'
ERROR(USR2799);
MSGPARM(CTL.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(CTL.Load_ID);

ENDIF;

ENDIF;

//?F9=Dsp pfs trans
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program WW Ship Load/Order- 1 DF.
CALL PROGRAM(WW Ship Load/Order- 1 DF) ('PPYVDFR');
PARAMETER(CTL.Load_ID);
PARAMETER('N');

ENDIF;

//?F22=Dsp Grs Wgt
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Call program Dsp Gross Weight Dtl  DF.
CALL PROGRAM(Dsp Gross Weight Dtl  DF) ('PNJNDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Header_Status);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Display order detail line if Display is selected
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Order Detail Line  D1.
CALL PROGRAM(DSP Order Detail Line  D1) ('PDP4D1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

//?Display order detail line if Display is selected
// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Manifest Detail   DF.
CALL PROGRAM(DSP Manifest Detail   DF) ('PPS4DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// PAR.Order Number 1  PASS  USR = CTL.Order Number
PAR.Order_Number_1_PASS_USR = CTL.Order_Number;

// Call program PRT Prmt w/Co/Order #  UP.
CALL PROGRAM(PRT Prmt w/Co/Order #  UP) ('PDNTUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('PDSBCLP');
PARAMETER('Order vs. Ship Print');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

