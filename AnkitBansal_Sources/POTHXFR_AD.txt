// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POTHXFR
// ?Date: 14.08.2025 Time: 03:38:58
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** DLY029R 05/25/07 JRB Changed hard coded Co Num to Default Co Num
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Avg Days per Yr   RT) TYPE(RTVOBJ) FILE(PDLDCPP)           AC1658638;
PARAMETER(LCL.Company_Number);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 // WRK.Current Year  USR = JOB.*Job date *YEAR
 WRK.Current_Year_USR = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

 // WRK.YEAR 1 USR = WRK.Current Year  USR - CON.1
 WRK.YEAR_1_USR = WRK.Current_Year_USR - 1;

 // WRK.YEAR 2 USR = WRK.Current Year  USR - CON.2
 WRK.YEAR_2_USR = WRK.Current_Year_USR - 2;

 //?Format from/to dates for 2 years ago
 // WRK.Year  NBR USR = WRK.YEAR 2 USR
 WRK.Year_NBR_USR = WRK.YEAR_2_USR;

 // WRK.Year  (Char) USR = WRK.Year  NBR USR
 WRK.Year_Char_USR = WRK.Year_NBR_USR;

 // WRK.Date (Char-6) USR = CONCAT(WRK.Year  (Char) USR,CON.0101,CON.*ZERO)
 WRK.Date_Char_6_USR = WRK.Year_Char_USR + '0101' (*ZERO);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CON.*ZERO)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.Date From             USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Date_From_USR = CVTVAR(WRK.Date_Alpha_USR);

 // WRK.Date (Char-6) USR = CONCAT(WRK.Year  (Char) USR,CON.1231,CON.*ZERO)
 WRK.Date_Char_6_USR = WRK.Year_Char_USR + '1231' (*ZERO);

 // WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Date (Char-6) USR,CON.*ZERO)
 WRK.Date_Alpha_USR = '1' + WRK.Date_Char_6_USR (*ZERO);

 // WRK.Date To               USR = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Date_To_USR = CVTVAR(WRK.Date_Alpha_USR);

 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Balance Year GE WRK.YEAR 2 USR
 IF DB1.A_R_Balance_Year >= WRK.YEAR_2_USR;

 CASE;

 // IF WRK.First Time Flag is Yes
 IF WRK.First_Time_Flag = 'Y';

 // WRK.A/R Customer Number = DB1.A/R Customer Number
 WRK.AR_Customer_Number = DB1.AR_Customer_Number;

 // WRK.A/R Balance Year = DB1.A/R Balance Year
 WRK.A_R_Balance_Year = DB1.A_R_Balance_Year;

 // WRK.First Time Flag = CND.NO
 WRK.First_Time_Flag = 'N';

 ENDIF;

 CASE;

 // IF DB1.A/R Customer Number NE WRK.A/R Customer Number
 IF DB1.AR_Customer_Number <> WRK.AR_Customer_Number;

 // OR DB1.A/R Balance Year NE WRK.A/R Balance Year
 OR DB1.A_R_Balance_Year <> WRK.A_R_Balance_Year;

 //?Calc avg at year or cust break
 // PAR.Bal Avg Days to Pay = PAR.Bal Avg Days to Pay / PAR.Month                 USR *
 PAR.Bal_Avg_Days_to_Pay = PAR.Bal_Avg_Days_to_Pay / PAR.Month_USR;

 EXECUTE FUNCTION(RTV Parent / Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1658639;
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(WRK.Customer_Name);
 PARAMETER(WRK.Parent_Customer);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.A/R Balance Year EQ WRK.Current Year  USR
 IF WRK.A_R_Balance_Year = WRK.Current_Year_USR;

 // WRK.DSO Sales Invoiced = WRK.YTD Sales Invoiced
 WRK.DSO_Sales_Invoiced = WRK.YTD_Sales_Invoiced;

 // IF WRK.A/R Balance Year EQ WRK.YEAR 1 USR
 IF WRK.A_R_Balance_Year = WRK.YEAR_1_USR;

 // WRK.DSO Sales Invoiced = WRK.Last Year Sales Invoiced
 WRK.DSO_Sales_Invoiced = WRK.Last_Year_Sales_Invoiced;

 // IF WRK.A/R Balance Year EQ WRK.YEAR 2 USR
 IF WRK.A_R_Balance_Year = WRK.YEAR_2_USR;

 EXECUTE FUNCTION(RTV AR Cust Pnd & Dllr RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1242443;
 PARAMETER(DB1.Company_Number);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(WRK.Date_From_USR);
 PARAMETER(WRK.Date_To_USR);
 PARAMETER(WRK.USR_Weight_Accumulated);
 PARAMETER(WRK.DSO_Sales_Invoiced);
 PARAMETER('N');
 {
  //?USER: Initialize routine

  // PAR.USR Weight Accumulated = CON.*ZERO
  PAR.USR_Weight_Accumulated = *ZERO;

  // PAR.USR Billing Dtl Net Dol 3 = CON.*ZERO
  PAR.USR_Billing_Dtl_Net_Dol_3 = *ZERO;

  // WRK.USR From Date = PAR.Actual Shipped Date
  WRK.USR_From_Date = PAR.Actual_Shipped_Date;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Edit for date range and continue if valid
  CASE;

  // IF DB1.Actual Shipped Date LT WRK.USR From Date
  IF DB1.Actual_Shipped_Date < WRK.USR_From_Date;

  // OR DB1.Actual Shipped Date GT PAR.USR To Date
  OR DB1.Actual_Shipped_Date > PAR.USR_To_Date;

  //?Edit for date range and continue if valid
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.FOB Gross Amount = DB1.FOB Gross Amount
  WRK.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

  // WRK.Weight Billed = DB1.Weight Billed
  WRK.Weight_Billed = DB1.Weight_Billed;

  //?FOB amount and weight
  CASE;

  // IF WRK.Billing Activity Type is Invoice
  IF WRK.Billing_Activity_Type = '1';

  CASE;

  // IF DB1.Affect Sales Doll Status is no
  IF DB1.Affect_Sales_Doll_Status = 'N';

  // WRK.FOB Gross Amount = CON.*ZERO
  WRK.FOB_Gross_Amount = *ZERO;

  ENDIF;

  CASE;

  // IF DB1.Affect Sales Pnds Status is no
  IF DB1.Affect_Sales_Pnds_Status = 'N';

  // WRK.Weight Billed = CON.*ZERO
  WRK.Weight_Billed = *ZERO;

  ENDIF;

  //?FOB amount and weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Credit or Debit Memo
  CASE;

  // IF PAR.USR Sales Realiz. Flag is Process by Flags
  IF PAR.USR_Sales_Realiz_Flag = 'P';

  CASE;

  // IF DB1.Affect Sales Doll Status is no
  IF DB1.Affect_Sales_Doll_Status = 'N';

  // WRK.FOB Gross Amount = CON.*ZERO
  WRK.FOB_Gross_Amount = *ZERO;

  ENDIF;

  CASE;

  // IF DB1.Affect Sales Pnds Status is no
  IF DB1.Affect_Sales_Pnds_Status = 'N';

  // WRK.Weight Billed = CON.*ZERO
  WRK.Weight_Billed = *ZERO;

  ENDIF;

  //?Credit or Debit Memo
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.USR Sales Realiz. Flag is All
  IF PAR.USR_Sales_Realiz_Flag = 'A';

  CASE;

  // IF DB1.Affect Sales Doll Status is no
  IF DB1.Affect_Sales_Doll_Status = 'N';

  // AND DB1.Affect Sales Pnds Status is yes
  AND DB1.Affect_Sales_Pnds_Status = 'Y';

  // WRK.FOB Gross Amount = CON.*ZERO
  WRK.FOB_Gross_Amount = *ZERO;

  ENDIF;

  CASE;

  // IF DB1.Affect Sales Pnds Status is no
  IF DB1.Affect_Sales_Pnds_Status = 'N';

  // AND DB1.Affect Sales Doll Status is yes
  AND DB1.Affect_Sales_Doll_Status = 'Y';

  // WRK.Weight Billed = CON.*ZERO
  WRK.Weight_Billed = *ZERO;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.USR Sales Realiz. Flag is None
  IF PAR.USR_Sales_Realiz_Flag = 'N';

  // WRK.FOB Gross Amount = CON.*ZERO
  WRK.FOB_Gross_Amount = *ZERO;

  // WRK.Weight Billed = CON.*ZERO
  WRK.Weight_Billed = *ZERO;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?If credit memo weight is greater than zero, reverse the sign
  CASE;

  // IF WRK.Weight Billed is Greater than zero
  IF WRK.Weight_Billed > *ZERO;

  // AND WRK.Billing Activity Type is Credit Memo
  AND WRK.Billing_Activity_Type = '2';

  // WRK.Weight Billed = CON.*ZERO - WRK.Weight Billed
  WRK.Weight_Billed = *ZERO - WRK.Weight_Billed;

  ENDIF;

  // WRK.USR Percent Work, 7.4 = DB1.Absorbed Freight Rate / CON.100 *Rounded
  WRK.USR_Percent_Work_7_4 = DB1.Absorbed_Freight_Rate_CWT / 100 'H';

  // WRK.USR Freight Amount 1 = WRK.USR Percent Work, 7.4 * WRK.Weight Billed *Rounde
  WRK.USR_Freight_Amount_1 = WRK.USR_Percent_Work_7_4 * WRK.Weight_Billed 'H';

  // WRK.Billing Detail Net Dol. = WRK.FOB Gross Amount
  WRK.Billing_Detail_Net_Dol = WRK.FOB_Gross_Amount;

  // PAR.USR Billing Dtl Net Dol 3 = PAR.USR Billing Dtl Net Dol 3 + WRK.Billing Deta
  PAR.USR_Billing_Dtl_Net_Dol_3 = PAR.USR_Billing_Dtl_Net_Dol_3
  + WRK.Billing_Detail_Net_Dol;

  // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + WRK.Weight Billed
  PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + WRK.Weight_Billed;

  ENDIF;

 }

 ENDIF;

 EXECUTE FUNCTION(Crt A/R Summary DSO Wk CR) TYPE(CRTOBJ) FILE(POANCPP)          AC1599831;
 PARAMETER(DB1.Company_Number);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(WRK.A_R_Balance_Year);
 PARAMETER(WRK.Customer_Name);
 PARAMETER(WRK.Parent_Customer);
 PARAMETER(WRK.DSO_Sales_Invoiced);
 PARAMETER(PAR.Bal_Avg_Days_to_Pay);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 // WRK.A/R Customer Number = DB1.A/R Customer Number
 WRK.AR_Customer_Number = DB1.AR_Customer_Number;

 // WRK.A/R Balance Year = DB1.A/R Balance Year
 WRK.A_R_Balance_Year = DB1.A_R_Balance_Year;

 // PAR.Month                 USR = CON.*ZERO
 PAR.Month_USR = *ZERO;

 // PAR.Bal Avg Days to Pay = CON.*ZERO
 PAR.Bal_Avg_Days_to_Pay = *ZERO;

 EXECUTE FUNCTION(Rtv YTD/Last YR Inv $ RT) TYPE(RTVOBJ) FILE(ARBCREP)           AC1582799;
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(WRK.YTD_Sales_Invoiced);
 PARAMETER(WRK.Last_Year_Sales_Invoiced);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.YTD Sales Invoiced = PAR.YTD Sales Invoiced + DB1.YTD Sales Invoiced
  PAR.YTD_Sales_Invoiced = PAR.YTD_Sales_Invoiced + DB1.YTD_Sales_Invoiced;

  // PAR.Last Year Sales Invoiced = PAR.Last Year Sales Invoiced + DB1.Last Year Sales Invoiced
  PAR.Last_Year_Sales_Invoiced = PAR.Last_Year_Sales_Invoiced
  + DB1.Last_Year_Sales_Invoiced;

 }

 ENDIF;

 // PAR.Bal Avg Days to Pay = PAR.Bal Avg Days to Pay + DB1.Bal Avg Days to Pay
 PAR.Bal_Avg_Days_to_Pay = PAR.Bal_Avg_Days_to_Pay + DB1.Bal_Avg_Days_to_Pay;

 // PAR.Month                 USR = PAR.Month                 USR + CON.1
 PAR.Month_USR = PAR.Month_USR + 1;

 ENDIF;

}


