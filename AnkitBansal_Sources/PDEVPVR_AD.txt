// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDEVPVR
// ?Date: 14.08.2025 Time: 03:31:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 1/03/2019 JBB E14292 - Allow User with Salesperson Code to Execute
//?                        When Validating the From and To Dates,
//?                        only check IP Comm Mkt Price Groupt when
//?                        Commodity Market Code is SBD.  This will
//?                        allow a person with a Salesperson Code to
//?                        validate the dates.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Salesperson/Type  IF) TYPE(EXCINTFUN)                      AC2000751;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(DTL.Sales_Type_Code);
PARAMETER(LCL.Output_Only_1_USR);
PARAMETER(DTL.Salesperson_Code);
{
 //?Execute internal function

 // Call program Rtv Plant Co/Org      XF.
 CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);

 // PAR.Output Only 1 USR = CND.yes
 PAR.Output_Only_1_USR = 'Y';

 CASE;

 // IF LCL.Company Organization is Seaboard
 IF LCL.Company_Organization = 'S';

 // PAR.Salesperson Code 1 = PAR.Salesperson Code
 PAR.Salesperson_Code_1 = PAR.Salesperson_Code;

 EXECUTE FUNCTION(RTV Salesperson Type   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1205126;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Sales_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Salesperson Code is entered
 IF PAR.Salesperson_Code <> *BLANK;

 // PAR.Output Only 1 USR = CND.no
 PAR.Output_Only_1_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Salesperson Code 1 = CND.not entered
 PAR.Salesperson_Code_1 = *BLANK;

 ENDIF;

}


// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Process command keys

//?Prompt Market Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Commodity Market Code USR
AND PGM.*Cursor_field = DTL.Commodity_Market_Code_USR;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(DTL.Commodity_Market_Code_USR);

ENDIF;

//?USER: Validate fields

//?Validate Commodity Market Code and Sales Type combination
CASE;

// IF DTL.Salesperson Code is entered
IF DTL.Salesperson_Code <> *BLANK;

//?If Sales Type is blank, send error message
CASE;

// IF DTL.Sales Type Code is Not Entered
IF DTL.Sales_Type_Code = *BLANK;

// Send error message - 'Sales Type is required.'
ERROR(USR4336);
MSGPARM(DTL.Sales_Type_Code);

ENDIF;

//?Validate Commodity Market Code and Sales Type combination
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Sales Type Code = CON.*BLANK
DTL.Sales_Type_Code = *BLANK;

ENDIF;

// Call program VAL Comm Mkt Prc Ent  XF.
CALL PROGRAM(VAL Comm Mkt Prc Ent  XF) ('PNPXXFR');
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Sales_Type_Code);
PARAMETER(PAR.Access_Denied_Y_N);

//?VAL: Access
CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

// Send error message - 'Access Denied for &1 Market for &3 Sales Type.'
ERROR(USR4313);
MSGPARM(DTL.Commodity_Market_Code_USR);
MSGPARM(DTL.Salesperson_Code);
MSGPARM(DTL.Sales_Type_Code);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Access Denied for &1 Market.'
ERROR(USR4296);
MSGPARM(DTL.Commodity_Market_Code_USR);

QUIT;

ENDIF;

ENDIF;

//?Validate Market Code
CASE;

// IF DTL.Commodity Market Code USR is Entered
IF DTL.Commodity_Market_Code_USR <> *BLANK;

EXECUTE FUNCTION(RTV & VLD Commod. Mkt  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1382869;
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Commodity Market not found'
ERROR(USR2162);
MSGPARM(DTL.Commodity_Market_Code_USR);

ENDIF;

ENDIF;

//?Do not copy if records already exist for the Market Code and Date
//?4/16/01  Hard code - dont check market/group USD/Cutout for existence
//?VAL: To Date
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

// AND PAR.Commodity Market Code USR is Seaboard
AND PAR.Commodity_Market_Code_USR = 'SBD';

CASE;

// IF DTL.Date To               USR is Entered
IF DTL.Date_To_USR <> *ZERO;

EXECUTE FUNCTION(Val Price Exists      RT) TYPE(RTVOBJ) FILE(PNF1REP)           AC1988902;
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Sales_Type_Code);
PARAMETER(DTL.Date_To_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Val Price Exists      RT) TYPE(RTVOBJ) FILE(OMF0CPP)           AC1988911;
 PARAMETER(DB1.Commodity_Market_Code);
 PARAMETER(DB1.Commodity_Price_Group);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF PAR.Record Found USR is Record Found
 IF PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Market Code and Date combination already exist.'
ERROR(USR2235);
MSGPARM(DTL.Commodity_Market_Code_USR);
MSGPARM(DTL.Date_To_USR);

ENDIF;

ENDIF;

//?VAL: To Date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV & VAL Mrkt Cd/Date RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1593859;
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Date_To_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Commodity Market Code is Default Market Code(USD)
 IF DB1.Commodity_Market_Code = 'USD';

 // AND DB1.Commodity Price Group is CUTOUT
 AND DB1.Commodity_Price_Group = 'CUTOUT';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Market Code and Date combination already exist.'
ERROR(USR2235);
MSGPARM(DTL.Commodity_Market_Code_USR);
MSGPARM(DTL.Date_To_USR);

ENDIF;

ENDIF;

//?No Records Found In File Send Error Message
//?VAL: From Date
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

// AND PAR.Commodity Market Code USR is Seaboard
AND PAR.Commodity_Market_Code_USR = 'SBD';

CASE;

// IF DTL.Date From             USR is Not zeros
IF DTL.Date_From_USR <> *ZERO;

EXECUTE FUNCTION(Val Price Exists      RT) TYPE(RTVOBJ) FILE(PNF1REP)           AC1988902;
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Sales_Type_Code);
PARAMETER(DTL.Date_From_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Val Price Exists      RT) TYPE(RTVOBJ) FILE(OMF0CPP)           AC1988911;
 PARAMETER(DB1.Commodity_Market_Code);
 PARAMETER(DB1.Commodity_Price_Group);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF PAR.Record Found USR is Record Found
 IF PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Market Code and Date combination does not exist.'
ERROR(USR2950);
MSGPARM(DTL.Commodity_Market_Code_USR);
MSGPARM(DTL.Date_From_USR);

ENDIF;

ENDIF;

//?VAL: From Date
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Date From             USR is Not zeros
IF DTL.Date_From_USR <> *ZERO;

EXECUTE FUNCTION(RTV & VAL Mrkt Cd/Date RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1593859;
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Date_From_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Commodity Market Code is Default Market Code(USD)
 IF DB1.Commodity_Market_Code = 'USD';

 // AND DB1.Commodity Price Group is CUTOUT
 AND DB1.Commodity_Price_Group = 'CUTOUT';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Market Code and Date combination does not exist.'
ERROR(USR2950);
MSGPARM(DTL.Commodity_Market_Code_USR);
MSGPARM(DTL.Date_From_USR);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(DTL.Salesperson_Name_DRV);
PARAMETER(DTL.Salesperson_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

EXECUTE FUNCTION(RTV Prior Day          RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1425841;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Date_To_USR);
PARAMETER(1);
PARAMETER(DTL.Date_From_USR);
{
 //?USER: Initialize routine

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Week Days
 IF DB1.Day_of_Week = '6'/'2'/'5'/'3'/'4';

 // AND DB1.Public Holiday Status is no
 AND DB1.Public_Holiday_Status = 'N';

 CASE;

 // IF PAR.CTL Prior Day EQ PAR.Count USR
 IF PAR.CTL_Prior_Day = PAR.Count_USR;

 // PAR.Date From             USR = DB1.Post to G/L Date
 PAR.Date_From_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 ENDIF;

}


//?USER: User defined action

// Call program RTV Copy Commod Mkt Pr1XF.
CALL PROGRAM(RTV Copy Commod Mkt Pr1XF) ('POC2XFR');
PARAMETER(DTL.Commodity_Market_Code_USR);
PARAMETER(DTL.Date_From_USR);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Sales_Type_Code);

