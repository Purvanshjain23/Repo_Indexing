// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUD0XFR
// ?Date: 14.08.2025 Time: 03:50:06
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?*****
//?** These are the basic logic steps for this procedure
DO;

//?** Company and Warehouse code are passed in from calling program
//?**
//?** 1.  Populate the order header and detail fields
//?** 2.  Create the order header record
//?** 3.  Create the order detail record
//?** 4.  Create the order events record
//?** 5.  Create the load/order change log record
//?** 6.  Create any missing XREF record in Customer Item Ref for EDI.
//?** 7.  Run the POST process
//?**
ENDDO;

//?*****
//?** Populate Default Order Fields
DO;

// PAR.Company Number = PAR.Company Number Pass   USR
PAR.Company_Number = PAR.Company_Number_Pass_USR;

// PAR.Warehouse Code = PAR.Warehouse Code PASS   USR
PAR.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

// PAR.Ship To Customer = PAR.Customer Number Pass  USR
PAR.Ship_To_Customer = PAR.Customer_Number_Pass_USR;

// LCL.EDI Trading Partner No. = PAR.EDI Trading Partner No.
LCL.EDI_Trading_Partner_No = PAR.EDI_Trading_Partner_No;

//?** Retrieve next Order Number
EXECUTE FUNCTION(CHG Next Order Number  CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1263775;
PARAMETER(*ZERO);
PARAMETER(PAR.Next_Order_Number);
{
 //?USER: Processing before Data update

 //?Assumes Credit memo numbers always automatically assigned
 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.USR Next Order Number = DB1.Next Order Number
 PAR.USR_Next_Order_Number = DB1.Next_Order_Number;

 // DB1.Next Order Number = DB1.Next Order Number + CON.1
 DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Order Number = PAR.Next Order Number
PAR.Order_Number = PAR.Next_Order_Number;

// PAR.Order Number 1  PASS  USR = PAR.Next Order Number
PAR.Order_Number_1_PASS_USR = PAR.Next_Order_Number;

//?** Populate the Ship To Information
EXECUTE FUNCTION(RTV Cust Addr, A/R Cst RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263804;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Bill to Customer = PAR.A/R Customer Number
PAR.Bill_to_Customer = PAR.AR_Customer_Number;

//?** Populate the Bill To Information
EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?08/20/20 DN S16763-Change to Get Special Instructions.
EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(PAR.Special_Instructions);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.P_O_Required_Flag);
PARAMETER(LCL.Deliver_after_time);
PARAMETER(LCL.Type_Code);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Mileage_To_Customer);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Outside_Warehouse_Flag);
PARAMETER(LCL.Customer_Group_Code);
PARAMETER(LCL.Customer_Group_Code_2);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Dft Sales Channel  XF.
CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.SEC_Default_Sales_Channel);

// LCL.Shipping Method = PAR.Shipping Method
LCL.Shipping_Method = PAR.Shipping_Method;

// PAR.Scheduled Ship Date = PAR.Date 1          PASS  USR
PAR.Scheduled_Ship_Date = PAR.Date_1_PASS_USR;

// PAR.Requested Ship Date = PAR.Date 1          PASS  USR
PAR.Requested_Ship_Date = PAR.Date_1_PASS_USR;

// PAR.Requested Delivery Date = PAR.From Date Pass        USR
PAR.Requested_Delivery_Date = PAR.From_Date_Pass_USR;

// LCL.Requested Delivery Time = CVTVAR(PAR.Requested Delivery Time)
LCL.Requested_Delivery_Time = CVTVAR(PAR.Requested_Delivery_Time);

// PAR.Order Date = PAR.Thru Date Pass        USR
PAR.Order_Date = PAR.Thru_Date_Pass_USR;

// PAR.Date of Original Entry = JOB.*Job date
PAR.Date_of_Original_Entry = JOB.*Job_date;

// PAR.Time of Original Entry = JOB.*Job time
PAR.Time_of_Original_Entry = JOB.*Job_time;

// PAR.OH Load Plan Ready = CND.Blank
PAR.OH_Load_Plan_Ready = *BLANK;

// PAR.Header Status = CND.Entered
PAR.Header_Status = 'E';

// LCL.Load Plan Order = PAR.Load Plan Order
LCL.Load_Plan_Order = PAR.Load_Plan_Order;

// PAR.Print Pick Slip = CND.yes
PAR.Print_Pick_Slip = 'Y';

// PAR.Affect Auto Accruals = CND.Affect Auto Accruals
PAR.Affect_Auto_Accruals = 'Y';

// PAR.Event Code = CND.01 Order Entry
PAR.Event_Code = '01';

// PAR.Export Status = CND.no
PAR.Export_Status = 'N';

// PAR.Export Docs Go w/Driver = CND.No
PAR.Export_Docs_Go_w_Driver = 'N';

// LCL.Order Type - Sales = PAR.Order Type - Sales
LCL.Order_Type_Sales = PAR.Order_Type_Sales;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.LTL Flag = CND.Yes
PAR.LTL_Flag = 'Y';

// PAR.Slip Sheet = CND.no
PAR.Slip_Sheet = 'N';

// PAR.Shrink Wrap = CND.no
PAR.Shrink_Wrap = 'N';

//?* Default Email when shipped to Yes if blanks
CASE;

// IF PAR.Email Cust On Order Ship is *Blanks
IF PAR.Email_Cust_On_Order_Ship = *BLANK;

// PAR.Email Cust On Order Ship = CND.Yes
PAR.Email_Cust_On_Order_Ship = 'Y';

ENDIF;

//?Default Terms code if it is blanks
CASE;

// IF LCL.Terms Code is blank
IF LCL.Terms_Code = *BLANK;

// LCL.Terms Code = CON.01
LCL.Terms_Code = 01;

ENDIF;

EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Commodity Market Code = CND.Default Market Code(USD)
PAR.Commodity_Market_Code = 'USD';

// PAR.Order in Use = CND.no
PAR.Order_in_Use = 'N';

// PAR.Order Type Print Status = CND.no
PAR.Order_Type_Print_Status = 'N';

// PAR.Manager Level Code = CON.VP
PAR.Manager_Level_Code = 'VP';

// PAR.VP Level Code = CON.100
PAR.VP_Level_Code = 100;

// PAR.Price Audit = CND.Needs Price Audit
PAR.Price_Audit = 'N';

// PAR.Block Order Flag = CND.Firm Order
PAR.Block_Order_Flag = 'F';

// PAR.Order Certification Flag = CND.No
PAR.Order_Certification_Flag = 'N';

// PAR.Transfer in Storage Ind = CND.No
PAR.Transfer_in_Storage_Ind = 'N';

// PAR.Price Status = CND.Unpriced
PAR.Price_Status = 'U';

// LCL.OD Price Type = PAR.OD Price Type
LCL.OD_Price_Type = PAR.OD_Price_Type;

// LCL.Price Method Code = PAR.Price Method Code
LCL.Price_Method_Code = PAR.Price_Method_Code;

// PAR.Ord TF Exempt Code = CND.Not Exempt
PAR.Ord_TF_Exempt_Code = 'NE';

// PAR.Affect Trade Fund = CND.yes
PAR.Affect_Trade_Fund = 'Y';

// PAR.Affect Pricing = CND.yes
PAR.Affect_Pricing = 'Y';

// PAR.Affect Commission = CND.yes
PAR.Affect_Commission = 'Y';

// PAR.Date Method Code = CON.*BLANK
PAR.Date_Method_Code = *BLANK;

// PAR.Market Pricing Date = CON.*ZERO
PAR.Market_Pricing_Date = *ZERO;

// PAR.Item Structure Type Code = CON.*ZERO
PAR.Item_Structure_Type_Code = *ZERO;

// PAR.Item Structure Class Code = CON.*ZERO
PAR.Item_Structure_Class_Code = *ZERO;

// WRK.Catch Weight Status = CND.yes
WRK.Catch_Weight_Status = 'Y';

// PAR.Detail Line Status = CND.Available
PAR.Detail_Line_Status = 'A';

// PAR.Country Code = CND.Blank
PAR.Country_Code = *BLANK;

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.OH_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

// PAR.Palletize = CND.yes
PAR.Palletize = 'Y';

//?11/23/21 DN W84569-Commented Out Pallet Type. It Is Now Passed In.
//?Per Steve Burke, Transfer Orders should always be palletized.
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// PAR.Palletize = CND.yes
PAR.Palletize = 'Y';

// PAR.OD Pallet Type = CND.#2 Pallet
PAR.OD_Pallet_Type = 02;

ENDIF;

// PAR.OD Price Type Ref Num = CVTVAR(CND.Zero)
PAR.OD_Price_Type_Ref_Num = CVTVAR(0);

// PAR.OD MPR Prc Ready to Send = CND.yes
PAR.OD_MPR_Prc_Ready_to_Send = 'Y';

// PAR.Order Requires Review = CND.No
PAR.Order_Requires_Review = *BLANK;

//?06/14/21 DN W77844-Commented Out. OHE Spot Buy parm is now passed in.
ENDDO;

//?** Build/create the Order Header and Event
DO;

//?** Create the Order Header Record and Load Order Change Log record
//?**   Create OHE with Type Code, Update TPM Freight Order STS
EXECUTE FUNCTION(CRT Order Header       CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1113750;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.G5002_ORDER_DATE);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Terms_Code);
PARAMETER(PAR.Special_Instructions);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(*BLANK);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(PAR.Order_in_Use);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER('N');
PARAMETER('N');
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(*ZERO);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(*BLANK);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(PAR.Print_Pick_Slip);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Manager_Level_Code);
PARAMETER(PAR.VP_Level_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(*ZERO);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Order_Certification_Flag);
PARAMETER(*ZERO);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(PAR.Transfer_in_Storage_Ind);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(PAR.Export_Docs_Go_w_Driver);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER('N');
PARAMETER('N');
PARAMETER(PAR.Order_Requires_Review);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Time_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Time_of_Original_Entry);

 //?USER: Processing if Data record already exists

 //?** Set flag so it can be tested on the return    T075 03/28/2006 LJB
 PGM.*Return_code = 'Y2U0003';

 RETURN;

}


EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Initialize routine

 // PAR.Event Number = CON.*ZERO
 PAR.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('01');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('02');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Event Number = PAR.Event Number + CON.1
 PAR.Event_Number = PAR.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER('02');
 PARAMETER(DB1.Invoice_Memo_Company);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Activity_Completion);
 PARAMETER(DB1.Activity_Hold);
 PARAMETER(DB1.Post_Cash_Complete);
 PARAMETER(DB1.Cross_Event_Ref_Comp);
 PARAMETER(DB1.Cross_Event_Ref_Order);
 PARAMETER(DB1.Cross_Event_Ref_Event);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


//?06/13/18 DN R12926-Pass in Absorbed Freight Rate.
//?07/31/19 DN R15161-Set New OHE Fields & Commented Out CHGOBJ in OHE CRTOBJ
//?01/06/21 DN S17031-Set Delivery PO Number.
//?03/01/21 DN R17040-Set OHE Customer Vendor f/PO.
//?06/14/21 DN W77844-Set OHE Spot Buy from Input Parm.
//?06/17/21 DN W78333-Set OHE EDI Order Automated = Y.
EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Spot_Buy);
PARAMETER(LCL.OHE_PO_ACK_Flag);
PARAMETER(LCL.Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(PAR.Delivery_PO_Number);
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_EDI_943_Action);
PARAMETER(LCL.OHE_EDI_944_Action);
PARAMETER(LCL.OHE_EDI_940_Action);
PARAMETER(LCL.OHE_EDI_945_Action);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER('Y');
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(PAR.Customer_Ref_ID);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER('A');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


ENDDO;

//?** Populate Order Detail Fields for Fresh order & create OD record
DO;

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

//?If not Pre-Commencement, set Tf exempt code (EC,EP,NE)
CASE;

// IF PAR.OH TF Exempt Code is Not Pre-Commencement
IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF PAR.OH TF Exempt Code is Exempt Customer
IF PAR.OH_TF_Exempt_Code = 'EC';

CASE;

// IF PAR.Ord TF Exempt Code is Not Exempt
IF PAR.Ord_TF_Exempt_Code = 'NE';

// OR PAR.Ord TF Exempt Code is Exempt Customer
OR PAR.Ord_TF_Exempt_Code = 'EC';

// PAR.Ord TF Exempt Code = CND.Exempt Customer
PAR.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Exempt Product
PAR.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF PAR.OH TF Exempt Code is Not Exempt
IF PAR.OH_TF_Exempt_Code = 'NE';

// AND PAR.Ord TF Exempt Code is Exempt Product
AND PAR.Ord_TF_Exempt_Code = 'EP';

// PAR.OH TF Exempt Code = CND.Exempt Product
PAR.OH_TF_Exempt_Code = 'EP';

ENDIF;

//?If not Pre-Commencement, set Tf exempt code (EC,EP,NE)
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Pre Commencement
PAR.Ord_TF_Exempt_Code = 'PC';

ENDIF;

//?** Create Order Detail line item record
//?01/19/18 DN R12342-Removed parms Days to Age  Pass Usr & Item Age Days.
//?10/01/19 DN S15503-Added 'Use PO Price' as Input Parm.
//?09/14/21 DN W77844-Set OD Spot Buy Value.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.OD Spot Buy = PAR.OHE Spot Buy
LCL.OD_Spot_Buy = PAR.OHE_Spot_Buy;

ENDIF;

//?09/14/21 DN W77844-Added 'OD Spot Buy' as Input Parm.
//?10/25/24 JM S016016-Added price code as input paramter below RTV.
EXECUTE FUNCTION(RTV Crt EDI AutOrd Dtl IF) TYPE(EXCINTFUN)                     AC2142046;
PARAMETER(PAR.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(PAR.ITEM_SEQUENCE_NUMBER);
PARAMETER(PAR.G5002_ORDER_DATE);
PARAMETER(PAR.G5003_PURCHASE_ORDER_NUMB);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Warehouse_Code_PASS_USR);
PARAMETER(PAR.Use_PO_Price);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(WRK.Total_Weight_Ordered_USR);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.OD_Pallet_Type);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(LCL.OD_Spot_Buy);
PARAMETER(PAR.Next_Order_Number);
{
 //?Execute internal function

 //?Modification history
 DO;

 //?10/25/24 JM S016016-Add Price code Field on UI in input mode,
 //?                   -for pricing method DEV.User can change pricing method.
 //?                   -Price code will support F4 Prompt window.
 //?                   -All price code existing validations will apply.
 //?                   -Added price code as input paramter to PUD0XFR &
 //?                   -RTV Crt EDI AutOrd Dtl IF
 //?10/01/19 DN S15503-Added 'Use PO Price' as Input Parm.
 //?09/14/21 DN W77844-Added OD Spot Buy as Input Parm.
 //?09/17/21 JBB WI464 - Pallet Management.
 //?                     Remove defaulting Palletize and Pallet Type.
 //?                     It was already done in the calling program.
 ENDDO;

 EXECUTE FUNCTION(RTV Crt EDI AutOrd Dtl RT) TYPE(RTVOBJ) FILE(ECP005)           AC2141821;
 PARAMETER(PAR.ST02_TRANS_SET_CONTROL_NU);
 PARAMETER(PAR.ITEM_SEQUENCE_NUMBER);
 PARAMETER(PAR.G5002_ORDER_DATE);
 PARAMETER(PAR.G5003_PURCHASE_ORDER_NUMB);
 PARAMETER(PAR.EDI_Trading_Partner_No);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Customer_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Date_2_PASS_USR);
 PARAMETER(PAR.From_Date_Pass_USR);
 PARAMETER(PAR.Thru_Date_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Warehouse_Code_PASS_USR);
 PARAMETER(PAR.Use_PO_Price);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Terms_Code);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.User_Original_Entry);
 PARAMETER(PAR.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Palletize);
 PARAMETER(PAR.Reefer_Temperature);
 PARAMETER(PAR.Load_Type);
 PARAMETER(PAR.Load_Plan_Order);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Shipping_Temp_Code_C_F);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(PAR.OD_Spot_Buy);
 PARAMETER(PAR.Next_Order_Number);
 {
  //?USER: Processing if Data record not found

  //?** Error if no detail records in the Work File
  EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER('Y');
  {
   //?USER: Processing before Data update

   //?** Chg line status to Entered when errors so Order will be reviewed
   // DB1.Header Status = CND.Entered
   DB1.Header_Status = 'E';

  }

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.POD Added to an Order is Selected for Add to Ord
  IF DB1.POD_Added_to_an_Order = 'X';

  //?** Populate Order Detail Fields & create OD record
  DO;

  // LCL.Customer Number USR 1 = PAR.Customer Number Pass  USR
  LCL.Customer_Number_USR_1 = PAR.Customer_Number_Pass_USR;

  //?10/01/19 DN S15503-Original Code, Commented Out. 2nd Read Not Required.
  // LCL.Order Line Error Type = PAR.Order Line Error Type
  LCL.Order_Line_Error_Type = PAR.Order_Line_Error_Type;

  // PAR.Order Sequence Number = PAR.Order Sequence Number + CND.One
  PAR.Order_Sequence_Number = PAR.Order_Sequence_Number + 1;

  // PAR.Order Secondary Line Seq = CON.1
  PAR.Order_Secondary_Line_Seq = 1;

  //?10/26/17 DN E011229-Populate Item Code Number & Age Days.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Item Code Number 7.0  USR = DB1.POD SBD Item Number
  LCL.Item_Code_Number_7_0_USR = DB1.POD_SBD_Item_Number;

  //?01/19/18 DN R12342-Populate Item Age Days
  // PAR.Item Age Days = DB1.POD Item Age Days
  PAR.Item_Age_Days = DB1.POD_Item_Age_Days;

  ENDIF;

  //?10/01/19 DN S15503-Initialize for Item Pricing U/M Processing.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Use PO Price = CND.No
  LCL.Use_PO_Price = 'N';

  // PAR.Price Status = CND.Blank
  PAR.Price_Status = *BLANK;

  // LCL.Extended Amount = CON.*ZERO
  LCL.Extended_Amount = *ZERO;

  // LCL.Price Overage Override = CON.*ZERO
  LCL.Price_Overage_Override = *ZERO;

  // LCL.Unit Price - Credit = CON.*ZERO
  LCL.Unit_Price_Credit = *ZERO;

  //?Allow Item Pricing If Item List Cost Exist.
  CASE;

  // IF PAR.Use PO Price is Yes
  IF PAR.Use_PO_Price = 'Y';

  // AND DB1.G6803-ITEM LIST COST is > 0
  AND DB1.G6803_ITEM_LIST_COST > *ZERO;

  // LCL.Use PO Price = CND.Yes
  LCL.Use_PO_Price = 'Y';

  // PAR.Price Status = CND.Unpriced
  PAR.Price_Status = 'U';

  ENDIF;

  ENDIF;

  //?10/01/19 DN S15503-Existing Code. Get Type Code & AFR.
  EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Customer_Number_Pass_USR);
  PARAMETER(LCL.Type_Code);
  PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Edt OD Pricing Dflts  XF.
  CALL PROGRAM(Edt OD Pricing Dflts  XF) ('PNS2XFR');
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Market_Pricing_Date);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(LCL.Date_Method_Code);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(LCL.Price_Overage_Override);
  PARAMETER(PAR.Price_Code);
  PARAMETER(LCL.OD_Ceiling_Price);
  PARAMETER(LCL.OD_Market_Begin_Date);
  PARAMETER(LCL.OD_Market_Ending_Date);
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(LCL.Customer_Number_USR_1);
  PARAMETER(LCL.Type_Code);

  //?10/01/19 DN S15503-Use 'Rtv for Itm Dtl Intrf3 RT' Instead of PDC3XFR.
  EXECUTE FUNCTION(Rtv for Itm Dtl Intrf3 RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2176427;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Order_Desc_Line_Two);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(LCL.UOM_Second);
  PARAMETER(LCL.UOM_Third);
  PARAMETER(PAR.U_M_Base_Price);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(LCL.Item_Level);
  PARAMETER(LCL.Production_Date_Control);
  PARAMETER(LCL.Catch_Weight_Status);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Transportation_Temp);
  PARAMETER(NLL.Item_Type_Code);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(NLL.Default_Warehouse);
  PARAMETER(NLL.Price_Method_Default);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(NLL.Variety_Rendered_Cut);
  PARAMETER(LCL.Primal_Group_Code);
  PARAMETER(NLL.Item_Target_Price);
  PARAMETER(NLL.Item_TF_Exempt_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.OD Pallet Type = PAR.OD Pallet Type
  LCL.OD_Pallet_Type = PAR.OD_Pallet_Type;

  //?Default Price Method Code if it is passed in blank
  CASE;

  // IF PAR.Price Method Code is Blank
  IF PAR.Price_Method_Code = *BLANK;

  // PAR.Price Method Code = LCL.Price Method Code
  PAR.Price_Method_Code = LCL.Price_Method_Code;

  ENDIF;

  //?Default Date Method Code if it is passed in zeros
  CASE;

  // IF PAR.Date Method Code is Not Entered
  IF PAR.Date_Method_Code = *BLANK;

  // PAR.Date Method Code = LCL.Date Method Code
  PAR.Date_Method_Code = LCL.Date_Method_Code;

  ENDIF;

  //?Default pallet type
  CASE;

  // IF PAR.OD Pallet Type is None
  IF PAR.OD_Pallet_Type = *BLANK;

  // LCL.OD Pallet Type = CND.#2 Pallet
  LCL.OD_Pallet_Type = 02;

  ENDIF;

  //?10/01/19 DN S15503-Commented Out. Use 'Rtv for Itm Dtl Intrf3 RT' Instead.
  // LCL.Weight Ordered = LCL.Unit Weight Ordered U/M * DB1.G6801-QUANTITY ORDERED *
  LCL.Weight_Ordered = LCL.Unit_Weight_Ordered_U_M * DB1.G6801_QUANTITY_ORDERED;

  EXECUTE FUNCTION(Rtv Item Def/TFExp/CO RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1962838;
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(LCL.TF_Co_Ownership_Sts);
  PARAMETER(LCL.Item_TF_Exempt_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Set/Val OH TF Exempt  IF) TYPE(EXCINTFUN)                      AC1960076;
  PARAMETER(PAR.OH_TF_Exempt_Code);
  PARAMETER(LCL.Ord_TF_Exempt_Code);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(LCL.Error_Status);
  PARAMETER(LCL.Customer_TF_Exempt_Code);
  PARAMETER(LCL.TF_Co_Ownership_Sts);
  {
   //?Execute internal function

   //?Set / Validate TF Exempt code values              RMC 8/24/05
   CASE;

   // IF PAR.OH TF Exempt Code is Blank
   IF PAR.OH_TF_Exempt_Code = *BLANK;

   //?VAL: Customer Exempt Code  w/Item Exempt Code
   CASE;

   // IF PAR.Customer TF Exempt Code is Not Exempt
   IF PAR.Customer_TF_Exempt_Code = 'NE';

   //?VAL: Item Exempt Code
   CASE;

   // IF PAR.Ord TF Exempt Code is Item Codes
   IF PAR.Ord_TF_Exempt_Code = 'EP'/'NE';

   // PAR.OH TF Exempt Code = PAR.Ord TF Exempt Code
   PAR.OH_TF_Exempt_Code = PAR.Ord_TF_Exempt_Code;

   ENDIF;

   //?VAL: Customer Exempt Code  w/Item Exempt Code
   // IF PAR.Customer TF Exempt Code is Exempt Customer
   IF PAR.Customer_TF_Exempt_Code = 'EC';

   // PAR.OH TF Exempt Code = PAR.Customer TF Exempt Code
   PAR.OH_TF_Exempt_Code = PAR.Customer_TF_Exempt_Code;

   //?VAL: Item Exempt Code
   CASE;

   // IF PAR.Ord TF Exempt Code is Not Exempt
   IF PAR.Ord_TF_Exempt_Code = 'NE';

   CASE;

   // IF PAR.TF Co-Ownership Sts is Co-Owned
   IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

   //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
   // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
   ERROR(USR4203);
   MSGPARM(PAR.Item_Code);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Customer
   PAR.Ord_TF_Exempt_Code = 'EC';

   ENDIF;

   //?VAL: Item Exempt Code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Product
   PAR.Ord_TF_Exempt_Code = 'EP';

   ENDIF;

   ENDIF;

   //?Set / Validate TF Exempt code values              RMC 8/24/05
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Validate after 1 line item has been entered
   //?If not Pre-Commencement, set exempt code
   CASE;

   // IF PAR.OH TF Exempt Code is Not Pre-Commencement
   IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

   //?VAL: Customer Exempt Code w/Item Exempt Code
   CASE;

   // IF PAR.Customer TF Exempt Code is Not Exempt
   IF PAR.Customer_TF_Exempt_Code = 'NE';

   //?Line item must eq whats in the header, else Error
   CASE;

   // IF PAR.OH TF Exempt Code NE PAR.Ord TF Exempt Code
   IF PAR.OH_TF_Exempt_Code <> PAR.Ord_TF_Exempt_Code;

   // Send error message - 'Tf Exempt error - cant mix exempt & non-exempt items for customer.'
   ERROR(USR3588);
   MSGPARM(PAR.Item_Code);

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   ENDIF;

   //?VAL: Customer Exempt Code w/Item Exempt Code
   // IF PAR.Customer TF Exempt Code is Exempt Customer
   IF PAR.Customer_TF_Exempt_Code = 'EC';

   //?VAL: Item Exempt Code
   CASE;

   // IF PAR.Ord TF Exempt Code is Not Exempt
   IF PAR.Ord_TF_Exempt_Code = 'NE';

   CASE;

   // IF PAR.TF Co-Ownership Sts is Co-Owned
   IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

   //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
   // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
   ERROR(USR4203);
   MSGPARM(PAR.Item_Code);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Customer
   PAR.Ord_TF_Exempt_Code = 'EC';

   ENDIF;

   //?VAL: Item Exempt Code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Exempt Product
   PAR.Ord_TF_Exempt_Code = 'EP';

   ENDIF;

   ENDIF;

   //?If not Pre-Commencement, set exempt code
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ord TF Exempt Code = CND.Pre Commencement
   PAR.Ord_TF_Exempt_Code = 'PC';

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(LCL.Warehouse_Type);
  PARAMETER(LCL.Fresh_Chilling_Time);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Warehouse Type is Frozen
   IF PAR.Warehouse_Type = 'FZ';

   EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
   PARAMETER(PAR.Company_Number);
   PARAMETER('FZNCHLTME');
   PARAMETER(PAR.System_Value_Numeric);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Fresh Chilling Time = PAR.System Value Numeric
   PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

   ENDIF;

  }

  // Call program Val ItmBal.Unit Cst    XF.
  CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(LCL.Unit_Cost_Per_Pound);
  PARAMETER(LCL.Error_Status);

  EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(LCL.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv Plan Prod Sts     XF.
  CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(LCL.OD_Production_Plan_Sts);

  //?10/01/19 DN S15503-Commented Out & Moved Above.
  // LCL.OD Price Type Ref Num = CND.Zero
  LCL.OD_Price_Type_Ref_Num = 0;

  // LCL.Detail Line Status = CND.Entered
  LCL.Detail_Line_Status = 'E';

  // LCL.Detail Line Status Last = CND.*None
  LCL.Detail_Line_Status_Last = *BLANK;

  // LCL.Price Overage Override = LCL.Unit Cost Per Pound
  LCL.Price_Overage_Override = LCL.Unit_Cost_Per_Pound;

  //?10/04/19 DN S15503-If 'Use PO Price=Y' Then Set Rqd Info for Item Pricing.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Trading Partner Setup to Use PO Price.
  CASE;

  // IF LCL.Use PO Price is Yes
  IF LCL.Use_PO_Price = 'Y';

  // LCL.Price Overage Override = DB1.G6803-ITEM LIST COST
  LCL.Price_Overage_Override = DB1.G6803_ITEM_LIST_COST;

  ENDIF;

  //?Always Calculate Unit Price - Credit.
  EXECUTE FUNCTION(Clc Unit Price-Credit IF) TYPE(EXCINTFUN)                      AC2176863;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(LCL.Price_Overage_Override);
  PARAMETER(LCL.Unit_Price_Credit);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(LCL.Primal_Group_Code);
  PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
  {
   //?Execute internal function

   //?*** Snippet Codes below were copied from Edt OD Pricing Validt IF.
   // PAR.Unit Price - Credit = CON.*ZERO
   PAR.Unit_Price_Credit = *ZERO;

   // Call program RTV PrcMthTyp/PrcTyp  XF.
   CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Price_Method_Code);
   PARAMETER(LCL.Price_Method_Type);
   PARAMETER(LCL.PMH_Price_Type);

   // Call program Rtv Market Dtls OrEnt XF.
   CALL PROGRAM(Rtv Market Dtls OrEnt XF) ('PNS1XFR');
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(LCL.Commodity_Price_Group);
   PARAMETER(LCL.Market_Prem_Ded);
   PARAMETER(LCL.Record_Found_USR);

   //?Record Found?
   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // LCL.Market Overage = LCL.Market Prem/Ded
   LCL.Market_Overage = LCL.Market_Prem_Ded;

   //?Record Found?
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Commodity Price Group = PAR.Commodity Price Group
   LCL.Commodity_Price_Group = PAR.Commodity_Price_Group;

   // LCL.Market Overage = PAR.Market Overage
   LCL.Market_Overage = PAR.Market_Overage;

   ENDIF;

   //?VAL: Price Method Type = Manual
   CASE;

   // IF LCL.Price Method Type is Manual Pricing
   IF LCL.Price_Method_Type = 'M';

   CASE;

   // IF PAR.Primal Group Code is NE Samples or Cut Loss
   IF PAR.Primal_Group_Code <> 'UNID';

   //?RMC S14013 remove chk for type n= Promo/Samples- we want them validated
   EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Price_Overage_Override);
   PARAMETER(LCL.Commodity_Price_Group);
   PARAMETER(LCL.Projected_Market_Price);
   PARAMETER(PAR.Default_Commod_Mark_basis);
   PARAMETER(LCL.Market_Overage);
   PARAMETER(LCL.Error_Status_3);
   PARAMETER(LCL.Minimum_Price_USR);
   PARAMETER(LCL.Maximum_Price_USR);
   PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
   {
    //?Execute internal function

    //?*---------------------------------------------------------------*
    //?Documentation:
    //?This internal function will determine if a manual price entered
    //?on an order detail line is within the Manual Pricing Acceptance
    //?Percentage from the Company Control file. If it does not fall
    //?within the percentage range then the market price will be used.
    //?If no market price is found then it is a manual price error
    //?*---------------------------------------------------------------*
    // PAR.Projected Market Price = CON.*ZERO
    PAR.Projected_Market_Price = *ZERO;

    // PAR.Minimum Price   USR = CON.*ZERO
    PAR.Minimum_Price_USR = *ZERO;

    // PAR.Maximum Price  USR = CON.*ZERO
    PAR.Maximum_Price_USR = *ZERO;

    // PAR.Error Status  3 = CND.Yes
    PAR.Error_Status_3 = 'Y';

    EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Manual_Price_Accept_Prcnt);
    PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Food Service and Co-Pack Items
    CASE;

    // IF PAR.Default Commod Mark basis is Food Service
    IF PAR.Default_Commod_Mark_basis = 'FSV';

    // OR PAR.Default Commod Mark basis is Co-Pack
    OR PAR.Default_Commod_Mark_basis = 'CPK';

    // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
    PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

    ENDIF;

    EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
    PARAMETER(PAR.Commodity_Market_Code);
    PARAMETER(PAR.Commodity_Price_Group);
    PARAMETER(9999999);
    PARAMETER(PAR.Projected_Market_Price);
    PARAMETER(WRK.USR_Date_Priced);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PAR.Commodity Market Price = DB1.Commodity Market Price
     PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

     // PAR.USR Date Priced = DB1.Market Price Date
     PAR.USR_Date_Priced = DB1.Market_Price_Date;

     QUIT;

    }

    // Projected Market Price
    PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
    + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

    //?If a market price is found for co/cust market code default
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // Minimum price allowed
    PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
    * PAR.Projected_Market_Price 'H';

    // Maximum price allowed
    PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
    * PAR.Projected_Market_Price 'H';

    //?If the Price Override is within the range then error status is no
    CASE;

    // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
    IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

    // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
    AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

    // PAR.Error Status  3 = CND.No
    PAR.Error_Status_3 = 'N';

    ENDIF;

    //?If a market price is found for co/cust market code default
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?If no price for co/cust market code then use co/item market code
    EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
    PARAMETER(PAR.Default_Commod_Mark_basis);
    PARAMETER(PAR.Commodity_Price_Group);
    PARAMETER(9999999);
    PARAMETER(PAR.Projected_Market_Price);
    PARAMETER(WRK.USR_Date_Priced);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PAR.Commodity Market Price = DB1.Commodity Market Price
     PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

     // PAR.USR Date Priced = DB1.Market Price Date
     PAR.USR_Date_Priced = DB1.Market_Price_Date;

     QUIT;

    }

    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // Minimum price allowed
    PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
    * PAR.Projected_Market_Price 'H';

    // Maximum price allowed
    PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
    * PAR.Projected_Market_Price 'H';

    //?If the Price Override is within the range then error status is no
    CASE;

    // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
    IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

    // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
    AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

    // PAR.Error Status  3 = CND.No
    PAR.Error_Status_3 = 'N';

    ENDIF;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Projected Market Price = CON.*ZERO
    PAR.Projected_Market_Price = *ZERO;

    ENDIF;

    ENDIF;

   }

   // PAR.Unit Price - Credit = LCL.Projected Market Price
   PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?10/01/19 DN S15503-Using Incorrect Ctxt. Use DB1.G6801-QUANTITY ORDERED.
  EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(PAR.Customer_Number_Pass_USR);
  PARAMETER(PAR.Market_Pricing_Date);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(LCL.Price_Overage_Override);
  PARAMETER(LCL.Contract_Number);
  PARAMETER(LCL.Pricing_Date_Used);
  PARAMETER(DB1.G6801_QUANTITY_ORDERED);
  PARAMETER(NLL.Cntrt_Enter_no_QT_Price);
  PARAMETER(NLL.Cntrt_#_does_not_Exit);
  PARAMETER(NLL.Qty_ordered_Contract);
  PARAMETER(NLL.Contract_Expired);
  PARAMETER(NLL.Price_Override_Required);
  PARAMETER(NLL.Price_Method_QT_Cntrt_0);
  PARAMETER(NLL.Prc_Code_FRM_or_MKT);
  PARAMETER(NLL.Mkt_Pricing_Date_not_0);
  PARAMETER(NLL.Mkt_Meth_and_Date_both);
  PARAMETER(NLL.Price_Override_Req_EXT);
  PARAMETER(NLL.Contract_Exists_for_Item);
  PARAMETER(NLL.Price_Override_not_Allowd);
  PARAMETER(JOB.*Job_date);
  PARAMETER(LCL.Price_Method_Type);
  {
   //?Execute internal function

   // PAR.Contract Exists for Item = CND.blank
   PAR.Contract_Exists_for_Item = *BLANK;

   // PAR.Cntrt Enter no QT Price = CND.blank
   PAR.Cntrt_Enter_no_QT_Price = *BLANK;

   // PAR.Cntrt.# does not Exit = CND.blank
   PAR.Cntrt_#_does_not_Exit = *BLANK;

   // PAR.Qty ordered > Contract = CND.blank
   PAR.Qty_ordered_Contract = *BLANK;

   // PAR.Contract Expired = CND.blank
   PAR.Contract_Expired = *BLANK;

   // PAR.Price Override Required = CND.blank
   PAR.Price_Override_Required = *BLANK;

   // PAR.Price Method QT & Cntrt 0 = CND.blank
   PAR.Price_Method_QT_Cntrt_0 = *BLANK;

   // PAR.Prc Code FRM or MKT = CND.blank
   PAR.Prc_Code_FRM_or_MKT = *BLANK;

   // PAR.Mkt Pricing Date not 0 = CND.blank
   PAR.Mkt_Pricing_Date_not_0 = *BLANK;

   // PAR.Mkt Meth. and Date both = CND.blank
   PAR.Mkt_Meth_and_Date_both = *BLANK;

   // PAR.Price Override Req. EXT = CND.blank
   PAR.Price_Override_Req_EXT = *BLANK;

   // PAR.Price Override not Allowd = CND.blank
   PAR.Price_Override_not_Allowd = *BLANK;

   //?Get Price Method Type
   EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Price_Method_Code);
   PARAMETER(PAR.Price_Method_Type);
   PARAMETER('O');
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Check if Contract exists for Item
   //?A Contract Exists for this customer and item.
   CASE;

   // IF PAR.Contract Number is Zero
   IF PAR.Contract_Number = *ZERO;

   EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Order_Date);
   PARAMETER(PAR.Contract_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    CASE;

    // IF PAR.Effective Date GE DB1.Effective Date
    IF PAR.Effective_Date >= DB1.Effective_Date;

    // AND PAR.Effective Date LE DB1.End Date Effective
    AND PAR.Effective_Date <= DB1.End_Date_Effective;

    // PGM.*Return code = CND.*Record already exists
    PGM.*Return_code = 'Y2U0003';

    ENDIF;

    // PAR.Contract Number = DB1.Contract Number
    PAR.Contract_Number = DB1.Contract_Number;

   }

   // WRK.Contract Number = PAR.Contract Number
   WRK.Contract_Number = PAR.Contract_Number;

   CASE;

   // IF PGM.*Return code is *Record already exists
   IF PGM.*Return_code = 'Y2U0003';

   // PAR.Contract Exists for Item = CND.yes
   PAR.Contract_Exists_for_Item = 'Y';

   ENDIF;

   ENDIF;

   //?Edit Contract Number
   CASE;

   // IF PAR.Contract Number is Entered
   IF PAR.Contract_Number > *ZERO;

   EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Effective_Date);
   PARAMETER(PAR.End_Date_Effective);
   PARAMETER(PAR.Maximum_Quantity);
   PARAMETER(PAR.Quantity_Sold);
   PARAMETER(PAR.Contract_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Set Contract Error Parms
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Cntrt.# does not Exit = CND.yes
   PAR.Cntrt_#_does_not_Exit = 'Y';

   //?Set Contract Error Parms
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Total Quantity Ordered = PAR.Quantity Sold + PAR.Quantity Ordered
   WRK.Total_Quantity_Ordered = PAR.Quantity_Sold + PAR.Quantity_Ordered;

   CASE;

   // IF WRK.Total Quantity Ordered GT PAR.Maximum Quantity
   IF WRK.Total_Quantity_Ordered > PAR.Maximum_Quantity;

   // PAR.Qty ordered > Contract = CND.yes
   PAR.Qty_ordered_Contract = 'Y';

   ENDIF;

   CASE;

   // IF PAR.End Date Effective LE PAR.Order Date
   IF PAR.End_Date_Effective <= PAR.Order_Date;

   // PAR.Contract Expired = CND.yes
   PAR.Contract_Expired = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?Validity Checking
   //?Price Override and Manual Price Method
   CASE;

   // IF PAR.Price Method Type is Manual Pricing
   IF PAR.Price_Method_Type = 'M';

   // AND PAR.Price Overage Override is Equal zero
   AND PAR.Price_Overage_Override = *ZERO;

   // PAR.Price Override Required = CND.yes
   PAR.Price_Override_Required = 'Y';

   ENDIF;

   //?Price override and EXT price method
   CASE;

   // IF PAR.Price Method Type is Extended Pricing
   IF PAR.Price_Method_Type = 'X';

   // AND PAR.Price Overage Override is Equal zero
   AND PAR.Price_Overage_Override = *ZERO;

   // PAR.Price Override Req. EXT = CND.yes
   PAR.Price_Override_Req_EXT = 'Y';

   ENDIF;

   //?FRM / MKT Checks
   CASE;

   // IF PAR.Price Method Type is Market or Formula
   IF PAR.Price_Method_Type = 'F'/'K';

   //?Market Code Must be entered
   CASE;

   // IF PAR.Commodity Market Code is Not Entered
   IF PAR.Commodity_Market_Code = *BLANK;

   // PAR.Prc Code FRM or MKT = CND.yes
   PAR.Prc_Code_FRM_or_MKT = 'Y';

   ENDIF;

   //?Market Price Date field not zero
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // PAR.Mkt Pricing Date not 0 = CND.yes
   PAR.Mkt_Pricing_Date_not_0 = 'Y';

   ENDIF;

   CASE;

   // IF PAR.Price Overage Override is Not Zeros
   IF PAR.Price_Overage_Override <> *ZERO;

   // PAR.Price Override not Allowd = CND.yes
   PAR.Price_Override_not_Allowd = 'Y';

   ENDIF;

   ENDIF;

   //?MKT date Method entered and Mkt Price Date both entered.
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // AND PAR.Market Pricing Date is NE Zero
   AND PAR.Market_Pricing_Date <> *ZERO;

   // PAR.Mkt Meth. and Date both = CND.yes
   PAR.Mkt_Meth_and_Date_both = 'Y';

   ENDIF;

  }

  // LCL.Weight Scheduled = CON.*ZERO
  LCL.Weight_Scheduled = *ZERO;

  // LCL.Quantity Scheduled = CON.*ZERO
  LCL.Quantity_Scheduled = *ZERO;

  // LCL.Error Status = CND.no
  LCL.Error_Status = 'N';

  EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
  PARAMETER(LCL.Production_Ovr_AgeDte_To);
  PARAMETER(LCL.Production_AgeDte_Fr);
  PARAMETER(LCL.Production_AgeDte_To);
  PARAMETER(LCL.Error_Status);
  PARAMETER(WRK.Company_Organization);
  PARAMETER('V');
  {
   //?Execute internal function

   // WRK.Error Flag            USR = CND.Blank
   WRK.Error_Flag_USR = *BLANK;

   // PAR.Error Status = CND.blank
   PAR.Error_Status = *BLANK;

   // WRK.Error Reason Descript 1 = CON.*BLANK
   WRK.Error_Reason_Descript_1 = *BLANK;

   // WRK.Error Reason Descript 2 = CON.*BLANK
   WRK.Error_Reason_Descript_2 = *BLANK;

   // WRK.Error Reason Descript 3 = CON.*BLANK
   WRK.Error_Reason_Descript_3 = *BLANK;

   // WRK.Error Reason Descript 4 = CON.*BLANK
   WRK.Error_Reason_Descript_4 = *BLANK;

   // WRK.Error Reason Descript 5 = CON.*BLANK
   WRK.Error_Reason_Descript_5 = *BLANK;

   CASE;

   // IF PAR.Company Organization is Seaboard
   IF PAR.Company_Organization = 'S';

   CASE;

   // IF PAR.Requested Delivery Date is not entered
   IF PAR.Requested_Delivery_Date = *ZERO;

   // Send error message - 'Requested Delv Date is required'
   ERROR(USR4329);
   MSGPARM(PAR.Requested_Delivery_Date);

   // IF PAR.Scheduled Ship Date is not entered
   IF PAR.Scheduled_Ship_Date = *ZERO;

   // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
   ERROR(USR2230);
   MSGPARM(PAR.Scheduled_Ship_Date);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program Val Age information   XF.
   CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.Error_Flag_USR);
   PARAMETER(WRK.Error_Reason_Descript_1);
   PARAMETER(WRK.Error_Reason_Descript_2);
   PARAMETER(WRK.Error_Reason_Descript_3);
   PARAMETER(WRK.Error_Reason_Descript_4);
   PARAMETER(WRK.Error_Reason_Descript_5);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Item_Age_Days);
   PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
   PARAMETER(PAR.Production_Ovr_AgeDte_To);
   PARAMETER(PAR.Production_AgeDte_Fr);
   PARAMETER(PAR.Production_AgeDte_To);

   //?Verify if message should be sent if validation is required
   CASE;

   // IF WRK.Error Flag            USR is Yes
   IF WRK.Error_Flag_USR = 'Y';

   // AND PAR.Production Dates Sts Usr is Validation routine
   AND PAR.Production_Dates_Sts_Usr = 'V';

   //?message 1 Product is shipped before product is made
   CASE;

   // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

   // Send error message - 'Prd Date is invalid for requested delivery date'
   ERROR(USR4307);
   MSGPARM(PAR.Production_AgeDte_Fr);

   ENDIF;

   //?message 2 Either Days or override date but not both
   CASE;

   // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

   // Send error message - 'Enter Age Days or Dates'
   ERROR(USR4304);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   //?message 3 With Chill Days Either Days or Override Dates required
   CASE;

   // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

   // Send error message - 'Override Dates is after shipped date'
   ERROR(USR4305);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   //?message 4 From date is > then SHIP DATE
   CASE;

   // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

   // Send error message - 'Override Dates is after shipped date'
   ERROR(USR4305);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   //?message 5 To date is > then SHIP DATE
   CASE;

   // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
   IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

   // Send error message - 'Override Dates is after shipped date'
   ERROR(USR4305);
   MSGPARM(PAR.Item_Age_Days);
   MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
   MSGPARM(PAR.Production_Ovr_AgeDte_To);

   ENDIF;

   CASE;

   // IF PAR.Production Ovr AgeDte Fr is not entered
   IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

   // Send error message - 'Invalid Item Age Days'
   ERROR(USR4309);
   MSGPARM(PAR.Item_Age_Days);

   // IF *OTHERWISE
   IF *OTHERWISE;

   // Send error message - 'Invalid Production Override Age Frm/To Dates'
   ERROR(USR4310);
   MSGPARM(PAR.Production_AgeDte_Fr);
   MSGPARM(PAR.Production_AgeDte_To);

   ENDIF;

   // PAR.Error Status = CND.yes
   PAR.Error_Status = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?** Flag if Age Days is invalid
  CASE;

  // IF LCL.Error Status is yes
  IF LCL.Error_Status = 'Y';

  // LCL.Order Line Error Type = CND.Invalid Item Age Code
  LCL.Order_Line_Error_Type = 'AC';

  // LCL.Order Requires Review = CND.Yes
  LCL.Order_Requires_Review = 'Y';

  EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(LCL.Order_Requires_Review);
  {
   //?USER: Processing before Data update

   //?** Chg line status to Entered when errors so Order will be reviewed
   // DB1.Header Status = CND.Entered
   DB1.Header_Status = 'E';

  }

  // LCL.Order Requires Review = CND.No
  LCL.Order_Requires_Review = *BLANK;

  // WRK.Detail Line Status = CND.Entered
  WRK.Detail_Line_Status = 'E';

  ENDIF;

  // LCL.Deadline Depart Date LH = PAR.Scheduled Ship Date
  LCL.Deadline_Depart_Date_LH = PAR.Scheduled_Ship_Date;

  // LCL.Deadline Depart Time LH = CON.080000
  LCL.Deadline_Depart_Time_LH = 080000;

  // PAR.Event Code = CND.01 Order Entry
  PAR.Event_Code = '01';

  //?** Allocation
  //?** Per Steve Burke, don't flag Product Availability errors
  //?** Allocate if Production Plan Status = Yes (" ")
  CASE;

  // IF LCL.OD Production Plan Sts is Yes
  IF LCL.OD_Production_Plan_Sts = *BLANK;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.G6801_QUANTITY_ORDERED);
  PARAMETER(LCL.Weight_Ordered);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
  PARAMETER(LCL.Production_Ovr_AgeDte_To);

  //?** Weight scheduled = zeros is not an error
  CASE;

  // IF LCL.Weight Scheduled is Equal to zero
  IF LCL.Weight_Scheduled = *ZERO;

  // LCL.Order Requires Review = CND.No
  LCL.Order_Requires_Review = *BLANK;

  // LCL.Detail Line Status = CND.Entered
  LCL.Detail_Line_Status = 'E';

  ENDIF;

  ENDIF;

  //?10/04/19 DN S15503-PAR.Weight Ordered never set. Use LCL.Weight Ordered.
  //?10/04/19 DN S15503-Set Extended Amt/Price Overage O/R Based on Use PO Prc.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Always Set Extended Amount.
  // LCL.Extended Amount = LCL.Weight Ordered * LCL.Price Overage Override *Rounded
  LCL.Extended_Amount = LCL.Weight_Ordered * LCL.Price_Overage_Override 'H';

  //?If Use PO Price=Y Then Reset Extended Amount to 0.
  CASE;

  // IF LCL.Use PO Price is Yes
  IF LCL.Use_PO_Price = 'Y';

  //?NOTE: POST process will recalculate Extended Amount.
  // LCL.Extended Amount = CON.*ZERO
  LCL.Extended_Amount = *ZERO;

  //?If Use PO Price=Y Then Reset Extended Amount to 0.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Set Price Overage Override=0 to NOT Calculate Item Pricing U/M.
  // LCL.Price Overage Override = CON.*ZERO
  LCL.Price_Overage_Override = *ZERO;

  ENDIF;

  ENDIF;

  //?01/14/21 DN R17029-Default 'OD Spot Buy=N'.
  //?09/14/21 DN W77844-Set 'OD Spot Buy' from PAR.
  EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(DB1.ITEM_SEQUENCE_NUMBER);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(LCL.Item_Code_Number_7_0_USR);
  PARAMETER(PAR.Warehouse_Code_PASS_USR);
  PARAMETER(PAR.Customer_Number_Pass_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Detail_Line_Status);
  PARAMETER(LCL.Detail_Line_Status_Last);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Comment_Print_Acknowledge);
  PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
  PARAMETER(LCL.Comment_Print_Pick_Slip);
  PARAMETER(LCL.Comment_Print_Ship_Doc);
  PARAMETER(LCL.Extended_Amount);
  PARAMETER(PAR.Market_Pricing_Date);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(LCL.Price_Overage_Override);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Price_Status);
  PARAMETER(*ZERO);
  PARAMETER(PAR.U_M_Base_Price);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(LCL.Work_Confirm_Status);
  PARAMETER(LCL.Work_Over_Short_Status);
  PARAMETER(LCL.OD_Production_Plan_Sts);
  PARAMETER(LCL.Order_Desc_Line_One);
  PARAMETER(LCL.Order_Desc_Line_Two);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Palletize);
  PARAMETER('N');
  PARAMETER(LCL.Catch_Weight_Status);
  PARAMETER(PAR.Price_Audit);
  PARAMETER('MTH');
  PARAMETER(LCL.Production_Date_Control);
  PARAMETER(PAR.Rated_Freight);
  PARAMETER(DB1.G6801_QUANTITY_ORDERED);
  PARAMETER(LCL.Weight_Ordered);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Cost_Pricing_U_M);
  PARAMETER(PAR.Unit_Cost_Per_Pound);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Unit_Price_Credit);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER('Y');
  PARAMETER('Y');
  PARAMETER('Y');
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Level);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Date_of_Original_Entry);
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.Event_Code);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(LCL.Modified_Flag);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OD_Schedule_Override_Sts);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OD_Adj_Type_Override);
  PARAMETER(PAR.Affect_Trade_Fund);
  PARAMETER(PAR.Affect_Commission);
  PARAMETER(PAR.Affect_Pricing);
  PARAMETER(PAR.Released_by_User_Sts_Y_N);
  PARAMETER(LCL.Item_TF_Exempt_Code);
  PARAMETER(LCL.OD_Pallet_Type);
  PARAMETER(LCL.Production_Warehouse);
  PARAMETER(PAR.OD_Price_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Deadline_Depart_Date_LH);
  PARAMETER(LCL.OD_Price_Type_Ref_Num);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Deadline_Depart_Time_LH);
  PARAMETER(PAR.Price_Code);
  PARAMETER(PAR.Maximum_Net_Weight);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.OD_Item_Target_Price);
  PARAMETER(*ZERO);
  PARAMETER(PAR.OD_Maximum_Unit_Weight);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(LCL.Production_Ovr_AgeDte_Fr);
  PARAMETER(LCL.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.OD_Spot_Buy);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Order_Line_Error_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program Rtv First Consumed Itm XF.
   CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Consumed_Item_Code);

   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Warehouse);
   PARAMETER(NLL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
   DO;

   // Call program Rtv Tare Weight        XF.
   CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Misc_Tare_Weight);

   //?wi464
   // Call program RTV Itm BxID & Tares  XF.
   CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Box_Weight);
   PARAMETER(LCL.Number_Cases_On_A_Pallet);
   PARAMETER(LCL.Pallet_Tare_Weight);
   PARAMETER(LCL.Box_iD);
   PARAMETER(DB1.OD_Pallet_Type);

   // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
   LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

   // Box + Misc Tare
   LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

   //?Pallet Tare
   CASE;

   // IF DB1.Palletize is yes
   IF DB1.Palletize = 'Y';

   CASE;

   // IF LCL.Number Cases On A Pallet is GT Zero
   IF LCL.Number_Cases_On_A_Pallet > *ZERO;

   // Pallet Weight
   LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
   * LCL.Pallet_Tare_Weight 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Weight 1.2             .U = CON.*ZERO
   LCL.Weight_1_2_U = *ZERO;

   ENDIF;

   //?Pallet Tare
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Weight 1.2             .U = CON.*ZERO
   LCL.Weight_1_2_U = *ZERO;

   ENDIF;

   // Estimated Gross
   DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
   + LCL.Weight_1_2_U;

   //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
   ENDDO;

   //?USER: Processing after Data update

   //?WI642   JM-02/19/25-Add load order change log on new items.
   //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
   CASE;

   // IF DB1.OD MPR Prc Ready to Send is yes
   IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

   //?Always create price type log ORDPRT
   // LCL.Text 3 Length USR = DB1.Order Sequence Number
   LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

   // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
   LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

   // LCL.Change Log New Value = PAR.OD Price Type
   LCL.Change_Log_New_Value = PAR.OD_Price_Type;

   // Call program CRT Load/OrderChg n/ld XF.
   CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
   PARAMETER(*ZERO);
   PARAMETER('ORDPRT');
   PARAMETER('SLS');
   PARAMETER(LCL.Change_Log_Prior_Value);
   PARAMETER(LCL.Change_Log_New_Value);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);

   ENDIF;

   //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
   CASE;

   // IF DB1.Order Number is ne 9999999
   IF DB1.Order_Number <> 9999999;

   // LCL.Text 3 Length USR = DB1.Order Sequence Number
   LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

   // LCL.Weight Beg Inv usr = CND.Not Entered
   LCL.Weight_Beg_Inv_usr = *ZERO;

   // LCL.Text USR 7 = LCL.Weight Beg Inv usr
   LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

   // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
   LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

   // LCL.Weight Beg Inv usr = PAR.Weight Ordered
   LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

   // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
   LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

   // Call program CRT Load/OrderChg n/ld XF.
   CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
   PARAMETER(*ZERO);
   PARAMETER('ORDWGT');
   PARAMETER('SLS');
   PARAMETER(LCL.Change_Log_Prior_Value);
   PARAMETER(LCL.Change_Log_New_Value);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);

   // LCL.Weight Beg Inv usr = CND.Not Entered
   LCL.Weight_Beg_Inv_usr = *ZERO;

   // LCL.Text USR 7 = LCL.Weight Beg Inv usr
   LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

   // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
   LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

   // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
   LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

   // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
   LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

   // Call program CRT Load/OrderChg n/ld XF.
   CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
   PARAMETER(*ZERO);
   PARAMETER('ORDQTY');
   PARAMETER('SLS');
   PARAMETER(LCL.Change_Log_Prior_Value);
   PARAMETER(LCL.Change_Log_New_Value);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);

   ENDIF;

  }

  // PAR.Quantity Ordered = PAR.Quantity Ordered * PAR.Weight Ordered *
  PAR.Quantity_Ordered = PAR.Quantity_Ordered * PAR.Weight_Ordered;

  // PAR.Order Weight Total = PAR.Order Weight Total + PAR.Weight Ordered
  PAR.Order_Weight_Total = PAR.Order_Weight_Total + PAR.Weight_Ordered;

  ENDDO;

  //?chg sts from an X to a Y so it cant be added again
  EXECUTE FUNCTION(Chg EDI Add to order   CH) TYPE(CHGOBJ) FILE(ECP005)           AC2143171;
  PARAMETER(DB1.ST02_TRANS_SET_CONTROL_NU);
  PARAMETER(DB1.ITEM_SEQUENCE_NUMBER);
  PARAMETER('Y');
  ENDIF;

 }

}


//?** Put OD weight ordered into the OH total weight
// PAR.Order Weight Total = WRK.Total Weight Ordered USR
PAR.Order_Weight_Total = WRK.Total_Weight_Ordered_USR;

//?Update order weight total here, since header has already been created
EXECUTE FUNCTION(CHG Order Value,Wgt    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1403601;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


ENDDO;

//?S17059 DN 04/14/21-Create Any Missing XREF in Customer Item Ref for EDI.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Exc Upd CIR 2 Prod-EDI XF.
CALL PROGRAM(Exc Upd CIR 2 Prod-EDI XF) ('PUS4XFR');
PARAMETER(PAR.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(PAR.Ship_To_Customer);

ENDIF;

//?** Run the Post,
DO;

// Call program EDT Post Open Orders 2 XF.
CALL PROGRAM(EDT Post Open Orders 2 XF) ('POI4XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('DOA');

ENDDO;

//?** Set Order Header Status & Order Detail Status = "E"ntered
DO;

// WRK.Header Status = CND.Entered
WRK.Header_Status = 'E';

// WRK.Header Status Last = CND.*None
WRK.Header_Status_Last = *BLANK;

EXECUTE FUNCTION(CHG Hdr Sts/Last Sts   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1576239;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(WRK.Header_Status);
PARAMETER(WRK.Header_Status_Last);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// WRK.Detail Line Status = CND.Entered
WRK.Detail_Line_Status = 'E';

// WRK.Detail Line Status Last = CND.*None
WRK.Detail_Line_Status_Last = *BLANK;

EXECUTE FUNCTION(CHG OD Sts, all items  IF) TYPE(EXCINTFUN)                     AC2142572;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(WRK.Detail_Line_Status);
PARAMETER(WRK.Detail_Line_Status_Last);
{
 //?Execute internal function

 // PAR.Detail Line Status = CND.Entered
 PAR.Detail_Line_Status = 'E';

 // PAR.Detail Line Status Last = CND.*None
 PAR.Detail_Line_Status_Last = *BLANK;

 EXECUTE FUNCTION(CHG Detail Status      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425418;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDDO;

